uint64_t mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  if (*(char *)(*a1 + v3 - 1) == a3)
  {
    a1[1] = v3 - 1;
    return 1;
  }
  else
  {
    mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_0::operator()((uint64_t)v14, a2);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    if (v21)
    {
      v5 = (_QWORD **)__p;
      if (__p)
      {
        v6 = v20;
        v7 = __p;
        if (v20 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v20 = v5;
        operator delete(v7);
      }
      v8 = v17;
      if (v17)
      {
        v9 = v18;
        v10 = v17;
        if (v18 != v17)
        {
          do
          {
            v12 = (void *)*--v9;
            v11 = v12;
            *v9 = 0;
            if (v12)
              operator delete[](v11);
          }
          while (v9 != v8);
          v10 = v17;
        }
        v18 = v8;
        operator delete(v10);
      }
      if (v15 != &v16)
        free(v15);
    }
  }
  return v4;
}

_QWORD *mlir::detail::Parser::parseExtendedAttr(mlir::detail::Parser *a1, uint64_t a2)
{
  uint64_t v4;
  mlir::StringAttr *v5;
  uint64_t *v6;
  uint64_t v7;
  mlir::Token *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t LocRange;
  uint64_t v16;
  uint64_t v17;
  uint64_t Loc;
  uint64_t v19;
  unint64_t v20;
  const unsigned __int8 *v21;
  int8x16_t *v22;
  unint64_t v23;
  unint64_t v24;
  const void **v25;
  const char *v26;
  _BOOL4 v27;
  uint64_t v28;
  _BOOL4 v29;
  int Key;
  uint64_t v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t Checked;
  _QWORD *v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t **(*Dialect)(uint64_t, uint64_t);
  uint64_t **(*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  mlir::MLIRContext *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t canMapOperands;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  _QWORD **v74;
  _QWORD **v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  void *v81;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  BOOL v86;
  int64_t v87;
  int64_t v88;
  int64_t v89;
  _QWORD v90[2];
  __int128 v91;
  __int16 v92;
  __int128 v93;
  const char *v94;
  __int16 v95;
  __int128 v96;
  const void **v97;
  const char *v98;
  __int128 v99;
  __int128 v100;
  mlir::detail::Parser *v101;
  void *v102;
  const void **v103;
  _QWORD v104[12];
  void *v105;
  _QWORD *v106;
  void *__p;
  _QWORD **v108;
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 1);
  v5 = **(mlir::StringAttr ***)v4;
  v6 = *(uint64_t **)(v4 + 128);
  v7 = *(_QWORD *)(v4 + 80);
  v10 = *(_DWORD *)(v4 + 56);
  v8 = (mlir::Token *)(v4 + 56);
  v9 = v10;
  v11 = *((_QWORD *)v8 + 1);
  v12 = *((_QWORD *)v8 + 2);
  v13 = v12 != 0;
  if (v12)
    ++v11;
  *(_QWORD *)&v99 = v11;
  *((_QWORD *)&v99 + 1) = v12 - v13;
  if (v9 == 2 && v12 == v13)
  {
    Checked = mlir::detail::Parser::codeCompleteDialectSymbol((uint64_t)a1);
LABEL_36:
    v41 = (_QWORD *)Checked;
    if (!Checked)
      goto LABEL_63;
    goto LABEL_73;
  }
  LocRange = mlir::Token::getLocRange(v8);
  v17 = v16;
  Loc = mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)a1 + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)a1 + 1) + 8), (uint64_t)&v100);
  v19 = *((_QWORD *)a1 + 1);
  *(_OWORD *)(v19 + 56) = v100;
  *(_QWORD *)(v19 + 72) = v101;
  LOBYTE(v100) = 46;
  v20 = llvm::StringRef::find((uint64_t *)&v99, (char *)&v100, 1uLL, 0);
  if (v20 == -1)
  {
    v25 = 0;
    v97 = 0;
    v98 = 0;
    v96 = v99;
    v21 = (const unsigned __int8 *)*((_QWORD *)&v99 + 1);
    v22 = (int8x16_t *)v99;
  }
  else
  {
    v21 = (const unsigned __int8 *)*((_QWORD *)&v99 + 1);
    v22 = (int8x16_t *)v99;
    if (v20 >= *((_QWORD *)&v99 + 1))
      v23 = *((_QWORD *)&v99 + 1);
    else
      v23 = v20;
    if (*((_QWORD *)&v99 + 1) >= v20 + 1)
      v24 = v20 + 1;
    else
      v24 = *((_QWORD *)&v99 + 1);
    v25 = (const void **)(v99 + v24);
    *(_QWORD *)&v96 = v99;
    *((_QWORD *)&v96 + 1) = v23;
    v26 = (const char *)(*((_QWORD *)&v99 + 1) - v24);
    v97 = (const void **)(v99 + v24);
    v98 = (const char *)(*((_QWORD *)&v99 + 1) - v24);
    if (*((_QWORD *)&v99 + 1) != v24)
    {
      v27 = 1;
      v28 = *((_QWORD *)a1 + 1);
      if (*(_DWORD *)(v28 + 56) != 23)
        goto LABEL_16;
      goto LABEL_40;
    }
  }
  v26 = 0;
  v27 = v22->u8[(_QWORD)v21 - 1] == 46;
  v28 = *((_QWORD *)a1 + 1);
  if (*(_DWORD *)(v28 + 56) != 23)
  {
LABEL_16:
    v29 = 0;
    if (!v27)
      goto LABEL_17;
LABEL_41:
    if (v27)
    {
      if (v29)
      {
        if (!mlir::detail::Parser::parseDialectSymbolBody(a1, (llvm::StringRef *)&v97, (BOOL *)&v100))
          goto LABEL_72;
        v42 = v97;
        v26 = v98;
      }
      else
      {
        v42 = v25;
      }
    }
    else
    {
      v97 = (const void **)(v96 + *((_QWORD *)&v96 + 1));
      v98 = 0;
      LOBYTE(v100) = 0;
      if (!mlir::detail::Parser::parseDialectSymbolBody(a1, (llvm::StringRef *)&v97, (BOOL *)&v100))
        goto LABEL_72;
      v44 = v98 != 0;
      if (v98)
        v42 = (const void **)((char *)v97 + 1);
      else
        v42 = v97;
      v26 = &v98[-v44];
      v97 = v42;
      v98 -= v44;
      if (!(_BYTE)v100)
      {
        if (v26 >= v26 - 1)
          --v26;
        v98 = v26;
      }
      v25 = (const void **)Loc;
    }
    v45 = v96;
    v90[0] = v25;
    v46 = *((_QWORD *)a1 + 1);
    v47 = a2;
    if (*(_DWORD *)(v46 + 56) != 15
      || (mlir::Lexer::lexToken((mlir::Lexer *)(v46 + 8), (uint64_t)&v100),
          v48 = *((_QWORD *)a1 + 1),
          *(_OWORD *)(v48 + 56) = v100,
          *(_QWORD *)(v48 + 72) = v101,
          (v47 = mlir::detail::Parser::parseType(a1)) != 0))
    {
      Dialect = mlir::MLIRContext::getOrLoadDialect(*(_QWORD *)a1, (void *)v45, *((size_t *)&v45 + 1));
      if (Dialect)
      {
        v50 = Dialect;
        v51 = mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)a1 + 1) + 56));
        v52 = *((_QWORD *)a1 + 1);
        *(_QWORD *)(v52 + 40) = v42;
        mlir::Lexer::lexToken((mlir::Lexer *)(v52 + 8), (uint64_t)&v100);
        v53 = *((_QWORD *)a1 + 1);
        *(_OWORD *)(v53 + 56) = v100;
        *(_QWORD *)(v53 + 72) = v101;
        *((_QWORD *)&v100 + 1) = mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)a1 + 1) + 56));
        v101 = a1;
        LOBYTE(v102) = 0;
        *(_QWORD *)&v100 = off_1E0E18B60;
        v103 = v42;
        v104[0] = v26;
        v41 = (_QWORD *)(*(uint64_t (**)(uint64_t **(*)(uint64_t, uint64_t), __int128 *, uint64_t))(*(_QWORD *)v50 + 32))(v50, &v100, v47);
        v54 = *((_QWORD *)a1 + 1);
        *(_QWORD *)(v54 + 40) = v51;
        mlir::Lexer::lexToken((mlir::Lexer *)(v54 + 8), (uint64_t)&v93);
        v55 = *((_QWORD *)a1 + 1);
        *(_OWORD *)(v55 + 56) = v93;
        *(_QWORD *)(v55 + 72) = v94;
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v100);
        if (!v41)
          goto LABEL_63;
        goto LABEL_73;
      }
      *(_QWORD *)&v93 = a1;
      *((_QWORD *)&v93 + 1) = v90;
      LOWORD(v103) = 261;
      v100 = v45;
      v58 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&v100);
      if (!v47)
        v47 = mlir::NoneType::get(v5, v57);
      Checked = mlir::OpaqueAttr::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedAttr(mlir::Type)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>, (uint64_t)&v93, v58, v42, v26, v47);
      goto LABEL_36;
    }
LABEL_72:
    v41 = 0;
    goto LABEL_63;
  }
LABEL_40:
  v29 = &v21[(_QWORD)v22] == *(const unsigned __int8 **)(v28 + 64);
  if (v29 || v27)
    goto LABEL_41;
LABEL_17:
  Key = llvm::StringMapImpl::FindKey((uint64_t *)v7, v22, v21);
  if (Key == -1)
    v31 = *(unsigned int *)(v7 + 8);
  else
    v31 = Key;
  if (v31 == *(_DWORD *)(v7 + 8))
  {
    v92 = 1283;
    v90[0] = "undefined symbol alias id '";
    v91 = v99;
    *(_QWORD *)&v93 = v90;
    v94 = "'";
    v95 = 770;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v93, &v100);
    if ((_QWORD)v100)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v100);
    if (v109)
    {
      v32 = (_QWORD **)__p;
      if (__p)
      {
        v33 = v108;
        v34 = __p;
        if (v108 != __p)
        {
          do
            v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          v34 = __p;
        }
        v108 = v32;
        operator delete(v34);
      }
      v35 = v105;
      if (v105)
      {
        v36 = v106;
        v37 = v105;
        if (v106 != v105)
        {
          do
          {
            v39 = (void *)*--v36;
            v38 = v39;
            *v36 = 0;
            if (v39)
              operator delete[](v38);
          }
          while (v36 != v35);
          v37 = v105;
        }
        v106 = v35;
        operator delete(v37);
      }
      if (v102 != v104)
        free(v102);
    }
    goto LABEL_72;
  }
  v43 = *(_QWORD *)v7;
  if (v6)
    mlir::AsmParserState::addAttrAliasUses(v6, (int8x16_t *)v99, *((const unsigned __int8 **)&v99 + 1), LocRange, v17);
  v41 = *(_QWORD **)(*(_QWORD *)(v43 + 8 * v31) + 8);
  if (!v41)
  {
LABEL_63:
    v56 = 0;
    v96 = 0uLL;
    if (!a2)
      return v41;
    goto LABEL_77;
  }
LABEL_73:
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v41 + 8))
  {
    v59 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v41 + 8);
    v56 = v41;
    *(_QWORD *)&v96 = v41;
    *((_QWORD *)&v96 + 1) = v59;
    if (!a2)
      return v41;
  }
  else
  {
    v56 = 0;
    v96 = 0uLL;
    if (!a2)
      return v41;
  }
LABEL_77:
  if (v56 && mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v96) != a2)
  {
    *(_QWORD *)&v93 = "attribute type different than expected: expected ";
    v95 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v93, &v100);
    if ((_QWORD)v100)
    {
      v60 = (char *)v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v90, a2);
      v61 = (char *)v102;
      if (v103 >= HIDWORD(v103))
      {
        v83 = v103 + 1;
        if (v102 <= v90 && (char *)v102 + 24 * v103 > (char *)v90)
        {
          v87 = (char *)v90 - (_BYTE *)v102;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v83, 24);
          v61 = (char *)v102;
          v60 = (char *)v102 + v87;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v83, 24);
          v60 = (char *)v90;
          v61 = (char *)v102;
        }
      }
      v62 = &v61[24 * v103];
      v63 = *(_OWORD *)v60;
      *((_QWORD *)v62 + 2) = *((_QWORD *)v60 + 2);
      *(_OWORD *)v62 = v63;
      v64 = ((_DWORD)v103 + 1);
      LODWORD(v103) = (_DWORD)v103 + 1;
      if ((_QWORD)v100)
      {
        LODWORD(v90[0]) = 3;
        v90[1] = ", but got ";
        *(_QWORD *)&v91 = 10;
        v65 = (char *)v90;
        v66 = (char *)v102;
        if (v64 >= HIDWORD(v103))
        {
          v85 = v64 + 1;
          v86 = (char *)v102 + 24 * v64 > (char *)v90;
          if (v102 <= v90 && v86)
          {
            v89 = (char *)v90 - (_BYTE *)v102;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v85, 24);
            v66 = (char *)v102;
            v65 = (char *)v102 + v89;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v85, 24);
            v65 = (char *)v90;
            v66 = (char *)v102;
          }
        }
        v67 = &v66[24 * v103];
        v68 = *(_OWORD *)v65;
        *((_QWORD *)v67 + 2) = *((_QWORD *)v65 + 2);
        *(_OWORD *)v67 = v68;
        LODWORD(v103) = (_DWORD)v103 + 1;
      }
    }
    canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v96);
    if ((_QWORD)v100)
    {
      v70 = (char *)v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v90, canMapOperands);
      v71 = (char *)v102;
      if (v103 >= HIDWORD(v103))
      {
        v84 = v103 + 1;
        if (v102 <= v90 && (char *)v102 + 24 * v103 > (char *)v90)
        {
          v88 = (char *)v90 - (_BYTE *)v102;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v84, 24);
          v71 = (char *)v102;
          v70 = (char *)v102 + v88;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v84, 24);
          v70 = (char *)v90;
          v71 = (char *)v102;
        }
      }
      v72 = &v71[24 * v103];
      v73 = *(_OWORD *)v70;
      *((_QWORD *)v72 + 2) = *((_QWORD *)v70 + 2);
      *(_OWORD *)v72 = v73;
      LODWORD(v103) = (_DWORD)v103 + 1;
      if ((_QWORD)v100)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v100);
    }
    if (v109)
    {
      v74 = (_QWORD **)__p;
      if (__p)
      {
        v75 = v108;
        v76 = __p;
        if (v108 != __p)
        {
          do
            v75 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v75 - 1);
          while (v75 != v74);
          v76 = __p;
        }
        v108 = v74;
        operator delete(v76);
      }
      v77 = v105;
      if (v105)
      {
        v78 = v106;
        v79 = v105;
        if (v106 != v105)
        {
          do
          {
            v81 = (void *)*--v78;
            v80 = v81;
            *v78 = 0;
            if (v81)
              operator delete[](v80);
          }
          while (v78 != v77);
          v79 = v105;
        }
        v106 = v77;
        operator delete(v79);
      }
      if (v102 != v104)
        free(v102);
    }
    return 0;
  }
  return v41;
}

uint64_t mlir::detail::Parser::parseExtendedType(mlir::detail::Parser *this)
{
  uint64_t v2;
  mlir::StringAttr *v3;
  uint64_t *v4;
  uint64_t v5;
  mlir::Token *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t LocRange;
  uint64_t v14;
  uint64_t v15;
  uint64_t Loc;
  uint64_t v17;
  unint64_t v18;
  const unsigned __int8 *v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  const void **v23;
  const char *v24;
  _BOOL4 v25;
  uint64_t v26;
  _BOOL4 v27;
  int Key;
  uint64_t v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v39;
  const void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **(*Dialect)(uint64_t, uint64_t);
  uint64_t **(*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v52[2];
  __int128 v53;
  __int16 v54;
  __int128 v55;
  const char *v56;
  __int16 v57;
  __int128 v58;
  const void **v59;
  const char *v60;
  __int128 v61;
  __int128 v62;
  mlir::detail::Parser *v63;
  void *v64;
  const void **v65;
  const char *v66;
  void *v67;
  _QWORD *v68;
  void *__p;
  _QWORD **v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  v3 = **(mlir::StringAttr ***)v2;
  v4 = *(uint64_t **)(v2 + 128);
  v5 = *(_QWORD *)(v2 + 80);
  v8 = *(_DWORD *)(v2 + 56);
  v6 = (mlir::Token *)(v2 + 56);
  v7 = v8;
  v9 = *((_QWORD *)v6 + 1);
  v10 = *((_QWORD *)v6 + 2);
  v11 = v10 != 0;
  if (v10)
    ++v9;
  *(_QWORD *)&v61 = v9;
  *((_QWORD *)&v61 + 1) = v10 - v11;
  if (v7 == 2 && v10 == v11)
    return mlir::detail::Parser::codeCompleteDialectSymbol((uint64_t)this);
  LocRange = mlir::Token::getLocRange(v6);
  v15 = v14;
  Loc = mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v62);
  v17 = *((_QWORD *)this + 1);
  *(_OWORD *)(v17 + 56) = v62;
  *(_QWORD *)(v17 + 72) = v63;
  LOBYTE(v62) = 46;
  v18 = llvm::StringRef::find((uint64_t *)&v61, (char *)&v62, 1uLL, 0);
  if (v18 == -1)
  {
    v23 = 0;
    v59 = 0;
    v60 = 0;
    v58 = v61;
    v19 = (const unsigned __int8 *)*((_QWORD *)&v61 + 1);
    v20 = (int8x16_t *)v61;
  }
  else
  {
    v19 = (const unsigned __int8 *)*((_QWORD *)&v61 + 1);
    v20 = (int8x16_t *)v61;
    if (v18 >= *((_QWORD *)&v61 + 1))
      v21 = *((_QWORD *)&v61 + 1);
    else
      v21 = v18;
    if (*((_QWORD *)&v61 + 1) >= v18 + 1)
      v22 = v18 + 1;
    else
      v22 = *((_QWORD *)&v61 + 1);
    v23 = (const void **)(v61 + v22);
    *(_QWORD *)&v58 = v61;
    *((_QWORD *)&v58 + 1) = v21;
    v24 = (const char *)(*((_QWORD *)&v61 + 1) - v22);
    v59 = (const void **)(v61 + v22);
    v60 = (const char *)(*((_QWORD *)&v61 + 1) - v22);
    if (*((_QWORD *)&v61 + 1) != v22)
    {
      v25 = 1;
      v26 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v26 + 56) != 23)
        goto LABEL_16;
LABEL_39:
      v27 = &v19[(_QWORD)v20] == *(const unsigned __int8 **)(v26 + 64);
      if (!v27 && !v25)
        goto LABEL_17;
LABEL_40:
      if (v25)
      {
        if (!v27)
        {
          v40 = v23;
          goto LABEL_57;
        }
        if (mlir::detail::Parser::parseDialectSymbolBody(this, (llvm::StringRef *)&v59, (BOOL *)&v62))
        {
          v40 = v59;
          v24 = v60;
LABEL_57:
          v52[0] = v23;
          Dialect = mlir::MLIRContext::getOrLoadDialect((uint64_t)v3, (void *)v58, *((size_t *)&v58 + 1));
          if (Dialect)
          {
            v44 = Dialect;
            v45 = mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
            v46 = *((_QWORD *)this + 1);
            *(_QWORD *)(v46 + 40) = v40;
            mlir::Lexer::lexToken((mlir::Lexer *)(v46 + 8), (uint64_t)&v62);
            v47 = *((_QWORD *)this + 1);
            *(_OWORD *)(v47 + 56) = v62;
            *(_QWORD *)(v47 + 72) = v63;
            *((_QWORD *)&v62 + 1) = mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
            v63 = this;
            LOBYTE(v64) = 0;
            *(_QWORD *)&v62 = off_1E0E18B60;
            v65 = v40;
            v66 = v24;
            v39 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)v44 + 48))(v44, &v62);
            v48 = *((_QWORD *)this + 1);
            *(_QWORD *)(v48 + 40) = v45;
            mlir::Lexer::lexToken((mlir::Lexer *)(v48 + 8), (uint64_t)&v55);
            v49 = *((_QWORD *)this + 1);
            *(_OWORD *)(v49 + 56) = v55;
            *(_QWORD *)(v49 + 72) = v56;
            mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v62);
            return v39;
          }
          *(_QWORD *)&v55 = this;
          *((_QWORD *)&v55 + 1) = v52;
          LOWORD(v65) = 261;
          v62 = v58;
          v50 = mlir::StringAttr::get(v3, (mlir::MLIRContext *)&v62);
          return mlir::OpaqueType::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedType(void)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>, (uint64_t)&v55, v50, v40, v24);
        }
      }
      else
      {
        v59 = (const void **)(v58 + *((_QWORD *)&v58 + 1));
        v60 = 0;
        LOBYTE(v62) = 0;
        if (mlir::detail::Parser::parseDialectSymbolBody(this, (llvm::StringRef *)&v59, (BOOL *)&v62))
        {
          v42 = v60 != 0;
          if (v60)
            v40 = (const void **)((char *)v59 + 1);
          else
            v40 = v59;
          v24 = &v60[-v42];
          v59 = v40;
          v60 -= v42;
          if (!(_BYTE)v62)
          {
            if (v24 >= v24 - 1)
              --v24;
            v60 = v24;
          }
          v23 = (const void **)Loc;
          goto LABEL_57;
        }
      }
      return 0;
    }
  }
  v24 = 0;
  v25 = v20->u8[(_QWORD)v19 - 1] == 46;
  v26 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v26 + 56) == 23)
    goto LABEL_39;
LABEL_16:
  v27 = 0;
  if (v25)
    goto LABEL_40;
LABEL_17:
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(v5 + 24), v20, v19);
  if (Key == -1)
    v29 = *(unsigned int *)(v5 + 32);
  else
    v29 = Key;
  if (v29 == *(_DWORD *)(v5 + 32))
  {
    v54 = 1283;
    v52[0] = "undefined symbol alias id '";
    v53 = v61;
    *(_QWORD *)&v55 = v52;
    v56 = "'";
    v57 = 770;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v55, &v62);
    if ((_QWORD)v62)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
    if (v71)
    {
      v30 = (_QWORD **)__p;
      if (__p)
      {
        v31 = v70;
        v32 = __p;
        if (v70 != __p)
        {
          do
            v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          v32 = __p;
        }
        v70 = v30;
        operator delete(v32);
      }
      v33 = v67;
      if (v67)
      {
        v34 = v68;
        v35 = v67;
        if (v68 != v67)
        {
          do
          {
            v37 = (void *)*--v34;
            v36 = v37;
            *v34 = 0;
            if (v37)
              operator delete[](v36);
          }
          while (v34 != v33);
          v35 = v67;
        }
        v68 = v33;
        operator delete(v35);
      }
      if (v64 != &v66)
        free(v64);
    }
    return 0;
  }
  v41 = *(_QWORD *)(v5 + 24);
  if (v4)
    mlir::AsmParserState::addTypeAliasUses(v4, (int8x16_t *)v61, *((const unsigned __int8 **)&v61 + 1), LocRange, v15);
  return *(_QWORD *)(*(_QWORD *)(v41 + 8 * v29) + 8);
}

void mlir::parseAttribute(char *a1, unint64_t a2, uint64_t **a3, _QWORD *a4, unint64_t *a5, int a6)
{
  char *v11;
  uint64_t v12;
  __n128 *v13;
  uint64_t ***v14;
  uint64_t Loc;
  unint64_t v16;
  const char *v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  unint64_t v22;
  const void ***v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  char v39[32];
  __int16 v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  mlir::StringAttr ***v45;
  __n128 *v46;
  _QWORD v47[8];
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  __n128 *v53;
  unint64_t v54;
  char *v55;
  const void **v56;
  const char *v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE v65[96];
  void *v66;
  _QWORD *v67;
  void *__p;
  _QWORD **v69;
  char v70;
  __n128 v71;
  uint64_t v72;
  __int16 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  llvm *v77;
  uint64_t v78;
  unsigned int v79;
  void *v80;
  uint64_t v81;
  _QWORD v82[2];
  void *v83;
  uint64_t v84;
  _QWORD v85[6];
  uint64_t **v86;
  char v87;
  llvm *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  _QWORD v97[8];

  v97[6] = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    llvm::MemoryBuffer::getMemBuffer((uint64_t)a1, a2, (uint64_t)a1, a2, &v55);
  }
  else
  {
    v73 = 261;
    v71.n128_u64[0] = (unint64_t)a1;
    v71.n128_u64[1] = a2;
    llvm::MemoryBuffer::getMemBufferCopy(a1, a2, (uint64_t)&v71, 0, &v55);
  }
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v52);
  v11 = v55;
  v55 = 0;
  v72 = 0;
  v71 = (__n128)(unint64_t)v11;
  if ((unint64_t)v53 >= v54)
  {
    v13 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)&v52, &v71);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v53, &v71);
    v13 = (__n128 *)(v12 + 24);
  }
  v53 = v13;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v71);
  v47[0] = 0;
  v47[1] = 0;
  v47[2] = 0x1000000000;
  v47[3] = 0;
  v47[4] = 0;
  v47[5] = 0x1000000000;
  v47[6] = 0;
  v47[7] = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v86 = a3;
  v87 = 1;
  v89 = 0;
  v88 = 0;
  v90 = 0;
  v91 = 0;
  v92 = &v94;
  v93 = 0x600000000;
  v95 = v97;
  v71.n128_u64[0] = (unint64_t)&v86;
  v96 = 0x600000000;
  v14 = mlir::Lexer::Lexer((uint64_t ***)&v71.n128_u64[1], &v52, a3, 0);
  mlir::Lexer::lexToken((mlir::Lexer *)v14, (uint64_t)&v74);
  v78 = 0;
  v76 = v47;
  v77 = 0;
  v79 = 0;
  v80 = v82;
  v81 = 0;
  v82[1] = 0;
  v82[0] = 0;
  v83 = v85;
  v85[0] = "builtin";
  v85[1] = 7;
  v84 = 0x300000001;
  v45 = *(mlir::StringAttr ****)v71.n128_u64[0];
  v46 = &v71;
  v43 = v74;
  v44 = v75;
  if (mlir::detail::Parser::parseAttribute(&v45, a4))
  {
    v41 = *(__int128 *)((char *)&v46[3] + 8);
    v42 = v46[4].n128_u64[1];
    Loc = mlir::Token::getLoc((mlir::Token *)&v41);
    v16 = Loc - mlir::Token::getLoc((mlir::Token *)&v43);
    if (a5)
    {
      *a5 = v16;
    }
    else if (v16 != a2)
    {
      v17 = (const char *)mlir::Token::getLoc((mlir::Token *)&v41);
      v40 = 257;
      mlir::detail::Parser::emitError((uint64_t)&v45, v17, (uint64_t)v39, &v60);
      if (v60)
      {
        LODWORD(v56) = 3;
        v57 = "found trailing characters: '";
        v58 = 28;
        v18 = &v56;
        v19 = (char *)v62;
        if (v63 >= v64)
        {
          v35 = v63 + 1;
          if (v62 <= &v56 && (char *)v62 + 24 * v63 > (char *)&v56)
          {
            v37 = (char *)&v56 - (_BYTE *)v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v35, 24);
            v19 = (char *)v62;
            v18 = (const void ***)((char *)v62 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v35, 24);
            v18 = &v56;
            v19 = (char *)v62;
          }
        }
        v20 = &v19[24 * v63];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v63;
        if (v60)
        {
          v22 = a2 >= v16 ? v16 : a2;
          v59 = 261;
          v56 = (const void **)&a1[v22];
          v57 = (const char *)(a2 - v22);
          mlir::Diagnostic::operator<<((uint64_t)&v61, &v56);
          if (v60)
          {
            LODWORD(v56) = 3;
            v57 = "'";
            v58 = 1;
            v23 = &v56;
            v24 = (char *)v62;
            if (v63 >= v64)
            {
              v36 = v63 + 1;
              if (v62 <= &v56 && (char *)v62 + 24 * v63 > (char *)&v56)
              {
                v38 = (char *)&v56 - (_BYTE *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v36, 24);
                v24 = (char *)v62;
                v23 = (const void ***)((char *)v62 + v38);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v36, 24);
                v23 = &v56;
                v24 = (char *)v62;
              }
            }
            v25 = &v24[24 * v63];
            v26 = *(_OWORD *)v23;
            *((_QWORD *)v25 + 2) = v23[2];
            *(_OWORD *)v25 = v26;
            ++v63;
            if (v60)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v60);
          }
        }
      }
      if (v70)
      {
        v27 = (_QWORD **)__p;
        if (__p)
        {
          v28 = v69;
          v29 = __p;
          if (v69 != __p)
          {
            do
              v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
            while (v28 != v27);
            v29 = __p;
          }
          v69 = v27;
          operator delete(v29);
        }
        v30 = v66;
        if (v66)
        {
          v31 = v67;
          v32 = v66;
          if (v67 != v66)
          {
            do
            {
              v34 = (void *)*--v31;
              v33 = v34;
              *v31 = 0;
              if (v34)
                operator delete[](v33);
            }
            while (v31 != v30);
            v32 = v66;
          }
          v67 = v30;
          operator delete(v32);
        }
        if (v62 != v65)
          free(v62);
      }
    }
  }
  if (v83 != v85)
    free(v83);
  if (v80 != v82)
    free(v80);
  llvm::deallocate_buffer(v77, (void *)(8 * v79));
}

void mlir::parseType(char *a1, unint64_t a2, uint64_t **a3, unint64_t *a4, int a5)
{
  char *v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t ***v12;
  uint64_t Loc;
  unint64_t v14;
  const char *v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  const void ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  char v37[32];
  __int16 v38;
  __int128 v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __n128 *v44;
  _QWORD v45[8];
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  __n128 *v51;
  unint64_t v52;
  char *v53;
  const void **v54;
  const char *v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD **v67;
  char v68;
  __n128 v69;
  uint64_t v70;
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  llvm *v75;
  uint64_t v76;
  unsigned int v77;
  void *v78;
  uint64_t v79;
  _QWORD v80[2];
  void *v81;
  uint64_t v82;
  _QWORD v83[6];
  uint64_t **v84;
  char v85;
  llvm *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD v95[7];

  v95[6] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    llvm::MemoryBuffer::getMemBuffer((uint64_t)a1, a2, (uint64_t)a1, a2, &v53);
  }
  else
  {
    v71 = 261;
    v69.n128_u64[0] = (unint64_t)a1;
    v69.n128_u64[1] = a2;
    llvm::MemoryBuffer::getMemBufferCopy(a1, a2, (uint64_t)&v69, 0, &v53);
  }
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v50);
  v9 = v53;
  v53 = 0;
  v70 = 0;
  v69 = (__n128)(unint64_t)v9;
  if ((unint64_t)v51 >= v52)
  {
    v11 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)&v50, &v69);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v51, &v69);
    v11 = (__n128 *)(v10 + 24);
  }
  v51 = v11;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v69);
  v45[0] = 0;
  v45[1] = 0;
  v45[2] = 0x1000000000;
  v45[3] = 0;
  v45[4] = 0;
  v45[5] = 0x1000000000;
  v45[6] = 0;
  v45[7] = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v84 = a3;
  v85 = 1;
  v87 = 0;
  v86 = 0;
  v88 = 0;
  v89 = 0;
  v90 = &v92;
  v91 = 0x600000000;
  v93 = v95;
  v69.n128_u64[0] = (unint64_t)&v84;
  v94 = 0x600000000;
  v12 = mlir::Lexer::Lexer((uint64_t ***)&v69.n128_u64[1], &v50, a3, 0);
  mlir::Lexer::lexToken((mlir::Lexer *)v12, (uint64_t)&v72);
  v76 = 0;
  v74 = v45;
  v75 = 0;
  v77 = 0;
  v78 = v80;
  v79 = 0;
  v80[1] = 0;
  v80[0] = 0;
  v81 = v83;
  v83[0] = "builtin";
  v83[1] = 7;
  v82 = 0x300000001;
  v43 = *(_QWORD *)v69.n128_u64[0];
  v44 = &v69;
  v41 = v72;
  v42 = v73;
  if (mlir::detail::Parser::parseType((mlir::detail::Parser *)&v43))
  {
    v39 = *(__int128 *)((char *)&v44[3] + 8);
    v40 = v44[4].n128_u64[1];
    Loc = mlir::Token::getLoc((mlir::Token *)&v39);
    v14 = Loc - mlir::Token::getLoc((mlir::Token *)&v41);
    if (a4)
    {
      *a4 = v14;
    }
    else if (v14 != a2)
    {
      v15 = (const char *)mlir::Token::getLoc((mlir::Token *)&v39);
      v38 = 257;
      mlir::detail::Parser::emitError((uint64_t)&v43, v15, (uint64_t)v37, &v58);
      if (v58)
      {
        LODWORD(v54) = 3;
        v55 = "found trailing characters: '";
        v56 = 28;
        v16 = &v54;
        v17 = (char *)v60;
        if (v61 >= v62)
        {
          v33 = v61 + 1;
          if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
          {
            v35 = (char *)&v54 - (_BYTE *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v33, 24);
            v17 = (char *)v60;
            v16 = (const void ***)((char *)v60 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v33, 24);
            v16 = &v54;
            v17 = (char *)v60;
          }
        }
        v18 = &v17[24 * v61];
        v19 = *(_OWORD *)v16;
        *((_QWORD *)v18 + 2) = v16[2];
        *(_OWORD *)v18 = v19;
        ++v61;
        if (v58)
        {
          v20 = a2 >= v14 ? v14 : a2;
          v57 = 261;
          v54 = (const void **)&a1[v20];
          v55 = (const char *)(a2 - v20);
          mlir::Diagnostic::operator<<((uint64_t)&v59, &v54);
          if (v58)
          {
            LODWORD(v54) = 3;
            v55 = "'";
            v56 = 1;
            v21 = &v54;
            v22 = (char *)v60;
            if (v61 >= v62)
            {
              v34 = v61 + 1;
              if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
              {
                v36 = (char *)&v54 - (_BYTE *)v60;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v34, 24);
                v22 = (char *)v60;
                v21 = (const void ***)((char *)v60 + v36);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v34, 24);
                v21 = &v54;
                v22 = (char *)v60;
              }
            }
            v23 = &v22[24 * v61];
            v24 = *(_OWORD *)v21;
            *((_QWORD *)v23 + 2) = v21[2];
            *(_OWORD *)v23 = v24;
            ++v61;
            if (v58)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
          }
        }
      }
      if (v68)
      {
        v25 = (_QWORD **)__p;
        if (__p)
        {
          v26 = v67;
          v27 = __p;
          if (v67 != __p)
          {
            do
              v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            v27 = __p;
          }
          v67 = v25;
          operator delete(v27);
        }
        v28 = v64;
        if (v64)
        {
          v29 = v65;
          v30 = v64;
          if (v65 != v64)
          {
            do
            {
              v32 = (void *)*--v29;
              v31 = v32;
              *v29 = 0;
              if (v32)
                operator delete[](v31);
            }
            while (v29 != v28);
            v30 = v64;
          }
          v65 = v28;
          operator delete(v30);
        }
        if (v60 != v63)
          free(v60);
      }
    }
  }
  if (v81 != v83)
    free(v81);
  if (v78 != v80)
    free(v78);
  llvm::deallocate_buffer(v75, (void *)(8 * v77));
}

void `anonymous namespace'::CustomDialectAsmParser::~CustomDialectAsmParser(_anonymous_namespace_::CustomDialectAsmParser *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getNameLoc(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *(_BYTE *)(a1 + 24) = 1;
  mlir::detail::Parser::emitError(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getBuilder(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getCurrentLocation(uint64_t a1)
{
  return mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 56));
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getEncodedSourceLoc(uint64_t a1, const char *a2)
{
  return mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseArrow(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '->'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 13, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalArrow(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 13)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 13;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLBrace(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '{'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLBrace(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 20)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 20;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRBrace(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '}'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 27, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRBrace(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 27)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 27;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColon(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ':'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalColon(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 15)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 15;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseComma(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ','";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 16, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalComma(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 16)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseEqual(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '='";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 18, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalEqual(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 18)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 18;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLess(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '<'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 23, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLess(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 23;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseGreater(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '>'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 19, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalGreater(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 19;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseQuestion(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '?'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 26, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalQuestion(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 26;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parsePlus(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '+'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 25, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalPlus(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 25)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 25;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseStar(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '*'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 30, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalStar(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 30;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseVerticalBar(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '|'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 31, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalVerticalBar(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 31)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 31;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string v7;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  if (*(_DWORD *)(v4 + 56) != 11)
    return 0;
  if (a2)
  {
    mlir::Token::getStringValue((mlir::Token *)(v4 + 56), &v7);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v7;
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(v3 + 8);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
  *(std::string *)(*(_QWORD *)(v3 + 8) + 56) = v7;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseBase64Bytes(_QWORD *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t first_not_of;
  unint64_t v8;
  unint64_t v9;
  uint64_t last_not_of;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int8x16_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v35;
  std::string v36;
  _QWORD *v37;
  __int128 v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  v5 = a1[2];
  v6 = *(_QWORD *)(v5 + 8);
  if (*(_DWORD *)(v6 + 56) == 11)
  {
    if (a2)
    {
      v38 = *(_OWORD *)(v6 + 64);
      first_not_of = llvm::StringRef::find_first_not_of(&v38, "\"  \t\n\v\f\r", 8, 0);
      if (first_not_of >= *((_QWORD *)&v38 + 1))
        v8 = *((_QWORD *)&v38 + 1);
      else
        v8 = first_not_of;
      v9 = *((_QWORD *)&v38 + 1) - v8;
      *(_QWORD *)&v41 = v38 + v8;
      *((_QWORD *)&v41 + 1) = *((_QWORD *)&v38 + 1) - v8;
      last_not_of = llvm::StringRef::find_last_not_of(&v41, "\" \t\n\v\f\r", 7, 0xFFFFFFFFFFFFFFFFLL);
      if ((unint64_t)(last_not_of + 1) < *((_QWORD *)&v41 + 1))
        v11 = last_not_of + 1;
      else
        v11 = *((_QWORD *)&v41 + 1);
      v12 = *((_QWORD *)&v41 + 1) - v9 + v11;
      if (*((_QWORD *)&v41 + 1) >= v12)
        v13 = v12;
      else
        v13 = *((_QWORD *)&v41 + 1);
      llvm::decodeBase64(v41, v13, a2, (uint64_t *)&v37);
      if (v37)
      {
        v35 = v37;
        v37 = 0;
        llvm::toString(&v35, &v36, v14, v15);
        v40 = 260;
        v39[0] = &v36;
        (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD *))(*a1 + 24))(&v41, a1, v4, v39);
        v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
        if ((_QWORD)v41)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
        if (v49)
        {
          v17 = (_QWORD **)__p;
          if (__p)
          {
            v18 = v48;
            v19 = __p;
            if (v48 != __p)
            {
              do
                v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
              while (v18 != v17);
              v19 = __p;
            }
            v48 = v17;
            operator delete(v19);
          }
          v20 = v45;
          if (v45)
          {
            v21 = v46;
            v22 = v45;
            if (v46 != v45)
            {
              do
              {
                v24 = (void *)*--v21;
                v23 = v24;
                *v21 = 0;
                if (v24)
                  operator delete[](v23);
              }
              while (v21 != v20);
              v22 = v45;
            }
            v46 = v20;
            operator delete(v22);
          }
          if (v43 != v44)
            free(v43);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (v35)
          (*(void (**)(_QWORD *))(*v35 + 8))(v35);
        if (v37)
          (*(void (**)(_QWORD *))(*v37 + 8))(v37);
        return v16;
      }
      v5 = a1[2];
      v6 = *(_QWORD *)(v5 + 8);
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v41);
    v33 = *(_QWORD *)(v5 + 8);
    *(_OWORD *)(v33 + 56) = v41;
    *(_QWORD *)(v33 + 72) = v42;
    return 1;
  }
  v39[0] = "expected string";
  v40 = 259;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD *))(*a1 + 24))(&v41, a1, v4, v39);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if ((_QWORD)v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v49)
  {
    v25 = (_QWORD **)__p;
    if (__p)
    {
      v26 = v48;
      v27 = __p;
      if (v48 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v48 = v25;
      operator delete(v27);
    }
    v28 = v45;
    if (v45)
    {
      v29 = v46;
      v30 = v45;
      if (v46 != v45)
      {
        do
        {
          v32 = (void *)*--v29;
          v31 = v32;
          *v29 = 0;
          if (v32)
            operator delete[](v31);
        }
        while (v29 != v28);
        v30 = v45;
      }
      v46 = v28;
      operator delete(v30);
    }
    if (v43 != v44)
      free(v43);
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLParen(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '('";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 21, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLParen(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 21;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRParen(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ')'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 28, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRParen(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 28;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLSquare(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '['";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 22, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLSquare(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 22)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 22;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRSquare(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ']'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 29, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRSquare(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 29;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseEllipsis(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '...'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 17, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalEllipsis(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 17)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 17;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseFloat(_QWORD *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  llvm::APFloatBase *Loc;
  llvm::APFloatBase *v9;
  uint64_t FloatingPointValue;
  char v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  llvm::APFloatBase *v19;
  llvm::APFloatBase *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD **v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = a1[2];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_DWORD *)(v5 + 56);
  if (v6 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v44);
    v7 = *(_QWORD *)(v4 + 8);
    *(_OWORD *)(v7 + 56) = v44;
    *(_QWORD *)(v7 + 72) = v45;
    v5 = *(_QWORD *)(a1[2] + 8);
  }
  v42 = *(_OWORD *)(v5 + 56);
  v43 = *(_QWORD *)(v5 + 72);
  Loc = (llvm::APFloatBase *)mlir::Token::getLoc((mlir::Token *)&v42);
  if ((_DWORD)v42 == 10)
  {
    v17 = v6 == 24;
    LOBYTE(v44) = 0;
    v47 = 0;
    v18 = a1[2];
    v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(Loc);
    v20 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v18, (uint64_t)&v44, (mlir::Token *)&v42, v17, v19, 0x40u);
    if ((_BYTE)v20)
    {
      v21 = a1[2];
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v21 + 8) + 8), (uint64_t)&v39);
      v22 = *(_QWORD *)(v21 + 8);
      *(_OWORD *)(v22 + 56) = v39;
      *(_QWORD *)(v22 + 72) = v40;
      *a2 = llvm::APFloat::convertToDouble((void **)&v44);
      v16 = 1;
      if (!v47)
        return v16;
    }
    else
    {
      v16 = 0;
      if (!v47)
        return v16;
    }
    v37 = (void *)*((_QWORD *)&v44 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v20) == v37)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v44 + 8));
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v44 + 8));
  }
  else
  {
    v9 = Loc;
    if ((_DWORD)v42 == 9)
    {
      FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)&v42);
      if (v11)
      {
        v12 = *(double *)&FloatingPointValue;
        v13 = a1[2];
        mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v13 + 8) + 8), (uint64_t)&v44);
        v14 = *(_QWORD *)(v13 + 8);
        *(_OWORD *)(v14 + 56) = v44;
        *(_QWORD *)(v14 + 72) = v45;
        v15 = -v12;
        if (v6 != 24)
          v15 = v12;
        *a2 = v15;
        return 1;
      }
      *(_QWORD *)&v39 = "floating point value too large";
      v41 = 259;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, llvm::APFloatBase *, __int128 *))(*a1 + 24))(&v44, a1, v9, &v39);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((_QWORD)v44)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      if (v53)
      {
        v31 = (_QWORD **)__p;
        if (__p)
        {
          v32 = v52;
          v33 = __p;
          if (v52 != __p)
          {
            do
              v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            v33 = __p;
          }
          v52 = v31;
          operator delete(v33);
        }
        v26 = v49;
        if (!v49)
          goto LABEL_45;
        v34 = v50;
        v28 = v49;
        if (v50 == v49)
        {
LABEL_44:
          v50 = v26;
          operator delete(v28);
LABEL_45:
          if (v46 != &v48)
            free(v46);
          return v16;
        }
        do
        {
          v36 = (void *)*--v34;
          v35 = v36;
          *v34 = 0;
          if (v36)
            operator delete[](v35);
        }
        while (v34 != v26);
LABEL_43:
        v28 = v49;
        goto LABEL_44;
      }
    }
    else
    {
      *(_QWORD *)&v39 = "expected floating point literal";
      v41 = 259;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, llvm::APFloatBase *, __int128 *))(*a1 + 24))(&v44, a1, Loc, &v39);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((_QWORD)v44)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      if (v53)
      {
        v23 = (_QWORD **)__p;
        if (__p)
        {
          v24 = v52;
          v25 = __p;
          if (v52 != __p)
          {
            do
              v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            v25 = __p;
          }
          v52 = v23;
          operator delete(v25);
        }
        v26 = v49;
        if (!v49)
          goto LABEL_45;
        v27 = v50;
        v28 = v49;
        if (v50 == v49)
          goto LABEL_44;
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        goto LABEL_43;
      }
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalInteger(uint64_t a1, llvm::APInt *a2)
{
  return mlir::detail::Parser::parseOptionalInteger(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return mlir::detail::Parser::parseCommaSeparatedList(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseKeyword(_QWORD *a1, const void **a2, const char *a3, const void ***a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  const void ***v12;
  char *v13;
  char *v14;
  __int128 v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  const char *v26;
  __int16 v27;
  _QWORD v28[2];
  const void **v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  _BYTE v34[16];
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[96];
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD **v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v28[0] = a2;
  v28[1] = a3;
  v5 = a1[2];
  if (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 56) == 2)
    return mlir::detail::Parser::codeCompleteExpectedTokens(v5, (uint64_t)v28, 1);
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(_QWORD *, const void **, const char *))(*a1 + 376))(a1, a2, a3))
    return 1;
  v26 = "expected '";
  v27 = 259;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, const char **))(*a1 + 24))(&v33, a1, v10, &v26);
  if (v33)
  {
    v32 = 261;
    v29 = a2;
    v30 = a3;
    mlir::Diagnostic::operator<<((uint64_t)v34, &v29);
    if (v33)
    {
      LODWORD(v29) = 3;
      v30 = "'";
      v31 = 1;
      v12 = &v29;
      v13 = (char *)v35;
      if (v36 >= v37)
      {
        v24 = v36 + 1;
        if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
        {
          v25 = (char *)&v29 - (_BYTE *)v35;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
          v13 = (char *)v35;
          v12 = (const void ***)((char *)v35 + v25);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
          v12 = &v29;
          v13 = (char *)v35;
        }
      }
      v14 = &v13[24 * v36];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = v12[2];
      *(_OWORD *)v14 = v15;
      ++v36;
      if (v33)
        mlir::Diagnostic::operator<<((uint64_t)v34, a4);
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  if (v43)
  {
    v16 = (_QWORD **)__p;
    if (__p)
    {
      v17 = v42;
      v18 = __p;
      if (v42 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v42 = v16;
      operator delete(v18);
    }
    v19 = v39;
    if (v39)
    {
      v20 = v40;
      v21 = v39;
      if (v40 != v39)
      {
        do
        {
          v23 = (void *)*--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            operator delete[](v22);
        }
        while (v20 != v19);
        v21 = v39;
      }
      v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38)
      free(v35);
  }
  return v6;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, void *__s2, size_t __n)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;

  v12[0] = __s2;
  v12[1] = __n;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 12 || v8 == 3)
  {
LABEL_9:
    if (*(_QWORD *)(v7 + 72) != __n || __n && memcmp(*(const void **)(v7 + 64), __s2, __n))
      return 0;
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v13);
    v11 = *(_QWORD *)(v6 + 8);
    *(_OWORD *)(v11 + 56) = v13;
    *(_QWORD *)(v11 + 72) = v14;
    return 1;
  }
  if (v8 == 2)
    return mlir::detail::Parser::codeCompleteOptionalTokens(v6, (uint64_t)v12, 1);
  result = mlir::Token::isKeyword((mlir::Token *)(v7 + 56));
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(v6 + 8);
    goto LABEL_9;
  }
  return result;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  int v5;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = *(_DWORD *)(v4 + 56);
  if (v5 != 3 && v5 != 12)
  {
    result = mlir::Token::isKeyword((mlir::Token *)(v4 + 56));
    if (!result)
      return result;
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  }
  *a2 = *(_OWORD *)(v4 + 64);
  v8 = *(_QWORD *)(a1 + 16);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v8 + 8) + 8), (uint64_t)&v10);
  v9 = *(_QWORD *)(v8 + 8);
  *(_OWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 72) = v11;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)(v8 + 8);
  v10 = *((_DWORD *)v9 + 14);
  if (v10 == 12 || v10 == 3)
    goto LABEL_9;
  if (v10 == 2)
    return mlir::detail::Parser::codeCompleteOptionalTokens(v8, a3, a4);
  result = mlir::Token::isKeyword((mlir::Token *)(v9 + 7));
  if ((_DWORD)result)
  {
    v9 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
LABEL_9:
    v13 = (const void *)v9[8];
    v14 = v9[9];
    if (a4)
    {
      if (v14)
      {
        v15 = 16 * a4;
        v16 = a3;
        while (*(_QWORD *)(v16 + 8) != v14 || memcmp(*(const void **)v16, v13, v14))
        {
          v16 += 16;
          v15 -= 16;
          if (!v15)
            goto LABEL_20;
        }
      }
      else
      {
        v17 = 16 * a4;
        v16 = a3;
        while (*(_QWORD *)(v16 + 8))
        {
          v16 += 16;
          v17 -= 16;
          if (!v17)
          {
LABEL_20:
            v16 = a3 + 16 * a4;
            break;
          }
        }
      }
    }
    else
    {
      v16 = a3;
    }
    if (a4 == (v16 - a3) >> 4)
    {
      return 0;
    }
    else
    {
      *a2 = v13;
      a2[1] = v14;
      v18 = *(_QWORD *)(a1 + 16);
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v18 + 8) + 8), (uint64_t)&v20);
      v19 = *(_QWORD *)(v18 + 8);
      *(_OWORD *)(v19 + 56) = v20;
      *(_QWORD *)(v19 + 72) = v21;
      return 1;
    }
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeywordOrString(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  __int128 *p_dst;
  size_t v8;
  size_t v9;
  __int128 __dst;
  unint64_t v11;
  void *__src;
  size_t __len;

  __src = 0;
  __len = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a1 + 384))(a1, &__src))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, a2);
  v4 = __src;
  if (!__src)
  {
    __dst = 0uLL;
    v11 = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_15;
    goto LABEL_16;
  }
  v5 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v8 = __len | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v11) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_13:
    memmove(p_dst, v4, v5);
  *((_BYTE *)p_dst + v5) = 0;
  if (*(char *)(a2 + 23) < 0)
LABEL_15:
    operator delete(*(void **)a2);
LABEL_16:
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAttribute(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3)
{
  llvm::APFloatBase *v4;

  v4 = mlir::detail::Parser::parseAttribute(*(mlir::StringAttr *****)(a1 + 16), a3);
  *a2 = v4;
  return v4 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCustomAttributeWithFallback(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3, uint64_t (*a4)(uint64_t, llvm::APFloatBase **), uint64_t a5)
{
  uint64_t v6;
  llvm::APFloatBase *v7;

  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(*(_QWORD *)(v6 + 8) + 56) != 5)
    return a4(a5, a2);
  v7 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)v6, a3);
  *a2 = v7;
  return v7 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttribute(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(mlir::detail::Parser **)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttrDict(uint64_t a1, mlir::NamedAttrList *a2)
{
  mlir::detail::Parser *v2;

  v2 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((_QWORD *)v2 + 1) + 56) == 20)
    return mlir::detail::Parser::parseAttributeDict(v2, a2);
  else
    return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttrDictWithKeyword(mlir::detail::Parser **a1, mlir::NamedAttrList *a2)
{
  if ((*((unsigned __int8 (**)(mlir::detail::Parser **, const char *, uint64_t))*a1 + 47))(a1, "attributes", 10))
  {
    return mlir::detail::Parser::parseAttributeDict(a1[2], a2);
  }
  else
  {
    return 1;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAffineMap(uint64_t a1, mlir::AffineMap *a2)
{
  return mlir::detail::Parser::parseAffineMapReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAffineExpr(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return mlir::detail::Parser::parseAffineExprReference(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseIntegerSet(uint64_t a1, mlir::IntegerSet *a2)
{
  return mlir::detail::Parser::parseIntegerSetReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalSymbolName(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  mlir::StringAttr **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1[2] + 8);
  v16 = *(_OWORD *)(v2 + 56);
  v17 = *(_QWORD *)(v2 + 72);
  if ((_DWORD)v16 != 4)
    return 0;
  v5 = (mlir::StringAttr **)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  mlir::Token::getSymbolReference((mlir::Token *)&v16, &__p);
  v15 = 260;
  *(_QWORD *)&v13 = &__p;
  *a2 = mlir::Builder::getStringAttr(v5, (mlir::MLIRContext *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = a1[2];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v6 + 8) + 8), (uint64_t)&v13);
  v7 = *(_QWORD *)(v6 + 8);
  *(_OWORD *)(v7 + 56) = v13;
  *(_QWORD *)(v7 + 72) = v14;
  v8 = *(_QWORD *)(*(_QWORD *)(a1[2] + 8) + 128);
  if (v8)
  {
    v9 = mlir::SymbolRefAttr::get(*a2);
    *(_QWORD *)&v13 = mlir::Token::getLocRange((mlir::Token *)&v16);
    *((_QWORD *)&v13 + 1) = v10;
    mlir::AsmParserState::addUses(v8, v9, (char *)&v13, 1);
  }
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v3;
  return v3 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCustomTypeWithFallback(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  mlir::detail::Parser *v5;
  uint64_t v6;

  v5 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((_QWORD *)v5 + 1) + 56) != 8)
    return a3(a4, a2);
  v6 = mlir::detail::Parser::parseType(v5);
  *a2 = v6;
  return v6 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalType(uint64_t a1, mlir::Type *a2)
{
  return mlir::detail::Parser::parseOptionalType(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseArrowTypeList(mlir::detail::Parser **a1, uint64_t a2)
{
  return (*((unsigned __int8 (**)(mlir::detail::Parser **))*a1 + 7))(a1)
      && mlir::detail::Parser::parseFunctionResultTypes(a1[2], a2) != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalArrowTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 13)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  v6 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseFunctionResultTypes(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColonType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  __int16 v8;

  v4 = *(_QWORD *)(a1 + 16);
  v7 = "expected ':'";
  v8 = 259;
  if (!mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v7))
    return 0;
  v5 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v5;
  return v5 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v4 = *(_QWORD *)(a1 + 16);
  v6 = "expected ':'";
  v7 = 259;
  if (mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v6))
    return mlir::detail::Parser::parseTypeListNoParens(*(_QWORD *)(a1 + 16), a2);
  else
    return 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 15)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  v6 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseTypeListNoParens(*(_QWORD *)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseDimensionList(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return mlir::detail::Parser::parseDimensionListRanked(*(mlir::detail::Parser **)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseXInDimensionList(uint64_t a1)
{
  return mlir::detail::Parser::parseXInDimensionList(*(mlir::detail::Parser **)(a1 + 16));
}

void mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseResourceHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  const mlir::OpAsmDialectInterface *v6;
  uint64_t v7;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  const void **v12;
  const char *v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  char v31[32];
  __int16 v32;
  const void **v33;
  const char *v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)
    && (v6 = (const mlir::OpAsmDialectInterface *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)) != 0)
  {
    v37 = 0;
    v38 = 0;
    mlir::detail::Parser::parseResourceHandle(*(mlir::detail::Parser **)(a1 + 16), v6, (llvm::StringRef *)&v37, (uint64_t)a3);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    v32 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v31, &v37);
    if (!v37)
      goto LABEL_11;
    LODWORD(v33) = 3;
    v34 = "dialect '";
    v35 = 9;
    v8 = &v33;
    v9 = (char *)v39;
    if (v40 >= v41)
    {
      v27 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        v29 = (char *)&v33 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        v9 = (char *)v39;
        v8 = (const void ***)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        v8 = &v33;
        v9 = (char *)v39;
      }
    }
    v10 = &v9[24 * v40];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v40;
    if (!v37)
      goto LABEL_11;
    v12 = *(const void ***)(a2 + 8);
    v13 = *(const char **)(a2 + 16);
    v36 = 261;
    v33 = v12;
    v34 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    if (v37)
    {
      LODWORD(v33) = 3;
      v34 = "' does not expect resource handles";
      v35 = 34;
      v14 = &v33;
      v15 = (char *)v39;
      if (v40 >= v41)
      {
        v28 = v40 + 1;
        if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
        {
          v30 = (char *)&v33 - (_BYTE *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          v15 = (char *)v39;
          v14 = (const void ***)((char *)v39 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          v14 = &v33;
          v15 = (char *)v39;
        }
      }
      v16 = &v15[24 * v40];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v40;
      v18 = v37;
      *a3 = 0;
      a3[24] = 0;
      if (v18)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v47)
    {
      v19 = (_QWORD **)__p;
      if (__p)
      {
        v20 = v46;
        v21 = __p;
        if (v46 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v46 = v19;
        operator delete(v21);
      }
      v22 = v43;
      if (v43)
      {
        v23 = v44;
        v24 = v43;
        if (v44 != v43)
        {
          do
          {
            v26 = (void *)*--v23;
            v25 = v26;
            *v23 = 0;
            if (v26)
              operator delete[](v25);
          }
          while (v23 != v22);
          v24 = v43;
        }
        v44 = v22;
        operator delete(v24);
      }
      if (v39 != v42)
        free(v39);
    }
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::pushCyclicParsing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[16];
  unsigned __int8 v9;

  v7 = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 88), &v7, (uint64_t)v8);
  v3 = v9;
  if (v9)
  {
    v4 = v7;
    v5 = *(unsigned int *)(v2 + 120);
    if (v5 >= *(_DWORD *)(v2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 112, (void *)(v2 + 128), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 120);
    }
    *(_QWORD *)(*(_QWORD *)(v2 + 112) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 120);
  }
  return v3;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::popCyclicParsing(uint64_t result)
{
  int32x2_t *v1;
  __int32 v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;

  v1 = *(int32x2_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = v1[13].i32[0];
  if (v2)
  {
    v3 = v1[11];
    v4 = v1[15].u32[0];
    v5 = *(_QWORD *)(*(_QWORD *)&v1[14] + 8 * v4 - 8);
    v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
    v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      *v8 = -8192;
      v1[12] = vadd_s32(v1[12], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[15].i32[0] = v4 - 1;
  }
  else
  {
    --v1[15].i32[0];
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseKeywordOrCompletion(mlir::AsmParser *a1, llvm::StringRef *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  if (*(_DWORD *)(v2 + 56) != 2 || *(_QWORD *)(v2 + 72))
    return mlir::AsmParser::parseKeyword(a1, a2);
  *(_QWORD *)a2 = "";
  *((_QWORD *)a2 + 1) = 0;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::codeCompleteExpectedTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v4 + 56) == 2 && !*(_QWORD *)(v4 + 72))
    return mlir::detail::Parser::codeCompleteExpectedTokens(result, a2, a3);
  return result;
}

uint64_t `anonymous namespace'::CustomDialectAsmParser::getFullSymbolSpec(_anonymous_namespace_::CustomDialectAsmParser *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
      v23 = 77;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    v5 = v2[154];
    LODWORD(v6) = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
    v7 = (uint64_t *)(v3 + 16 * v6);
    v8 = *v7;
    if (*v7 == v5)
      goto LABEL_9;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v4 - 1);
      v8 = *(_QWORD *)(v3 + 16 * v6);
      if (v8 == v5)
      {
        v7 = (uint64_t *)(v3 + 16 * v6);
        goto LABEL_9;
      }
    }
  }
  v7 = (uint64_t *)(v3 + 16 * v4);
LABEL_9:
  if (v7 == (uint64_t *)(v3 + 16 * v4))
    return 0;
  else
    return v7[1];
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedAttr(mlir::Type)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedType(void)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

uint64_t ***mlir::Lexer::Lexer(uint64_t ***result, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;

  *result = a2;
  result[1] = a3;
  result[2] = 0;
  result[3] = 0;
  result[5] = 0;
  v4 = **a2;
  v5 = *(uint64_t ***)(v4 + 8);
  v6 = (uint64_t **)(*(_QWORD *)(v4 + 16) - (_QWORD)v5);
  result[2] = v5;
  result[3] = v6;
  result[4] = v5;
  if (a4)
    result[5] = *(uint64_t ***)(a4 + 8);
  return result;
}

uint64_t mlir::Lexer::getEncodedSourceLocation(uint64_t a1, const char *a2)
{
  int v2;
  llvm::SourceMgr::SrcBuffer **v4;
  llvm::SourceMgr::SrcBuffer *v5;
  unsigned int LineNumber;
  uint64_t v7;
  mlir::StringAttr *v8;
  const char *v9;
  unint64_t v10;

  v2 = (int)a2;
  v4 = *(llvm::SourceMgr::SrcBuffer ***)a1;
  v5 = **(llvm::SourceMgr::SrcBuffer ***)a1;
  LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v5, a2);
  v7 = v2 - llvm::SourceMgr::SrcBuffer::getPointerForLineNumber((unint64_t **)v5, LineNumber) + 1;
  v8 = *(mlir::StringAttr **)(a1 + 8);
  v9 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)*v4 + 16))(*(_QWORD *)*v4);
  return mlir::FileLineColLoc::get(v8, v9, v10, LineNumber, v7);
}

void mlir::Lexer::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::SourceMgr::SrcBuffer **v8;
  llvm::SourceMgr::SrcBuffer *v9;
  unsigned int LineNumber;
  uint64_t v11;
  uint64_t v12;
  mlir::StringAttr *v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = *(llvm::SourceMgr::SrcBuffer ***)a1;
  v9 = **(llvm::SourceMgr::SrcBuffer ***)a1;
  LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v9, a2);
  v11 = a2
      - llvm::SourceMgr::SrcBuffer::getPointerForLineNumber((unint64_t **)v9, LineNumber)
      + 1;
  v12 = *(_QWORD *)*v8;
  v13 = *(mlir::StringAttr **)(a1 + 8);
  v14 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  v16 = mlir::FileLineColLoc::get(v13, v14, v15, LineNumber, v11);
  mlir::emitError(v16, a3, (uint64_t)v26);
  if (v26[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  if (v33)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v32;
      v19 = __p;
      if (v32 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v32 = v17;
      operator delete(v19);
    }
    v20 = v29;
    if (v29)
    {
      v21 = v30;
      v22 = v29;
      if (v30 != v29)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v29;
      }
      v30 = v20;
      operator delete(v22);
    }
    if (v27 != &v28)
      free(v27);
  }
  v25 = *(_QWORD *)(a1 + 32) - (_QWORD)a2;
  *(_DWORD *)a4 = 1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = v25;
}

void mlir::Lexer::lexToken(mlir::Lexer *this@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  const char *v4;
  const char *v6;
  unsigned int v7;
  char *v8;
  int v9;
  int v11;
  int v12;
  int v13;
  _QWORD v14[4];
  __int16 v15;

  v4 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 5);
  if (v4 != v3)
  {
    do
    {
      v6 = v4 + 1;
      *((_QWORD *)this + 4) = v4 + 1;
      v7 = *v4;
      switch(*v4)
      {
        case 0:
          if (v4 != (const char *)(*((_QWORD *)this + 2) + *((_QWORD *)this + 3)))
            goto LABEL_4;
          *(_DWORD *)a2 = 0;
          goto LABEL_56;
        case 9:
        case 0xA:
        case 0xD:
        case 0x20:
          goto LABEL_4;
        case 0x21:
        case 0x25:
        case 0x5E:
          goto LABEL_25;
        case 0x22:
          mlir::Lexer::lexString(this, v4, a2);
          return;
        case 0x23:
          if (*v6 == 45 && v4[2] == 125)
          {
            *((_QWORD *)this + 4) = v4 + 3;
            v12 = 33;
            goto LABEL_48;
          }
LABEL_25:
          mlir::Lexer::lexPrefixedIdentifier(this, v4, a2);
          return;
        case 0x28:
          v13 = 21;
          goto LABEL_55;
        case 0x29:
          v13 = 28;
          goto LABEL_55;
        case 0x2A:
          v13 = 30;
          goto LABEL_55;
        case 0x2B:
          v13 = 25;
          goto LABEL_55;
        case 0x2C:
          v13 = 16;
          goto LABEL_55;
        case 0x2D:
          if (*v6 == 62)
          {
            *((_QWORD *)this + 4) = v4 + 2;
            *(_DWORD *)a2 = 13;
            *(_QWORD *)(a2 + 8) = v4;
            *(_QWORD *)(a2 + 16) = 2;
            return;
          }
          v13 = 24;
          goto LABEL_55;
        case 0x2E:
          if (v6 != (const char *)(*((_QWORD *)this + 2) + *((_QWORD *)this + 3)) && *v6 == 46 && v4[2] == 46)
          {
            *((_QWORD *)this + 4) = v4 + 3;
            v12 = 17;
            goto LABEL_48;
          }
          v14[0] = "expected three consecutive dots for an ellipsis";
          v15 = 259;
          mlir::Lexer::emitError((uint64_t)this, v6, (uint64_t)v14, a2);
          return;
        case 0x2F:
          if (*v6 != 47)
            goto LABEL_60;
          v8 = (char *)(v4 + 2);
          break;
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
          mlir::Lexer::lexNumber((uint64_t)this, v4, a2);
          return;
        case 0x3A:
          v13 = 15;
          goto LABEL_55;
        case 0x3C:
          v13 = 23;
          goto LABEL_55;
        case 0x3D:
          v13 = 18;
          goto LABEL_55;
        case 0x3E:
          v13 = 19;
          goto LABEL_55;
        case 0x3F:
          v13 = 26;
          goto LABEL_55;
        case 0x40:
          mlir::Lexer::lexAtIdentifier(this, v4, a2);
          return;
        case 0x5B:
          v13 = 22;
          goto LABEL_55;
        case 0x5D:
          v13 = 29;
          goto LABEL_55;
        case 0x5F:
          goto LABEL_59;
        case 0x7B:
          if (*v6 == 45 && v4[2] == 35)
          {
            *((_QWORD *)this + 4) = v4 + 3;
            v12 = 32;
LABEL_48:
            *(_DWORD *)a2 = v12;
            *(_QWORD *)(a2 + 8) = v4;
            *(_QWORD *)(a2 + 16) = 3;
          }
          else
          {
            v13 = 20;
LABEL_55:
            *(_DWORD *)a2 = v13;
LABEL_56:
            *(_QWORD *)(a2 + 8) = v4;
            *(_QWORD *)(a2 + 16) = 1;
          }
          return;
        case 0x7C:
          v13 = 31;
          goto LABEL_55;
        case 0x7D:
          v13 = 27;
          goto LABEL_55;
        default:
          if ((v7 & 0x80000000) != 0)
            v11 = __maskrune(v7, 0x100uLL);
          else
            v11 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v7 + 60) & 0x100;
          if (v11)
          {
LABEL_59:
            mlir::Lexer::lexBareIdentifierOrKeyword(this, (unint64_t)v4, a2);
          }
          else
          {
LABEL_60:
            v14[0] = "unexpected character";
            v15 = 259;
            mlir::Lexer::emitError((uint64_t)this, v4, (uint64_t)v14, a2);
          }
          return;
      }
      do
      {
        while (1)
        {
          v6 = v8++;
          *((_QWORD *)this + 4) = v8;
          v9 = *v6;
          if (!*v6)
            break;
          if (v9 == 10 || v9 == 13)
          {
            ++v6;
            goto LABEL_4;
          }
        }
      }
      while (v6 != (const char *)(*((_QWORD *)this + 2) + *((_QWORD *)this + 3)));
      *((_QWORD *)this + 4) = v6;
LABEL_4:
      v4 = v6;
    }
    while (v6 != v3);
  }
  *(_DWORD *)a2 = 2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = 0;
}

uint64_t mlir::Lexer::lexBareIdentifierOrKeyword@<X0>(mlir::Lexer *this@<X0>, unint64_t __s1@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  int v22;

  v6 = (unsigned __int8 *)*((_QWORD *)this + 4);
  v7 = MEMORY[0x1E0C80978];
  while (1)
  {
    v12 = (char)*v6;
    if ((v12 & 0x80000000) != 0)
    {
      result = __maskrune(v12, 0x100uLL);
      v6 = (unsigned __int8 *)*((_QWORD *)this + 4);
      if ((_DWORD)result)
        goto LABEL_6;
    }
    else
    {
      result = *(_DWORD *)(v7 + 4 * v12 + 60) & 0x100;
      if ((_DWORD)result)
        goto LABEL_6;
    }
    v14 = *v6;
    if ((char)*v6 < 0 || (*(_DWORD *)(v7 + 4 * v14 + 60) & 0x400) == 0)
    {
      v8 = v14 - 36;
      v9 = v8 > 0x3B;
      v10 = (1 << v8) & 0x800000000000401;
      if (v9 || v10 == 0)
        break;
    }
LABEL_6:
    *((_QWORD *)this + 4) = ++v6;
  }
  v15 = (size_t)&v6[-__s1];
  v16 = (uint64_t)&v6[-__s1 - 2];
  if ((unint64_t)&v6[-__s1] < 2)
    goto LABEL_30;
  v17 = *(unsigned __int8 *)__s1;
  if (v17 == 105)
  {
    v18 = (const char *)(__s1 + 1);
    v19 = (char *)&v6[~__s1];
    while (*(unsigned __int8 *)v18 - 48 < 0xA)
    {
      ++v18;
      if (!--v19)
      {
LABEL_27:
        v22 = 12;
        goto LABEL_31;
      }
    }
  }
  if (v15 >= 3)
  {
    if (*(_BYTE *)(__s1 + 1) == 105 && (v17 == 117 || v17 == 115))
    {
      v20 = (const char *)(__s1 + 2);
      v21 = v16;
      while (*(unsigned __int8 *)v20 - 48 < 0xA)
      {
        ++v20;
        if (!--v21)
          goto LABEL_27;
      }
    }
    switch(v16)
    {
      case 0:
        goto LABEL_29;
      case 1:
        if (*(_WORD *)__s1 == 12646 && *(_BYTE *)(__s1 + 2) == 54)
        {
          v22 = 44;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 13158 && *(_BYTE *)(__s1 + 2) == 50)
        {
          v22 = 45;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 13926 && *(_BYTE *)(__s1 + 2) == 52)
        {
          v22 = 46;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 14438 && *(_BYTE *)(__s1 + 2) == 48)
        {
          v22 = 47;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28518 && *(_BYTE *)(__s1 + 2) == 114)
        {
          v22 = 56;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28524 && *(_BYTE *)(__s1 + 2) == 99)
        {
          v22 = 59;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 24941 && *(_BYTE *)(__s1 + 2) == 120)
        {
          v22 = 60;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 26989 && *(_BYTE *)(__s1 + 2) == 110)
        {
          v22 = 62;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28525 && *(_BYTE *)(__s1 + 2) == 100)
        {
          v22 = 63;
          goto LABEL_31;
        }
        goto LABEL_30;
      case 2:
        switch(*(_DWORD *)__s1)
        {
          case 0x36316662:
            v22 = 38;
            break;
          case 0x38323166:
            v22 = 53;
            break;
          case 0x636E7566:
            v22 = 57;
            break;
          case 0x656E6F6E:
            v22 = 64;
            break;
          case 0x657A6973:
            v22 = 66;
            break;
          case 0x70657473:
            v22 = 68;
            break;
          case 0x32336674:
            v22 = 72;
            break;
          case 0x65757274:
            v22 = 74;
            break;
          case 0x65707974:
            v22 = 76;
            break;
          case 0x74696E75:
            v22 = 77;
            break;
          default:
            goto LABEL_30;
        }
        goto LABEL_31;
      case 3:
        if (*(_DWORD *)__s1 == 1634890337 && *(_BYTE *)(__s1 + 4) == 121)
        {
          v22 = 36;
        }
        else if (*(_DWORD *)__s1 == 1936614756 && *(_BYTE *)(__s1 + 4) == 101)
        {
          v22 = 41;
        }
        else if (*(_DWORD *)__s1 == 1936482662 && *(_BYTE *)(__s1 + 4) == 101)
        {
          v22 = 54;
        }
        else if (*(_DWORD *)__s1 == 1701080681 && *(_BYTE *)(__s1 + 4) == 120)
        {
          v22 = 58;
        }
        else
        {
          result = memcmp((const void *)__s1, "tuple", v15);
          if ((_DWORD)result)
            goto LABEL_30;
          v22 = 75;
        }
        goto LABEL_31;
      case 4:
        if (*(_DWORD *)__s1 == 893728870 && *(_WORD *)(__s1 + 4) == 12877)
        {
          v22 = 48;
        }
        else if (*(_DWORD *)__s1 == 1919772013 && *(_WORD *)(__s1 + 4) == 26213)
        {
          v22 = 61;
        }
        else if (*(_DWORD *)__s1 == 1936090735 && *(_WORD *)(__s1 + 4) == 29797)
        {
          v22 = 65;
        }
        else if (*(_DWORD *)__s1 == 1918988403 && *(_WORD *)(__s1 + 4) == 25971)
        {
          v22 = 67;
        }
        else if (*(_DWORD *)__s1 == 1651341683 && *(_WORD *)(__s1 + 4) == 27759)
        {
          v22 = 70;
        }
        else if (*(_DWORD *)__s1 == 1936614772 && *(_WORD *)(__s1 + 4) == 29295)
        {
          v22 = 71;
        }
        else
        {
          result = memcmp((const void *)__s1, "vector", v15);
          if ((_DWORD)result)
            goto LABEL_30;
          v22 = 78;
        }
        goto LABEL_31;
      case 5:
        if (*(_DWORD *)__s1 == 1818846563 && *(_DWORD *)(__s1 + 3) == 1986618476)
        {
          v22 = 39;
          goto LABEL_31;
        }
        if (*(_DWORD *)__s1 == 1886220131 && *(_DWORD *)(__s1 + 3) == 2019912816)
        {
          v22 = 40;
          goto LABEL_31;
        }
        if (*(_DWORD *)__s1 == 1769108595 && *(_DWORD *)(__s1 + 3) == 1684366441)
        {
          v22 = 69;
          goto LABEL_31;
        }
        goto LABEL_30;
      case 6:
        switch(*(_QWORD *)__s1)
        {
          case 0x74636E6974736964:
            v22 = 43;
            break;
          case 0x4E46334D34453866:
            v22 = 49;
            break;
          case 0x766964726F6F6C66:
            v22 = 55;
            break;
          default:
            goto LABEL_30;
        }
        goto LABEL_31;
      case 8:
        if (*(_QWORD *)__s1 == 0x6D5F656E69666661 && *(_WORD *)(__s1 + 8) == 28769)
        {
          v22 = 34;
          goto LABEL_31;
        }
        if (*(_QWORD *)__s1 == 0x735F656E69666661 && *(_WORD *)(__s1 + 8) == 29797)
        {
          v22 = 35;
          goto LABEL_31;
        }
        if (*(_QWORD *)__s1 == 0x7475626972747461 && *(_WORD *)(__s1 + 8) == 29541)
        {
          v22 = 37;
          goto LABEL_31;
        }
        if (*(_QWORD *)__s1 == 0x4E46324D35453866 && *(_WORD *)(__s1 + 8) == 23125)
        {
          v22 = 50;
          goto LABEL_31;
        }
        if (*(_QWORD *)__s1 == 0x4E46334D34453866 && *(_WORD *)(__s1 + 8) == 23125)
        {
          v22 = 51;
          goto LABEL_31;
        }
        break;
      case 11:
        if (*(_QWORD *)__s1 != 0x3142334D34453866 || *(_QWORD *)(__s1 + 5) != 0x5A554E4631314233)
          goto LABEL_30;
        v22 = 52;
        goto LABEL_31;
      case 12:
        if (*(_QWORD *)__s1 != 0x65725F65736E6564 || *(_QWORD *)(__s1 + 6) != 0x656372756F736572)
          goto LABEL_30;
        v22 = 42;
        goto LABEL_31;
      default:
        goto LABEL_30;
    }
    goto LABEL_30;
  }
  if (v15 != 2)
    goto LABEL_30;
LABEL_29:
  result = memcmp((const void *)__s1, "to", v15);
  if ((_DWORD)result)
LABEL_30:
    v22 = 3;
  else
    v22 = 73;
LABEL_31:
  *(_DWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = __s1;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

void mlir::Lexer::lexAtIdentifier(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  unsigned int v7;
  int64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  __int128 v21;
  int64_t v22;
  __int16 v23;

  v6 = (char *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v6 + 1;
  v7 = *v6;
  if (v7 != 34)
  {
    if ((v7 & 0x80000000) != 0)
    {
      v19 = __maskrune(*v6, 0x100uLL);
      v9 = (unsigned __int8 *)*((_QWORD *)this + 4);
      if (v7 == 95 || v19 != 0)
        goto LABEL_9;
    }
    else
    {
      v9 = (unsigned __int8 *)*((_QWORD *)this + 4);
      if (v7 == 95 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v7 + 60) & 0x100) != 0)
      {
LABEL_9:
        v11 = MEMORY[0x1E0C80978];
        while (1)
        {
          v16 = (char)*v9;
          if ((v16 & 0x80000000) != 0)
          {
            v17 = __maskrune(v16, 0x100uLL);
            v9 = (unsigned __int8 *)*((_QWORD *)this + 4);
            if (v17)
              goto LABEL_14;
          }
          else if ((*(_DWORD *)(v11 + 4 * v16 + 60) & 0x100) != 0)
          {
            goto LABEL_14;
          }
          v18 = *v9;
          if ((char)*v9 < 0 || (*(_DWORD *)(v11 + 4 * v18 + 60) & 0x400) == 0)
          {
            v12 = v18 - 36;
            v13 = v12 > 0x3B;
            v14 = (1 << v12) & 0x800000000000401;
            if (v13 || v14 == 0)
            {
              *(_DWORD *)a3 = 4;
              v8 = v9 - (unsigned __int8 *)a2;
LABEL_24:
              *(_QWORD *)(a3 + 8) = a2;
              goto LABEL_25;
            }
          }
LABEL_14:
          *((_QWORD *)this + 4) = ++v9;
        }
      }
    }
    *(_QWORD *)&v21 = "@ identifier expected to start with letter or '_'";
    v23 = 259;
    mlir::Lexer::emitError((uint64_t)this, (const char *)v9 - 1, (uint64_t)&v21, a3);
    return;
  }
  mlir::Lexer::lexString(this, v6 + 1, (uint64_t)&v21);
  if ((_DWORD)v21 != 1)
  {
    v8 = *((_QWORD *)this + 4) - (_QWORD)a2;
    *(_DWORD *)a3 = 4;
    goto LABEL_24;
  }
  *(_OWORD *)a3 = v21;
  v8 = v22;
LABEL_25:
  *(_QWORD *)(a3 + 16) = v8;
}

void mlir::Lexer::lexPrefixedIdentifier(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  const char *v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char *v14;
  int v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;

  v6 = *a2;
  if (v6 > 36)
  {
    if (v6 == 94)
    {
      v9 = 7;
      v8 = "invalid block name";
      v7 = 18;
      v10 = (char *)*((_QWORD *)this + 4);
      v11 = *v10;
      v12 = MEMORY[0x1E0C80978];
      if ((v11 & 0x80000000) != 0)
        goto LABEL_31;
    }
    else
    {
      v9 = 6;
      v8 = "invalid SSA name";
      v7 = 16;
      v10 = (char *)*((_QWORD *)this + 4);
      v11 = *v10;
      v12 = MEMORY[0x1E0C80978];
      if ((v11 & 0x80000000) != 0)
        goto LABEL_31;
    }
  }
  else
  {
    if (v6 == 33)
      v7 = 23;
    else
      v7 = 22;
    if (v6 == 33)
      v8 = "invalid type identifier";
    else
      v8 = "invalid attribute name";
    if (v6 == 33)
      v9 = 8;
    else
      v9 = 5;
    v10 = (char *)*((_QWORD *)this + 4);
    v11 = *v10;
    v12 = MEMORY[0x1E0C80978];
    if ((v11 & 0x80000000) != 0)
    {
LABEL_31:
      if (__maskrune(v11, 0x100uLL))
        goto LABEL_41;
      goto LABEL_32;
    }
  }
  v13 = *(_DWORD *)(v12 + 4 * v11 + 60);
  if ((v13 & 0x400) != 0)
  {
    v14 = v10 + 1;
    do
    {
      if ((*(_DWORD *)(v12 + 4 * v11 + 60) & 0x400) == 0)
        break;
      *((_QWORD *)this + 4) = v14;
      v15 = *v14++;
      LOBYTE(v11) = v15;
    }
    while ((v15 & 0x80000000) == 0);
    v16 = v14 - 1;
LABEL_22:
    v17 = *((_QWORD *)this + 5);
    v18 = v17 < (unint64_t)a2 || v17 > (unint64_t)v16;
    if (!v18)
    {
      *(_DWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v17 - (_QWORD)a2;
      return;
    }
    v19 = v16 - a2;
    *(_DWORD *)a3 = v9;
    goto LABEL_28;
  }
  if ((v13 & 0x100) != 0)
    goto LABEL_41;
LABEL_32:
  v20 = (const char *)*((_QWORD *)this + 4);
  v21 = *(unsigned __int8 *)v20 - 36;
  v18 = v21 > 0x3B;
  v22 = (1 << v21) & 0x800000000000601;
  if (!v18 && v22 != 0)
  {
    while (1)
    {
LABEL_41:
      while (1)
      {
        v27 = (char *)(*((_QWORD *)this + 4) + 1);
        *((_QWORD *)this + 4) = v27;
        v28 = *v27;
        if ((v28 & 0x80000000) != 0)
          break;
        if ((*(_DWORD *)(v12 + 4 * v28 + 60) & 0x100) == 0)
          goto LABEL_45;
      }
      if (!__maskrune(v28, 0x100uLL))
      {
LABEL_45:
        v16 = (char *)*((_QWORD *)this + 4);
        v29 = *v16;
        if (*v16 < 0 || (*(_DWORD *)(v12 + 4 * v29 + 60) & 0x400) == 0)
        {
          v24 = v29 - 36;
          v18 = v24 > 0x3B;
          v25 = (1 << v24) & 0x800000000000601;
          if (v18 || v25 == 0)
            goto LABEL_22;
        }
      }
    }
  }
  if (v20 != *((const char **)this + 5))
  {
    v31 = 261;
    v30[0] = v8;
    v30[1] = v7;
    mlir::Lexer::emitError((uint64_t)this, v20 - 1, (uint64_t)v30, a3);
    return;
  }
  *(_DWORD *)a3 = 2;
  v19 = v20 - a2;
LABEL_28:
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = v19;
}

void mlir::Lexer::lexString(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  char *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  const char *v9;
  const char *v10;
  __int16 v11;

  v3 = (char *)*((_QWORD *)this + 4);
  v4 = (char *)*((_QWORD *)this + 5);
  if (v3 == v4)
  {
LABEL_23:
    *(_DWORD *)a3 = 2;
    *(_QWORD *)(a3 + 8) = a2;
    *(_QWORD *)(a3 + 16) = v4 - a2;
    return;
  }
  while (1)
  {
    v5 = (unsigned __int8 *)(v3 + 1);
    *((_QWORD *)this + 4) = v3 + 1;
    v6 = *v3;
    if (v6 > 33)
    {
      if (v6 == 92)
      {
        v7 = *v5;
        v8 = (v7 - 92) > 0x18 || ((1 << (v7 - 92)) & 0x1040001) == 0;
        if (v8 && (_DWORD)v7 != 34)
        {
          if (llvm::hexDigitValue(char)::LUT[v7] == -1 || llvm::hexDigitValue(char)::LUT[v3[2]] == -1)
          {
            v9 = "unknown escape in string literal";
            goto LABEL_25;
          }
        }
        else
        {
          v5 = (unsigned __int8 *)v3;
        }
        v5 += 2;
        *((_QWORD *)this + 4) = v5;
      }
      else if (v6 == 34)
      {
        *(_DWORD *)a3 = 11;
        *(_QWORD *)(a3 + 8) = a2;
        *(_QWORD *)(a3 + 16) = v5 - (unsigned __int8 *)a2;
        return;
      }
      goto LABEL_5;
    }
    if (*v3)
      break;
    if (v3 == (char *)(*((_QWORD *)this + 2) + *((_QWORD *)this + 3)))
      goto LABEL_24;
LABEL_5:
    v3 = (char *)v5;
    if (v5 == (unsigned __int8 *)v4)
      goto LABEL_23;
  }
  if ((v6 - 10) >= 3)
    goto LABEL_5;
LABEL_24:
  v9 = "expected '\"' in string literal";
LABEL_25:
  v10 = v9;
  v11 = 259;
  mlir::Lexer::emitError((uint64_t)this, v3, (uint64_t)&v10, a3);
}

uint64_t mlir::Lexer::lexNumber@<X0>(uint64_t this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;

  v3 = *(unsigned __int8 **)(this + 32);
  v4 = *v3;
  if (__PAIR64__(v4, *(v3 - 1)) == 0x7800000030)
  {
    if (((char)v3[1] & 0x80000000) == 0
      && (v5 = MEMORY[0x1E0C80978], (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v3[1] + 60) & 0x10000) != 0))
    {
      v17 = v3 + 2;
      *(_QWORD *)(this + 32) = v3 + 2;
      if (((char)v3[2] & 0x80000000) == 0)
      {
        v18 = v3[2];
        v19 = (char *)(v3 + 3);
        do
        {
          if ((*(_DWORD *)(v5 + 4 * v18 + 60) & 0x10000) == 0)
            break;
          *(_QWORD *)(this + 32) = v19;
          v20 = *v19++;
          v18 = v20;
        }
        while ((v20 & 0x80000000) == 0);
        v17 = (unsigned __int8 *)(v19 - 1);
      }
      *(_DWORD *)a3 = 10;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v17 - (unsigned __int8 *)a2;
    }
    else
    {
      *(_DWORD *)a3 = 10;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v3 - (unsigned __int8 *)a2;
    }
  }
  else
  {
    if ((v4 & 0x80) != 0)
      goto LABEL_25;
    v6 = MEMORY[0x1E0C80978];
    while ((*(_DWORD *)(v6 + 4 * v4 + 60) & 0x400) != 0)
    {
      v7 = v3 + 1;
      *(_QWORD *)(this + 32) = v3 + 1;
      v8 = (char)v3[1];
      v4 = *++v3;
      if (v8 < 0)
      {
        *(_DWORD *)a3 = 10;
        *(_QWORD *)(a3 + 8) = a2;
        *(_QWORD *)(a3 + 16) = v7 - (unsigned __int8 *)a2;
        return this;
      }
    }
    if (v4 != 46)
    {
LABEL_25:
      *(_DWORD *)a3 = 10;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v3 - (unsigned __int8 *)a2;
    }
    else
    {
      v9 = v3 + 4;
      do
      {
        v10 = v9;
        v11 = (char *)(v9 - 3);
        *(_QWORD *)(this + 32) = v9 - 3;
        v12 = (char)*(v9 - 3);
        v13 = v12;
        if (v12 < 0)
          break;
        v9 = v10 + 1;
      }
      while ((*(_DWORD *)(v6 + 4 * v13 + 60) & 0x400) != 0);
      if ((v13 | 0x20) == 0x65)
      {
        v14 = *(v10 - 2);
        if ((*(_DWORD *)(v6 + 4 * v14 + 60) & 0x400) != 0
          || ((_DWORD)v14 == 43 || (_DWORD)v14 == 45) && (*(_DWORD *)(v6 + 4 * *(v10 - 1) + 60) & 0x400) != 0)
        {
          v11 = (char *)(v10 - 1);
          *(_QWORD *)(this + 32) = v10 - 1;
          if (((char)*(v10 - 1) & 0x80000000) == 0)
          {
            v15 = *(v10 - 1);
            do
            {
              if ((*(_DWORD *)(v6 + 4 * v15 + 60) & 0x400) == 0)
                break;
              *(_QWORD *)(this + 32) = v10;
              v16 = (char)*v10++;
              v15 = v16;
            }
            while ((v16 & 0x80000000) == 0);
            v11 = (char *)(v10 - 1);
          }
        }
      }
      *(_DWORD *)a3 = 9;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v11 - a2;
    }
  }
  return this;
}

uint64_t mlir::detail::Parser::parseCallSiteLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17[4];
  __int16 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  __int16 v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v20);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 56) = v20;
  *(_QWORD *)(v4 + 72) = v21;
  *(_QWORD *)&v20 = "expected '(' in callsite location";
  v23 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v20))
    return 0;
  v19 = 0;
  if (!mlir::detail::Parser::parseLocationInstance(a1, &v19))
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) == 3 && *(_QWORD *)(v5 + 72) == 2 && **(_WORD **)(v5 + 64) == 29793)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v20);
    v15 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v15 + 56) = v20;
    *(_QWORD *)(v15 + 72) = v21;
    v17[0] = 0;
    if (mlir::detail::Parser::parseLocationInstance(a1, v17))
    {
      *(_QWORD *)&v20 = "expected ')' in callsite location";
      v23 = 259;
      if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v20))
      {
        *a2 = mlir::CallSiteLoc::get(v19, v17[0]);
        return 1;
      }
    }
    return 0;
  }
  v17[0] = (uint64_t)"expected 'at' in callsite location";
  v18 = 259;
  mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v17, &v20);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if ((_QWORD)v20)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  if (v29)
  {
    v7 = (_QWORD **)__p;
    if (__p)
    {
      v8 = v28;
      v9 = __p;
      if (v28 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v28 = v7;
      operator delete(v9);
    }
    v10 = v25;
    if (v25)
    {
      v11 = v26;
      v12 = v25;
      if (v26 != v25)
      {
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            operator delete[](v13);
        }
        while (v11 != v10);
        v12 = v25;
      }
      v26 = v10;
      operator delete(v12);
    }
    if (v22 != &v24)
      free(v22);
  }
  return v6;
}

uint64_t mlir::detail::Parser::parseLocationInstance(mlir::UnknownLoc ****a1, uint64_t *a2)
{
  mlir::UnknownLoc ***v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  mlir::UnknownLoc **v11;
  mlir::UnknownLoc **v12;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  mlir::UnknownLoc ***v32;
  mlir::MLIRContext *v33;
  unint64_t v34;
  int64_t v35;
  _QWORD v36[4];
  __int16 v37;
  _BYTE v38[24];
  __int128 v39;
  mlir::UnknownLoc **v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *((_DWORD *)v4 + 14);
  if (v5 != 3)
  {
    if (v5 == 11)
      return mlir::detail::Parser::parseNameOrFileLineColLocation((uint64_t)a1, a2);
    if (v5 == 5)
    {
      v6 = mlir::detail::Parser::parseExtendedAttr((mlir::detail::Parser *)a1, 0);
      if (!v6)
        return 0;
      v7 = (uint64_t)v6;
      v8 = mlir::LocationAttr::classof((uint64_t)v6);
      if (v8)
        v9 = v7;
      else
        v9 = 0;
      *a2 = v9;
      if (v8)
        return 1;
      v36[0] = "expected location attribute, but got";
      v37 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v36, &v39);
      if ((_QWORD)v39)
      {
        v22 = v38;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v38, v7);
        v23 = (char *)v41;
        if (v42 >= v43)
        {
          v34 = v42 + 1;
          if (v41 <= v38 && (char *)v41 + 24 * v42 > v38)
          {
            v35 = v38 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v34, 24);
            v23 = (char *)v41;
            v22 = (char *)v41 + v35;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v34, 24);
            v22 = v38;
            v23 = (char *)v41;
          }
        }
        v24 = &v23[24 * v42];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v24 = v25;
        ++v42;
      }
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
      if ((_QWORD)v39)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
      if (!v49)
        return v10;
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v48;
        v28 = __p;
        if (v48 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v48 = v26;
        operator delete(v28);
      }
      v17 = v45;
      if (!v45)
      {
LABEL_50:
        if (v41 != v44)
          free(v41);
        return v10;
      }
      v29 = v46;
      v19 = v45;
      if (v46 == v45)
      {
LABEL_49:
        v46 = v17;
        operator delete(v19);
        goto LABEL_50;
      }
      do
      {
        v31 = (void *)*--v29;
        v30 = v31;
        *v29 = 0;
        if (v31)
          operator delete[](v30);
      }
      while (v29 != v17);
    }
    else
    {
      v36[0] = "expected location instance";
      v37 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)v36, &v39);
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
      if ((_QWORD)v39)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
      if (!v49)
        return v10;
      v14 = (_QWORD **)__p;
      if (__p)
      {
        v15 = v48;
        v16 = __p;
        if (v48 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v48 = v14;
        operator delete(v16);
      }
      v17 = v45;
      if (!v45)
        goto LABEL_50;
      v18 = v46;
      v19 = v45;
      if (v46 == v45)
        goto LABEL_49;
      do
      {
        v21 = (void *)*--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          operator delete[](v20);
      }
      while (v18 != v17);
    }
    v19 = v45;
    goto LABEL_49;
  }
  v11 = v4[8];
  v12 = v4[9];
  if (v12 == (mlir::UnknownLoc **)5)
  {
    if (!memcmp(v11, "fused", 5uLL))
      return mlir::detail::Parser::parseFusedLocation((uint64_t)a1);
  }
  else if (v12 == (mlir::UnknownLoc **)7)
  {
    if (!memcmp(v11, "unknown", 7uLL))
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v39);
      v32 = a1[1];
      *(_OWORD *)(v32 + 7) = v39;
      v32[9] = v40;
      *a2 = mlir::UnknownLoc::get(**a1[1], v33);
      return 1;
    }
  }
  else if (v12 == (mlir::UnknownLoc **)8 && *v11 == (mlir::UnknownLoc *)0x657469736C6C6163)
  {
    return mlir::detail::Parser::parseCallSiteLocation((uint64_t)a1, a2);
  }
  v36[0] = "expected location instance";
  v37 = 259;
  mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)v36, &v39);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v39);
  return v10;
}

uint64_t mlir::detail::Parser::parseFusedLocation(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  void *v9[2];
  _QWORD v10[2];
  __int16 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)v9);
  v2 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v9;
  *(_QWORD *)(v2 + 72) = v10[0];
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v3 + 56) == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)v9);
    v4 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v4 + 56) = *(_OWORD *)v9;
    *(_QWORD *)(v4 + 72) = v10[0];
    v5 = mlir::detail::Parser::parseAttribute(a1, 0);
    if (!v5)
      return 0;
    v6 = v5;
    v9[0] = "expected '>' after fused location metadata";
    v11 = 259;
    if (!mlir::detail::Parser::parseToken(a1, 19, (uint64_t)v9))
      return 0;
  }
  else
  {
    v6 = 0;
  }
  v8[1] = v9;
  v9[0] = v10;
  v9[1] = (void *)0x400000000;
  v8[0] = a1;
  if (mlir::detail::Parser::parseCommaSeparatedList(a1, 2, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseFusedLocation(mlir::LocationAttr &)::$_0>, (uint64_t)v8, (uint64_t)" in fused location", 18))mlir::FusedLoc::get((uint64_t **)v9[0], (mlir::MLIRContext *)LODWORD(v9[1]), v6, ***(mlir::UnknownLoc ****)(a1 + 8));
  if (v9[0] != v10)
    free(v9[0]);
  return 0;
}

uint64_t mlir::detail::Parser::parseNameOrFileLineColLocation(uint64_t a1, uint64_t *a2)
{
  mlir::StringAttr ***v4;
  mlir::StringAttr *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  mlir::Token *v11;
  int v12;
  unint64_t UnsignedIntegerValue;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  mlir::Token *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type size;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  _QWORD **v43;
  _QWORD **v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  uint64_t v50[4];
  __int16 v51;
  std::string v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  __int16 v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = *(mlir::StringAttr ****)(a1 + 8);
  v5 = **v4;
  mlir::Token::getStringValue((mlir::Token *)(v4 + 7), &v52);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v53);
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v6 + 56) = v53;
  *(_QWORD *)(v6 + 72) = v54;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v53);
    v25 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v25 + 56) = v53;
    *(_QWORD *)(v25 + 72) = v54;
    v50[0] = 0;
    if (mlir::detail::Parser::parseLocationInstance(a1, v50))
    {
      v56 = 260;
      *(_QWORD *)&v53 = &v52;
      v26 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&v53);
      *a2 = mlir::NameLoc::get(v26, v50[0]);
      *(_QWORD *)&v53 = "expected ')' after child location of NameLoc";
      v56 = 259;
      if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v53))
      {
        v27 = 1;
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v27;
LABEL_71:
        operator delete(v52.__r_.__value_.__l.__data_);
        return v27;
      }
    }
    goto LABEL_22;
  }
  if (v8 != 15)
  {
    v56 = 260;
    *(_QWORD *)&v53 = &v52;
    v28 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&v53);
    v24 = mlir::NameLoc::get(v28);
    goto LABEL_20;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v53);
  v9 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v9 + 56) = v53;
  *(_QWORD *)(v9 + 72) = v54;
  v10 = *(_QWORD *)(a1 + 8);
  v12 = *(_DWORD *)(v10 + 56);
  v11 = (mlir::Token *)(v10 + 56);
  if (v12 != 10)
  {
    v50[0] = (uint64_t)"expected integer line number in FileLineColLoc";
    v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((_QWORD)v53)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    if (v62)
    {
      v29 = (_QWORD **)__p;
      if (__p)
      {
        v30 = v61;
        v31 = __p;
        if (v61 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v61 = v29;
        operator delete(v31);
      }
      v32 = v58;
      if (!v58)
        goto LABEL_68;
      v33 = v59;
      v34 = v58;
      if (v59 == v58)
        goto LABEL_67;
      do
      {
        v36 = (void *)*--v33;
        v35 = v36;
        *v33 = 0;
        if (v36)
          operator delete[](v35);
      }
      while (v33 != v32);
      goto LABEL_66;
    }
    goto LABEL_70;
  }
  UnsignedIntegerValue = mlir::Token::getUnsignedIntegerValue(v11);
  if ((UnsignedIntegerValue & 0xFF00000000) == 0)
  {
    v50[0] = (uint64_t)"expected integer line number in FileLineColLoc";
    v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((_QWORD)v53)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    if (v62)
    {
      v37 = (_QWORD **)__p;
      if (__p)
      {
        v38 = v61;
        v39 = __p;
        if (v61 != __p)
        {
          do
            v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
          while (v38 != v37);
          v39 = __p;
        }
        v61 = v37;
        operator delete(v39);
      }
      v32 = v58;
      if (!v58)
        goto LABEL_68;
      v40 = v59;
      v34 = v58;
      if (v59 == v58)
        goto LABEL_67;
      do
      {
        v42 = (void *)*--v40;
        v41 = v42;
        *v40 = 0;
        if (v42)
          operator delete[](v41);
      }
      while (v40 != v32);
      goto LABEL_66;
    }
LABEL_70:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v27;
    goto LABEL_71;
  }
  v14 = UnsignedIntegerValue;
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v53);
  v15 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v15 + 56) = v53;
  *(_QWORD *)(v15 + 72) = v54;
  *(_QWORD *)&v53 = "expected ':' in FileLineColLoc";
  v56 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 15, (uint64_t)&v53))
  {
LABEL_22:
    v27 = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_71;
    return v27;
  }
  v16 = *(_QWORD *)(a1 + 8);
  v18 = *(_DWORD *)(v16 + 56);
  v17 = (mlir::Token *)(v16 + 56);
  if (v18 != 10)
  {
    v50[0] = (uint64_t)"expected integer column number in FileLineColLoc";
    v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((_QWORD)v53)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    if (v62)
    {
      v43 = (_QWORD **)__p;
      if (__p)
      {
        v44 = v61;
        v45 = __p;
        if (v61 != __p)
        {
          do
            v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
          while (v44 != v43);
          v45 = __p;
        }
        v61 = v43;
        operator delete(v45);
      }
      v32 = v58;
      if (!v58)
        goto LABEL_68;
      v46 = v59;
      v34 = v58;
      if (v59 == v58)
      {
LABEL_67:
        v59 = v32;
        operator delete(v34);
LABEL_68:
        if (v55 != &v57)
          free(v55);
        goto LABEL_70;
      }
      do
      {
        v48 = (void *)*--v46;
        v47 = v48;
        *v46 = 0;
        if (v48)
          operator delete[](v47);
      }
      while (v46 != v32);
LABEL_66:
      v34 = v58;
      goto LABEL_67;
    }
    goto LABEL_70;
  }
  v19 = mlir::Token::getUnsignedIntegerValue(v17);
  if ((v19 & 0xFF00000000) == 0)
  {
    v50[0] = (uint64_t)"expected integer column number in FileLineColLoc";
    v51 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v50, &v53);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v53);
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v27;
    goto LABEL_71;
  }
  v20 = v19;
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v53);
  v21 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v21 + 56) = v53;
  *(_QWORD *)(v21 + 72) = v54;
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v52;
  else
    v22 = (std::string *)v52.__r_.__value_.__r.__words[0];
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  else
    size = v52.__r_.__value_.__l.__size_;
  v24 = mlir::FileLineColLoc::get(v5, (const char *)v22, size, v14, v20);
LABEL_20:
  *a2 = v24;
  v27 = 1;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_71;
  return v27;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseFusedLocation(mlir::LocationAttr &)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v7 = 0;
  if (!mlir::detail::Parser::parseLocationInstance(v2, &v7))
    return 0;
  v3 = a1[1];
  v4 = v7;
  v5 = *(unsigned int *)(v3 + 8);
  if (v5 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = v4;
  ++*(_DWORD *)(v3 + 8);
  return 1;
}

uint64_t mlir::detail::Parser::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  switch(a2)
  {
    case 1:
      goto LABEL_3;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_18;
    case 5:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 21)
        return 1;
LABEL_3:
      v18 = 1283;
      *(_QWORD *)&v15 = "expected '('";
      v16 = a5;
      v17 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v15))
        return 0;
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 56) == 28)
        goto LABEL_5;
      goto LABEL_9;
    case 6:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 22)
        return 1;
LABEL_7:
      v18 = 1283;
      *(_QWORD *)&v15 = "expected '['";
      v16 = a5;
      v17 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v15))
        return 0;
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 56) != 29)
        goto LABEL_9;
      goto LABEL_5;
    case 7:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 23)
        return 1;
LABEL_14:
      v18 = 1283;
      *(_QWORD *)&v15 = "expected '<'";
      v16 = a5;
      v17 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 23, (uint64_t)&v15))
        return 1;
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 56) == 19)
      {
LABEL_5:
        mlir::Lexer::lexToken((mlir::Lexer *)(v10 + 8), (uint64_t)&v15);
        v11 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)(v11 + 56) = v15;
        *(_QWORD *)(v11 + 72) = v16;
        return 1;
      }
      else
      {
LABEL_9:
        while (a3(a4))
        {
          v13 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v13 + 56) != 16)
            __asm { BR              X10 }
          mlir::Lexer::lexToken((mlir::Lexer *)(v13 + 8), (uint64_t)&v15);
          v14 = *(_QWORD *)(a1 + 8);
          *(_OWORD *)(v14 + 56) = v15;
          *(_QWORD *)(v14 + 72) = v16;
        }
        return 0;
      }
    case 8:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) != 20)
        return 1;
LABEL_18:
      v18 = 1283;
      *(_QWORD *)&v15 = "expected '{'";
      v16 = a5;
      v17 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 20, (uint64_t)&v15))
        return 0;
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 56) != 27)
        goto LABEL_9;
      goto LABEL_5;
    default:
      goto LABEL_9;
  }
}

uint64_t sub_1802EFF54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  v7 = 1283;
  v4 = "expected ')'";
  v5 = v2;
  v6 = v1;
  return mlir::detail::Parser::parseToken(v0, 28, (uint64_t)&v4);
}

uint64_t mlir::detail::Parser::parseToken(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD **v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == a2)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v16);
    v5 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v5 + 56) = v16;
    *(_QWORD *)(v5 + 72) = v17;
    return 1;
  }
  else
  {
    mlir::detail::Parser::emitWrongTokenError(a1, a3, &v16);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
    if ((_QWORD)v16)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
    if (v24)
    {
      v7 = (_QWORD **)__p;
      if (__p)
      {
        v8 = v23;
        v9 = __p;
        if (v23 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v23 = v7;
        operator delete(v9);
      }
      v10 = v20;
      if (v20)
      {
        v11 = v21;
        v12 = v20;
        if (v21 != v20)
        {
          do
          {
            v14 = (void *)*--v11;
            v13 = v14;
            *v11 = 0;
            if (v14)
              operator delete[](v13);
          }
          while (v11 != v10);
          v12 = v20;
        }
        v21 = v10;
        operator delete(v12);
      }
      if (v18 != &v19)
        free(v18);
    }
  }
  return v6;
}

BOOL mlir::detail::Parser::parseCommaSeparatedListUntil(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD v24[4];
  __int16 v25;
  __int128 v26;
  const char *v27;
  void *v28;
  __int16 v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void *__p;
  _QWORD **v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 56) == a2)
  {
    if ((a5 & 1) != 0)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v26);
      v7 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(v7 + 56) = v26;
      *(_QWORD *)(v7 + 72) = v27;
      return 1;
    }
    else
    {
      v24[0] = "expected list element";
      v25 = 259;
      mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v24, &v26);
      v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
      if ((_QWORD)v26)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
      if (v35)
      {
        v14 = (_QWORD **)__p;
        if (__p)
        {
          v15 = v34;
          v16 = __p;
          if (v34 != __p)
          {
            do
              v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
            while (v15 != v14);
            v16 = __p;
          }
          v34 = v14;
          operator delete(v16);
        }
        v17 = v31;
        if (v31)
        {
          v18 = v32;
          v19 = v31;
          if (v32 != v31)
          {
            do
            {
              v21 = (void *)*--v18;
              v20 = v21;
              *v18 = 0;
              if (v21)
                operator delete[](v20);
            }
            while (v18 != v17);
            v19 = v31;
          }
          v32 = v17;
          operator delete(v19);
        }
        if (v28 != &v30)
          free(v28);
      }
    }
  }
  else if (a3(a4))
  {
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) != 16)
        break;
      mlir::Lexer::lexToken((mlir::Lexer *)(v12 + 8), (uint64_t)&v26);
      v13 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(v13 + 56) = v26;
      *(_QWORD *)(v13 + 72) = v27;
      if (!a3(a4))
        return 0;
    }
    v25 = 1283;
    v24[0] = "expected ',' or '";
    v24[2] = mlir::Token::getTokenSpelling(a2);
    v24[3] = v22;
    *(_QWORD *)&v26 = v24;
    v27 = "'";
    v29 = 770;
    return mlir::detail::Parser::parseToken(a1, a2, (uint64_t)&v26) != 0;
  }
  else
  {
    return 0;
  }
  return v8;
}

void mlir::detail::Parser::emitWrongTokenError(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t Loc;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t last_not_of;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v16;
  unint64_t last_of;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t EncodedSourceLocation;
  __int128 v23;
  __int128 v24;

  Loc = mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(a1 + 8) + 56));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (const char *)(Loc - (*(_DWORD *)(v7 + 56) == 0));
  v9 = *(_QWORD *)(v7 + 24);
  v10 = (uint64_t)&v8[-v9];
  *(_QWORD *)&v24 = v9;
  *((_QWORD *)&v24 + 1) = &v8[-v9];
  while (1)
  {
    last_not_of = llvm::StringRef::find_last_not_of(&v24, " \t", 2, 0xFFFFFFFFFFFFFFFFLL);
    if ((unint64_t)(last_not_of + 1) < *((_QWORD *)&v24 + 1))
      v12 = last_not_of + 1;
    else
      v12 = *((_QWORD *)&v24 + 1);
    v13 = *((_QWORD *)&v24 + 1) - v10 + v12;
    if (*((_QWORD *)&v24 + 1) < v13)
      v13 = *((_QWORD *)&v24 + 1);
    *((_QWORD *)&v24 + 1) = v13;
    if (!v13)
      break;
    v14 = *(unsigned __int8 *)(v24 + v13 - 1);
    if (v14 != 10 && v14 != 13)
    {
      v20 = (const char *)(v24 + v13);
      v21 = *(_QWORD *)(a1 + 8) + 8;
      goto LABEL_26;
    }
    if (v13 >= v13 - 1)
      v16 = v13 - 1;
    else
      v16 = v13;
    *((_QWORD *)&v24 + 1) = v16;
    v23 = v24;
    last_of = llvm::StringRef::find_last_of(&v23, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL);
    if (last_of != -1)
    {
      if (*((_QWORD *)&v23 + 1) >= last_of)
        v18 = last_of;
      else
        v18 = *((_QWORD *)&v23 + 1);
      *(_QWORD *)&v23 = v23 + v18;
      *((_QWORD *)&v23 + 1) -= v18;
    }
    v19 = llvm::StringRef::find((uint64_t *)&v23, "//", 2uLL, 0);
    v10 = *((_QWORD *)&v24 + 1);
    if (v19 != -1)
    {
      if (*((_QWORD *)&v24 + 1) >= (unint64_t)(v19 - *((_QWORD *)&v23 + 1) + *((_QWORD *)&v24 + 1)))
        v10 = v19 - *((_QWORD *)&v23 + 1) + *((_QWORD *)&v24 + 1);
      *((_QWORD *)&v24 + 1) = v10;
    }
  }
  v21 = *(_QWORD *)(a1 + 8) + 8;
  v20 = v8;
LABEL_26:
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v21, v20);
  mlir::emitError(EncodedSourceLocation, a2, (uint64_t)a3);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(a3);
}

void mlir::detail::Parser::emitError(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t Loc;
  const char *v7;
  uint64_t v8;
  uint64_t EncodedSourceLocation;

  Loc = mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(a1 + 8) + 56));
  v7 = (const char *)Loc;
  v8 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v8 + 56))
    v7 = (const char *)(Loc - 1);
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v8 + 8, v7);
  mlir::emitError(EncodedSourceLocation, a2, (uint64_t)a3);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(a3);
}

void mlir::detail::Parser::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t EncodedSourceLocation;

  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, a2);
  mlir::emitError(EncodedSourceLocation, a3, (uint64_t)a4);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(a4);
}

uint64_t mlir::detail::Parser::parseOptionalInteger(mlir::detail::Parser *this, llvm::APInt *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  const char *Loc;
  uint64_t EncodedSourceLocation;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  llvm::APInt *v26;
  const char *v28;
  __int16 v29;
  _QWORD v30[2];
  __int128 v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  __int16 v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  void *__p;
  _QWORD **v41;
  char v42;
  uint64_t v43;

  v4 = 0;
  v43 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 1);
  v6 = *(_DWORD *)(v5 + 56);
  if (v6 > 53)
  {
    if (v6 == 74)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      v23 = *((_QWORD *)this + 1);
      *(_OWORD *)(v23 + 56) = v33;
      *(_QWORD *)(v23 + 72) = v34;
      v24 = *((unsigned int *)a2 + 2);
      if (v24 > 0x40)
      {
        v4 = 1;
        **(_QWORD **)a2 = 1;
        bzero((void *)(*(_QWORD *)a2 + 8), (((unint64_t)(v24 + 63) >> 3) - 8) & 0xFFFFFFF8);
        goto LABEL_54;
      }
      *(_QWORD *)a2 = (_DWORD)v24 != 0;
    }
    else
    {
      v8 = 0;
      if (v6 != 54)
        return v4 | (v8 << 8);
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      v21 = *((_QWORD *)this + 1);
      *(_OWORD *)(v21 + 56) = v33;
      *(_QWORD *)(v21 + 72) = v34;
      v22 = *((unsigned int *)a2 + 2);
      if (v22 > 0x40)
      {
        **(_QWORD **)a2 = 0;
        bzero((void *)(*(_QWORD *)a2 + 8), (((unint64_t)(v22 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
LABEL_47:
    v4 = 1;
LABEL_54:
    v8 = 1;
    return v4 | (v8 << 8);
  }
  v7 = v6 == 10 || v6 == 24;
  v8 = 0;
  if (v7)
  {
    if (v6 == 24)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      v9 = *((_QWORD *)this + 1);
      *(_OWORD *)(v9 + 56) = v33;
      *(_QWORD *)(v9 + 72) = v34;
      v5 = *((_QWORD *)this + 1);
    }
    v31 = *(_OWORD *)(v5 + 56);
    v32 = *(_QWORD *)(v5 + 72);
    *(_QWORD *)&v33 = "expected integer value";
    v36 = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)this, 10, (uint64_t)&v33))
      goto LABEL_53;
    v30[0] = *((_QWORD *)&v31 + 1);
    v30[1] = v32;
    v10 = 10;
    if (v32 >= 2)
    {
      if (*(_BYTE *)(*((_QWORD *)&v31 + 1) + 1) == 120)
        v10 = 0;
      else
        v10 = 10;
    }
    if (llvm::StringRef::getAsInteger((llvm::StringRef *)v30, v10, a2))
    {
      Loc = (const char *)mlir::Token::getLoc((mlir::Token *)&v31);
      v28 = "integer value too large";
      v29 = 259;
      EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, Loc);
      mlir::emitError(EncodedSourceLocation, (uint64_t)&v28, (uint64_t)&v33);
      if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(&v33);
      if ((_QWORD)v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      if (v42)
      {
        v13 = (_QWORD **)__p;
        if (__p)
        {
          v14 = v41;
          v15 = __p;
          if (v41 != __p)
          {
            do
              v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
            while (v14 != v13);
            v15 = __p;
          }
          v41 = v13;
          operator delete(v15);
        }
        v16 = v38;
        if (v38)
        {
          v17 = v39;
          v18 = v38;
          if (v39 != v38)
          {
            do
            {
              v20 = (void *)*--v17;
              v19 = v20;
              *v17 = 0;
              if (v20)
                operator delete[](v19);
            }
            while (v17 != v16);
            v18 = v38;
          }
          v39 = v16;
          operator delete(v18);
        }
        if (v35 != &v37)
          free(v35);
      }
LABEL_53:
      v4 = 0;
      goto LABEL_54;
    }
    v25 = *((_DWORD *)a2 + 2);
    v26 = (llvm::APInt *)(*(_QWORD *)a2 + 8 * ((v25 - 1) >> 6));
    if (v25 < 0x41)
      v26 = a2;
    if (((*(_QWORD *)v26 >> (v25 - 1)) & 1) != 0)
    {
      llvm::APInt::zext((const void **)a2, v25 + 1, (uint64_t)&v33);
      if (*((_DWORD *)a2 + 2) >= 0x41u && *(_QWORD *)a2)
        operator delete[](*(void **)a2);
      *(_QWORD *)a2 = v33;
      *((_DWORD *)a2 + 2) = DWORD2(v33);
    }
    if (v6 == 24)
      llvm::APInt::negate(a2);
    goto LABEL_47;
  }
  return v4 | (v8 << 8);
}

uint64_t **llvm::APInt::negate(llvm::APInt *this)
{
  unsigned int v2;
  unint64_t v3;

  v2 = *((_DWORD *)this + 2);
  if (v2 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)this);
    return llvm::APInt::operator++((uint64_t **)this);
  }
  else
  {
    if (v2)
      v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    else
      v3 = 0;
    *(_QWORD *)this = v3 & ~*(_QWORD *)this;
    return llvm::APInt::operator++((uint64_t **)this);
  }
}

uint64_t mlir::detail::Parser::parseFloatFromIntegerLiteral(uint64_t a1, uint64_t a2, mlir::Token *this, int a4, llvm::APFloatBase *a5, unsigned int a6)
{
  const char *Loc;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t EncodedSourceLocation;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  __int128 v32;
  _QWORD **v33;
  _QWORD **v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  llvm::APFloatBase *UInt64IntegerValue;
  char v40;
  uint64_t v41;
  llvm::APFloatBase *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  unint64_t v53;
  int v54;
  llvm::APFloatBase *v55;
  uint64_t v56;
  _QWORD **v57;
  _QWORD **v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  void *v64;
  llvm::APFloatBase *v65;
  llvm::APFloatBase *v66;
  llvm::APFloatBase *v67;
  unint64_t v68;
  BOOL v69;
  char *v70;
  void *v71;
  unsigned int v72;
  __int16 v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  llvm::APFloatBase *v78;
  uint64_t v79;
  void *v80;
  _BYTE v81[96];
  void *v82;
  _QWORD *v83;
  void *__p;
  _QWORD **v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  Loc = (const char *)mlir::Token::getLoc(this);
  v13 = *((_QWORD *)this + 2);
  if (v13 < 2 || (v14 = (unsigned __int8 *)*((_QWORD *)this + 1), v14[1] != 120))
  {
    v71 = "unexpected decimal integer literal for a floating point value";
    v73 = 259;
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, Loc);
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v71, (uint64_t)&v77);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v77);
    v26 = mlir::Diagnostic::attachNote((uint64_t *)&v78, 0, 0);
    v27 = v26 + 16;
    v28 = *(_QWORD *)(v26 + 16);
    LODWORD(v74) = 3;
    v75 = "add a trailing dot to make the literal a float";
    v76 = 46;
    v29 = *(unsigned int *)(v26 + 24);
    v30 = &v74;
    if (v29 >= *(_DWORD *)(v26 + 28))
    {
      v68 = v29 + 1;
      v69 = v28 + 24 * v29 > (unint64_t)&v74;
      if (v28 <= (unint64_t)&v74 && v69)
      {
        v70 = (char *)&v74 - v28;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v27, (void *)(v26 + 32), v68, 24);
        v28 = *(_QWORD *)(v26 + 16);
        v30 = (void **)&v70[v28];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v27, (void *)(v26 + 32), v68, 24);
        v28 = *(_QWORD *)(v26 + 16);
        v30 = &v74;
      }
    }
    v31 = v28 + 24 * *(unsigned int *)(v26 + 24);
    v32 = *(_OWORD *)v30;
    *(_QWORD *)(v31 + 16) = v30[2];
    *(_OWORD *)v31 = v32;
    ++*(_DWORD *)(v26 + 24);
    v16 = mlir::Diagnostic::operator mlir::LogicalResult();
    if (v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v86)
    {
      v33 = (_QWORD **)__p;
      if (__p)
      {
        v34 = v85;
        v35 = __p;
        if (v85 != __p)
        {
          do
            v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          v35 = __p;
        }
        v85 = v33;
        operator delete(v35);
      }
      v20 = v82;
      if (!v82)
        goto LABEL_61;
      v36 = v83;
      v22 = v82;
      if (v83 == v82)
        goto LABEL_60;
      do
      {
        v38 = (void *)*--v36;
        v37 = v38;
        *v36 = 0;
        if (v38)
          operator delete[](v37);
      }
      while (v36 != v20);
      goto LABEL_59;
    }
    return v16;
  }
  if (a4)
  {
    v71 = "hexadecimal float literal should not have a leading minus";
    v73 = 259;
    v15 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, Loc);
    mlir::emitError(v15, (uint64_t)&v71, (uint64_t)&v77);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v77);
    v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v86)
    {
      v17 = (_QWORD **)__p;
      if (__p)
      {
        v18 = v85;
        v19 = __p;
        if (v85 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v85 = v17;
        operator delete(v19);
      }
      v20 = v82;
      if (!v82)
        goto LABEL_61;
      v21 = v83;
      v22 = v82;
      if (v83 == v82)
      {
LABEL_60:
        v83 = v20;
        operator delete(v22);
LABEL_61:
        if (v80 != v81)
          free(v80);
        return v16;
      }
      do
      {
        v24 = (void *)*--v21;
        v23 = v24;
        *v21 = 0;
        if (v24)
          operator delete[](v23);
      }
      while (v21 != v20);
LABEL_59:
      v22 = v82;
      goto LABEL_60;
    }
    return v16;
  }
  UInt64IntegerValue = (llvm::APFloatBase *)mlir::Token::getUInt64IntegerValue(v14, v13);
  if (v40)
  {
    v41 = (uint64_t)UInt64IntegerValue;
    v42 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(UInt64IntegerValue);
    if (v42 == a5)
    {
      v72 = a6;
      if (a6 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v71, v41, 0);
      }
      else
      {
        v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a6;
        if (!a6)
          v53 = 0;
        v71 = (void *)(v41 & v53);
      }
      v65 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v42);
      if (v65 == a5)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v78, (uint64_t)a5, (uint64_t)&v71);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v78, a5, (const llvm::APInt **)&v71);
      v66 = (llvm::APFloatBase *)(a2 + 8);
      if (*(_BYTE *)(a2 + 32))
      {
        llvm::APFloat::Storage::operator=(v66, (llvm::APFloatBase *)&v78);
      }
      else
      {
        if (v65 == v78)
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v66, &v78);
        else
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v66, (uint64_t)&v78);
        *(_BYTE *)(a2 + 32) = 1;
      }
      if (v65 == v78)
        std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v79);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v78);
      if (v72 >= 0x41 && v71)
        operator delete[](v71);
      return 1;
    }
    LODWORD(v75) = a6;
    if (a6 > 0x40)
    {
      v44 = &v74;
      llvm::APInt::initSlowCase((llvm::APInt *)&v74, v41, 0);
      v54 = (int)v75;
      if (v75 >= 0x41)
      {
        v42 = (llvm::APFloatBase *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74);
        if ((v54 - (_DWORD)v42) > 0x40)
          goto LABEL_74;
        v44 = v74;
      }
    }
    else
    {
      v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a6;
      if (!a6)
        v43 = 0;
      v74 = (void *)(v41 & v43);
      v44 = &v74;
    }
    if (*v44 == v41)
    {
      v55 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v42);
      if (v55 == a5)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v78, (uint64_t)a5, (uint64_t)&v74);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v78, a5, (const llvm::APInt **)&v74);
      v67 = (llvm::APFloatBase *)(a2 + 8);
      if (*(_BYTE *)(a2 + 32))
      {
        llvm::APFloat::Storage::operator=(v67, (llvm::APFloatBase *)&v78);
      }
      else
      {
        if (v55 == v78)
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v67, &v78);
        else
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v67, (uint64_t)&v78);
        *(_BYTE *)(a2 + 32) = 1;
      }
      if (v55 == v78)
        std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v79);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v78);
      v16 = 1;
LABEL_122:
      if (v75 >= 0x41 && v74)
        operator delete[](v74);
      return v16;
    }
LABEL_74:
    v71 = "hexadecimal float constant out of range for type";
    v73 = 259;
    v56 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, Loc);
    mlir::emitError(v56, (uint64_t)&v71, (uint64_t)&v77);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v77);
    v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    if (v86)
    {
      v57 = (_QWORD **)__p;
      if (__p)
      {
        v58 = v85;
        v59 = __p;
        if (v85 != __p)
        {
          do
            v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          v59 = __p;
        }
        v85 = v57;
        operator delete(v59);
      }
      v60 = v82;
      if (v82)
      {
        v61 = v83;
        v62 = v82;
        if (v83 != v82)
        {
          do
          {
            v64 = (void *)*--v61;
            v63 = v64;
            *v61 = 0;
            if (v64)
              operator delete[](v63);
          }
          while (v61 != v60);
          v62 = v82;
        }
        v83 = v60;
        operator delete(v62);
      }
      if (v80 != v81)
        free(v80);
    }
    goto LABEL_122;
  }
  v71 = "hexadecimal float constant out of range for type";
  v73 = 259;
  v45 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, Loc);
  mlir::emitError(v45, (uint64_t)&v71, (uint64_t)&v77);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(&v77);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
  if (v77)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
  if (v86)
  {
    v46 = (_QWORD **)__p;
    if (__p)
    {
      v47 = v85;
      v48 = __p;
      if (v85 != __p)
      {
        do
          v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        v48 = __p;
      }
      v85 = v46;
      operator delete(v48);
    }
    v20 = v82;
    if (!v82)
      goto LABEL_61;
    v49 = v83;
    v22 = v82;
    if (v83 == v82)
      goto LABEL_60;
    do
    {
      v51 = (void *)*--v49;
      v50 = v51;
      *v49 = 0;
      if (v51)
        operator delete[](v50);
    }
    while (v49 != v20);
    goto LABEL_59;
  }
  return v16;
}

void mlir::detail::Parser::parseResourceHandle(mlir::detail::Parser *this@<X0>, const mlir::OpAsmDialectInterface *a2@<X1>, llvm::StringRef *a3@<X2>, uint64_t a4@<X8>)
{
  const char *Loc;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD **v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t EncodedSourceLocation;
  int8x16_t **v42;
  char *v43;
  char *v44;
  __int128 v45;
  const char *v46;
  int8x16_t **v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  const char *v52;
  const void **v53;
  int8x16_t **v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  _WORD v71[20];
  __int128 v72;
  uint64_t v73;
  char v74;
  const mlir::OpAsmDialectInterface *v75;
  int8x16_t *v76;
  const char *v77;
  uint64_t v78;
  __int16 v79;
  __int128 v80;
  uint64_t v81;
  void *v82;
  unsigned int v83;
  unsigned int v84;
  _BYTE v85[96];
  void *v86;
  _QWORD *v87;
  void *__p;
  _QWORD **v89;
  char v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v75 = a2;
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
  v8 = *((_QWORD *)this + 1);
  v9 = *(_DWORD *)(v8 + 56);
  if (v9 == 3 || v9 == 12)
  {
LABEL_6:
    *(_OWORD *)a3 = *(_OWORD *)(v8 + 64);
    mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v80);
    v11 = *((_QWORD *)this + 1);
    *(_OWORD *)(v11 + 56) = v80;
    *(_QWORD *)(v11 + 72) = v81;
    v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 80);
    v15 = *(_QWORD *)(v12 + 48);
    v13 = v12 + 48;
    v14 = v15;
    v16 = *(_DWORD *)(v13 + 16);
    if (v16)
    {
      v17 = v16 - 1;
      v18 = ((v75 >> 4) ^ (v75 >> 9)) & (v16 - 1);
      v19 = (uint64_t *)(v14 + 32 * v18);
      v20 = *v19;
      if (v75 == (const mlir::OpAsmDialectInterface *)*v19)
        goto LABEL_21;
      v21 = 0;
      v22 = 1;
      while (v20 != -4096)
      {
        if (v21)
          v23 = 0;
        else
          v23 = v20 == -8192;
        if (v23)
          v21 = v19;
        v24 = v18 + v22++;
        v18 = v24 & v17;
        v19 = (uint64_t *)(v14 + 32 * v18);
        v20 = *v19;
        if (v75 == (const mlir::OpAsmDialectInterface *)*v19)
          goto LABEL_21;
      }
      if (v21)
        v26 = v21;
      else
        v26 = v19;
    }
    else
    {
      v26 = 0;
    }
    v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>,mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::InsertIntoBucket<mlir::OpAsmDialectInterface const* const&>(v13, v26, (uint64_t *)&v75);
LABEL_21:
    v27 = llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>::try_emplace<>((uint64_t)(v19 + 1), *(int8x16_t **)a3, *((const unsigned __int8 **)a3 + 1));
    v28 = *v27;
    LODWORD(v29) = *(char *)(*v27 + 31);
    if ((v29 & 0x80000000) != 0)
    {
      v30 = v28 + 8;
      if (!*(_QWORD *)(v28 + 16))
        goto LABEL_25;
    }
    else
    {
      v30 = v28 + 8;
      if (!*(_BYTE *)(*v27 + 31))
      {
LABEL_25:
        (*(void (**)(__int128 *__return_ptr, const mlir::OpAsmDialectInterface *, _QWORD, _QWORD))(*(_QWORD *)v75 + 32))(&v72, v75, *(_QWORD *)a3, *((_QWORD *)a3 + 1));
        if (v74)
        {
          (*(void (**)(__int128 *__return_ptr, const mlir::OpAsmDialectInterface *, __int128 *))(*(_QWORD *)v75 + 40))(&v80, v75, &v72);
          if (*(char *)(v28 + 31) < 0)
            operator delete(*(void **)v30);
          v31 = v80;
          *(_QWORD *)(v30 + 16) = v81;
          *(_OWORD *)v30 = v31;
          *(_OWORD *)(v28 + 32) = v72;
          *(_QWORD *)(v28 + 48) = v73;
          LOBYTE(v29) = *(_BYTE *)(v28 + 31);
          goto LABEL_29;
        }
        v71[16] = 257;
        EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, Loc);
        mlir::emitError(EncodedSourceLocation, (uint64_t)v71, (uint64_t)&v80);
        if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
          mlir::InFlightDiagnostic::abandon(&v80);
        if (!(_QWORD)v80)
          goto LABEL_61;
        LODWORD(v76) = 3;
        v77 = "unknown 'resource' key '";
        v78 = 24;
        v42 = &v76;
        v43 = (char *)v82;
        if (v83 >= v84)
        {
          v65 = v83 + 1;
          if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
          {
            v68 = (char *)&v76 - (_BYTE *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v65, 24);
            v43 = (char *)v82;
            v42 = (int8x16_t **)((char *)v82 + v68);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v65, 24);
            v42 = &v76;
            v43 = (char *)v82;
          }
        }
        v44 = &v43[24 * v83];
        v45 = *(_OWORD *)v42;
        *((_QWORD *)v44 + 2) = v42[2];
        *(_OWORD *)v44 = v45;
        ++v83;
        if (!(_QWORD)v80)
          goto LABEL_61;
        v79 = 261;
        v46 = (const char *)*((_QWORD *)a3 + 1);
        v76 = *(int8x16_t **)a3;
        v77 = v46;
        mlir::Diagnostic::operator<<((uint64_t)&v80 + 8, (const void ***)&v76);
        if (!(_QWORD)v80)
          goto LABEL_61;
        LODWORD(v76) = 3;
        v77 = "' for dialect '";
        v78 = 15;
        v47 = &v76;
        v48 = (char *)v82;
        if (v83 >= v84)
        {
          v66 = v83 + 1;
          if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
          {
            v69 = (char *)&v76 - (_BYTE *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
            v48 = (char *)v82;
            v47 = (int8x16_t **)((char *)v82 + v69);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
            v47 = &v76;
            v48 = (char *)v82;
          }
        }
        v49 = &v48[24 * v83];
        v50 = *(_OWORD *)v47;
        *((_QWORD *)v49 + 2) = v47[2];
        *(_OWORD *)v49 = v50;
        ++v83;
        if (!(_QWORD)v80)
          goto LABEL_61;
        v51 = *((_QWORD *)v75 + 1);
        v53 = *(const void ***)(v51 + 8);
        v52 = *(const char **)(v51 + 16);
        v79 = 261;
        v76 = (int8x16_t *)v53;
        v77 = v52;
        mlir::Diagnostic::operator<<((uint64_t)&v80 + 8, (const void ***)&v76);
        if ((_QWORD)v80)
        {
          LODWORD(v76) = 3;
          v77 = "'";
          v78 = 1;
          v54 = &v76;
          v55 = (char *)v82;
          if (v83 >= v84)
          {
            v67 = v83 + 1;
            if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
            {
              v70 = (char *)&v76 - (_BYTE *)v82;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v67, 24);
              v55 = (char *)v82;
              v54 = (int8x16_t **)((char *)v82 + v70);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v67, 24);
              v54 = &v76;
              v55 = (char *)v82;
            }
          }
          v56 = &v55[24 * v83];
          v57 = *(_OWORD *)v54;
          *((_QWORD *)v56 + 2) = v54[2];
          *(_OWORD *)v56 = v57;
          ++v83;
          v58 = v80;
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 24) = 0;
          if (v58)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
        }
        else
        {
LABEL_61:
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 24) = 0;
        }
        if (v90)
        {
          v59 = (_QWORD **)__p;
          if (__p)
          {
            v60 = v89;
            v61 = __p;
            if (v89 != __p)
            {
              do
                v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
              while (v60 != v59);
              v61 = __p;
            }
            v89 = v59;
            operator delete(v61);
          }
          v36 = v86;
          if (!v86)
            goto LABEL_76;
          v62 = v87;
          v38 = v86;
          if (v87 == v86)
          {
LABEL_75:
            v87 = v36;
            operator delete(v38);
LABEL_76:
            if (v82 != v85)
              free(v82);
            return;
          }
          do
          {
            v64 = (void *)*--v62;
            v63 = v64;
            *v62 = 0;
            if (v64)
              operator delete[](v63);
          }
          while (v62 != v36);
LABEL_74:
          v38 = v86;
          goto LABEL_75;
        }
        return;
      }
    }
LABEL_29:
    v32 = *(_QWORD *)(v28 + 8);
    if ((v29 & 0x80u) == 0)
      v32 = v30;
    v29 = v29;
    if ((v29 & 0x80u) != 0)
      v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)a3 = v32;
    *((_QWORD *)a3 + 1) = v29;
    *(_OWORD *)a4 = *(_OWORD *)(v28 + 32);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v28 + 48);
    *(_BYTE *)(a4 + 24) = 1;
    return;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v8 + 56)))
  {
    v8 = *((_QWORD *)this + 1);
    goto LABEL_6;
  }
  v76 = (int8x16_t *)"expected identifier key for 'resource' entry";
  v79 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v76, &v80);
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
  if ((_QWORD)v80)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
  if (v90)
  {
    v33 = (_QWORD **)__p;
    if (__p)
    {
      v34 = v89;
      v35 = __p;
      if (v89 != __p)
      {
        do
          v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        v35 = __p;
      }
      v89 = v33;
      operator delete(v35);
    }
    v36 = v86;
    if (!v86)
      goto LABEL_76;
    v37 = v87;
    v38 = v86;
    if (v87 == v86)
      goto LABEL_75;
    do
    {
      v40 = (void *)*--v37;
      v39 = v40;
      *v37 = 0;
      if (v40)
        operator delete[](v39);
    }
    while (v37 != v36);
    goto LABEL_74;
  }
}

void mlir::detail::Parser::parseResourceHandle(mlir::detail::Parser *this@<X0>, mlir::Dialect *a2@<X1>, _BYTE *a3@<X8>)
{
  const mlir::OpAsmDialectInterface *v6;
  const void ***v7;
  char *v8;
  char *v9;
  __int128 v10;
  const void **v11;
  const char *v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  char v30[32];
  __int16 v31;
  const void **v32;
  const char *v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  _BYTE v41[96];
  void *v42;
  _QWORD *v43;
  void *__p;
  _QWORD **v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2)
    && (v6 = (const mlir::OpAsmDialectInterface *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2)) != 0)
  {
    v36 = 0;
    v37 = 0;
    mlir::detail::Parser::parseResourceHandle(this, v6, (llvm::StringRef *)&v36, (uint64_t)a3);
  }
  else
  {
    v31 = 257;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)v30, &v36);
    if (!v36)
      goto LABEL_11;
    LODWORD(v32) = 3;
    v33 = "dialect '";
    v34 = 9;
    v7 = &v32;
    v8 = (char *)v38;
    if (v39 >= v40)
    {
      v26 = v39 + 1;
      if (v38 <= &v32 && (char *)v38 + 24 * v39 > (char *)&v32)
      {
        v28 = (char *)&v32 - (_BYTE *)v38;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v26, 24);
        v8 = (char *)v38;
        v7 = (const void ***)((char *)v38 + v28);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v26, 24);
        v7 = &v32;
        v8 = (char *)v38;
      }
    }
    v9 = &v8[24 * v39];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = v7[2];
    *(_OWORD *)v9 = v10;
    ++v39;
    if (!v36)
      goto LABEL_11;
    v11 = (const void **)*((_QWORD *)a2 + 1);
    v12 = (const char *)*((_QWORD *)a2 + 2);
    v35 = 261;
    v32 = v11;
    v33 = v12;
    mlir::Diagnostic::operator<<((uint64_t)&v37, &v32);
    if (v36)
    {
      LODWORD(v32) = 3;
      v33 = "' does not expect resource handles";
      v34 = 34;
      v13 = &v32;
      v14 = (char *)v38;
      if (v39 >= v40)
      {
        v27 = v39 + 1;
        if (v38 <= &v32 && (char *)v38 + 24 * v39 > (char *)&v32)
        {
          v29 = (char *)&v32 - (_BYTE *)v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
          v14 = (char *)v38;
          v13 = (const void ***)((char *)v38 + v29);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
          v13 = &v32;
          v14 = (char *)v38;
        }
      }
      v15 = &v14[24 * v39];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v39;
      v17 = v36;
      *a3 = 0;
      a3[24] = 0;
      if (v17)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v46)
    {
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v45;
        v20 = __p;
        if (v45 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v45 = v18;
        operator delete(v20);
      }
      v21 = v42;
      if (v42)
      {
        v22 = v43;
        v23 = v42;
        if (v43 != v42)
        {
          do
          {
            v25 = (void *)*--v22;
            v24 = v25;
            *v22 = 0;
            if (v25)
              operator delete[](v24);
          }
          while (v22 != v21);
          v23 = v42;
        }
        v43 = v21;
        operator delete(v23);
      }
      if (v38 != v41)
        free(v38);
    }
  }
}

uint64_t mlir::detail::Parser::codeCompleteExpectedTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2, a3, 0);
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteOptionalTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2, a3, 1);
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteAttribute(mlir::detail::Parser *this)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 56))(*(_QWORD *)(*((_QWORD *)this + 1) + 136), *(_QWORD *)(*((_QWORD *)this + 1) + 80));
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteType(mlir::detail::Parser *this)
{
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 72))(*(_QWORD *)(*((_QWORD *)this + 1) + 136), *(_QWORD *)(*((_QWORD *)this + 1) + 80) + 24);
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteDialectSymbol(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                 + 136));
  return 0;
}

{
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                 + 136));
  return 0;
}

void mlir::parseAsmSourceFile(uint64_t **a1, uint64_t a2, uint64_t ***a3, mlir::AsmParserState *a4, mlir::AsmParserState *a5)
{
  uint64_t **v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t ***v13;
  mlir::GenericProgramPoint *v14;
  mlir::Operation *v15;
  unint64_t v16;
  mlir::Region *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[8];
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  char v27;
  uint64_t ***v28;
  uint64_t **v29;
  _QWORD v30[6];
  int v31;
  void *v32;
  uint64_t v33;
  mlir::AsmParserState *v34[4];
  _QWORD v35[6];
  _QWORD v36[4];
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  mlir::Value *v44;
  uint64_t v45;
  int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t Context;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  mlir::Operation *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)**a1 + 16))(**a1);
  v12 = mlir::FileLineColLoc::get((mlir::StringAttr *)v9, v10, v11, 0, 0);
  v21[0] = 0;
  v21[1] = 0;
  v21[2] = 0x1000000000;
  v21[3] = 0;
  v21[4] = 0;
  v21[5] = 0x1000000000;
  v21[6] = 0;
  v21[7] = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v28 = a3;
  v13 = mlir::Lexer::Lexer(&v29, a1, *a3, (uint64_t)a5);
  mlir::Lexer::lexToken((mlir::Lexer *)v13, (uint64_t)v30);
  v30[4] = 0;
  v30[5] = 0;
  v30[3] = v21;
  v31 = 0;
  v32 = v34;
  v33 = 0;
  v34[0] = a4;
  v34[1] = a5;
  v34[2] = (mlir::AsmParserState *)v35;
  v35[0] = "builtin";
  v35[1] = 7;
  v34[3] = (mlir::AsmParserState *)0x300000001;
  LOBYTE(v26) = 0;
  v27 = 0;
  v14 = mlir::ModuleOp::create(v12, &v26);
  v15 = v14;
  v36[0] = *v28;
  v36[1] = &v28;
  v36[2] = &v37;
  v36[3] = 0x200000000;
  v38 = &v40;
  v39 = 0x200000000;
  v41 = &v43;
  v42 = 0x200000000;
  v45 = 0;
  v44 = 0;
  v46 = 0;
  v49 = 0;
  v47 = 0;
  v48 = 0;
  v16 = *((unsigned int *)v14 + 11);
  if ((v16 & 0x7FFFFF) != 0)
    v17 = (mlir::Region *)((((unint64_t)v14 + 16 * ((v16 >> 23) & 1) + ((v16 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *((unsigned int *)v14 + 10));
  else
    v17 = 0;
  Context = mlir::Region::getContext(v17);
  v51 = 0;
  v53 = 0;
  v52 = 0;
  if (*(mlir::Region **)v17 != v17)
  {
    v18 = *((_QWORD *)v17 + 1);
    if (v18)
      v19 = v18 - 8;
    else
      v19 = 0;
    v20 = *(_QWORD *)(v19 + 40);
    v52 = v19;
    v53 = v20;
  }
  v54 = v15;
}

void sub_1802F2BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  mlir::detail::SymbolState::~SymbolState((llvm **)va);
}

uint64_t sub_1802F2BCC()
{
  uint64_t v0;

  return v0;
}

void std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100](llvm::APFloatBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
    {
      v3 = llvm::APFloatBase::PPCDoubleDouble(a1);
      v4 = 32 * v2;
      do
      {
        while (v3 == *(void **)(v1 + v4 - 24))
        {
          std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100](v1 + v4 - 16, 0);
          v4 -= 32;
          if (!v4)
            goto LABEL_7;
        }
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)(v1 + v4 - 24));
        v4 -= 32;
      }
      while (v4);
    }
LABEL_7:
    operator delete[]((void *)(v1 - 16));
  }
}

uint64_t `anonymous namespace'::OperationParser::parseOperation(_anonymous_namespace_::OperationParser *this)
{
  const char *Loc;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  std::string::size_type v10;
  const void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t AttrData;
  std::string::size_type v15;
  void *v16;
  void *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  llvm **v23;
  unsigned __int8 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  uint64_t Values;
  uint64_t v36;
  unint64_t v37;
  char v38;
  llvm **v39;
  std::string *v40;
  std::string::size_type size;
  size_t v42;
  _BYTE *v43;
  void (*v44)(void);
  uint64_t v45;
  std::string *v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t DialectNamespace;
  std::string::size_type v51;
  void *v52;
  const char *v53;
  void *v54;
  std::string *v55;
  char *v56;
  char *v57;
  __int128 v58;
  std::string *v59;
  char *v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  const char *v65;
  int v66;
  _BYTE *v67;
  uint64_t v68;
  BOOL v69;
  uint64_t EncodedSourceLocation;
  void *v71;
  std::string *v72;
  char *v73;
  char *v74;
  __int128 v75;
  std::string *v76;
  char *v77;
  char *v78;
  __int128 v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  int v83;
  unsigned __int8 v84;
  std::string::size_type v85;
  std::string::size_type v86;
  std::string::size_type v87;
  std::string::size_type v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD **v92;
  _QWORD **v93;
  void *v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  _BYTE *v104;
  int v106;
  _BYTE *v107;
  _BYTE *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char **v113;
  const char *v114;
  __n128 v115;
  mlir::AsmParserState *v116;
  llvm **v117;
  const char *v118;
  const void **v119;
  const char *v120;
  const void ***v121;
  char *v122;
  char *v123;
  __int128 v124;
  char v125;
  _QWORD **v126;
  _QWORD **v127;
  void *v128;
  _QWORD *v129;
  _QWORD *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t i;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  const char *v143;
  void *v144;
  _QWORD **v145;
  _QWORD **v146;
  void *v147;
  _QWORD *v148;
  _QWORD *v149;
  void *v150;
  void *v151;
  void *v152;
  void **v153;
  char *v154;
  char *v155;
  __int128 v156;
  void **v157;
  char *v158;
  char *v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void **v166;
  uint64_t v167;
  __int128 v168;
  char *v169;
  char *v170;
  void *v171;
  std::string::size_type v172;
  char *v173;
  void *v174;
  std::string::size_type v175;
  uint64_t v176;
  unint64_t v177;
  void **v178;
  uint64_t v179;
  __int128 v180;
  _QWORD **v181;
  _QWORD **v182;
  void *v183;
  _QWORD *v184;
  _QWORD *v185;
  void *v186;
  void *v187;
  void *v188;
  const char *v189;
  void *v190;
  _QWORD **v191;
  _QWORD **v192;
  void *v193;
  _QWORD *v194;
  _QWORD *v195;
  void *v196;
  void *v197;
  void *v198;
  void **v199;
  char *v200;
  char *v201;
  __int128 v202;
  void **v203;
  char *v204;
  char *v205;
  __int128 v206;
  _QWORD **v207;
  _QWORD **v208;
  void *v209;
  _QWORD *v210;
  void *v211;
  void *v212;
  llvm **v213;
  char *v214;
  char *v215;
  char *v216;
  uint64_t *v218;
  uint64_t LocRange;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD **v224;
  _QWORD **v225;
  void *v226;
  _QWORD *v227;
  void *v228;
  void *v229;
  uint64_t v230;
  char *v231;
  char **v232;
  char *v233;
  char *v234;
  __int128 v235;
  uint64_t v236;
  char **v237;
  char *v238;
  char *v239;
  __int128 v240;
  uint64_t v241;
  char **v242;
  char *v243;
  char *v244;
  __int128 v245;
  uint64_t v246;
  char **v247;
  char *v248;
  char *v249;
  __int128 v250;
  _QWORD **v251;
  _QWORD **v252;
  void *v253;
  _QWORD *v254;
  void *v255;
  void *v256;
  char *v257;
  char *v258;
  int v259;
  uint64_t *v260;
  int v261;
  std::string::size_type v262;
  char *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _BYTE *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  BOOL v277;
  unint64_t v278;
  BOOL v279;
  unint64_t v280;
  unint64_t v281;
  BOOL v282;
  const char *v283;
  void *v284;
  unint64_t v285;
  const char *v286;
  void *v287;
  unint64_t v288;
  unint64_t v289;
  BOOL v290;
  unint64_t v291;
  const char *v292;
  void *v293;
  unint64_t v294;
  void *v295;
  unint64_t v296;
  unint64_t v297;
  BOOL v298;
  unint64_t v299;
  unint64_t v300;
  const char *v301;
  void *v302;
  unint64_t v303;
  unint64_t v304;
  int64_t v305;
  char *v306;
  char *v307;
  int64_t v308;
  int64_t v309;
  int64_t v310;
  int64_t v311;
  int64_t v312;
  int64_t v313;
  int64_t v314;
  int64_t v315;
  int64_t v316;
  int64_t v317;
  int64_t v318;
  int64_t v319;
  int64_t v320;
  const char *v321;
  std::string::size_type v322;
  char *v323;
  uint64_t v324;
  __int128 v325;
  int v326;
  __int128 v327;
  uint64_t v328;
  char *v329;
  char *v330;
  char *v331;
  uint64_t v332;
  char v333;
  void *v334;
  uint64_t v335;
  uint64_t (*v336)(_QWORD *);
  llvm **v337;
  char v338;
  uint64_t v339;
  std::string::size_type v340;
  _anonymous_namespace_::OperationParser *v341;
  uint64_t v342;
  uint64_t v343[2];
  uint64_t CallableRegion;
  uint64_t v345[4];
  __int16 v346;
  _BYTE v347[24];
  const void **v348;
  const char *v349;
  uint64_t v350;
  __int16 v351;
  void *v352;
  uint64_t v353;
  _BYTE v354[32];
  std::string v355;
  void *__dst;
  uint64_t v357;
  _BYTE v358[72];
  uint64_t *v359;
  __int128 v360;
  uint64_t v361;
  void *__p[2];
  uint64_t v363;
  char v364;
  uint64_t *v365;
  unsigned int v366;
  const void **v367;
  _QWORD v368[2];
  void *v369;
  uint64_t v370;
  llvm *v371[2];
  unint64_t v372;
  unint64_t v373;
  void *v374;
  std::string::size_type v375;
  uint64_t v376;
  void *v377;
  uint64_t v378;
  _BYTE v379[96];
  __int128 v380;
  uint64_t v381;
  __int128 v382;
  uint64_t v383;
  unsigned __int8 v384;
  uint64_t v385;

  v385 = *MEMORY[0x1E0C80C00];
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
  v3 = v354;
  v352 = v354;
  v353 = 0x100000000;
  v329 = 0;
  v4 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v4 + 56) == 6)
  {
    v374 = this;
    v375 = (std::string::size_type)&v352;
    v376 = (uint64_t)&v329;
      goto LABEL_341;
    while (1)
    {
      v5 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v5 + 56) != 16)
        break;
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v355);
      *(std::string *)(*((_QWORD *)this + 1) + 56) = v355;
        goto LABEL_341;
    }
    v355.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected '=' after SSA name";
    LOWORD(v357) = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)this, 18, (uint64_t)&v355))
      goto LABEL_341;
    v4 = *((_QWORD *)this + 1);
  }
  v327 = *(_OWORD *)(v4 + 56);
  v328 = *(_QWORD *)(v4 + 72);
  if ((_DWORD)v327 != 3)
  {
    if (mlir::Token::isKeyword((mlir::Token *)&v327))
    {
      v4 = *((_QWORD *)this + 1);
      goto LABEL_11;
    }
    if ((_DWORD)v327 == 11)
    {
      goto LABEL_333;
    }
    if (!mlir::Token::isCodeCompletionFor((uint64_t)&v327, 11))
    {
      if ((_DWORD)v327 != 2)
      {
        v374 = "expected operation name in quotes";
        LOWORD(v378) = 259;
        mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v374, &v355);
        v68 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v355);
        if (v355.__r_.__value_.__r.__words[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v355);
        if (!v364)
          goto LABEL_342;
        v92 = (_QWORD **)__p[0];
        if (__p[0])
        {
          v93 = (_QWORD **)__p[1];
          v94 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
            while (v93 != v92);
            v94 = __p[0];
          }
          __p[1] = v92;
          operator delete(v94);
        }
        v95 = (_QWORD *)v360;
        if ((_QWORD)v360)
        {
          v96 = (_QWORD *)*((_QWORD *)&v360 + 1);
          v97 = (void *)v360;
          if (*((_QWORD *)&v360 + 1) == (_QWORD)v360)
            goto LABEL_390;
          do
          {
            v99 = (void *)*--v96;
            v98 = v99;
            *v96 = 0;
            if (v99)
              operator delete[](v98);
          }
          while (v96 != v95);
LABEL_389:
          v97 = (void *)v360;
LABEL_390:
          *((_QWORD *)&v360 + 1) = v95;
          operator delete(v97);
        }
LABEL_391:
        if (__dst != v358)
          free(__dst);
        goto LABEL_342;
      }
      v63 = *((_QWORD *)this + 1);
      v64 = *(_QWORD *)(v63 + 24);
      v65 = Loc - 1;
      while ((unint64_t)v65 > v64)
      {
        v66 = *v65;
        if (v66 == 10)
          break;
        v67 = memchr(" \t\r", v66, 3uLL);
        v68 = 0;
        --v65;
        if (v67)
          v69 = v67 - " \t\r" == -1;
        else
          v69 = 1;
        if (v69)
          goto LABEL_342;
      }
      (*(void (**)(_QWORD, const char *, _QWORD))(**(_QWORD **)(v63 + 136) + 16))(*(_QWORD *)(v63 + 136), "", 0);
      v100 = *((_QWORD *)this + 1);
      v101 = *(_QWORD *)(v100 + 144) + 16 * *(unsigned int *)(v100 + 152);
      v102 = *(_QWORD *)(v101 - 8);
      if (v102)
      {
        v103 = *(void **)(v101 - 16);
        v104 = memchr(v103, 46, *(_QWORD *)(v101 - 8));
        if (!v104 || v104 - (_BYTE *)v103 == -1)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(v100 + 136) + 24))(*(_QWORD *)(v100 + 136), v103, v102);
      }
LABEL_341:
      v68 = 0;
      goto LABEL_342;
    }
    v40 = &v355;
    mlir::Token::getStringValue((mlir::Token *)&v327, &v355);
    if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = (std::string *)v355.__r_.__value_.__r.__words[0];
    size = HIBYTE(v355.__r_.__value_.__r.__words[2]);
    if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v355.__r_.__value_.__l.__size_;
    if (size)
    {
      if (v40->__r_.__value_.__s.__data_[size - 1] != 46
        || (size >= size - 1 ? (v42 = size - 1) : (v42 = size),
            !v42 || (v43 = memchr(v40, 46, v42)) != 0 && v43 - (_BYTE *)v40 != -1))
      {
LABEL_128:
        if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v355.__r_.__value_.__l.__data_);
        goto LABEL_341;
      }
      v44 = *(void (**)(void))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 24);
    }
    else
    {
      v44 = *(void (**)(void))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 16);
    }
    v44();
    goto LABEL_128;
  }
LABEL_11:
  v6 = v352;
  v7 = v353;
  v8 = (const char *)mlir::Token::getLoc((mlir::Token *)(v4 + 56));
  v9 = *((_QWORD *)this + 1);
  v11 = *(const void **)(v9 + 64);
  v10 = *(_QWORD *)(v9 + 72);
  v343[0] = v12;
  v343[1] = v13;
  if (!(_BYTE)v13)
  {
    v33 = 0;
    goto LABEL_333;
  }
  v355.__r_.__value_.__r.__words[0] = *(_QWORD *)(v12 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v355);
  v16 = (void *)AttrData;
  v373 = 0;
  v17 = *(void **)(v343[0] + 16);
  v18 = v17 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v17 == &mlir::detail::TypeIDResolver<void,void>::id)
    v19 = 0;
  else
    v19 = LOBYTE(v343[0]);
  v322 = v15;
  if (v18)
  {
    v34 = v15;
    v355.__r_.__value_.__r.__words[0] = *(_QWORD *)(v343[0] + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v355);
    if (Values)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, void *, std::string::size_type))(*(_QWORD *)Values
                                                                                                 + 64))(&v355, Values, v16, v34);
      if (v355.__r_.__value_.__s.__data_[16])
      {
        v321 = Loc;
        v20 = (uint64_t)v16;
        v37 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,void>::Callbacks
            + 2;
        __dst = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,void>::Callbacks
              + 2;
        v38 = v373;
        if (v373 >= 8)
        {
          if ((v373 & 4) != 0)
          {
            if ((v373 & 2) != 0)
              v39 = v371;
            else
              v39 = (llvm **)v371[0];
            (*(void (**)(llvm **))((v373 & 0xFFFFFFFFFFFFFFF8) + 16))(v39);
          }
          if ((v38 & 2) == 0)
            llvm::deallocate_buffer(v371[0], v371[1]);
          v37 = (unint64_t)__dst;
        }
        v373 = v37;
        if (v37 >= 8)
        {
          if ((v37 & 2) != 0 && (v37 & 4) != 0)
          {
            (*(void (**)(uint64_t (**)(uint64_t, uint64_t), uint64_t, uint64_t))((v37 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 8))((uint64_t (**)(uint64_t, uint64_t))v371, (uint64_t)&v355, v36);
          }
          else
          {
            *(_OWORD *)v371 = *(_OWORD *)&v355.__r_.__value_.__l.__data_;
            v372 = v355.__r_.__value_.__r.__words[2];
          }
        }
        v28 = 0;
        v26 = 0;
        goto LABEL_151;
      }
      LOWORD(v334) = 257;
      EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, v8);
      mlir::emitError(EncodedSourceLocation, (uint64_t)&v330, (uint64_t)&v374);
      if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(&v374);
      v71 = v374;
      if (v374)
      {
        LODWORD(v355.__r_.__value_.__l.__data_) = 3;
        v355.__r_.__value_.__l.__size_ = (std::string::size_type)"custom op '";
        v355.__r_.__value_.__r.__words[2] = 11;
        v72 = &v355;
        v73 = (char *)v377;
        if (v378 >= HIDWORD(v378))
        {
          v292 = Loc;
          v293 = v16;
          v294 = v378 + 1;
          if (v377 <= &v355 && (char *)v377 + 24 * v378 > (char *)&v355)
          {
            v314 = (char *)&v355 - (_BYTE *)v377;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v294, 24);
            v73 = (char *)v377;
            v72 = (std::string *)((char *)v377 + v314);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v294, 24);
            v72 = &v355;
            v73 = (char *)v377;
          }
          v34 = v322;
          v16 = v293;
          Loc = v292;
        }
        v74 = &v73[24 * v378];
        v75 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        *((_QWORD *)v74 + 2) = *((_QWORD *)&v72->__r_.__value_.__l + 2);
        *(_OWORD *)v74 = v75;
        LODWORD(v378) = v378 + 1;
        v71 = v374;
        if (v374)
        {
          LOWORD(v357) = 261;
          v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          v355.__r_.__value_.__l.__size_ = v10;
          mlir::Diagnostic::operator<<((uint64_t)&v375, (const void ***)&v355);
          v71 = v374;
          if (v374)
          {
            LODWORD(v355.__r_.__value_.__l.__data_) = 3;
            v355.__r_.__value_.__l.__size_ = (std::string::size_type)"' is unknown";
            v355.__r_.__value_.__r.__words[2] = 12;
            v76 = &v355;
            v77 = (char *)v377;
            if (v378 >= HIDWORD(v378))
            {
              v301 = Loc;
              v302 = v16;
              v303 = v378 + 1;
              if (v377 <= &v355 && (char *)v377 + 24 * v378 > (char *)&v355)
              {
                v319 = (char *)&v355 - (_BYTE *)v377;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v303, 24);
                v77 = (char *)v377;
                v76 = (std::string *)((char *)v377 + v319);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v303, 24);
                v76 = &v355;
                v77 = (char *)v377;
              }
              v34 = v322;
              v16 = v302;
              Loc = v301;
            }
            v78 = &v77[24 * v378];
            v79 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            *((_QWORD *)v78 + 2) = *((_QWORD *)&v76->__r_.__value_.__l + 2);
            *(_OWORD *)v78 = v79;
            LODWORD(v378) = v378 + 1;
            v71 = v374;
          }
        }
      }
      v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
      v355.__r_.__value_.__s.__data_[8] = 0;
      v364 = 0;
      if (!v384)
      {
LABEL_280:
        v189 = Loc;
        mlir::InFlightDiagnostic::abandon(&v374);
        if (v374)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v374);
        if (v384)
        {
          v190 = v16;
          v191 = (_QWORD **)v382;
          if ((_QWORD)v382)
          {
            v192 = (_QWORD **)*((_QWORD *)&v382 + 1);
            v193 = (void *)v382;
            if (*((_QWORD *)&v382 + 1) != (_QWORD)v382)
            {
              do
                v192 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v192 - 1);
              while (v192 != v191);
              v193 = (void *)v382;
            }
            *((_QWORD *)&v382 + 1) = v191;
            operator delete(v193);
          }
          v194 = (_QWORD *)v380;
          if ((_QWORD)v380)
          {
            v195 = (_QWORD *)*((_QWORD *)&v380 + 1);
            v196 = (void *)v380;
            if (*((_QWORD *)&v380 + 1) != (_QWORD)v380)
            {
              do
              {
                v198 = (void *)*--v195;
                v197 = v198;
                *v195 = 0;
                if (v198)
                  operator delete[](v197);
              }
              while (v195 != v194);
              v196 = (void *)v380;
            }
            *((_QWORD *)&v380 + 1) = v194;
            operator delete(v196);
          }
          v16 = v190;
          if (v377 != v379)
            free(v377);
        }
        Loc = v189;
        if (v10 != v34 || v10 && memcmp(v11, v16, v10))
        {
          if (!v355.__r_.__value_.__r.__words[0])
            goto LABEL_309;
          LODWORD(v374) = 3;
          v375 = (std::string::size_type)" (tried '";
          v376 = 9;
          v199 = &v374;
          v200 = (char *)__dst;
          if (v357 >= HIDWORD(v357))
          {
            v295 = v16;
            v296 = v357 + 1;
            if (__dst <= &v374 && (char *)__dst + 24 * v357 > (char *)&v374)
            {
              v315 = (char *)&v374 - (_BYTE *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v296, 24);
              v200 = (char *)__dst;
              v199 = (void **)((char *)__dst + v315);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v296, 24);
              v199 = &v374;
              v200 = (char *)__dst;
            }
            v34 = v322;
            v16 = v295;
            Loc = v189;
          }
          v201 = &v200[24 * v357];
          v202 = *(_OWORD *)v199;
          *((_QWORD *)v201 + 2) = v199[2];
          *(_OWORD *)v201 = v202;
          LODWORD(v357) = v357 + 1;
          if (!v355.__r_.__value_.__r.__words[0])
            goto LABEL_309;
          LOWORD(v378) = 261;
          v374 = v16;
          v375 = v34;
          mlir::Diagnostic::operator<<((uint64_t)&v355.__r_.__value_.__l.__size_, (const void ***)&v374);
          if (!v355.__r_.__value_.__r.__words[0])
            goto LABEL_309;
          LODWORD(v374) = 3;
          v375 = (std::string::size_type)"' as well)";
          v376 = 10;
          v203 = &v374;
          v204 = (char *)__dst;
          if (v357 >= HIDWORD(v357))
          {
            v304 = v357 + 1;
            if (__dst <= &v374 && (char *)__dst + 24 * v357 > (char *)&v374)
            {
              v320 = (char *)&v374 - (_BYTE *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v304, 24);
              v204 = (char *)__dst;
              v203 = (void **)((char *)__dst + v320);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v304, 24);
              v203 = &v374;
              v204 = (char *)__dst;
            }
            Loc = v189;
          }
          v205 = &v204[24 * v357];
          v206 = *(_OWORD *)v203;
          *((_QWORD *)v205 + 2) = v203[2];
          *(_OWORD *)v205 = v206;
          LODWORD(v357) = v357 + 1;
        }
        if (v355.__r_.__value_.__r.__words[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v355);
LABEL_309:
        if (!v364)
          goto LABEL_325;
        v207 = (_QWORD **)__p[0];
        if (__p[0])
        {
          v208 = (_QWORD **)__p[1];
          v209 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v208 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v208 - 1);
            while (v208 != v207);
            v209 = __p[0];
          }
          __p[1] = v207;
          operator delete(v209);
        }
        v184 = (_QWORD *)v360;
        if (!(_QWORD)v360)
          goto LABEL_323;
        v210 = (_QWORD *)*((_QWORD *)&v360 + 1);
        v186 = (void *)v360;
        if (*((_QWORD *)&v360 + 1) == (_QWORD)v360)
          goto LABEL_322;
        do
        {
          v212 = (void *)*--v210;
          v211 = v212;
          *v210 = 0;
          if (v212)
            operator delete[](v211);
        }
        while (v210 != v184);
        goto LABEL_321;
      }
      v355.__r_.__value_.__l.__size_ = v375;
      v80 = v378;
      LODWORD(v355.__r_.__value_.__r.__words[2]) = v376;
      v81 = v358;
      __dst = v358;
      v357 = 0x400000000;
      if (!(_DWORD)v378)
      {
        v83 = 1;
        goto LABEL_276;
      }
      v82 = v379;
      if (v377 != v379)
      {
        __dst = v377;
        v357 = v378;
        v377 = v379;
        HIDWORD(v378) = 0;
        v83 = 1;
LABEL_275:
        LODWORD(v378) = 0;
LABEL_276:
        v34 = v322;
        v360 = v380;
        v361 = v381;
        v380 = 0uLL;
        *(_OWORD *)__p = v382;
        v363 = v383;
        v381 = 0;
        v382 = 0uLL;
        v383 = 0;
        v364 = 1;
        if (v83)
        {
          if (v377 != v379)
            free(v377);
          v384 = 0;
        }
        goto LABEL_280;
      }
      if (v378 < 5)
      {
        v142 = v378;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v378, 24);
        v142 = v378;
        if (!(_DWORD)v378)
        {
LABEL_274:
          LODWORD(v357) = v80;
          v83 = v384;
          goto LABEL_275;
        }
        v82 = v377;
        v81 = __dst;
      }
      memcpy(v81, v82, 24 * v142);
      goto LABEL_274;
    }
    LOWORD(v334) = 257;
    v45 = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, v8);
    mlir::emitError(v45, (uint64_t)&v330, (uint64_t)&v374);
    if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v374);
    if (v374)
    {
      LODWORD(v355.__r_.__value_.__l.__data_) = 3;
      v355.__r_.__value_.__r.__words[2] = 9;
      v46 = &v355;
      v47 = (char *)v377;
      if (v378 >= HIDWORD(v378))
      {
        v283 = Loc;
        v284 = v16;
        v285 = v378 + 1;
        if (v377 <= &v355 && (char *)v377 + 24 * v378 > (char *)&v355)
        {
          v310 = (char *)&v355 - (_BYTE *)v377;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v285, 24);
          v47 = (char *)v377;
          v46 = (std::string *)((char *)v377 + v310);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v285, 24);
          v46 = &v355;
          v47 = (char *)v377;
        }
        v34 = v322;
        v16 = v284;
        Loc = v283;
      }
      v48 = &v47[24 * v378];
      v49 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      *((_QWORD *)v48 + 2) = *((_QWORD *)&v46->__r_.__value_.__l + 2);
      *(_OWORD *)v48 = v49;
      LODWORD(v378) = v378 + 1;
    }
    DialectNamespace = mlir::OperationName::getDialectNamespace((mlir::OperationName *)v343);
    v52 = v374;
    if (v374)
    {
      v53 = Loc;
      v54 = v16;
      LOWORD(v357) = 261;
      v355.__r_.__value_.__r.__words[0] = DialectNamespace;
      v355.__r_.__value_.__l.__size_ = v51;
      mlir::Diagnostic::operator<<((uint64_t)&v375, (const void ***)&v355);
      v52 = v374;
      if (v374)
      {
        LODWORD(v355.__r_.__value_.__l.__data_) = 3;
        v355.__r_.__value_.__l.__size_ = (std::string::size_type)"' not found for custom op '";
        v355.__r_.__value_.__r.__words[2] = 27;
        v55 = &v355;
        v56 = (char *)v377;
        if (v378 >= HIDWORD(v378))
        {
          v291 = v378 + 1;
          if (v377 <= &v355 && (char *)v377 + 24 * v378 > (char *)&v355)
          {
            v313 = (char *)&v355 - (_BYTE *)v377;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v291, 24);
            v56 = (char *)v377;
            v55 = (std::string *)((char *)v377 + v313);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v291, 24);
            v55 = &v355;
            v56 = (char *)v377;
          }
        }
        v16 = v54;
        v57 = &v56[24 * v378];
        v58 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        *((_QWORD *)v57 + 2) = *((_QWORD *)&v55->__r_.__value_.__l + 2);
        *(_OWORD *)v57 = v58;
        LODWORD(v378) = v378 + 1;
        v52 = v374;
        if (v374
          && (LOWORD(v357) = 261,
              v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v11,
              v355.__r_.__value_.__l.__size_ = v10,
              mlir::Diagnostic::operator<<((uint64_t)&v375, (const void ***)&v355),
              (v52 = v374) != 0))
        {
          LODWORD(v355.__r_.__value_.__l.__data_) = 3;
          v355.__r_.__value_.__l.__size_ = (std::string::size_type)"' ";
          v355.__r_.__value_.__r.__words[2] = 2;
          v59 = &v355;
          v60 = (char *)v377;
          if (v378 >= HIDWORD(v378))
          {
            v300 = v378 + 1;
            if (v377 <= &v355 && (char *)v377 + 24 * v378 > (char *)&v355)
            {
              v318 = (char *)&v355 - (_BYTE *)v377;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v300, 24);
              v60 = (char *)v377;
              v59 = (std::string *)((char *)v377 + v318);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v300, 24);
              v59 = &v355;
              v60 = (char *)v377;
            }
            v34 = v322;
            v16 = v54;
          }
          else
          {
            v34 = v322;
          }
          v61 = &v60[24 * v378];
          v62 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          *((_QWORD *)v61 + 2) = *((_QWORD *)&v59->__r_.__value_.__l + 2);
          *(_OWORD *)v61 = v62;
          LODWORD(v378) = v378 + 1;
          v52 = v374;
        }
        else
        {
          v34 = v322;
        }
      }
      else
      {
        v34 = v322;
      }
      Loc = v53;
    }
    v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    v355.__r_.__value_.__s.__data_[8] = 0;
    v364 = 0;
    if (!v384)
    {
LABEL_223:
      mlir::InFlightDiagnostic::abandon(&v374);
      if (v374)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v374);
      if (v384)
      {
        v143 = Loc;
        v144 = v16;
        v145 = (_QWORD **)v382;
        if ((_QWORD)v382)
        {
          v146 = (_QWORD **)*((_QWORD *)&v382 + 1);
          v147 = (void *)v382;
          if (*((_QWORD *)&v382 + 1) != (_QWORD)v382)
          {
            do
              v146 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v146 - 1);
            while (v146 != v145);
            v147 = (void *)v382;
          }
          *((_QWORD *)&v382 + 1) = v145;
          operator delete(v147);
        }
        v148 = (_QWORD *)v380;
        if ((_QWORD)v380)
        {
          v149 = (_QWORD *)*((_QWORD *)&v380 + 1);
          v150 = (void *)v380;
          if (*((_QWORD *)&v380 + 1) != (_QWORD)v380)
          {
            do
            {
              v152 = (void *)*--v149;
              v151 = v152;
              *v149 = 0;
              if (v152)
                operator delete[](v151);
            }
            while (v149 != v148);
            v150 = (void *)v380;
          }
          *((_QWORD *)&v380 + 1) = v148;
          operator delete(v150);
        }
        v16 = v144;
        Loc = v143;
        if (v377 != v379)
          free(v377);
      }
      if ((v10 != v34 || v10 && memcmp(v11, v16, v10)) && v355.__r_.__value_.__r.__words[0])
      {
        LODWORD(v374) = 3;
        v375 = (std::string::size_type)" (tried '";
        v376 = 9;
        v153 = &v374;
        v154 = (char *)__dst;
        if (v357 >= HIDWORD(v357))
        {
          v286 = Loc;
          v287 = v16;
          v288 = v357 + 1;
          if (__dst <= &v374 && (char *)__dst + 24 * v357 > (char *)&v374)
          {
            v311 = (char *)&v374 - (_BYTE *)__dst;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v288, 24);
            v154 = (char *)__dst;
            v153 = (void **)((char *)__dst + v311);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v288, 24);
            v153 = &v374;
            v154 = (char *)__dst;
          }
          v34 = v322;
          v16 = v287;
          Loc = v286;
        }
        v155 = &v154[24 * v357];
        v156 = *(_OWORD *)v153;
        *((_QWORD *)v155 + 2) = v153[2];
        *(_OWORD *)v155 = v156;
        LODWORD(v357) = v357 + 1;
        if (v355.__r_.__value_.__r.__words[0])
        {
          LOWORD(v378) = 261;
          v374 = v16;
          v375 = v34;
          mlir::Diagnostic::operator<<((uint64_t)&v355.__r_.__value_.__l.__size_, (const void ***)&v374);
          if (v355.__r_.__value_.__r.__words[0])
          {
            LODWORD(v374) = 3;
            v375 = (std::string::size_type)"' as well)";
            v376 = 10;
            v157 = &v374;
            v158 = (char *)__dst;
            if (v357 >= HIDWORD(v357))
            {
              v299 = v357 + 1;
              if (__dst <= &v374 && (char *)__dst + 24 * v357 > (char *)&v374)
              {
                v317 = (char *)&v374 - (_BYTE *)__dst;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v299, 24);
                v158 = (char *)__dst;
                v157 = (void **)((char *)__dst + v317);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v299, 24);
                v157 = &v374;
                v158 = (char *)__dst;
              }
            }
            v159 = &v158[24 * v357];
            v160 = *(_OWORD *)v157;
            *((_QWORD *)v159 + 2) = v157[2];
            *(_OWORD *)v159 = v160;
            LODWORD(v357) = v357 + 1;
          }
        }
      }
      v161 = mlir::Diagnostic::attachNote((uint64_t *)&v355.__r_.__value_.__l.__size_, 0, 0);
      v162 = v161;
      v164 = v161 + 16;
      v163 = *(_QWORD *)(v161 + 16);
      LODWORD(v374) = 3;
      v375 = (std::string::size_type)"Registered dialects: ";
      v376 = 21;
      v165 = *(unsigned int *)(v161 + 24);
      v166 = &v374;
      if (v165 >= *(_DWORD *)(v161 + 28))
      {
        v276 = v165 + 1;
        v277 = v163 + 24 * v165 > (unint64_t)&v374;
        if (v163 <= (unint64_t)&v374 && v277)
        {
          v306 = (char *)&v374 - v163;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v161 + 16, (void *)(v161 + 32), v276, 24);
          v163 = *(_QWORD *)(v162 + 16);
          v166 = (void **)&v306[v163];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v161 + 16, (void *)(v161 + 32), v276, 24);
          v163 = *(_QWORD *)(v162 + 16);
          v166 = &v374;
        }
      }
      v167 = v163 + 24 * *(unsigned int *)(v162 + 24);
      v168 = *(_OWORD *)v166;
      *(_QWORD *)(v167 + 16) = v166[2];
      *(_OWORD *)v167 = v168;
      ++*(_DWORD *)(v162 + 24);
      mlir::MLIRContext::getAvailableDialects(***((mlir::MLIRContext ****)this + 1), &v330);
      v169 = v330;
      v170 = v331;
      if (v330 != v331)
      {
        v171 = *(void **)v330;
        v172 = *((_QWORD *)v330 + 1);
        v173 = v330 + 16;
        LOWORD(v378) = 261;
        v374 = v171;
        v375 = v172;
        mlir::Diagnostic::operator<<(v162, (const void ***)&v374);
        while (v173 != v170)
        {
          LOWORD(v378) = 261;
          v374 = ", ";
          v375 = 2;
          mlir::Diagnostic::operator<<(v162, (const void ***)&v374);
          v174 = *(void **)v173;
          v175 = *((_QWORD *)v173 + 1);
          v173 += 16;
          LOWORD(v378) = 261;
          v374 = v174;
          v375 = v175;
          mlir::Diagnostic::operator<<(v162, (const void ***)&v374);
        }
        v169 = v330;
      }
      v3 = v354;
      if (v169)
      {
        v331 = v169;
        operator delete(v169);
      }
      LODWORD(v374) = 3;
      v375 = (std::string::size_type)" ; for more info on dialect registration see https://mlir.llvm.org/getting_started/"
                                     "Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
      v376 = 149;
      v176 = *(unsigned int *)(v162 + 24);
      v177 = *(_QWORD *)(v162 + 16);
      v178 = &v374;
      if (v176 >= *(_DWORD *)(v162 + 28))
      {
        v278 = v176 + 1;
        v279 = v177 + 24 * v176 > (unint64_t)&v374;
        if (v177 <= (unint64_t)&v374 && v279)
        {
          v307 = (char *)&v374 - v177;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v164, (void *)(v162 + 32), v278, 24);
          v177 = *(_QWORD *)(v162 + 16);
          v178 = (void **)&v307[v177];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v164, (void *)(v162 + 32), v278, 24);
          v177 = *(_QWORD *)(v162 + 16);
          v178 = &v374;
        }
      }
      v179 = v177 + 24 * *(unsigned int *)(v162 + 24);
      v180 = *(_OWORD *)v178;
      *(_QWORD *)(v179 + 16) = v178[2];
      *(_OWORD *)v179 = v180;
      ++*(_DWORD *)(v162 + 24);
      if (v355.__r_.__value_.__r.__words[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v355);
      if (!v364)
      {
LABEL_325:
        v33 = 0;
        v141 = v373;
        if (v373 < 8)
          goto LABEL_333;
        goto LABEL_326;
      }
      v181 = (_QWORD **)__p[0];
      if (__p[0])
      {
        v182 = (_QWORD **)__p[1];
        v183 = __p[0];
        if (__p[1] != __p[0])
        {
          do
            v182 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v182 - 1);
          while (v182 != v181);
          v183 = __p[0];
        }
        __p[1] = v181;
        operator delete(v183);
      }
      v184 = (_QWORD *)v360;
      if (!(_QWORD)v360)
      {
LABEL_323:
        if (__dst != v358)
          free(__dst);
        goto LABEL_325;
      }
      v185 = (_QWORD *)*((_QWORD *)&v360 + 1);
      v186 = (void *)v360;
      if (*((_QWORD *)&v360 + 1) == (_QWORD)v360)
      {
LABEL_322:
        *((_QWORD *)&v360 + 1) = v184;
        operator delete(v186);
        goto LABEL_323;
      }
      do
      {
        v188 = (void *)*--v185;
        v187 = v188;
        *v185 = 0;
        if (v188)
          operator delete[](v187);
      }
      while (v185 != v184);
LABEL_321:
      v186 = (void *)v360;
      goto LABEL_322;
    }
    v355.__r_.__value_.__l.__size_ = v375;
    v106 = v378;
    LODWORD(v355.__r_.__value_.__r.__words[2]) = v376;
    v107 = v358;
    __dst = v358;
    v357 = 0x400000000;
    if (!(_DWORD)v378)
    {
      v109 = 1;
      goto LABEL_219;
    }
    v108 = v379;
    if (v377 != v379)
    {
      __dst = v377;
      v357 = v378;
      v377 = v379;
      HIDWORD(v378) = 0;
      v109 = 1;
LABEL_218:
      LODWORD(v378) = 0;
LABEL_219:
      v34 = v322;
      v360 = v380;
      v361 = v381;
      v380 = 0uLL;
      *(_OWORD *)__p = v382;
      v363 = v383;
      v381 = 0;
      v382 = 0uLL;
      v383 = 0;
      v364 = 1;
      if (v109)
      {
        if (v377 != v379)
          free(v377);
        v384 = 0;
      }
      goto LABEL_223;
    }
    if (v378 < 5)
    {
      v110 = v378;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v378, 24);
      v110 = v378;
      if (!(_DWORD)v378)
      {
LABEL_217:
        LODWORD(v357) = v106;
        v109 = v384;
        goto LABEL_218;
      }
      v108 = v377;
      v107 = __dst;
    }
    memcpy(v107, v108, 24 * v110);
    goto LABEL_217;
  }
  v321 = Loc;
  v20 = AttrData;
  v21 = v19 | v343[0] & 0xFFFFFFFFFFFFFF00;
  (*(void (**)(std::string *__return_ptr, unint64_t))(*(_QWORD *)v21 + 40))(&v355, v21);
  v22 = v373;
  if (v373 >= 8)
  {
    if ((v373 & 4) != 0)
    {
      if ((v373 & 2) != 0)
        v23 = v371;
      else
        v23 = (llvm **)v371[0];
      (*(void (**)(llvm **))((v373 & 0xFFFFFFFFFFFFFFF8) + 16))(v23);
    }
    if ((v22 & 2) == 0)
      llvm::deallocate_buffer(v371[0], v371[1]);
  }
  v373 = (unint64_t)__dst;
  if ((unint64_t)__dst >= 8)
  {
    if ((__dst & 2) != 0 && (__dst & 4) != 0)
    {
      (*(void (**)(llvm **, std::string *))(((unint64_t)__dst & 0xFFFFFFFFFFFFFFF8) + 8))(v371, &v355);
      if ((v84 & 1) != 0)
        goto LABEL_29;
      goto LABEL_101;
    }
    *(_OWORD *)v371 = *(_OWORD *)&v355.__r_.__value_.__l.__data_;
    v372 = v355.__r_.__value_.__r.__words[2];
  }
  if ((v24 & 1) != 0)
    goto LABEL_29;
LABEL_101:
  {
    v355.__r_.__value_.__r.__words[0] = (std::string::size_type)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::O"
                                                                "pTrait::IsIsolatedFromAbove<Empty>]";
    v355.__r_.__value_.__l.__size_ = 91;
    v85 = llvm::StringRef::find((uint64_t *)&v355, "DesiredTypeName = ", 0x12uLL, 0);
    if (v355.__r_.__value_.__l.__size_ >= v85)
      v86 = v85;
    else
      v86 = v355.__r_.__value_.__l.__size_;
    v87 = v355.__r_.__value_.__r.__words[0] + v86;
    v88 = v355.__r_.__value_.__l.__size_ - v86;
    if (v355.__r_.__value_.__l.__size_ - v86 >= 0x12)
      v89 = 18;
    else
      v89 = v355.__r_.__value_.__l.__size_ - v86;
    v90 = v88 - v89;
    if (v90 >= v90 - 1)
      v91 = v90 - 1;
    else
      v91 = v90;
    mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v87 + v89, v91);
  }
LABEL_29:
  v25 = v21 + 32;
  v26 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id);
  v27 = mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(v25);
  v28 = v27;
  if (v27)
  {
    v29 = (*(uint64_t (**)(void))(v27 + 24))();
    if (v30)
    {
      v31 = (const char *)(*(uint64_t (**)(uint64_t))(v28 + 24))(v29);
      v28 = v32;
      goto LABEL_152;
    }
    v28 = 0;
  }
LABEL_151:
  v31 = "";
LABEL_152:
  v111 = *((_QWORD *)this + 1);
  v112 = *(unsigned int *)(v111 + 152);
  if (v112 >= *(_DWORD *)(v111 + 156))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v111 + 144, (void *)(v111 + 160), v112 + 1, 16);
    LODWORD(v112) = *(_DWORD *)(v111 + 152);
  }
  v113 = (const char **)(*(_QWORD *)(v111 + 144) + 16 * v112);
  *v113 = v31;
  v113[1] = (const char *)v28;
  ++*(_DWORD *)(v111 + 152);
  v355.__r_.__value_.__r.__words[0] = *(_QWORD *)(v343[0] + 8);
  v114 = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v355);
  llvm::PrettyStackTraceFormat::PrettyStackTraceFormat((llvm::PrettyStackTraceFormat *)v368, "MLIR Parser: custom op parser '%s'", v114);
  v342 = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, v8);
  v115.n128_f64[0] = mlir::OperationState::OperationState(&v355, v342, v343[0]);
  v116 = *(mlir::AsmParserState **)(*((_QWORD *)this + 1) + 128);
  if (v116)
    mlir::AsmParserState::startOperationDefinition(v116, (const mlir::OperationName *)&v355.__r_.__value_.__r.__words[1]);
  v331 = (char *)v8;
  v332 = (uint64_t)this;
  v333 = 0;
  v330 = (char *)off_1E0E16688;
  v334 = v6;
  v335 = v7;
  v336 = llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>::callback_fn<llvm::unique_function<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>;
  v337 = v371;
  v338 = v26;
  v339 = v20;
  v340 = v322;
  v341 = this;
  if ((v373 & 2) != 0)
    v117 = v371;
  else
    v117 = (llvm **)v371[0];
  if (!(*(unsigned __int8 (**)(llvm **, char **, std::string *, __n128))(v373 & 0xFFFFFFFFFFFFFFF8))(v117, &v330, &v355, v115))
  {
    v33 = 0;
    Loc = v321;
    goto LABEL_194;
  }
  mlir::NamedAttrList::findDuplicate(&v359, v347);
  Loc = v321;
  if (!v347[16])
  {
    if (v333)
      goto LABEL_193;
    goto LABEL_188;
  }
  v118 = (const char *)(*((uint64_t (**)(uint64_t))v330 + 2))((uint64_t)&v330);
  v345[0] = (uint64_t)"attribute '";
  v346 = 259;
  (*((void (**)(uint64_t@<X0>, const char *@<X1>, uint64_t *@<X2>, _QWORD *@<X8>))v330 + 3))((uint64_t)&v330, v118, v345, &v374);
  CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v347);
  v119 = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
  if (v374)
  {
    v351 = 261;
    v348 = v119;
    v349 = v120;
    mlir::Diagnostic::operator<<((uint64_t)&v375, &v348);
    if (v374)
    {
      LODWORD(v348) = 3;
      v349 = "' occurs more than once in the attribute list";
      v350 = 45;
      v121 = &v348;
      v122 = (char *)v377;
      if (v378 >= HIDWORD(v378))
      {
        v280 = v378 + 1;
        if (v377 <= &v348 && (char *)v377 + 24 * v378 > (char *)&v348)
        {
          v308 = (char *)&v348 - (_BYTE *)v377;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v280, 24);
          v122 = (char *)v377;
          v121 = (const void ***)((char *)v377 + v308);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, v379, v280, 24);
          v121 = &v348;
          v122 = (char *)v377;
        }
      }
      v123 = &v122[24 * v378];
      v124 = *(_OWORD *)v121;
      *((_QWORD *)v123 + 2) = v121[2];
      *(_OWORD *)v123 = v124;
      LODWORD(v378) = v378 + 1;
    }
  }
  v125 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v374);
  if (v374)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v374);
  if (v384)
  {
    v126 = (_QWORD **)v382;
    if ((_QWORD)v382)
    {
      v127 = (_QWORD **)*((_QWORD *)&v382 + 1);
      v128 = (void *)v382;
      if (*((_QWORD *)&v382 + 1) != (_QWORD)v382)
      {
        do
          v127 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v127 - 1);
        while (v127 != v126);
        v128 = (void *)v382;
      }
      *((_QWORD *)&v382 + 1) = v126;
      operator delete(v128);
    }
    v129 = (_QWORD *)v380;
    if ((_QWORD)v380)
    {
      v130 = (_QWORD *)*((_QWORD *)&v380 + 1);
      v131 = (void *)v380;
      if (*((_QWORD *)&v380 + 1) != (_QWORD)v380)
      {
        do
        {
          v133 = (void *)*--v130;
          v132 = v133;
          *v130 = 0;
          if (v133)
            operator delete[](v132);
        }
        while (v130 != v129);
        v131 = (void *)v380;
      }
      *((_QWORD *)&v380 + 1) = v129;
      operator delete(v131);
    }
    if (v377 != v379)
      free(v377);
  }
  v33 = 0;
  if (v125 && !v333)
  {
LABEL_188:
    v134 = (uint64_t)v367;
    v348 = v367;
    v367 = 0;
    v33 = (uint64_t)mlir::OpBuilder::create((_anonymous_namespace_::OperationParser *)((char *)this + 384), (const mlir::OperationState *)&v355);
    v345[0] = v33;
    {
      if (v134)
      {
        v374 = &v342;
        v375 = (std::string::size_type)&v348;
        v376 = (uint64_t)v345;
        else
          v33 = 0;
      }
      goto LABEL_194;
    }
LABEL_193:
    v33 = 0;
  }
LABEL_194:
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v330);
  v374 = &v376;
  v375 = 0x400000000;
  v135 = v366;
  if (v366 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v374, &v376, v366, 8);
    v135 = v366;
  }
  if (v135)
  {
    v136 = v365;
    v137 = &v365[v135];
    do
    {
      v138 = *v136;
      if (*v136)
      {
        for (i = *(_QWORD *)(v138 + 8); i != v138; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v140 = (_QWORD *)(i - 8);
          else
            v140 = 0;
          mlir::Block::dropAllDefinedValueUses(v140);
        }
      }
      ++v136;
    }
    while (v136 != v137);
  }
  if (v374 != &v376)
    free(v374);
  mlir::OperationState::~OperationState((mlir::OperationState *)&v355);
  v368[0] = off_1E0E22D28;
  if (v369 != &v370)
    free(v369);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v368);
  --*(_DWORD *)(*((_QWORD *)this + 1) + 152);
  v141 = v373;
  if (v373 >= 8)
  {
LABEL_326:
    if ((v141 & 4) != 0)
    {
      if ((v141 & 2) != 0)
        v213 = v371;
      else
        v213 = (llvm **)v371[0];
      (*(void (**)(llvm **))((v141 & 0xFFFFFFFFFFFFFFF8) + 16))(v213);
    }
    if ((v141 & 2) == 0)
      llvm::deallocate_buffer(v371[0], v371[1]);
  }
LABEL_333:
  if (!v33)
    goto LABEL_341;
  if (!(_DWORD)v353)
  {
    v218 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
    if (v218)
    {
      LocRange = mlir::Token::getLocRange((mlir::Token *)&v327);
      v221 = v220;
      v222 = mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
      mlir::AsmParserState::finalizeOperationDefinition(v218, v33, LocRange, v221, v222, 0, 0);
    }
    goto LABEL_347;
  }
  v214 = (char *)*(unsigned int *)(v33 + 36);
  if (!(_DWORD)v214)
  {
    v374 = "cannot name an operation with no results";
    LOWORD(v378) = 259;
    v223 = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, Loc);
    mlir::emitError(v223, (uint64_t)&v374, (uint64_t)&v355);
    if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v355);
    v68 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v355);
    if (v355.__r_.__value_.__r.__words[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v355);
    if (!v364)
      goto LABEL_342;
    v224 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v225 = (_QWORD **)__p[1];
      v226 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v225 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v225 - 1);
        while (v225 != v224);
        v226 = __p[0];
      }
      __p[1] = v224;
      operator delete(v226);
    }
    v95 = (_QWORD *)v360;
    if ((_QWORD)v360)
    {
      v227 = (_QWORD *)*((_QWORD *)&v360 + 1);
      v97 = (void *)v360;
      if (*((_QWORD *)&v360 + 1) == (_QWORD)v360)
        goto LABEL_390;
      do
      {
        v229 = (void *)*--v227;
        v228 = v229;
        *v227 = 0;
        if (v229)
          operator delete[](v228);
      }
      while (v227 != v95);
      goto LABEL_389;
    }
    goto LABEL_391;
  }
  if (v329 != v214)
  {
    v374 = "operation defines ";
    LOWORD(v378) = 259;
    v230 = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, Loc);
    mlir::emitError(v230, (uint64_t)&v374, (uint64_t)&v355);
    if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v355);
    if (v355.__r_.__value_.__r.__words[0])
    {
      v231 = (char *)*(unsigned int *)(v33 + 36);
      LODWORD(v330) = 5;
      v331 = v231;
      v232 = &v330;
      v233 = (char *)__dst;
      if (v357 >= HIDWORD(v357))
      {
        v275 = v357 + 1;
        if (__dst <= &v330 && (char *)__dst + 24 * v357 > (char *)&v330)
        {
          v305 = (char *)&v330 - (_BYTE *)__dst;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v275, 24);
          v233 = (char *)__dst;
          v232 = (char **)((char *)__dst + v305);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v275, 24);
          v232 = &v330;
          v233 = (char *)__dst;
        }
      }
      v234 = &v233[24 * v357];
      v235 = *(_OWORD *)v232;
      *((_QWORD *)v234 + 2) = v232[2];
      *(_OWORD *)v234 = v235;
      v236 = (v357 + 1);
      LODWORD(v357) = v357 + 1;
      if (v355.__r_.__value_.__r.__words[0])
      {
        LODWORD(v330) = 3;
        v331 = " results but was provided ";
        v332 = 26;
        v237 = &v330;
        v238 = (char *)__dst;
        if (v236 >= HIDWORD(v357))
        {
          v281 = v236 + 1;
          v282 = (char *)__dst + 24 * v236 > (char *)&v330;
          if (__dst <= &v330 && v282)
          {
            v309 = (char *)&v330 - (_BYTE *)__dst;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v281, 24);
            v238 = (char *)__dst;
            v237 = (char **)((char *)__dst + v309);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v281, 24);
            v237 = &v330;
            v238 = (char *)__dst;
          }
        }
        v239 = &v238[24 * v357];
        v240 = *(_OWORD *)v237;
        *((_QWORD *)v239 + 2) = v237[2];
        *(_OWORD *)v239 = v240;
        v241 = (v357 + 1);
        LODWORD(v357) = v357 + 1;
        if (v355.__r_.__value_.__r.__words[0])
        {
          LODWORD(v330) = 5;
          v331 = v329;
          v242 = &v330;
          v243 = (char *)__dst;
          if (v241 >= HIDWORD(v357))
          {
            v289 = v241 + 1;
            v290 = (char *)__dst + 24 * v241 > (char *)&v330;
            if (__dst <= &v330 && v290)
            {
              v312 = (char *)&v330 - (_BYTE *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v289, 24);
              v243 = (char *)__dst;
              v242 = (char **)((char *)__dst + v312);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v289, 24);
              v242 = &v330;
              v243 = (char *)__dst;
            }
          }
          v244 = &v243[24 * v357];
          v245 = *(_OWORD *)v242;
          *((_QWORD *)v244 + 2) = v242[2];
          *(_OWORD *)v244 = v245;
          v246 = (v357 + 1);
          LODWORD(v357) = v357 + 1;
          if (v355.__r_.__value_.__r.__words[0])
          {
            LODWORD(v330) = 3;
            v331 = " to bind";
            v332 = 8;
            v247 = &v330;
            v248 = (char *)__dst;
            if (v246 >= HIDWORD(v357))
            {
              v297 = v246 + 1;
              v298 = (char *)__dst + 24 * v246 > (char *)&v330;
              if (__dst <= &v330 && v298)
              {
                v316 = (char *)&v330 - (_BYTE *)__dst;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v297, 24);
                v248 = (char *)__dst;
                v247 = (char **)((char *)__dst + v316);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v358, v297, 24);
                v247 = &v330;
                v248 = (char *)__dst;
              }
            }
            v249 = &v248[24 * v357];
            v250 = *(_OWORD *)v247;
            *((_QWORD *)v249 + 2) = v247[2];
            *(_OWORD *)v249 = v250;
            LODWORD(v357) = v357 + 1;
          }
        }
      }
    }
    v68 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v355);
    if (v355.__r_.__value_.__r.__words[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v355);
    if (!v364)
      goto LABEL_342;
    v251 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v252 = (_QWORD **)__p[1];
      v253 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v252 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v252 - 1);
        while (v252 != v251);
        v253 = __p[0];
      }
      __p[1] = v251;
      operator delete(v253);
    }
    v95 = (_QWORD *)v360;
    if ((_QWORD)v360)
    {
      v254 = (_QWORD *)*((_QWORD *)&v360 + 1);
      v97 = (void *)v360;
      if (*((_QWORD *)&v360 + 1) == (_QWORD)v360)
        goto LABEL_390;
      do
      {
        v256 = (void *)*--v254;
        v255 = v256;
        *v254 = 0;
        if (v256)
          operator delete[](v255);
      }
      while (v254 != v95);
      goto LABEL_389;
    }
    goto LABEL_391;
  }
  if (!*(_QWORD *)(*((_QWORD *)this + 1) + 128))
  {
    v257 = (char *)v352;
    v258 = (char *)v352 + 32 * v353;
    goto LABEL_405;
  }
  LODWORD(v374) = 0;
  v355.__r_.__value_.__r.__words[0] = (std::string::size_type)&v355.__r_.__value_.__r.__words[2];
  v355.__r_.__value_.__l.__size_ = 0x300000000;
  if (v353 <= 3)
  {
    v215 = (char *)v352;
    v216 = (char *)v352 + 32 * v353;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v355, &v355.__r_.__value_.__r.__words[2], v353, 16);
    if (!(_DWORD)v353)
      goto LABEL_401;
    v215 = (char *)v352;
    v216 = (char *)v352 + 32 * v353;
  }
  v259 = 0;
  v260 = (uint64_t *)(v215 + 24);
  do
  {
    v261 = v355.__r_.__value_.__r.__words[1];
    if (LODWORD(v355.__r_.__value_.__r.__words[1]) >= HIDWORD(v355.__r_.__value_.__r.__words[1]))
    {
      llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::SMLoc>,true>::growAndEmplaceBack<unsigned int &,llvm::SMLoc&>((uint64_t)&v355, (unsigned int *)&v374, v260);
    }
    else
    {
      v262 = v355.__r_.__value_.__r.__words[0] + 16 * LODWORD(v355.__r_.__value_.__r.__words[1]);
      *(_DWORD *)v262 = v259;
      *(_QWORD *)(v262 + 8) = *v260;
      LODWORD(v355.__r_.__value_.__r.__words[1]) = v261 + 1;
    }
    v259 = (_DWORD)v374 + *((_DWORD *)v260 - 2);
    LODWORD(v374) = v259;
    v263 = (char *)(v260 + 1);
    v260 += 4;
  }
  while (v263 != v216);
LABEL_401:
  v264 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
  v265 = mlir::Token::getLocRange((mlir::Token *)&v327);
  v267 = v266;
  v268 = mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
  mlir::AsmParserState::finalizeOperationDefinition(v264, v33, v265, v267, v268, (int *)v355.__r_.__value_.__l.__data_, LODWORD(v355.__r_.__value_.__r.__words[1]));
  if ((std::string::size_type *)v355.__r_.__value_.__l.__data_ != &v355.__r_.__value_.__r.__words[2])
    free(v355.__r_.__value_.__l.__data_);
  if (!(_DWORD)v353)
  {
LABEL_347:
    v68 = 1;
    goto LABEL_342;
  }
  v257 = (char *)v352;
  v258 = (char *)v352 + 32 * v353;
LABEL_405:
  v323 = v258;
  v269 = 0;
  while (1)
  {
    v270 = v3;
    v271 = *((unsigned int *)v257 + 4);
    if ((_DWORD)v271)
      break;
    v273 = v269;
LABEL_415:
    v257 += 32;
    v68 = 1;
    v269 = v273;
    v3 = v270;
    if (v257 == v323)
      goto LABEL_342;
  }
  v272 = 0;
  while (1)
  {
    v324 = *((_QWORD *)v257 + 3);
    v325 = *(_OWORD *)v257;
    v326 = v272;
    v273 = (v269 + 1);
    v274 = (uint64_t *)(v269 >= 6
                     ? v33 - 96 - 24 * (v269 - 5)
                     : v33 - 16 * v273);
      break;
    ++v272;
    LODWORD(v269) = v273;
    if (v271 == v272)
      goto LABEL_415;
  }
  v68 = 0;
  v3 = v270;
LABEL_342:
  if (v352 != v3)
    free(v352);
  return v68;
}

void `anonymous namespace'::OperationParser::pushSSANameScope(_anonymous_namespace_::OperationParser *this)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  llvm **v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  char *v11;
  llvm *v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)((char *)this + 208);
  v2 = *((_QWORD *)this + 26);
  v12[0] = 0;
  v12[1] = 0;
  LODWORD(v13) = 0;
  v4 = *((unsigned int *)this + 54);
  v5 = v12;
  if (v4 >= *((_DWORD *)this + 55))
  {
    v9 = v4 + 1;
    v10 = v2 + 24 * v4 > (unint64_t)v12;
    if (v2 <= (unint64_t)v12 && v10)
    {
      v11 = (char *)v12 - v2;
      v2 = *v3;
      v5 = (llvm **)&v11[*v3];
    }
    else
    {
      v2 = *v3;
      v5 = v12;
    }
  }
  v6 = v2 + 24 * *((unsigned int *)this + 54);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = *v5;
  *v5 = 0;
  *(_DWORD *)(v6 + 8) = *((_DWORD *)v5 + 2);
  *((_DWORD *)v5 + 2) = 0;
  v7 = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(v6 + 12) = *((_DWORD *)v5 + 3);
  *((_DWORD *)v5 + 3) = v7;
  v8 = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 16) = *((_DWORD *)v5 + 4);
  *((_DWORD *)v5 + 4) = v8;
  ++*((_DWORD *)this + 54);
  llvm::deallocate_buffer(v12[0], (void *)(32 * v13));
}

void `anonymous namespace'::OperationParser::IsolatedSSANameScope::~IsolatedSSANameScope(_anonymous_namespace_::OperationParser::IsolatedSSANameScope *this)
{
  void **v2;
  unsigned int v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  llvm *v8;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  _QWORD *v14;
  uint64_t v15;

  v2 = (void **)*((_QWORD *)this + 3);
  v3 = *((_DWORD *)this + 8);
  if (v3)
  {
    v4 = &v2[3 * v3];
    do
    {
      v5 = v4;
      v4 -= 3;
      if (*((_DWORD *)v5 - 3))
      {
        v6 = *((unsigned int *)v5 - 4);
        if ((_DWORD)v6)
        {
          v7 = 0;
          do
          {
            v8 = *(llvm **)((char *)*v4 + v7);
            if (v8 != (llvm *)-8 && v8 != 0)
              llvm::deallocate_buffer(v8, (void *)(*(_QWORD *)v8 + 9));
            v7 += 8;
          }
          while (8 * v6 != v7);
        }
      }
      free(*v4);
    }
    while (v4 != v2);
    v2 = (void **)*((_QWORD *)this + 3);
  }
  if (v2 != (void **)((char *)this + 40))
    free(v2);
  if (*((_DWORD *)this + 3))
  {
    v10 = *((unsigned int *)this + 2);
    if ((_DWORD)v10)
    {
      v11 = 0;
      do
      {
        v12 = *(llvm **)(*(_QWORD *)this + v11);
        if (v12 != (llvm *)-8 && v12 != 0)
        {
          v15 = *(_QWORD *)v12;
          v14 = (_QWORD *)*((_QWORD *)v12 + 1);
          if (v14 != (_QWORD *)((char *)v12 + 24))
            free(v14);
          llvm::deallocate_buffer(v12, (void *)(v15 + 41));
        }
        v11 += 8;
      }
      while (8 * v10 != v11);
    }
  }
  free(*(void **)this);
}

void llvm::SmallVectorTemplateBase<llvm::DenseMap<llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  int v7;
  char *v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (char *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    v8 = &v6[24 * v7];
    v9 = v4;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      *((_DWORD *)v9 + 4) = 0;
      *v9 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v6 + 2) = 0;
      v10 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = *((_DWORD *)v6 + 3);
      *((_DWORD *)v6 + 3) = v10;
      v11 = *((_DWORD *)v9 + 4);
      *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
      *((_DWORD *)v6 + 4) = v11;
      v6 += 24;
      v9 += 3;
    }
    while (v6 != v8);
    v6 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
      llvm::deallocate_buffer(*(llvm **)&v6[24 * v12 - 24], (void *)(32 * *(unsigned int *)&v6[24 * v12 - 8]));
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

void llvm::SmallVectorTemplateBase<llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  int v7;
  char *v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (char *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    v8 = &v6[24 * v7];
    v9 = v4;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      *((_DWORD *)v9 + 4) = 0;
      *v9 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v6 + 2) = 0;
      v10 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = *((_DWORD *)v6 + 3);
      *((_DWORD *)v6 + 3) = v10;
      v11 = *((_DWORD *)v9 + 4);
      *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
      *((_DWORD *)v6 + 4) = v11;
      v6 += 24;
      v9 += 3;
    }
    while (v6 != v8);
    v6 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
      llvm::deallocate_buffer(*(llvm **)&v6[24 * v12 - 24], (void *)(16 * *(unsigned int *)&v6[24 * v12 - 8]));
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

void llvm::SmallVectorTemplateBase<`anonymous namespace'::OperationParser::IsolatedSSANameScope,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  int v14;
  unint64_t v15;

  v15 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 88, &v15);
  v5 = *(char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = 0;
    v8 = &v5[88 * v6];
    do
    {
      v9 = &v5[v7];
      v10 = &v4[v7];
      *(_QWORD *)v10 = *(_QWORD *)&v5[v7];
      *(_OWORD *)(v10 + 8) = *(_OWORD *)&v5[v7 + 8];
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 4) = 0;
      *((_QWORD *)v10 + 3) = &v4[v7 + 40];
      *(_QWORD *)&v4[v7 + 32] = 0x200000000;
      if (*(_DWORD *)&v5[v7 + 32])
        llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::operator=((uint64_t)&v4[v7 + 24], (uint64_t)(v9 + 24));
      v7 += 88;
    }
    while (v9 + 88 != v8);
    v5 = *(char **)a1;
    v11 = *(_DWORD *)(a1 + 8);
    if (v11)
    {
      v12 = 88 * v11;
      v13 = v5 - 88;
      do
      {
        v12 -= 88;
      }
      while (v12);
      v5 = *(char **)a1;
    }
  }
  v14 = v15;
  if (v5 != v3)
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v14;
}

uint64_t llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  void **v14;
  void **v15;
  void *v16;
  unsigned int v17;
  void *v18;
  llvm **v19;
  uint64_t v20;
  llvm **v21;
  llvm *v22;
  void **v24;
  unsigned int *v25;
  void **v26;
  void *v27;
  unsigned int v28;
  void *v29;
  llvm **v30;
  uint64_t v31;
  llvm **v32;
  llvm *v33;
  int v35;
  void **v36;
  uint64_t v37;
  void **i;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  llvm *v42;
  unsigned int v44;
  void **v45;
  void **v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  llvm *v50;
  void **v52;
  unsigned int *v53;
  void **v54;
  unsigned int v55;
  void **v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  llvm *v60;
  unint64_t v63;

  if (a1 != a2)
  {
    v4 = *(void ***)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::assignRemote(a1, a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v14 = *(void ***)a1;
      if ((_DWORD)v5)
      {
        v15 = &v4[3 * v5];
        do
        {
          v16 = *v4;
          v17 = *((_DWORD *)v4 + 4);
          v18 = v4[1];
          *v4 = 0;
          v4[1] = 0;
          *((_DWORD *)v4 + 4) = 0;
          v19 = (llvm **)*v14;
          *v14 = v16;
          v20 = *((unsigned int *)v14 + 2);
          LODWORD(v16) = *((_DWORD *)v14 + 3);
          v14[1] = v18;
          *((_DWORD *)v14 + 4) = v17;
          if ((_DWORD)v16 && (_DWORD)v20)
          {
            v21 = v19;
            do
            {
              v22 = *v21;
              if (*v21 != (llvm *)-8 && v22 != 0)
                llvm::deallocate_buffer(v22, (void *)(*(_QWORD *)v22 + 9));
              ++v21;
              --v20;
            }
            while (v20);
          }
          free(v19);
          v4 += 3;
          v14 += 3;
        }
        while (v4 != v15);
        v24 = v14;
        v14 = *(void ***)a1;
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v24 = *(void ***)a1;
      }
      for (i = &v14[3 * v6]; i != v24; free(*i))
      {
        v39 = i;
        i -= 3;
        if (*((_DWORD *)v39 - 3))
        {
          v40 = *((unsigned int *)v39 - 4);
          if ((_DWORD)v40)
          {
            v41 = 0;
            do
            {
              v42 = *(llvm **)((char *)*i + v41);
              if (v42 != (llvm *)-8 && v42 != 0)
                llvm::deallocate_buffer(v42, (void *)(*(_QWORD *)v42 + 9));
              v41 += 8;
            }
            while (8 * v40 != v41);
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v44 = *(_DWORD *)(a2 + 8);
      if (v44)
      {
        v45 = *(void ***)a2;
        v46 = (void **)(*(_QWORD *)a2 + 24 * v44);
        do
        {
          v47 = v46;
          v46 -= 3;
          if (*((_DWORD *)v47 - 3))
          {
            v48 = *((unsigned int *)v47 - 4);
            if ((_DWORD)v48)
            {
              v49 = 0;
              do
              {
                v50 = *(llvm **)((char *)*v46 + v49);
                if (v50 != (llvm *)-8 && v50 != 0)
                  llvm::deallocate_buffer(v50, (void *)(*(_QWORD *)v50 + 9));
                v49 += 8;
              }
              while (8 * v48 != v49);
            }
          }
          free(*v46);
        }
        while (v46 != v45);
      }
      goto LABEL_90;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      v25 = *(unsigned int **)a1;
      if ((_DWORD)v6)
      {
        v26 = &v4[3 * v6];
        do
        {
          v27 = *v4;
          v28 = *((_DWORD *)v4 + 4);
          v29 = v4[1];
          *v4 = 0;
          v4[1] = 0;
          *((_DWORD *)v4 + 4) = 0;
          v30 = *(llvm ***)v25;
          *(_QWORD *)v25 = v27;
          v31 = v25[2];
          LODWORD(v27) = v25[3];
          *((_QWORD *)v25 + 1) = v29;
          v25[4] = v28;
          if ((_DWORD)v27 && (_DWORD)v31)
          {
            v32 = v30;
            do
            {
              v33 = *v32;
              if (*v32 != (llvm *)-8 && v33 != 0)
                llvm::deallocate_buffer(v33, (void *)(*(_QWORD *)v33 + 9));
              ++v32;
              --v31;
            }
            while (v31);
          }
          free(v30);
          v4 += 3;
          v25 += 6;
        }
        while (v4 != v26);
        v25 = *(unsigned int **)a1;
        v36 = *(void ***)a2;
        v37 = *(unsigned int *)(a2 + 8);
        if (v6 == v37)
          goto LABEL_78;
      }
      else
      {
        v6 = 0;
        v36 = *(void ***)a2;
        LODWORD(v37) = *(_DWORD *)(a2 + 8);
        if (!(_DWORD)v37)
          goto LABEL_78;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(void ***)a1;
        v8 = (void **)(*(_QWORD *)a1 + 24 * v6);
        do
        {
          v9 = v8;
          v8 -= 3;
          if (*((_DWORD *)v9 - 3))
          {
            v10 = *((unsigned int *)v9 - 4);
            if ((_DWORD)v10)
            {
              v11 = 0;
              do
              {
                v12 = *(llvm **)((char *)*v8 + v11);
                if (v12 != (llvm *)-8 && v12 != 0)
                  llvm::deallocate_buffer(v12, (void *)(*(_QWORD *)v12 + 9));
                v11 += 8;
              }
              while (8 * v10 != v11);
            }
          }
          free(*v8);
        }
        while (v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      v63 = 0;
      v25 = (unsigned int *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v63);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v25);
      v35 = v63;
      if (*(_QWORD *)a1 != a1 + 16)
        free(*(void **)a1);
      v6 = 0;
      *(_QWORD *)a1 = v25;
      *(_DWORD *)(a1 + 12) = v35;
      v36 = *(void ***)a2;
      LODWORD(v37) = *(_DWORD *)(a2 + 8);
      if (!(_DWORD)v37)
        goto LABEL_78;
    }
    v52 = &v36[3 * v37];
    v53 = &v25[6 * v6];
    v54 = &v36[3 * v6];
    do
    {
      *(_QWORD *)v53 = *v54;
      *(_OWORD *)(v53 + 2) = *(_OWORD *)(v54 + 1);
      *v54 = 0;
      v54[1] = 0;
      *((_DWORD *)v54 + 4) = 0;
      v54 += 3;
      v53 += 6;
    }
    while (v54 != v52);
    v36 = *(void ***)a2;
LABEL_78:
    *(_DWORD *)(a1 + 8) = v5;
    v55 = *(_DWORD *)(a2 + 8);
    if (v55)
    {
      v56 = &v36[3 * v55];
      do
      {
        v57 = v56;
        v56 -= 3;
        if (*((_DWORD *)v57 - 3))
        {
          v58 = *((unsigned int *)v57 - 4);
          if ((_DWORD)v58)
          {
            v59 = 0;
            do
            {
              v60 = *(llvm **)((char *)*v56 + v59);
              if (v60 != (llvm *)-8 && v60 != 0)
                llvm::deallocate_buffer(v60, (void *)(*(_QWORD *)v60 + 9));
              v59 += 8;
            }
            while (8 * v58 != v59);
          }
        }
        free(*v56);
      }
      while (v56 != v36);
    }
LABEL_90:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::assignRemote(uint64_t a1, uint64_t a2)
{
  void **v4;
  unsigned int v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  llvm *v10;
  double result;

  v4 = *(void ***)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[3 * v5];
    do
    {
      v7 = v6;
      v6 -= 3;
      if (*((_DWORD *)v7 - 3))
      {
        v8 = *((unsigned int *)v7 - 4);
        if ((_DWORD)v8)
        {
          v9 = 0;
          do
          {
            v10 = *(llvm **)((char *)*v6 + v9);
            if (v10 != (llvm *)-8 && v10 != 0)
              llvm::deallocate_buffer(v10, (void *)(*(_QWORD *)v10 + 9));
            v9 += 8;
          }
          while (8 * v8 != v9);
        }
      }
      free(*v6);
    }
    while (v6 != v4);
    v4 = *(void ***)a1;
  }
  if (v4 != (void **)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  void **v3;
  uint64_t v4;
  unsigned int v5;
  void **v6;
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  llvm *v11;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(void ***)a1;
    v4 = *(_QWORD *)a1 + 24 * v2;
    do
    {
      *(_QWORD *)a2 = *v3;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 1);
      *v3 = 0;
      v3[1] = 0;
      *((_DWORD *)v3 + 4) = 0;
      v3 += 3;
      a2 += 24;
    }
    while (v3 != (void **)v4);
    v5 = *(_DWORD *)(a1 + 8);
    if (v5)
    {
      v6 = *(void ***)a1;
      v7 = (void **)(*(_QWORD *)a1 + 24 * v5);
      do
      {
        v8 = v7;
        v7 -= 3;
        if (*((_DWORD *)v8 - 3))
        {
          v9 = *((unsigned int *)v8 - 4);
          if ((_DWORD)v9)
          {
            v10 = 0;
            do
            {
              v11 = *(llvm **)((char *)*v7 + v10);
              if (v11 != (llvm *)-8 && v11 != 0)
                llvm::deallocate_buffer(v11, (void *)(*(_QWORD *)v11 + 9));
              v10 += 8;
            }
            while (8 * v9 != v10);
          }
        }
        free(*v7);
      }
      while (v7 != v6);
    }
  }
}

char *llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v10;
  void *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - *(_QWORD *)a1) >> 3);
      v17 = 0;
      v14 = a1 + 16;
      v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v17);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v15);
      v16 = v17;
      if (*(_QWORD *)a1 != v14)
        free(*(void **)a1);
      *(_QWORD *)a1 = v15;
      *(_DWORD *)(a1 + 12) = v16;
      return &v15[24 * v13];
    }
    else
    {
      v17 = 0;
      v10 = a1 + 16;
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v17);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v11);
      v12 = v17;
      if (*(_QWORD *)a1 != v10)
        free(*(void **)a1);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v12;
    }
  }
  return (char *)v3;
}

uint64_t `anonymous namespace'::OperationParser::parseGenericOperation(_anonymous_namespace_::OperationParser *this)
{
  const char *Loc;
  uint64_t EncodedSourceLocation;
  std::string::size_type size;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string *v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  std::string *v32;
  std::string::size_type v33;
  mlir::AsmParserState *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t i;
  _QWORD *v41;
  uint64_t v42;
  _BYTE v43[24];
  _BYTE v44[24];
  _BYTE v45[17];
  _BYTE v46[24];
  std::string v47;
  uint64_t v48;
  _QWORD v49[24];
  __int128 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  void *v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  void *__p;
  _QWORD **v64;
  char v65;
  _QWORD v66[3];
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  _QWORD **v72;
  char v73;
  char *v74;
  unint64_t v75;
  _QWORD v76[2];
  __int16 v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, Loc);
  v48 = EncodedSourceLocation;
  mlir::Token::getStringValue((mlir::Token *)(*((_QWORD *)this + 1) + 56), &v47);
  size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v47.__r_.__value_.__l.__size_;
  if (!size)
  {
    *(_QWORD *)&v50 = "empty operation name is invalid";
    v52 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v50, v66);
    if (v66[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v66);
    if (v73)
    {
      v13 = (_QWORD **)v71;
      if (v71)
      {
        v14 = v72;
        v15 = v71;
        if (v72 != v71)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = v71;
        }
        v72 = v13;
        operator delete(v15);
      }
      v16 = v69;
      if (v69)
      {
        v17 = v70;
        v18 = v69;
        if (v70 != v69)
        {
          do
          {
            v20 = (void *)*--v17;
            v19 = v20;
            *v17 = 0;
            if (v20)
              operator delete[](v19);
          }
          while (v17 != v16);
          v18 = v69;
        }
        v70 = v16;
        operator delete(v18);
      }
      v29 = v67;
      if (v67 != &v68)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (std::string::find(&v47, 0, 0) == -1)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v50);
    v21 = *((_QWORD *)this + 1);
    *(_OWORD *)(v21 + 56) = v50;
    *(_QWORD *)(v21 + 72) = v51;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v47;
    else
      v22 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      v23 = v47.__r_.__value_.__l.__size_;
    mlir::OperationState::OperationState(&v50, EncodedSourceLocation, (uint64_t)v22, v23);
    if (*(_UNKNOWN **)(*((_QWORD *)&v50 + 1) + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v24 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      v25 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v24 = v47.__r_.__value_.__l.__size_;
        v25 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      v74 = (char *)v25;
      v75 = v24;
      LOBYTE(v42) = 46;
      v26 = llvm::StringRef::find((uint64_t *)&v74, (char *)&v42, 1uLL, 0);
      if (v26 == -1)
      {
        v27 = v74;
        v28 = v75;
      }
      else
      {
        v27 = v74;
        if (v26 >= v75)
          v28 = v75;
        else
          v28 = v26;
      }
      if (mlir::MLIRContext::getLoadedDialect(***((uint64_t ****)this + 1), (uint64_t)v27, v28)
        || mlir::MLIRContext::getOrLoadDialect(***((_QWORD ***)this + 1), v27, v28))
      {
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v47;
        else
          v32 = (std::string *)v47.__r_.__value_.__r.__words[0];
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        else
          v33 = v47.__r_.__value_.__l.__size_;
        mlir::OperationName::OperationName(&v74, v32, v33, ***((_QWORD ***)this + 1));
        *((_QWORD *)&v50 + 1) = v74;
      }
      else if ((mlir::MLIRContext::allowsUnregisteredDialects(***((mlir::MLIRContext ****)this + 1)) & 1) == 0)
      {
        v74 = "operation being parsed with an unregistered dialect. If this is intended, please use -allow-unregistered-d"
              "ialect with the MLIR tool used";
        v77 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v74, v49);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v49);
        goto LABEL_80;
      }
    }
    v34 = *(mlir::AsmParserState **)(*((_QWORD *)this + 1) + 128);
    if (v34)
      mlir::AsmParserState::startOperationDefinition(v34, (const mlir::OperationName *)((char *)&v50 + 8));
    v46[0] = 0;
    v46[16] = 0;
    v45[0] = 0;
    v45[16] = 0;
    v44[0] = 0;
    v44[16] = 0;
    v43[0] = 0;
    v43[16] = 0;
    {
      v35 = v56;
      v42 = v56;
      v56 = 0;
      if (v42
        || v57
        || *(_UNKNOWN **)(*((_QWORD *)&v50 + 1) + 16) == &mlir::detail::TypeIDResolver<void,void>::id
        || (v74 = (char *)&v48,
            v75 = (unint64_t)&v47,
      {
        v30 = (uint64_t)mlir::OpBuilder::create((_anonymous_namespace_::OperationParser *)((char *)this + 384), (const mlir::OperationState *)&v50);
        {
          if (!v35
            || (v74 = (char *)&v48,
                v75 = (unint64_t)&v42,
                v76[0] = &v47,
          {
LABEL_81:
            v74 = (char *)v76;
            v75 = 0x400000000;
            v36 = v55;
            if (v55 >= 5)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v55, 8);
              v36 = v55;
            }
            if (v36)
            {
              v37 = v54;
              v38 = &v54[v36];
              do
              {
                v39 = *v37;
                if (*v37)
                {
                  for (i = *(_QWORD *)(v39 + 8); i != v39; i = *(_QWORD *)(i + 8))
                  {
                    if (i)
                      v41 = (_QWORD *)(i - 8);
                    else
                      v41 = 0;
                    mlir::Block::dropAllDefinedValueUses(v41);
                  }
                }
                ++v37;
              }
              while (v37 != v38);
            }
            if (v74 != (char *)v76)
              free(v74);
            mlir::OperationState::~OperationState((mlir::OperationState *)&v50);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_51;
            return v30;
          }
        }
      }
    }
LABEL_80:
    v30 = 0;
    goto LABEL_81;
  }
  *(_QWORD *)&v50 = "null character not allowed in operation name";
  v52 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v50, v58);
  if (v58[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
  if (v65)
  {
    v5 = (_QWORD **)__p;
    if (__p)
    {
      v6 = v64;
      v7 = __p;
      if (v64 != __p)
      {
        do
          v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        v7 = __p;
      }
      v64 = v5;
      operator delete(v7);
    }
    v8 = v61;
    if (v61)
    {
      v9 = v62;
      v10 = v61;
      if (v62 != v61)
      {
        do
        {
          v12 = (void *)*--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            operator delete[](v11);
        }
        while (v9 != v8);
        v10 = v61;
      }
      v62 = v8;
      operator delete(v10);
    }
    v29 = v59;
    if (v59 != &v60)
LABEL_49:
      free(v29);
  }
LABEL_50:
  v30 = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
LABEL_51:
    operator delete(v47.__r_.__value_.__l.__data_);
  return v30;
}

uint64_t `anonymous namespace'::OperationParser::addDefinition(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v14;
  const char *v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t EncodedSourceLocation;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  _QWORD **v44;
  _QWORD **v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  mlir::Operation *DefiningOp;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  char *v55;
  unint64_t v56;
  unint64_t v57[4];
  __int16 v58;
  unint64_t v59;
  uint64_t v60[3];
  _QWORD *v61;
  uint64_t v62[2];
  void *v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  void *__p;
  _QWORD **v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v6 = a2 + 8;
  v8 = v7;
  v9 = *(_DWORD *)(v7 + 8);
  v11 = (unsigned int *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 24);
  v12 = v10 + 1;
  if (v9 > v10 || v9 == (_DWORD)v12)
  {
    v14 = *(_QWORD *)(*(_QWORD *)v7 + 16 * *(unsigned int *)(a2 + 24));
    v59 = v14;
    if (!v14)
      goto LABEL_7;
  }
  else
  {
    if (v9 <= v12)
    {
      if (*(_DWORD *)(v7 + 12) < v12)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v12, 16);
        v9 = *(_DWORD *)(v8 + 8);
      }
      if (v9 != (_DWORD)v12)
        bzero((void *)(*(_QWORD *)v8 + 16 * v9), 16 * (v12 - v9));
    }
    *(_DWORD *)(v8 + 8) = v12;
    v14 = *(_QWORD *)(*(_QWORD *)v8 + 16 * *v11);
    v59 = v14;
    if (!v14)
      goto LABEL_7;
  }
  v57[0] = v14;
  v61 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), v57, &v61) & 1) != 0)
  {
    if ((*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) != (a3[1] & 0xFFFFFFFFFFFFFFF8))
    {
      v19 = *(const char **)a2;
      v58 = 257;
      EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v19);
      mlir::emitError(EncodedSourceLocation, (uint64_t)v57, (uint64_t)&v61);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(&v61);
      v60[0] = a3[1] & 0xFFFFFFFFFFFFFFF8;
      if (v61)
        mlir::Diagnostic::append<char const(&)[26],llvm::StringRef &,char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>((uint64_t)v62, "definition of SSA value '", v6, "#", (unsigned int *)(a2 + 24), "' has type ", v60);
      v21 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, *(const char **)(*(_QWORD *)v8 + 16 * *v11 + 8));
      v22 = mlir::Diagnostic::attachNote(v62, v21, 1);
      v56 = *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::Diagnostic::append<char const(&)[5],mlir::Type>(v22, "previously used here with type ", (uint64_t *)&v56);
      v18 = mlir::Diagnostic::operator mlir::LogicalResult();
      if (v61)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v61);
      if (v69)
      {
        v23 = (_QWORD **)__p;
        if (__p)
        {
          v24 = v68;
          v25 = __p;
          if (v68 != __p)
          {
            do
              v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            v25 = __p;
          }
          v68 = v23;
          operator delete(v25);
        }
        v26 = v65;
        if (!v65)
          goto LABEL_62;
        v27 = v66;
        v28 = v65;
        if (v66 == v65)
        {
LABEL_61:
          v66 = v26;
          operator delete(v28);
LABEL_62:
          if (v63 != &v64)
            free(v63);
          return v18;
        }
        do
        {
          v33 = (void *)*--v27;
          v32 = v33;
          *v27 = 0;
          if (v33)
            operator delete[](v32);
        }
        while (v27 != v26);
LABEL_60:
        v28 = v65;
        goto LABEL_61;
      }
      return v18;
    }
    while (1)
    {
      v29 = *(uint64_t **)v14;
      if (!*(_QWORD *)v14)
        break;
      v30 = (uint64_t *)v29[1];
      if (v30)
      {
        *v30 = *v29;
        if (*v29)
          *(_QWORD *)(*v29 + 8) = v29[1];
      }
      v29[3] = (uint64_t)a3;
      v29[1] = (uint64_t)a3;
      v31 = *a3;
      *v29 = *a3;
      if (v31)
        *(_QWORD *)(v31 + 8) = v29;
      *a3 = (uint64_t)v29;
    }
    DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v59);
    mlir::Operation::destroy(DefiningOp);
    v61 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), &v59, &v61))
    {
      *v61 = -8192;
      *(int32x2_t *)(a1 + 344) = vadd_s32(*(int32x2_t *)(a1 + 344), (int32x2_t)0x1FFFFFFFFLL);
    }
    v52 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
    if (v52)
      mlir::AsmParserState::refineDefinition(v52, v59, (unint64_t)a3);
LABEL_7:
    v15 = *(const char **)a2;
    v16 = (uint64_t **)(*(_QWORD *)v8 + 16 * *(unsigned int *)(a2 + 24));
    *v16 = a3;
    v16[1] = (uint64_t *)v15;
    v17 = *(_QWORD *)(a1 + 16) + 88 * *(unsigned int *)(a1 + 24);
    llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>(*(_QWORD *)(v17 - 64) + 24 * *(unsigned int *)(v17 - 56) - 24, *(int8x16_t **)(a2 + 8), *(const unsigned __int8 **)(a2 + 16));
    return 1;
  }
  v34 = *(const char **)a2;
  v58 = 257;
  v35 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v34);
  mlir::emitError(v35, (uint64_t)v57, (uint64_t)&v61);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(&v61);
  if (v61)
    mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)v62, "redefinition of SSA value '", v6, "'");
  v36 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, *(const char **)(*(_QWORD *)v8 + 16 * *v11 + 8));
  v37 = mlir::Diagnostic::attachNote(v62, v36, 1);
  v38 = v37 + 16;
  v39 = *(_QWORD *)(v37 + 16);
  LODWORD(v60[0]) = 3;
  v60[1] = (uint64_t)"previously defined here";
  v60[2] = 23;
  v40 = *(unsigned int *)(v37 + 24);
  v41 = v60;
  if (v40 >= *(_DWORD *)(v37 + 28))
  {
    v53 = v40 + 1;
    v54 = v39 + 24 * v40 > (unint64_t)v60;
    if (v39 <= (unint64_t)v60 && v54)
    {
      v55 = (char *)v60 - v39;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v38, (void *)(v37 + 32), v53, 24);
      v39 = *(_QWORD *)(v37 + 16);
      v41 = (uint64_t *)&v55[v39];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v38, (void *)(v37 + 32), v53, 24);
      v39 = *(_QWORD *)(v37 + 16);
      v41 = v60;
    }
  }
  v42 = v39 + 24 * *(unsigned int *)(v37 + 24);
  v43 = *(_OWORD *)v41;
  *(_QWORD *)(v42 + 16) = v41[2];
  *(_OWORD *)v42 = v43;
  ++*(_DWORD *)(v37 + 24);
  v18 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v61)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v61);
  if (v69)
  {
    v44 = (_QWORD **)__p;
    if (__p)
    {
      v45 = v68;
      v46 = __p;
      if (v68 != __p)
      {
        do
          v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        v46 = __p;
      }
      v68 = v44;
      operator delete(v46);
    }
    v26 = v65;
    if (!v65)
      goto LABEL_62;
    v47 = v66;
    v28 = v65;
    if (v66 == v65)
      goto LABEL_61;
    do
    {
      v49 = (void *)*--v47;
      v48 = v49;
      *v47 = 0;
      if (v49)
        operator delete[](v48);
    }
    while (v47 != v26);
    goto LABEL_60;
  }
  return v18;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseOperation(void)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t UInt64IntegerValue;
  char v8;
  BOOL v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *Loc;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  char *v38;
  _OWORD *v39;
  __int128 v40;
  char *v41;
  _QWORD v42[4];
  __int16 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v44 = *(_OWORD *)(v3 + 56);
  v45 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)&v46 = "expected valid ssa identifier";
  v49 = 259;
  if (!mlir::detail::Parser::parseToken(v2, 6, (uint64_t)&v46))
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v4 + 56) != 15)
  {
    v33 = 1;
    goto LABEL_25;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v46);
  v5 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v5 + 56) = v46;
  *(_QWORD *)(v5 + 72) = v47;
  v6 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v6 + 56) == 10)
  {
    UInt64IntegerValue = mlir::Token::getUInt64IntegerValue(*(unsigned __int8 **)(v6 + 64), *(_QWORD *)(v6 + 72));
    if (v8)
      v9 = UInt64IntegerValue == 0;
    else
      v9 = 1;
    if (!v9)
    {
      v33 = UInt64IntegerValue;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v2 + 8) + 8), (uint64_t)&v46);
      v34 = *(_QWORD *)(v2 + 8);
      *(_OWORD *)(v34 + 56) = v46;
      *(_QWORD *)(v34 + 72) = v47;
LABEL_25:
      v19 = *(_QWORD *)(a1 + 8);
      v21 = *((_QWORD *)&v44 + 1);
      v20 = v45;
      Loc = (void *)mlir::Token::getLoc((mlir::Token *)&v44);
      v23 = *(unsigned int *)(v19 + 8);
      if (v23 >= *(_DWORD *)(v19 + 12))
      {
        *(_QWORD *)&v46 = v21;
        *((_QWORD *)&v46 + 1) = v20;
        LODWORD(v47) = v33;
        v48 = Loc;
        v35 = v23 + 1;
        v36 = *(_QWORD *)v19 + 32 * v23 > (unint64_t)&v46;
        if (*(_QWORD *)v19 <= (unint64_t)&v46 && v36)
        {
          v41 = (char *)&v46 - *(_QWORD *)v19;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, (void *)(v19 + 16), v35, 32);
          v37 = *(_QWORD *)v19;
          v38 = &v41[*(_QWORD *)v19];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, (void *)(v19 + 16), v35, 32);
          v37 = *(_QWORD *)v19;
          v38 = (char *)&v46;
        }
        v39 = (_OWORD *)(v37 + 32 * *(unsigned int *)(v19 + 8));
        v40 = *((_OWORD *)v38 + 1);
        *v39 = *(_OWORD *)v38;
        v39[1] = v40;
        v25 = *(_DWORD *)(v19 + 8) + 1;
      }
      else
      {
        v24 = *(_QWORD *)v19 + 32 * v23;
        *(_QWORD *)v24 = v21;
        *(_QWORD *)(v24 + 8) = v20;
        *(_DWORD *)(v24 + 16) = v33;
        *(_QWORD *)(v24 + 24) = Loc;
        v25 = v23 + 1;
      }
      *(_DWORD *)(v19 + 8) = v25;
      **(_QWORD **)(a1 + 16) += v33;
      return 1;
    }
    v42[0] = "expected named operation to have at least 1 result";
    v43 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v42, &v46);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
    if ((_QWORD)v46)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
    if (v55)
    {
      v11 = (_QWORD **)__p;
      if (__p)
      {
        v12 = v54;
        v13 = __p;
        if (v54 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v54 = v11;
        operator delete(v13);
      }
      v14 = v51;
      if (!v51)
        goto LABEL_45;
      v15 = v52;
      v16 = v51;
      if (v52 == v51)
      {
LABEL_44:
        v52 = v14;
        operator delete(v16);
LABEL_45:
        if (v48 != &v50)
          free(v48);
        return v10;
      }
      do
      {
        v18 = (void *)*--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v15 != v14);
LABEL_43:
      v16 = v51;
      goto LABEL_44;
    }
  }
  else
  {
    v42[0] = "expected integer number of results";
    v43 = 259;
    mlir::detail::Parser::emitWrongTokenError(v2, (uint64_t)v42, &v46);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
    if ((_QWORD)v46)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
    if (v55)
    {
      v27 = (_QWORD **)__p;
      if (__p)
      {
        v28 = v54;
        v29 = __p;
        if (v54 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v54 = v27;
        operator delete(v29);
      }
      v14 = v51;
      if (!v51)
        goto LABEL_45;
      v30 = v52;
      v16 = v51;
      if (v52 == v51)
        goto LABEL_44;
      do
      {
        v32 = (void *)*--v30;
        v31 = v32;
        *v30 = 0;
        if (v32)
          operator delete[](v31);
      }
      while (v30 != v14);
      goto LABEL_43;
    }
  }
  return v10;
}

unint64_t `anonymous namespace'::OperationParser::parseCustomOperationName(_anonymous_namespace_::OperationParser *this)
{
  _QWORD *v2;
  int8x16_t *v3;
  const unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  size_t v8;
  unint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  std::string::size_type size;
  std::string *v26;
  _QWORD v28[4];
  __int16 v29;
  std::string v30;
  std::string v31;
  __int128 v32;
  char *v33;
  unint64_t v34;
  __int16 v35;
  char *v36;
  unint64_t v37;
  _QWORD v38[3];
  void *v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD **v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (int8x16_t *)v2[8];
  v4 = (const unsigned __int8 *)v2[9];
  v36 = (char *)v3;
  v37 = (unint64_t)v4;
  if (v4)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 1), (uint64_t)&v32);
    v5 = *((_QWORD *)this + 1);
    *(_OWORD *)(v5 + 56) = v32;
    *(_QWORD *)(v5 + 72) = v33;
    v6 = mlir::RegisteredOperationName::lookup(v3, v4, ***((uint64_t ****)this + 1));
    if (v7)
    {
      LOBYTE(v8) = v6;
      v9 = v6 & 0xFFFFFFFFFFFFFF00;
      return v9 & 0xFFFFFFFFFFFFFF00 | v8;
    }
    LOBYTE(v32) = 46;
    v18 = llvm::StringRef::find((uint64_t *)&v36, (char *)&v32, 1uLL, 0);
    if (v18 == -1)
    {
      v20 = v36;
      v19 = v37;
      v8 = v37;
      v21 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v21 + 56) != 2)
        goto LABEL_37;
    }
    else
    {
      v20 = v36;
      v19 = v37;
      if (v18 >= v37)
        v8 = v37;
      else
        v8 = v18;
      memset(&v31, 0, sizeof(v31));
      if (v37 > v18 + 1)
      {
LABEL_40:
        mlir::MLIRContext::getOrLoadDialect(***((_QWORD ***)this + 1), v20, v8);
        mlir::OperationName::OperationName(&v32, v36, v37, ***((_QWORD ***)this + 1));
        LOBYTE(v8) = v32;
        v9 = v32 & 0xFFFFFFFFFFFFFF00;
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        return v9 & 0xFFFFFFFFFFFFFF00 | v8;
      }
      v21 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v21 + 56) != 2)
      {
LABEL_37:
        v23 = *(_QWORD *)(v21 + 144) + 16 * *(unsigned int *)(v21 + 152);
        v24 = *(char **)(v23 - 16);
        v8 = *(_QWORD *)(v23 - 8);
        v29 = 773;
        v28[0] = v24;
        v28[1] = v8;
        v28[2] = ".";
        *(_QWORD *)&v32 = v28;
        v33 = v20;
        v34 = v19;
        v35 = 1282;
        llvm::Twine::str((llvm::Twine *)&v32, &v30);
        v31 = v30;
        size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        v26 = &v31;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          size = v30.__r_.__value_.__l.__size_;
          v26 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        v36 = (char *)v26;
        v37 = size;
        v20 = v24;
        goto LABEL_40;
      }
    }
    if (v20[v19 - 1] != 46)
      goto LABEL_37;
    if (v8)
    {
      v22 = memchr(v20, 46, v8);
      if (!v22 || v22 - v20 == -1)
        (*(void (**)(_QWORD, char *, size_t))(**(_QWORD **)(v21 + 136) + 24))(*(_QWORD *)(v21 + 136), v20, v8);
      v9 = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    *(_QWORD *)&v32 = "empty operation name is invalid";
    v35 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v32, v38);
    if (v38[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
    if (v45)
    {
      v10 = (_QWORD **)__p;
      if (__p)
      {
        v11 = v44;
        v12 = __p;
        if (v44 != __p)
        {
          do
            v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          v12 = __p;
        }
        v44 = v10;
        operator delete(v12);
      }
      v13 = v41;
      if (v41)
      {
        v14 = v42;
        v15 = v41;
        if (v42 != v41)
        {
          do
          {
            v17 = (void *)*--v14;
            v16 = v17;
            *v14 = 0;
            if (v17)
              operator delete[](v16);
          }
          while (v14 != v13);
          v15 = v41;
        }
        v42 = v13;
        operator delete(v15);
      }
      if (v39 != &v40)
        free(v39);
    }
    LOBYTE(v8) = 0;
    v9 = 0;
  }
  return v9 & 0xFFFFFFFFFFFFFF00 | v8;
}

uint64_t `anonymous namespace'::OperationParser::parseTrailingLocationSpecifier(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int16 v14;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 56) != 59)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v12);
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v12;
  *(_QWORD *)(v5 + 72) = v13;
  *(_QWORD *)&v12 = "expected '(' in location";
  v14 = 259;
  if (mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v12))
  {
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 56);
    v11 = 0;
    if (v6 == 5)
    {
        return 0;
    }
    else if (!mlir::detail::Parser::parseLocationInstance((mlir::UnknownLoc ****)a1, &v11))
    {
      return 0;
    }
    *(_QWORD *)&v12 = "expected ')' in location";
    v14 = 259;
    if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v12))
    {
      v7 = (a2 >> 2) & 1;
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == 0)
        LODWORD(v7) = 1;
      v8 = (_DWORD)v7 == 0;
      v9 = 24;
      if (!v8)
        v9 = 32;
      *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + v9) = v11;
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v23 = 72;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[139];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallImpl<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))a1)(*(_QWORD *)(a1 + 8));
}

uint64_t llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>::callback_fn<llvm::unique_function<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[3];
  if ((v1 & 2) == 0)
    a1 = (_QWORD *)*a1;
  return (*(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFF8))(a1);
}

void `anonymous namespace'::CustomOpAsmParser::~CustomOpAsmParser(_anonymous_namespace_::CustomOpAsmParser *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getNameLoc(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void `anonymous namespace'::CustomOpAsmParser::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t EncodedSourceLocation;
  _QWORD v12[4];
  __int16 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v13 = 1283;
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v12[0] = "custom op '";
  v12[2] = v5;
  v12[3] = v6;
  *(_QWORD *)&v14 = v12;
  *(_QWORD *)&v15 = "' ";
  LOWORD(v16) = 770;
  v7 = *((unsigned __int8 *)a3 + 32);
  if (v7 == 1)
  {
    v17 = v14;
    v18 = v15;
    v19 = v16;
  }
  else if (*((_BYTE *)a3 + 32))
  {
    v8 = (uint64_t *)*a3;
    v9 = a3[1];
    if (*((_BYTE *)a3 + 33) != 1)
    {
      LOBYTE(v7) = 2;
      v8 = a3;
    }
    *(_QWORD *)&v17 = &v14;
    *(_QWORD *)&v18 = v8;
    *((_QWORD *)&v18 + 1) = v9;
    LOBYTE(v19) = 2;
    BYTE1(v19) = v7;
  }
  else
  {
    LOWORD(v19) = 256;
  }
  *(_BYTE *)(a1 + 24) = 1;
  v10 = *(_QWORD *)(a1 + 16);
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v10 + 8) + 8, a2);
  mlir::emitError(EncodedSourceLocation, (uint64_t)&v17, (uint64_t)a4);
  if (*(_DWORD *)(*(_QWORD *)(v10 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getBuilder(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getCurrentLocation(uint64_t a1)
{
  return mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 56));
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getEncodedSourceLoc(uint64_t a1, const char *a2)
{
  return mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseArrow(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '->'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 13, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalArrow(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 13)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 13;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLBrace(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '{'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLBrace(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 20)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 20;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRBrace(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '}'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 27, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRBrace(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 27)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 27;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColon(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ':'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalColon(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 15)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 15;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseComma(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ','";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 16, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalComma(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 16)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseEqual(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '='";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 18, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalEqual(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 18)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 18;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLess(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '<'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 23, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLess(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 23;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseGreater(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '>'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 19, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalGreater(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 19;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseQuestion(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '?'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 26, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalQuestion(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 26;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parsePlus(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '+'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 25, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalPlus(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 25)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 25;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseStar(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '*'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 30, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalStar(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 30;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseVerticalBar(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '|'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 31, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalVerticalBar(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 31)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 31;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string v7;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  if (*(_DWORD *)(v4 + 56) != 11)
    return 0;
  if (a2)
  {
    mlir::Token::getStringValue((mlir::Token *)(v4 + 56), &v7);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v7;
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(v3 + 8);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
  *(std::string *)(*(_QWORD *)(v3 + 8) + 56) = v7;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseBase64Bytes(_QWORD *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t first_not_of;
  unint64_t v8;
  unint64_t v9;
  uint64_t last_not_of;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int8x16_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v35;
  std::string v36;
  _QWORD *v37;
  __int128 v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  v5 = a1[2];
  v6 = *(_QWORD *)(v5 + 8);
  if (*(_DWORD *)(v6 + 56) == 11)
  {
    if (a2)
    {
      v38 = *(_OWORD *)(v6 + 64);
      first_not_of = llvm::StringRef::find_first_not_of(&v38, "\"  \t\n\v\f\r", 8, 0);
      if (first_not_of >= *((_QWORD *)&v38 + 1))
        v8 = *((_QWORD *)&v38 + 1);
      else
        v8 = first_not_of;
      v9 = *((_QWORD *)&v38 + 1) - v8;
      *(_QWORD *)&v41 = v38 + v8;
      *((_QWORD *)&v41 + 1) = *((_QWORD *)&v38 + 1) - v8;
      last_not_of = llvm::StringRef::find_last_not_of(&v41, "\" \t\n\v\f\r", 7, 0xFFFFFFFFFFFFFFFFLL);
      if ((unint64_t)(last_not_of + 1) < *((_QWORD *)&v41 + 1))
        v11 = last_not_of + 1;
      else
        v11 = *((_QWORD *)&v41 + 1);
      v12 = *((_QWORD *)&v41 + 1) - v9 + v11;
      if (*((_QWORD *)&v41 + 1) >= v12)
        v13 = v12;
      else
        v13 = *((_QWORD *)&v41 + 1);
      llvm::decodeBase64(v41, v13, a2, (uint64_t *)&v37);
      if (v37)
      {
        v35 = v37;
        v37 = 0;
        llvm::toString(&v35, &v36, v14, v15);
        v40 = 260;
        v39[0] = &v36;
        (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD *))(*a1 + 24))(&v41, a1, v4, v39);
        v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
        if ((_QWORD)v41)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
        if (v49)
        {
          v17 = (_QWORD **)__p;
          if (__p)
          {
            v18 = v48;
            v19 = __p;
            if (v48 != __p)
            {
              do
                v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
              while (v18 != v17);
              v19 = __p;
            }
            v48 = v17;
            operator delete(v19);
          }
          v20 = v45;
          if (v45)
          {
            v21 = v46;
            v22 = v45;
            if (v46 != v45)
            {
              do
              {
                v24 = (void *)*--v21;
                v23 = v24;
                *v21 = 0;
                if (v24)
                  operator delete[](v23);
              }
              while (v21 != v20);
              v22 = v45;
            }
            v46 = v20;
            operator delete(v22);
          }
          if (v43 != v44)
            free(v43);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (v35)
          (*(void (**)(_QWORD *))(*v35 + 8))(v35);
        if (v37)
          (*(void (**)(_QWORD *))(*v37 + 8))(v37);
        return v16;
      }
      v5 = a1[2];
      v6 = *(_QWORD *)(v5 + 8);
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v41);
    v33 = *(_QWORD *)(v5 + 8);
    *(_OWORD *)(v33 + 56) = v41;
    *(_QWORD *)(v33 + 72) = v42;
    return 1;
  }
  v39[0] = "expected string";
  v40 = 259;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD *))(*a1 + 24))(&v41, a1, v4, v39);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if ((_QWORD)v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v49)
  {
    v25 = (_QWORD **)__p;
    if (__p)
    {
      v26 = v48;
      v27 = __p;
      if (v48 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v48 = v25;
      operator delete(v27);
    }
    v28 = v45;
    if (v45)
    {
      v29 = v46;
      v30 = v45;
      if (v46 != v45)
      {
        do
        {
          v32 = (void *)*--v29;
          v31 = v32;
          *v29 = 0;
          if (v32)
            operator delete[](v31);
        }
        while (v29 != v28);
        v30 = v45;
      }
      v46 = v28;
      operator delete(v30);
    }
    if (v43 != v44)
      free(v43);
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLParen(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '('";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 21, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLParen(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 21;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRParen(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ')'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 28, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRParen(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 28;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLSquare(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '['";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 22, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLSquare(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 22)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 22;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRSquare(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected ']'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 29, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRSquare(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 29;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseEllipsis(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = "expected '...'";
  v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 17, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalEllipsis(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 17)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    v4 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(_QWORD *)(v4 + 72) = v7;
  }
  return v3 == 17;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseFloat(_QWORD *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  llvm::APFloatBase *Loc;
  llvm::APFloatBase *v9;
  uint64_t FloatingPointValue;
  char v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  llvm::APFloatBase *v19;
  llvm::APFloatBase *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD **v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = a1[2];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_DWORD *)(v5 + 56);
  if (v6 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v44);
    v7 = *(_QWORD *)(v4 + 8);
    *(_OWORD *)(v7 + 56) = v44;
    *(_QWORD *)(v7 + 72) = v45;
    v5 = *(_QWORD *)(a1[2] + 8);
  }
  v42 = *(_OWORD *)(v5 + 56);
  v43 = *(_QWORD *)(v5 + 72);
  Loc = (llvm::APFloatBase *)mlir::Token::getLoc((mlir::Token *)&v42);
  if ((_DWORD)v42 == 10)
  {
    v17 = v6 == 24;
    LOBYTE(v44) = 0;
    v47 = 0;
    v18 = a1[2];
    v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(Loc);
    v20 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v18, (uint64_t)&v44, (mlir::Token *)&v42, v17, v19, 0x40u);
    if ((_BYTE)v20)
    {
      v21 = a1[2];
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v21 + 8) + 8), (uint64_t)&v39);
      v22 = *(_QWORD *)(v21 + 8);
      *(_OWORD *)(v22 + 56) = v39;
      *(_QWORD *)(v22 + 72) = v40;
      *a2 = llvm::APFloat::convertToDouble((void **)&v44);
      v16 = 1;
      if (!v47)
        return v16;
    }
    else
    {
      v16 = 0;
      if (!v47)
        return v16;
    }
    v37 = (void *)*((_QWORD *)&v44 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v20) == v37)
      std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v45);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v44 + 8));
  }
  else
  {
    v9 = Loc;
    if ((_DWORD)v42 == 9)
    {
      FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)&v42);
      if (v11)
      {
        v12 = *(double *)&FloatingPointValue;
        v13 = a1[2];
        mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v13 + 8) + 8), (uint64_t)&v44);
        v14 = *(_QWORD *)(v13 + 8);
        *(_OWORD *)(v14 + 56) = v44;
        *(_QWORD *)(v14 + 72) = v45;
        v15 = -v12;
        if (v6 != 24)
          v15 = v12;
        *a2 = v15;
        return 1;
      }
      *(_QWORD *)&v39 = "floating point value too large";
      v41 = 259;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, llvm::APFloatBase *, __int128 *))(*a1 + 24))(&v44, a1, v9, &v39);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((_QWORD)v44)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      if (v53)
      {
        v31 = (_QWORD **)__p;
        if (__p)
        {
          v32 = v52;
          v33 = __p;
          if (v52 != __p)
          {
            do
              v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            v33 = __p;
          }
          v52 = v31;
          operator delete(v33);
        }
        v26 = v49;
        if (!v49)
          goto LABEL_45;
        v34 = v50;
        v28 = v49;
        if (v50 == v49)
        {
LABEL_44:
          v50 = v26;
          operator delete(v28);
LABEL_45:
          if (v46 != &v48)
            free(v46);
          return v16;
        }
        do
        {
          v36 = (void *)*--v34;
          v35 = v36;
          *v34 = 0;
          if (v36)
            operator delete[](v35);
        }
        while (v34 != v26);
LABEL_43:
        v28 = v49;
        goto LABEL_44;
      }
    }
    else
    {
      *(_QWORD *)&v39 = "expected floating point literal";
      v41 = 259;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, llvm::APFloatBase *, __int128 *))(*a1 + 24))(&v44, a1, Loc, &v39);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((_QWORD)v44)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      if (v53)
      {
        v23 = (_QWORD **)__p;
        if (__p)
        {
          v24 = v52;
          v25 = __p;
          if (v52 != __p)
          {
            do
              v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            v25 = __p;
          }
          v52 = v23;
          operator delete(v25);
        }
        v26 = v49;
        if (!v49)
          goto LABEL_45;
        v27 = v50;
        v28 = v49;
        if (v50 == v49)
          goto LABEL_44;
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        goto LABEL_43;
      }
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalInteger(uint64_t a1, llvm::APInt *a2)
{
  return mlir::detail::Parser::parseOptionalInteger(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return mlir::detail::Parser::parseCommaSeparatedList(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseKeyword(_QWORD *a1, const void **a2, const char *a3, const void ***a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  const void ***v12;
  char *v13;
  char *v14;
  __int128 v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  const char *v26;
  __int16 v27;
  _QWORD v28[2];
  const void **v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  _BYTE v34[16];
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[96];
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD **v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v28[0] = a2;
  v28[1] = a3;
  v4 = *(_QWORD *)(a1[2] + 8);
  if (*(_DWORD *)(v4 + 56) == 2)
  {
    (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(v4 + 136) + 48))(*(_QWORD *)(v4 + 136), v28, 1, 0);
    return 0;
  }
  else
  {
    v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(_QWORD *, const void **, const char *))(*a1 + 376))(a1, a2, a3))
    {
      return 1;
    }
    else
    {
      v26 = "expected '";
      v27 = 259;
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, const char **))(*a1 + 24))(&v33, a1, v10, &v26);
      if (v33)
      {
        v32 = 261;
        v29 = a2;
        v30 = a3;
        mlir::Diagnostic::operator<<((uint64_t)v34, &v29);
        if (v33)
        {
          LODWORD(v29) = 3;
          v30 = "'";
          v31 = 1;
          v12 = &v29;
          v13 = (char *)v35;
          if (v36 >= v37)
          {
            v24 = v36 + 1;
            if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
            {
              v25 = (char *)&v29 - (_BYTE *)v35;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
              v13 = (char *)v35;
              v12 = (const void ***)((char *)v35 + v25);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
              v12 = &v29;
              v13 = (char *)v35;
            }
          }
          v14 = &v13[24 * v36];
          v15 = *(_OWORD *)v12;
          *((_QWORD *)v14 + 2) = v12[2];
          *(_OWORD *)v14 = v15;
          ++v36;
          if (v33)
            mlir::Diagnostic::operator<<((uint64_t)v34, a4);
        }
      }
      v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      if (v43)
      {
        v16 = (_QWORD **)__p;
        if (__p)
        {
          v17 = v42;
          v18 = __p;
          if (v42 != __p)
          {
            do
              v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
            while (v17 != v16);
            v18 = __p;
          }
          v42 = v16;
          operator delete(v18);
        }
        v19 = v39;
        if (v39)
        {
          v20 = v40;
          v21 = v39;
          if (v40 != v39)
          {
            do
            {
              v23 = (void *)*--v20;
              v22 = v23;
              *v20 = 0;
              if (v23)
                operator delete[](v22);
            }
            while (v20 != v19);
            v21 = v39;
          }
          v40 = v19;
          operator delete(v21);
        }
        if (v35 != v38)
          free(v35);
      }
    }
  }
  return v5;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, void *__s2, size_t __n)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  uint64_t v11;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;

  v12[0] = __s2;
  v12[1] = __n;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 12 || v8 == 3)
  {
LABEL_9:
    if (*(_QWORD *)(v7 + 72) != __n || __n && memcmp(*(const void **)(v7 + 64), __s2, __n))
      return 0;
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v13);
    v11 = *(_QWORD *)(v6 + 8);
    *(_OWORD *)(v11 + 56) = v13;
    *(_QWORD *)(v11 + 72) = v14;
    return 1;
  }
  if (v8 == 2)
  {
    (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(v7 + 136) + 48))(*(_QWORD *)(v7 + 136), v12, 1, 1);
    return 0;
  }
  result = mlir::Token::isKeyword((mlir::Token *)(v7 + 56));
  if (result)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(v6 + 8);
    goto LABEL_9;
  }
  return result;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  int v5;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = *(_DWORD *)(v4 + 56);
  if (v5 != 3 && v5 != 12)
  {
    result = mlir::Token::isKeyword((mlir::Token *)(v4 + 56));
    if (!result)
      return result;
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  }
  *a2 = *(_OWORD *)(v4 + 64);
  v8 = *(_QWORD *)(a1 + 16);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v8 + 8) + 8), (uint64_t)&v10);
  v9 = *(_QWORD *)(v8 + 8);
  *(_OWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 72) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  _BOOL8 result;
  const void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v9 = *(_DWORD *)(v8 + 56);
  if (v9 == 12 || v9 == 3)
    goto LABEL_9;
  if (v9 == 2)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v8 + 136) + 48))(*(_QWORD *)(v8 + 136), a3, a4, 1);
    return 0;
  }
  result = mlir::Token::isKeyword((mlir::Token *)(v8 + 56));
  if (result)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
LABEL_9:
    v12 = *(const void **)(v8 + 64);
    v13 = *(_QWORD *)(v8 + 72);
    if (a4)
    {
      if (v13)
      {
        v14 = 16 * a4;
        v15 = a3;
        while (*(_QWORD *)(v15 + 8) != v13 || memcmp(*(const void **)v15, v12, v13))
        {
          v15 += 16;
          v14 -= 16;
          if (!v14)
            goto LABEL_20;
        }
      }
      else
      {
        v16 = 16 * a4;
        v15 = a3;
        while (*(_QWORD *)(v15 + 8))
        {
          v15 += 16;
          v16 -= 16;
          if (!v16)
          {
LABEL_20:
            v15 = a3 + 16 * a4;
            break;
          }
        }
      }
    }
    else
    {
      v15 = a3;
    }
    if (a4 == (v15 - a3) >> 4)
    {
      return 0;
    }
    else
    {
      *a2 = v12;
      a2[1] = v13;
      v17 = *(_QWORD *)(a1 + 16);
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v17 + 8) + 8), (uint64_t)&v19);
      v18 = *(_QWORD *)(v17 + 8);
      *(_OWORD *)(v18 + 56) = v19;
      *(_QWORD *)(v18 + 72) = v20;
      return 1;
    }
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeywordOrString(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  __int128 *p_dst;
  size_t v8;
  size_t v9;
  __int128 __dst;
  unint64_t v11;
  void *__src;
  size_t __len;

  __src = 0;
  __len = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a1 + 384))(a1, &__src))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, a2);
  v4 = __src;
  if (!__src)
  {
    __dst = 0uLL;
    v11 = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_15;
    goto LABEL_16;
  }
  v5 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v8 = __len | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v11) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_13:
    memmove(p_dst, v4, v5);
  *((_BYTE *)p_dst + v5) = 0;
  if (*(char *)(a2 + 23) < 0)
LABEL_15:
    operator delete(*(void **)a2);
LABEL_16:
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAttribute(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3)
{
  llvm::APFloatBase *v4;

  v4 = mlir::detail::Parser::parseAttribute(*(mlir::StringAttr *****)(a1 + 16), a3);
  *a2 = v4;
  return v4 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCustomAttributeWithFallback(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3, uint64_t (*a4)(uint64_t, llvm::APFloatBase **), uint64_t a5)
{
  uint64_t v6;
  llvm::APFloatBase *v7;

  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(*(_QWORD *)(v6 + 8) + 56) != 5)
    return a4(a5, a2);
  v7 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)v6, a3);
  *a2 = v7;
  return v7 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttribute(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(mlir::detail::Parser **)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, _QWORD *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttrDict(uint64_t a1, mlir::NamedAttrList *a2)
{
  mlir::detail::Parser *v2;

  v2 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((_QWORD *)v2 + 1) + 56) == 20)
    return mlir::detail::Parser::parseAttributeDict(v2, a2);
  else
    return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttrDictWithKeyword(mlir::detail::Parser **a1, mlir::NamedAttrList *a2)
{
  if ((*((unsigned __int8 (**)(mlir::detail::Parser **, const char *, uint64_t))*a1 + 47))(a1, "attributes", 10))
  {
    return mlir::detail::Parser::parseAttributeDict(a1[2], a2);
  }
  else
  {
    return 1;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAffineMap(uint64_t a1, mlir::AffineMap *a2)
{
  return mlir::detail::Parser::parseAffineMapReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAffineExpr(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return mlir::detail::Parser::parseAffineExprReference(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseIntegerSet(uint64_t a1, mlir::IntegerSet *a2)
{
  return mlir::detail::Parser::parseIntegerSetReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalSymbolName(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  mlir::StringAttr **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1[2] + 8);
  v16 = *(_OWORD *)(v2 + 56);
  v17 = *(_QWORD *)(v2 + 72);
  if ((_DWORD)v16 != 4)
    return 0;
  v5 = (mlir::StringAttr **)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  mlir::Token::getSymbolReference((mlir::Token *)&v16, &__p);
  v15 = 260;
  *(_QWORD *)&v13 = &__p;
  *a2 = mlir::Builder::getStringAttr(v5, (mlir::MLIRContext *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = a1[2];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(v6 + 8) + 8), (uint64_t)&v13);
  v7 = *(_QWORD *)(v6 + 8);
  *(_OWORD *)(v7 + 56) = v13;
  *(_QWORD *)(v7 + 72) = v14;
  v8 = *(_QWORD *)(*(_QWORD *)(a1[2] + 8) + 128);
  if (v8)
  {
    v9 = mlir::SymbolRefAttr::get(*a2);
    *(_QWORD *)&v13 = mlir::Token::getLocRange((mlir::Token *)&v16);
    *((_QWORD *)&v13 + 1) = v10;
    mlir::AsmParserState::addUses(v8, v9, (char *)&v13, 1);
  }
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v3;
  return v3 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCustomTypeWithFallback(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  mlir::detail::Parser *v5;
  uint64_t v6;

  v5 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((_QWORD *)v5 + 1) + 56) != 8)
    return a3(a4, a2);
  v6 = mlir::detail::Parser::parseType(v5);
  *a2 = v6;
  return v6 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalType(uint64_t a1, mlir::Type *a2)
{
  return mlir::detail::Parser::parseOptionalType(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseArrowTypeList(mlir::detail::Parser **a1, uint64_t a2)
{
  return (*((unsigned __int8 (**)(mlir::detail::Parser **))*a1 + 7))(a1)
      && mlir::detail::Parser::parseFunctionResultTypes(a1[2], a2) != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalArrowTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 13)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  v6 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseFunctionResultTypes(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColonType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  __int16 v8;

  v4 = *(_QWORD *)(a1 + 16);
  v7 = "expected ':'";
  v8 = 259;
  if (!mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v7))
    return 0;
  v5 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v5;
  return v5 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v4 = *(_QWORD *)(a1 + 16);
  v6 = "expected ':'";
  v7 = 259;
  if (mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v6))
    return mlir::detail::Parser::parseTypeListNoParens(*(_QWORD *)(a1 + 16), a2);
  else
    return 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 15)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  v6 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseTypeListNoParens(*(_QWORD *)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseDimensionList(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return mlir::detail::Parser::parseDimensionListRanked(*(mlir::detail::Parser **)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseXInDimensionList(uint64_t a1)
{
  return mlir::detail::Parser::parseXInDimensionList(*(mlir::detail::Parser **)(a1 + 16));
}

void mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseResourceHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  const mlir::OpAsmDialectInterface *v6;
  uint64_t v7;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  const void **v12;
  const char *v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  char v31[32];
  __int16 v32;
  const void **v33;
  const char *v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)
    && (v6 = (const mlir::OpAsmDialectInterface *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)) != 0)
  {
    v37 = 0;
    v38 = 0;
    mlir::detail::Parser::parseResourceHandle(*(mlir::detail::Parser **)(a1 + 16), v6, (llvm::StringRef *)&v37, (uint64_t)a3);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    v32 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v31, &v37);
    if (!v37)
      goto LABEL_11;
    LODWORD(v33) = 3;
    v34 = "dialect '";
    v35 = 9;
    v8 = &v33;
    v9 = (char *)v39;
    if (v40 >= v41)
    {
      v27 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        v29 = (char *)&v33 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        v9 = (char *)v39;
        v8 = (const void ***)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        v8 = &v33;
        v9 = (char *)v39;
      }
    }
    v10 = &v9[24 * v40];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v40;
    if (!v37)
      goto LABEL_11;
    v12 = *(const void ***)(a2 + 8);
    v13 = *(const char **)(a2 + 16);
    v36 = 261;
    v33 = v12;
    v34 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    if (v37)
    {
      LODWORD(v33) = 3;
      v34 = "' does not expect resource handles";
      v35 = 34;
      v14 = &v33;
      v15 = (char *)v39;
      if (v40 >= v41)
      {
        v28 = v40 + 1;
        if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
        {
          v30 = (char *)&v33 - (_BYTE *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          v15 = (char *)v39;
          v14 = (const void ***)((char *)v39 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          v14 = &v33;
          v15 = (char *)v39;
        }
      }
      v16 = &v15[24 * v40];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v40;
      v18 = v37;
      *a3 = 0;
      a3[24] = 0;
      if (v18)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v47)
    {
      v19 = (_QWORD **)__p;
      if (__p)
      {
        v20 = v46;
        v21 = __p;
        if (v46 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v46 = v19;
        operator delete(v21);
      }
      v22 = v43;
      if (v43)
      {
        v23 = v44;
        v24 = v43;
        if (v44 != v43)
        {
          do
          {
            v26 = (void *)*--v23;
            v25 = v26;
            *v23 = 0;
            if (v26)
              operator delete[](v25);
          }
          while (v23 != v22);
          v24 = v43;
        }
        v44 = v22;
        operator delete(v24);
      }
      if (v39 != v42)
        free(v39);
    }
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::pushCyclicParsing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[16];
  unsigned __int8 v9;

  v7 = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 88), &v7, (uint64_t)v8);
  v3 = v9;
  if (v9)
  {
    v4 = v7;
    v5 = *(unsigned int *)(v2 + 120);
    if (v5 >= *(_DWORD *)(v2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 112, (void *)(v2 + 128), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 120);
    }
    *(_QWORD *)(*(_QWORD *)(v2 + 112) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 120);
  }
  return v3;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::popCyclicParsing(uint64_t result)
{
  int32x2_t *v1;
  __int32 v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;

  v1 = *(int32x2_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = v1[13].i32[0];
  if (v2)
  {
    v3 = v1[11];
    v4 = v1[15].u32[0];
    v5 = *(_QWORD *)(*(_QWORD *)&v1[14] + 8 * v4 - 8);
    v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
    v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      *v8 = -8192;
      v1[12] = vadd_s32(v1[12], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[15].i32[0] = v4 - 1;
  }
  else
  {
    --v1[15].i32[0];
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseKeywordOrCompletion(mlir::AsmParser *a1, llvm::StringRef *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  if (*(_DWORD *)(v2 + 56) != 2 || *(_QWORD *)(v2 + 72))
    return mlir::AsmParser::parseKeyword(a1, a2);
  *(_QWORD *)a2 = "";
  *((_QWORD *)a2 + 1) = 0;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::codeCompleteExpectedTokens(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  if (*(_DWORD *)(v3 + 56) == 2 && !*(_QWORD *)(v3 + 72))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v3 + 136) + 48))(*(_QWORD *)(v3 + 136), a2, a3, 0);
  return result;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalLocationSpecifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 59)
    return 1;
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v12);
  v6 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v12;
  *(_QWORD *)(v6 + 72) = v13;
  v15 = 0;
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)&v12 = "expected '(' in location";
  v14 = 259;
  if (mlir::detail::Parser::parseToken(v7, 21, (uint64_t)&v12))
  {
    v8 = *(_QWORD *)(a1 + 88);
    if (*(_DWORD *)(*(_QWORD *)(v8 + 8) + 56) == 5)
    {
        return 0;
    }
    else if (!mlir::detail::Parser::parseLocationInstance((mlir::UnknownLoc ****)v8, &v15))
    {
      return 0;
    }
    v9 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)&v12 = "expected ')' in location";
    v14 = 259;
    if (mlir::detail::Parser::parseToken(v9, 28, (uint64_t)&v12))
    {
      v10 = v15;
      if (!*(_BYTE *)(a2 + 8))
        *(_BYTE *)(a2 + 8) = 1;
      *(_QWORD *)a2 = v10;
      return 1;
    }
  }
  return 0;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::getResultName@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v4 = (_DWORD *)(*(_QWORD *)(this + 32) + 16);
    v5 = 32 * v3;
    while (1)
    {
      v6 = a2 - *v4;
      if (a2 < *v4)
        break;
      v4 += 8;
      a2 = v6;
      v5 -= 32;
      if (!v5)
        goto LABEL_5;
    }
    v9 = v4 - 4;
    v7 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v9 + 1);
    if (v8)
      ++v7;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8 - (v8 != 0);
    *(_DWORD *)(a3 + 16) = a2;
  }
  else
  {
LABEL_5:
    *(_QWORD *)a3 = "";
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = -1;
  }
  return this;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::getNumResults(_anonymous_namespace_::CustomOpAsmParser *this)
{
  uint64_t v1;
  int32x2_t *v2;
  unint64_t v3;
  uint64_t result;
  int32x2_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int32x2_t *v9;
  int64x2_t v10;
  int64x2_t v11;
  uint32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t *v15;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = (int32x2_t *)*((_QWORD *)this + 4);
  v3 = (v1 - 1) & 0x7FFFFFFFFFFFFFFLL;
  if (v3 >= 4)
  {
    v6 = v3 + 1;
    v7 = v6 & 3;
    if ((v6 & 3) == 0)
      v7 = 4;
    v8 = v6 - v7;
    v5 = &v2[4 * v8];
    v9 = v2 + 10;
    v10 = 0uLL;
    v11 = 0uLL;
    do
    {
      v12 = (uint32x2_t)vzip1_s32(v9[-8], v9[-4]);
      v13 = v9[4];
      v14 = *v9;
      v9 += 16;
      v10 = (int64x2_t)vaddw_u32((uint64x2_t)v10, v12);
      v11 = (int64x2_t)vaddw_u32((uint64x2_t)v11, (uint32x2_t)vzip1_s32(v14, v13));
      v8 -= 4;
    }
    while (v8);
    result = vaddvq_s64(vaddq_s64(v11, v10));
  }
  else
  {
    result = 0;
    v5 = v2;
  }
  v15 = &v2[4 * v1];
  do
  {
    result += v5[2].u32[0];
    v5 += 4;
  }
  while (v5 != v15);
  return result;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseGenericOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t LocRange;
  uint64_t v9;
  uint64_t v10;
  uint64_t Loc;
  _OWORD *v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_OWORD *)(v4 + 56);
  v16 = *(_QWORD *)(v4 + 72);
  v14 = *(_OWORD *)(v3 + 400);
  v15 = v5;
  *(_QWORD *)(v3 + 400) = a2;
  *(_QWORD *)(v3 + 408) = a3;
  if (v6)
  {
    v7 = *(uint64_t **)(*(_QWORD *)(v3 + 8) + 128);
    if (v7)
    {
      LocRange = mlir::Token::getLocRange((mlir::Token *)&v15);
      v10 = v9;
      Loc = mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(v3 + 8) + 56));
      mlir::AsmParserState::finalizeOperationDefinition(v7, v6, LocRange, v10, Loc, 0, 0);
    }
  }
  v12 = (_OWORD *)(v3 + 400);
  if ((_QWORD)v14)
  {
    *v12 = v14;
  }
  else
  {
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v3 + 408) = 0;
  }
  return v6;
}

unint64_t `anonymous namespace'::CustomOpAsmParser::parseCustomOperationName(_anonymous_namespace_::OperationParser **this)
{
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseGenericOperationAfterOpName(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v10 = *(_QWORD *)(a1 + 88);
  v18 = *a3;
  v19 = *((_QWORD *)a3 + 2);
  v16 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v14 = *a5;
  v15 = *((_QWORD *)a5 + 2);
  v13 = *((_QWORD *)a6 + 2);
  v12 = *a6;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOperand(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  __int128 v8;
  int v9;

  v7 = 0;
  v8 = 0uLL;
    return 0;
  v4 = v7;
  *(_OWORD *)(a2 + 8) = v8;
  v5 = v9;
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 24) = v5;
  return 1;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalOperand(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *(_QWORD *)(a1[11] + 8);
  v8 = *(_DWORD *)(v6 + 56);
  v7 = v6 + 56;
  if (v8 == 6 || mlir::Token::isCodeCompletionFor(v7, 6))
    return (*(unsigned __int8 (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 672))(a1, a2, a3) | 0x100u;
  else
    return 0;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOperandList(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v9;
  uint64_t Loc;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  int64_t v47;
  int64_t v48;
  _QWORD v49[3];
  _QWORD v50[4];
  __int16 v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[3];
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v52 = a4;
  if ((_DWORD)a3
    || (v9 = *(_QWORD *)(a1[11] + 8), v53 = *(_OWORD *)(v9 + 56), v54 = *(_QWORD *)(v9 + 72), (_DWORD)v53 == 6)
    || mlir::Token::isCodeCompletionFor((uint64_t)&v53, 6))
  {
    v49[0] = a1;
    v49[1] = a2;
    v49[2] = &v52;
    Loc = mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(a1[11] + 8) + 56));
    if (a5 != -1 && *(_DWORD *)(a2 + 8) != (uint64_t)a5)
    {
      v50[0] = "expected ";
      v51 = 259;
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, _QWORD *))(*a1 + 24))(v55, a1, Loc, v50);
      if (v55[0])
      {
        LODWORD(v53) = 2;
        *((_QWORD *)&v53 + 1) = a5;
        v11 = (char *)&v53;
        v12 = (char *)v56;
        if (v57 >= v58)
        {
          v44 = v57 + 1;
          if (v56 <= &v53 && (char *)v56 + 24 * v57 > (char *)&v53)
          {
            v47 = (char *)&v53 - (_BYTE *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v44, 24);
            v12 = (char *)v56;
            v11 = (char *)v56 + v47;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v44, 24);
            v11 = (char *)&v53;
            v12 = (char *)v56;
          }
        }
        v13 = &v12[24 * v57];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
        *(_OWORD *)v13 = v14;
        v15 = ++v57;
        if (v55[0])
        {
          LODWORD(v53) = 3;
          *((_QWORD *)&v53 + 1) = " operands";
          v54 = 9;
          v16 = (char *)&v53;
          v17 = (char *)v56;
          if (v15 >= v58)
          {
            v45 = v15 + 1;
            v46 = (char *)v56 + 24 * v15 > (char *)&v53;
            if (v56 <= &v53 && v46)
            {
              v48 = (char *)&v53 - (_BYTE *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
              v17 = (char *)v56;
              v16 = (char *)v56 + v48;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
              v16 = (char *)&v53;
              v17 = (char *)v56;
            }
          }
          v18 = &v17[24 * v57];
          v19 = *(_OWORD *)v16;
          *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
          *(_OWORD *)v18 = v19;
          ++v57;
        }
      }
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
      if (v55[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
      if (v64)
      {
        v21 = (_QWORD **)__p;
        if (__p)
        {
          v22 = v63;
          v23 = __p;
          if (v63 != __p)
          {
            do
              v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
            while (v22 != v21);
            v23 = __p;
          }
          v63 = v21;
          operator delete(v23);
        }
        v24 = v60;
        if (!v60)
          goto LABEL_61;
        v25 = v61;
        v26 = v60;
        if (v61 == v60)
        {
LABEL_60:
          v61 = v24;
          operator delete(v26);
LABEL_61:
          if (v56 != v59)
            free(v56);
          return v20;
        }
        do
        {
          v28 = (void *)*--v25;
          v27 = v28;
          *v25 = 0;
          if (v28)
            operator delete[](v27);
        }
        while (v25 != v24);
LABEL_59:
        v26 = v60;
        goto LABEL_60;
      }
      return v20;
    }
    return 1;
  }
  if ((a5 + 1) <= 1)
    return 1;
  if ((v53 - 21) > 1)
  {
    v37 = a1[11];
    v50[0] = "expected operand";
    v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(v37, (uint64_t)v50, v55);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (v64)
    {
      v38 = (_QWORD **)__p;
      if (__p)
      {
        v39 = v63;
        v40 = __p;
        if (v63 != __p)
        {
          do
            v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          v40 = __p;
        }
        v63 = v38;
        operator delete(v40);
      }
      v24 = v60;
      if (!v60)
        goto LABEL_61;
      v41 = v61;
      v26 = v60;
      if (v61 == v60)
        goto LABEL_60;
      do
      {
        v43 = (void *)*--v41;
        v42 = v43;
        *v41 = 0;
        if (v43)
          operator delete[](v42);
      }
      while (v41 != v24);
      goto LABEL_59;
    }
  }
  else
  {
    v30 = a1[11];
    v50[0] = "unexpected delimiter";
    v51 = 259;
    mlir::detail::Parser::emitError(v30, (uint64_t)v50, v55);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (v64)
    {
      v31 = (_QWORD **)__p;
      if (__p)
      {
        v32 = v63;
        v33 = __p;
        if (v63 != __p)
        {
          do
            v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          v33 = __p;
        }
        v63 = v31;
        operator delete(v33);
      }
      v24 = v60;
      if (!v60)
        goto LABEL_61;
      v34 = v61;
      v26 = v60;
      if (v61 == v60)
        goto LABEL_60;
      do
      {
        v36 = (void *)*--v34;
        v35 = v36;
        *v34 = 0;
        if (v36)
          operator delete[](v35);
      }
      while (v34 != v24);
      goto LABEL_59;
    }
  }
  return v20;
}

unint64_t `anonymous namespace'::CustomOpAsmParser::resolveOperand(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  v5 = *(_QWORD *)(a1 + 88);
  v6 = a2[1];
  v10[0] = *a2;
  v10[1] = v6;
  if (result)
  {
    v8 = result;
    v9 = *(unsigned int *)(a4 + 8);
    if (v9 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v9) = v8;
    ++*(_DWORD *)(a4 + 8);
    return 1;
  }
  return result;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseAffineMapOfSSAIds(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v13;
  uint64_t NamedAttr;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v27;
  _QWORD v28[3];
  void *__src;
  uint64_t v30;
  _BYTE v31[32];
  void *v32;
  uint64_t v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x1E0C80C00];
  v32 = v34;
  v33 = 0x200000000;
  v28[2] = &v32;
  __src = v31;
  v30 = 0x100000000;
  v28[0] = a1;
  v28[1] = &__src;
  v27 = 0;
  {
    if (v27)
    {
      v13 = mlir::AffineMapAttr::get(v27);
      *a3 = v13;
      NamedAttr = mlir::Builder::getNamedAttr(*(mlir::StringAttr ***)(a1 + 88), a4, a5, v13);
      mlir::NamedAttrList::push_back(a6, NamedAttr, v15);
    }
    v16 = v32;
    v17 = v33;
    *(_DWORD *)(a2 + 8) = 0;
    if (v17 <= *(_DWORD *)(a2 + 12))
    {
      if (!(_DWORD)v17)
      {
        v21 = 0;
LABEL_11:
        v22 = (v21 + v17);
        *(_DWORD *)(a2 + 8) = v22;
        v23 = __src;
        v24 = v30;
        v25 = v30 + v22;
        if (v25 > *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v25, 32);
          LODWORD(v22) = *(_DWORD *)(a2 + 8);
        }
        if ((_DWORD)v24)
        {
          memcpy((void *)(*(_QWORD *)a2 + 32 * v22), v23, 32 * v24);
          LODWORD(v22) = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v22 + v24;
        v19 = 1;
        v20 = __src;
        if (__src != v31)
          goto LABEL_16;
        goto LABEL_17;
      }
      v18 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v17, 32);
      v18 = *(unsigned int *)(a2 + 8);
    }
    memcpy((void *)(*(_QWORD *)a2 + 32 * v18), v16, 32 * v17);
    v21 = *(_DWORD *)(a2 + 8);
    goto LABEL_11;
  }
  v19 = 0;
  v20 = __src;
  if (__src != v31)
LABEL_16:
    free(v20);
LABEL_17:
  if (v32 != v34)
    free(v32);
  return v19;
}

BOOL `anonymous namespace'::CustomOpAsmParser::parseAffineExprOfSSAIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD v5[3];

  v5[0] = a1;
  v5[1] = a3;
  v5[2] = a2;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseArgument(mlir::AsmParser *a1, uint64_t a2, int a3, int a4)
{
  mlir::MLIRContext *Context;
  uint64_t v9;
  void *v10;
  void *v12[2];
  _QWORD v13[10];

  v13[9] = *MEMORY[0x1E0C80C00];
  v12[0] = v13;
  v12[1] = (void *)0x400000000;
  v13[8] = 4;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t, _QWORD))(*(_QWORD *)a1 + 672))(a1, a2, 0)
    && (!a3 || (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(_QWORD *)a1 + 544))(a1, a2 + 32))
    && (!a4 || (*(unsigned __int8 (**)(mlir::AsmParser *, void **))(*(_QWORD *)a1 + 456))(a1, v12))
    && (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(_QWORD *)a1 + 624))(a1, a2 + 48))
  {
    Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
    *(_QWORD *)(a2 + 40) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v12, Context);
    v9 = 1;
    v10 = v12[0];
    if (v12[0] == v13)
      return v9;
    goto LABEL_10;
  }
  v9 = 0;
  v10 = v12[0];
  if (v12[0] != v13)
LABEL_10:
    free(v10);
  return v9;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalArgument(_QWORD *a1)
{
  if (*(_DWORD *)(*(_QWORD *)(a1[11] + 8) + 56) == 6)
    return (*(unsigned __int8 (**)(_QWORD *))(*a1 + 720))(a1) | 0x100u;
  else
    return 0;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseArgumentList(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  _QWORD v6[4];
  char v7;
  char v8;

  v8 = a4;
  v7 = a5;
  if (!(_DWORD)a3 && *(_DWORD *)(*(_QWORD *)(a1[11] + 8) + 56) != 6)
    return 1;
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = &v8;
  v6[3] = &v7;
}

BOOL `anonymous namespace'::CustomOpAsmParser::parseRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalRegion(_QWORD *a1)
{
  if (*(_DWORD *)(*(_QWORD *)(a1[11] + 8) + 56) == 20)
    return (*(unsigned __int8 (**)(_QWORD *))(*a1 + 744))(a1) | 0x100u;
  else
    return 0;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalRegion(_QWORD *a1, mlir::Region **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Region *v10;
  mlir::Region *v11;
  int v12;
  void *v14;

  if (*(_DWORD *)(*(_QWORD *)(a1[11] + 8) + 56) != 20)
    return 0;
  v10 = (mlir::Region *)operator new(0x18uLL);
  *(_QWORD *)v10 = v10;
  *((_QWORD *)v10 + 1) = v10;
  *((_QWORD *)v10 + 2) = 0;
  if ((*(unsigned __int8 (**)(_QWORD *, mlir::Region *, uint64_t, uint64_t, uint64_t))(*a1 + 744))(a1, v10, a3, a4, a5))
  {
    v11 = *a2;
    *a2 = v10;
    v12 = 1;
    v10 = v11;
    if (!v11)
      return 257;
  }
  else
  {
    v12 = 0;
  }
  mlir::Region::~Region(v10);
  operator delete(v14);
  return v12 | 0x100u;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseSuccessor(_anonymous_namespace_::OperationParser **this, mlir::Block **a2)
{
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalSuccessor(_anonymous_namespace_::CustomOpAsmParser *this, mlir::Block **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v6 = *(_DWORD *)(v4 + 56);
  v5 = v4 + 56;
  if (v6 == 7 || mlir::Token::isCodeCompletionFor(v5, 7))
    return (*(unsigned __int8 (**)(_anonymous_namespace_::CustomOpAsmParser *, mlir::Block **))(*(_QWORD *)this + 768))(this, a2) | 0x100u;
  else
    return 0;
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseSuccessorAndUseList(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  void *v14;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  int64_t v36;
  int64_t v37;
  unint64_t v38;
  const char *v39;
  __int16 v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  void *v45[2];
  unsigned int v46;
  unsigned int v47;
  _BYTE v48[96];
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD **v52;
  char v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[32];
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[17];

  v59[16] = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned __int8 (**)(_QWORD *))(*a1 + 768))(a1))
    return 0;
  if (!(*(unsigned __int8 (**)(_QWORD *))(*a1 + 272))(a1))
    return 1;
  v5 = a1[11];
  v57 = v59;
  v58 = 0x400000000;
  {
    v13 = 0;
    v14 = v57;
    if (v57 == v59)
      return v13 && (*(unsigned __int8 (**)(_QWORD *))(*a1 + 280))(a1);
    goto LABEL_23;
  }
  if (!(_DWORD)v58)
  {
    v13 = 1;
    v14 = v57;
    if (v57 == v59)
      return v13 && (*(unsigned __int8 (**)(_QWORD *))(*a1 + 280))(a1);
    goto LABEL_23;
  }
  v54 = v56;
  v55 = 0x400000000;
  *(_QWORD *)&v44 = "expected ':' in operand list";
  LOWORD(v46) = 259;
  if (!mlir::detail::Parser::parseToken(v5, 15, (uint64_t)&v44)
    || !mlir::detail::Parser::parseTypeListNoParens(v5, (uint64_t)&v54))
  {
    goto LABEL_19;
  }
  v6 = v58;
  if ((_DWORD)v58 == (_DWORD)v55)
  {
    if (*(_DWORD *)(a3 + 12) < v58)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v58, 8);
      v6 = v58;
    }
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 32 * v6;
      while (1)
      {
        v10 = *(_OWORD *)&v57[v8 / 8 + 2];
        v44 = *(_OWORD *)&v57[v8 / 8];
        *(_OWORD *)v45 = v10;
        if (!v11)
          break;
        v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(unsigned int *)(a3 + 12))
        {
          v38 = v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          v11 = v38;
          v12 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        v8 += 32;
        v7 += 8;
        if (v9 == v8)
          goto LABEL_49;
      }
LABEL_19:
      v13 = 0;
      goto LABEL_20;
    }
LABEL_49:
    v13 = 1;
  }
  else
  {
    v39 = "expected ";
    v40 = 259;
    mlir::detail::Parser::emitError(v5, (uint64_t)&v39, &v44);
    if ((_QWORD)v44)
    {
      v41 = 5;
      v42 = v58;
      v16 = &v41;
      v17 = (char *)v45[1];
      if (v46 >= v47)
      {
        v33 = v46 + 1;
        if (v45[1] <= &v41 && (char *)v45[1] + 24 * v46 > (char *)&v41)
        {
          v36 = (char *)&v41 - (char *)v45[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v33, 24);
          v17 = (char *)v45[1];
          v16 = (int *)((char *)v45[1] + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v33, 24);
          v16 = &v41;
          v17 = (char *)v45[1];
        }
      }
      v18 = &v17[24 * v46];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      v20 = ++v46;
      if ((_QWORD)v44)
      {
        v41 = 3;
        v42 = (unint64_t)" types to match operand list";
        v43 = 28;
        v21 = &v41;
        v22 = (char *)v45[1];
        if (v20 >= v47)
        {
          v34 = v20 + 1;
          v35 = (char *)v45[1] + 24 * v20 > (char *)&v41;
          if (v45[1] <= &v41 && v35)
          {
            v37 = (char *)&v41 - (char *)v45[1];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v34, 24);
            v22 = (char *)v45[1];
            v21 = (int *)((char *)v45[1] + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v34, 24);
            v21 = &v41;
            v22 = (char *)v45[1];
          }
        }
        v23 = &v22[24 * v46];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v23 = v24;
        ++v46;
      }
    }
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
    if ((_QWORD)v44)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
    if (v53)
    {
      v25 = (_QWORD **)__p;
      if (__p)
      {
        v26 = v52;
        v27 = __p;
        if (v52 != __p)
        {
          do
            v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          v27 = __p;
        }
        v52 = v25;
        operator delete(v27);
      }
      v28 = v49;
      if (v49)
      {
        v29 = v50;
        v30 = v49;
        if (v50 != v49)
        {
          do
          {
            v32 = (void *)*--v29;
            v31 = v32;
            *v29 = 0;
            if (v32)
              operator delete[](v31);
          }
          while (v29 != v28);
          v30 = v49;
        }
        v50 = v28;
        operator delete(v30);
      }
      if (v45[1] != v48)
        free(v45[1]);
    }
  }
LABEL_20:
  if (v54 != v56)
    free(v54);
  v14 = v57;
  if (v57 != v59)
LABEL_23:
    free(v14);
  return v13 && (*(unsigned __int8 (**)(_QWORD *))(*a1 + 280))(a1);
}

uint64_t `anonymous namespace'::CustomOpAsmParser::parseOptionalAssignmentList(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  _QWORD v10[3];

  if ((*(unsigned __int8 (**)(_QWORD *))(*a1 + 272))(a1))
  {
    v10[0] = a1;
    v10[1] = a2;
    v10[2] = a3;
    v6 = a1[11];
    v7 = 1;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  return v8 | (v7 << 8);
}

uint64_t `anonymous namespace'::OperationParser::parseLocationAlias(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  const unsigned __int8 *v8;
  _BYTE *v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t LocRange;
  uint64_t v14;
  uint64_t v15;
  int Key;
  mlir::MLIRContext *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int *v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  const char *Loc;
  uint64_t EncodedSourceLocation;
  const void ***v60;
  char *v61;
  char *v62;
  __int128 v63;
  const void ***v64;
  char *v65;
  char *v66;
  __int128 v67;
  _QWORD **v68;
  _QWORD **v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  uint64_t *v74;
  __int128 v75;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  BOOL v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  int v88;
  const char *v89;
  uint64_t v90;
  __int16 v91;
  __int128 v92;
  uint64_t v93;
  int8x16_t *v94;
  const char *v95;
  uint64_t v96;
  __int16 v97;
  __int128 v98;
  uint64_t v99;
  void *v100;
  unsigned int v101;
  unsigned int v102;
  _BYTE v103[96];
  void *v104;
  _QWORD *v105;
  void *__p;
  _QWORD **v107;
  char v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v92 = *(_OWORD *)(v4 + 56);
  v93 = *(_QWORD *)(v4 + 72);
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v98);
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v98;
  *(_QWORD *)(v5 + 72) = v99;
  v6 = v93 != 0;
  if (v93)
    v7 = (int8x16_t *)(*((_QWORD *)&v92 + 1) + 1);
  else
    v7 = (int8x16_t *)*((_QWORD *)&v92 + 1);
  v8 = (const unsigned __int8 *)(v93 - v6);
  if (v93 != v6)
  {
    v9 = memchr(v7, 46, v93 - v6);
    if (v9 && v9 - (_BYTE *)v7 != -1)
    {
      Loc = (const char *)mlir::Token::getLoc((mlir::Token *)&v92);
      v91 = 257;
      EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, Loc);
      mlir::emitError(EncodedSourceLocation, (uint64_t)&v88, (uint64_t)&v98);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(&v98);
      if ((_QWORD)v98)
      {
        LODWORD(v94) = 3;
        v95 = "expected location, but found dialect attribute: '#";
        v96 = 50;
        v60 = (const void ***)&v94;
        v61 = (char *)v100;
        if (v101 >= v102)
        {
          v77 = v101 + 1;
          if (v100 <= &v94 && (char *)v100 + 24 * v101 > (char *)&v94)
          {
            v83 = (char *)&v94 - (_BYTE *)v100;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v77, 24);
            v61 = (char *)v100;
            v60 = (const void ***)((char *)v100 + v83);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v77, 24);
            v60 = (const void ***)&v94;
            v61 = (char *)v100;
          }
        }
        v62 = &v61[24 * v101];
        v63 = *(_OWORD *)v60;
        *((_QWORD *)v62 + 2) = v60[2];
        *(_OWORD *)v62 = v63;
        ++v101;
        if ((_QWORD)v98)
        {
          v97 = 261;
          v94 = v7;
          v95 = (const char *)v8;
          mlir::Diagnostic::operator<<((uint64_t)&v98 + 8, (const void ***)&v94);
          if ((_QWORD)v98)
          {
            LODWORD(v94) = 3;
            v95 = "'";
            v96 = 1;
            v64 = (const void ***)&v94;
            v65 = (char *)v100;
            if (v101 >= v102)
            {
              v78 = v101 + 1;
              if (v100 <= &v94 && (char *)v100 + 24 * v101 > (char *)&v94)
              {
                v84 = (char *)&v94 - (_BYTE *)v100;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v78, 24);
                v65 = (char *)v100;
                v64 = (const void ***)((char *)v100 + v84);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v78, 24);
                v64 = (const void ***)&v94;
                v65 = (char *)v100;
              }
            }
            v66 = &v65[24 * v101];
            v67 = *(_OWORD *)v64;
            *((_QWORD *)v66 + 2) = v64[2];
            *(_OWORD *)v66 = v67;
            ++v101;
          }
        }
      }
      v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v98);
      if ((_QWORD)v98)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v98);
      if (v108)
      {
        v68 = (_QWORD **)__p;
        if (__p)
        {
          v69 = v107;
          v70 = __p;
          if (v107 != __p)
          {
            do
              v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
            while (v69 != v68);
            v70 = __p;
          }
          v107 = v68;
          operator delete(v70);
        }
        v41 = v104;
        if (!v104)
          goto LABEL_86;
        v71 = v105;
        v43 = v104;
        if (v105 == v104)
        {
LABEL_85:
          v105 = v41;
          operator delete(v43);
LABEL_86:
          if (v100 != v103)
            free(v100);
          return v37;
        }
        do
        {
          v73 = (void *)*--v71;
          v72 = v73;
          *v71 = 0;
          if (v73)
            operator delete[](v72);
        }
        while (v71 != v41);
LABEL_84:
        v43 = v104;
        goto LABEL_85;
      }
      return v37;
    }
  }
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(uint64_t **)(v11 + 128);
  if (v12)
  {
    LocRange = mlir::Token::getLocRange((mlir::Token *)&v92);
    mlir::AsmParserState::addAttrAliasUses(v12, v7, v8, LocRange, v14);
    v11 = *(_QWORD *)(a1 + 8);
  }
  v15 = *(_QWORD *)(v11 + 80);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)v15, v7, v8);
  if (Key == -1
    || Key == (unint64_t)*(unsigned int *)(v15 + 8)
    || (v18 = *(_QWORD *)(*(_QWORD *)v15 + 8 * Key), (v19 = *(_QWORD *)(v18 + 8)) == 0))
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 3);
    v45 = mlir::UnknownLoc::get(***(mlir::UnknownLoc ****)(a1 + 8), v17);
    v46 = mlir::Token::getLoc((mlir::Token *)&v92);
    v47 = v46;
    v49 = *(uint64_t **)(a1 + 368);
    v48 = *(_QWORD *)(a1 + 376);
    if ((unint64_t)v49 >= v48)
    {
      v53 = *(_QWORD **)(a1 + 360);
      v54 = 0xAAAAAAAAAAAAAAABLL * (v49 - v53) + 1;
      if (v54 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v53) >> 3);
      if (2 * v55 > v54)
        v54 = 2 * v55;
      if (v55 >= 0x555555555555555)
        v56 = 0xAAAAAAAAAAAAAAALL;
      else
        v56 = v54;
      if (v56)
      {
        if (v56 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v57 = (char *)operator new(24 * v56);
      }
      else
      {
        v57 = 0;
      }
      v74 = (uint64_t *)&v57[8 * (v49 - v53)];
      *v74 = v47;
      v74[1] = (uint64_t)v7;
      v74[2] = (uint64_t)v8;
      v50 = v74 + 3;
      if (v49 != v53)
      {
        do
        {
          v75 = *(_OWORD *)(v49 - 3);
          *(v74 - 1) = *(v49 - 1);
          *(_OWORD *)(v74 - 3) = v75;
          v74 -= 3;
          v49 -= 3;
        }
        while (v49 != v53);
        v49 = *(uint64_t **)(a1 + 360);
      }
      *(_QWORD *)(a1 + 360) = v74;
      *(_QWORD *)(a1 + 368) = v50;
      *(_QWORD *)(a1 + 376) = &v57[24 * v56];
      if (v49)
        operator delete(v49);
    }
    else
    {
      *v49 = v46;
      v49[1] = (uint64_t)v7;
      v50 = v49 + 3;
      v49[2] = (uint64_t)v8;
    }
    *(_QWORD *)(a1 + 368) = v50;
    return 1;
  }
  v20 = mlir::LocationAttr::classof(*(_QWORD *)(v18 + 8));
  if (v20)
    v21 = v19;
  else
    v21 = 0;
  *a2 = v21;
  if (v20)
    return 1;
  v22 = (const char *)mlir::Token::getLoc((mlir::Token *)&v92);
  v97 = 257;
  v23 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v22);
  mlir::emitError(v23, (uint64_t)&v94, (uint64_t)&v98);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(&v98);
  if ((_QWORD)v98)
  {
    v88 = 3;
    v89 = "expected location, but found '";
    v90 = 30;
    v24 = &v88;
    v25 = (char *)v100;
    if (v101 >= v102)
    {
      v79 = v101 + 1;
      if (v100 <= &v88 && (char *)v100 + 24 * v101 > (char *)&v88)
      {
        v85 = (char *)&v88 - (_BYTE *)v100;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v79, 24);
        v25 = (char *)v100;
        v24 = (int *)((char *)v100 + v85);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v79, 24);
        v24 = &v88;
        v25 = (char *)v100;
      }
    }
    v26 = &v25[24 * v101];
    v27 = *(_OWORD *)v24;
    *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
    *(_OWORD *)v26 = v27;
    ++v101;
    if ((_QWORD)v98)
    {
      v28 = &v88;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v88, v19);
      v29 = (char *)v100;
      if (v101 >= v102)
      {
        v80 = v101 + 1;
        if (v100 <= &v88 && (char *)v100 + 24 * v101 > (char *)&v88)
        {
          v86 = (char *)&v88 - (_BYTE *)v100;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v80, 24);
          v29 = (char *)v100;
          v28 = (int *)((char *)v100 + v86);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v80, 24);
          v28 = &v88;
          v29 = (char *)v100;
        }
      }
      v30 = &v29[24 * v101];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      v32 = ++v101;
      if ((_QWORD)v98)
      {
        v88 = 3;
        v89 = "'";
        v90 = 1;
        v33 = &v88;
        v34 = (char *)v100;
        if (v32 >= v102)
        {
          v81 = v32 + 1;
          v82 = (char *)v100 + 24 * v32 > (char *)&v88;
          if (v100 <= &v88 && v82)
          {
            v87 = (char *)&v88 - (_BYTE *)v100;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v81, 24);
            v34 = (char *)v100;
            v33 = (int *)((char *)v100 + v87);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v81, 24);
            v33 = &v88;
            v34 = (char *)v100;
          }
        }
        v35 = &v34[24 * v101];
        v36 = *(_OWORD *)v33;
        *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
        *(_OWORD *)v35 = v36;
        ++v101;
      }
    }
  }
  v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v98);
  if ((_QWORD)v98)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v98);
  if (v108)
  {
    v38 = (_QWORD **)__p;
    if (__p)
    {
      v39 = v107;
      v40 = __p;
      if (v107 != __p)
      {
        do
          v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        v40 = __p;
      }
      v107 = v38;
      operator delete(v40);
    }
    v41 = v104;
    if (!v104)
      goto LABEL_86;
    v42 = v105;
    v43 = v104;
    if (v105 == v104)
      goto LABEL_85;
    do
    {
      v52 = (void *)*--v42;
      v51 = v52;
      *v42 = 0;
      if (v52)
        operator delete[](v51);
    }
    while (v42 != v41);
    goto LABEL_84;
  }
  return v37;
}

uint64_t `anonymous namespace'::OperationParser::parseGenericOperationAfterOpName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::APFloatBase *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t EncodedSourceLocation;
  const void *Results;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t Inputs;
  const char *v50;
  const char *v51;
  const char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  const char *Loc;
  uint64_t v62;
  _QWORD **v63;
  _QWORD **v64;
  void *v65;
  _QWORD *v66;
  void *v68;
  void *v69;
  BOOL v70;
  char *v71;
  char v72;
  const char *v73;
  int *v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  int *v79;
  char *v80;
  char *v81;
  __int128 v82;
  int *v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  int *v88;
  char *v89;
  char *v90;
  __int128 v91;
  _QWORD **v92;
  _QWORD **v93;
  void *v94;
  _QWORD *v95;
  void *v96;
  void *v97;
  unint64_t v98;
  unint64_t v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  int64_t v107;
  _OWORD v108[2];
  uint64_t v109;
  uint64_t v110;
  int v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114[2];
  uint64_t v115[2];
  __int128 v116;
  uint64_t v117;
  void *v118;
  unsigned int v119;
  unsigned int v120;
  _BYTE v121[96];
  void *v122;
  _QWORD *v123;
  void *__p;
  _QWORD **v125;
  char v126;
  void *v127;
  uint64_t v128;
  _BYTE v129[16];
  __int16 v130;
  void *v131;
  uint64_t v132;
  _QWORD v133[34];

  v133[32] = *MEMORY[0x1E0C80C00];
  v109 = a9;
  v110 = a10;
  v131 = v133;
  v132 = 0x800000000;
  if (!*(_BYTE *)(a3 + 16))
  {
    *(_QWORD *)&v116 = "expected '(' to start operand list";
    LOWORD(v119) = 259;
    if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v116))
      goto LABEL_83;
      goto LABEL_83;
    v127 = "expected ')' to end operand list";
    v130 = 259;
    if (!mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v127))
      goto LABEL_83;
    v18 = v132;
    if (*(_BYTE *)(a3 + 16))
    {
      *(_QWORD *)a3 = v131;
      *(_QWORD *)(a3 + 8) = v18;
    }
    else
    {
      *(_QWORD *)a3 = v131;
      *(_QWORD *)(a3 + 8) = v18;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  if (*(_BYTE *)(a4 + 16))
  {
    mlir::BlockRange::BlockRange(v114, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
    mlir::OperationState::addSuccessors((unsigned int *)a2, v114[0], v114[1]);
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 22)
  {
    if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>((void ***)(a2 + 8)) & 1) == 0)
    {
      v127 = "successors in non-terminator";
      v130 = 259;
      mlir::detail::Parser::emitError(a1, (uint64_t)&v127, &v116);
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
      if ((_QWORD)v116)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
      if (!v126)
        goto LABEL_84;
      v21 = (_QWORD **)__p;
      if (__p)
      {
        v22 = v125;
        v23 = __p;
        if (v125 != __p)
        {
          do
            v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          v23 = __p;
        }
        v125 = v21;
        operator delete(v23);
      }
      v24 = v122;
      if (v122)
      {
        v25 = v123;
        v26 = v122;
        if (v123 == v122)
          goto LABEL_118;
        do
        {
          v28 = (void *)*--v25;
          v27 = v28;
          *v25 = 0;
          if (v28)
            operator delete[](v27);
        }
        while (v25 != v24);
LABEL_117:
        v26 = v122;
LABEL_118:
        v123 = v24;
        operator delete(v26);
      }
LABEL_119:
      if (v118 != v121)
        free(v118);
      goto LABEL_84;
    }
    v127 = v129;
    v128 = 0x200000000;
    *(_QWORD *)&v116 = "expected '['";
    LOWORD(v119) = 259;
    if (mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v116)
      && (*(_QWORD *)&v116 = a1,
          *((_QWORD *)&v116 + 1) = &v127,
    {
      mlir::BlockRange::BlockRange(v115, (uint64_t)v127, v128);
      mlir::OperationState::addSuccessors((unsigned int *)a2, v115[0], v115[1]);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    if (v127 != v129)
      free(v127);
    if ((v19 & 1) != 0)
      goto LABEL_83;
  }
  if (a8)
  {
    *(_QWORD *)(a2 + 248) = a7;
  }
  else
  {
    v29 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v29 + 56) == 23)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v29 + 8), (uint64_t)&v116);
      v30 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(v30 + 56) = v116;
      *(_QWORD *)(v30 + 72) = v117;
      v31 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, 0);
      *(_QWORD *)(a2 + 248) = v31;
      if (!v31)
        goto LABEL_83;
      *(_QWORD *)&v116 = "expected '>' to close properties";
      LOWORD(v119) = 259;
      if (!mlir::detail::Parser::parseToken(a1, 19, (uint64_t)&v116))
        goto LABEL_83;
    }
  }
  if (*(_BYTE *)(a5 + 16))
  {
    mlir::OperationState::addRegions((char *)a2, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    v32 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v32 + 56) == 21)
    {
      while (1)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v32 + 8), (uint64_t)&v116);
        v33 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)(v33 + 56) = v116;
        *(_QWORD *)(v33 + 72) = v117;
        v34 = operator new(0x18uLL);
        v35 = mlir::Region::Region(v34, *(mlir::Operation **)(a1 + 416));
        *(_QWORD *)&v116 = v35;
        v36 = *(unsigned int *)(a2 + 232);
        if (v36 >= *(unsigned int *)(a2 + 236))
        {
          llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<mlir::Region*>(a2 + 224, &v116);
          v37 = *(_QWORD *)(a2 + 224);
          v38 = *(unsigned int *)(a2 + 232);
        }
        else
        {
          v37 = *(_QWORD *)(a2 + 224);
          *(_QWORD *)(v37 + 8 * v36) = v35;
          v38 = v36 + 1;
          *(_DWORD *)(a2 + 232) = v38;
        }
        v32 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v32 + 56) != 16)
        {
          *(_QWORD *)&v116 = "expected ')' to end region list";
          LOWORD(v119) = 259;
          if (!mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v116))
            goto LABEL_83;
          break;
        }
      }
    }
  }
  if (*(_BYTE *)(a6 + 16))
  {
    v40 = *(const void **)a6;
    v39 = *(_QWORD *)(a6 + 8);
    *(_QWORD *)(a2 + 192) = 0;
    v41 = *(unsigned int *)(a2 + 120);
    if (v39 + v41 > (unint64_t)*(unsigned int *)(a2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), v39 + v41, 16);
      LODWORD(v41) = *(_DWORD *)(a2 + 120);
    }
    if (v39)
    {
      memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v41), v40, 16 * v39);
      LODWORD(v41) = *(_DWORD *)(a2 + 120);
    }
    *(_DWORD *)(a2 + 120) = v41 + v39;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 20
         && !mlir::detail::Parser::parseAttributeDict((mlir::detail::Parser *)a1, (mlir::NamedAttrList *)(a2 + 112)))
  {
    goto LABEL_83;
  }
  if ((_BYTE)v110)
  {
    EncodedSourceLocation = *(_QWORD *)a2;
    goto LABEL_57;
  }
  *(_QWORD *)&v116 = "expected ':' followed by operation type";
  LOWORD(v119) = 259;
  if (!mlir::detail::Parser::parseToken(a1, 15, (uint64_t)&v116)
    || (Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(a1 + 8) + 56)),
        EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, Loc),
        (v62 = mlir::detail::Parser::parseType((mlir::detail::Parser *)a1)) == 0))
  {
LABEL_83:
    v20 = 0;
    goto LABEL_84;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v62 + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    v127 = "expected function type";
    v130 = 259;
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v127, (uint64_t)&v116);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
    if ((_QWORD)v116)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
    if (!v126)
      goto LABEL_84;
    v63 = (_QWORD **)__p;
    if (__p)
    {
      v64 = v125;
      v65 = __p;
      if (v125 != __p)
      {
        do
          v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
        while (v64 != v63);
        v65 = __p;
      }
      v125 = v63;
      operator delete(v65);
    }
    v24 = v122;
    if (v122)
    {
      v66 = v123;
      v26 = v122;
      if (v123 == v122)
        goto LABEL_118;
      do
      {
        v69 = (void *)*--v66;
        v68 = v69;
        *v66 = 0;
        if (v69)
          operator delete[](v68);
      }
      while (v66 != v24);
      goto LABEL_117;
    }
    goto LABEL_119;
  }
  LOBYTE(v110) = 1;
  v109 = v62;
LABEL_57:
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v109);
  v45 = v44;
  v46 = 8 * v44;
  v47 = *(unsigned int *)(a2 + 72);
  v48 = v47 + ((8 * v44) >> 3);
  if (v48 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v48, 8);
    LODWORD(v47) = *(_DWORD *)(a2 + 72);
  }
  if (v45)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v47), Results, v46);
    LODWORD(v47) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v47 + (v46 >> 3);
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v109);
  v51 = v50;
  v52 = *(const char **)(a3 + 8);
  if (v50 != v52)
  {
    v70 = v52 == (const char *)1;
    v71 = "s";
    if (v70)
      v71 = "";
    v72 = *v71;
    v127 = "expected ";
    v130 = 259;
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v127, (uint64_t)&v116);
    if ((_QWORD)v116)
    {
      v73 = *(const char **)(a3 + 8);
      v111 = 5;
      v112 = v73;
      v74 = &v111;
      v75 = (char *)v118;
      if (v119 >= v120)
      {
        v98 = v119 + 1;
        if (v118 <= &v111 && (char *)v118 + 24 * v119 > (char *)&v111)
        {
          v104 = (char *)&v111 - (_BYTE *)v118;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v98, 24);
          v75 = (char *)v118;
          v74 = (int *)((char *)v118 + v104);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v98, 24);
          v74 = &v111;
          v75 = (char *)v118;
        }
      }
      v76 = &v75[24 * v119];
      v77 = *(_OWORD *)v74;
      *((_QWORD *)v76 + 2) = *((_QWORD *)v74 + 2);
      *(_OWORD *)v76 = v77;
      v78 = ++v119;
      if ((_QWORD)v116)
      {
        v111 = 3;
        v112 = " operand type";
        v113 = 13;
        v79 = &v111;
        v80 = (char *)v118;
        if (v78 >= v120)
        {
          v99 = v78 + 1;
          v100 = (char *)v118 + 24 * v78 > (char *)&v111;
          if (v118 <= &v111 && v100)
          {
            v105 = (char *)&v111 - (_BYTE *)v118;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v99, 24);
            v80 = (char *)v118;
            v79 = (int *)((char *)v118 + v105);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v99, 24);
            v79 = &v111;
            v80 = (char *)v118;
          }
        }
        v81 = &v80[24 * v119];
        v82 = *(_OWORD *)v79;
        *((_QWORD *)v81 + 2) = *((_QWORD *)v79 + 2);
        *(_OWORD *)v81 = v82;
        ++v119;
        if ((_QWORD)v116)
        {
          mlir::Diagnostic::operator<<((uint64_t)&v116 + 8, v72);
          if ((_QWORD)v116)
          {
            v111 = 3;
            v112 = " but had ";
            v113 = 9;
            v83 = &v111;
            v84 = (char *)v118;
            if (v119 >= v120)
            {
              v101 = v119 + 1;
              if (v118 <= &v111 && (char *)v118 + 24 * v119 > (char *)&v111)
              {
                v106 = (char *)&v111 - (_BYTE *)v118;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v101, 24);
                v84 = (char *)v118;
                v83 = (int *)((char *)v118 + v106);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v101, 24);
                v83 = &v111;
                v84 = (char *)v118;
              }
            }
            v85 = &v84[24 * v119];
            v86 = *(_OWORD *)v83;
            *((_QWORD *)v85 + 2) = *((_QWORD *)v83 + 2);
            *(_OWORD *)v85 = v86;
            v87 = ++v119;
            if ((_QWORD)v116)
            {
              v111 = 5;
              v112 = v51;
              v88 = &v111;
              v89 = (char *)v118;
              if (v87 >= v120)
              {
                v102 = v87 + 1;
                v103 = (char *)v118 + 24 * v87 > (char *)&v111;
                if (v118 <= &v111 && v103)
                {
                  v107 = (char *)&v111 - (_BYTE *)v118;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v102, 24);
                  v89 = (char *)v118;
                  v88 = (int *)((char *)v118 + v107);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v102, 24);
                  v88 = &v111;
                  v89 = (char *)v118;
                }
              }
              v90 = &v89[24 * v119];
              v91 = *(_OWORD *)v88;
              *((_QWORD *)v90 + 2) = *((_QWORD *)v88 + 2);
              *(_OWORD *)v90 = v91;
              ++v119;
            }
          }
        }
      }
    }
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
    if ((_QWORD)v116)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
    if (!v126)
      goto LABEL_84;
    v92 = (_QWORD **)__p;
    if (__p)
    {
      v93 = v125;
      v94 = __p;
      if (v125 != __p)
      {
        do
          v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
        while (v93 != v92);
        v94 = __p;
      }
      v125 = v92;
      operator delete(v94);
    }
    v24 = v122;
    if (v122)
    {
      v95 = v123;
      v26 = v122;
      if (v123 == v122)
        goto LABEL_118;
      do
      {
        v97 = (void *)*--v95;
        v96 = v97;
        *v95 = 0;
        if (v97)
          operator delete[](v96);
      }
      while (v95 != v24);
      goto LABEL_117;
    }
    goto LABEL_119;
  }
  if ((_DWORD)v50)
  {
    v53 = (uint64_t *)Inputs;
    v54 = 0;
    v55 = 32 * v50;
    do
    {
      v56 = (_OWORD *)(*(_QWORD *)a3 + v54);
      v57 = v56[1];
      v108[0] = *v56;
      v108[1] = v57;
      v59 = *(unsigned int *)(a2 + 24);
      if (v59 >= *(unsigned int *)(a2 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v59 + 1, 8);
        v59 = *(unsigned int *)(a2 + 24);
      }
      *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v59) = v58;
      v60 = *(_DWORD *)(a2 + 24) + 1;
      *(_DWORD *)(a2 + 24) = v60;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v60 - 8))
        goto LABEL_83;
      v54 += 32;
      ++v53;
    }
    while (v55 != v54);
  }
  v20 = 1;
LABEL_84:
  if (v131 != v133)
    free(v131);
  return v20;
}

uint64_t `anonymous namespace'::OperationParser::parseOptionalSSAUseList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _OWORD *v17;
  __int128 v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  unint64_t v23;
  BOOL v24;
  char *v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(v4 + 56);
  v5 = v4 + 56;
  if (v6 != 6 && !mlir::Token::isCodeCompletionFor(v5, 6))
    return 1;
  v26 = 0uLL;
  v27 = 0;
  {
    v7 = *(unsigned int *)(a2 + 8);
    v8 = *(_QWORD *)a2;
    v9 = (char *)&v26;
    if (v7 >= *(_DWORD *)(a2 + 12))
    {
      v23 = v7 + 1;
      v24 = v8 + 32 * v7 > (unint64_t)&v26;
      if (v8 <= (unint64_t)&v26 && v24)
      {
        v25 = (char *)&v26 - v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v23, 32);
        v8 = *(_QWORD *)a2;
        v9 = &v25[*(_QWORD *)a2];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v23, 32);
        v8 = *(_QWORD *)a2;
        v9 = (char *)&v26;
      }
    }
    v10 = (_OWORD *)(v8 + 32 * *(unsigned int *)(a2 + 8));
    v11 = *((_OWORD *)v9 + 1);
    *v10 = *(_OWORD *)v9;
    v10[1] = v11;
    ++*(_DWORD *)(a2 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v12 + 56) == 16)
    {
      while (1)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v12 + 8), (uint64_t)&v26);
        v13 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)(v13 + 56) = v26;
        *(_QWORD *)(v13 + 72) = v27;
        v26 = 0uLL;
        v27 = 0;
          return 0;
        v14 = *(unsigned int *)(a2 + 8);
        v15 = *(_QWORD *)a2;
        if (v14 >= *(_DWORD *)(a2 + 12))
        {
          v19 = v14 + 1;
          v20 = v15 + 32 * v14 > (unint64_t)&v26;
          if (v15 <= (unint64_t)&v26 && v20)
          {
            v21 = (char *)&v26 - v15;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v19, 32);
            v15 = *(_QWORD *)a2;
            v16 = &v21[*(_QWORD *)a2];
            goto LABEL_9;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v19, 32);
          v15 = *(_QWORD *)a2;
        }
        v16 = (char *)&v26;
LABEL_9:
        v17 = (_OWORD *)(v15 + 32 * *(unsigned int *)(a2 + 8));
        v18 = *((_OWORD *)v16 + 1);
        *v17 = *(_OWORD *)v16;
        v17[1] = v18;
        ++*(_DWORD *)(a2 + 8);
        v12 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v12 + 56) != 16)
          return 1;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>(void ***a1)
{
  unsigned __int8 v1;
  void **v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void ***v12;
  const char *v13;
  unint64_t v14;

  if ((v1 & 1) == 0)
  {
    v12 = a1;
    a1 = v12;
    if (v4)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v14 = 84;
      v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5)
        v6 = v5;
      else
        v6 = v14;
      v7 = &v13[v6];
      v8 = v14 - v6;
      if (v14 - v6 >= 0x12)
        v9 = 18;
      else
        v9 = v14 - v6;
      v10 = v8 - v9;
      if (v10 >= v10 - 1)
        v11 = v10 - 1;
      else
        v11 = v10;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      a1 = v12;
    }
  }
  v2 = *a1;
  if (v2[2] == &mlir::detail::TypeIDResolver<void,void>::id)
    return 1;
  else
    return (*((uint64_t (**)(void **, uint64_t))*v2 + 4))(v2, mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id);
}

uint64_t `anonymous namespace'::OperationParser::parseRegion(_anonymous_namespace_::OperationParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  mlir::AsmParserState *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  mlir::Block *v14[2];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 1);
  v12 = *(_OWORD *)(v6 + 56);
  v13 = *(_QWORD *)(v6 + 72);
  v14[0] = (mlir::Block *)"expected '{' to begin a region";
  v16 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 20, (uint64_t)v14))
    return 0;
  v7 = *(mlir::AsmParserState **)(*((_QWORD *)a1 + 1) + 128);
  if (v7)
    mlir::AsmParserState::startRegionDefinition(v7);
  if (a4 || (v8 = *((_QWORD *)a1 + 1), *(_DWORD *)(v8 + 56) != 27))
  {
    mlir::Token::getLoc((mlir::Token *)&v12);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v8 + 8), (uint64_t)v14);
  v10 = *((_QWORD *)a1 + 1);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)v14;
  *(_QWORD *)(v10 + 72) = v15;
  v11 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 128);
  if (v11)
    mlir::AsmParserState::finalizeRegionDefinition(v11);
  return 1;
}

unint64_t `anonymous namespace'::OperationParser::resolveSSAUse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  const char *v11;
  uint64_t EncodedSourceLocation;
  mlir::OpResult *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const void ***v19;
  uint64_t v20;
  __int128 v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  unint64_t *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  unint64_t v52;
  BOOL v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  _QWORD **v65;
  char v66;
  unint64_t v67[4];
  __int16 v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  __int16 v73;
  _QWORD v74[12];
  void *v75;
  _QWORD *v76;
  void *__p;
  _QWORD **v78;
  char v79;
  const void **v80;
  mlir::OpResult *v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84[3];

  v84[2] = *MEMORY[0x1E0C80C00];
  v55 = a3;
  v7 = v6;
  v8 = *(unsigned int *)(a2 + 24);
  v9 = *(_DWORD *)(v6 + 8);
  if (v9 <= v8)
  {
    v30 = (v8 + 1);
    if (v9 != (_DWORD)v30)
    {
      if (v9 <= v30)
      {
        if (*(_DWORD *)(v6 + 12) < v30)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v30, 16);
          v9 = *(_DWORD *)(v7 + 8);
        }
        if (v9 != (_DWORD)v30)
          bzero((void *)(*(_QWORD *)v7 + 16 * v9), 16 * (v30 - v9));
      }
      *(_DWORD *)(v7 + 8) = v30;
    }
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)v6 + 16 * v8);
    if (v10)
    {
      if (a3 != (*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v11 = *(const char **)a2;
        v67[0] = (unint64_t)"use of value '";
        v68 = 259;
        EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v11);
        mlir::emitError(EncodedSourceLocation, (uint64_t)v67, (uint64_t)&v69);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
          mlir::InFlightDiagnostic::abandon(&v69);
        v84[0] = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v69)
        {
          v83 = 261;
          v13 = *(mlir::OpResult **)(a2 + 16);
          v80 = *(const void ***)(a2 + 8);
          v81 = v13;
          mlir::Diagnostic::operator<<((uint64_t)&v70, &v80);
          mlir::Diagnostic::append<char const(&)[43],mlir::Type &,char const(&)[5],mlir::Type>((uint64_t)&v70, "' expects different type than prior uses: ", &v55, " vs ", v84);
        }
        v14 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, *(const char **)(*(_QWORD *)v7 + 16 * *(unsigned int *)(a2 + 24) + 8));
        v15 = mlir::Diagnostic::attachNote(&v70, v14, 1);
        v16 = v15 + 16;
        v17 = *(_QWORD *)(v15 + 16);
        LODWORD(v80) = 3;
        v81 = (mlir::OpResult *)"prior use here";
        v82 = 14;
        v18 = *(unsigned int *)(v15 + 24);
        v19 = &v80;
        if (v18 >= *(_DWORD *)(v15 + 28))
        {
          v52 = v18 + 1;
          v53 = v17 + 24 * v18 > (unint64_t)&v80;
          if (v17 <= (unint64_t)&v80 && v53)
          {
            v54 = (char *)&v80 - v17;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(v15 + 32), v52, 24);
            v17 = *(_QWORD *)(v15 + 16);
            v19 = (const void ***)&v54[v17];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(v15 + 32), v52, 24);
            v17 = *(_QWORD *)(v15 + 16);
            v19 = &v80;
          }
        }
        v20 = v17 + 24 * *(unsigned int *)(v15 + 24);
        v21 = *(_OWORD *)v19;
        *(_QWORD *)(v20 + 16) = v19[2];
        *(_OWORD *)v20 = v21;
        ++*(_DWORD *)(v15 + 24);
        if (v69)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
        if (!v79)
          return 0;
        v22 = (_QWORD **)__p;
        if (__p)
        {
          v23 = v78;
          v24 = __p;
          if (v78 != __p)
          {
            do
              v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
            while (v23 != v22);
            v24 = __p;
          }
          v78 = v22;
          operator delete(v24);
        }
        v25 = v75;
        if (v75)
        {
          v26 = v76;
          v27 = v75;
          if (v76 != v75)
          {
            do
            {
              v29 = (void *)*--v26;
              v28 = v29;
              *v26 = 0;
              if (v29)
                operator delete[](v28);
            }
            while (v26 != v25);
            v27 = v75;
          }
          v76 = v25;
          operator delete(v27);
        }
        v50 = v72;
        if (v72 == v74)
          return 0;
        goto LABEL_58;
      }
      goto LABEL_37;
    }
  }
  if (**(_QWORD **)v7)
  {
    v80 = **(const void ****)v7;
    v69 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), (unint64_t *)&v80, &v69) & 1) == 0)
    {
      v40 = *(const char **)a2;
      v69 = "reference to invalid result number";
      v73 = 259;
      v41 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v40);
      mlir::emitError(v41, (uint64_t)&v69, (uint64_t)v59);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(v59);
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      if (!v66)
        return 0;
      v42 = (_QWORD **)v64;
      if (v64)
      {
        v43 = v65;
        v44 = v64;
        if (v65 != v64)
        {
          do
            v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          v44 = v64;
        }
        v65 = v42;
        operator delete(v44);
      }
      v45 = v62;
      if (v62)
      {
        v46 = v63;
        v47 = v62;
        if (v63 != v62)
        {
          do
          {
            v49 = (void *)*--v46;
            v48 = v49;
            *v46 = 0;
            if (v49)
              operator delete[](v48);
          }
          while (v46 != v45);
          v47 = v62;
        }
        v63 = v45;
        operator delete(v47);
      }
      v50 = v60;
      if (v60 == &v61)
        return 0;
LABEL_58:
      free(v50);
      return 0;
    }
  }
  v31 = *(const char **)a2;
  v58 = a3;
  mlir::OperationName::OperationName(&v57, "builtin.unrealized_conversion_cast", 34, ***(_QWORD ***)(a1 + 8));
  v32 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(a1 + 8) + 8, v31);
  v33 = v57;
  mlir::ValueRange::ValueRange((unint64_t *)&v80, (uint64_t)&v58, 1uLL);
  mlir::ValueRange::ValueRange(v67, 0, 0);
  v69 = &v71;
  v70 = 0x400000000;
  v74[5] = 4;
  mlir::BlockRange::BlockRange(v84, 0, 0);
  v34 = mlir::Operation::create(v32, v33, (uint64_t)v80, v81, v67[0], v67[1], (mlir::NamedAttrList *)&v69, 0, v84[0], v84[1], 0);
  if (v69 != &v71)
    free(v69);
  v10 = v34 - 16;
  v56 = v10;
  v69 = 0;
  v35 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), &v56, &v69);
  v36 = v69;
  if ((v35 & 1) == 0)
  {
    v36 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>(a1 + 336, (uint64_t)&v56, &v56, v69);
    *v36 = v56;
    v36[1] = 0;
  }
  v36[1] = v31;
  v37 = *(const char **)a2;
  v38 = (unint64_t *)(*(_QWORD *)v7 + 16 * *(unsigned int *)(a2 + 24));
  *v38 = v10;
  v38[1] = (unint64_t)v37;
LABEL_37:
  v39 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
  if (v39)
    mlir::AsmParserState::addUses(v39, v10, (_BYTE **)a2, 1);
  return v10;
}

uint64_t `anonymous namespace'::OperationParser::parseSSAUse(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  mlir::detail::OpResultImpl *v17;
  int v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  mlir::detail::OpResultImpl *v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  _WORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  void *v35;
  uint64_t *v36;
  BOOL v37;
  int v38;
  unint64_t v39;
  uint64_t v42;
  mlir::Token *v43;
  int v44;
  unint64_t HashIdentifierNumber;
  uint64_t v46;
  uint64_t v47;
  _QWORD **v49;
  _QWORD **v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  void *v56;
  _QWORD **v57;
  _QWORD **v58;
  void *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  mlir::detail::OpResultImpl *v63;
  uint64_t v64;
  void *v65[2];
  uint64_t v66;
  __int16 v67;
  void *__p[2];
  void *v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int v77;
  void **v78;
  void *v79;
  _QWORD *v80;
  void *v81;
  _QWORD **v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == 2)
  {
    v65[0] = 0;
    v65[1] = 0;
    v66 = 0;
    DWORD2(v71) = 0;
    v75 = 0;
    v76 = 0;
    v77 = 1;
    v73 = 0;
    v74 = 0;
    v72 = 0;
    *(_QWORD *)&v71 = &unk_1E0E22B10;
    v78 = v65;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v71, 0, 0, 0);
    v5 = *(_DWORD *)(a1 + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v64 = v6 + 88 * v5;
      while (1)
      {
        v7 = *(uint64_t ***)v6;
        v8 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v8)
          break;
        v9 = *(uint64_t ***)v6;
        v14 = &v7[v8];
        if (v7 != v14)
          goto LABEL_18;
LABEL_4:
        v6 += 88;
        if (v6 == v64)
          goto LABEL_61;
      }
      v9 = *(uint64_t ***)v6;
      if (*v7)
        v10 = *v7 + 1 == 0;
      else
        v10 = 1;
      if (v10)
      {
        do
        {
          v12 = v9[1];
          ++v9;
          v11 = v12;
          if (v12)
            v13 = v11 + 1 == 0;
          else
            v13 = 1;
        }
        while (v13);
      }
      v14 = &v7[v8];
      if (v9 == v14)
        goto LABEL_4;
LABEL_18:
      v15 = *v9;
      while (!*((_DWORD *)v15 + 4))
      {
        do
        {
LABEL_46:
          v36 = v9[1];
          ++v9;
          v15 = v36;
          if (v36)
            v37 = v15 + 1 == 0;
          else
            v37 = 1;
        }
        while (v37);
        if (v9 == v14)
          goto LABEL_4;
      }
      v16 = *(_QWORD *)v15[1];
      if ((~*(_DWORD *)(v16 + 8) & 7) != 0)
        v17 = *(mlir::detail::OpResultImpl **)v15[1];
      else
        v17 = 0;
      if (v17)
      {
        v18 = *(_DWORD *)(a1 + 352);
        if (v18)
        {
          v19 = *(_QWORD *)(a1 + 336);
          if ((v20 & 1) == 0)
          {
            v63 = v17;
            v17 = v63;
            if (v38)
            {
              v39 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v39 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v39;
              v17 = v63;
            }
          }
          v21 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v17) ^ ((unint64_t)v17 >> 32));
          v22 = 0x9DDFEA08EB382D69 * (((unint64_t)v17 >> 32) ^ (v21 >> 47) ^ v21);
          v23 = (-348639895 * ((v22 >> 47) ^ v22)) & (v18 - 1);
          v24 = *(mlir::detail::OpResultImpl **)(v19 + 16 * v23);
          if (v24 == v17)
            goto LABEL_40;
          v25 = 1;
          while (v24 != (mlir::detail::OpResultImpl *)-4096)
          {
            v26 = v23 + v25++;
            v23 = v26 & (v18 - 1);
            v24 = *(mlir::detail::OpResultImpl **)(v19 + 16 * v23);
            if (v24 == v17)
              goto LABEL_40;
          }
        }
        v70 = *(_QWORD *)(mlir::detail::OpResultImpl::getOwner(v17) + 48);
        mlir::OperationName::print((mlir::OperationName *)&v70, (llvm::raw_ostream *)&v71);
        if ((char *)v73 - v74 > (char *)1)
        {
          *(_WORD *)v74 = 8250;
          v74 += 2;
          goto LABEL_40;
        }
        v29 = (llvm::raw_ostream *)&v71;
        goto LABEL_37;
      }
      v27 = (_DWORD *)v74;
      if ((char *)v73 - v74 > (char *)4)
      {
        *(_BYTE *)(v74 + 4) = 35;
        *v27 = 543650401;
        v74 += 5;
        v29 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v71, *(unsigned int *)(v16 + 24));
        v30 = (_WORD *)*((_QWORD *)v29 + 4);
        if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 1uLL)
        {
LABEL_38:
          *v30 = 8250;
          *((_QWORD *)v29 + 4) += 2;
          goto LABEL_40;
        }
      }
      else
      {
        v28 = llvm::raw_ostream::write((llvm::raw_ostream *)&v71, "arg #", 5uLL);
        v29 = llvm::raw_ostream::operator<<(v28, *(unsigned int *)(v16 + 24));
        v30 = (_WORD *)*((_QWORD *)v29 + 4);
        if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 1uLL)
          goto LABEL_38;
      }
LABEL_37:
      llvm::raw_ostream::write(v29, ": ", 2uLL);
LABEL_40:
      v70 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::Type::print((llvm::raw_ostream *)&v70, (llvm::raw_ostream *)&v71);
      if (*((_DWORD *)v15 + 4) >= 2u)
      {
        v31 = (_DWORD *)v74;
        if ((char *)v73 - v74 > (char *)4)
        {
          *(_BYTE *)(v74 + 4) = 46;
          *v31 = 774774828;
          v74 += 5;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v71, ", ...", 5uLL);
        }
      }
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136);
      v33 = *v15;
      v34 = v78;
      v35 = v78[2];
      *(_OWORD *)__p = *(_OWORD *)v78;
      v69 = v35;
      v78[1] = 0;
      v34[2] = 0;
      *v34 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v32 + 32))(v32, v15 + 5, v33, __p);
      if (SHIBYTE(v69) < 0)
        operator delete(__p[0]);
      goto LABEL_46;
    }
LABEL_61:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v71);
    if (SHIBYTE(v66) < 0)
      operator delete(v65[0]);
    return 0;
  }
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v4 + 64);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(a1 + 8) + 56));
  *(_QWORD *)&v71 = "expected SSA operand";
  LOWORD(v74) = 259;
  if (!mlir::detail::Parser::parseToken(a1, 6, (uint64_t)&v71))
    return 0;
  v42 = *(_QWORD *)(a1 + 8);
  v44 = *(_DWORD *)(v42 + 56);
  v43 = (mlir::Token *)(v42 + 56);
  if (v44 != 5)
    return 1;
  if ((a3 & 1) != 0)
  {
    HashIdentifierNumber = mlir::Token::getHashIdentifierNumber(v43);
    if ((HashIdentifierNumber & 0xFF00000000) != 0)
    {
      *(_DWORD *)(a2 + 24) = HashIdentifierNumber;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v71);
      v46 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(v46 + 56) = v71;
      *(_QWORD *)(v46 + 72) = v72;
      return 1;
    }
    v65[0] = "invalid SSA value result number";
    v67 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v65, &v71);
    v47 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
    if ((_QWORD)v71)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
    if (v83)
    {
      v57 = (_QWORD **)v81;
      if (v81)
      {
        v58 = v82;
        v59 = v81;
        if (v82 != v81)
        {
          do
            v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          v59 = v81;
        }
        v82 = v57;
        operator delete(v59);
      }
      v52 = v79;
      if (!v79)
        goto LABEL_96;
      v60 = v80;
      v54 = v79;
      if (v80 == v79)
      {
LABEL_95:
        v80 = v52;
        operator delete(v54);
LABEL_96:
        if (v73 != &v75)
          free(v73);
        return v47;
      }
      do
      {
        v62 = (void *)*--v60;
        v61 = v62;
        *v60 = 0;
        if (v62)
          operator delete[](v61);
      }
      while (v60 != v52);
LABEL_94:
      v54 = v79;
      goto LABEL_95;
    }
  }
  else
  {
    v65[0] = "result number not allowed in argument list";
    v67 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v65, &v71);
    v47 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
    if ((_QWORD)v71)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
    if (v83)
    {
      v49 = (_QWORD **)v81;
      if (v81)
      {
        v50 = v82;
        v51 = v81;
        if (v82 != v81)
        {
          do
            v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          v51 = v81;
        }
        v82 = v49;
        operator delete(v51);
      }
      v52 = v79;
      if (!v79)
        goto LABEL_96;
      v53 = v80;
      v54 = v79;
      if (v80 == v79)
        goto LABEL_95;
      do
      {
        v56 = (void *)*--v53;
        v55 = v56;
        *v53 = 0;
        if (v56)
          operator delete[](v55);
      }
      while (v53 != v52);
      goto LABEL_94;
    }
  }
  return v47;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 16 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
LABEL_5:
      *a3 = v13;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 16 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_5;
      }
      result = 0;
      if (v16)
        v13 = v16;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseSuccessors(llvm::SmallVectorImpl<mlir::Block *> &)::$_0>(uint64_t a1)
{
  _anonymous_namespace_::OperationParser *v2;
  uint64_t v3;
  uint64_t v4;
  mlir::Block *v5;
  uint64_t v6;
  mlir::Block *v8;

  v2 = *(_anonymous_namespace_::OperationParser **)a1;
  v8 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v8;
  v6 = *(unsigned int *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v4 + 16), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  return v3;
}

uint64_t `anonymous namespace'::OperationParser::parseSuccessor(_anonymous_namespace_::OperationParser *this, mlir::Block **a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t Loc;
  uint64_t BlockInfoByName;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  _OWORD *v53;
  const char *v54;
  __int16 v55;
  __int128 v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = *((_DWORD *)v3 + 14);
  if (v4 == 7)
  {
    v12 = v3[8];
    v13 = v3[9];
    Loc = mlir::Token::getLoc((mlir::Token *)(v3 + 7));
    *(_QWORD *)&v56 = Loc;
    v16 = *(_OWORD **)BlockInfoByName;
    if (!*(_QWORD *)BlockInfoByName)
    {
      v16 = operator new(0x48uLL);
      *v16 = 0u;
      v16[1] = 0u;
      *((_QWORD *)v16 + 4) = v16 + 2;
      *((_QWORD *)v16 + 5) = v16 + 2;
      *((_QWORD *)v16 + 7) = 0;
      *((_QWORD *)v16 + 8) = 0;
      *((_QWORD *)v16 + 6) = 0;
      *(_QWORD *)BlockInfoByName = v16;
      *(_QWORD *)(BlockInfoByName + 8) = Loc;
      v17 = *((_QWORD *)this + 34) + 24 * *((unsigned int *)this + 70);
      v18 = *(_QWORD *)(v17 - 24);
      v19 = *(_DWORD *)(v17 - 8);
      if (!v19)
        goto LABEL_65;
      v20 = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      v21 = (_QWORD *)(v18 + 16 * v20);
      v22 = (void *)*v21;
      if ((_OWORD *)*v21 != v16)
      {
        v23 = 0;
        v24 = 1;
        while (v22 != (void *)-4096)
        {
          if (v23)
            v25 = 0;
          else
            v25 = v22 == (void *)-8192;
          if (v25)
            v23 = v21;
          v26 = v20 + v24++;
          v20 = v26 & (v19 - 1);
          v21 = (_QWORD *)(v18 + 16 * v20);
          v22 = (void *)*v21;
          if ((_OWORD *)*v21 == v16)
            goto LABEL_47;
        }
        if (v23)
          v42 = v23;
        else
          v42 = v21;
        v43 = *(_DWORD *)(v17 - 16);
        if (4 * v43 + 4 < 3 * v19)
        {
          if (v19 + ~v43 - *(_DWORD *)(v17 - 12) > v19 >> 3)
          {
            v36 = *v42;
            ++*(_DWORD *)(v17 - 16);
            if (v36 == -4096)
            {
LABEL_46:
              *v42 = v16;
              v42[1] = Loc;
              v16 = *(_OWORD **)BlockInfoByName;
              goto LABEL_47;
            }
LABEL_45:
            --*(_DWORD *)(v17 - 12);
            goto LABEL_46;
          }
          v53 = v16;
LABEL_67:
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v17 - 24, v19);
          v44 = *(_QWORD *)(v17 - 24);
          v45 = *(_DWORD *)(v17 - 8) - 1;
          v46 = v45 & ((v53 >> 4) ^ (v53 >> 9));
          v42 = (_QWORD *)(v44 + 16 * v46);
          v47 = *v42;
          v16 = v53;
          if ((_OWORD *)*v42 == v53)
          {
LABEL_68:
            ++*(_DWORD *)(v17 - 16);
            if (v53 == (_OWORD *)-4096)
              goto LABEL_46;
          }
          else
          {
            v48 = 0;
            v49 = 1;
            while (v47 != -4096)
            {
              if (v48)
                v50 = 0;
              else
                v50 = v47 == -8192;
              if (v50)
                v48 = v42;
              v51 = v46 + v49++;
              v46 = v51 & v45;
              v42 = (_QWORD *)(v44 + 16 * (v51 & v45));
              v47 = *v42;
              if ((_OWORD *)*v42 == v53)
                goto LABEL_68;
            }
            if (v48)
              v42 = v48;
            v52 = *v42;
            ++*(_DWORD *)(v17 - 16);
            if (v52 == -4096)
              goto LABEL_46;
          }
          goto LABEL_45;
        }
LABEL_65:
        v53 = v16;
        v19 *= 2;
        goto LABEL_67;
      }
    }
LABEL_47:
    v37 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
    if (v37)
    {
      mlir::AsmParserState::addUses(v37, (uint64_t)v16, (_BYTE **)&v56, 1);
      v16 = *(_OWORD **)BlockInfoByName;
    }
    *a2 = (mlir::Block *)v16;
    mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v56);
    v38 = *((_QWORD *)this + 1);
    *(_OWORD *)(v38 + 56) = v56;
    *(_QWORD *)(v38 + 72) = v57;
    return 1;
  }
  if (v4 == 2)
  {
    v5 = v3[9];
    if (!v5 || v5 == 1 && *(_BYTE *)v3[8] == 94)
    {
      v6 = *((_QWORD *)this + 26) + 24 * *((unsigned int *)this + 54);
      if (*(_DWORD *)(v6 - 16))
      {
        v7 = *(uint64_t **)(v6 - 24);
        v8 = *(unsigned int *)(v6 - 8);
        if ((_DWORD)v8)
        {
          v9 = 32 * v8;
          for (i = v7; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; i += 4)
          {
            v9 -= 32;
            if (!v9)
              return 0;
          }
        }
        else
        {
          i = v7;
        }
        v39 = &v7[4 * v8];
        if (i != v39)
        {
          v40 = *i;
          while (1)
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 40))(*(_QWORD *)(*((_QWORD *)this + 1) + 136), v40, i[1]);
            i += 4;
            if (i == v39)
              break;
            while (1)
            {
              v40 = *i;
              if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
                break;
              i += 4;
              if (i == v39)
                return 0;
            }
            v27 = 0;
            if (i == v39)
              return v27;
          }
        }
      }
    }
    return 0;
  }
  else
  {
    v54 = "expected block name";
    v55 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v54, &v56);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v56);
    if ((_QWORD)v56)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v56);
    if (v64)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v63;
        v30 = __p;
        if (v63 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v63 = v28;
        operator delete(v30);
      }
      v31 = v60;
      if (v60)
      {
        v32 = v61;
        v33 = v60;
        if (v61 != v60)
        {
          do
          {
            v35 = (void *)*--v32;
            v34 = v35;
            *v32 = 0;
            if (v35)
              operator delete[](v34);
          }
          while (v32 != v31);
          v33 = v60;
        }
        v61 = v31;
        operator delete(v33);
      }
      if (v58 != &v59)
        free(v58);
    }
  }
  return v27;
}

uint64_t `anonymous namespace'::OperationParser::getBlockInfoByName(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  llvm *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  _OWORD *buffer;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  void *v23;
  uint64_t v24;
  llvm *v25;
  _OWORD *v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;

  *(_QWORD *)&v32 = a3;
  *((_QWORD *)&v32 + 1) = a4;
  v4 = a1 + 24 * a2;
  v33 = 0;
  v6 = v33;
  if ((v5 & 1) == 0)
  {
    v34 = v33;
    v7 = *(_DWORD *)(v4 - 16);
    v8 = *(unsigned int *)(v4 - 8);
    if (4 * v7 + 4 >= (3 * v8))
    {
      v9 = 2 * v8;
    }
    else
    {
      v9 = *(_DWORD *)(v4 - 8);
      if ((int)v8 + ~v7 - *(_DWORD *)(v4 - 12) > v8 >> 3)
      {
        *(_DWORD *)(v4 - 16) = v7 + 1;
        if (*(_QWORD *)v6 == -1)
        {
LABEL_6:
          *(_OWORD *)v6 = v32;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
          return v6 + 16;
        }
LABEL_5:
        --*(_DWORD *)(v4 - 12);
        goto LABEL_6;
      }
    }
    v11 = *(llvm **)(v4 - 24);
    v12 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
    v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
    v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
    if ((v14 + 1) > 0x40)
      v15 = v14 + 1;
    else
      v15 = 64;
    *(_DWORD *)(v4 - 8) = v15;
    buffer = llvm::allocate_buffer(32 * v15, (std::align_val_t)8uLL);
    *(_QWORD *)(v4 - 24) = buffer;
    if (v11)
    {
      *(_QWORD *)(v4 - 16) = 0;
      v17 = *(unsigned int *)(v4 - 8);
      if ((_DWORD)v17)
      {
        v18 = buffer;
        if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
          goto LABEL_18;
        v19 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
        v18 = &buffer[2 * (v19 & 0xFFFFFFFFFFFFFFELL)];
        v20 = buffer + 2;
        v21 = v19 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          *(v20 - 2) = xmmword_181234BE0;
          *v20 = xmmword_181234BE0;
          v20 += 4;
          v21 -= 2;
        }
        while (v21);
        if (v19 != (v19 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_18:
          v22 = &buffer[2 * v17];
          do
          {
            *v18 = xmmword_181234BE0;
            v18 += 2;
          }
          while (v18 != v22);
        }
      }
      v23 = (void *)(32 * v8);
      if ((_DWORD)v8)
      {
        v24 = 32 * v8;
        v25 = v11;
        do
        {
          if (*(_QWORD *)v25 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v35 = 0;
            v26 = v35;
            *v35 = *(_OWORD *)v25;
            v26[1] = *((_OWORD *)v25 + 1);
            ++*(_DWORD *)(v4 - 16);
          }
          v25 = (llvm *)((char *)v25 + 32);
          v24 -= 32;
        }
        while (v24);
      }
      llvm::deallocate_buffer(v11, v23);
    }
    *(_QWORD *)(v4 - 16) = 0;
    v27 = *(unsigned int *)(v4 - 8);
    if ((_DWORD)v27)
    {
      v28 = buffer;
      if (((v27 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_36;
      v29 = ((v27 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v28 = &buffer[2 * (v29 & 0xFFFFFFFFFFFFFFELL)];
      v30 = buffer + 2;
      v31 = v29 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v30 - 2) = xmmword_181234BE0;
        *v30 = xmmword_181234BE0;
        v30 += 4;
        v31 -= 2;
      }
      while (v31);
      if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_36:
        do
        {
          *v28 = xmmword_181234BE0;
          v28 += 2;
        }
        while (v28 != &buffer[2 * v27]);
      }
    }
    v6 = v34;
    ++*(_DWORD *)(v4 - 16);
    if (*(_QWORD *)v6 == -1)
      goto LABEL_6;
    goto LABEL_5;
  }
  return v6 + 16;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition>>,llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,`anonymous namespace'::OperationParser::BlockDefinition>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int HashValue;
  unsigned int v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  const void *v16;
  BOOL v17;
  int v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  const void *v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t v26;
  const void *v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  int v37;
  uint64_t v38;
  const void *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  BOOL v45;
  int v46;
  void *__s1;

  if (!a2)
  {
    v15 = 0;
    result = 0;
    goto LABEL_80;
  }
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a3, *(_QWORD *)(a3 + 8));
  v9 = a2 - 1;
  v10 = *(void **)a3;
  v11 = *(_QWORD *)(a3 + 8);
  if (!v11)
  {
    if (v10 == (void *)-2)
    {
      v12 = 0;
      v20 = 1;
      v21 = HashValue & v9;
      v15 = (_QWORD *)(a1 + 32 * v21);
      v22 = (const void *)*v15;
      if (*v15 == -1)
        goto LABEL_21;
LABEL_19:
      if (v22 != (const void *)-2 && v15[1])
      {
LABEL_21:
        while (v22 != (const void *)-1)
        {
          if (v12)
            v23 = 0;
          else
            v23 = v22 == (const void *)-2;
          if (v23)
            v12 = v15;
          v24 = v20 + v21;
          ++v20;
          v21 = v24 & v9;
          v15 = (_QWORD *)(a1 + 32 * v21);
          v22 = (const void *)*v15;
          if (*v15 != -1)
            goto LABEL_19;
        }
        goto LABEL_76;
      }
    }
    else
    {
      if (v10 != (void *)-1)
      {
        v12 = 0;
        v40 = 1;
        v41 = HashValue & v9;
        v15 = (_QWORD *)(a1 + 32 * v41);
        v42 = *v15;
        if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_74;
        while (v42 != -1)
        {
          if (v12)
            v45 = 0;
          else
            v45 = v42 == -2;
          if (v45)
            v12 = v15;
          v46 = v40 + v41;
          ++v40;
          v41 = v46 & v9;
          v15 = (_QWORD *)(a1 + 32 * v41);
          v42 = *v15;
          if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
          {
LABEL_74:
            if (!v15[1])
              goto LABEL_79;
          }
        }
        goto LABEL_76;
      }
      v12 = 0;
      v32 = 1;
      v33 = HashValue & v9;
      v15 = (_QWORD *)(a1 + 32 * v33);
      v34 = *v15;
      if (*v15 == -2)
        goto LABEL_46;
LABEL_44:
      if (v34 != -1 && v15[1])
      {
LABEL_46:
        while (v34 != -1)
        {
          if (v12)
            v35 = 0;
          else
            v35 = v34 == -2;
          if (v35)
            v12 = v15;
          v36 = v32 + v33;
          ++v32;
          v33 = v36 & v9;
          v15 = (_QWORD *)(a1 + 32 * v33);
          v34 = *v15;
          if (*v15 != -2)
            goto LABEL_44;
        }
        goto LABEL_76;
      }
    }
    goto LABEL_79;
  }
  if (v10 != (void *)-2)
  {
    if (v10 != (void *)-1)
    {
      __s1 = v10;
      v12 = 0;
      v37 = 1;
      v38 = HashValue & v9;
      v15 = (_QWORD *)(a1 + 32 * v38);
      v39 = (const void *)*v15;
      if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_64;
      while (v39 != (const void *)-1)
      {
        if (v12)
          v43 = 0;
        else
          v43 = v39 == (const void *)-2;
        if (v43)
          v12 = v15;
        v44 = v37 + v38;
        ++v37;
        v38 = v44 & v9;
        v15 = (_QWORD *)(a1 + 32 * v38);
        v39 = (const void *)*v15;
        if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_64:
          if (v11 == v15[1] && !memcmp(__s1, v39, v11))
            goto LABEL_79;
        }
      }
      goto LABEL_76;
    }
    v12 = 0;
    v25 = 1;
    v26 = HashValue & v9;
    v15 = (_QWORD *)(a1 + 32 * v26);
    v27 = (const void *)*v15;
    if (*v15 == -2)
      goto LABEL_34;
LABEL_31:
    if (v27 != (const void *)-1)
    {
      if (v11 != v15[1] || (v28 = v25, v29 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v27, v11), v25 = v28, v29))
      {
LABEL_34:
        while (v27 != (const void *)-1)
        {
          if (v12)
            v30 = 0;
          else
            v30 = v27 == (const void *)-2;
          if (v30)
            v12 = v15;
          v31 = v25 + v26;
          ++v25;
          v26 = v31 & v9;
          v15 = (_QWORD *)(a1 + 32 * v26);
          v27 = (const void *)*v15;
          if (*v15 != -2)
            goto LABEL_31;
        }
        goto LABEL_76;
      }
    }
LABEL_79:
    result = 1;
    goto LABEL_80;
  }
  v12 = 0;
  v13 = 1;
  v14 = HashValue & v9;
  v15 = (_QWORD *)(a1 + 32 * v14);
  v16 = (const void *)*v15;
  if (*v15 == -1)
    goto LABEL_8;
LABEL_5:
  if (v16 == (const void *)-2 || v11 == v15[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v16, v11))
    goto LABEL_79;
LABEL_8:
  while (v16 != (const void *)-1)
  {
    if (v12)
      v17 = 0;
    else
      v17 = v16 == (const void *)-2;
    if (v17)
      v12 = v15;
    v18 = v13 + v14;
    ++v13;
    v14 = v18 & v9;
    v15 = (_QWORD *)(a1 + 32 * v14);
    v16 = (const void *)*v15;
    if (*v15 != -1)
      goto LABEL_5;
  }
LABEL_76:
  result = 0;
  if (v12)
    v15 = v12;
LABEL_80:
  *a4 = v15;
  return result;
}

_QWORD *llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_39;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_39:
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if ((_DWORD)v3)
    {
      v15 = 0;
      v16 = v11 - 1;
      v17 = v4;
      do
      {
        v24 = *(_QWORD *)v17;
        if ((*(_QWORD *)v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = ((v24 >> 4) ^ (v24 >> 9)) & v16;
          v23 = (_QWORD *)(*(_QWORD *)a1 + 16 * v25);
          v26 = *v23;
          if (v24 != *v23)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v23;
              v30 = v25 + v28++;
              v25 = v30 & v16;
              v23 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v30 & v16));
              v26 = *v23;
              if (v24 == *v23)
                goto LABEL_23;
            }
            if (v27)
              v23 = v27;
          }
LABEL_23:
          *v23 = v24;
          v23[1] = *((_QWORD *)v17 + 1);
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_18;
    v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    v20 = result + 2;
    v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -4096;
      *v20 = -4096;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v22 = &result[2 * v18];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<mlir::Region*>(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  mlir::Region *v23;
  void *v24;
  int v25;
  unsigned int v26;
  unint64_t v28;

  v28 = 0;
  v4 = (char *)(a1 + 16);
  v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v28);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = 8 * v6;
  *(_QWORD *)&v5[8 * v6] = *a2;
  v8 = *(char **)a1;
  v9 = *(char **)a1;
  if (!(_DWORD)v6)
    goto LABEL_19;
  v10 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v10 < 0xB)
  {
    v11 = v5;
LABEL_12:
    v20 = &v8[v7];
    do
    {
      v21 = *(_QWORD *)v9;
      *(_QWORD *)v9 = 0;
      v9 += 8;
      *(_QWORD *)v11 = v21;
      v11 += 8;
    }
    while (v9 != v20);
    goto LABEL_14;
  }
  v12 = v8 >= &v5[v7] || v5 >= &v8[v7];
  v11 = v5;
  if (!v12)
    goto LABEL_12;
  v13 = v10 + 1;
  v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
  v11 = &v5[v14];
  v9 = &v8[v14];
  v15 = (__int128 *)(v8 + 16);
  v16 = v5 + 16;
  v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v18 = *(v15 - 1);
    v19 = *v15;
    *(v15 - 1) = 0uLL;
    *v15 = 0uLL;
    *(v16 - 1) = v18;
    *v16 = v19;
    v15 += 2;
    v16 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_12;
LABEL_14:
  v22 = *(_QWORD *)a1 - 8;
  do
  {
    v23 = *(mlir::Region **)(v22 + v7);
    *(_QWORD *)(v22 + v7) = 0;
    if (v23)
    {
      mlir::Region::~Region(v23);
      operator delete(v24);
    }
    v7 -= 8;
  }
  while (v7);
  v9 = *(char **)a1;
LABEL_19:
  v25 = v28;
  if (v9 != v4)
    free(v9);
  *(_QWORD *)a1 = v5;
  v26 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v26;
  *(_DWORD *)(a1 + 12) = v25;
  return (uint64_t)&v5[8 * v26 - 8];
}

uint64_t `anonymous namespace'::OperationParser::parseBlock(_anonymous_namespace_::OperationParser *this, mlir::Block **a2)
{
  _OWORD *v4;
  uint64_t v5;
  char *Loc;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  _QWORD *BlockInfoByName;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _OWORD *v20;
  mlir::Block *v21;
  uint64_t *v22;
  char *v23;
  int v24;
  void *v26;
  uint64_t v27;
  int v28;
  int v31;
  int v32;
  uint64_t EncodedSourceLocation;
  const void ***v34;
  char *v35;
  char *v36;
  __int128 v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  unint64_t v46;
  int64_t v47;
  _QWORD v48[4];
  __int16 v49;
  const void **v50;
  const char *v51;
  uint64_t v52;
  __int16 v53;
  BOOL v54;
  const char *v55;
  _QWORD v56[2];
  void *v57;
  unsigned int v58;
  unsigned int v59;
  _BYTE v60[96];
  void *v61;
  _QWORD *v62;
  void *__p;
  _QWORD **v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *((_QWORD *)this + 1);
  if (*a2 && *(_DWORD *)(v5 + 56) != 7)
  {
    *((_QWORD *)this + 50) = v4;
    *((_QWORD *)this + 51) = v4 + 2;
    while (1)
    {
      v28 = *(_DWORD *)(*((_QWORD *)this + 1) + 56);
      if (v28 == 7 || v28 == 27)
        break;
        return 0;
    }
    return 1;
  }
  Loc = (char *)mlir::Token::getLoc((mlir::Token *)(v5 + 56));
  v7 = *((_QWORD *)this + 1);
  v8 = *(const void ***)(v7 + 64);
  v9 = *(_QWORD *)(v7 + 72);
  v55 = "expected block name";
  LOWORD(v58) = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 7, (uint64_t)&v55))
    return 0;
  v11 = BlockInfoByName;
  BlockInfoByName[1] = Loc;
  v12 = *BlockInfoByName;
  if (!*BlockInfoByName)
  {
    v20 = *a2;
    if (*a2)
    {
      v21 = 0;
      *BlockInfoByName = v20;
      v22 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
      if (!v22)
        goto LABEL_9;
    }
    else
    {
      v20 = operator new(0x48uLL);
      *v20 = 0u;
      v20[1] = 0u;
      *((_QWORD *)v20 + 4) = v20 + 2;
      *((_QWORD *)v20 + 5) = v20 + 2;
      *((_QWORD *)v20 + 7) = 0;
      *((_QWORD *)v20 + 8) = 0;
      *((_QWORD *)v20 + 6) = 0;
      v21 = (mlir::Block *)v20;
      *v11 = v20;
      v22 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
      if (!v22)
      {
LABEL_9:
        *a2 = (mlir::Block *)v20;
        if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) != 21
          || (v50 = (const void **)v20,
              v54 = ((*((_QWORD *)v20 + 7) - *((_QWORD *)v20 + 6)) & 0x7FFFFFFF8) != 0,
              LODWORD(v48[0]) = 0,
              v55 = (const char *)this,
              v56[0] = &v54,
              v56[1] = v48,
              v57 = &v50,
        {
          v55 = "expected ':' after block name";
          LOWORD(v58) = 259;
          if (mlir::detail::Parser::parseToken((uint64_t)this, 15, (uint64_t)&v55))
          {
            v23 = (char *)*a2 + 32;
            *((_QWORD *)this + 50) = *a2;
            *((_QWORD *)this + 51) = v23;
            do
            {
              v24 = *(_DWORD *)(*((_QWORD *)this + 1) + 56);
              if (v24 == 7 || v24 == 27)
                return 1;
            }
          }
        }
        if (v21)
        {
          mlir::Block::dropAllDefinedValueUses(v21);
          mlir::Block::~Block(v21);
          operator delete(v26);
          return 0;
        }
        return 0;
      }
    }
LABEL_8:
    mlir::AsmParserState::addDefinition(v22, (uint64_t)v20, Loc);
    v20 = (_OWORD *)*v11;
    goto LABEL_9;
  }
  v13 = *((_QWORD *)this + 34) + 24 * *((unsigned int *)this + 70);
  v14 = *(_DWORD *)(v13 - 8);
  if (v14)
  {
    v15 = *(_QWORD *)(v13 - 24);
    v16 = v14 - 1;
    LODWORD(v17) = (v14 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    v18 = (uint64_t *)(v15 + 16 * v17);
    v19 = *v18;
    if (*v18 == v12)
    {
LABEL_7:
      *v18 = -8192;
      *(int32x2_t *)(v13 - 16) = vadd_s32(*(int32x2_t *)(v13 - 16), (int32x2_t)0x1FFFFFFFFLL);
      v20 = (_OWORD *)*BlockInfoByName;
      v21 = (mlir::Block *)*BlockInfoByName;
      v22 = *(uint64_t **)(*((_QWORD *)this + 1) + 128);
      if (!v22)
        goto LABEL_9;
      goto LABEL_8;
    }
    v31 = 1;
    while (v19 != -4096)
    {
      v32 = v17 + v31++;
      v17 = v32 & v16;
      v19 = *(_QWORD *)(v15 + 16 * v17);
      if (v19 == v12)
      {
        v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_7;
      }
    }
  }
  v48[0] = "redefinition of block '";
  v49 = 259;
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)this + 1) + 8, Loc);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v48, (uint64_t)&v55);
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(&v55);
  if (v55)
  {
    v53 = 261;
    v50 = v8;
    v51 = (const char *)v9;
    mlir::Diagnostic::operator<<((uint64_t)v56, &v50);
    if (v55)
    {
      LODWORD(v50) = 3;
      v51 = "'";
      v52 = 1;
      v34 = &v50;
      v35 = (char *)v57;
      if (v58 >= v59)
      {
        v46 = v58 + 1;
        if (v57 <= &v50 && (char *)v57 + 24 * v58 > (char *)&v50)
        {
          v47 = (char *)&v50 - (_BYTE *)v57;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v46, 24);
          v35 = (char *)v57;
          v34 = (const void ***)((char *)v57 + v47);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v46, 24);
          v34 = &v50;
          v35 = (char *)v57;
        }
      }
      v36 = &v35[24 * v58];
      v37 = *(_OWORD *)v34;
      *((_QWORD *)v36 + 2) = v34[2];
      *(_OWORD *)v36 = v37;
      ++v58;
    }
  }
  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v55);
  if (v55)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v55);
  if (v65)
  {
    v38 = (_QWORD **)__p;
    if (__p)
    {
      v39 = v64;
      v40 = __p;
      if (v64 != __p)
      {
        do
          v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        v40 = __p;
      }
      v64 = v38;
      operator delete(v40);
    }
    v41 = v61;
    if (v61)
    {
      v42 = v62;
      v43 = v61;
      if (v62 != v61)
      {
        do
        {
          v45 = (void *)*--v42;
          v44 = v45;
          *v42 = 0;
          if (v45)
            operator delete[](v44);
        }
        while (v42 != v41);
        v43 = v61;
      }
      v62 = v41;
      operator delete(v43);
    }
    if (v57 != v60)
      free(v57);
  }
  return v27;
}

void `anonymous namespace'::OperationParser::popSSANameScope(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 34) + 24 * *((unsigned int *)this + 70);
  *(_QWORD *)(v1 - 24) = 0;
  *(_QWORD *)(v1 - 16) = 0;
  *(_DWORD *)(v1 - 8) = 0;
  LODWORD(v1) = *((_DWORD *)this + 70) - 1;
  *((_DWORD *)this + 70) = v1;
  v2 = *((_QWORD *)this + 34) + 24 * v1;
  llvm::deallocate_buffer(*(llvm **)v2, (void *)(16 * *(unsigned int *)(v2 + 16)));
}

uint64_t sub_1802FF4B8()
{
  uint64_t v0;

  return v0;
}

uint64_t llvm::StringMap<llvm::SmallVector<`anonymous namespace'::OperationParser::ValueDefinition,1u>,llvm::MallocAllocator>::operator[](uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *buffer;
  const unsigned __int8 **v12;
  char *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = *(_QWORD *)a1;
  v8 = v6;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v6);
  if (v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v9)
  {
    return v9 + 8;
  }
  buffer = llvm::allocate_buffer((size_t)(a3 + 41), (std::align_val_t)8uLL);
  v12 = (const unsigned __int8 **)buffer;
  v13 = (char *)(buffer + 5);
  if (a3)
    memcpy(buffer + 5, a2, (size_t)a3);
  a3[(_QWORD)v13] = 0;
  *v12 = a3;
  v12[1] = (const unsigned __int8 *)(v12 + 3);
  v12[2] = (const unsigned __int8 *)0x100000000;
  *(_QWORD *)(v7 + 8 * v8) = v12;
  ++*(_DWORD *)(a1 + 12);
  v14 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  v9 = *v14;
  if (*v14)
    v15 = v9 == -8;
  else
    v15 = 1;
  if (v15)
  {
    do
    {
      v16 = v14[1];
      ++v14;
      v9 = v16;
      if (v16)
        v17 = v9 == -8;
      else
        v17 = 1;
    }
    while (v17);
  }
  return v9 + 8;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseOptionalBlockArgList(mlir::Block *)::$_0>(uint64_t a1)
{
  mlir::detail::Parser *v1;
  _BYTE *v2;
  _DWORD *v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t EncodedSourceLocation;
  uint64_t v21;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  char *v29;
  __int128 v30;
  void *v31;
  _QWORD v32[4];
  __int16 v33;
  const char *v34;
  __int128 v35;
  void *v36;
  __int16 v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD **v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v1 = *(mlir::detail::Parser **)a1;
  v2 = *(_BYTE **)(a1 + 8);
  v3 = *(_DWORD **)(a1 + 16);
  v4 = *(_QWORD ***)(a1 + 24);
  v29 = 0;
  v30 = 0uLL;
    return 0;
  v34 = "expected ':' and type for SSA operand";
  v37 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)v1, 15, (uint64_t)&v34))
    return 0;
  v5 = mlir::detail::Parser::parseType(v1);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = v29;
  if (!*v2)
  {
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((_QWORD *)v1 + 1) + 8, v29);
    v10 = (uint64_t)mlir::Block::addArgument(*v4, v6, EncodedSourceLocation);
LABEL_22:
    {
      v21 = *(_QWORD *)(*((_QWORD *)v1 + 1) + 128);
      if (v21)
        mlir::AsmParserState::addDefinition(v21, v10, v7);
      v34 = v7;
      v35 = v30;
      v36 = v31;
    }
    return 0;
  }
  v8 = *v3;
  v9 = (*v4)[6];
  if (v8 < ((unint64_t)((*v4)[7] - v9) >> 3))
  {
    *v3 = v8 + 1;
    v10 = *(_QWORD *)(v9 + 8 * v8);
    if ((*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8) != v5)
    {
      v32[0] = "argument and block argument type mismatch";
      v33 = 259;
      mlir::detail::Parser::emitError((uint64_t)v1, (uint64_t)v32, &v34);
      v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v34);
      if (v34)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
      if (v43)
      {
        v12 = (_QWORD **)__p;
        if (__p)
        {
          v13 = v42;
          v14 = __p;
          if (v42 != __p)
          {
            do
              v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            v14 = __p;
          }
          v42 = v12;
          operator delete(v14);
        }
        v15 = v39;
        if (!v39)
          goto LABEL_44;
        v16 = v40;
        v17 = v39;
        if (v40 == v39)
        {
LABEL_43:
          v40 = v15;
          operator delete(v17);
LABEL_44:
          if (v36 != &v38)
            free(v36);
          return v11;
        }
        do
        {
          v19 = (void *)*--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            operator delete[](v18);
        }
        while (v16 != v15);
LABEL_42:
        v17 = v39;
        goto LABEL_43;
      }
      return v11;
    }
    goto LABEL_22;
  }
  v32[0] = "too many arguments specified in argument list";
  v33 = 259;
  mlir::detail::Parser::emitError((uint64_t)v1, (uint64_t)v32, &v34);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v34);
  if (v34)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
  if (v43)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v42;
      v25 = __p;
      if (v42 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v42 = v23;
      operator delete(v25);
    }
    v15 = v39;
    if (!v39)
      goto LABEL_44;
    v26 = v40;
    v17 = v39;
    if (v40 == v39)
      goto LABEL_43;
    do
    {
      v28 = (void *)*--v26;
      v27 = v28;
      *v26 = 0;
      if (v28)
        operator delete[](v27);
    }
    while (v26 != v15);
    goto LABEL_42;
  }
  return v11;
}

uint64_t llvm::array_pod_sort_comparator<std::pair<char const*,mlir::Block *>>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;

  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  if (*a2 < *a1)
    return 1;
  v3 = a1[1];
  v4 = a2[1];
  if (v3 < v4)
    return 0xFFFFFFFFLL;
  return v4 < v3;
}

uint64_t mlir::Diagnostic::append<char const(&)[43],mlir::Type &,char const(&)[5],mlir::Type>(uint64_t a1, char *__s, uint64_t *a3, char *a4, uint64_t *a5)
{
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v18;
  BOOL v19;
  char *v20;
  int v21;
  char *v22;
  size_t v23;

  v10 = strlen(__s);
  v11 = a1 + 16;
  v12 = *(_QWORD *)(a1 + 16);
  v21 = 3;
  v22 = __s;
  v23 = v10;
  v13 = *(unsigned int *)(a1 + 24);
  v14 = &v21;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    v18 = v13 + 1;
    v19 = v12 + 24 * v13 > (unint64_t)&v21;
    if (v12 <= (unint64_t)&v21 && v19)
    {
      v20 = (char *)&v21 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = (int *)&v20[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = &v21;
    }
  }
  v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)v14 + 2);
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::Type &,char const(&)[5],mlir::Type>(a1, a3, a4, a5);
}

uint64_t mlir::Diagnostic::append<mlir::Type &,char const(&)[5],mlir::Type>(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  _BYTE *v16;
  _BYTE v17[24];

  v7 = v17;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v17, *a2);
  v8 = a1 + 16;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 24);
  if (v10 >= *(_DWORD *)(a1 + 28))
  {
    v14 = v10 + 1;
    v15 = v9 + 24 * v10 > (unint64_t)v17;
    if (v9 <= (unint64_t)v17 && v15)
    {
      v16 = &v17[-v9];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      v9 = *(_QWORD *)(a1 + 16);
      v7 = &v16[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      v9 = *(_QWORD *)(a1 + 16);
      v7 = v17;
    }
  }
  v11 = v9 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v7;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v7 + 2);
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[5],mlir::Type>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[5],mlir::Type>(uint64_t a1, char *__s, uint64_t *a3)
{
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  BOOL v22;
  char *v23;
  char *v24;
  int v25;
  char *v26;
  size_t v27;

  v6 = strlen(__s);
  v7 = *(_QWORD *)(a1 + 16);
  v25 = 3;
  v26 = __s;
  v27 = v6;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v25;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v19 = v8 + 1;
    v20 = v7 + 24 * v8 > (unint64_t)&v25;
    if (v7 <= (unint64_t)&v25 && v20)
    {
      v23 = (char *)&v25 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v23[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = &v25;
    }
  }
  v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  v12 = *a3;
  v13 = &v25;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v25, v12);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 16);
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    v21 = v14 + 1;
    v22 = v15 + 24 * v14 > (unint64_t)&v25;
    if (v15 <= (unint64_t)&v25 && v22)
    {
      v24 = (char *)&v25 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v13 = (int *)&v24[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v13 = &v25;
    }
  }
  v16 = v15 + 24 * *(unsigned int *)(a1 + 24);
  v17 = *(_OWORD *)v13;
  *(_QWORD *)(v16 + 16) = *((_QWORD *)v13 + 2);
  *(_OWORD *)v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    v16 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v17 = 16 * v3;
      v18 = (unint64_t *)v4;
      do
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v18, &v25);
          v19 = v25;
          *v25 = *v18;
          v19[1] = v18[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_23;
    v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    v22 = result + 2;
    v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -4096;
      *v22 = -4096;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v24 = &result[2 * v20];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::CustomOpAsmParser::parseOperandList(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::AsmParser::Delimiter,BOOL,int)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  unsigned int v7;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _OWORD v14[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    memset(v14, 0, sizeof(v14));
    v9 = v4 + 1;
    v10 = *(_QWORD *)v3 + 32 * v4 > (unint64_t)v14;
    if (*(_QWORD *)v3 <= (unint64_t)v14 && v10)
    {
      v13 = (char *)v14 - *(_QWORD *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v9, 32);
      v11 = *(_QWORD *)v3;
      v12 = &v13[*(_QWORD *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v9, 32);
      v11 = *(_QWORD *)v3;
      v12 = (char *)v14;
    }
    v5 = (_OWORD *)(v11 + 32 * *(unsigned int *)(v3 + 8));
    v6 = *(_OWORD *)v12;
    v5[1] = *((_OWORD *)v12 + 1);
  }
  else
  {
    v5 = (_OWORD *)(*(_QWORD *)v3 + 32 * v4);
    v6 = 0uLL;
    v5[1] = 0u;
  }
  *v5 = v6;
  v7 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 672))(v2, *(_QWORD *)v3 + 32 * v7 - 32, *(unsigned __int8 *)a1[2]);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(BOOL)>::callback_fn<`anonymous namespace'::CustomOpAsmParser::parseAffineMapOfSSAIds(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::Attribute &,llvm::StringRef,mlir::NamedAttrList &,mlir::AsmParser::Delimiter)::{lambda(BOOL)#1}>(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  unint64_t v13;
  BOOL v14;
  char *v15;
  _QWORD v16[4];

  v4 = *a1;
  memset(v16, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v4 + 672))(v4, v16, 1))
    return 0;
  if (a2)
    v5 = a1[1];
  else
    v5 = a1[2];
  v8 = (_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 8);
  v9 = *(_QWORD *)v5;
  v10 = (char *)v16;
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    v13 = v7 + 1;
    v14 = v9 + 32 * v7 > (unint64_t)v16;
    if (v9 <= (unint64_t)v16 && v14)
    {
      v15 = (char *)v16 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      v9 = *(_QWORD *)v5;
      v10 = &v15[*(_QWORD *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      v9 = *(_QWORD *)v5;
      v10 = (char *)v16;
    }
  }
  v11 = (_OWORD *)(v9 + 32 * *v8);
  v12 = *((_OWORD *)v10 + 1);
  *v11 = *(_OWORD *)v10;
  v11[1] = v12;
  ++*v8;
  return 1;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(BOOL)>::callback_fn<`anonymous namespace'::CustomOpAsmParser::parseAffineExprOfSSAIds(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::AffineExpr &)::{lambda(BOOL)#1}>(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  unint64_t v13;
  BOOL v14;
  char *v15;
  _QWORD v16[4];

  v4 = *a1;
  memset(v16, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v4 + 672))(v4, v16, 1))
    return 0;
  if (a2)
    v5 = a1[1];
  else
    v5 = a1[2];
  v8 = (_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 8);
  v9 = *(_QWORD *)v5;
  v10 = (char *)v16;
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    v13 = v7 + 1;
    v14 = v9 + 32 * v7 > (unint64_t)v16;
    if (v9 <= (unint64_t)v16 && v14)
    {
      v15 = (char *)v16 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      v9 = *(_QWORD *)v5;
      v10 = &v15[*(_QWORD *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      v9 = *(_QWORD *)v5;
      v10 = (char *)v16;
    }
  }
  v11 = (_OWORD *)(v9 + 32 * *v8);
  v12 = *((_OWORD *)v10 + 1);
  *v11 = *(_OWORD *)v10;
  v11[1] = v12;
  ++*v8;
  return 1;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::CustomOpAsmParser::parseArgumentList(llvm::SmallVectorImpl<mlir::OpAsmParser::Argument> &,mlir::AsmParser::Delimiter,BOOL,BOOL)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  unsigned int v6;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  _OWORD v17[4];

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    memset(v17, 0, sizeof(v17));
    v8 = v4 + 1;
    v9 = *(_QWORD *)v3 + (v4 << 6) > (unint64_t)v17;
    if (*(_QWORD *)v3 <= (unint64_t)v17 && v9)
    {
      v16 = (char *)v17 - *(_QWORD *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v8, 64);
      v10 = *(_QWORD *)v3;
      v11 = &v16[*(_QWORD *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v8, 64);
      v10 = *(_QWORD *)v3;
      v11 = (char *)v17;
    }
    v12 = (_OWORD *)(v10 + ((unint64_t)*(unsigned int *)(v3 + 8) << 6));
    v13 = *(_OWORD *)v11;
    v14 = *((_OWORD *)v11 + 1);
    v15 = *((_OWORD *)v11 + 3);
    v12[2] = *((_OWORD *)v11 + 2);
    v12[3] = v15;
    *v12 = v13;
    v12[1] = v14;
  }
  else
  {
    v5 = (_OWORD *)(*(_QWORD *)v3 + (v4 << 6));
    v5[2] = 0u;
    v5[3] = 0u;
    *v5 = 0u;
    v5[1] = 0u;
  }
  v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 720))(v2, *(_QWORD *)v3 + ((unint64_t)v6 << 6) - 64, *(unsigned __int8 *)a1[2], *(unsigned __int8 *)a1[3]);
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::CustomOpAsmParser::parseOptionalAssignmentList(llvm::SmallVectorImpl<mlir::OpAsmParser::Argument> &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v13 = v4 + 1;
    v14 = *(_QWORD *)v3 + (v4 << 6) > (unint64_t)&v27;
    if (*(_QWORD *)v3 <= (unint64_t)&v27 && v14)
    {
      v25 = (char *)&v27 - *(_QWORD *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v13, 64);
      v15 = *(_QWORD *)v3;
      v16 = &v25[*(_QWORD *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v13, 64);
      v15 = *(_QWORD *)v3;
      v16 = (char *)&v27;
    }
    v17 = (_OWORD *)(v15 + ((unint64_t)*(unsigned int *)(v3 + 8) << 6));
    v18 = *(_OWORD *)v16;
    v19 = *((_OWORD *)v16 + 1);
    v20 = *((_OWORD *)v16 + 3);
    v17[2] = *((_OWORD *)v16 + 2);
    v17[3] = v20;
    *v17 = v18;
    v17[1] = v19;
  }
  else
  {
    v5 = (_OWORD *)(*(_QWORD *)v3 + (v4 << 6));
    v5[2] = 0u;
    v5[3] = 0u;
    *v5 = 0u;
    v5[1] = 0u;
  }
  v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 720))(v2, *(_QWORD *)v3 + ((unint64_t)v6 << 6) - 64, 0, 0)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2))
  {
    return 0;
  }
  v7 = a1[2];
  v8 = *(unsigned int *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    v27 = 0u;
    v28 = 0u;
    v21 = v8 + 1;
    v22 = *(_QWORD *)v7 + 32 * v8 > (unint64_t)&v27;
    if (*(_QWORD *)v7 <= (unint64_t)&v27 && v22)
    {
      v26 = (char *)&v27 - *(_QWORD *)v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v21, 32);
      v23 = *(_QWORD *)v7;
      v24 = &v26[*(_QWORD *)v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v21, 32);
      v23 = *(_QWORD *)v7;
      v24 = (char *)&v27;
    }
    v9 = (_OWORD *)(v23 + 32 * *(unsigned int *)(v7 + 8));
    v10 = *(_OWORD *)v24;
    v9[1] = *((_OWORD *)v24 + 1);
  }
  else
  {
    v9 = (_OWORD *)(*(_QWORD *)v7 + 32 * v8);
    v10 = 0uLL;
    v9[1] = 0u;
  }
  *v9 = v10;
  v11 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v11;
  return (*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 672))(v2, *(_QWORD *)v7 + 32 * v11 - 32, 1) != 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseCustomOperation(llvm::ArrayRef<std::tuple<llvm::StringRef,unsigned int,llvm::SMLoc>>)::$_2>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void ***v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  const void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  const void **AttrData;
  const char *v15;
  uint64_t v16;
  const void ***v17;
  char *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  void *v22;
  _BYTE *v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  const char *v42;
  __int16 v43;
  const void **v44;
  const char *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[96];
  void *v55[2];
  uint64_t v56;
  void *__p[2];
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  v42 = "invalid properties ";
  v43 = 259;
  mlir::emitError(v4, (uint64_t)&v42, (uint64_t)&v48);
  if (v48)
  {
    v5 = &v44;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, *a1[1]);
    v6 = (char *)v51;
    if (v52 >= v53)
    {
      v35 = v52 + 1;
      if (v51 <= &v44 && (char *)v51 + 24 * v52 > (char *)&v44)
      {
        v39 = (char *)&v44 - (_BYTE *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v6 = (char *)v51;
        v5 = (const void ***)((char *)v51 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v5 = &v44;
        v6 = (char *)v51;
      }
    }
    v7 = &v6[24 * v52];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = v5[2];
    *(_OWORD *)v7 = v8;
    v9 = ++v52;
    if (v48)
    {
      LODWORD(v44) = 3;
      v45 = " for op ";
      v46 = 8;
      v10 = &v44;
      v11 = (char *)v51;
      if (v9 >= v53)
      {
        v36 = v9 + 1;
        v37 = (char *)v51 + 24 * v9 > (char *)&v44;
        if (v51 <= &v44 && v37)
        {
          v40 = (char *)&v44 - (_BYTE *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v11 = (char *)v51;
          v10 = (const void ***)((char *)v51 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v10 = &v44;
          v11 = (char *)v51;
        }
      }
      v12 = &v11[24 * v52];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = v10[2];
      *(_OWORD *)v12 = v13;
      ++v52;
    }
  }
  v44 = *(const void ***)(*(_QWORD *)(*a1[2] + 48) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v44);
  v16 = v48;
  if (v48)
  {
    v47 = 261;
    v44 = AttrData;
    v45 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v49, &v44);
    v16 = v48;
    if (v48)
    {
      LODWORD(v44) = 3;
      v45 = ": ";
      v46 = 2;
      v17 = &v44;
      v18 = (char *)v51;
      if (v52 >= v53)
      {
        v38 = v52 + 1;
        if (v51 <= &v44 && (char *)v51 + 24 * v52 > (char *)&v44)
        {
          v41 = (char *)&v44 - (_BYTE *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          v18 = (char *)v51;
          v17 = (const void ***)((char *)v51 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          v17 = &v44;
          v18 = (char *)v51;
        }
      }
      v19 = &v18[24 * v52];
      v20 = *(_OWORD *)v17;
      *((_QWORD *)v19 + 2) = v17[2];
      *(_OWORD *)v19 = v20;
      ++v52;
      v16 = v48;
    }
  }
  *(_QWORD *)a2 = v16;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v59)
  {
    *(_QWORD *)(a2 + 8) = v49;
    v21 = v52;
    *(_DWORD *)(a2 + 16) = v50;
    v22 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v21 || &v48 == (uint64_t *)a2)
    {
      v25 = 1;
      goto LABEL_23;
    }
    v23 = v54;
    if (v51 != v54)
    {
      *(_QWORD *)(a2 + 24) = v51;
      v24 = v53;
      *(_DWORD *)(a2 + 32) = v21;
      *(_DWORD *)(a2 + 36) = v24;
      v51 = v54;
      v53 = 0;
      v25 = 1;
LABEL_22:
      v52 = 0;
LABEL_23:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v55;
      *(_QWORD *)(a2 + 152) = v56;
      v55[0] = 0;
      v55[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v58;
      v56 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v58 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v25)
      {
        if (v51 != v54)
          free(v51);
        v59 = 0;
      }
      goto LABEL_27;
    }
    if (v21 < 5)
    {
      v26 = v21;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v21, 24);
      v26 = v52;
      if (!v52)
      {
LABEL_21:
        *(_DWORD *)(a2 + 32) = v21;
        v25 = v59;
        goto LABEL_22;
      }
      v23 = v51;
      v22 = *(void **)(a2 + 24);
    }
    memcpy(v22, v23, 24 * v26);
    goto LABEL_21;
  }
LABEL_27:
  mlir::InFlightDiagnostic::abandon(&v48);
  if (v48)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
  if (v59)
  {
    v27 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v28 = (_QWORD **)__p[1];
      v29 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = __p[0];
      }
      __p[1] = v27;
      operator delete(v29);
    }
    v30 = v55[0];
    if (v55[0])
    {
      v31 = v55[1];
      v32 = v55[0];
      if (v55[1] != v55[0])
      {
        do
        {
          v34 = (void *)*--v31;
          v33 = v34;
          *v31 = 0;
          if (v34)
            operator delete[](v33);
        }
        while (v31 != v30);
        v32 = v55[0];
      }
      v55[1] = v30;
      operator delete(v32);
    }
    if (v51 != v54)
      free(v51);
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseGenericOperation(void)::$_0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void ***v5;
  char *v6;
  char *v7;
  __int128 v8;
  const void **v9;
  const void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  unint64_t v14;
  void *v15;
  _BYTE *v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  const void **v33;
  const char *v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE v43[96];
  __int128 v44;
  uint64_t v45;
  __int128 __p;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  mlir::emitError(**(_QWORD **)a1, (uint64_t)&v37);
  v4 = v37;
  if (v37)
  {
    LODWORD(v33) = 3;
    v34 = "'";
    v35 = 1;
    v5 = &v33;
    v6 = (char *)v40;
    if (v41 >= v42)
    {
      v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        v31 = (char *)&v33 - (_BYTE *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        v6 = (char *)v40;
        v5 = (const void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        v5 = &v33;
        v6 = (char *)v40;
      }
    }
    v7 = &v6[24 * v41];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = v5[2];
    *(_OWORD *)v7 = v8;
    ++v41;
    v4 = v37;
    if (v37)
    {
      v9 = *(const void ***)(a1 + 8);
      v36 = 260;
      v33 = v9;
      mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
      v4 = v37;
      if (v37)
      {
        LODWORD(v33) = 3;
        v34 = "' op ";
        v35 = 5;
        v10 = &v33;
        v11 = (char *)v40;
        if (v41 >= v42)
        {
          v30 = v41 + 1;
          if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
          {
            v32 = (char *)&v33 - (_BYTE *)v40;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
            v11 = (char *)v40;
            v10 = (const void ***)((char *)v40 + v32);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
            v10 = &v33;
            v11 = (char *)v40;
          }
        }
        v12 = &v11[24 * v41];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = v10[2];
        *(_OWORD *)v12 = v13;
        ++v41;
        v4 = v37;
      }
    }
  }
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v48)
  {
    *(_QWORD *)(a2 + 8) = v38;
    v14 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    v15 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v14 || &v37 == (uint64_t *)a2)
    {
      v18 = 1;
      goto LABEL_20;
    }
    v16 = v43;
    if (v40 != v43)
    {
      *(_QWORD *)(a2 + 24) = v40;
      v17 = v42;
      *(_DWORD *)(a2 + 32) = v14;
      *(_DWORD *)(a2 + 36) = v17;
      v40 = v43;
      v42 = 0;
      v18 = 1;
LABEL_19:
      v41 = 0;
LABEL_20:
      v20 = v47;
      *(_QWORD *)(a2 + 152) = v45;
      *(_OWORD *)(a2 + 136) = v44;
      v44 = 0uLL;
      *(_OWORD *)(a2 + 160) = __p;
      *(_QWORD *)(a2 + 176) = v20;
      v45 = 0;
      __p = 0uLL;
      v47 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v18)
      {
        if (v40 != v43)
          free(v40);
        v48 = 0;
      }
      goto LABEL_24;
    }
    if (v14 < 5)
    {
      v19 = v14;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v14, 24);
      v19 = v41;
      if (!v41)
      {
LABEL_18:
        *(_DWORD *)(a2 + 32) = v14;
        v18 = v48;
        goto LABEL_19;
      }
      v16 = v40;
      v15 = *(void **)(a2 + 24);
    }
    memcpy(v15, v16, 24 * v19);
    goto LABEL_18;
  }
LABEL_24:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  if (v48)
  {
    v21 = (_QWORD **)__p;
    if ((_QWORD)__p)
    {
      v22 = (_QWORD **)*((_QWORD *)&__p + 1);
      v23 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        v23 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v21;
      operator delete(v23);
    }
    v24 = (_QWORD *)v44;
    if ((_QWORD)v44)
    {
      v25 = (_QWORD *)*((_QWORD *)&v44 + 1);
      v26 = (void *)v44;
      if (*((_QWORD *)&v44 + 1) != (_QWORD)v44)
      {
        do
        {
          v28 = (void *)*--v25;
          v27 = v28;
          *v25 = 0;
          if (v28)
            operator delete[](v27);
        }
        while (v25 != v24);
        v26 = (void *)v44;
      }
      *((_QWORD *)&v44 + 1) = v24;
      operator delete(v26);
    }
    if (v40 != v43)
      free(v40);
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<`anonymous namespace'::OperationParser::parseGenericOperation(void)::$_1>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void **v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  void *v21;
  _BYTE *v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  const char *v41;
  __int16 v42;
  const void **v43;
  const char *v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[96];
  void *v54[2];
  uint64_t v55;
  void *__p[2];
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = **(_QWORD **)a1;
  v41 = "invalid properties ";
  v42 = 259;
  mlir::emitError(v4, (uint64_t)&v41, (uint64_t)&v47);
  v5 = v47;
  if (v47)
  {
    v6 = &v43;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v43, **(_QWORD **)(a1 + 8));
    v7 = (char *)v50;
    if (v51 >= v52)
    {
      v34 = v51 + 1;
      if (v50 <= &v43 && (char *)v50 + 24 * v51 > (char *)&v43)
      {
        v38 = (char *)&v43 - (_BYTE *)v50;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v34, 24);
        v7 = (char *)v50;
        v6 = (const void ***)((char *)v50 + v38);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v34, 24);
        v6 = &v43;
        v7 = (char *)v50;
      }
    }
    v8 = &v7[24 * v51];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    v10 = ++v51;
    v5 = v47;
    if (v47)
    {
      LODWORD(v43) = 3;
      v44 = " for op ";
      v45 = 8;
      v11 = &v43;
      v12 = (char *)v50;
      if (v10 >= v52)
      {
        v35 = v10 + 1;
        v36 = (char *)v50 + 24 * v10 > (char *)&v43;
        if (v50 <= &v43 && v36)
        {
          v39 = (char *)&v43 - (_BYTE *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v35, 24);
          v12 = (char *)v50;
          v11 = (const void ***)((char *)v50 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v35, 24);
          v11 = &v43;
          v12 = (char *)v50;
        }
      }
      v13 = &v12[24 * v51];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = v11[2];
      *(_OWORD *)v13 = v14;
      ++v51;
      v5 = v47;
      if (v47)
      {
        v15 = *(const void ***)(a1 + 16);
        v46 = 260;
        v43 = v15;
        mlir::Diagnostic::operator<<((uint64_t)&v48, &v43);
        v5 = v47;
        if (v47)
        {
          LODWORD(v43) = 3;
          v44 = ": ";
          v45 = 2;
          v16 = &v43;
          v17 = (char *)v50;
          if (v51 >= v52)
          {
            v37 = v51 + 1;
            if (v50 <= &v43 && (char *)v50 + 24 * v51 > (char *)&v43)
            {
              v40 = (char *)&v43 - (_BYTE *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
              v17 = (char *)v50;
              v16 = (const void ***)((char *)v50 + v40);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
              v16 = &v43;
              v17 = (char *)v50;
            }
          }
          v18 = &v17[24 * v51];
          v19 = *(_OWORD *)v16;
          *((_QWORD *)v18 + 2) = v16[2];
          *(_OWORD *)v18 = v19;
          ++v51;
          v5 = v47;
        }
      }
    }
  }
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v58)
  {
    *(_QWORD *)(a2 + 8) = v48;
    v20 = v51;
    *(_DWORD *)(a2 + 16) = v49;
    v21 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v20 || &v47 == (uint64_t *)a2)
    {
      v24 = 1;
      goto LABEL_22;
    }
    v22 = v53;
    if (v50 != v53)
    {
      *(_QWORD *)(a2 + 24) = v50;
      v23 = v52;
      *(_DWORD *)(a2 + 32) = v20;
      *(_DWORD *)(a2 + 36) = v23;
      v50 = v53;
      v52 = 0;
      v24 = 1;
LABEL_21:
      v51 = 0;
LABEL_22:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v54;
      *(_QWORD *)(a2 + 152) = v55;
      v54[0] = 0;
      v54[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v57;
      v55 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v57 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v24)
      {
        if (v50 != v53)
          free(v50);
        v58 = 0;
      }
      goto LABEL_26;
    }
    if (v20 < 5)
    {
      v25 = v20;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v20, 24);
      v25 = v51;
      if (!v51)
      {
LABEL_20:
        *(_DWORD *)(a2 + 32) = v20;
        v24 = v58;
        goto LABEL_21;
      }
      v22 = v50;
      v21 = *(void **)(a2 + 24);
    }
    memcpy(v21, v22, 24 * v25);
    goto LABEL_20;
  }
LABEL_26:
  mlir::InFlightDiagnostic::abandon(&v47);
  if (v47)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  if (v58)
  {
    v26 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v27 = (_QWORD **)__p[1];
      v28 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p[0];
      }
      __p[1] = v26;
      operator delete(v28);
    }
    v29 = v54[0];
    if (v54[0])
    {
      v30 = v54[1];
      v31 = v54[0];
      if (v54[1] != v54[0])
      {
        do
        {
          v33 = (void *)*--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            operator delete[](v32);
        }
        while (v30 != v29);
        v31 = v54[0];
      }
      v54[1] = v29;
      operator delete(v31);
    }
    if (v50 != v53)
      free(v50);
  }
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::SMLoc>,true>::growAndEmplaceBack<unsigned int &,llvm::SMLoc&>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>(uint64_t a1, char *__s, uint64_t a3, const char *a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v16;
  BOOL v17;
  char *v18;
  int v19;
  char *v20;
  size_t v21;

  v8 = strlen(__s);
  v9 = a1 + 16;
  v10 = *(_QWORD *)(a1 + 16);
  v19 = 3;
  v20 = __s;
  v21 = v8;
  v11 = *(unsigned int *)(a1 + 24);
  v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    v16 = v11 + 1;
    v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v12 = &v19;
    }
  }
  v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  v14 = *(_OWORD *)v12;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
  *(_OWORD *)v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<llvm::StringRef &,char const(&)[2]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<llvm::StringRef &,char const(&)[2]>(uint64_t a1, uint64_t a2, const char *a3)
{
  const char *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const void ***v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  const void **v17;
  const char *v18;
  size_t v19;
  __int16 v20;

  v20 = 261;
  v5 = *(const char **)(a2 + 8);
  v17 = *(const void ***)a2;
  v18 = v5;
  mlir::Diagnostic::operator<<(a1, &v17);
  v6 = strlen(a3);
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  LODWORD(v17) = 3;
  v18 = a3;
  v19 = v6;
  v9 = *(unsigned int *)(a1 + 24);
  v10 = &v17;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    v14 = v9 + 1;
    v15 = v8 + 24 * v9 > (unint64_t)&v17;
    if (v8 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v10 = (const void ***)&v16[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v10 = &v17;
    }
  }
  v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v10[2];
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::Diagnostic::append<char const(&)[26],llvm::StringRef &,char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(uint64_t a1, char *__s, uint64_t a3, char *a4, unsigned int *a5, char *a6, uint64_t *a7)
{
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void ***v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  unint64_t v23;
  BOOL v24;
  char *v25;
  const void **v26;
  char *v27;
  size_t v28;
  __int16 v29;

  v14 = strlen(__s);
  v15 = a1 + 16;
  v16 = *(_QWORD *)(a1 + 16);
  LODWORD(v26) = 3;
  v27 = __s;
  v28 = v14;
  v17 = *(unsigned int *)(a1 + 24);
  v18 = &v26;
  if (v17 >= *(_DWORD *)(a1 + 28))
  {
    v23 = v17 + 1;
    v24 = v16 + 24 * v17 > (unint64_t)&v26;
    if (v16 <= (unint64_t)&v26 && v24)
    {
      v25 = (char *)&v26 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      v16 = *(_QWORD *)(a1 + 16);
      v18 = (const void ***)&v25[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      v16 = *(_QWORD *)(a1 + 16);
      v18 = &v26;
    }
  }
  v19 = v16 + 24 * *(unsigned int *)(a1 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = v18[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(a1 + 24);
  v29 = 261;
  v21 = *(char **)(a3 + 8);
  v26 = *(const void ***)a3;
  v27 = v21;
  mlir::Diagnostic::operator<<(a1, &v26);
  return mlir::Diagnostic::append<char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(uint64_t a1, char *__s, unsigned int *a3, char *a4, uint64_t *a5)
{
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  size_t v32;

  v10 = strlen(__s);
  v11 = *(_QWORD *)(a1 + 16);
  v30 = 3;
  v31 = __s;
  v32 = v10;
  v12 = *(unsigned int *)(a1 + 24);
  v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    v24 = v12 + 1;
    v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      v11 = *(_QWORD *)(a1 + 16);
      v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      v11 = *(_QWORD *)(a1 + 16);
      v13 = &v30;
    }
  }
  v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  v15 = *(_OWORD *)v13;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)v13 + 2);
  *(_OWORD *)v14 = v15;
  v16 = *(_DWORD *)(a1 + 28);
  v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v17;
  v18 = (char *)*a3;
  v30 = 5;
  v31 = v18;
  v19 = *(_QWORD *)(a1 + 16);
  v20 = &v30;
  if (v17 >= v16)
  {
    v26 = v17 + 1;
    v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = &v30;
    }
  }
  v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  v22 = *(_OWORD *)v20;
  *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
  *(_OWORD *)v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[5],mlir::Type>(a1, a4, a5);
}

uint64_t *llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 9), (std::align_val_t)8uLL);
    v10 = buffer + 1;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 9), (std::align_val_t)8uLL);
    v10 = buffer + 1;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *buffer = a3;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

uint64_t llvm::array_pod_sort_comparator<char const*>(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::OperationParser::finalize(void)::$_1>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int Key;
  uint64_t v11;
  uint64_t v12;
  uint64_t EncodedSourceLocation;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int *v66;
  char *v67;
  __int128 v68;
  char v69;
  _QWORD **v70;
  _QWORD **v71;
  void *v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  char *v79;
  int *v80;
  char *v81;
  __int128 v82;
  int *v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  int *v89;
  char *v90;
  __int128 v91;
  _QWORD **v92;
  _QWORD **v93;
  void *v94;
  _QWORD *v95;
  void *v96;
  void *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  int64_t v116;
  unint64_t v117;
  unint64_t v118;
  _BYTE v119[32];
  __int16 v120;
  uint64_t v121;
  int v122;
  const char *v123;
  uint64_t v124;
  _QWORD v125[3];
  void *v126;
  unsigned int v127;
  unsigned int v128;
  _BYTE v129[96];
  void *v130;
  _QWORD *v131;
  void *__p;
  _QWORD **v133;
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = **a1;
  v6 = *(_QWORD *)(a2 + 24);
  if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id)
    v6 = 0;
  v121 = v6;
  if (!v6 || *(_QWORD *)v4[1] != mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v121))
    goto LABEL_57;
  v7 = *(_QWORD *)(v5 + 360) + 24 * mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v121);
  v8 = *(const char **)v7;
  v9 = v4[2];
  Key = llvm::StringMapImpl::FindKey((uint64_t *)v9, *(int8x16_t **)(v7 + 8), *(const unsigned __int8 **)(v7 + 16));
  if (Key == -1
    || Key == (unint64_t)*(unsigned int *)(v9 + 8)
    || (v11 = *(_QWORD *)(*(_QWORD *)v9 + 8 * Key), (v12 = *(_QWORD *)(v11 + 8)) == 0))
  {
    v120 = 257;
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v5 + 8) + 8, v8);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v119, (uint64_t)v125);
    if (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(v125);
    if (v125[0])
    {
      v122 = 3;
      v123 = "operation location alias was never defined";
      v124 = 42;
      v14 = &v122;
      v15 = (char *)v126;
      if (v127 >= v128)
      {
        v108 = v127 + 1;
        if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
        {
          v113 = (char *)&v122 - (_BYTE *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v108, 24);
          v15 = (char *)v126;
          v14 = (int *)((char *)v126 + v113);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v108, 24);
          v14 = &v122;
          v15 = (char *)v126;
        }
      }
      v16 = &v15[24 * v127];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v127;
    }
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
    if (v125[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
    if (v134)
    {
      v19 = (_QWORD **)__p;
      if (__p)
      {
        v20 = v133;
        v21 = __p;
        if (v133 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v133 = v19;
        operator delete(v21);
      }
      v22 = v130;
      if (!v130)
        goto LABEL_54;
      v23 = v131;
      v24 = v130;
      if (v131 == v130)
        goto LABEL_53;
      do
      {
        v26 = (void *)*--v23;
        v25 = v26;
        *v23 = 0;
        if (v26)
          operator delete[](v25);
      }
      while (v23 != v22);
      goto LABEL_52;
    }
  }
  else
  {
    if (mlir::LocationAttr::classof(*(_QWORD *)(v11 + 8)))
    {
      *(_QWORD *)(a2 + 24) = v12;
      goto LABEL_57;
    }
    v120 = 257;
    v27 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v5 + 8) + 8, v8);
    mlir::emitError(v27, (uint64_t)v119, (uint64_t)v125);
    if (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(v125);
    if (v125[0])
    {
      v122 = 3;
      v123 = "expected location, but found '";
      v124 = 30;
      v28 = &v122;
      v29 = (char *)v126;
      if (v127 >= v128)
      {
        v109 = v127 + 1;
        if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
        {
          v114 = (char *)&v122 - (_BYTE *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v109, 24);
          v29 = (char *)v126;
          v28 = (int *)((char *)v126 + v114);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v109, 24);
          v28 = &v122;
          v29 = (char *)v126;
        }
      }
      v30 = &v29[24 * v127];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      ++v127;
      if (v125[0])
      {
        v32 = &v122;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v122, v12);
        v33 = (char *)v126;
        if (v127 >= v128)
        {
          v110 = v127 + 1;
          if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
          {
            v115 = (char *)&v122 - (_BYTE *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v110, 24);
            v33 = (char *)v126;
            v32 = (int *)((char *)v126 + v115);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v110, 24);
            v32 = &v122;
            v33 = (char *)v126;
          }
        }
        v34 = &v33[24 * v127];
        v35 = *(_OWORD *)v32;
        *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
        *(_OWORD *)v34 = v35;
        v36 = ++v127;
        if (v125[0])
        {
          v122 = 3;
          v123 = "'";
          v124 = 1;
          v37 = &v122;
          v38 = (char *)v126;
          if (v36 >= v128)
          {
            v111 = v36 + 1;
            v112 = (char *)v126 + 24 * v36 > (char *)&v122;
            if (v126 <= &v122 && v112)
            {
              v116 = (char *)&v122 - (_BYTE *)v126;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v111, 24);
              v38 = (char *)v126;
              v37 = (int *)((char *)v126 + v116);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v111, 24);
              v37 = &v122;
              v38 = (char *)v126;
            }
          }
          v39 = &v38[24 * v127];
          v40 = *(_OWORD *)v37;
          *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
          *(_OWORD *)v39 = v40;
          ++v127;
        }
      }
    }
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
    if (v125[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
    if (v134)
    {
      v41 = (_QWORD **)__p;
      if (__p)
      {
        v42 = v133;
        v43 = __p;
        if (v133 != __p)
        {
          do
            v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
          while (v42 != v41);
          v43 = __p;
        }
        v133 = v41;
        operator delete(v43);
      }
      v22 = v130;
      if (!v130)
        goto LABEL_54;
      v44 = v131;
      v24 = v130;
      if (v131 == v130)
      {
LABEL_53:
        v131 = v22;
        operator delete(v24);
LABEL_54:
        if (v126 != v129)
          free(v126);
        goto LABEL_56;
      }
      do
      {
        v46 = (void *)*--v44;
        v45 = v46;
        *v44 = 0;
        if (v46)
          operator delete[](v45);
      }
      while (v44 != v22);
LABEL_52:
      v24 = v130;
      goto LABEL_53;
    }
  }
LABEL_56:
  if (!v18)
    return 0;
LABEL_57:
  v47 = *(unsigned int *)(a2 + 44);
  v48 = v47 & 0x7FFFFF;
  if ((v47 & 0x7FFFFF) != 0)
  {
    v49 = ((a2 + 16 * ((v47 >> 23) & 1) + ((v47 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    v117 = v49 + 24 * v48;
    while (1)
    {
      v50 = *(_QWORD *)(v49 + 8);
      if (v50 != v49)
        break;
LABEL_142:
      v49 += 24;
      if (v49 == v117)
        return 1;
    }
    v118 = v49;
    while (1)
    {
      v51 = v50 - 8;
      if (!v50)
        v51 = 0;
      v52 = *(uint64_t **)(v51 + 48);
      v53 = *(uint64_t **)(v51 + 56);
      if (v53 != v52)
        break;
LABEL_61:
      v50 = *(_QWORD *)(v50 + 8);
      v49 = v118;
      if (v50 == v118)
        goto LABEL_142;
    }
    while (1)
    {
      v54 = *v52;
      v55 = *a1;
      v56 = **a1;
      v57 = *(_QWORD *)(*v52 + 32);
      if (*(_UNKNOWN **)(*(_QWORD *)v57 + 136) != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id)
        v57 = 0;
      v121 = v57;
      if (v57 && *(_QWORD *)v55[1] == mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v121))
      {
        v58 = *(_QWORD *)(v56 + 360) + 24 * mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v121);
        v59 = *(const char **)v58;
        v60 = v55[2];
        v61 = llvm::StringMapImpl::FindKey((uint64_t *)v60, *(int8x16_t **)(v58 + 8), *(const unsigned __int8 **)(v58 + 16));
        if (v61 == -1
          || v61 == (unint64_t)*(unsigned int *)(v60 + 8)
          || (v62 = *(_QWORD *)(*(_QWORD *)v60 + 8 * v61), (v63 = *(_QWORD *)(v62 + 8)) == 0))
        {
          v120 = 257;
          v64 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v56 + 8) + 8, v59);
          mlir::emitError(v64, (uint64_t)v119, (uint64_t)v125);
          if (*(_DWORD *)(*(_QWORD *)(v56 + 8) + 56) == 1)
            mlir::InFlightDiagnostic::abandon(v125);
          if (v125[0])
          {
            v122 = 3;
            v123 = "operation location alias was never defined";
            v124 = 42;
            v65 = (char *)v126;
            if (v127 >= v128)
            {
              v98 = v127 + 1;
              if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
              {
                v103 = (char *)&v122 - (_BYTE *)v126;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
                v65 = (char *)v126;
                v66 = (int *)((char *)v126 + v103);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
                v66 = &v122;
                v65 = (char *)v126;
              }
            }
            else
            {
              v66 = &v122;
            }
            v67 = &v65[24 * v127];
            v68 = *(_OWORD *)v66;
            *((_QWORD *)v67 + 2) = *((_QWORD *)v66 + 2);
            *(_OWORD *)v67 = v68;
            ++v127;
          }
          v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
          if (v125[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
          if (v134)
          {
            v70 = (_QWORD **)__p;
            if (__p)
            {
              v71 = v133;
              v72 = __p;
              if (v133 != __p)
              {
                do
                  v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
                while (v71 != v70);
                v72 = __p;
              }
              v133 = v70;
              operator delete(v72);
            }
            v73 = v130;
            if (v130)
            {
              v74 = v131;
              v75 = v130;
              if (v131 == v130)
                goto LABEL_123;
              do
              {
                v77 = (void *)*--v74;
                v76 = v77;
                *v74 = 0;
                if (v77)
                  operator delete[](v76);
              }
              while (v74 != v73);
LABEL_122:
              v75 = v130;
              goto LABEL_123;
            }
LABEL_124:
            if (v126 != v129)
              free(v126);
          }
LABEL_66:
          if (!v69)
            return 0;
          goto LABEL_67;
        }
        if (!mlir::LocationAttr::classof(*(_QWORD *)(v62 + 8)))
        {
          v120 = 257;
          v78 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v56 + 8) + 8, v59);
          mlir::emitError(v78, (uint64_t)v119, (uint64_t)v125);
          if (*(_DWORD *)(*(_QWORD *)(v56 + 8) + 56) == 1)
            mlir::InFlightDiagnostic::abandon(v125);
          if (v125[0])
          {
            v122 = 3;
            v123 = "expected location, but found '";
            v124 = 30;
            v79 = (char *)v126;
            if (v127 >= v128)
            {
              v99 = v127 + 1;
              if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
              {
                v104 = (char *)&v122 - (_BYTE *)v126;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v99, 24);
                v79 = (char *)v126;
                v80 = (int *)((char *)v126 + v104);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v99, 24);
                v80 = &v122;
                v79 = (char *)v126;
              }
            }
            else
            {
              v80 = &v122;
            }
            v81 = &v79[24 * v127];
            v82 = *(_OWORD *)v80;
            *((_QWORD *)v81 + 2) = *((_QWORD *)v80 + 2);
            *(_OWORD *)v81 = v82;
            ++v127;
            if (v125[0])
            {
              v83 = &v122;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v122, v63);
              v84 = (char *)v126;
              if (v127 >= v128)
              {
                v100 = v127 + 1;
                if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
                {
                  v105 = (char *)&v122 - (_BYTE *)v126;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                  v84 = (char *)v126;
                  v83 = (int *)((char *)v126 + v105);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                  v83 = &v122;
                  v84 = (char *)v126;
                }
              }
              v85 = &v84[24 * v127];
              v86 = *(_OWORD *)v83;
              *((_QWORD *)v85 + 2) = *((_QWORD *)v83 + 2);
              *(_OWORD *)v85 = v86;
              v87 = ++v127;
              if (v125[0])
              {
                v122 = 3;
                v123 = "'";
                v124 = 1;
                v88 = (char *)v126;
                if (v87 >= v128)
                {
                  v101 = v87 + 1;
                  v102 = (char *)v126 + 24 * v87 > (char *)&v122;
                  if (v126 <= &v122 && v102)
                  {
                    v106 = (char *)&v122 - (_BYTE *)v126;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v101, 24);
                    v88 = (char *)v126;
                    v89 = (int *)((char *)v126 + v106);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v101, 24);
                    v89 = &v122;
                    v88 = (char *)v126;
                  }
                }
                else
                {
                  v89 = &v122;
                }
                v90 = &v88[24 * v127];
                v91 = *(_OWORD *)v89;
                *((_QWORD *)v90 + 2) = *((_QWORD *)v89 + 2);
                *(_OWORD *)v90 = v91;
                ++v127;
              }
            }
          }
          v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
          if (v125[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
          if (v134)
          {
            v92 = (_QWORD **)__p;
            if (__p)
            {
              v93 = v133;
              v94 = __p;
              if (v133 != __p)
              {
                do
                  v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
                while (v93 != v92);
                v94 = __p;
              }
              v133 = v92;
              operator delete(v94);
            }
            v73 = v130;
            if (v130)
            {
              v95 = v131;
              v75 = v130;
              if (v131 != v130)
              {
                do
                {
                  v97 = (void *)*--v95;
                  v96 = v97;
                  *v95 = 0;
                  if (v97)
                    operator delete[](v96);
                }
                while (v95 != v73);
                goto LABEL_122;
              }
LABEL_123:
              v131 = v73;
              operator delete(v75);
            }
            goto LABEL_124;
          }
          goto LABEL_66;
        }
        *(_QWORD *)(v54 + 32) = v63;
      }
LABEL_67:
      if (++v52 == v53)
        goto LABEL_61;
    }
  }
  return 1;
}

uint64_t *llvm::StringMap<mlir::Attribute,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v10 = buffer + 2;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v10 = buffer + 2;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *buffer = a3;
  buffer[1] = 0;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseFileMetadataDictionary(void)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  const char *Loc;
  _QWORD *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  void *v11;
  uint64_t EncodedSourceLocation;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  __int16 v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD **v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(*a1 + 8) + 56));
  v3 = *(_QWORD **)(v1 + 8);
  v4 = *((_DWORD *)v3 + 14);
  if (v4 == 3 || v4 == 12)
  {
LABEL_6:
    v6 = v3[8];
    v7 = v3[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v36);
    v8 = *(_QWORD *)(v1 + 8);
    *(_OWORD *)(v8 + 56) = v36;
    *(_QWORD *)(v8 + 72) = v37;
    *(_QWORD *)&v36 = "expected ':'";
    v39 = 259;
    if (mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v36))
    {
      if (v7 == 18)
      {
        if (*(_QWORD *)v6 != 0x6C616E7265747865
          || *(_QWORD *)(v6 + 8) != 0x6372756F7365725FLL
          || *(_WORD *)(v6 + 16) != 29541)
        {
LABEL_27:
          v33 = 1283;
          v32[0] = "unknown key '";
          v32[2] = v6;
          v32[3] = v7;
          v34[0] = v32;
          v34[2] = "' in file metadata dictionary";
          v35 = 770;
          EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v1 + 8) + 8, Loc);
          mlir::emitError(EncodedSourceLocation, (uint64_t)v34, (uint64_t)&v36);
          if (*(_DWORD *)(*(_QWORD *)(v1 + 8) + 56) == 1)
            mlir::InFlightDiagnostic::abandon(&v36);
          v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
          if ((_QWORD)v36)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
          if (v45)
          {
            v17 = (_QWORD **)__p;
            if (__p)
            {
              v18 = v44;
              v19 = __p;
              if (v44 != __p)
              {
                do
                  v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
                while (v18 != v17);
                v19 = __p;
              }
              v44 = v17;
              operator delete(v19);
            }
            v20 = v41;
            if (!v41)
              goto LABEL_59;
            v21 = v42;
            v22 = v41;
            if (v42 == v41)
            {
LABEL_58:
              v42 = v20;
              operator delete(v22);
LABEL_59:
              if (v38 != &v40)
                free(v38);
              return v16;
            }
            do
            {
              v24 = (void *)*--v21;
              v23 = v24;
              *v21 = 0;
              if (v24)
                operator delete[](v23);
            }
            while (v21 != v20);
LABEL_57:
            v22 = v41;
            goto LABEL_58;
          }
          return v16;
        }
        v32[0] = v1;
      }
      else
      {
        if (v7 != 17)
          goto LABEL_27;
        v9 = *(_QWORD *)v6 == 0x5F7463656C616964 && *(_QWORD *)(v6 + 8) == 0x656372756F736572;
        if (!v9 || *(_BYTE *)(v6 + 16) != 115)
          goto LABEL_27;
        v32[0] = v1;
      }
      v34[0] = v11;
      v34[1] = v32;
      *(_QWORD *)&v36 = "expected '{'";
      v39 = 259;
      if (mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v36))
      {
        *(_QWORD *)&v36 = v1;
        *((_QWORD *)&v36 + 1) = v34;
      }
    }
    return 0;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v3 + 7)))
  {
    v3 = *(_QWORD **)(v1 + 8);
    goto LABEL_6;
  }
  v34[0] = "expected identifier key in file metadata dictionary";
  v35 = 259;
  mlir::detail::Parser::emitError(v1, (uint64_t)v34, &v36);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
  if ((_QWORD)v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  if (v45)
  {
    v25 = (_QWORD **)__p;
    if (__p)
    {
      v26 = v44;
      v27 = __p;
      if (v44 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v44 = v25;
      operator delete(v27);
    }
    v20 = v41;
    if (!v41)
      goto LABEL_59;
    v28 = v42;
    v22 = v41;
    if (v42 == v41)
      goto LABEL_58;
    do
    {
      v30 = (void *)*--v28;
      v29 = v30;
      *v28 = 0;
      if (v30)
        operator delete[](v29);
    }
    while (v28 != v20);
    goto LABEL_57;
  }
  return v16;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseResourceFileMetadata(llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t Loc;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  Loc = mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(*a1 + 8) + 56));
  v4 = *(_QWORD **)(v2 + 8);
  v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3 || v5 == 12)
  {
LABEL_6:
    v7 = v4[8];
    v8 = v4[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v23);
    v9 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)(v9 + 56) = v23;
    *(_QWORD *)(v9 + 72) = v24;
    *(_QWORD *)&v23 = "expected ':'";
    v26 = 259;
    if (mlir::detail::Parser::parseToken(v2, 15, (uint64_t)&v23)
      && (v21[0] = "expected '{'", v22 = 259, mlir::detail::Parser::parseToken(v2, 20, (uint64_t)v21)))
    {
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))a1[1])(*(_QWORD *)(a1[1] + 8), v7, v8, Loc);
    }
    else
    {
      return 0;
    }
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v4 + 7)))
  {
    v4 = *(_QWORD **)(v2 + 8);
    goto LABEL_6;
  }
  v21[0] = "expected identifier key for 'resource' entry";
  v22 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)v21, &v23);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v23);
  if ((_QWORD)v23)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
  if (v32)
  {
    v13 = (_QWORD **)__p;
    if (__p)
    {
      v14 = v31;
      v15 = __p;
      if (v31 != __p)
      {
        do
          v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        v15 = __p;
      }
      v31 = v13;
      operator delete(v15);
    }
    v16 = v28;
    if (v28)
    {
      v17 = v29;
      v18 = v28;
      if (v29 != v28)
      {
        do
        {
          v20 = (void *)*--v17;
          v19 = v20;
          *v17 = 0;
          if (v20)
            operator delete[](v19);
        }
        while (v17 != v16);
        v18 = v28;
      }
      v29 = v16;
      operator delete(v18);
    }
    if (v25 != &v27)
      free(v25);
  }
  return v10;
}

BOOL llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseDialectResourceFileMetadata(void)::$_0>(uint64_t *a1, void *a2, size_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t **(*Dialect)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t EncodedSourceLocation;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  const void **v24;
  const char *v25;
  const void ***v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[4];
  __int16 v43;
  const void **v44;
  const char *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t *v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[96];
  void *v54;
  _QWORD *v55;
  void *__p;
  _QWORD **v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  Dialect = mlir::MLIRContext::getOrLoadDialect(***(_QWORD ***)(*a1 + 8), a2, a3);
  if (Dialect)
  {
    v9 = (uint64_t)Dialect;
    if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)Dialect))
    {
      v41 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(v9);
      if (v41)
      {
        v48 = v7;
        v49 = &v41;
      }
    }
    else
    {
      v41 = 0;
    }
    v43 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v42, &v48);
    if (v48)
    {
      LODWORD(v44) = 3;
      v45 = "unexpected 'resource' section for dialect '";
      v46 = 43;
      v20 = &v44;
      v21 = (char *)v50;
      if (v51 >= v52)
      {
        v37 = v51 + 1;
        if (v50 <= &v44 && (char *)v50 + 24 * v51 > (char *)&v44)
        {
          v39 = (char *)&v44 - (_BYTE *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
          v21 = (char *)v50;
          v20 = (const void ***)((char *)v50 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
          v20 = &v44;
          v21 = (char *)v50;
        }
      }
      v22 = &v21[24 * v51];
      v23 = *(_OWORD *)v20;
      *((_QWORD *)v22 + 2) = v20[2];
      *(_OWORD *)v22 = v23;
      ++v51;
      if (v48)
      {
        v24 = *(const void ***)(v9 + 8);
        v25 = *(const char **)(v9 + 16);
        v47 = 261;
        v44 = v24;
        v45 = v25;
        mlir::Diagnostic::operator<<((uint64_t)&v49, &v44);
        if (v48)
        {
          LODWORD(v44) = 3;
          v45 = "'";
          v46 = 1;
          v26 = &v44;
          v27 = (char *)v50;
          if (v51 >= v52)
          {
            v38 = v51 + 1;
            if (v50 <= &v44 && (char *)v50 + 24 * v51 > (char *)&v44)
            {
              v40 = (char *)&v44 - (_BYTE *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v38, 24);
              v27 = (char *)v50;
              v26 = (const void ***)((char *)v50 + v40);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v38, 24);
              v26 = &v44;
              v27 = (char *)v50;
            }
          }
          v28 = &v27[24 * v51];
          v29 = *(_OWORD *)v26;
          *((_QWORD *)v28 + 2) = v26[2];
          *(_OWORD *)v28 = v29;
          ++v51;
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v48);
    if (v48)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
    if (v58)
    {
      v30 = (_QWORD **)__p;
      if (__p)
      {
        v31 = v57;
        v32 = __p;
        if (v57 != __p)
        {
          do
            v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          v32 = __p;
        }
        v57 = v30;
        operator delete(v32);
      }
      v15 = v54;
      if (!v54)
        goto LABEL_44;
      v33 = v55;
      v17 = v54;
      if (v55 == v54)
      {
LABEL_43:
        v55 = v15;
        operator delete(v17);
LABEL_44:
        if (v50 != v53)
          free(v50);
        return v10;
      }
      do
      {
        v35 = (void *)*--v33;
        v34 = v35;
        *v33 = 0;
        if (v35)
          operator delete[](v34);
      }
      while (v33 != v15);
LABEL_42:
      v17 = v54;
      goto LABEL_43;
    }
  }
  else
  {
    v43 = 1283;
    v42[0] = "dialect '";
    v42[2] = a2;
    v42[3] = a3;
    v44 = (const void **)v42;
    v46 = (uint64_t)"' is unknown";
    v47 = 770;
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v7 + 8) + 8, a4);
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v44, (uint64_t)&v48);
    if (*(_DWORD *)(*(_QWORD *)(v7 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v48);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v48);
    if (v48)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
    if (v58)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v57;
        v14 = __p;
        if (v57 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v57 = v12;
        operator delete(v14);
      }
      v15 = v54;
      if (!v54)
        goto LABEL_44;
      v16 = v55;
      v17 = v54;
      if (v55 == v54)
        goto LABEL_43;
      do
      {
        v19 = (void *)*--v16;
        v18 = v19;
        *v16 = 0;
        if (v19)
          operator delete[](v18);
      }
      while (v16 != v15);
      goto LABEL_42;
    }
  }
  return v10;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseDialectResourceFileMetadata(void)::$_0::operator() const(llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(const mlir::OpAsmDialectInterface ***a1)
{
  const mlir::OpAsmDialectInterface **v2;
  uint64_t Loc;
  const mlir::OpAsmDialectInterface *v4;
  const mlir::OpAsmDialectInterface *v5;
  uint64_t v6;
  _BYTE v8[24];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  const mlir::OpAsmDialectInterface **v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;

  v2 = *a1;
  Loc = mlir::Token::getLoc((const mlir::OpAsmDialectInterface *)((char *)(*a1)[1] + 56));
  v16 = 0uLL;
  mlir::detail::Parser::parseResourceHandle((mlir::detail::Parser *)v2, *a1[1], (llvm::StringRef *)&v16, (uint64_t)&v13);
  if (!v15)
    return 0;
  *(_QWORD *)v8 = "expected ':'";
  LOWORD(v10) = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)v2, 15, (uint64_t)v8))
    return 0;
  v4 = v2[1];
  v13 = *(_OWORD *)((char *)v4 + 56);
  v14 = *((_QWORD *)v4 + 9);
  mlir::Lexer::lexToken((const mlir::OpAsmDialectInterface *)((char *)v4 + 8), (uint64_t)v8);
  v5 = v2[1];
  *(_OWORD *)((char *)v5 + 56) = *(_OWORD *)v8;
  *((_QWORD *)v5 + 9) = *(_QWORD *)&v8[16];
  *(_QWORD *)v8 = off_1E0E17EE8;
  *(_OWORD *)&v8[8] = v16;
  v9 = Loc;
  v10 = v13;
  v11 = v14;
  v12 = v2;
  v6 = (*(uint64_t (**)(_QWORD, _BYTE *))(*(_QWORD *)*a1[1] + 48))(*a1[1], v8);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v8);
  return v6;
}

void `anonymous namespace'::ParsedResourceEntry::~ParsedResourceEntry(_anonymous_namespace_::ParsedResourceEntry *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::ParsedResourceEntry::getKey(_anonymous_namespace_::ParsedResourceEntry *this)
{
  return *((_QWORD *)this + 1);
}

{
  return *((_QWORD *)this + 1);
}

void `anonymous namespace'::ParsedResourceEntry::emitError(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  uint64_t EncodedSourceLocation;
  _BYTE v6[32];
  __int16 v7;

  v3 = *((_QWORD *)this + 7);
  v4 = (const char *)*((_QWORD *)this + 3);
  v7 = 257;
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v3 + 8) + 8, v4);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v6, (uint64_t)a2);
  if (*(_DWORD *)(*(_QWORD *)(v3 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(a2);
}

uint64_t `anonymous namespace'::ParsedResourceEntry::getKind(_anonymous_namespace_::ParsedResourceEntry *this)
{
  int v2;
  uint64_t result;
  unsigned __int16 *v4;
  unsigned int v5;
  int v6;

  v2 = *((_DWORD *)this + 8);
  result = 1;
  if (v2 != 54 && v2 != 74)
  {
    if (*((_QWORD *)this + 6) >= 3uLL)
    {
      v4 = (unsigned __int16 *)*((_QWORD *)this + 5);
      v5 = bswap32(*v4) >> 16;
      if (v5 == 8752)
      {
        v6 = *((unsigned __int8 *)v4 + 2) - 120;
      }
      else if (v5 >> 4 < 0x223)
      {
        v6 = -1;
      }
      else
      {
        v6 = 1;
      }
      return 2 * (v6 != 0);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

{
  return *((unsigned int *)this + 6);
}

uint64_t `anonymous namespace'::ParsedResourceEntry::parseAsBool(_anonymous_namespace_::ParsedResourceEntry *this)
{
  mlir::Token *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;
  const char *Loc;
  uint64_t v10;
  uint64_t v11;
  uint64_t EncodedSourceLocation;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[3];
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 8);
  v2 = (_anonymous_namespace_::ParsedResourceEntry *)((char *)this + 32);
  v3 = v4;
  if (v4 == 54)
  {
    v5 = 0;
    goto LABEL_5;
  }
  if (v3 == 74)
  {
    v5 = 1;
LABEL_5:
    v6 = 1;
    return v5 | (v6 << 8);
  }
  v8 = *((_QWORD *)this + 7);
  Loc = (const char *)mlir::Token::getLoc(v2);
  v22 = 1283;
  v10 = *((_QWORD *)this + 1);
  v11 = *((_QWORD *)this + 2);
  v21[0] = "expected 'true' or 'false' value for key '";
  v21[2] = v10;
  v21[3] = v11;
  v23[0] = v21;
  v23[2] = "'";
  v24 = 770;
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v8 + 8) + 8, Loc);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v23, (uint64_t)v25);
  if (*(_DWORD *)(*(_QWORD *)(v8 + 8) + 56) == 1)
    mlir::InFlightDiagnostic::abandon(v25);
  if (v25[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
  if (v32)
  {
    v13 = (_QWORD **)__p;
    if (__p)
    {
      v14 = v31;
      v15 = __p;
      if (v31 != __p)
      {
        do
          v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        v15 = __p;
      }
      v31 = v13;
      operator delete(v15);
    }
    v16 = v28;
    if (v28)
    {
      v17 = v29;
      v18 = v28;
      if (v29 != v28)
      {
        do
        {
          v20 = (void *)*--v17;
          v19 = v20;
          *v17 = 0;
          if (v20)
            operator delete[](v19);
        }
        while (v17 != v16);
        v18 = v28;
      }
      v29 = v16;
      operator delete(v18);
    }
    if (v26 != &v27)
      free(v26);
  }
  v5 = 0;
  v6 = 0;
  return v5 | (v6 << 8);
}

{
  char v2;
  int v3;
  unsigned __int8 v4;
  const void ***v5;
  char *v6;
  char *v7;
  __int128 v8;
  char *v9;
  const char *v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  const void **v28;
  const char *v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE v37[96];
  void *v38;
  _QWORD *v39;
  void *__p;
  _QWORD **v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 6) == 1)
  {
    LOBYTE(v32) = 0;
    v3 = v2 != 0;
    v4 = v32;
    if (!v2)
      v4 = 0;
  }
  else
  {
    mlir::emitError(*(_QWORD *)(*((_QWORD *)this + 4) + 24), (uint64_t)&v32);
    if (v32)
    {
      LODWORD(v28) = 3;
      v29 = "expected a BOOL resource entry, but found a ";
      v30 = 44;
      v5 = &v28;
      v6 = (char *)v34;
      if (v35 >= v36)
      {
        v24 = v35 + 1;
        if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
        {
          v26 = (char *)&v28 - (_BYTE *)v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          v6 = (char *)v34;
          v5 = (const void ***)((char *)v34 + v26);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          v5 = &v28;
          v6 = (char *)v34;
        }
      }
      v7 = &v6[24 * v35];
      v8 = *(_OWORD *)v5;
      *((_QWORD *)v7 + 2) = v5[2];
      *(_OWORD *)v7 = v8;
      ++v35;
    }
    v9 = mlir::toString(*((_DWORD *)this + 6));
    if (v32)
    {
      v31 = 261;
      v28 = (const void **)v9;
      v29 = v10;
      mlir::Diagnostic::operator<<((uint64_t)&v33, &v28);
      if (v32)
      {
        LODWORD(v28) = 3;
        v29 = " entry instead";
        v30 = 14;
        v11 = &v28;
        v12 = (char *)v34;
        if (v35 >= v36)
        {
          v25 = v35 + 1;
          if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
          {
            v27 = (char *)&v28 - (_BYTE *)v34;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v25, 24);
            v12 = (char *)v34;
            v11 = (const void ***)((char *)v34 + v27);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v25, 24);
            v11 = &v28;
            v12 = (char *)v34;
          }
        }
        v13 = &v12[24 * v35];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = v11[2];
        *(_OWORD *)v13 = v14;
        ++v35;
        if (v32)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v32);
      }
    }
    if (v42)
    {
      v15 = (_QWORD **)__p;
      if (__p)
      {
        v16 = v41;
        v17 = __p;
        if (v41 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v41 = v15;
        operator delete(v17);
      }
      v18 = v38;
      if (v38)
      {
        v19 = v39;
        v20 = v38;
        if (v39 != v38)
        {
          do
          {
            v22 = (void *)*--v19;
            v21 = v22;
            *v19 = 0;
            if (v22)
              operator delete[](v21);
          }
          while (v19 != v18);
          v20 = v38;
        }
        v39 = v18;
        operator delete(v20);
      }
      if (v34 != v37)
        free(v34);
    }
    v4 = 0;
    v3 = 0;
  }
  return v4 | (v3 << 8);
}

void `anonymous namespace'::ParsedResourceEntry::parseAsString(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, std::string *a2@<X8>)
{
  mlir::Token *v4;
  int v5;
  uint64_t v6;
  const char *Loc;
  uint64_t v8;
  uint64_t v9;
  uint64_t EncodedSourceLocation;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  std::string v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *__p;
  _QWORD **v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)this + 8);
  v4 = (_anonymous_namespace_::ParsedResourceEntry *)((char *)this + 32);
  if (v5 == 11)
  {
    mlir::Token::getStringValue(v4, &v23);
    *a2 = v23;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    v6 = *((_QWORD *)this + 7);
    Loc = (const char *)mlir::Token::getLoc(v4);
    v20 = 1283;
    v8 = *((_QWORD *)this + 1);
    v9 = *((_QWORD *)this + 2);
    v19[0] = "expected string value for key '";
    v19[2] = v8;
    v19[3] = v9;
    v21[0] = v19;
    v21[2] = "'";
    v22 = 770;
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v6 + 8) + 8, Loc);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v21, (uint64_t)&v23);
    if (*(_DWORD *)(*(_QWORD *)(v6 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(&v23);
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    if (v23.__r_.__value_.__r.__words[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    if (v30)
    {
      v11 = (_QWORD **)__p;
      if (__p)
      {
        v12 = v29;
        v13 = __p;
        if (v29 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v29 = v11;
        operator delete(v13);
      }
      v14 = v26;
      if (v26)
      {
        v15 = v27;
        v16 = v26;
        if (v27 != v26)
        {
          do
          {
            v18 = (void *)*--v15;
            v17 = v18;
            *v15 = 0;
            if (v18)
              operator delete[](v17);
          }
          while (v15 != v14);
          v16 = v26;
        }
        v27 = v14;
        operator delete(v16);
      }
      if (v24 != &v25)
        free(v24);
    }
  }
}

void `anonymous namespace'::ParsedResourceEntry::parseAsBlob(mlir::Token *this@<X0>, void (*a2)(void **__return_ptr, uint64_t, size_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  mlir::Token *v6;
  int8x8_t data_low;
  uint64_t v10;
  const char *Loc;
  const char *v12;
  uint64_t v13;
  uint64_t EncodedSourceLocation;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  uint8x8_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  std::string::size_type size;
  size_t v47;
  std::string *v48;
  const void *v49;
  unint64_t v50;
  _OWORD *v51;
  _QWORD v52[4];
  __int16 v53;
  _QWORD v54[2];
  const char *v55;
  uint64_t v56;
  __int16 v57;
  _QWORD v58[2];
  const char *v59;
  __int16 v60;
  std::string v61;
  char v62;
  void *__dst[2];
  uint64_t v64;
  __int128 v65;
  _QWORD v66[2];
  char v67;
  void *v68;
  _QWORD *v69;
  void *__p;
  _QWORD **v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v6 = (mlir::Token *)((char *)this + 32);
  if (*((_DWORD *)this + 8) != 11)
  {
    v61.__r_.__value_.__s.__data_[0] = 0;
    v62 = 0;
LABEL_8:
    v10 = *((_QWORD *)this + 7);
    Loc = (const char *)mlir::Token::getLoc(v6);
    v57 = 1283;
    v12 = (const char *)*((_QWORD *)this + 1);
    v13 = *((_QWORD *)this + 2);
    v54[0] = "expected hex string blob for key '";
    v55 = v12;
    v56 = v13;
    v58[0] = v54;
    v59 = "'";
    v60 = 770;
    EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v10 + 8) + 8, Loc);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v58, (uint64_t)__dst);
    if (*(_DWORD *)(*(_QWORD *)(v10 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(__dst);
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 64) = 0;
    if (__dst[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    if (v72)
    {
      v15 = (_QWORD **)__p;
      if (__p)
      {
        v16 = v71;
        v17 = __p;
        if (v71 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v71 = v15;
        operator delete(v17);
      }
      v18 = v68;
      if (!v68)
        goto LABEL_61;
      v19 = v69;
      v20 = v68;
      if (v69 == v68)
        goto LABEL_60;
      do
      {
        v22 = (void *)*--v19;
        v21 = v22;
        *v19 = 0;
        if (v22)
          operator delete[](v21);
      }
      while (v19 != v18);
      goto LABEL_59;
    }
    goto LABEL_63;
  }
  mlir::Token::getHexStringValue((mlir::Token *)((char *)this + 32), &v61);
  if (!v62)
    goto LABEL_8;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v61.__r_.__value_.__l.__size_ >= 4)
    {
      data_low = (int8x8_t)*(unsigned int *)v61.__r_.__value_.__l.__data_;
      if (!data_low.i32[0])
        goto LABEL_67;
LABEL_42:
      v34 = (uint8x8_t)vcnt_s8(data_low);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] < 2u)
        goto LABEL_67;
      v35 = *((_QWORD *)this + 7);
      v36 = (const char *)mlir::Token::getLoc(v6);
      v53 = 1283;
      v37 = *((_QWORD *)this + 1);
      v38 = *((_QWORD *)this + 2);
      v52[0] = "expected hex string blob for key '";
      v52[2] = v37;
      v52[3] = v38;
      v54[0] = v52;
      v55 = "' to encode alignment in first 4 bytes, but got non-power-of-2 value: ";
      v57 = 770;
      v58[0] = v54;
      v59 = (const char *)data_low;
      v60 = 2306;
      v39 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v35 + 8) + 8, v36);
      mlir::emitError(v39, (uint64_t)v58, (uint64_t)__dst);
      if (*(_DWORD *)(*(_QWORD *)(v35 + 8) + 56) == 1)
        mlir::InFlightDiagnostic::abandon(__dst);
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 64) = 0;
      if (__dst[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
      if (v72)
      {
        v40 = (_QWORD **)__p;
        if (__p)
        {
          v41 = v71;
          v42 = __p;
          if (v71 != __p)
          {
            do
              v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
            while (v41 != v40);
            v42 = __p;
          }
          v71 = v40;
          operator delete(v42);
        }
        v18 = v68;
        if (!v68)
          goto LABEL_61;
        v43 = v69;
        v20 = v68;
        if (v69 == v68)
        {
LABEL_60:
          v69 = v18;
          operator delete(v20);
LABEL_61:
          if ((_QWORD *)v65 != v66)
            free((void *)v65);
          goto LABEL_63;
        }
        do
        {
          v45 = (void *)*--v43;
          v44 = v45;
          *v43 = 0;
          if (v45)
            operator delete[](v44);
        }
        while (v43 != v18);
LABEL_59:
        v20 = v68;
        goto LABEL_60;
      }
      goto LABEL_63;
    }
LABEL_25:
    v23 = *((_QWORD *)this + 7);
    v24 = (const char *)mlir::Token::getLoc(v6);
    v57 = 1283;
    v25 = (const char *)*((_QWORD *)this + 1);
    v26 = *((_QWORD *)this + 2);
    v54[0] = "expected hex string blob for key '";
    v55 = v25;
    v56 = v26;
    v58[0] = v54;
    v59 = "' to encode alignment in first 4 bytes";
    v60 = 770;
    v27 = mlir::Lexer::getEncodedSourceLocation(*(_QWORD *)(v23 + 8) + 8, v24);
    mlir::emitError(v27, (uint64_t)v58, (uint64_t)__dst);
    if (*(_DWORD *)(*(_QWORD *)(v23 + 8) + 56) == 1)
      mlir::InFlightDiagnostic::abandon(__dst);
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 64) = 0;
    if (__dst[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    if (v72)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v71;
        v30 = __p;
        if (v71 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v71 = v28;
        operator delete(v30);
      }
      v18 = v68;
      if (!v68)
        goto LABEL_61;
      v31 = v69;
      v20 = v68;
      if (v69 == v68)
        goto LABEL_60;
      do
      {
        v33 = (void *)*--v31;
        v32 = v33;
        *v31 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v31 != v18);
      goto LABEL_59;
    }
LABEL_63:
    if (!v62)
      return;
    goto LABEL_64;
  }
  if (HIBYTE(v61.__r_.__value_.__r.__words[2]) <= 3u)
    goto LABEL_25;
  data_low = (int8x8_t)LODWORD(v61.__r_.__value_.__l.__data_);
  if (LODWORD(v61.__r_.__value_.__l.__data_))
    goto LABEL_42;
LABEL_67:
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  else
    size = v61.__r_.__value_.__l.__size_;
  v47 = size - 4;
  if (size <= 4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 56) = 0;
    *(_BYTE *)(a4 + 64) = 1;
    if (!v62)
      return;
    goto LABEL_64;
  }
  v48 = &v61;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v48 = (std::string *)v61.__r_.__value_.__r.__words[0];
  v49 = (char *)v48->__r_.__value_.__r.__words + 4;
  a2(__dst, a3, v47, *(_QWORD *)&data_low);
  memcpy(__dst[0], v49, v47);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  v50 = v66[1];
  *(_QWORD *)(a4 + 16) = v64;
  *(_QWORD *)(a4 + 48) = v50;
  if (v50 >= 8)
  {
    v51 = (_OWORD *)(a4 + 24);
    if ((v50 & 2) != 0 && (v50 & 4) != 0)
    {
      (*(void (**)(_OWORD *, __int128 *))((v50 & 0xFFFFFFFFFFFFFFF8) + 8))(v51, &v65);
    }
    else
    {
      *v51 = v65;
      *(_QWORD *)(a4 + 40) = v66[0];
    }
  }
  *(_BYTE *)(a4 + 56) = v67;
  *(_BYTE *)(a4 + 64) = 1;
  if (v62)
  {
LABEL_64:
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
}

BOOL llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseExternalResourceFileMetadata(void)::$_0>(uint64_t a1, const void *a2, size_t a3, const char *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t EncodedSourceLocation;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  _QWORD *ParserFor;
  const void **v33;
  const char *v34;
  uint64_t v35;
  __int16 v36;
  const void *v37;
  size_t v38[2];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)a1;
  v8 = **(_QWORD **)(*(_QWORD *)a1 + 8);
  v37 = a2;
  v38[0] = a3;
  v33 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v8 + 16), (uint64_t)&v37, &v33)|| v33 == (const void **)(*(_QWORD *)(v8 + 16) + 24 * *(unsigned int *)(v8 + 32)))
  {
    v9 = *(_QWORD *)(v8 + 40);
    if (v9)
    {
      ParserFor = mlir::FallbackAsmResourceMap::getParserFor(v9, v37, v38[0]);
      goto LABEL_31;
    }
    ParserFor = 0;
  }
  else
  {
    ParserFor = v33[2];
    if (ParserFor)
      goto LABEL_31;
  }
  EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v7[1] + 8, a4);
  mlir::emitWarning(EncodedSourceLocation, (uint64_t)&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    v34 = "ignoring unknown external resources for '";
    v35 = 41;
    v11 = &v33;
    v12 = (char *)v39;
    if (v40 >= v41)
    {
      v28 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        v30 = (char *)&v33 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        v12 = (char *)v39;
        v11 = (const void ***)((char *)v39 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        v11 = &v33;
        v12 = (char *)v39;
      }
    }
    v13 = &v12[24 * v40];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    ++v40;
    if (v37)
    {
      v36 = 261;
      v33 = (const void **)a2;
      v34 = (const char *)a3;
      mlir::Diagnostic::operator<<((uint64_t)v38, &v33);
      if (v37)
      {
        LODWORD(v33) = 3;
        v34 = "'";
        v35 = 1;
        v15 = &v33;
        v16 = (char *)v39;
        if (v40 >= v41)
        {
          v29 = v40 + 1;
          if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
          {
            v31 = (char *)&v33 - (_BYTE *)v39;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            v16 = (char *)v39;
            v15 = (const void ***)((char *)v39 + v31);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            v15 = &v33;
            v16 = (char *)v39;
          }
        }
        v17 = &v16[24 * v40];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = v15[2];
        *(_OWORD *)v17 = v18;
        ++v40;
        if (v37)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
      }
    }
  }
  if (v47)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v46;
      v21 = __p;
      if (v46 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v46 = v19;
      operator delete(v21);
    }
    v22 = v43;
    if (v43)
    {
      v23 = v44;
      v24 = v43;
      if (v44 != v43)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v43;
      }
      v44 = v22;
      operator delete(v24);
    }
    if (v39 != v42)
      free(v39);
  }
LABEL_31:
  v37 = v7;
  v38[0] = (size_t)&ParserFor;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  unsigned int v8;
  void *v9;
  size_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v14;
  const void *v15;
  BOOL v16;
  int v17;
  uint64_t result;
  int v19;
  int v20;
  const void *v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  const void *v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  const void *v38;
  BOOL v39;
  int v40;
  void *__s1;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v14 = 0;
    result = 0;
    goto LABEL_70;
  }
  v6 = *a1;
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
  v8 = v4 - 1;
  v9 = *(void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    if (v9 == (void *)-2)
    {
      v11 = 0;
      v19 = 1;
      v20 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 24 * (HashValue & v8));
      v21 = (const void *)*v14;
      if (*v14 == -1)
        goto LABEL_21;
LABEL_19:
      if (v21 != (const void *)-2 && v14[1])
      {
LABEL_21:
        while (v21 != (const void *)-1)
        {
          if (v11)
            v22 = 0;
          else
            v22 = v21 == (const void *)-2;
          if (v22)
            v11 = v14;
          v23 = v19 + v20;
          ++v19;
          v20 = v23 & v8;
          v14 = (_QWORD *)(v6 + 24 * (v23 & v8));
          v21 = (const void *)*v14;
          if (*v14 != -1)
            goto LABEL_19;
        }
        goto LABEL_66;
      }
    }
    else
    {
      v11 = 0;
      v31 = 1;
      v32 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 24 * (HashValue & v8));
      v33 = *v14;
      if (*v14 == -2)
        goto LABEL_47;
LABEL_43:
      if (v33 == -1)
      {
        if (v9 != (void *)-1)
        {
LABEL_47:
          while (v33 != -1)
          {
            if (v11)
              v34 = 0;
            else
              v34 = v33 == -2;
            if (v34)
              v11 = v14;
            v35 = v31 + v32;
            ++v31;
            v32 = v35 & v8;
            v14 = (_QWORD *)(v6 + 24 * (v35 & v8));
            v33 = *v14;
            if (*v14 != -2)
              goto LABEL_43;
          }
          goto LABEL_66;
        }
      }
      else if (v14[1])
      {
        goto LABEL_47;
      }
    }
    goto LABEL_69;
  }
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      v11 = 0;
      v36 = 1;
      v37 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 24 * (HashValue & v8));
      v38 = (const void *)*v14;
      if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_63;
      while (v38 != (const void *)-1)
      {
        if (v11)
          v39 = 0;
        else
          v39 = v38 == (const void *)-2;
        if (v39)
          v11 = v14;
        v40 = v36 + v37;
        ++v36;
        v37 = v40 & v8;
        v14 = (_QWORD *)(v6 + 24 * (v40 & v8));
        v38 = (const void *)*v14;
        if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_63:
          if (v10 == v14[1] && !memcmp(__s1, v38, v10))
            goto LABEL_69;
        }
      }
      goto LABEL_66;
    }
    v11 = 0;
    v24 = 1;
    v25 = HashValue & v8;
    v14 = (_QWORD *)(v6 + 24 * (HashValue & v8));
    v26 = (const void *)*v14;
    if (*v14 == -2)
      goto LABEL_34;
LABEL_31:
    if (v26 != (const void *)-1)
    {
      if (v10 != v14[1] || (v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), v24 = v27, v28))
      {
LABEL_34:
        while (v26 != (const void *)-1)
        {
          if (v11)
            v29 = 0;
          else
            v29 = v26 == (const void *)-2;
          if (v29)
            v11 = v14;
          v30 = v24 + v25;
          ++v24;
          v25 = v30 & v8;
          v14 = (_QWORD *)(v6 + 24 * (v30 & v8));
          v26 = (const void *)*v14;
          if (*v14 != -2)
            goto LABEL_31;
        }
        goto LABEL_66;
      }
    }
LABEL_69:
    result = 1;
    goto LABEL_70;
  }
  v11 = 0;
  v12 = 1;
  v13 = HashValue & v8;
  v14 = (_QWORD *)(v6 + 24 * (HashValue & v8));
  v15 = (const void *)*v14;
  if (*v14 == -1)
    goto LABEL_8;
LABEL_5:
  if (v15 == (const void *)-2 || v10 == v14[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v15, v10))
    goto LABEL_69;
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11)
      v16 = 0;
    else
      v16 = v15 == (const void *)-2;
    if (v16)
      v11 = v14;
    v17 = v12 + v13;
    ++v12;
    v13 = v17 & v8;
    v14 = (_QWORD *)(v6 + 24 * (v17 & v8));
    v15 = (const void *)*v14;
    if (*v14 != -1)
      goto LABEL_5;
  }
LABEL_66:
  result = 0;
  if (v11)
    v14 = v11;
LABEL_70:
  *a3 = v14;
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<`anonymous namespace'::TopLevelOperationParser::parseExternalResourceFileMetadata(void)::$_0::operator() const(llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  void *Loc;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  void *__p;
  _QWORD **v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  Loc = (void *)mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(*a1 + 8) + 56));
  v4 = *(_QWORD **)(v2 + 8);
  v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3 || v5 == 12)
    goto LABEL_6;
  if (mlir::Token::isKeyword((mlir::Token *)(v4 + 7)))
  {
    v4 = *(_QWORD **)(v2 + 8);
LABEL_6:
    v7 = v4[8];
    v8 = v4[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v27);
    v9 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)(v9 + 56) = v27;
    *(_QWORD *)(v9 + 72) = v28;
    *(_QWORD *)&v27 = "expected ':'";
    LOWORD(v30) = 259;
    if (!mlir::detail::Parser::parseToken(v2, 15, (uint64_t)&v27))
      return 0;
    v10 = *(_QWORD *)(v2 + 8);
    v24 = *(_OWORD *)(v10 + 56);
    v25 = *(_QWORD *)(v10 + 72);
    mlir::Lexer::lexToken((mlir::Lexer *)(v10 + 8), (uint64_t)&v27);
    v11 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)(v11 + 56) = v27;
    *(_QWORD *)(v11 + 72) = v28;
    v12 = *(_QWORD *)a1[1];
    if (!v12)
      return 1;
    v30 = v24;
    *(_QWORD *)&v27 = off_1E0E17EE8;
    *((_QWORD *)&v27 + 1) = v7;
    v28 = v8;
    v29 = Loc;
    v31 = v25;
    v32 = v2;
    v13 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 16))(v12, &v27);
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v27);
    return v13;
  }
  *(_QWORD *)&v24 = "expected identifier key for 'external_resources' entry";
  v26 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)&v24, &v27);
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v27);
  if ((_QWORD)v27)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
  if (v37)
  {
    v15 = (_QWORD **)__p;
    if (__p)
    {
      v16 = v36;
      v17 = __p;
      if (v36 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v36 = v15;
      operator delete(v17);
    }
    v18 = v33;
    if (v33)
    {
      v19 = v34;
      v20 = v33;
      if (v34 != v33)
      {
        do
        {
          v22 = (void *)*--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            operator delete[](v21);
        }
        while (v19 != v18);
        v20 = v33;
      }
      v34 = v18;
      operator delete(v20);
    }
    if (v29 != (char *)&v30 + 8)
      free(v29);
  }
  return v13;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>,mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::InsertIntoBucket<mlir::OpAsmDialectInterface const* const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 32 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 32 * v11);
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0x3800000000;
  return a2;
}

_QWORD *llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v23 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = *(_DWORD *)(a1 + 16) - 1;
          v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          v22 = *(_QWORD *)a1 + 32 * v25;
          v26 = *(_QWORD *)v22;
          if (v23 != *(_QWORD *)v22)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v22;
              v30 = v25 + v28++;
              v25 = v30 & v24;
              v22 = *(_QWORD *)a1 + 32 * v25;
              v26 = *(_QWORD *)v22;
              if (v23 == *(_QWORD *)v22)
                goto LABEL_24;
            }
            if (v27)
              v22 = v27;
          }
LABEL_24:
          *(_QWORD *)v22 = v23;
          *(_QWORD *)(v22 + 8) = *((_QWORD *)v16 + 1);
          *(_OWORD *)(v22 + 16) = *((_OWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          *((_QWORD *)v16 + 2) = 0;
          *((_DWORD *)v16 + 6) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v18 & 0xFFFFFFFFFFFFFFELL)];
    v19 = result + 4;
    v20 = v18 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -4096;
      *v19 = -4096;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[4 * v17];
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t *llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 57), (std::align_val_t)8uLL);
    v10 = buffer + 56;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 57), (std::align_val_t)8uLL);
    v10 = buffer + 56;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *(_QWORD *)buffer = a3;
  *(_OWORD *)(buffer + 40) = 0u;
  *(_OWORD *)(buffer + 8) = 0u;
  *(_OWORD *)(buffer + 24) = 0u;
  *((_QWORD *)buffer + 5) = &mlir::detail::TypeIDResolver<void,void>::id;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

uint64_t mlir::Token::getLoc(mlir::Token *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t mlir::Token::getEndLoc(mlir::Token *this)
{
  return *((_QWORD *)this + 1) + *((_QWORD *)this + 2);
}

uint64_t mlir::Token::getLocRange(mlir::Token *this)
{
  return *((_QWORD *)this + 1);
}

unint64_t mlir::Token::getUnsignedIntegerValue(mlir::Token *this)
{
  unint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (v1 <= 1)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)this + 1);
    v6 = 0;
    if ((llvm::getAsUnsignedInteger(v4, v1, 0xAu, &v6) & 1) != 0)
      return 0;
  }
  else
  {
    v2 = (unsigned __int8 *)*((_QWORD *)this + 1);
    if (v2[1] == 120)
      v3 = 0;
    else
      v3 = 10;
    v6 = 0;
    if ((llvm::getAsUnsignedInteger(v2, v1, v3, &v6) & 1) != 0)
      return 0;
  }
  if (!HIDWORD(v6))
    return v6 | 0x100000000;
  return 0;
}

unint64_t mlir::Token::getUInt64IntegerValue(unsigned __int8 *a1, unint64_t a2)
{
  unsigned int v2;
  unint64_t v4;

  v2 = 10;
  if (a2 >= 2)
  {
    if (a1[1] == 120)
      v2 = 0;
    else
      v2 = 10;
  }
  v4 = 0;
  if (llvm::getAsUnsignedInteger(a1, a2, v2, &v4))
    return 0;
  else
    return v4;
}

uint64_t mlir::Token::getFloatingPointValue(mlir::Token *this)
{
  double v2;

  v2 = 0.0;
  if (llvm::StringRef::getAsDouble((mlir::Token *)((char *)this + 8), &v2, 1))
    return 0;
  else
    return *(_QWORD *)&v2;
}

unint64_t mlir::Token::getIntTypeBitwidth(mlir::Token *this)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;

  v1 = (_BYTE *)*((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v3 = 1;
  if (*v1 != 105)
    v3 = 2;
  if (v2 < v3)
    v3 = *((_QWORD *)this + 2);
  v5 = 0;
  if ((llvm::getAsUnsignedInteger(&v1[v3], v2 - v3, 0xAu, &v5) & 1) != 0 || HIDWORD(v5))
    return 0;
  else
    return v5 | 0x100000000;
}

uint64_t mlir::Token::getIntTypeSignedness(mlir::Token *this)
{
  int v1;

  v1 = **((unsigned __int8 **)this + 1);
  if (v1 == 105)
    return 0;
  if (v1 == 115)
    return 257;
  return 256;
}

void mlir::Token::getStringValue(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::string::size_type v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    v4 = *((_QWORD *)this + 1) + 1;
  else
    v4 = *((_QWORD *)this + 1);
  v5 = v3 - (v3 != 0);
  if (*(_DWORD *)this != 2)
  {
    if (v5 >= v5 - 1)
      --v5;
    if (*(_DWORD *)this == 4)
    {
      if (v5)
        ++v4;
      v5 -= v5 != 0;
    }
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, v5);
  if ((_DWORD)v5)
  {
    v6 = 0;
    do
    {
      v8 = *(unsigned __int8 *)(v4 + v6);
      if (v8 == 92)
      {
        v7 = v6 + 2;
        v9 = *(char *)(v4 + v6 + 1);
        if (v9 <= 109)
        {
          LOBYTE(v8) = *(_BYTE *)(v4 + v6 + 1);
          if (v9 == 34 || v9 == 92)
            goto LABEL_14;
LABEL_23:
          v10 = *(unsigned __int8 *)(v4 + v7);
          v7 = v6 + 3;
          LOWORD(v8) = llvm::hexDigitValue(char)::LUT[v10] | (16
                                                            * llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)(v4 + v6 + 1)]);
          goto LABEL_14;
        }
        if (v9 == 116)
        {
          LOBYTE(v8) = 9;
          goto LABEL_14;
        }
        if (v9 != 110)
          goto LABEL_23;
        LOBYTE(v8) = 10;
      }
      else
      {
        v7 = v6 + 1;
      }
LABEL_14:
      std::string::push_back(a2, v8);
      v6 = v7;
    }
    while (v7 != (_DWORD)v5);
  }
}

void mlir::Token::getHexStringValue(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v15;
  std::string v16;

  v4 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v5 = v3 != 0;
  v6 = v3 - v5;
  if (v6 >= v6 - 1)
    --v6;
  memset(&v16, 0, sizeof(v16));
  if (v6 < 2 || *(_WORD *)(v4 + v5) != 30768 || (v7 = v6 - 2, (((_DWORD)v6 - 2) & 1) != 0))
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else if (v6 < 3
         || ((std::string::resize(&v16, (v6 - 1) >> 1, 0),
              (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
           ? (v8 = &v16)
           : (v8 = (std::string *)v16.__r_.__value_.__r.__words[0]),
             v7 < 2))
  {
LABEL_18:
    *a2 = v16;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    v9 = -(uint64_t)(v7 >> 1);
    v10 = (unsigned __int8 *)(v5 + 2 + v4 + 1);
    while (1)
    {
      v11 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(v10 - 1)];
      v12 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*v10];
      if (v11 == 0xFFFF || v12 == 0xFFFF)
        break;
      v10 += 2;
      v8->__r_.__value_.__s.__data_[0] = v12 | (16 * v11);
      v8 = (std::string *)((char *)v8 + 1);
      if (__CFADD__(v9++, 1))
        goto LABEL_18;
    }
    v15 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    if (v15 < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void mlir::Token::getSymbolReference(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;

  v3 = *((_QWORD *)this + 2);
  v4 = v3 != 0;
  if (v3)
    v5 = (_BYTE *)(*((_QWORD *)this + 1) + 1);
  else
    v5 = (_BYTE *)*((_QWORD *)this + 1);
  if (*v5 == 34)
  {
    mlir::Token::getStringValue(this, a2);
    return;
  }
  v6 = v3 - v4;
  if ((unint64_t)(v3 - v4) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v6 >= 0x17)
  {
    v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v7 = v6 | 7;
    v8 = v7 + 1;
    v9 = (std::string *)operator new(v7 + 1);
    a2->__r_.__value_.__l.__size_ = v6;
    a2->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v6;
    if (v3 == v4)
    {
      a2->__r_.__value_.__s.__data_[v6] = 0;
      return;
    }
  }
  memmove(a2, v5, v6);
  a2->__r_.__value_.__s.__data_[v6] = 0;
}

unint64_t mlir::Token::getHashIdentifierNumber(mlir::Token *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unint64_t v4;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    v2 = (unsigned __int8 *)(*((_QWORD *)this + 1) + 1);
  else
    v2 = (unsigned __int8 *)*((_QWORD *)this + 1);
  v4 = 0;
  if ((llvm::getAsUnsignedInteger(v2, v1 - (v1 != 0), 0xAu, &v4) & 1) != 0 || HIDWORD(v4))
    return 0;
  else
    return v4 | 0x100000000;
}

char *mlir::Token::getTokenSpelling(int a1)
{
  return off_1E0E53ED0[a1 - 13];
}

BOOL mlir::Token::isKeyword(mlir::Token *this)
{
  return (*(_DWORD *)this - 34) < 0x2D;
}

BOOL mlir::Token::isCodeCompletionFor(uint64_t a1, int a2)
{
  char v2;

  if (*(_DWORD *)a1 == 2
    && *(_QWORD *)(a1 + 16)
    && (v2 = a2 - 5, (a2 - 5) <= 6)
    && ((0x4Fu >> v2) & 1) != 0)
  {
    return **(_BYTE **)(a1 + 8) == ((0x222222215E2523uLL >> (8 * v2)) & 0x7F);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::detail::Parser::parseOptionalType(mlir::detail::Parser *this, mlir::Type *a2)
{
  int v2;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t result;

  v2 = 0;
  v4 = 0;
  switch(*(_DWORD *)(*((_QWORD *)this + 1) + 56))
  {
    case 8:
    case 0xC:
    case 0x26:
    case 0x28:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x3A:
    case 0x3D:
    case 0x40:
    case 0x47:
    case 0x48:
    case 0x4B:
    case 0x4E:
      v5 = mlir::detail::Parser::parseNonFunctionType(this);
      goto LABEL_3;
    case 9:
    case 0xA:
    case 0xB:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x27:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x49:
    case 0x4A:
    case 0x4C:
    case 0x4D:
      goto LABEL_4;
    case 0x15:
      v5 = mlir::detail::Parser::parseFunctionType(this);
LABEL_3:
      *(_QWORD *)a2 = v5;
      v4 = v5 != 0;
      v2 = 1;
LABEL_4:
      result = v4 | (v2 << 8);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseType(mlir::detail::Parser *this)
{
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
    return mlir::detail::Parser::parseFunctionType(this);
  else
    return mlir::detail::Parser::parseNonFunctionType(this);
}

uint64_t mlir::detail::Parser::parseFunctionType(mlir::detail::Parser *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t FunctionType;
  void *v5;
  uint64_t v7;
  const char *v8;
  __int16 v9;
  unint64_t v10[2];
  unint64_t v11[2];
  void *v12;
  uint64_t v13;
  _BYTE v14[32];
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x400000000;
  v12 = v14;
  v13 = 0x400000000;
  if (!mlir::detail::Parser::parseTypeListParens((uint64_t)this, (uint64_t)&v15)
    || (v8 = "expected '->' in function type",
        v9 = 259,
        !mlir::detail::Parser::parseToken((uint64_t)this, 13, (uint64_t)&v8)))
  {
LABEL_12:
    FunctionType = 0;
    v5 = v12;
    if (v12 == v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
  {
    if (!mlir::detail::Parser::parseTypeListParens((uint64_t)this, (uint64_t)&v12))
      goto LABEL_12;
  }
  else
  {
    v2 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v2)
      goto LABEL_12;
    v3 = v13;
    if (v13 >= HIDWORD(v13))
    {
      v7 = v2;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, v14, v13 + 1, 8);
      v2 = v7;
      v3 = v13;
    }
    *((_QWORD *)v12 + v3) = v2;
    LODWORD(v13) = v13 + 1;
  }
  mlir::ValueRange::ValueRange(v11, (uint64_t)v15, v16);
  mlir::ValueRange::ValueRange(v10, (uint64_t)v12, v13);
  FunctionType = mlir::Builder::getFunctionType((mlir::MLIRContext **)this, v11[0], v11[1], v10[0], v10[1]);
  v5 = v12;
  if (v12 != v14)
LABEL_13:
    free(v5);
LABEL_14:
  if (v15 != v17)
    free(v15);
  return FunctionType;
}

uint64_t mlir::detail::Parser::parseNonFunctionType(mlir::detail::Parser *this)
{
  uint64_t v2;
  mlir::Token *v3;
  uint64_t result;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t IntTypeBitwidth;
  unsigned int v14;
  const char *Loc;
  uint64_t v16;
  uint64_t v17;
  mlir::MLIRContext *v18;
  uint64_t v19;
  mlir::MLIRContext *v20;
  uint64_t v21;
  mlir::MLIRContext *v22;
  uint64_t v23;
  mlir::MLIRContext *v24;
  uint64_t v25;
  mlir::MLIRContext *v26;
  uint64_t v27;
  mlir::MLIRContext *v28;
  uint64_t v29;
  mlir::MLIRContext *v30;
  uint64_t v31;
  mlir::MLIRContext *v32;
  uint64_t v33;
  mlir::MLIRContext *v34;
  uint64_t v35;
  mlir::MLIRContext *v36;
  uint64_t v37;
  mlir::MLIRContext *v38;
  uint64_t v39;
  mlir::MLIRContext *v40;
  uint64_t v41;
  mlir::MLIRContext *v42;
  uint64_t v43;
  mlir::MLIRContext *v44;
  __int16 IntTypeSignedness;
  int v46;
  unsigned int v47;
  uint64_t v48;
  const char *v49;
  __int16 v50;
  __int128 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD **v61;
  _QWORD **v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  v3 = (mlir::Token *)(v2 + 56);
  switch(*(_DWORD *)(v2 + 56))
  {
    case 2:
      if (mlir::Token::isCodeCompletionFor((uint64_t)v3, 8))
        goto LABEL_3;
      result = mlir::detail::Parser::codeCompleteType(this);
      break;
    case 8:
LABEL_3:
      result = mlir::detail::Parser::parseExtendedType(this);
      break;
    case 0xC:
      IntTypeBitwidth = mlir::Token::getIntTypeBitwidth(v3);
      if ((IntTypeBitwidth & 0xFF00000000) == 0)
      {
        *(_QWORD *)&v51 = "invalid integer width";
        v53 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v51, &v54);
        if (v54)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v55);
        goto LABEL_55;
      }
      v14 = IntTypeBitwidth;
      if (BYTE3(IntTypeBitwidth))
      {
        Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
        v49 = "integer bitwidth is limited to ";
        v50 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, Loc, (uint64_t)&v49, &v51);
        v16 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&v51, &mlir::IntegerType::kMaxWidth);
        mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v16, " bits");
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v51);
        goto LABEL_55;
      }
      IntTypeSignedness = mlir::Token::getIntTypeSignedness((mlir::Token *)(*((_QWORD *)this + 1) + 56));
      if ((_BYTE)IntTypeSignedness)
        v46 = 1;
      else
        v46 = 2;
      if ((IntTypeSignedness & 0xFF00) != 0)
        v47 = v46;
      else
        v47 = 0;
      mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v51);
      v48 = *((_QWORD *)this + 1);
      *(_OWORD *)(v48 + 56) = v51;
      *(_QWORD *)(v48 + 72) = v52;
      result = mlir::IntegerType::get(***((_QWORD ***)this + 1), v14, v47);
      break;
    case 0x26:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v17 = *((_QWORD *)this + 1);
      *(_OWORD *)(v17 + 56) = v51;
      *(_QWORD *)(v17 + 72) = v52;
      result = mlir::Builder::getBF16Type((mlir::BFloat16Type **)this, v18);
      break;
    case 0x28:
      result = mlir::detail::Parser::parseComplexType(this);
      break;
    case 0x2C:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v19 = *((_QWORD *)this + 1);
      *(_OWORD *)(v19 + 56) = v51;
      *(_QWORD *)(v19 + 72) = v52;
      result = mlir::Builder::getF16Type((mlir::Float16Type **)this, v20);
      break;
    case 0x2D:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v21 = *((_QWORD *)this + 1);
      *(_OWORD *)(v21 + 56) = v51;
      *(_QWORD *)(v21 + 72) = v52;
      result = mlir::Builder::getF32Type((mlir::Float32Type **)this, v22);
      break;
    case 0x2E:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v23 = *((_QWORD *)this + 1);
      *(_OWORD *)(v23 + 56) = v51;
      *(_QWORD *)(v23 + 72) = v52;
      result = mlir::Builder::getF64Type((mlir::Float64Type **)this, v24);
      break;
    case 0x2F:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v25 = *((_QWORD *)this + 1);
      *(_OWORD *)(v25 + 56) = v51;
      *(_QWORD *)(v25 + 72) = v52;
      result = mlir::Builder::getF80Type((mlir::Float80Type **)this, v26);
      break;
    case 0x30:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v27 = *((_QWORD *)this + 1);
      *(_OWORD *)(v27 + 56) = v51;
      *(_QWORD *)(v27 + 72) = v52;
      result = mlir::Builder::getFloat8E5M2Type((mlir::Float8E5M2Type **)this, v28);
      break;
    case 0x31:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v29 = *((_QWORD *)this + 1);
      *(_OWORD *)(v29 + 56) = v51;
      *(_QWORD *)(v29 + 72) = v52;
      result = mlir::Builder::getFloat8E4M3FNType((mlir::Float8E4M3FNType **)this, v30);
      break;
    case 0x32:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v31 = *((_QWORD *)this + 1);
      *(_OWORD *)(v31 + 56) = v51;
      *(_QWORD *)(v31 + 72) = v52;
      result = mlir::Builder::getFloat8E5M2FNUZType((mlir::Float8E5M2FNUZType **)this, v32);
      break;
    case 0x33:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v33 = *((_QWORD *)this + 1);
      *(_OWORD *)(v33 + 56) = v51;
      *(_QWORD *)(v33 + 72) = v52;
      result = mlir::Builder::getFloat8E4M3FNUZType((mlir::Float8E4M3FNUZType **)this, v34);
      break;
    case 0x34:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v35 = *((_QWORD *)this + 1);
      *(_OWORD *)(v35 + 56) = v51;
      *(_QWORD *)(v35 + 72) = v52;
      result = mlir::Builder::getFloat8E4M3B11FNUZType((mlir::Float8E4M3B11FNUZType **)this, v36);
      break;
    case 0x35:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v37 = *((_QWORD *)this + 1);
      *(_OWORD *)(v37 + 56) = v51;
      *(_QWORD *)(v37 + 72) = v52;
      result = mlir::Builder::getF128Type((mlir::Float128Type **)this, v38);
      break;
    case 0x3A:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v39 = *((_QWORD *)this + 1);
      *(_OWORD *)(v39 + 56) = v51;
      *(_QWORD *)(v39 + 72) = v52;
      result = mlir::Builder::getIndexType((mlir::IndexType **)this, v40);
      break;
    case 0x3D:
      result = mlir::detail::Parser::parseMemRefType(this);
      break;
    case 0x40:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v41 = *((_QWORD *)this + 1);
      *(_OWORD *)(v41 + 56) = v51;
      *(_QWORD *)(v41 + 72) = v52;
      result = mlir::Builder::getNoneType((mlir::NoneType **)this, v42);
      break;
    case 0x47:
      result = mlir::detail::Parser::parseTensorType(this);
      break;
    case 0x48:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      v43 = *((_QWORD *)this + 1);
      *(_OWORD *)(v43 + 56) = v51;
      *(_QWORD *)(v43 + 72) = v52;
      result = mlir::Builder::getTF32Type((mlir::FloatTF32Type **)this, v44);
      break;
    case 0x4B:
      result = mlir::detail::Parser::parseTupleType(this);
      break;
    case 0x4E:
      result = mlir::detail::Parser::parseVectorType(this);
      break;
    default:
      *(_QWORD *)&v51 = "expected non-function type";
      v53 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v51, v56);
      if (v56[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v56);
      if (v63)
      {
        v5 = v61;
        if (v61)
        {
          v6 = v62;
          v7 = v61;
          if (v62 != v61)
          {
            do
              v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
            while (v6 != v5);
            v7 = v61;
          }
          v62 = v5;
          operator delete(v7);
        }
        v8 = v59;
        if (v59)
        {
          v9 = v60;
          v10 = v59;
          if (v60 != v59)
          {
            do
            {
              v12 = (void *)*--v9;
              v11 = v12;
              *v9 = 0;
              if (v12)
                operator delete[](v11);
            }
            while (v9 != v8);
            v10 = v59;
          }
          v60 = v8;
          operator delete(v10);
        }
        if (v57 != &v58)
          free(v57);
      }
LABEL_55:
      result = 0;
      break;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseFunctionResultTypes(mlir::detail::Parser *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 56) == 21)
    return mlir::detail::Parser::parseTypeListParens((uint64_t)a1, a2);
  result = mlir::detail::Parser::parseNonFunctionType(a1);
  if (result)
  {
    v4 = result;
    v5 = *(unsigned int *)(a2 + 8);
    if (v5 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v4;
    ++*(_DWORD *)(a2 + 8);
    return 1;
  }
  return result;
}

BOOL mlir::detail::Parser::parseTypeListParens(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int16 v9;

  *(_QWORD *)&v7 = "expected '('";
  v9 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v7))
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
    v5 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(v5 + 56) = v7;
    *(_QWORD *)(v5 + 72) = v8;
    return 1;
  }
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = a2;
  if (!mlir::detail::Parser::parseCommaSeparatedList(a1, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)&v7, 0, 0))return 0;
  *(_QWORD *)&v7 = "expected ')'";
  v9 = 259;
  return mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v7) != 0;
}

uint64_t mlir::detail::Parser::parseTypeListNoParens(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  return mlir::detail::Parser::parseCommaSeparatedList(a1, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v3, 0, 0);
}

uint64_t mlir::detail::Parser::parseComplexType(mlir::detail::Parser *this)
{
  uint64_t v2;
  const char *Loc;
  uint64_t v4;
  void *v5;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  __int128 v27;
  uint64_t v28;
  __int16 v29;
  _QWORD v30[3];
  void *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  void *__p;
  _QWORD **v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v27);
  v2 = *((_QWORD *)this + 1);
  *(_OWORD *)(v2 + 56) = v27;
  *(_QWORD *)(v2 + 72) = v28;
  *(_QWORD *)&v27 = "expected '<' in complex type";
  v29 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v27))
    return 0;
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
  {
    v4 = mlir::detail::Parser::parseFunctionType(this);
    if (!v4)
      return 0;
  }
  else
  {
    v4 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v4)
      return 0;
  }
  *(_QWORD *)&v27 = "expected '>' in complex type";
  v29 = 259;
  if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v27))
  {
    v5 = *(void **)(*(_QWORD *)v4 + 136);
    if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return mlir::ComplexType::get(v4);
    }
    *(_QWORD *)&v27 = "invalid element type for complex";
    v29 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, Loc, (uint64_t)&v27, v30);
    if (v30[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    if (v37)
    {
      v19 = (_QWORD **)__p;
      if (__p)
      {
        v20 = v36;
        v21 = __p;
        if (v36 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v36 = v19;
        operator delete(v21);
      }
      v22 = v33;
      if (v33)
      {
        v23 = v34;
        v24 = v33;
        if (v34 != v33)
        {
          do
          {
            v26 = (void *)*--v23;
            v25 = v26;
            *v23 = 0;
            if (v26)
              operator delete[](v25);
          }
          while (v23 != v22);
          v24 = v33;
        }
        v34 = v22;
        operator delete(v24);
      }
      if (v31 != &v32)
        free(v31);
    }
  }
  return 0;
}

uint64_t mlir::detail::Parser::parseMemRefType(mlir::detail::Parser *this)
{
  uint64_t Loc;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t Checked;
  void *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 *v31;
  __int16 v32;
  char v33;
  uint64_t v34;
  _QWORD v35[3];
  void *v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  void *__p;
  _QWORD **v41;
  char v42;
  __int128 v43;
  _QWORD v44[2];
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  Loc = mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v43);
  v3 = *((_QWORD *)this + 1);
  *(_OWORD *)(v3 + 56) = v43;
  *(_QWORD *)(v3 + 72) = v44[0];
  *(_QWORD *)&v43 = "expected '<' in memref type";
  v45 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v43))
    return 0;
  *(_QWORD *)&v43 = v44;
  *((_QWORD *)&v43 + 1) = 0x400000000;
  v4 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v4 + 56) == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v30);
    v5 = *((_QWORD *)this + 1);
    *(_OWORD *)(v5 + 56) = v30;
    *(_QWORD *)(v5 + 72) = v31;
    v33 = 1;
    if (!mlir::detail::Parser::parseXInDimensionList(this))
      goto LABEL_55;
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    v33 = 0;
    LOBYTE(v26[0]) = 1;
    *(_QWORD *)&v30 = this;
    *((_QWORD *)&v30 + 1) = v26;
    v31 = &v43;
    while (1)
    {
      v6 = *((_QWORD *)this + 1);
      if ((*(_DWORD *)(v6 + 56) | 0x10) != 0x1A)
        break;
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)&v30)
        || !mlir::detail::Parser::parseXInDimensionList(this))
      {
        goto LABEL_55;
      }
    }
  }
  v7 = (const char *)mlir::Token::getLoc((mlir::Token *)(v6 + 56));
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
  {
    v8 = mlir::detail::Parser::parseFunctionType(this);
    if (!v8)
      goto LABEL_55;
  }
  else
  {
    v8 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v8)
      goto LABEL_55;
  }
  *(_QWORD *)&v30 = v8;
  if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v30)
    || ((v10 = *(void **)(*(_QWORD *)v30 + 136), v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      ? (v11 = v10 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      : (v11 = 1),
        !v11 ? (v12 = v10 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (v12 = 1),
        !v12 ? (v13 = v10 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) : (v13 = 1),
        v13 || mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(*(_QWORD *)v30 + 8)))
  {
    v28 = 0;
    v29 = 0;
    v26[0] = this;
    v26[1] = &v28;
    v26[2] = &v27;
    v26[3] = &v33;
    v27 = 0;
    v14 = *((_QWORD *)this + 1);
    if (*(_DWORD *)(v14 + 56) == 19)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v30);
      v15 = *((_QWORD *)this + 1);
      *(_OWORD *)(v15 + 56) = v30;
      *(_QWORD *)(v15 + 72) = v31;
    }
    else
    {
      *(_QWORD *)&v30 = "expected ',' or '>' in memref type";
      v32 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)this, 16, (uint64_t)&v30)
        || !mlir::detail::Parser::parseCommaSeparatedListUntil((uint64_t)this, 19, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseMemRefType(void)::$_0>, (uint64_t)v26, 0))
      {
        goto LABEL_55;
      }
    }
    if (v33)
    {
      v34 = Loc;
      *(_QWORD *)&v30 = this;
      *((_QWORD *)&v30 + 1) = &v34;
      Checked = mlir::UnrankedMemRefType::getChecked((void (*)(_QWORD *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::UnrankedMemRefType mlir::detail::Parser::getChecked<mlir::UnrankedMemRefType,mlir::Type &,mlir::Attribute &>(llvm::SMLoc,mlir::Type &,mlir::Attribute &)::{lambda(void)#1}>, (uint64_t)&v30, v8, v27);
      v16 = (void *)v43;
      if ((_QWORD *)v43 == v44)
        return Checked;
    }
    else
    {
      v34 = Loc;
      *(_QWORD *)&v30 = this;
      *((_QWORD *)&v30 + 1) = &v34;
      Checked = mlir::MemRefType::getChecked((void (*)(_QWORD *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::MemRefType mlir::detail::Parser::getChecked<mlir::MemRefType,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::SMLoc,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(void)#1}>, (uint64_t)&v30, v43, (mlir::AffineMap *)DWORD2(v43), v8, v28, v29, v27);
      v16 = (void *)v43;
      if ((_QWORD *)v43 == v44)
        return Checked;
    }
    goto LABEL_56;
  }
  *(_QWORD *)&v30 = "invalid memref element type";
  v32 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, v7, (uint64_t)&v30, v35);
  if (v35[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v35);
  if (v42)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v41;
      v19 = __p;
      if (v41 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v41 = v17;
      operator delete(v19);
    }
    v20 = v38;
    if (v38)
    {
      v21 = v39;
      v22 = v38;
      if (v39 != v38)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v38;
      }
      v39 = v20;
      operator delete(v22);
    }
    if (v36 != &v37)
      free(v36);
  }
LABEL_55:
  Checked = 0;
  v16 = (void *)v43;
  if ((_QWORD *)v43 != v44)
LABEL_56:
    free(v16);
  return Checked;
}

uint64_t mlir::detail::Parser::parseXInDimensionList(mlir::detail::Parser *this)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  const char *v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v2 + 56) == 3 && (v3 = *(_BYTE **)(v2 + 64), *v3 == 120))
  {
    if (*(_QWORD *)(v2 + 72) != 1)
      *(_QWORD *)(v2 + 40) = v3 + 1;
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v17);
    v4 = *((_QWORD *)this + 1);
    *(_OWORD *)(v4 + 56) = v17;
    *(_QWORD *)(v4 + 72) = v18;
    return 1;
  }
  else
  {
    v15 = "expected 'x' in dimension list";
    v16 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v15, &v17);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
    if ((_QWORD)v17)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
    if (v25)
    {
      v6 = (_QWORD **)__p;
      if (__p)
      {
        v7 = v24;
        v8 = __p;
        if (v24 != __p)
        {
          do
            v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          v8 = __p;
        }
        v24 = v6;
        operator delete(v8);
      }
      v9 = v21;
      if (v21)
      {
        v10 = v22;
        v11 = v21;
        if (v22 != v21)
        {
          do
          {
            v13 = (void *)*--v10;
            v12 = v13;
            *v10 = 0;
            if (v13)
              operator delete[](v12);
          }
          while (v10 != v9);
          v11 = v21;
        }
        v22 = v9;
        operator delete(v11);
      }
      if (v19 != &v20)
        free(v19);
    }
  }
  return v5;
}

uint64_t mlir::detail::Parser::parseDimensionListRanked(mlir::detail::Parser *a1, uint64_t a2, char a3, int a4)
{
  uint64_t v5;
  _QWORD v7[3];
  char v8;

  v8 = a3;
  v7[0] = a1;
  v7[1] = &v8;
  v7[2] = a2;
  if (a4)
  {
    while ((*(_DWORD *)(*((_QWORD *)a1 + 1) + 56) | 0x10) == 0x1A)
    {
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)v7)
        || !mlir::detail::Parser::parseXInDimensionList(a1))
      {
        return 0;
      }
    }
    return 1;
  }
  if ((*(_DWORD *)(*((_QWORD *)a1 + 1) + 56) | 0x10) != 0x1A)
    return 1;
  do
  {
    if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)v7))
      break;
    v5 = *((_QWORD *)a1 + 1);
    if (*(_DWORD *)(v5 + 56) != 3 || **(_BYTE **)(v5 + 64) != 120)
      return 1;
  }
  while (mlir::detail::Parser::parseXInDimensionList(a1));
  return 0;
}

uint64_t mlir::detail::Parser::parseTensorType(mlir::detail::Parser *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *Loc;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  __int128 v26;
  __int128 *v27;
  __int16 v28;
  mlir::detail::Parser *v29;
  _QWORD *v30;
  _QWORD v31[24];
  _QWORD v32[3];
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  void *__p;
  _QWORD **v38;
  char v39;
  __int128 v40;
  _QWORD v41[2];
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v40);
  v2 = *((_QWORD *)this + 1);
  *(_OWORD *)(v2 + 56) = v40;
  *(_QWORD *)(v2 + 72) = v41[0];
  *(_QWORD *)&v40 = "expected '<' in tensor type";
  v42 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v40))
    return 0;
  *(_QWORD *)&v40 = v41;
  *((_QWORD *)&v40 + 1) = 0x400000000;
  v3 = *((_QWORD *)this + 1);
  v4 = *(_DWORD *)(v3 + 56);
  if (v4 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v26);
    v5 = *((_QWORD *)this + 1);
    *(_OWORD *)(v5 + 56) = v26;
    *(_QWORD *)(v5 + 72) = v27;
    if (!mlir::detail::Parser::parseXInDimensionList(this))
      goto LABEL_51;
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    LOBYTE(v30) = 1;
    *(_QWORD *)&v26 = this;
    *((_QWORD *)&v26 + 1) = &v30;
    v27 = &v40;
    while (1)
    {
      v6 = *((_QWORD *)this + 1);
      if ((*(_DWORD *)(v6 + 56) | 0x10) != 0x1A)
        break;
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)&v26)
        || !mlir::detail::Parser::parseXInDimensionList(this))
      {
        goto LABEL_51;
      }
    }
  }
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(v6 + 56));
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
  {
    v8 = (uint64_t *)mlir::detail::Parser::parseFunctionType(this);
    v30 = 0;
    v9 = *((_QWORD *)this + 1);
    if (*(_DWORD *)(v9 + 56) != 16)
      goto LABEL_16;
  }
  else
  {
    v8 = (uint64_t *)mlir::detail::Parser::parseNonFunctionType(this);
    v30 = 0;
    v9 = *((_QWORD *)this + 1);
    if (*(_DWORD *)(v9 + 56) != 16)
      goto LABEL_16;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v9 + 8), (uint64_t)&v26);
  v11 = *((_QWORD *)this + 1);
  *(_OWORD *)(v11 + 56) = v26;
  *(_QWORD *)(v11 + 72) = v27;
  v12 = mlir::detail::Parser::parseOptionalAttribute(this, (uint64_t *)&v30, 0);
  if (v12 < 0x100u
    || (_BYTE)v12
    && ((v14 = v30) == 0
      ? (_QWORD *)(v15 = 0)
      : (v15 = mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(*v30 + 8)) == 0
      ? (v14 = 0)
      : (_QWORD *)(v15 = mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(*v14 + 8)),
        (*(_QWORD *)&v26 = v14, *((_QWORD *)&v26 + 1) = v15, !v14)
     || (v29 = this,
         mlir::VerifiableTensorEncoding::verifyEncoding((uint64_t)&v26, v40, DWORD2(v40), (uint64_t)v8, (uint64_t)llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseTensorType(void)::$_0>, (uint64_t)&v29))))
  {
LABEL_16:
    if (v8)
    {
      *(_QWORD *)&v26 = "expected '>' in tensor type";
      v28 = 259;
      if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v26))
      {
        if (mlir::TensorType::isValidElementType(v8))
        {
          if (v4 == 30)
          {
            if (v30)
            {
              *(_QWORD *)&v26 = "cannot apply encoding to unranked tensor";
              v28 = 259;
              mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v26, v31);
              mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v31);
              v10 = 0;
              v13 = (void *)v40;
              if ((_QWORD *)v40 == v41)
                return v10;
              goto LABEL_52;
            }
            v24 = mlir::UnrankedTensorType::get((uint64_t)v8);
          }
          else
          {
            v24 = mlir::RankedTensorType::get(v40, DWORD2(v40), (uint64_t)v8, (uint64_t)v30);
          }
          v10 = v24;
          v13 = (void *)v40;
          if ((_QWORD *)v40 == v41)
            return v10;
LABEL_52:
          free(v13);
          return v10;
        }
        *(_QWORD *)&v26 = "invalid tensor element type";
        v28 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, Loc, (uint64_t)&v26, v32);
        if (v32[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
        if (v39)
        {
          v16 = (_QWORD **)__p;
          if (__p)
          {
            v17 = v38;
            v18 = __p;
            if (v38 != __p)
            {
              do
                v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
              while (v17 != v16);
              v18 = __p;
            }
            v38 = v16;
            operator delete(v18);
          }
          v19 = v35;
          if (v35)
          {
            v20 = v36;
            v21 = v35;
            if (v36 != v35)
            {
              do
              {
                v23 = (void *)*--v20;
                v22 = v23;
                *v20 = 0;
                if (v23)
                  operator delete[](v22);
              }
              while (v20 != v19);
              v21 = v35;
            }
            v36 = v19;
            operator delete(v21);
          }
          if (v33 != &v34)
          {
            free(v33);
            v10 = 0;
            v13 = (void *)v40;
            if ((_QWORD *)v40 == v41)
              return v10;
            goto LABEL_52;
          }
        }
      }
    }
  }
LABEL_51:
  v10 = 0;
  v13 = (void *)v40;
  if ((_QWORD *)v40 != v41)
    goto LABEL_52;
  return v10;
}

uint64_t mlir::detail::Parser::parseTupleType(mlir::detail::Parser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  mlir::MLIRContext *v5;
  uint64_t v6;
  mlir::MLIRContext *v7;
  void *v8;
  _QWORD v10[4];
  __int16 v11;
  unint64_t v12[2];
  void *v13[2];
  _QWORD v14[2];
  __int16 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)v13);
  v2 = *((_QWORD *)this + 1);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v13;
  *(_QWORD *)(v2 + 72) = v14[0];
  v13[0] = "expected '<' in tuple type";
  v15 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)v13))
    return 0;
  v3 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v3 + 56) != 19)
  {
    v13[0] = v14;
    v13[1] = (void *)0x400000000;
    v10[0] = this;
    v10[1] = v13;
    if (mlir::detail::Parser::parseCommaSeparatedList((uint64_t)this, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v10, 0, 0)&& (v10[0] = "expected '>' in tuple type", v11 = 259, mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)v10)))
    {
      v7 = (mlir::MLIRContext *)***((_QWORD ***)this + 1);
      mlir::ValueRange::ValueRange(v12, (uint64_t)v13[0], LODWORD(v13[1]));
      v6 = mlir::TupleType::get(v7, v12[0], v12[1]);
      v8 = v13[0];
      if (v13[0] == v14)
        return v6;
    }
    else
    {
      v6 = 0;
      v8 = v13[0];
      if (v13[0] == v14)
        return v6;
    }
    free(v8);
    return v6;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)v13);
  v4 = *((_QWORD *)this + 1);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)v13;
  *(_QWORD *)(v4 + 72) = v14[0];
  return mlir::TupleType::get(***((mlir::TupleType ****)this + 1), v5);
}

uint64_t mlir::detail::Parser::parseVectorType(mlir::detail::Parser *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v22;
  const char *Loc;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v33[4];
  __int16 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[24];
  _QWORD v39[3];
  void *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  void *__p;
  _QWORD **v45;
  char v46;
  __int128 v47;
  _QWORD v48[2];
  __int16 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((_QWORD *)this + 1) + 8), (uint64_t)&v47);
  v2 = *((_QWORD *)this + 1);
  *(_OWORD *)(v2 + 56) = v47;
  *(_QWORD *)(v2 + 72) = v48[0];
  *(_QWORD *)&v47 = "expected '<' in vector type";
  v49 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v47))
    return 0;
  *(_QWORD *)&v47 = v48;
  *((_QWORD *)&v47 + 1) = 0x400000000;
  v35 = &v37;
  v36 = xmmword_181234800;
  if (!mlir::detail::Parser::parseVectorDimensionList(this, (uint64_t)&v47, &v35))
  {
LABEL_74:
    v7 = 0;
    v22 = v35;
    if (v35 == &v37)
      goto LABEL_76;
    goto LABEL_75;
  }
  if (DWORD2(v47))
  {
    v3 = (uint64_t *)v47;
    v4 = 8 * DWORD2(v47);
    while (*v3 > 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_7;
    }
    Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
    v33[0] = "vector types must have positive constant sizes";
    v34 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, Loc, (uint64_t)v33, v39);
    if (v39[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v39);
    if (v46)
    {
      v24 = (_QWORD **)__p;
      if (__p)
      {
        v25 = v45;
        v26 = __p;
        if (v45 != __p)
        {
          do
            v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          v26 = __p;
        }
        v45 = v24;
        operator delete(v26);
      }
      v27 = v42;
      if (v42)
      {
        v28 = v43;
        v29 = v42;
        if (v43 != v42)
        {
          do
          {
            v31 = (void *)*--v28;
            v30 = v31;
            *v28 = 0;
            if (v31)
              operator delete[](v30);
          }
          while (v28 != v27);
          v29 = v42;
        }
        v43 = v27;
        operator delete(v29);
      }
      if (v40 != &v41)
        free(v40);
    }
    goto LABEL_74;
  }
LABEL_7:
  v5 = (const char *)mlir::Token::getLoc((mlir::Token *)(*((_QWORD *)this + 1) + 56));
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 56) == 21)
  {
    v6 = mlir::detail::Parser::parseFunctionType(this);
    if (!v6)
      goto LABEL_74;
  }
  else
  {
    v6 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v6)
      goto LABEL_74;
  }
  v33[0] = "expected '>' in vector type";
  v34 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)v33))
    goto LABEL_74;
  v8 = *(void **)(*(_QWORD *)v6 + 136);
  if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v7 = mlir::VectorType::get(v47, DWORD2(v47), v6, v35, v36);
    v22 = v35;
    if (v35 == &v37)
      goto LABEL_76;
LABEL_75:
    free(v22);
    goto LABEL_76;
  }
  v33[0] = "vector elements must be int/index/float type";
  v34 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, v5, (uint64_t)v33, v38);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v38);
  v7 = 0;
  v22 = v35;
  if (v35 != &v37)
    goto LABEL_75;
LABEL_76:
  if ((_QWORD *)v47 != v48)
    free((void *)v47);
  return v7;
}

uint64_t mlir::InFlightDiagnostic::operator<<<unsigned int const&>(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v11;
  BOOL v12;
  char *v13;
  int v14;
  uint64_t v15;

  if (*(_QWORD *)a1)
  {
    v3 = a1 + 24;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *a2;
    v14 = 5;
    v15 = v5;
    v6 = *(unsigned int *)(a1 + 32);
    v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      v11 = v6 + 1;
      v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        v4 = *(_QWORD *)(a1 + 24);
        v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        v4 = *(_QWORD *)(a1 + 24);
        v7 = &v14;
      }
    }
    v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    v9 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::detail::Parser::parseVectorDimensionList(mlir::detail::Parser *a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  void *__p;
  _QWORD **v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = (void *)(a2 + 16);
  v7 = a3 + 3;
  while (1)
  {
    v8 = *((_QWORD *)a1 + 1);
    v9 = *(_DWORD *)(v8 + 56);
    if (v9 == 22)
    {
      v29 = 0;
      mlir::Lexer::lexToken((mlir::Lexer *)(v8 + 8), (uint64_t)&v30);
      v11 = *((_QWORD *)a1 + 1);
      *(_OWORD *)(v11 + 56) = v30;
      *(_QWORD *)(v11 + 72) = v31;
      v10 = 1;
      if (!mlir::detail::Parser::parseIntegerInDimensionList(a1, (unint64_t *)&v29))
        return 0;
    }
    else
    {
      if (v9 != 10)
        return 1;
      v10 = 0;
      v29 = 0;
      if (!mlir::detail::Parser::parseIntegerInDimensionList(a1, (unint64_t *)&v29))
        return 0;
    }
    v12 = v29;
    v13 = *(unsigned int *)(a2 + 8);
    if (v13 >= *(unsigned int *)(a2 + 12))
      break;
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = v29;
    ++*(_DWORD *)(a2 + 8);
    if (v10)
      goto LABEL_9;
LABEL_11:
    v16 = a3[1];
    if ((unint64_t)(v16 + 1) > a3[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, v7, v16 + 1, 1);
      v16 = a3[1];
    }
    *(_BYTE *)(*a3 + v16) = v10;
    ++a3[1];
    if (!mlir::detail::Parser::parseXInDimensionList(a1))
      return 0;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v13 + 1, 8);
  *(_QWORD *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 8))++) = v12;
  if (!v10)
    goto LABEL_11;
LABEL_9:
  v14 = *((_QWORD *)a1 + 1);
  if (*(_DWORD *)(v14 + 56) == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v30);
    v15 = *((_QWORD *)a1 + 1);
    *(_OWORD *)(v15 + 56) = v30;
    *(_QWORD *)(v15 + 72) = v31;
    goto LABEL_11;
  }
  v27 = "missing ']' closing scalable dimension";
  v28 = 259;
  mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v27, &v30);
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
  if ((_QWORD)v30)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
  if (v38)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v37;
      v20 = __p;
      if (v37 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v37 = v18;
      operator delete(v20);
    }
    v21 = v34;
    if (v34)
    {
      v22 = v35;
      v23 = v34;
      if (v35 != v34)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v34;
      }
      v35 = v21;
      operator delete(v23);
    }
    if (v32 != &v33)
      free(v32);
  }
  return v17;
}

uint64_t mlir::detail::Parser::parseIntegerInDimensionList(mlir::detail::Parser *this, unint64_t *a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  mlir::Lexer *v8;
  unint64_t UInt64IntegerValue;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  const char *v22;
  __int16 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = (unsigned __int8 *)v4[8];
  v6 = v4[9];
  if (v6 >= 2)
  {
    v7 = v5 + 1;
    if (v5[1] == 120)
    {
      *a2 = 0;
      v8 = (mlir::Lexer *)(v4 + 1);
      v4[5] = v7;
LABEL_7:
      mlir::Lexer::lexToken(v8, (uint64_t)&v24);
      v11 = *((_QWORD *)this + 1);
      *(_OWORD *)(v11 + 56) = v24;
      *(_QWORD *)(v11 + 72) = v25;
      return 1;
    }
  }
  UInt64IntegerValue = mlir::Token::getUInt64IntegerValue(v5, v6);
  if (v10 && (UInt64IntegerValue & 0x8000000000000000) == 0)
  {
    *a2 = UInt64IntegerValue;
    v8 = (mlir::Lexer *)(*((_QWORD *)this + 1) + 8);
    goto LABEL_7;
  }
  v22 = "invalid dimension";
  v23 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v22, &v24);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v24);
  if ((_QWORD)v24)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  if (v32)
  {
    v14 = (_QWORD **)__p;
    if (__p)
    {
      v15 = v31;
      v16 = __p;
      if (v31 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v31 = v14;
      operator delete(v16);
    }
    v17 = v28;
    if (v28)
    {
      v18 = v29;
      v19 = v28;
      if (v29 != v28)
      {
        do
        {
          v21 = (void *)*--v18;
          v20 = v21;
          *v18 = 0;
          if (v21)
            operator delete[](v20);
        }
        while (v18 != v17);
        v19 = v28;
      }
      v29 = v17;
      operator delete(v19);
    }
    if (v26 != &v27)
      free(v26);
  }
  return v12;
}

uint64_t mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()(uint64_t a1)
{
  mlir::detail::Parser *v2;
  uint64_t Loc;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  const char *v21;
  __int16 v22;
  uint64_t v23[2];
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *__p;
  _QWORD **v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(mlir::detail::Parser **)a1;
  Loc = mlir::Token::getLoc((mlir::Token *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 56));
  v4 = *((_QWORD *)v2 + 1);
  if (*(_DWORD *)(v4 + 56) != 26)
  {
    v23[0] = 0;
    if (!mlir::detail::Parser::parseIntegerInDimensionList(v2, (unint64_t *)v23))
      return 0;
    v7 = *(_QWORD *)(a1 + 16);
    v9 = v23[0];
    v10 = *(unsigned int *)(v7 + 8);
    if (v10 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(v7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v10) = v9;
    goto LABEL_10;
  }
  v5 = (const char *)Loc;
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)v23);
  v6 = *((_QWORD *)v2 + 1);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)v23;
  *(_QWORD *)(v6 + 72) = v24;
  if (**(_BYTE **)(a1 + 8))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(unsigned int *)(v7 + 8);
    if (v8 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 16), (void *)(v7 + 16), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(v7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = 0x8000000000000000;
LABEL_10:
    ++*(_DWORD *)(v7 + 8);
    return 1;
  }
  v21 = "expected static shape";
  v22 = 259;
  mlir::detail::Parser::emitError((uint64_t)v2, v5, (uint64_t)&v21, v23);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  if (v31)
  {
    v12 = (_QWORD **)__p;
    if (__p)
    {
      v13 = v30;
      v14 = __p;
      if (v30 != __p)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = __p;
      }
      v30 = v12;
      operator delete(v14);
    }
    v15 = v27;
    if (v27)
    {
      v16 = v28;
      v17 = v27;
      if (v28 != v27)
      {
        do
        {
          v19 = (void *)*--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            operator delete[](v18);
        }
        while (v16 != v15);
        v17 = v27;
      }
      v28 = v15;
      operator delete(v17);
    }
    if (v25 != &v26)
      free(v25);
  }
  return v11;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefElementTypeInterface]";
      v23 = 82;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::MemRefElementTypeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[266];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
      v23 = 81;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[166];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VerifiableTensorEncoding]";
      v23 = 80;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::VerifiableTensorEncoding,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[268];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>(uint64_t a1)
{
  mlir::detail::Parser *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(mlir::detail::Parser **)a1;
  if (*(_DWORD *)(*((_QWORD *)v2 + 1) + 56) == 21)
    v3 = mlir::detail::Parser::parseFunctionType(v2);
  else
    v3 = mlir::detail::Parser::parseNonFunctionType(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  return v4 != 0;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseMemRefType(void)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  _QWORD v30[4];
  __int16 v31;
  _QWORD v32[3];
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  void *__p;
  _QWORD **v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_QWORD *)mlir::detail::Parser::parseAttribute(*a1, 0);
  if (!v3)
    return 0;
  v4 = v3;
  if (mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v3 + 8))
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v4 + 8);
    v6 = (_QWORD *)a1[1];
    *v6 = v4;
    v6[1] = v5;
    if (*(_BYTE *)a1[3])
    {
      v30[0] = "cannot have affine map for unranked memref type";
      v31 = 259;
      mlir::detail::Parser::emitError(v2, (uint64_t)v30, v32);
      v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
      if (v32[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
      if (v39)
      {
        v8 = (_QWORD **)__p;
        if (__p)
        {
          v9 = v38;
          v10 = __p;
          if (v38 != __p)
          {
            do
              v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
            while (v9 != v8);
            v10 = __p;
          }
          v38 = v8;
          operator delete(v10);
        }
        v11 = v35;
        if (!v35)
          goto LABEL_51;
        v12 = v36;
        v13 = v35;
        if (v36 == v35)
        {
LABEL_50:
          v36 = v11;
          operator delete(v13);
LABEL_51:
          if (v33 != &v34)
            free(v33);
          return v7;
        }
        do
        {
          v15 = (void *)*--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            operator delete[](v14);
        }
        while (v12 != v11);
LABEL_49:
        v13 = v35;
        goto LABEL_50;
      }
    }
    else
    {
      if (!*(_QWORD *)a1[2])
        return 1;
      v30[0] = "expected memory space to be last in memref type";
      v31 = 259;
      mlir::detail::Parser::emitError(v2, (uint64_t)v30, v32);
      v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
      if (v32[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
      if (v39)
      {
        v23 = (_QWORD **)__p;
        if (__p)
        {
          v24 = v38;
          v25 = __p;
          if (v38 != __p)
          {
            do
              v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            v25 = __p;
          }
          v38 = v23;
          operator delete(v25);
        }
        v11 = v35;
        if (!v35)
          goto LABEL_51;
        v26 = v36;
        v13 = v35;
        if (v36 == v35)
          goto LABEL_50;
        do
        {
          v28 = (void *)*--v26;
          v27 = v28;
          *v26 = 0;
          if (v28)
            operator delete[](v27);
        }
        while (v26 != v11);
        goto LABEL_49;
      }
    }
  }
  else
  {
    v16 = (_QWORD *)a1[2];
    if (!*v16)
    {
      *v16 = v4;
      return 1;
    }
    v30[0] = "multiple memory spaces specified in memref type";
    v31 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v30, v32);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
    if (v32[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
    if (v39)
    {
      v17 = (_QWORD **)__p;
      if (__p)
      {
        v18 = v38;
        v19 = __p;
        if (v38 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v38 = v17;
        operator delete(v19);
      }
      v11 = v35;
      if (!v35)
        goto LABEL_51;
      v20 = v36;
      v13 = v35;
      if (v36 == v35)
        goto LABEL_50;
      do
      {
        v22 = (void *)*--v20;
        v21 = v22;
        *v20 = 0;
        if (v22)
          operator delete[](v21);
      }
      while (v20 != v11);
      goto LABEL_49;
    }
  }
  return v7;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::UnrankedMemRefType mlir::detail::Parser::getChecked<mlir::UnrankedMemRefType,mlir::Type &,mlir::Attribute &>(llvm::SMLoc,mlir::Type &,mlir::Attribute &)::{lambda(void)#1}>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::MemRefType mlir::detail::Parser::getChecked<mlir::MemRefType,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::SMLoc,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(void)#1}>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  _BYTE v4[32];
  __int16 v5;

  v2 = *(_QWORD *)a1;
  v3 = **(const char ***)(a1 + 8);
  v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseTensorType(void)::$_0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _BYTE v3[32];
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::detail::Parser::emitError(v2, (uint64_t)v3, a2);
}

uint64_t mlir::BytecodeReader::Impl::read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  _BYTE *v11;
  void *v12;
  int v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  int *v32;
  char *v33;
  int v34;
  _BYTE *v35;
  void *v36;
  int v37;
  uint64_t v38;
  _QWORD **v39;
  _QWORD **v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  void *v46;
  char v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  void *v55;
  std::recursive_mutex **DiagEngine;
  char v57;
  __int128 *v58;
  char *v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char *v71;
  int v72;
  _BYTE *v73;
  void *v74;
  int v75;
  char *v76;
  int v77;
  _BYTE *v78;
  void *v79;
  int v80;
  uint64_t v81;
  _QWORD **v82;
  _QWORD **v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  void *v89;
  _QWORD **v90;
  _QWORD **v91;
  void *v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  _QWORD **v99;
  _QWORD **v100;
  void *v101;
  _QWORD *v102;
  _QWORD *v103;
  void *v104;
  void *v105;
  void *v106;
  _QWORD **v107;
  _QWORD **v108;
  void *v109;
  _QWORD *v110;
  void *v111;
  void *v112;
  int v113;
  char *v114;
  uint64_t *v115;
  char *v116;
  char *v117;
  __int128 v118;
  int v119;
  _BYTE *v120;
  _BYTE *v121;
  int v122;
  char *v123;
  uint64_t *v124;
  char *v125;
  char *v126;
  __int128 v127;
  int v128;
  _BYTE *v129;
  _BYTE *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD **v134;
  _QWORD **v135;
  void *v136;
  _QWORD *v137;
  _QWORD *v138;
  void *v139;
  void *v140;
  void *v141;
  char v142;
  _QWORD **v143;
  _QWORD **v144;
  void *v145;
  _QWORD *v146;
  _QWORD *v147;
  void *v148;
  void *v149;
  void *v150;
  _QWORD **v151;
  _QWORD **v152;
  void *v153;
  _QWORD *v154;
  _QWORD *v155;
  void *v156;
  void *v157;
  void *v158;
  _QWORD **v159;
  _QWORD **v160;
  void *v161;
  _QWORD *v162;
  void *v163;
  void *v164;
  unint64_t v166;
  unint64_t v167;
  int64_t v168;
  int64_t v169;
  int v170;
  uint64_t v171;
  __int128 v172;
  void *v173;
  __int128 v174;
  void *v175;
  unint64_t v176[2];
  mlir::MLIRContext *v177;
  mlir::MLIRContext *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  unint64_t v188;
  void *__src;
  uint64_t v190;
  char v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  __int128 v201;
  void *v202[3];
  void *__p[2];
  uint64_t v204;
  unsigned __int8 v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  _BYTE v214[96];
  __int128 v215;
  void *v216;
  __int128 v217;
  uint64_t v218;
  char v219;
  char *v220;
  const char *v221;
  int v222;
  void *__dst;
  uint64_t v224;
  _BYTE v225[96];
  __int128 v226;
  void *v227;
  __int128 v228;
  uint64_t v229;
  unsigned __int8 v230;
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  v6 = a1[147];
  v7 = a1[148];
  v8 = a1[1];
  v179 = v6;
  v180 = v7;
  v181 = v6;
  v182 = v8;
  a1[9] = a3;
  a1[10] = a4;
  v209 = 4;
  if (v7 > 3)
  {
    v181 = v6 + 4;
    goto LABEL_58;
  }
  *(_QWORD *)&v184 = v7;
  mlir::emitError(v8, (uint64_t)&v187);
  v9 = (char *)v187;
  if ((_QWORD)v187)
  {
    mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>((uint64_t)&v187 + 8, "attempting to skip ", (char **)&v209, " bytes when only ", (char **)&v184, " remain");
    v9 = (char *)v187;
  }
  v220 = v9;
  LOBYTE(v221) = 0;
  v230 = 0;
  if (v205)
  {
    v221 = (const char *)*((_QWORD *)&v187 + 1);
    v10 = v190;
    v222 = v188;
    v11 = v225;
    __dst = v225;
    v224 = 0x400000000;
    if (!(_DWORD)v190)
    {
      v13 = 1;
      goto LABEL_17;
    }
    v12 = __src;
    if (__src != &v191)
    {
      __dst = __src;
      v224 = v190;
      __src = &v191;
      HIDWORD(v190) = 0;
      v13 = 1;
LABEL_16:
      LODWORD(v190) = 0;
LABEL_17:
      v226 = *(_OWORD *)v202;
      memset(v202, 0, sizeof(v202));
      v228 = *(_OWORD *)__p;
      v227 = v202[2];
      v229 = v204;
      __p[0] = 0;
      __p[1] = 0;
      v204 = 0;
      v230 = 1;
      if (v13)
      {
        if (__src != &v191)
          free(__src);
        v205 = 0;
      }
      goto LABEL_21;
    }
    if (v190 < 5)
    {
      v14 = v190;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v190, 24);
      v14 = v190;
      if (!(_DWORD)v190)
      {
LABEL_15:
        LODWORD(v224) = v10;
        v13 = v205;
        goto LABEL_16;
      }
      v12 = __src;
      v11 = __dst;
    }
    memcpy(v11, v12, 24 * v14);
    goto LABEL_15;
  }
LABEL_21:
  mlir::InFlightDiagnostic::abandon(&v187);
  if ((_QWORD)v187)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v187);
  if (v205)
  {
    v15 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v16 = (_QWORD **)__p[1];
      v17 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p[0];
      }
      __p[1] = v15;
      operator delete(v17);
    }
    v18 = v202[0];
    if (v202[0])
    {
      v19 = v202[1];
      v20 = v202[0];
      if (v202[1] != v202[0])
      {
        do
        {
          v22 = (void *)*--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            operator delete[](v21);
        }
        while (v19 != v18);
        v20 = v202[0];
      }
      v202[1] = v18;
      operator delete(v20);
    }
    if (__src != &v191)
      free(__src);
  }
  v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v220);
  if (v220)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
  if (v230)
  {
    v24 = (_QWORD **)v228;
    if ((_QWORD)v228)
    {
      v25 = (_QWORD **)*((_QWORD *)&v228 + 1);
      v26 = (void *)v228;
      if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = (void *)v228;
      }
      *((_QWORD *)&v228 + 1) = v24;
      operator delete(v26);
    }
    v27 = (_QWORD *)v226;
    if ((_QWORD)v226)
    {
      v28 = (_QWORD *)*((_QWORD *)&v226 + 1);
      v29 = (void *)v226;
      if (*((_QWORD *)&v226 + 1) != (_QWORD)v226)
      {
        do
        {
          v31 = (void *)*--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v28 != v27);
        v29 = (void *)v226;
      }
      *((_QWORD *)&v226 + 1) = v27;
      operator delete(v29);
    }
    if (__dst != v225)
      free(__dst);
  }
  if (!v23)
    goto LABEL_152;
LABEL_58:
  v32 = (int *)(a1 + 31);
  {
LABEL_152:
    v69 = 0;
    goto LABEL_384;
  }
  v209 = 6;
  if (*(_QWORD *)v32 < 7uLL)
  {
    if (*(_QWORD *)v32 <= 1uLL)
      *((_BYTE *)a1 + 16) = 0;
    goto LABEL_117;
  }
  mlir::emitError(v182, (uint64_t)&v187);
  v33 = (char *)v187;
  if ((_QWORD)v187)
  {
    mlir::Diagnostic::append<char const(&)[18],unsigned long long &,char const(&)[36],unsigned long long &>((uint64_t)&v187 + 8, "bytecode version ", (char **)a1 + 31, " is newer than the current version ", (char **)&v209);
    v33 = (char *)v187;
  }
  v220 = v33;
  LOBYTE(v221) = 0;
  v230 = 0;
  if (v205)
  {
    v221 = (const char *)*((_QWORD *)&v187 + 1);
    v34 = v190;
    v222 = v188;
    v35 = v225;
    __dst = v225;
    v224 = 0x400000000;
    if (!(_DWORD)v190)
    {
      v37 = 1;
      goto LABEL_76;
    }
    v36 = __src;
    if (__src != &v191)
    {
      __dst = __src;
      v224 = v190;
      __src = &v191;
      HIDWORD(v190) = 0;
      v37 = 1;
LABEL_75:
      LODWORD(v190) = 0;
LABEL_76:
      v226 = *(_OWORD *)v202;
      memset(v202, 0, sizeof(v202));
      v228 = *(_OWORD *)__p;
      v227 = v202[2];
      v229 = v204;
      __p[0] = 0;
      __p[1] = 0;
      v204 = 0;
      v230 = 1;
      if (v37)
      {
        if (__src != &v191)
          free(__src);
        v205 = 0;
      }
      goto LABEL_80;
    }
    if (v190 < 5)
    {
      v38 = v190;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v190, 24);
      v38 = v190;
      if (!(_DWORD)v190)
      {
LABEL_74:
        LODWORD(v224) = v34;
        v37 = v205;
        goto LABEL_75;
      }
      v36 = __src;
      v35 = __dst;
    }
    memcpy(v35, v36, 24 * v38);
    goto LABEL_74;
  }
LABEL_80:
  mlir::InFlightDiagnostic::abandon(&v187);
  if ((_QWORD)v187)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v187);
  if (v205)
  {
    v39 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v40 = (_QWORD **)__p[1];
      v41 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
        while (v40 != v39);
        v41 = __p[0];
      }
      __p[1] = v39;
      operator delete(v41);
    }
    v42 = v202[0];
    if (v202[0])
    {
      v43 = v202[1];
      v44 = v202[0];
      if (v202[1] != v202[0])
      {
        do
        {
          v46 = (void *)*--v43;
          v45 = v46;
          *v43 = 0;
          if (v46)
            operator delete[](v45);
        }
        while (v43 != v42);
        v44 = v202[0];
      }
      v202[1] = v42;
      operator delete(v44);
    }
    if (__src != &v191)
      free(__src);
  }
  v47 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v220);
  if (v220)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
  if (v230)
  {
    v48 = (_QWORD **)v228;
    if ((_QWORD)v228)
    {
      v49 = (_QWORD **)*((_QWORD *)&v228 + 1);
      v50 = (void *)v228;
      if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
      {
        do
          v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
        while (v49 != v48);
        v50 = (void *)v228;
      }
      *((_QWORD *)&v228 + 1) = v48;
      operator delete(v50);
    }
    v51 = (_QWORD *)v226;
    if ((_QWORD)v226)
    {
      v52 = (_QWORD *)*((_QWORD *)&v226 + 1);
      v53 = (void *)v226;
      if (*((_QWORD *)&v226 + 1) != (_QWORD)v226)
      {
        do
        {
          v55 = (void *)*--v52;
          v54 = v55;
          *v52 = 0;
          if (v55)
            operator delete[](v54);
        }
        while (v52 != v51);
        v53 = (void *)v226;
      }
      *((_QWORD *)&v226 + 1) = v51;
      operator delete(v53);
    }
    if (__dst != v225)
      free(__dst);
  }
  if (!v47)
    goto LABEL_152;
LABEL_117:
  v178 = *(mlir::MLIRContext **)*a1;
  DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(v178);
  *(_QWORD *)&v187 = a1;
  __src = (char *)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallbacksHolder<mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1,mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1,void>::Callbacks
        + 2;
  v177 = (mlir::MLIRContext *)mlir::DiagnosticEngine::registerHandler(DiagEngine, &v187);
  v57 = (char)__src;
  if ((unint64_t)__src >= 8)
  {
    if ((__src & 4) != 0)
    {
      if ((__src & 2) != 0)
        v58 = &v187;
      else
        v58 = (__int128 *)v187;
      (*(void (**)(__int128 *))(((unint64_t)__src & 0xFFFFFFFFFFFFFFF8) + 16))(v58);
    }
    if ((v57 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v187, *((void **)&v187 + 1));
  }
  LOBYTE(v187) = 0;
  LOBYTE(v188) = 0;
  LOBYTE(__src) = 0;
  v191 = 0;
  LOBYTE(v192) = 0;
  v194 = 0;
  LOBYTE(v195) = 0;
  v197 = 0;
  LOBYTE(v198) = 0;
  v200 = 0;
  LOBYTE(v201) = 0;
  LOBYTE(v202[0]) = 0;
  LOBYTE(v202[1]) = 0;
  LOBYTE(__p[0]) = 0;
  LOBYTE(__p[1]) = 0;
  v205 = 0;
  LOBYTE(v206) = 0;
  v208 = 0;
  if (v181 != v179 + v180)
  {
    while (1)
    {
      LOBYTE(v183) = 0;
      v176[0] = 0;
      v176[1] = 0;
      v59 = (char *)&v187 + 24 * v183;
      if (v59[16])
        break;
      *(_OWORD *)v59 = *(_OWORD *)v176;
      v59[16] = 1;
      if (v181 == v179 + v180)
      {
        if (!(_BYTE)v188)
          goto LABEL_153;
        if (!v191)
        {
          v70 = 1;
          goto LABEL_154;
        }
        if (!v194)
        {
          v70 = 2;
          goto LABEL_154;
        }
        if (!v197)
        {
          v70 = 3;
          goto LABEL_154;
        }
        if (!v200)
        {
          v70 = 4;
          goto LABEL_154;
        }
        v60 = v208;
        if (!v208 && *v32 > 4)
        {
          v70 = 8;
          goto LABEL_154;
        }
        v61 = a1[1];
        v62 = v187;
        v184 = v187;
        v185 = v187;
        v186 = v61;
        v176[0] = 0;
        v170 = v60;
        v63 = v176[0];
        v64 = *((unsigned int *)a1 + 136);
        if (v176[0] != v64)
        {
          if (v176[0] >= v64)
          {
            if (v176[0] > *((unsigned int *)a1 + 137))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 67), a1 + 69, v176[0], 16);
              v64 = *((unsigned int *)a1 + 136);
            }
            if (v63 != v64)
              bzero((void *)(a1[67] + 16 * v64), 16 * (v63 - v64));
          }
          LODWORD(v64) = v63;
          *((_DWORD *)a1 + 136) = v63;
          v63 = v63;
        }
        v171 = *((_QWORD *)&v62 + 1);
        if ((_DWORD)v64)
        {
          v65 = 16 * v63;
          v66 = *((_QWORD *)&v62 + 1);
          while (1)
          {
            v183 = 0;
            v67 = v66 >= v183;
            v66 -= v183;
            if (!v67)
              break;
            v68 = v183 - 1;
            *(_QWORD *)(*((_QWORD *)&v62 + 1) + v65 - 16) = v62 + v66;
            *(_QWORD *)(*((_QWORD *)&v62 + 1) + v65 - 8) = v68;
            v65 -= 16;
            if (!v65)
              goto LABEL_265;
          }
          mlir::emitError(v186, (uint64_t)&v220);
          v123 = v220;
          if (v220)
          {
            LODWORD(v209) = 3;
            v210 = "string size exceeds the available data size";
            v211 = 43;
            v124 = &v209;
            v125 = (char *)__dst;
            if (v224 >= HIDWORD(v224))
            {
              v167 = v224 + 1;
              if (__dst <= &v209 && (char *)__dst + 24 * v224 > (char *)&v209)
              {
                v169 = (char *)&v209 - (_BYTE *)__dst;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v167, 24);
                v125 = (char *)__dst;
                v124 = (uint64_t *)((char *)__dst + v169);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v167, 24);
                v124 = &v209;
                v125 = (char *)__dst;
              }
            }
            v126 = &v125[24 * v224];
            v127 = *(_OWORD *)v124;
            *((_QWORD *)v126 + 2) = v124[2];
            *(_OWORD *)v126 = v127;
            LODWORD(v224) = v224 + 1;
            v123 = v220;
          }
          v209 = (uint64_t)v123;
          LOBYTE(v210) = 0;
          v219 = 0;
          if (v230)
          {
            v210 = v221;
            v128 = v224;
            LODWORD(v211) = v222;
            v129 = v214;
            v212 = v214;
            v213 = 0x400000000;
            if ((_DWORD)v224)
            {
              v130 = v225;
              if (__dst != v225)
              {
                v212 = __dst;
                v213 = v224;
                __dst = v225;
                HIDWORD(v224) = 0;
                v131 = 1;
                goto LABEL_333;
              }
              if (v224 < 5)
              {
                v133 = v224;
LABEL_331:
                memcpy(v129, v130, 24 * v133);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
                v133 = v224;
                if ((_DWORD)v224)
                {
                  v130 = __dst;
                  v129 = v212;
                  goto LABEL_331;
                }
              }
              LODWORD(v213) = v128;
              v131 = v230;
LABEL_333:
              LODWORD(v224) = 0;
            }
            else
            {
              v131 = 1;
            }
            v215 = v226;
            v226 = 0uLL;
            v217 = v228;
            v216 = v227;
            v218 = v229;
            v227 = 0;
            v228 = 0uLL;
            v229 = 0;
            v219 = 1;
            if (v131)
            {
              if (__dst != v225)
                free(__dst);
              v230 = 0;
            }
          }
          mlir::InFlightDiagnostic::abandon(&v220);
          if (v220)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
          if (v230)
          {
            v151 = (_QWORD **)v228;
            if ((_QWORD)v228)
            {
              v152 = (_QWORD **)*((_QWORD *)&v228 + 1);
              v153 = (void *)v228;
              if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
              {
                do
                  v152 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v152 - 1);
                while (v152 != v151);
                v153 = (void *)v228;
              }
              *((_QWORD *)&v228 + 1) = v151;
              operator delete(v153);
            }
            v154 = (_QWORD *)v226;
            if ((_QWORD)v226)
            {
              v155 = (_QWORD *)*((_QWORD *)&v226 + 1);
              v156 = (void *)v226;
              if (*((_QWORD *)&v226 + 1) != (_QWORD)v226)
              {
                do
                {
                  v158 = (void *)*--v155;
                  v157 = v158;
                  *v155 = 0;
                  if (v158)
                    operator delete[](v157);
                }
                while (v155 != v154);
                v156 = (void *)v226;
              }
              *((_QWORD *)&v226 + 1) = v154;
              operator delete(v156);
            }
            if (__dst != v225)
              free(__dst);
          }
          v142 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
          if (v209)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
          if (!v219)
            goto LABEL_374;
          v159 = (_QWORD **)v217;
          if ((_QWORD)v217)
          {
            v160 = (_QWORD **)*((_QWORD *)&v217 + 1);
            v161 = (void *)v217;
            if (*((_QWORD *)&v217 + 1) != (_QWORD)v217)
            {
              do
                v160 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v160 - 1);
              while (v160 != v159);
              v161 = (void *)v217;
            }
            *((_QWORD *)&v217 + 1) = v159;
            operator delete(v161);
          }
          v146 = (_QWORD *)v215;
          if (!(_QWORD)v215)
            goto LABEL_372;
          v162 = (_QWORD *)*((_QWORD *)&v215 + 1);
          v148 = (void *)v215;
          if (*((_QWORD *)&v215 + 1) == (_QWORD)v215)
            goto LABEL_371;
          do
          {
            v164 = (void *)*--v162;
            v163 = v164;
            *v162 = 0;
            if (v164)
              operator delete[](v163);
          }
          while (v162 != v146);
          goto LABEL_370;
        }
        v66 = *((_QWORD *)&v62 + 1);
LABEL_265:
        if (v171 - ((_QWORD)v184 + *((_QWORD *)&v184 + 1)) + v185 == v66)
        {
          v113 = v170;
LABEL_376:
          if (!v113
          {
            if (mlir::BytecodeReader::Impl::parseDialectSection((uint64_t)a1, (uint64_t)__src, v190))
            {
              v174 = v201;
              v175 = v202[0];
              v172 = *(_OWORD *)&v202[1];
              v173 = __p[0];
              if (mlir::BytecodeReader::Impl::parseResourceSection(a1, (uint64_t)&v179, &v174, &v172))
              {
                {
                  v69 = mlir::BytecodeReader::Impl::parseIRSection((uint64_t)a1, v198, v199, a2);
                  goto LABEL_383;
                }
              }
            }
          }
          goto LABEL_382;
        }
        mlir::emitError(v186, (uint64_t)&v220);
        v114 = v220;
        if (v220)
        {
          LODWORD(v209) = 3;
          v210 = "unexpected trailing data between the offsets for strings and their data";
          v211 = 71;
          v115 = &v209;
          v116 = (char *)__dst;
          if (v224 >= HIDWORD(v224))
          {
            v166 = v224 + 1;
            if (__dst <= &v209 && (char *)__dst + 24 * v224 > (char *)&v209)
            {
              v168 = (char *)&v209 - (_BYTE *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v166, 24);
              v116 = (char *)__dst;
              v115 = (uint64_t *)((char *)__dst + v168);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v166, 24);
              v115 = &v209;
              v116 = (char *)__dst;
            }
          }
          v117 = &v116[24 * v224];
          v118 = *(_OWORD *)v115;
          *((_QWORD *)v117 + 2) = v115[2];
          *(_OWORD *)v117 = v118;
          LODWORD(v224) = v224 + 1;
          v114 = v220;
        }
        v209 = (uint64_t)v114;
        LOBYTE(v210) = 0;
        v219 = 0;
        if (v230)
        {
          v210 = v221;
          v119 = v224;
          LODWORD(v211) = v222;
          v120 = v214;
          v212 = v214;
          v213 = 0x400000000;
          if ((_DWORD)v224)
          {
            v121 = v225;
            if (__dst != v225)
            {
              v212 = __dst;
              v213 = v224;
              __dst = v225;
              HIDWORD(v224) = 0;
              v122 = 1;
              goto LABEL_293;
            }
            if (v224 < 5)
            {
              v132 = v224;
LABEL_291:
              memcpy(v120, v121, 24 * v132);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
              v132 = v224;
              if ((_DWORD)v224)
              {
                v121 = __dst;
                v120 = v212;
                goto LABEL_291;
              }
            }
            LODWORD(v213) = v119;
            v122 = v230;
LABEL_293:
            LODWORD(v224) = 0;
          }
          else
          {
            v122 = 1;
          }
          v215 = v226;
          v226 = 0uLL;
          v217 = v228;
          v216 = v227;
          v218 = v229;
          v227 = 0;
          v228 = 0uLL;
          v229 = 0;
          v219 = 1;
          if (v122)
          {
            if (__dst != v225)
              free(__dst);
            v230 = 0;
          }
        }
        mlir::InFlightDiagnostic::abandon(&v220);
        if (v220)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
        if (v230)
        {
          v134 = (_QWORD **)v228;
          if ((_QWORD)v228)
          {
            v135 = (_QWORD **)*((_QWORD *)&v228 + 1);
            v136 = (void *)v228;
            if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
            {
              do
                v135 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v135 - 1);
              while (v135 != v134);
              v136 = (void *)v228;
            }
            *((_QWORD *)&v228 + 1) = v134;
            operator delete(v136);
          }
          v137 = (_QWORD *)v226;
          if ((_QWORD)v226)
          {
            v138 = (_QWORD *)*((_QWORD *)&v226 + 1);
            v139 = (void *)v226;
            if (*((_QWORD *)&v226 + 1) != (_QWORD)v226)
            {
              do
              {
                v141 = (void *)*--v138;
                v140 = v141;
                *v138 = 0;
                if (v141)
                  operator delete[](v140);
              }
              while (v138 != v137);
              v139 = (void *)v226;
            }
            *((_QWORD *)&v226 + 1) = v137;
            operator delete(v139);
          }
          if (__dst != v225)
            free(__dst);
        }
        v142 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
        if (v209)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
        if (v219)
        {
          v143 = (_QWORD **)v217;
          if ((_QWORD)v217)
          {
            v144 = (_QWORD **)*((_QWORD *)&v217 + 1);
            v145 = (void *)v217;
            if (*((_QWORD *)&v217 + 1) != (_QWORD)v217)
            {
              do
                v144 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v144 - 1);
              while (v144 != v143);
              v145 = (void *)v217;
            }
            *((_QWORD *)&v217 + 1) = v143;
            operator delete(v145);
          }
          v146 = (_QWORD *)v215;
          if ((_QWORD)v215)
          {
            v147 = (_QWORD *)*((_QWORD *)&v215 + 1);
            v148 = (void *)v215;
            if (*((_QWORD *)&v215 + 1) != (_QWORD)v215)
            {
              do
              {
                v150 = (void *)*--v147;
                v149 = v150;
                *v147 = 0;
                if (v150)
                  operator delete[](v149);
              }
              while (v147 != v146);
LABEL_370:
              v148 = (void *)v215;
            }
LABEL_371:
            *((_QWORD *)&v215 + 1) = v146;
            operator delete(v148);
          }
LABEL_372:
          if (v212 != v214)
            free(v212);
        }
LABEL_374:
        if (v142)
        {
          v113 = v208;
          goto LABEL_376;
        }
LABEL_382:
        v69 = 0;
        goto LABEL_383;
      }
    }
    toString((uint64_t)&v184, v183);
    mlir::emitError(v182, (uint64_t)&v220);
    v76 = v220;
    if (v220)
    {
      mlir::Diagnostic::append<char const(&)[30],std::string>((uint64_t)&v221, "duplicate top-level section: ", (const void **)&v184);
      v76 = v220;
    }
    v209 = (uint64_t)v76;
    LOBYTE(v210) = 0;
    v219 = 0;
    if (!v230)
    {
LABEL_225:
      mlir::InFlightDiagnostic::abandon(&v220);
      if (v220)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
      if (v230)
      {
        v99 = (_QWORD **)v228;
        if ((_QWORD)v228)
        {
          v100 = (_QWORD **)*((_QWORD *)&v228 + 1);
          v101 = (void *)v228;
          if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
          {
            do
              v100 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v100 - 1);
            while (v100 != v99);
            v101 = (void *)v228;
          }
          *((_QWORD *)&v228 + 1) = v99;
          operator delete(v101);
        }
        v102 = (_QWORD *)v226;
        if ((_QWORD)v226)
        {
          v103 = (_QWORD *)*((_QWORD *)&v226 + 1);
          v104 = (void *)v226;
          if (*((_QWORD *)&v226 + 1) != (_QWORD)v226)
          {
            do
            {
              v106 = (void *)*--v103;
              v105 = v106;
              *v103 = 0;
              if (v106)
                operator delete[](v105);
            }
            while (v103 != v102);
            v104 = (void *)v226;
          }
          *((_QWORD *)&v226 + 1) = v102;
          operator delete(v104);
        }
        if (__dst != v225)
          free(__dst);
      }
      v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
      if (v209)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
      if (v219)
      {
        v107 = (_QWORD **)v217;
        if ((_QWORD)v217)
        {
          v108 = (_QWORD **)*((_QWORD *)&v217 + 1);
          v109 = (void *)v217;
          if (*((_QWORD *)&v217 + 1) != (_QWORD)v217)
          {
            do
              v108 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v108 - 1);
            while (v108 != v107);
            v109 = (void *)v217;
          }
          *((_QWORD *)&v217 + 1) = v107;
          operator delete(v109);
        }
        v93 = (_QWORD *)v215;
        if (!(_QWORD)v215)
          goto LABEL_259;
        v110 = (_QWORD *)*((_QWORD *)&v215 + 1);
        v95 = (void *)v215;
        if (*((_QWORD *)&v215 + 1) == (_QWORD)v215)
          goto LABEL_258;
        do
        {
          v112 = (void *)*--v110;
          v111 = v112;
          *v110 = 0;
          if (v112)
            operator delete[](v111);
        }
        while (v110 != v93);
        goto LABEL_257;
      }
      goto LABEL_261;
    }
    v210 = v221;
    v77 = v224;
    LODWORD(v211) = v222;
    v78 = v214;
    v212 = v214;
    v213 = 0x400000000;
    if (!(_DWORD)v224)
    {
      v80 = 1;
      goto LABEL_221;
    }
    v79 = __dst;
    if (__dst != v225)
    {
      v212 = __dst;
      v213 = v224;
      __dst = v225;
      HIDWORD(v224) = 0;
      v80 = 1;
LABEL_220:
      LODWORD(v224) = 0;
LABEL_221:
      v215 = v226;
      v226 = 0uLL;
      v217 = v228;
      v216 = v227;
      v218 = v229;
      v227 = 0;
      v228 = 0uLL;
      v229 = 0;
      v219 = 1;
      if (v80)
      {
        if (__dst != v225)
          free(__dst);
        v230 = 0;
      }
      goto LABEL_225;
    }
    if (v224 < 5)
    {
      v98 = v224;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
      v98 = v224;
      if (!(_DWORD)v224)
      {
LABEL_219:
        LODWORD(v213) = v77;
        v80 = v230;
        goto LABEL_220;
      }
      v79 = __dst;
      v78 = v212;
    }
    memcpy(v78, v79, 24 * v98);
    goto LABEL_219;
  }
LABEL_153:
  v70 = 0;
LABEL_154:
  toString((uint64_t)&v184, v70);
  mlir::emitError(v182, (uint64_t)&v220);
  v71 = v220;
  if (v220)
  {
    mlir::Diagnostic::append<char const(&)[30],std::string>((uint64_t)&v221, "missing data for top-level section: ", (const void **)&v184);
    v71 = v220;
  }
  v209 = (uint64_t)v71;
  LOBYTE(v210) = 0;
  v219 = 0;
  if (v230)
  {
    v210 = v221;
    v72 = v224;
    LODWORD(v211) = v222;
    v73 = v214;
    v212 = v214;
    v213 = 0x400000000;
    if (!(_DWORD)v224)
    {
      v75 = 1;
      goto LABEL_176;
    }
    v74 = __dst;
    if (__dst != v225)
    {
      v212 = __dst;
      v213 = v224;
      __dst = v225;
      HIDWORD(v224) = 0;
      v75 = 1;
LABEL_175:
      LODWORD(v224) = 0;
LABEL_176:
      v215 = v226;
      v226 = 0uLL;
      v217 = v228;
      v216 = v227;
      v218 = v229;
      v227 = 0;
      v228 = 0uLL;
      v229 = 0;
      v219 = 1;
      if (v75)
      {
        if (__dst != v225)
          free(__dst);
        v230 = 0;
      }
      goto LABEL_180;
    }
    if (v224 < 5)
    {
      v81 = v224;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
      v81 = v224;
      if (!(_DWORD)v224)
      {
LABEL_174:
        LODWORD(v213) = v72;
        v75 = v230;
        goto LABEL_175;
      }
      v74 = __dst;
      v73 = v212;
    }
    memcpy(v73, v74, 24 * v81);
    goto LABEL_174;
  }
LABEL_180:
  mlir::InFlightDiagnostic::abandon(&v220);
  if (v220)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
  if (v230)
  {
    v82 = (_QWORD **)v228;
    if ((_QWORD)v228)
    {
      v83 = (_QWORD **)*((_QWORD *)&v228 + 1);
      v84 = (void *)v228;
      if (*((_QWORD *)&v228 + 1) != (_QWORD)v228)
      {
        do
          v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
        while (v83 != v82);
        v84 = (void *)v228;
      }
      *((_QWORD *)&v228 + 1) = v82;
      operator delete(v84);
    }
    v85 = (_QWORD *)v226;
    if ((_QWORD)v226)
    {
      v86 = (_QWORD *)*((_QWORD *)&v226 + 1);
      v87 = (void *)v226;
      if (*((_QWORD *)&v226 + 1) != (_QWORD)v226)
      {
        do
        {
          v89 = (void *)*--v86;
          v88 = v89;
          *v86 = 0;
          if (v89)
            operator delete[](v88);
        }
        while (v86 != v85);
        v87 = (void *)v226;
      }
      *((_QWORD *)&v226 + 1) = v85;
      operator delete(v87);
    }
    if (__dst != v225)
      free(__dst);
  }
  v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
  if (v209)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
  if (v219)
  {
    v90 = (_QWORD **)v217;
    if ((_QWORD)v217)
    {
      v91 = (_QWORD **)*((_QWORD *)&v217 + 1);
      v92 = (void *)v217;
      if (*((_QWORD *)&v217 + 1) != (_QWORD)v217)
      {
        do
          v91 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v91 - 1);
        while (v91 != v90);
        v92 = (void *)v217;
      }
      *((_QWORD *)&v217 + 1) = v90;
      operator delete(v92);
    }
    v93 = (_QWORD *)v215;
    if (!(_QWORD)v215)
      goto LABEL_259;
    v94 = (_QWORD *)*((_QWORD *)&v215 + 1);
    v95 = (void *)v215;
    if (*((_QWORD *)&v215 + 1) == (_QWORD)v215)
    {
LABEL_258:
      *((_QWORD *)&v215 + 1) = v93;
      operator delete(v95);
LABEL_259:
      if (v212 != v214)
        free(v212);
      goto LABEL_261;
    }
    do
    {
      v97 = (void *)*--v94;
      v96 = v97;
      *v94 = 0;
      if (v97)
        operator delete[](v96);
    }
    while (v94 != v93);
LABEL_257:
    v95 = (void *)v215;
    goto LABEL_258;
  }
LABEL_261:
  if (SHIBYTE(v185) < 0)
    operator delete((void *)v184);
LABEL_383:
  mlir::ScopedDiagnosticHandler::~ScopedDiagnosticHandler(&v177);
LABEL_384:
  a1[9] = 0;
  return v69;
}

uint64_t `anonymous namespace'::EncodingReader::parseNullTerminatedString(_anonymous_namespace_::EncodingReader *this, llvm::StringRef *a2)
{
  void *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *__dst;
  uint64_t v40;
  _BYTE v41[33];
  void *v42[2];
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  char v46;
  _QWORD v47[2];
  int v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[96];
  __int128 v52;
  uint64_t v53;
  __int128 __p;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = (void *)*((_QWORD *)this + 2);
  v5 = memchr(v4, 0, *(_QWORD *)this + *((_QWORD *)this + 1) - (_QWORD)v4);
  if (v5)
  {
    *(_QWORD *)a2 = v4;
    *((_QWORD *)a2 + 1) = v5 - (_BYTE *)v4;
    *((_QWORD *)this + 2) = v5 + 1;
    return 1;
  }
  mlir::emitError(*((_QWORD *)this + 3), (uint64_t)v47);
  v8 = v47[0];
  if (v47[0])
  {
    LODWORD(v36) = 3;
    v37 = "malformed null-terminated string, no null character found";
    v38 = 57;
    v9 = (char *)&v36;
    v10 = (char *)v49;
    if (v50 >= HIDWORD(v50))
    {
      v34 = v50 + 1;
      if (v49 <= &v36 && (char *)v49 + 24 * v50 > (char *)&v36)
      {
        v35 = (char *)&v36 - (_BYTE *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v34, 24);
        v10 = (char *)v49;
        v9 = (char *)v49 + v35;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v34, 24);
        v9 = (char *)&v36;
        v10 = (char *)v49;
      }
    }
    v11 = &v10[24 * v50];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
    *(_OWORD *)v11 = v12;
    LODWORD(v50) = v50 + 1;
    v8 = v47[0];
  }
  v36 = v8;
  LOBYTE(v37) = 0;
  v46 = 0;
  if (v56)
  {
    v37 = (const char *)v47[1];
    v13 = v50;
    LODWORD(v38) = v48;
    v14 = v41;
    __dst = v41;
    v40 = 0x400000000;
    if (!(_DWORD)v50)
    {
      v16 = 1;
      goto LABEL_19;
    }
    v15 = v51;
    if (v49 != v51)
    {
      __dst = v49;
      v40 = v50;
      v49 = v51;
      HIDWORD(v50) = 0;
      v16 = 1;
LABEL_18:
      LODWORD(v50) = 0;
LABEL_19:
      *(_OWORD *)v42 = v52;
      v43 = v53;
      v52 = 0uLL;
      *(_OWORD *)v44 = __p;
      v45 = v55;
      v53 = 0;
      __p = 0uLL;
      v55 = 0;
      v46 = 1;
      if (v16)
      {
        if (v49 != v51)
          free(v49);
        v56 = 0;
      }
      goto LABEL_23;
    }
    if (v50 < 5)
    {
      v17 = v50;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v41, v50, 24);
      v17 = v50;
      if (!(_DWORD)v50)
      {
LABEL_17:
        LODWORD(v40) = v13;
        v16 = v56;
        goto LABEL_18;
      }
      v15 = v49;
      v14 = __dst;
    }
    memcpy(v14, v15, 24 * v17);
    goto LABEL_17;
  }
LABEL_23:
  mlir::InFlightDiagnostic::abandon(v47);
  if (v47[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
  if (v56)
  {
    v18 = (_QWORD **)__p;
    if ((_QWORD)__p)
    {
      v19 = (_QWORD **)*((_QWORD *)&__p + 1);
      v20 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v18;
      operator delete(v20);
    }
    v21 = (_QWORD *)v52;
    if ((_QWORD)v52)
    {
      v22 = (_QWORD *)*((_QWORD *)&v52 + 1);
      v23 = (void *)v52;
      if (*((_QWORD *)&v52 + 1) != (_QWORD)v52)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = (void *)v52;
      }
      *((_QWORD *)&v52 + 1) = v21;
      operator delete(v23);
    }
    if (v49 != v51)
      free(v49);
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  if (v46)
  {
    v26 = (_QWORD **)v44[0];
    if (v44[0])
    {
      v27 = (_QWORD **)v44[1];
      v28 = v44[0];
      if (v44[1] != v44[0])
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = v44[0];
      }
      v44[1] = v26;
      operator delete(v28);
    }
    v29 = v42[0];
    if (v42[0])
    {
      v30 = v42[1];
      v31 = v42[0];
      if (v42[1] != v42[0])
      {
        do
        {
          v33 = (void *)*--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            operator delete[](v32);
        }
        while (v30 != v29);
        v31 = v42[0];
      }
      v42[1] = v29;
      operator delete(v31);
    }
    if (__dst != v41)
      free(__dst);
  }
  return v6;
}

uint64_t `anonymous namespace'::EncodingReader::parseSection(_anonymous_namespace_::EncodingReader *a1, _BYTE *a2, _QWORD *a3)
{
  char v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  const void *v11;
  int v12;
  int8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *__dst;
  uint64_t v40;
  _BYTE v41[96];
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  unsigned int v47[2];
  uint64_t v48;
  int v49;
  _BYTE *v50;
  uint64_t v51;
  _BYTE v52[96];
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  {
    v34 = 0;
    {
      v6 = v35;
      v7 = v35 & 0x7F;
      *a2 = v35 & 0x7F;
      if (v7 >= 9)
      {
        v33 = v7;
        mlir::emitError(*((_QWORD *)a1 + 3), (uint64_t)v47);
        v8 = *(_QWORD *)v47;
        if (*(_QWORD *)v47)
        {
          mlir::Diagnostic::append<char const(&)[21],unsigned int>((uint64_t)&v48, "invalid section ID: ", &v33);
          v8 = *(_QWORD *)v47;
        }
        v36 = v8;
        LOBYTE(v37) = 0;
        v46 = 0;
        if (!v57)
          goto LABEL_28;
        v37 = v48;
        v9 = v51;
        v38 = v49;
        v10 = v41;
        __dst = v41;
        v40 = 0x400000000;
        if (!(_DWORD)v51)
        {
          v12 = 1;
          goto LABEL_24;
        }
        v11 = v50;
        if (v50 != v52)
        {
          __dst = v50;
          v40 = v51;
          v50 = v52;
          HIDWORD(v51) = 0;
          v12 = 1;
LABEL_23:
          LODWORD(v51) = 0;
LABEL_24:
          v42 = v53;
          v43 = v54;
          v53 = 0uLL;
          v44 = v55;
          v45 = v56;
          v54 = 0;
          v55 = 0uLL;
          v56 = 0;
          v46 = 1;
          if (v12)
          {
            if (v50 != v52)
              free(v50);
            v57 = 0;
          }
LABEL_28:
          mlir::InFlightDiagnostic::abandon(v47);
          if (*(_QWORD *)v47)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
          if (v57)
          {
            v17 = (_QWORD **)v55;
            if ((_QWORD)v55)
            {
              v18 = (_QWORD **)*((_QWORD *)&v55 + 1);
              v19 = (void *)v55;
              if (*((_QWORD *)&v55 + 1) != (_QWORD)v55)
              {
                do
                  v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
                while (v18 != v17);
                v19 = (void *)v55;
              }
              *((_QWORD *)&v55 + 1) = v17;
              operator delete(v19);
            }
            v20 = (_QWORD *)v53;
            if ((_QWORD)v53)
            {
              v21 = (_QWORD *)*((_QWORD *)&v53 + 1);
              v22 = (void *)v53;
              if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
              {
                do
                {
                  v24 = (void *)*--v21;
                  v23 = v24;
                  *v21 = 0;
                  if (v24)
                    operator delete[](v23);
                }
                while (v21 != v20);
                v22 = (void *)v53;
              }
              *((_QWORD *)&v53 + 1) = v20;
              operator delete(v22);
            }
            if (v50 != v52)
              free(v50);
          }
          v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
          if (v36)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
          if (v46)
          {
            v25 = (_QWORD **)v44;
            if ((_QWORD)v44)
            {
              v26 = (_QWORD **)*((_QWORD *)&v44 + 1);
              v27 = (void *)v44;
              if (*((_QWORD *)&v44 + 1) != (_QWORD)v44)
              {
                do
                  v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
                while (v26 != v25);
                v27 = (void *)v44;
              }
              *((_QWORD *)&v44 + 1) = v25;
              operator delete(v27);
            }
            v28 = (_QWORD *)v42;
            if ((_QWORD)v42)
            {
              v29 = (_QWORD *)*((_QWORD *)&v42 + 1);
              v30 = (void *)v42;
              if (*((_QWORD *)&v42 + 1) != (_QWORD)v42)
              {
                do
                {
                  v32 = (void *)*--v29;
                  v31 = v32;
                  *v29 = 0;
                  if (v32)
                    operator delete[](v31);
                }
                while (v29 != v28);
                v30 = (void *)v42;
              }
              *((_QWORD *)&v42 + 1) = v28;
              operator delete(v30);
            }
            if (__dst != v41)
              free(__dst);
          }
          return v15;
        }
        if (v51 < 5)
        {
          v16 = v51;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v41, v51, 24);
          v16 = v51;
          if (!(_DWORD)v51)
          {
LABEL_22:
            LODWORD(v40) = v9;
            v12 = v57;
            goto LABEL_23;
          }
          v11 = v50;
          v10 = __dst;
        }
        memcpy(v10, v11, 24 * v16);
        goto LABEL_22;
      }
      if ((v6 & 0x80) == 0)
      *(_QWORD *)v47 = 0;
      {
      }
    }
  }
  return 0;
}

void toString(uint64_t a1, unsigned int a2)
{
  _QWORD v2[4];
  __int16 v3;
  _QWORD v4[4];
  __int16 v5;

  switch(a2)
  {
    case 0u:
      *(_BYTE *)(a1 + 23) = 10;
      strcpy((char *)a1, "String (0)");
      break;
    case 1u:
      *(_BYTE *)(a1 + 23) = 11;
      strcpy((char *)a1, "Dialect (1)");
      break;
    case 2u:
      *(_BYTE *)(a1 + 23) = 12;
      strcpy((char *)a1, "AttrType (2)");
      break;
    case 3u:
      *(_BYTE *)(a1 + 23) = 18;
      strcpy((char *)a1, "AttrTypeOffset (3)");
      break;
    case 4u:
      *(_BYTE *)(a1 + 23) = 6;
      strcpy((char *)a1, "IR (4)");
      break;
    case 5u:
      *(_BYTE *)(a1 + 23) = 12;
      strcpy((char *)a1, "Resource (5)");
      break;
    case 6u:
      *(_BYTE *)(a1 + 23) = 18;
      strcpy((char *)a1, "ResourceOffset (6)");
      break;
    case 7u:
      *(_BYTE *)(a1 + 23) = 19;
      strcpy((char *)a1, "DialectVersions (7)");
      break;
    case 8u:
      *(_BYTE *)(a1 + 23) = 14;
      strcpy((char *)a1, "Properties (8)");
      break;
    default:
      v2[0] = "Unknown (";
      v2[2] = a2;
      v3 = 2307;
      v4[0] = v2;
      v4[2] = ")";
      v5 = 770;
      llvm::Twine::str((llvm::Twine *)v4, (std::string *)a1);
      break;
  }
}

uint64_t `anonymous namespace'::PropertiesSectionReader::initialize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39[3];
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 1;
  v35 = a3;
  v36 = a4;
  v37 = a3;
  v38 = a2;
  v34 = 0;
  {
    return 0;
  }
  v6 = *a1;
  v7 = a1[1];
  v30 = v6;
  v31 = v7;
  v32 = v6;
  v33 = a2;
  v8 = v34;
  if (v34 > *((unsigned int *)a1 + 7))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v34, 8);
    goto LABEL_7;
  }
  if (v34)
  {
    while (1)
    {
LABEL_7:
      v9 = a1[1];
      v10 = v30;
      v11 = v31;
      v12 = v32;
      v13 = *((unsigned int *)a1 + 6);
      if (v13 >= *((unsigned int *)a1 + 7))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v13 + 1, 8);
        v13 = *((unsigned int *)a1 + 6);
      }
      *(_QWORD *)(a1[2] + 8 * v13) = v9 - (v10 + v11) + v12;
      ++*((_DWORD *)a1 + 6);
      v39[0] = 0;
      {
        return 0;
      }
      if (!--v8)
      {
        if (v32 == v30 + v31)
          return 1;
        goto LABEL_15;
      }
    }
  }
  if (v6 == v6 + v7)
    return 1;
LABEL_15:
  mlir::emitError(v33, (uint64_t)v40);
  if (v40[0])
  {
    LODWORD(v39[0]) = 3;
    v39[1] = (unint64_t)"Broken properties section: didn't exhaust the offsets table";
    v39[2] = 59;
    v15 = v39;
    v16 = (char *)v41;
    if (v42 >= v43)
    {
      v28 = v42 + 1;
      if (v41 <= v39 && (char *)v41 + 24 * v42 > (char *)v39)
      {
        v29 = (char *)v39 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
        v16 = (char *)v41;
        v15 = (unint64_t *)((char *)v41 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
        v15 = v39;
        v16 = (char *)v41;
      }
    }
    v17 = &v16[24 * v42];
    v18 = *(_OWORD *)v15;
    *((_QWORD *)v17 + 2) = v15[2];
    *(_OWORD *)v17 = v18;
    ++v42;
  }
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v48;
      v21 = __p;
      if (v48 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v48 = v19;
      operator delete(v21);
    }
    v22 = v45;
    if (v45)
    {
      v23 = v46;
      v24 = v45;
      if (v46 != v45)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v45;
      }
      v46 = v22;
      operator delete(v24);
    }
    if (v41 != v44)
      free(v41);
  }
  return v14;
}

uint64_t mlir::BytecodeReader::Impl::parseDialectSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _OWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  const unsigned __int8 *v40;
  int8x16_t *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char **v47;
  _QWORD *buffer;
  const unsigned __int8 **v49;
  char *v50;
  uint64_t *v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t *v55;
  uint64_t result;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  char v63;
  __int128 v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  unint64_t *v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  uint64_t v76;
  _QWORD **v77;
  _QWORD **v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  void *v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94[2];
  __int128 v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  __int128 v99;
  __int16 v100;
  _QWORD v101[3];
  void *v102;
  uint64_t v103;
  void *v104;
  _QWORD *v105;
  void *__p;
  _QWORD **v107;
  char v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v88 = a2;
  v89 = a3;
  v90 = a2;
  v91 = v4;
  v87 = 0;
  v5 = (char **)(a1 + 272);
  v6 = v87;
  v7 = *(unsigned int *)(a1 + 280);
  if (v87 != v7)
  {
    if (v87 < v7)
    {
      v8 = 8 * v7;
      v9 = 8 * v87 - v8;
      v10 = &(*v5)[v8 - 8];
      do
      {
        v11 = *(_QWORD **)v10;
        *(_QWORD *)v10 = 0;
        if (v11)
        {
          v12 = v11[7];
          v11[7] = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          operator delete(v11);
        }
        v10 -= 8;
        v9 += 8;
      }
      while (v9);
      goto LABEL_34;
    }
    if (v87 <= *(unsigned int *)(a1 + 284))
    {
      v13 = *v5;
      v20 = v87 - v7;
      if (v87 == v7)
        goto LABEL_34;
      goto LABEL_33;
    }
    v96 = 0;
    v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 272, (void *)(a1 + 288), v87, 8, &v96);
    v14 = *(char **)(a1 + 272);
    v15 = *(unsigned int *)(a1 + 280);
    if (!(_DWORD)v15)
    {
LABEL_30:
      v33 = v96;
      if (v14 != (char *)(a1 + 288))
        free(v14);
      *(_QWORD *)(a1 + 272) = v13;
      *(_DWORD *)(a1 + 284) = v33;
      v7 = *(unsigned int *)(a1 + 280);
      v20 = v6 - v7;
      if (v6 == v7)
        goto LABEL_34;
LABEL_33:
      bzero(&v13[8 * v7], 8 * v20);
LABEL_34:
      *(_DWORD *)(a1 + 280) = v6;
      goto LABEL_35;
    }
    v16 = (v15 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v17 = 8 * v15;
    if (v16 >= 0xB)
    {
      if (v14 >= &v13[v17] || (v18 = v13, v19 = *(char **)(a1 + 272), v13 >= &v14[v17]))
      {
        v21 = v16 + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v18 = &v13[v22];
        v19 = &v14[v22];
        v23 = (__int128 *)(v14 + 16);
        v24 = v13 + 16;
        v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(v23 - 1);
          v27 = *v23;
          *(v23 - 1) = 0uLL;
          *v23 = 0uLL;
          *(v24 - 1) = v26;
          *v24 = v27;
          v23 += 2;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_23:
          v30 = (uint64_t)(*v5 - 8);
          do
          {
            v31 = *(_QWORD **)(v30 + v17);
            *(_QWORD *)(v30 + v17) = 0;
            if (v31)
            {
              v32 = v31[7];
              v31[7] = 0;
              if (v32)
                (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
              operator delete(v31);
            }
            v17 -= 8;
          }
          while (v17);
          v14 = *v5;
          goto LABEL_30;
        }
      }
    }
    else
    {
      v18 = v13;
      v19 = *(char **)(a1 + 272);
    }
    v28 = &v14[8 * v15];
    do
    {
      v29 = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      v19 += 8;
      *(_QWORD *)v18 = v29;
      v18 += 8;
    }
    while (v19 != v28);
    goto LABEL_23;
  }
LABEL_35:
  if (v6)
  {
    v34 = 0;
    v85 = v6;
    v86 = (uint64_t *)(a1 + 336);
    while (1)
    {
      v35 = operator new(0x40uLL);
      *v35 = 0u;
      v35[1] = 0u;
      v35[2] = 0u;
      v35[3] = 0u;
      v36 = *(_QWORD **)&(*v5)[8 * v34];
      *(_QWORD *)&(*v5)[8 * v34] = v35;
      if (v36)
      {
        v37 = v36[7];
        v36[7] = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        operator delete(v36);
      }
      if (*(_QWORD *)(a1 + 248))
        break;
      v46 = *(_QWORD *)&(*v5)[8 * v34];
      v96 = 0;
      {
        return 0;
      }
LABEL_38:
      if (++v34 == v6)
        goto LABEL_68;
    }
    *(_QWORD *)&v95 = 0;
    v38 = v95;
    *(_QWORD *)&v95 = (unint64_t)v95 >> 1;
    if (!resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v91, *(_QWORD *)(a1 + 536), *(_DWORD *)(a1 + 544), (char *)v95, (_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v34) + 24), (uint64_t)"string", 6))return 0;
    if ((v38 & 1) != 0)
    {
      LOBYTE(v94[0]) = 0;
      if (LOBYTE(v94[0]) != 7)
      {
        v76 = *(_QWORD *)(a1 + 8);
        v96 = (unint64_t)"expected dialect version section";
        WORD4(v99) = 259;
        mlir::emitError(v76, (uint64_t)&v96, (uint64_t)v101);
        if (v101[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v101);
        if (v108)
        {
          v77 = (_QWORD **)__p;
          if (__p)
          {
            v78 = v107;
            v79 = __p;
            if (v107 != __p)
            {
              do
                v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
              while (v78 != v77);
              v79 = __p;
            }
            v107 = v77;
            operator delete(v79);
          }
          v80 = v104;
          if (v104)
          {
            v81 = v105;
            v82 = v104;
            if (v105 != v104)
            {
              do
              {
                v84 = (void *)*--v81;
                v83 = v84;
                *v81 = 0;
                if (v84)
                  operator delete[](v83);
              }
              while (v81 != v80);
              v82 = v104;
            }
            v105 = v80;
            operator delete(v82);
          }
          if (v102 != &v103)
            free(v102);
        }
        return 0;
      }
    }
    v39 = *(_QWORD *)&(*v5)[8 * v34];
    v41 = *(int8x16_t **)(v39 + 24);
    v40 = *(const unsigned __int8 **)(v39 + 32);
    v42 = llvm::StringMapImpl::LookupBucketFor(v86, v41, v40);
    v43 = *v86;
    v44 = v42;
    v45 = *(_QWORD *)(*v86 + 8 * v42);
    if (v45 == -8)
    {
      --*(_DWORD *)(a1 + 352);
    }
    else if (v45)
    {
LABEL_37:
      *(_QWORD *)(v45 + 8) = v39;
      goto LABEL_38;
    }
    v47 = v5;
    buffer = llvm::allocate_buffer((size_t)(v40 + 17), (std::align_val_t)8uLL);
    v49 = (const unsigned __int8 **)buffer;
    v50 = (char *)(buffer + 2);
    if (v40)
      memcpy(buffer + 2, v41, (size_t)v40);
    v40[(_QWORD)v50] = 0;
    *v49 = v40;
    v49[1] = 0;
    *(_QWORD *)(v43 + 8 * v44) = v49;
    ++*(_DWORD *)(a1 + 348);
    v51 = (uint64_t *)(*(_QWORD *)(a1 + 336)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v86, v44));
    v5 = v47;
    v6 = v85;
    v45 = *v51;
    if (*v51)
      v52 = v45 == -8;
    else
      v52 = 1;
    if (v52)
    {
      do
      {
        v53 = v51[1];
        ++v51;
        v45 = v53;
        if (v53)
          v54 = v45 == -8;
        else
          v54 = 1;
      }
      while (v54);
    }
    goto LABEL_37;
  }
LABEL_68:
  if (*(_QWORD *)(a1 + 248) >= 4uLL)
  {
    v96 = 0;
    if (v96 > *(unsigned int *)(a1 + 372))
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, (void *)(a1 + 376), v96, 48);
  }
  if (v90 == v88 + v89)
    return 1;
  v55 = (uint64_t *)(a1 + 360);
  while (1)
  {
    v57 = *(unsigned int *)(a1 + 280);
    v94[0] = *(_QWORD *)(a1 + 272);
    v94[1] = v57;
    v93 = 0;
    v92 = 0;
    v58 = v92;
    if (v92)
    {
      v59 = v93;
      do
      {
        while (1)
        {
          v60 = *v59;
          v95 = 0uLL;
          if (*(_QWORD *)(a1 + 248) > 4uLL)
          {
            v96 = 0;
            v63 = v96;
            if (!resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v91, *(_QWORD *)(a1 + 536), *(_DWORD *)(a1 + 544), (char *)(v96 >> 1), &v95, (uint64_t)"string", 6))return 0;
            v61 = v63 & 1;
            v62 = 1;
          }
          else
          {
            v96 = 0;
            {
              return 0;
            }
            v61 = 0;
            v62 = 0;
          }
          v64 = v95;
          v65 = v61 | (v62 << 8);
          v66 = *(unsigned int *)(a1 + 368);
          if (v66 >= *(_DWORD *)(a1 + 372))
            break;
          v67 = *(_QWORD *)(a1 + 360) + 48 * v66;
          *(_BYTE *)v67 = 0;
          *(_BYTE *)(v67 + 8) = 0;
          *(_QWORD *)(v67 + 16) = v60;
          *(_OWORD *)(v67 + 24) = v64;
          *(_WORD *)(v67 + 40) = v65;
          ++*(_DWORD *)(a1 + 368);
          if (!--v58)
            goto LABEL_74;
        }
        LOBYTE(v96) = 0;
        v97 = 0;
        v98 = v60;
        v99 = v95;
        v100 = v65;
        v68 = v66 + 1;
        v69 = *v55 + 48 * (unint64_t)v66 > (unint64_t)&v96;
        if (*v55 <= (unint64_t)&v96 && v69)
        {
          v75 = (char *)&v96 - *v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, (void *)(a1 + 376), v68, 48);
          v70 = *v55;
          v71 = (unint64_t *)&v75[*v55];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, (void *)(a1 + 376), v68, 48);
          v70 = *v55;
          v71 = &v96;
        }
        v72 = (_OWORD *)(v70 + 48 * *(unsigned int *)(a1 + 368));
        v73 = *(_OWORD *)v71;
        v74 = *((_OWORD *)v71 + 2);
        v72[1] = *((_OWORD *)v71 + 1);
        v72[2] = v74;
        *v72 = v73;
        ++*(_DWORD *)(a1 + 368);
        --v58;
      }
      while (v58);
    }
LABEL_74:
    result = 1;
    if (v90 == v88 + v89)
      return result;
  }
}

uint64_t mlir::BytecodeReader::Impl::parseResourceSection(uint64_t *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  __int128 v20;
  _QWORD *ParserFor;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  int Key;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  int v48;
  char v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  _QWORD **v63;
  _QWORD **v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  uint64_t Context;
  mlir::MLIRContext *v70;
  const char *v71;
  uint64_t **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  __int128 v102;
  char v103;
  _QWORD **v104;
  _QWORD **v105;
  void *v106;
  _QWORD *v107;
  const char *v108;
  _QWORD *v109;
  void *v110;
  void *v111;
  void *v112;
  int v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  int v119;
  unint64_t v120;
  BOOL v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  int64_t v126;
  int64_t v127;
  int64_t v128;
  char v129;
  char v130;
  _QWORD **v131;
  _QWORD **v132;
  void *v133;
  _QWORD *v134;
  _QWORD *v135;
  void *v136;
  void *v137;
  void *v138;
  char *v139;
  char *v140;
  char *v141;
  __int128 v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  __int128 v149;
  _QWORD **v150;
  _QWORD **v151;
  void *v152;
  _QWORD *v153;
  void *v154;
  void *v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  __int128 v166;
  _QWORD **v167;
  _QWORD **v168;
  void *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  int64_t v178;
  int64_t v179;
  int64_t v180;
  int64_t v181;
  void *v182;
  mlir::MLIRContext *v183;
  unint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  _QWORD v187[7];
  __int128 v188;
  unint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196[2];
  uint64_t v197;
  unint64_t v198;
  __int128 v199;
  uint64_t v200;
  int v201;
  __int128 *v202;
  uint64_t *v203;
  uint64_t v204;
  __int128 v205;
  unint64_t v206;
  int v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212[2];
  uint64_t v213;
  void *v214;
  unsigned int v215;
  unsigned int v216;
  _BYTE v217[96];
  void *v218;
  _QWORD *v219;
  void *__p;
  _QWORD **v221;
  char v222;
  uint64_t v223;

  v223 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a3 + 16) != 0) == (*((_BYTE *)a4 + 16) != 0))
  {
    if (*((_BYTE *)a3 + 16))
    {
      v187[0] = off_1E0E15720;
      v187[1] = a1 + 11;
      v187[2] = a1 + 67;
      v187[3] = a1 + 53;
      v187[4] = a1 + 42;
      v187[5] = a2;
      v187[6] = a1 + 31;
      v16 = *a1;
      v15 = a1[1];
      v17 = a1[34];
      v186 = a1[151];
      v196[1] = *((unsigned int *)a1 + 70);
      v197 = v15;
      v196[0] = v17;
      v193 = *a3;
      v194 = v193;
      v195 = v15;
      v190 = *a4;
      v191 = v190;
      v192 = v15;
      v189 = 0;
      v184 = (unint64_t *)(a1 + 53);
      if (v189)
      {
        v18 = 0;
        v19 = (uint64_t *)(v16 + 16);
        do
        {
          v188 = 0uLL;
          v212[0] = 0;
          {
            return 0;
          }
          v20 = v188;
          *(_OWORD *)v212 = v188;
          *(_QWORD *)&v199 = 0;
          if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v19, (uint64_t)v212, &v199)|| (_QWORD)v199 == *(_QWORD *)(v16 + 16) + 24 * *(unsigned int *)(v16 + 32))
          {
            v23 = *(_QWORD *)(v16 + 40);
            if (v23)
            {
              ParserFor = mlir::FallbackAsmResourceMap::getParserFor(v23, (const void *)v212[0], v212[1]);
              v22 = 0;
              goto LABEL_55;
            }
          }
          else
          {
            ParserFor = *(_QWORD **)(v199 + 16);
            if (ParserFor)
            {
              v22 = 0;
              goto LABEL_55;
            }
          }
          mlir::emitWarning(v197, (uint64_t)v212);
          if (v212[0])
          {
            LODWORD(v199) = 3;
            *((_QWORD *)&v199 + 1) = "ignoring unknown external resources for '";
            v200 = 41;
            v24 = (char *)v214;
            if (v215 >= v216)
            {
              v58 = v215 + 1;
              if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
              {
                v60 = (char *)&v199 - (_BYTE *)v214;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v58, 24);
                v24 = (char *)v214;
                v25 = (char *)v214 + v60;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v58, 24);
                v25 = (char *)&v199;
                v24 = (char *)v214;
              }
            }
            else
            {
              v25 = (char *)&v199;
            }
            v26 = &v24[24 * v215];
            v27 = *(_OWORD *)v25;
            *((_QWORD *)v26 + 2) = *((_QWORD *)v25 + 2);
            *(_OWORD *)v26 = v27;
            ++v215;
            if (v212[0])
            {
              LOWORD(v202) = 261;
              v199 = v20;
              mlir::Diagnostic::operator<<((uint64_t)&v212[1], (const void ***)&v199);
              if (v212[0])
              {
                LODWORD(v199) = 3;
                *((_QWORD *)&v199 + 1) = "'";
                v200 = 1;
                v28 = (char *)v214;
                if (v215 >= v216)
                {
                  v59 = v215 + 1;
                  if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                  {
                    v61 = (char *)&v199 - (_BYTE *)v214;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v59, 24);
                    v28 = (char *)v214;
                    v29 = (char *)v214 + v61;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v59, 24);
                    v29 = (char *)&v199;
                    v28 = (char *)v214;
                  }
                }
                else
                {
                  v29 = (char *)&v199;
                }
                v30 = &v28[24 * v215];
                v31 = *(_OWORD *)v29;
                *((_QWORD *)v30 + 2) = *((_QWORD *)v29 + 2);
                *(_OWORD *)v30 = v31;
                ++v215;
                if (v212[0])
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
              }
            }
          }
          if (v222)
          {
            v32 = (_QWORD **)__p;
            if (__p)
            {
              v33 = v221;
              v34 = __p;
              if (v221 != __p)
              {
                do
                  v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
                while (v33 != v32);
                v34 = __p;
              }
              v221 = v32;
              operator delete(v34);
            }
            v35 = v218;
            if (v218)
            {
              v36 = v219;
              v37 = v218;
              if (v219 != v218)
              {
                do
                {
                  v39 = (void *)*--v36;
                  v38 = v39;
                  *v36 = 0;
                  if (v39)
                    operator delete[](v38);
                }
                while (v36 != v35);
                v37 = v218;
              }
              v219 = v35;
              operator delete(v37);
            }
            if (v214 != v217)
              free(v214);
          }
          ParserFor = 0;
          v22 = 1;
LABEL_55:
          v40 = v197;
          v206 = 0;
          v41 = v206;
          if (v206)
          {
            do
            {
              v208 = 0uLL;
              v207 = 0;
              v198 = 0;
              v205 = 0uLL;
              v212[0] = 0;
              {
                return 0;
              }
              if (!v22)
              {
                v209 = v205;
                v210 = v205;
                v211 = v40;
                Key = llvm::StringMapImpl::FindKey(a1 + 61, (int8x16_t *)v208, *((const unsigned __int8 **)&v208 + 1));
                if (Key == -1 || Key == (unint64_t)*((unsigned int *)a1 + 124))
                {
                  v43 = 0;
                  v44 = "";
                }
                else
                {
                  v45 = *(_QWORD *)(a1[61] + 8 * Key);
                  v47 = *(const char **)(v45 + 8);
                  v46 = v45 + 8;
                  v44 = v47;
                  v48 = *(char *)(v46 + 23);
                  if (v48 >= 0)
                    v44 = (const char *)v46;
                  v43 = *(_QWORD *)(v46 + 8);
                  if (v48 >= 0)
                    v43 = v48;
                }
                *(_QWORD *)&v208 = v44;
                *((_QWORD *)&v208 + 1) = v43;
                *(_QWORD *)&v199 = off_1E0E17F38;
                *((_QWORD *)&v199 + 1) = v44;
                v200 = v43;
                v201 = v207;
                v202 = &v209;
                v203 = a1 + 67;
                v204 = v186;
                if (!(*(unsigned __int8 (**)(_QWORD *, __int128 *))(*ParserFor + 16))(ParserFor, &v199))
                {
LABEL_223:
                  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v199);
                  return 0;
                }
                if (v210 != (_QWORD)v209 + *((_QWORD *)&v209 + 1))
                {
                  v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
                  if (v212[0])
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
                  if (v222)
                  {
                    v50 = (_QWORD **)__p;
                    if (__p)
                    {
                      v51 = v221;
                      v52 = __p;
                      if (v221 != __p)
                      {
                        do
                          v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
                        while (v51 != v50);
                        v52 = __p;
                      }
                      v221 = v50;
                      operator delete(v52);
                    }
                    v53 = v218;
                    if (v218)
                    {
                      v54 = v219;
                      v55 = v218;
                      if (v219 != v218)
                      {
                        do
                        {
                          v57 = (void *)*--v54;
                          v56 = v57;
                          *v54 = 0;
                          if (v57)
                            operator delete[](v56);
                        }
                        while (v54 != v53);
                        v55 = v218;
                      }
                      v219 = v53;
                      operator delete(v55);
                    }
                    if (v214 != v217)
                      free(v214);
                  }
                  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v199);
                  if (v49)
                    break;
                  return 0;
                }
                mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v199);
              }
            }
            while (--v41);
          }
          ++v18;
          v19 = (uint64_t *)(v16 + 16);
        }
        while (v18 < v189);
      }
      Context = mlir::Attribute::getContext((mlir::Attribute *)&v197);
      if (v191 != (_QWORD)v190 + *((_QWORD *)&v190 + 1))
      {
        v70 = (mlir::MLIRContext *)Context;
        v185 = a1 + 61;
        v182 = a1 + 55;
        v71 = "'";
        v183 = (mlir::MLIRContext *)Context;
        while (1)
        {
          v198 = 0;
          v72 = (uint64_t **)v198;
            return 0;
          v73 = **v72;
          if (!v73)
          {
            mlir::emitError(v195, (uint64_t)v212);
            if (v212[0])
            {
              LODWORD(v199) = 3;
              *((_QWORD *)&v199 + 1) = "dialect '";
              v200 = 9;
              v156 = (char *)&v199;
              v157 = (char *)v214;
              if (v215 >= v216)
              {
                v175 = v215 + 1;
                if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                {
                  v179 = (char *)&v199 - (_BYTE *)v214;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v175, 24);
                  v157 = (char *)v214;
                  v156 = (char *)v214 + v179;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v175, 24);
                  v156 = (char *)&v199;
                  v157 = (char *)v214;
                }
              }
              v158 = &v157[24 * v215];
              v159 = *(_OWORD *)v156;
              *((_QWORD *)v158 + 2) = *((_QWORD *)v156 + 2);
              *(_OWORD *)v158 = v159;
              ++v215;
              if (v212[0])
              {
                v160 = *v72;
                LOWORD(v202) = 261;
                v162 = v160[3];
                v161 = v160[4];
                *(_QWORD *)&v199 = v162;
                *((_QWORD *)&v199 + 1) = v161;
                mlir::Diagnostic::operator<<((uint64_t)&v212[1], (const void ***)&v199);
                if (v212[0])
                {
                  LODWORD(v199) = 3;
                  *((_QWORD *)&v199 + 1) = "' is unknown";
                  v200 = 12;
                  v163 = (char *)&v199;
                  v164 = (char *)v214;
                  if (v215 >= v216)
                  {
                    v177 = v215 + 1;
                    if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                    {
                      v181 = (char *)&v199 - (_BYTE *)v214;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v177, 24);
                      v164 = (char *)v214;
                      v163 = (char *)v214 + v181;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v177, 24);
                      v163 = (char *)&v199;
                      v164 = (char *)v214;
                    }
                  }
                  v165 = &v164[24 * v215];
                  v166 = *(_OWORD *)v163;
                  *((_QWORD *)v165 + 2) = *((_QWORD *)v163 + 2);
                  *(_OWORD *)v165 = v166;
                  ++v215;
                }
              }
            }
            v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
            if (v212[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
            if (!v222)
              return v6;
            v167 = (_QWORD **)__p;
            if (__p)
            {
              v168 = v221;
              v169 = __p;
              if (v221 != __p)
              {
                do
                  v168 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v168 - 1);
                while (v168 != v167);
                v169 = __p;
              }
              v221 = v167;
              operator delete(v169);
            }
            v10 = v218;
            if (!v218)
              goto LABEL_267;
            v170 = v219;
            v12 = v218;
            if (v219 == v218)
              goto LABEL_266;
            do
            {
              v172 = (void *)*--v170;
              v171 = v172;
              *v170 = 0;
              if (v172)
                operator delete[](v171);
            }
            while (v170 != v10);
            goto LABEL_265;
          }
          if (!mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(**v72)
            || (v74 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(v73)) == 0)
          {
            mlir::emitError(v195, (uint64_t)v212);
            if (v212[0])
            {
              LODWORD(v199) = 3;
              *((_QWORD *)&v199 + 1) = "unexpected resources for dialect '";
              v200 = 34;
              v139 = (char *)&v199;
              v140 = (char *)v214;
              if (v215 >= v216)
              {
                v174 = v215 + 1;
                if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                {
                  v178 = (char *)&v199 - (_BYTE *)v214;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v174, 24);
                  v140 = (char *)v214;
                  v139 = (char *)v214 + v178;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v174, 24);
                  v139 = (char *)&v199;
                  v140 = (char *)v214;
                }
              }
              v141 = &v140[24 * v215];
              v142 = *(_OWORD *)v139;
              *((_QWORD *)v141 + 2) = *((_QWORD *)v139 + 2);
              *(_OWORD *)v141 = v142;
              ++v215;
              if (v212[0])
              {
                v143 = *v72;
                LOWORD(v202) = 261;
                v145 = v143[3];
                v144 = v143[4];
                *(_QWORD *)&v199 = v145;
                *((_QWORD *)&v199 + 1) = v144;
                mlir::Diagnostic::operator<<((uint64_t)&v212[1], (const void ***)&v199);
                if (v212[0])
                {
                  LODWORD(v199) = 3;
                  *((_QWORD *)&v199 + 1) = v71;
                  v200 = 1;
                  v146 = (char *)&v199;
                  v147 = (char *)v214;
                  if (v215 >= v216)
                  {
                    v176 = v215 + 1;
                    if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                    {
                      v180 = (char *)&v199 - (_BYTE *)v214;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v176, 24);
                      v147 = (char *)v214;
                      v146 = (char *)v214 + v180;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v176, 24);
                      v146 = (char *)&v199;
                      v147 = (char *)v214;
                    }
                  }
                  v148 = &v147[24 * v215];
                  v149 = *(_OWORD *)v146;
                  *((_QWORD *)v148 + 2) = *((_QWORD *)v146 + 2);
                  *(_OWORD *)v148 = v149;
                  ++v215;
                }
              }
            }
            v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
            if (v212[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
            if (!v222)
              return v6;
            v150 = (_QWORD **)__p;
            if (__p)
            {
              v151 = v221;
              v152 = __p;
              if (v221 != __p)
              {
                do
                  v151 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v151 - 1);
                while (v151 != v150);
                v152 = __p;
              }
              v221 = v150;
              operator delete(v152);
            }
            v10 = v218;
            if (!v218)
              goto LABEL_267;
            v153 = v219;
            v12 = v218;
            if (v219 == v218)
              goto LABEL_266;
            do
            {
              v155 = (void *)*--v153;
              v154 = v155;
              *v153 = 0;
              if (v155)
                operator delete[](v154);
            }
            while (v153 != v10);
            goto LABEL_265;
          }
          v75 = v74;
          v76 = v197;
          *(_QWORD *)&v188 = 0;
          v77 = v188;
          if ((_QWORD)v188)
          {
            v78 = 0;
            do
            {
              v208 = 0uLL;
              v207 = 0;
              v206 = 0;
              v205 = 0uLL;
              v212[0] = 0;
              {
                return 0;
              }
              v79 = v208;
              (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v75 + 32))(&v209, v75, v208, *((_QWORD *)&v208 + 1));
              if ((_BYTE)v211)
              {
                (*(void (**)(unint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v75 + 40))(v212, v75, &v209);
                v80 = llvm::StringMap<std::string,llvm::MallocAllocator>::try_emplace<>((uint64_t)v185, (int8x16_t *)v79, *((const unsigned __int8 **)&v79 + 1));
                v81 = *v80 + 8;
                if (*(char *)(*v80 + 31) < 0)
                  operator delete(*(void **)v81);
                v82 = *(_OWORD *)v212;
                *(_QWORD *)(v81 + 16) = v213;
                *(_OWORD *)v81 = v82;
                v83 = *((unsigned int *)a1 + 108);
                v84 = a1[53];
                if (v83 >= *((_DWORD *)a1 + 109))
                {
                  v120 = v83 + 1;
                  v121 = v84 + 24 * v83 > (unint64_t)&v209;
                  if (v84 <= (unint64_t)&v209 && v121)
                  {
                    v125 = (char *)&v209 - v84;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v184, v182, v120, 24);
                    v84 = *v184;
                    v85 = &v125[*v184];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v184, v182, v120, 24);
                    v84 = *v184;
                    v85 = (char *)&v209;
                  }
                }
                else
                {
                  v85 = (char *)&v209;
                }
                v86 = v84 + 24 * *((unsigned int *)a1 + 108);
                v87 = *(_OWORD *)v85;
                *(_QWORD *)(v86 + 16) = *((_QWORD *)v85 + 2);
                *(_OWORD *)v86 = v87;
                ++*((_DWORD *)a1 + 108);
              }
              else
              {
                mlir::emitError(v195, (uint64_t)v212);
                if (v212[0])
                {
                  LODWORD(v199) = 3;
                  *((_QWORD *)&v199 + 1) = "unknown 'resource' key '";
                  v200 = 24;
                  v88 = (char *)v214;
                  if (v215 >= v216)
                  {
                    v122 = v215 + 1;
                    if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                    {
                      v126 = (char *)&v199 - (_BYTE *)v214;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v122, 24);
                      v88 = (char *)v214;
                      v89 = (char *)v214 + v126;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v122, 24);
                      v89 = (char *)&v199;
                      v88 = (char *)v214;
                    }
                  }
                  else
                  {
                    v89 = (char *)&v199;
                  }
                  v90 = &v88[24 * v215];
                  v91 = *(_OWORD *)v89;
                  *((_QWORD *)v90 + 2) = *((_QWORD *)v89 + 2);
                  *(_OWORD *)v90 = v91;
                  ++v215;
                  if (v212[0])
                  {
                    LOWORD(v202) = 261;
                    v199 = v79;
                    mlir::Diagnostic::operator<<((uint64_t)&v212[1], (const void ***)&v199);
                    if (v212[0])
                    {
                      LODWORD(v199) = 3;
                      *((_QWORD *)&v199 + 1) = "' for dialect '";
                      v200 = 15;
                      v92 = (char *)v214;
                      if (v215 >= v216)
                      {
                        v123 = v215 + 1;
                        if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                        {
                          v127 = (char *)&v199 - (_BYTE *)v214;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v123, 24);
                          v92 = (char *)v214;
                          v93 = (char *)v214 + v127;
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v123, 24);
                          v93 = (char *)&v199;
                          v92 = (char *)v214;
                        }
                      }
                      else
                      {
                        v93 = (char *)&v199;
                      }
                      v94 = &v92[24 * v215];
                      v95 = *(_OWORD *)v93;
                      *((_QWORD *)v94 + 2) = *((_QWORD *)v93 + 2);
                      *(_OWORD *)v94 = v95;
                      ++v215;
                      if (v212[0])
                      {
                        v96 = *(_QWORD *)v198;
                        LOWORD(v202) = 261;
                        v98 = *(_QWORD *)(v96 + 24);
                        v97 = *(_QWORD *)(v96 + 32);
                        *(_QWORD *)&v199 = v98;
                        *((_QWORD *)&v199 + 1) = v97;
                        mlir::Diagnostic::operator<<((uint64_t)&v212[1], (const void ***)&v199);
                        if (v212[0])
                        {
                          LODWORD(v199) = 3;
                          *((_QWORD *)&v199 + 1) = v71;
                          v200 = 1;
                          v99 = (char *)v214;
                          if (v215 >= v216)
                          {
                            v124 = v215 + 1;
                            if (v214 <= &v199 && (char *)v214 + 24 * v215 > (char *)&v199)
                            {
                              v128 = (char *)&v199 - (_BYTE *)v214;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v124, 24);
                              v99 = (char *)v214;
                              v100 = (char *)v214 + v128;
                            }
                            else
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v217, v124, 24);
                              v100 = (char *)&v199;
                              v99 = (char *)v214;
                            }
                          }
                          else
                          {
                            v100 = (char *)&v199;
                          }
                          v101 = &v99[24 * v215];
                          v102 = *(_OWORD *)v100;
                          *((_QWORD *)v101 + 2) = *((_QWORD *)v100 + 2);
                          *(_OWORD *)v101 = v102;
                          ++v215;
                        }
                      }
                    }
                  }
                }
                v103 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
                if (v212[0])
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
                if (v222)
                {
                  v104 = (_QWORD **)__p;
                  if (__p)
                  {
                    v105 = v221;
                    v106 = __p;
                    if (v221 != __p)
                    {
                      do
                        v105 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v105 - 1);
                      while (v105 != v104);
                      v106 = __p;
                    }
                    v221 = v104;
                    operator delete(v106);
                  }
                  v107 = v218;
                  if (v218)
                  {
                    v108 = v71;
                    v109 = v219;
                    v110 = v218;
                    if (v219 != v218)
                    {
                      do
                      {
                        v112 = (void *)*--v109;
                        v111 = v112;
                        *v109 = 0;
                        if (v112)
                          operator delete[](v111);
                      }
                      while (v109 != v107);
                      v110 = v218;
                    }
                    v219 = v107;
                    operator delete(v110);
                    v71 = v108;
                  }
                  if (v214 != v217)
                    free(v214);
                }
                if (!v103)
                  return 0;
              }
              if (*((_QWORD *)&v205 + 1))
              {
                v209 = v205;
                v210 = v205;
                v211 = v76;
                v113 = llvm::StringMapImpl::FindKey(v185, (int8x16_t *)v208, *((const unsigned __int8 **)&v208 + 1));
                if (v113 == -1 || v113 == (unint64_t)*((unsigned int *)a1 + 124))
                {
                  v114 = 0;
                  v115 = "";
                }
                else
                {
                  v116 = *(_QWORD *)(*v185 + 8 * v113);
                  v118 = *(const char **)(v116 + 8);
                  v117 = v116 + 8;
                  v115 = v118;
                  v119 = *(char *)(v117 + 23);
                  if (v119 >= 0)
                    v115 = (const char *)v117;
                  v114 = *(_QWORD *)(v117 + 8);
                  if (v119 >= 0)
                    v114 = v119;
                }
                *(_QWORD *)&v208 = v115;
                *((_QWORD *)&v208 + 1) = v114;
                *(_QWORD *)&v199 = off_1E0E17F38;
                *((_QWORD *)&v199 + 1) = v115;
                v200 = v114;
                v201 = v207;
                v202 = &v209;
                v203 = a1 + 67;
                v204 = v186;
                if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)v75 + 48))(v75, &v199))
                  goto LABEL_223;
                if (v210 != (_QWORD)v209 + *((_QWORD *)&v209 + 1))
                {
                  v129 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
                  v130 = v129;
                  if (v212[0])
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
                  v70 = v183;
                  if (v222)
                  {
                    v131 = (_QWORD **)__p;
                    if (__p)
                    {
                      v132 = v221;
                      v133 = __p;
                      if (v221 != __p)
                      {
                        do
                          v132 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v132 - 1);
                        while (v132 != v131);
                        v133 = __p;
                      }
                      v221 = v131;
                      operator delete(v133);
                    }
                    v134 = v218;
                    if (v218)
                    {
                      v135 = v219;
                      v136 = v218;
                      if (v219 != v218)
                      {
                        do
                        {
                          v138 = (void *)*--v135;
                          v137 = v138;
                          *v135 = 0;
                          if (v138)
                            operator delete[](v137);
                        }
                        while (v135 != v134);
                        v136 = v218;
                      }
                      v219 = v134;
                      operator delete(v136);
                    }
                    if (v214 != v217)
                      free(v214);
                  }
                  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v199);
                  if (v130)
                    goto LABEL_200;
                  return 0;
                }
                mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v199);
              }
            }
            while (++v78 != v77);
          }
          v70 = v183;
LABEL_200:
          v6 = 1;
          if (v191 == (_QWORD)v190 + *((_QWORD *)&v190 + 1))
            return v6;
        }
      }
    }
    return 1;
  }
  if (*((_BYTE *)a4 + 16))
  {
    v5 = a1[1];
    *(_QWORD *)&v199 = "unexpected resource offset section when resource section is not present";
    LOWORD(v202) = 259;
    mlir::emitError(v5, (uint64_t)&v199, (uint64_t)v212);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
    if (v212[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
    if (v222)
    {
      v7 = (_QWORD **)__p;
      if (__p)
      {
        v8 = v221;
        v9 = __p;
        if (v221 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v221 = v7;
        operator delete(v9);
      }
      v10 = v218;
      if (!v218)
        goto LABEL_267;
      v11 = v219;
      v12 = v218;
      if (v219 == v218)
      {
LABEL_266:
        v219 = v10;
        operator delete(v12);
LABEL_267:
        if (v214 != v217)
          free(v214);
        return v6;
      }
      do
      {
        v14 = (void *)*--v11;
        v13 = v14;
        *v11 = 0;
        if (v14)
          operator delete[](v13);
      }
      while (v11 != v10);
LABEL_265:
      v12 = v218;
      goto LABEL_266;
    }
  }
  else
  {
    v62 = a1[1];
    *(_QWORD *)&v199 = "expected resource offset section when resource section is present";
    LOWORD(v202) = 259;
    mlir::emitError(v62, (uint64_t)&v199, (uint64_t)v212);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v212);
    if (v212[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v212);
    if (v222)
    {
      v63 = (_QWORD **)__p;
      if (__p)
      {
        v64 = v221;
        v65 = __p;
        if (v221 != __p)
        {
          do
            v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
          while (v64 != v63);
          v65 = __p;
        }
        v221 = v63;
        operator delete(v65);
      }
      v10 = v218;
      if (!v218)
        goto LABEL_267;
      v66 = v219;
      v12 = v218;
      if (v219 == v218)
        goto LABEL_266;
      do
      {
        v68 = (void *)*--v66;
        v67 = v68;
        *v66 = 0;
        if (v68)
          operator delete[](v67);
      }
      while (v66 != v10);
      goto LABEL_265;
    }
  }
  return v6;
}

uint64_t `anonymous namespace'::AttrTypeReader::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  _QWORD **v51;
  _QWORD **v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  _QWORD **v62;
  _QWORD **v63;
  void *v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD v90[3];
  void *v91;
  _BYTE v92[96];
  void *v93;
  _QWORD *v94;
  void *__p;
  _QWORD **v96;
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 136);
  v81 = a6;
  v82 = a7;
  v83 = a6;
  v84 = v12;
  v80 = 0;
  v79 = 0;
  v77 = (uint64_t *)(a1 + 24);
  v13 = v80;
  v14 = *(unsigned int *)(a1 + 32);
  if (v80 != v14)
  {
    if (v80 >= v14)
    {
      if (v80 > *(unsigned int *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v77, (void *)(a1 + 40), v80, 40);
        v14 = *(unsigned int *)(a1 + 32);
      }
      if (v13 != v14)
        bzero((void *)(*v77 + 40 * v14), 40 * ((40 * (v13 - v14) - 40) / 0x28) + 40);
    }
    *(_DWORD *)(a1 + 32) = v13;
    LODWORD(v14) = v13;
  }
  v78 = (uint64_t *)(a1 + 80);
  v15 = v79;
  v16 = *(unsigned int *)(a1 + 88);
  v17 = (uint64_t *)(a1 + 24);
  if (v79 != v16)
  {
    if (v79 >= v16)
    {
      if (v79 > *(unsigned int *)(a1 + 92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v78, (void *)(a1 + 96), v79, 40);
        v16 = *(unsigned int *)(a1 + 88);
      }
      if (v15 != v16)
        bzero((void *)(*v78 + 40 * v16), 40 * ((40 * (v15 - v16) - 40) / 0x28) + 40);
    }
    *(_DWORD *)(a1 + 88) = v15;
    LODWORD(v14) = *(_DWORD *)(a1 + 32);
    LODWORD(v16) = v15;
  }
  if ((_DWORD)v14)
  {
    v70 = a1;
    v18 = 0;
    v19 = 0;
    v71 = v14;
    v72 = a2;
    v74 = a3;
    while (1)
    {
      v87 = a2;
      v88 = a3;
      v86 = 0;
      v85 = 0;
      v20 = v85;
      if (v85)
      {
        v21 = 0;
        v22 = v86;
        do
        {
          v24 = *v22;
          v25 = *v17;
          v89 = 0;
          v26 = v89;
          *(_BYTE *)(v25 + 40 * v19 + 16) = v89 & 1;
          v27 = v26 >> 1;
          v89 = v26 >> 1;
          v28 = (v26 >> 1) + v18;
          if (v28 <= a5)
          {
            v23 = (_QWORD *)(v25 + 40 * v19);
            v23[3] = a4 + v18;
            v23[4] = v27;
            v23[1] = v24;
            v18 = v28;
          }
          else
          {
            v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v90);
            if (v90[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v90);
            if (v97)
            {
              v30 = (_QWORD **)__p;
              if (__p)
              {
                v31 = v96;
                v32 = __p;
                if (v96 != __p)
                {
                  do
                    v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
                  while (v31 != v30);
                  v32 = __p;
                }
                v96 = v30;
                operator delete(v32);
              }
              v33 = v93;
              if (v93)
              {
                v34 = a4;
                v35 = a5;
                v36 = v94;
                v37 = v93;
                if (v94 != v93)
                {
                  do
                  {
                    v39 = (void *)*--v36;
                    v38 = v39;
                    *v36 = 0;
                    if (v39)
                      operator delete[](v38);
                  }
                  while (v36 != v33);
                  v37 = v93;
                }
                v94 = v33;
                operator delete(v37);
                a5 = v35;
                a4 = v34;
                v17 = v77;
              }
              if (v91 != v92)
                free(v91);
            }
            if (!v29)
              return 0;
          }
          ++v19;
        }
        while (++v21 != v20);
      }
      a2 = v72;
      a3 = v74;
      if (v19 == v71)
      {
        LODWORD(v16) = *(_DWORD *)(v70 + 88);
        if ((_DWORD)v16)
          goto LABEL_49;
        goto LABEL_81;
      }
    }
  }
  v18 = 0;
  if ((_DWORD)v16)
  {
LABEL_49:
    v40 = 0;
    v76 = v16;
    v73 = a2;
    v75 = a3;
    do
    {
      v87 = a2;
      v88 = a3;
      v86 = 0;
      v85 = 0;
      v41 = v85;
      if (v85)
      {
        v42 = 0;
        v43 = v86;
        do
        {
          v45 = *v43;
          v46 = *v78;
          v89 = 0;
          v47 = v89;
          *(_BYTE *)(v46 + 40 * v40 + 16) = v89 & 1;
          v48 = v47 >> 1;
          v89 = v47 >> 1;
          v49 = (v47 >> 1) + v18;
          if (v49 <= a5)
          {
            v44 = (_QWORD *)(v46 + 40 * v40);
            v44[3] = a4 + v18;
            v44[4] = v48;
            v44[1] = v45;
            v18 = v49;
          }
          else
          {
            v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v90);
            if (v90[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v90);
            if (v97)
            {
              v51 = (_QWORD **)__p;
              if (__p)
              {
                v52 = v96;
                v53 = __p;
                if (v96 != __p)
                {
                  do
                    v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
                  while (v52 != v51);
                  v53 = __p;
                }
                v96 = v51;
                operator delete(v53);
              }
              v54 = v93;
              if (v93)
              {
                v55 = a4;
                v56 = v94;
                v57 = v93;
                if (v94 != v93)
                {
                  do
                  {
                    v59 = (void *)*--v56;
                    v58 = v59;
                    *v56 = 0;
                    if (v59)
                      operator delete[](v58);
                  }
                  while (v56 != v54);
                  v57 = v93;
                }
                v94 = v54;
                operator delete(v57);
                a4 = v55;
              }
              if (v91 != v92)
                free(v91);
            }
            if (!v50)
              return 0;
          }
          ++v40;
        }
        while (++v42 != v41);
      }
      a3 = v75;
      a2 = v73;
    }
    while (v40 != v76);
  }
LABEL_81:
  if (v83 == v81 + v82)
    return 1;
  v60 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v90);
  if (v90[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v90);
  if (v97)
  {
    v62 = (_QWORD **)__p;
    if (__p)
    {
      v63 = v96;
      v64 = __p;
      if (v96 != __p)
      {
        do
          v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
        while (v63 != v62);
        v64 = __p;
      }
      v96 = v62;
      operator delete(v64);
    }
    v65 = v93;
    if (v93)
    {
      v66 = v94;
      v67 = v93;
      if (v94 != v93)
      {
        do
        {
          v69 = (void *)*--v66;
          v68 = v69;
          *v66 = 0;
          if (v69)
            operator delete[](v68);
        }
        while (v66 != v65);
        v67 = v93;
      }
      v94 = v65;
      operator delete(v67);
    }
    if (v91 != v92)
      free(v91);
  }
  return v60;
}

uint64_t mlir::BytecodeReader::Impl::parseIRSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int *v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD **v55;
  _QWORD **v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  void *v62;
  _QWORD **v63;
  _QWORD **v64;
  void *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  unint64_t v77;
  int64_t v78;
  __int128 v79;
  char v80;
  void *v81;
  _QWORD *v82;
  char *v83;
  _QWORD v84[3];
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  void *__dst;
  uint64_t v90;
  _BYTE v91[33];
  void *v92[2];
  uint64_t v93;
  void *v94[2];
  uint64_t v95;
  char v96;
  uint64_t v97;
  const char *v98;
  int v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[96];
  __int128 v103;
  uint64_t v104;
  __int128 __p;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  v84[0] = a2;
  v84[1] = a3;
  v84[2] = a2;
  v85 = v6;
  LOBYTE(v79) = 0;
  v80 = 0;
  v7 = (unsigned int *)mlir::ModuleOp::create(v6, &v79);
  v8 = (char *)operator new(0x80uLL);
  v9 = v8;
  v10 = v8 + 128;
  v11 = v7[11];
  v12 = v11 & 0x7FFFFF;
  if ((v11 & 0x7FFFFF) != 0)
  {
    v13 = (((unint64_t)&v7[4 * ((v11 >> 23) & 1) + 17] + ((v11 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * v7[10];
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  *(_QWORD *)v8 = v13;
  *((_QWORD *)v8 + 1) = v13 + 24 * v12;
  *((_QWORD *)v8 + 2) = v84;
  *((_QWORD *)v8 + 3) = 0;
  *((_DWORD *)v8 + 8) = 0;
  v14 = v8 + 56;
  *((_QWORD *)v8 + 5) = v8 + 56;
  v15 = (uint64_t)(v8 + 40);
  *((_QWORD *)v9 + 6) = 0x600000000;
  *((_QWORD *)v9 + 13) = 0;
  *((_QWORD *)v9 + 14) = 0;
  v9[120] = 1;
  v82 = v10;
  v83 = v10;
  v81 = v9;
  v16 = *(_QWORD *)((((unint64_t)&v7[4 * ((v11 >> 23) & 1) + 17]
                    + ((v11 >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * v7[10]
                  + 8);
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  v18 = *((unsigned int *)v9 + 12);
  if (v18 >= *((_DWORD *)v9 + 13))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v14, v18 + 1, 8);
    LODWORD(v18) = *((_DWORD *)v9 + 12);
  }
  *(_QWORD *)(*((_QWORD *)v9 + 5) + 8 * v18) = v17;
  ++*((_DWORD *)v9 + 12);
  *(v82 - 3) = *(_QWORD *)(*(v82 - 16) + 8);
  if (mlir::BytecodeReader::Impl::parseBlockHeader(a1, (_anonymous_namespace_::EncodingReader *)v84, (uint64_t)(v82 - 16)))
  {
    v19 = *(_QWORD *)(a1 + 688);
    if (v19 >= *(_QWORD *)(a1 + 696))
    {
      v20 = std::vector<mlir::BytecodeReader::Impl::ValueScope>::__emplace_back_slow_path<>((void **)(a1 + 680));
    }
    else
    {
      *(_OWORD *)(v19 + 16) = 0u;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_QWORD *)(v19 + 48) = 0;
      *(_OWORD *)v19 = 0u;
      *(_QWORD *)(v19 + 24) = v19 + 40;
      *(_DWORD *)(v19 + 36) = 4;
      v20 = (char *)(v19 + 56);
    }
    *(_QWORD *)(a1 + 688) = v20;
    v22 = v82;
    v23 = (*((_QWORD *)v20 - 6) - *((_QWORD *)v20 - 7)) >> 3;
    v24 = *((unsigned int *)v20 - 6);
    if (v24 >= *((_DWORD *)v20 - 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v20 - 32), v20 - 16, v24 + 1, 4);
      LODWORD(v24) = *((_DWORD *)v20 - 6);
    }
    *(_DWORD *)(*((_QWORD *)v20 - 4) + 4 * v24) = v23;
    ++*((_DWORD *)v20 - 6);
    v25 = *((_QWORD *)v20 - 7);
    v26 = (*((_QWORD *)v20 - 6) - v25) >> 3;
    v27 = *((unsigned int *)v22 - 24);
    if (v26 >= v26 + v27)
    {
      if (v26 > v26 + v27)
        *((_QWORD *)v20 - 6) = v25 + 8 * (v26 + v27);
    }
    else
    {
      std::vector<mlir::Value>::__append((void **)v20 - 7, v27);
    }
    while (v81 != v82)
    {
      if (!mlir::BytecodeReader::Impl::parseRegions((unsigned int *)a1, &v81, (uint64_t)(v82 - 16)))
        goto LABEL_22;
    }
    if (*(_QWORD *)(a1 + 760) != a1 + 760)
    {
      v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v97);
      if (v97)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v97);
      if (!v107)
        goto LABEL_112;
      v28 = (_QWORD **)__p;
      if ((_QWORD)__p)
      {
        v29 = (_QWORD **)*((_QWORD *)&__p + 1);
        v30 = (void *)__p;
        if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = (void *)__p;
        }
        *((_QWORD *)&__p + 1) = v28;
        operator delete(v30);
      }
      v31 = (_QWORD *)v103;
      if ((_QWORD)v103)
      {
        v32 = (_QWORD *)*((_QWORD *)&v103 + 1);
        v33 = (void *)v103;
        if (*((_QWORD *)&v103 + 1) != (_QWORD)v103)
        {
          do
          {
            v35 = (void *)*--v32;
            v34 = v35;
            *v32 = 0;
            if (v35)
              operator delete[](v34);
          }
          while (v32 != v31);
          v33 = (void *)v103;
        }
        *((_QWORD *)&v103 + 1) = v31;
        operator delete(v33);
      }
      v53 = v100;
      if (v100 == v102)
        goto LABEL_112;
      goto LABEL_111;
    }
    LODWORD(v86) = 0;
    v97 = a1;
    v98 = (const char *)&v86;
    mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v7, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_0>, (uint64_t)&v97, 0);
    v97 = a1;
    v36 = mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v7, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Block *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_1>, (uint64_t)&v97, 1);
    v97 = a1;
    v37 = mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v7, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_2>, (uint64_t)&v97, 1);
    if (v36 && v37)
    {
      v38 = *(unsigned int *)(a1 + 280);
      if (!(_DWORD)v38)
      {
LABEL_54:
        if (*(_BYTE *)(*(_QWORD *)a1 + 8))
          mlir::verify((mlir *)v7, (mlir::Operation *)1);
        v51 = *(_QWORD *)((((unint64_t)&v7[4 * (((unint64_t)v7[11] >> 23) & 1) + 17]
                          + (((unint64_t)v7[11] >> 21) & 0x7F8)
                          + 3) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * v7[10]
                        + 8);
        if (v51)
          v52 = v51 - 8;
        else
          v52 = 0;
        llvm::iplist_impl<llvm::simple_ilist<mlir::Operation>,llvm::ilist_traits<mlir::Operation>>::splice(a4 + 32, (uint64_t *)(a4 + 32), v52 + 32, *(uint64_t **)(v52 + 40), (uint64_t *)(v52 + 32));
        v21 = 1;
        goto LABEL_113;
      }
      v39 = *(_QWORD *)(a1 + 272);
      v40 = 8 * v38;
      while (1)
      {
        if (*(_QWORD *)(*(_QWORD *)v39 + 56))
        {
          v41 = *(_QWORD *)(*(_QWORD *)v39 + 16);
          if (v41)
          {
            if (!(*(unsigned __int8 (**)(uint64_t, unsigned int *))(*(_QWORD *)v41 + 64))(v41, v7))
              break;
          }
        }
        v39 += 8;
        v40 -= 8;
        if (!v40)
          goto LABEL_54;
      }
LABEL_22:
      v21 = 0;
      goto LABEL_112;
    }
    mlir::emitError(v85, (uint64_t)&v97);
    v42 = v97;
    if (v97)
    {
      LODWORD(v86) = 3;
      v87 = "parsed use-list orders were invalid and could not be applied";
      v88 = 60;
      v43 = (char *)&v86;
      v44 = (char *)v100;
      if (v101 >= HIDWORD(v101))
      {
        v77 = v101 + 1;
        if (v100 <= &v86 && (char *)v100 + 24 * v101 > (char *)&v86)
        {
          v78 = (char *)&v86 - (_BYTE *)v100;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v77, 24);
          v44 = (char *)v100;
          v43 = (char *)v100 + v78;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v77, 24);
          v43 = (char *)&v86;
          v44 = (char *)v100;
        }
      }
      v45 = &v44[24 * v101];
      v46 = *(_OWORD *)v43;
      *((_QWORD *)v45 + 2) = *((_QWORD *)v43 + 2);
      *(_OWORD *)v45 = v46;
      LODWORD(v101) = v101 + 1;
      v42 = v97;
    }
    v86 = v42;
    LOBYTE(v87) = 0;
    v96 = 0;
    if (!v107)
    {
LABEL_76:
      mlir::InFlightDiagnostic::abandon(&v97);
      if (v97)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v97);
      if (v107)
      {
        v55 = (_QWORD **)__p;
        if ((_QWORD)__p)
        {
          v56 = (_QWORD **)*((_QWORD *)&__p + 1);
          v57 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
              v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
            while (v56 != v55);
            v57 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v55;
          operator delete(v57);
        }
        v58 = (_QWORD *)v103;
        if ((_QWORD)v103)
        {
          v59 = (_QWORD *)*((_QWORD *)&v103 + 1);
          v60 = (void *)v103;
          if (*((_QWORD *)&v103 + 1) != (_QWORD)v103)
          {
            do
            {
              v62 = (void *)*--v59;
              v61 = v62;
              *v59 = 0;
              if (v62)
                operator delete[](v61);
            }
            while (v59 != v58);
            v60 = (void *)v103;
          }
          *((_QWORD *)&v103 + 1) = v58;
          operator delete(v60);
        }
        if (v100 != v102)
          free(v100);
      }
      v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
      if (v86)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
      if (!v96)
        goto LABEL_112;
      v63 = (_QWORD **)v94[0];
      if (v94[0])
      {
        v64 = (_QWORD **)v94[1];
        v65 = v94[0];
        if (v94[1] != v94[0])
        {
          do
            v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
          while (v64 != v63);
          v65 = v94[0];
        }
        v94[1] = v63;
        operator delete(v65);
      }
      v66 = v92[0];
      if (v92[0])
      {
        v67 = v92[1];
        v68 = v92[0];
        if (v92[1] != v92[0])
        {
          do
          {
            v70 = (void *)*--v67;
            v69 = v70;
            *v67 = 0;
            if (v70)
              operator delete[](v69);
          }
          while (v67 != v66);
          v68 = v92[0];
        }
        v92[1] = v66;
        operator delete(v68);
      }
      v53 = __dst;
      if (__dst == v91)
      {
LABEL_112:
        if (!v7)
          goto LABEL_114;
        goto LABEL_113;
      }
LABEL_111:
      free(v53);
      goto LABEL_112;
    }
    v87 = v98;
    v47 = v101;
    LODWORD(v88) = v99;
    v48 = v91;
    __dst = v91;
    v90 = 0x400000000;
    if (!(_DWORD)v101)
    {
      v50 = 1;
      goto LABEL_72;
    }
    v49 = v102;
    if (v100 != v102)
    {
      __dst = v100;
      v90 = v101;
      v100 = v102;
      HIDWORD(v101) = 0;
      v50 = 1;
LABEL_71:
      LODWORD(v101) = 0;
LABEL_72:
      *(_OWORD *)v92 = v103;
      v93 = v104;
      v103 = 0uLL;
      *(_OWORD *)v94 = __p;
      v95 = v106;
      v104 = 0;
      __p = 0uLL;
      v106 = 0;
      v96 = 1;
      if (v50)
      {
        if (v100 != v102)
          free(v100);
        v107 = 0;
      }
      goto LABEL_76;
    }
    if (v101 < 5)
    {
      v54 = v101;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v91, v101, 24);
      v54 = v101;
      if (!(_DWORD)v101)
      {
LABEL_70:
        LODWORD(v90) = v47;
        v50 = v107;
        goto LABEL_71;
      }
      v49 = v100;
      v48 = __dst;
    }
    memcpy(v48, v49, 24 * v54);
    goto LABEL_70;
  }
  v21 = 0;
LABEL_113:
  mlir::Operation::erase((mlir::Operation *)v7);
LABEL_114:
  v71 = v81;
  if (v81)
  {
    v72 = v82;
    v73 = v81;
    if (v82 != v81)
    {
      do
      {
        v74 = (_QWORD *)*(v72 - 11);
        if (v72 - 9 != v74)
          free(v74);
        v75 = (void *)*(v72 - 13);
        *(v72 - 13) = 0;
        if (v75)
          operator delete(v75);
        v72 -= 16;
      }
      while (v72 != v71);
      v73 = v81;
    }
    v82 = v71;
    operator delete(v73);
  }
  return v21;
}

uint64_t `anonymous namespace'::EncodingReader::parseVarInt(_anonymous_namespace_::EncodingReader *this, unint64_t *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  _QWORD **v9;
  _QWORD **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned __int8 __dst[24];
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD **v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)*((_QWORD *)this + 2);
  if (v4 == (unsigned __int8 *)(*(_QWORD *)this + *((_QWORD *)this + 1)))
  {
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__dst);
    if (*(_QWORD *)__dst)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    if (v24)
    {
      v9 = (_QWORD **)__p;
      if (__p)
      {
        v10 = v23;
        v11 = __p;
        if (v23 != __p)
        {
          do
            v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          v11 = __p;
        }
        v23 = v9;
        operator delete(v11);
      }
      v12 = v20;
      if (v20)
      {
        v13 = v21;
        v14 = v20;
        if (v21 != v20)
        {
          do
          {
            v16 = (void *)*--v13;
            v15 = v16;
            *v13 = 0;
            if (v16)
              operator delete[](v15);
          }
          while (v13 != v12);
          v14 = v20;
        }
        v21 = v12;
        operator delete(v14);
      }
      if (v18 != &v19)
        free(v18);
    }
    if (!v8)
      return 0;
    v5 = *a2;
    if ((*a2 & 1) != 0)
      goto LABEL_3;
LABEL_26:
    if (v5)
    {
      v6 = *(_QWORD *)__dst;
      goto LABEL_4;
    }
    return 0;
  }
  *((_QWORD *)this + 2) = v4 + 1;
  v5 = *v4;
  *a2 = v5;
  if ((v5 & 1) == 0)
    goto LABEL_26;
LABEL_3:
  v6 = v5 >> 1;
LABEL_4:
  *a2 = v6;
  return 1;
}

uint64_t mlir::BytecodeReader::Impl::sortUseListOrder(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  char *v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  _QWORD *v57;
  unint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _BYTE *v64;
  unsigned int v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  const double *v77;
  int32x4_t *v78;
  const double *v79;
  unsigned __int128 v80;
  const double *v81;
  unsigned __int128 v82;
  const double *v83;
  const double *v84;
  unsigned __int128 v85;
  unsigned __int128 v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unint64_t v90;
  int32x4_t v91;
  int32x4_t *v92;
  int32x4_t v93;
  int32x4_t v94;
  uint64_t v95;
  _DWORD *v96;
  unint64_t v97;
  _DWORD *v98;
  int v100;
  unsigned int v101;
  llvm *v102;
  uint64_t v103;
  unsigned int v104;
  _QWORD *v105;
  void *v106[2];
  uint64_t v107;
  void *v108;
  unint64_t v109;
  _BYTE v110[16];
  void *__dst;
  uint64_t v112;
  _BYTE v113[16];
  char v114;
  void *v115;
  uint64_t v116;
  char v117[8];
  char *v118;
  void **v119;
  char v120;
  char *v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v105 = a2;
  v3 = (_QWORD *)*a2;
  if (!*a2 || !*v3)
    return 1;
  v5 = *(_DWORD *)(a1 + 528);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 512);
    v7 = v5 - 1;
    v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    v9 = *(_QWORD **)(v6 + 48 * v8);
    if (v9 == a2)
    {
      v10 = 1;
    }
    else
    {
      v100 = 1;
      do
      {
        v10 = v9 != (_QWORD *)-4096;
        if (v9 == (_QWORD *)-4096)
          break;
        v101 = v8 + v100++;
        v8 = v101 & v7;
        v9 = *(_QWORD **)(v6 + 48 * v8);
        v10 = 1;
      }
      while (v9 != a2);
    }
  }
  else
  {
    v10 = 0;
  }
  v12 = *(_QWORD *)(a1 + 704);
  v13 = *(unsigned int *)(a1 + 720);
  if (!(_DWORD)v13)
  {
LABEL_14:
    v16 = (uint64_t *)(v12 + 16 * v13);
    goto LABEL_15;
  }
  v14 = v3[2];
  LODWORD(v15) = ((v14 >> 4) ^ (v14 >> 9)) & (v13 - 1);
  v16 = (uint64_t *)(v12 + 16 * v15);
  v17 = *v16;
  if (*v16 != v14)
  {
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v13 - 1);
      v17 = *(_QWORD *)(v12 + 16 * v15);
      if (v17 == v14)
      {
        v16 = (uint64_t *)(v12 + 16 * v15);
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
LABEL_15:
  v20 = *((unsigned int *)v16 + 2);
  v21 = mlir::OpOperand::getOperandNumber((unint64_t)v3) | (unint64_t)(v20 << 32);
  v121 = (char *)&v123;
  v123 = 0;
  v124 = v21;
  v122 = 0x300000001;
  v22 = *(_QWORD **)*a2;
  if (!v22)
  {
    if (!v10)
      goto LABEL_93;
LABEL_38:
    v48 = *(_QWORD *)(a1 + 512);
    v49 = *(_DWORD *)(a1 + 528);
    if (v49)
    {
      v50 = ((v105 >> 4) ^ (v105 >> 9)) & (v49 - 1);
      v51 = v48 + 48 * v50;
      v52 = *(_QWORD **)v51;
      if (*(_QWORD **)v51 == v105)
        goto LABEL_45;
      v53 = 1;
      while (v52 != (_QWORD *)-4096)
      {
        v54 = v50 + v53++;
        v50 = v54 & (v49 - 1);
        v51 = v48 + 48 * v50;
        v52 = *(_QWORD **)v51;
        if (*(_QWORD **)v51 == v105)
          goto LABEL_45;
      }
    }
    v51 = v48 + 48 * v49;
LABEL_45:
    __dst = v113;
    v112 = 0x400000000;
    v55 = *(unsigned int *)(v51 + 16);
    if (&__dst == (void **)(v51 + 8) || (_DWORD)v55 == 0)
    {
      LODWORD(v55) = 0;
      v114 = *(_BYTE *)(v51 + 40);
      v108 = v110;
      v109 = 0x400000000;
      v57 = (_QWORD *)*v105;
      if (!*v105)
        goto LABEL_64;
      goto LABEL_51;
    }
    v64 = v113;
    v65 = *(_DWORD *)(v51 + 16);
    if (v55 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v113, *(unsigned int *)(v51 + 16), 4);
      v65 = *(_DWORD *)(v51 + 16);
      if (!v65)
        goto LABEL_62;
      v64 = __dst;
    }
    memcpy(v64, *(const void **)(v51 + 8), 4 * v65);
LABEL_62:
    LODWORD(v112) = v55;
    v114 = *(_BYTE *)(v51 + 40);
    v108 = v110;
    v109 = 0x400000000;
    if (__dst == v113)
    {
      v89 = v55;
      if (v55 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v110, v55, 4), (v89 = v112) != 0))
      {
        memcpy(v108, __dst, 4 * v89);
      }
      LODWORD(v109) = v55;
      LODWORD(v112) = 0;
      v57 = (_QWORD *)*v105;
      if (!*v105)
      {
LABEL_64:
        v58 = 0;
        if (!v114)
          goto LABEL_65;
        goto LABEL_54;
      }
    }
    else
    {
      v108 = __dst;
      v109 = __PAIR64__(HIDWORD(v112), v55);
      __dst = v113;
      v112 = 0;
      v57 = (_QWORD *)*v105;
      if (!*v105)
        goto LABEL_64;
    }
LABEL_51:
    v58 = 0;
    do
    {
      ++v58;
      v57 = (_QWORD *)*v57;
    }
    while (v57);
    if (!v114)
    {
LABEL_65:
      v102 = 0;
      v103 = 0;
      v104 = 0;
      if ((_DWORD)v55)
      {
LABEL_66:
        v66 = 0;
        v67 = (char *)v108;
        v68 = (char *)v108 + 4 * v55;
        while (1)
        {
          if (v104)
          {
            v69 = *(_DWORD *)v67;
            v70 = (37 * *(_DWORD *)v67) & (v104 - 1);
            v71 = *((_DWORD *)v102 + v70);
            if (*(_DWORD *)v67 == v71)
            {
              if (v70 != v104)
                goto LABEL_115;
              goto LABEL_68;
            }
            v72 = 1;
            do
            {
              if (v71 == -1)
                goto LABEL_67;
              v73 = v70 + v72++;
              v70 = v73 & (v104 - 1);
              v71 = *((_DWORD *)v102 + v70);
            }
            while (v69 != v71);
            if (v70 != v104)
              goto LABEL_115;
          }
LABEL_67:
          v69 = *(_DWORD *)v67;
LABEL_68:
          v66 += v69;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((char *)&v102, v67, (uint64_t)&v115);
          v67 += 4;
          if (v67 == v68)
          {
            if (v58 == v109)
              goto LABEL_111;
            goto LABEL_115;
          }
        }
      }
LABEL_110:
      v66 = 0;
      if (!v58)
      {
LABEL_111:
        if (v66 == ((v58 - 1) * v58) >> 1)
        {
          v115 = v121;
          v116 = (uint64_t)&v108;
          v117[0] = 1;
          v118 = &v121[16 * v122];
          v119 = &v108;
          v120 = 1;
          llvm::SmallVector<unsigned int,4u>::SmallVector<llvm::mapped_iterator<std::pair<unsigned int,unsigned long long> *,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_1,unsigned int>>(v106, (unsigned int **)&v115);
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v108, (uint64_t)v106);
          if (v106[0] != &v107)
            free(v106[0]);
          mlir::Value::shuffleUseList(&v105, (unsigned int *)v108, v109);
        }
      }
LABEL_115:
      llvm::deallocate_buffer(v102, (void *)(4 * v104));
    }
LABEL_54:
    if ((v55 & 1) != 0)
    {
      v11 = 0;
      if (v108 != v110)
        free(v108);
      if (__dst != v113)
        free(__dst);
      goto LABEL_120;
    }
    llvm::SmallVector<unsigned int,4u>::SmallVector(&v115, v58);
    v59 = v115;
    v60 = v116;
    if ((_DWORD)v116)
    {
      v61 = (v116 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v61 < 7)
      {
        LODWORD(v62) = 0;
        v63 = v115;
LABEL_102:
        v96 = &v59[v60];
        do
        {
          *v63++ = v62;
          LODWORD(v62) = v62 + 1;
        }
        while (v63 != v96);
        goto LABEL_104;
      }
      v90 = v61 + 1;
      v62 = (v61 + 1) & 0x7FFFFFFFFFFFFFF8;
      v63 = (char *)v115 + 4 * v62;
      v91 = (int32x4_t)xmmword_181235170;
      v92 = (int32x4_t *)((char *)v115 + 16);
      v93.i64[0] = 0x400000004;
      v93.i64[1] = 0x400000004;
      v94.i64[0] = 0x800000008;
      v94.i64[1] = 0x800000008;
      v95 = v62;
      do
      {
        v92[-1] = v91;
        *v92 = vaddq_s32(v91, v93);
        v91 = vaddq_s32(v91, v94);
        v92 += 2;
        v95 -= 8;
      }
      while (v95);
      if (v90 != v62)
        goto LABEL_102;
    }
LABEL_104:
    if ((_DWORD)v109)
    {
      v97 = 0;
      v98 = v108;
      do
      {
        v59[v98[v97]] = v98[v97 + 1];
        v97 += 2;
      }
      while (v97 < v109);
    }
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v108, (uint64_t)&v115);
    if (v115 != v117)
      free(v115);
    LODWORD(v55) = v109;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    if ((_DWORD)v109)
      goto LABEL_66;
    goto LABEL_110;
  }
  v23 = 1;
  v24 = 1;
  do
  {
    v25 = *(_QWORD *)(a1 + 704);
    v26 = *(unsigned int *)(a1 + 720);
    if ((_DWORD)v26)
    {
      v27 = v22[2];
      LODWORD(v28) = ((v27 >> 4) ^ (v27 >> 9)) & (v26 - 1);
      v29 = (uint64_t *)(v25 + 16 * v28);
      v30 = *v29;
      if (*v29 == v27)
        goto LABEL_24;
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v26 - 1);
        v30 = *(_QWORD *)(v25 + 16 * v28);
        if (v30 == v27)
        {
          v29 = (uint64_t *)(v25 + 16 * v28);
          goto LABEL_24;
        }
      }
    }
    v29 = (uint64_t *)(v25 + 16 * v26);
LABEL_24:
    v33 = *((unsigned int *)v29 + 2);
    v34 = mlir::OpOperand::getOperandNumber((unint64_t)v22) | (unint64_t)(v33 << 32);
    v35 = v21 > v34;
    v36 = v122;
    if (v122 >= (unint64_t)HIDWORD(v122))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, &v123, v122 + 1, 16);
      v36 = v122;
    }
    v23 &= v35;
    v37 = &v121[16 * v36];
    *(_QWORD *)v37 = v24;
    *((_QWORD *)v37 + 1) = v34;
    v38 = (v122 + 1);
    LODWORD(v122) = v122 + 1;
    ++v24;
    v22 = (_QWORD *)*v22;
    v21 = v34;
  }
  while (v22);
  if (((v10 | v23 ^ 1) & 1) == 0)
    goto LABEL_93;
  if ((v23 & 1) == 0)
  {
    v39 = 126 - 2 * __clz(v38);
    if ((_DWORD)v38)
      v40 = v39;
    else
      v40 = 0;
    std::__introsort<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>((int *)v121, (int *)&v121[16 * v38], v40, 1);
  }
  if (v10)
    goto LABEL_38;
  v41 = (unsigned int *)v121;
  v42 = v122;
  v115 = v117;
  v116 = 0xC00000000;
  if (v122 >= 0xD)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v117, v122, 4);
    v43 = v116;
    v44 = (unsigned int *)v115;
    v45 = (char *)v115 + 4 * v116;
    v46 = (v42 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v46 < 0x18)
      goto LABEL_36;
LABEL_83:
    if (v45 >= (char *)&v41[4 * v46 + 2] || (v47 = v41, v41 >= &v44[v43 + 1 + v46]))
    {
      v74 = v46 + 1;
      v75 = (v46 + 1) & 7;
      if (!v75)
        v75 = 8;
      v76 = v74 - v75;
      v45 += 4 * v76;
      v47 = &v41[4 * v76];
      v77 = (const double *)(v41 + 16);
      v78 = (int32x4_t *)&v44[v43 + 4];
      do
      {
        v79 = v77 - 8;
        v80 = (unsigned __int128)vld2q_f64(v79);
        v81 = v77 - 4;
        v82 = (unsigned __int128)vld2q_f64(v81);
        v83 = v77 + 16;
        v85 = (unsigned __int128)vld2q_f64(v77);
        v84 = v77 + 4;
        v86 = (unsigned __int128)vld2q_f64(v84);
        v78[-1] = vuzp1q_s32((int32x4_t)v80, (int32x4_t)v82);
        *v78 = vuzp1q_s32((int32x4_t)v85, (int32x4_t)v86);
        v78 += 2;
        v77 = v83;
        v76 -= 8;
      }
      while (v76);
    }
    goto LABEL_89;
  }
  if ((_DWORD)v122)
  {
    v43 = 0;
    v44 = (unsigned int *)v117;
    v45 = v117;
    v46 = (v122 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v46 >= 0x18)
      goto LABEL_83;
LABEL_36:
    v47 = v41;
    do
    {
LABEL_89:
      v87 = *(_QWORD *)v47;
      v47 += 4;
      *(_DWORD *)v45 = v87;
      v45 += 4;
    }
    while (v47 != &v41[4 * v42]);
    v88 = v116;
  }
  else
  {
    v88 = 0;
    v44 = (unsigned int *)v117;
  }
  LODWORD(v116) = v88 + v42;
  mlir::Value::shuffleUseList(&v105, v44, (v88 + v42));
  if (v115 != v117)
    free(v115);
LABEL_93:
  v11 = 1;
LABEL_120:
  if (v121 != (char *)&v123)
    free(v121);
  return v11;
}

_QWORD *llvm::SmallVector<unsigned int,4u>::SmallVector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  if (a2)
  {
    if (a2 < 5)
    {
      v4 = 0;
      v5 = a2;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, a2, 4);
      v4 = *((unsigned int *)a1 + 2);
      v5 = a2 - v4;
      if (a2 == v4)
        goto LABEL_7;
    }
    bzero((void *)(*a1 + 4 * v4), 4 * v5);
LABEL_7:
    *((_DWORD *)a1 + 2) = a2;
  }
  return a1;
}

_QWORD *llvm::SmallVector<unsigned int,4u>::SmallVector<llvm::mapped_iterator<std::pair<unsigned int,unsigned long long> *,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_1,unsigned int>>(_QWORD *a1, unsigned int **a2)
{
  unsigned int *v3;
  uint64_t *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v3 = *a2;
  v4 = (uint64_t *)a2[1];
  v5 = a2[3];
  v6 = (char *)v5 - (char *)*a2;
  if ((unint64_t)v6 < 0x41)
  {
    v7 = 0;
    if (v3 == v5)
      goto LABEL_8;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 4, 4);
    v7 = *((_DWORD *)a1 + 2);
    if (v3 == v5)
      goto LABEL_8;
  }
  v8 = (_DWORD *)(*a1 + 4 * v7);
  v9 = *v4;
  do
  {
    v10 = *v3;
    v3 += 4;
    *v8++ = *(_DWORD *)(v9 + 4 * v10);
  }
  while (v3 != v5);
  v7 = *((_DWORD *)a1 + 2);
LABEL_8:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v6 >> 4);
  return a1;
}

uint64_t mlir::BytecodeReader::Impl::parseBlockHeader(uint64_t a1, _anonymous_namespace_::EncodingReader *this, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  mlir::MLIRContext *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30[2];
  unint64_t v31[2];
  void *v32;
  uint64_t v33;
  _BYTE v34[48];
  llvm *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)(a3 + 112);
    return 0;
  v7 = *v6;
  *v6 = (unint64_t)*v6 >> 1;
  if ((v7 & 1) == 0)
    return 1;
  v9 = *(_QWORD *)(a3 + 104);
  v10 = v9 ? (_QWORD *)(v9 - 8) : 0;
  v28 = 0;
    return 0;
  v35 = (llvm *)&v37;
  v36 = 0x600000000;
  v32 = v34;
  v33 = 0x600000000;
  v12 = v28;
  if (v28 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, &v37, v28, 8);
    if (v12 > HIDWORD(v33))
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v12, 8);
  }
  v13 = mlir::UnknownLoc::get(**(mlir::UnknownLoc ***)a1, v11);
  if (!v12)
  {
LABEL_27:
    mlir::ValueRange::ValueRange(v31, (uint64_t)v35, v36);
    mlir::Block::addArguments(v10, v31[0], v31[1], (uint64_t)v32, v33);
    mlir::ValueRange::ValueRange(v30, v10[6], (uint64_t)(v10[7] - v10[6]) >> 3);
    v22 = mlir::BytecodeReader::Impl::defineValues((_QWORD *)a1, *((_QWORD *)this + 3), v30[0], v30[1]);
    v23 = v32;
    if (v32 == v34)
      goto LABEL_29;
    goto LABEL_28;
  }
  v14 = v13;
  while (1)
  {
    v27 = v14;
    if (*(_QWORD *)(a1 + 248) < 4uLL)
      break;
    v29 = 0;
      goto LABEL_34;
    v15 = v29;
    if (!v16)
      goto LABEL_34;
    v17 = v16;
    if ((v15 & 1) != 0)
      goto LABEL_21;
LABEL_22:
    v19 = v36;
    if (v36 >= (unint64_t)HIDWORD(v36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, &v37, v36 + 1, 8);
      v19 = v36;
    }
    *((_QWORD *)v35 + v19) = v17;
    LODWORD(v36) = v36 + 1;
    v20 = v27;
    v21 = v33;
    if (v33 >= (unint64_t)HIDWORD(v33))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
      v21 = v33;
    }
    *((_QWORD *)v32 + v21) = v20;
    LODWORD(v33) = v33 + 1;
    if (!--v12)
      goto LABEL_27;
  }
  v29 = 0;
  {
    if (v18)
    {
      v17 = v18;
LABEL_21:
      if (!mlir::BytecodeReader::Impl::parseAttribute<mlir::LocationAttr>(a1, this, &v27))
        goto LABEL_34;
      goto LABEL_22;
    }
  }
LABEL_34:
  v22 = 0;
  v23 = v32;
  if (v32 != v34)
LABEL_28:
    free(v23);
LABEL_29:
  if (v35 != (llvm *)&v37)
    free(v35);
  if (!v22)
    return 0;
  if (*(_QWORD *)(a1 + 248) < 3uLL)
    return 1;
  LOBYTE(v31[0]) = 0;
    return 0;
  if (LOBYTE(v31[0]))
  {
    v24 = *(_QWORD *)(a3 + 104);
    if (v24)
      v25 = v24 - 8;
    else
      v25 = 0;
    mlir::BytecodeReader::Impl::parseUseListOrderForRange((mlir::BytecodeReader::Impl *)&v35, this, ((*(_QWORD *)(v25 + 56) - *(_QWORD *)(v25 + 48)) >> 3));
  }
  return 1;
}

uint64_t mlir::BytecodeReader::Impl::parseRegions(unsigned int *a1, void **a2, uint64_t a3)
{
  uint64_t v3;
  _anonymous_namespace_::AttrTypeReader *v7;
  uint64_t v8;
  _anonymous_namespace_::EncodingReader *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::string::size_type v14;
  _QWORD *v15;
  unsigned int v16;
  char v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  mlir::Region *v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  std::string::size_type size;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  char v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  void *v48;
  const mlir::OperationState *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  mlir::Region *v58;
  unint64_t v59;
  char v60;
  _QWORD **v61;
  _QWORD **v62;
  void *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t (**v73)(mlir::Region **, mlir::Region ***);
  char v74;
  mlir::Region *AttrData;
  uint64_t v76;
  _QWORD **v77;
  _QWORD **v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  void *v84;
  int v85;
  uint64_t v86;
  mlir::Region *v87;
  uint64_t v88;
  _QWORD **v89;
  _QWORD **v90;
  void *v91;
  _QWORD *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD **v98;
  _QWORD **v99;
  void *v100;
  _QWORD *v101;
  void *v102;
  void *v103;
  _anonymous_namespace_::AttrTypeReader *v104;
  mlir::Region *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t ForwardRef;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  _QWORD **v127;
  _QWORD **v128;
  void *v129;
  _QWORD *v130;
  _QWORD *v131;
  void *v132;
  void *v133;
  void *v134;
  BOOL v135;
  int v136;
  int v137;
  uint64_t *v138;
  char v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  mlir::Region *v148;
  char *Address;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  mlir::Region *v153;
  void *v154;
  unint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  llvm *v159;
  _QWORD *v160;
  unsigned int v161;
  unsigned int v162;
  char *v163;
  uint64_t v164;
  unsigned int v165;
  int *v166;
  int v167;
  uint64_t v168;
  unsigned int v169;
  char *v170;
  int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  char *v177;
  int v178;
  BOOL v179;
  unsigned int v180;
  llvm *v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  _BYTE *v189;
  __int128 v190;
  _QWORD *v191;
  _QWORD *v192;
  void *v193;
  _QWORD *v194;
  unint64_t *v195;
  __int128 v196;
  void *v197;
  void *v198;
  int v199;
  _QWORD *v200;
  char *v201;
  int v202;
  uint64_t v203;
  _QWORD **v204;
  _QWORD **v205;
  void *v206;
  _QWORD *v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  void *v211;
  _anonymous_namespace_::AttrTypeReader *v212;
  uint64_t v213;
  void *v214;
  char *v215;
  char *v216;
  unint64_t v217;
  void *v218;
  void **v219;
  int v220;
  __int128 v221;
  unint64_t v222;
  void *v223;
  _BYTE *v224;
  _QWORD *v225;
  _QWORD **v226;
  unsigned int v227;
  _QWORD *v228;
  unsigned int v229;
  unsigned int **v230;
  unsigned int *v231;
  unsigned int **v232;
  int v233;
  BOOL v234;
  unsigned int v235;
  unsigned int *v236;
  void *v237;
  uint64_t v238;
  unsigned int **v239;
  unsigned int v240;
  _QWORD *v241;
  int v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int **v245;
  int v246;
  BOOL v247;
  unsigned int v248;
  unsigned int *v249;
  void **v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  void **v257;
  _QWORD *v258;
  void *v259;
  _QWORD *v260;
  char *v261;
  void *v262;
  _QWORD **v263;
  _QWORD **v264;
  void *v265;
  _QWORD *v266;
  _QWORD *v267;
  void *v268;
  void *v269;
  void *v270;
  uint64_t v272;
  std::string::size_type v273;
  std::string *v274;
  char *v275;
  char *v276;
  __int128 v277;
  uint64_t v278;
  std::string *v279;
  char *v280;
  char *v281;
  __int128 v282;
  _QWORD **v283;
  _QWORD **v284;
  void *v285;
  _QWORD *v286;
  _QWORD *v287;
  void *v288;
  void *v289;
  void *v290;
  mlir::Region **v291;
  char *v292;
  char *v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  mlir::Region *v297;
  mlir::Region **v298;
  char *v299;
  char *v300;
  __int128 v301;
  _QWORD **v302;
  _QWORD **v303;
  void *v304;
  _QWORD *v305;
  _QWORD *v306;
  void *v307;
  void *v308;
  void *v309;
  unint64_t v310;
  unint64_t v311;
  BOOL v312;
  unint64_t v313;
  unint64_t v314;
  int64_t v315;
  int64_t v316;
  int64_t v317;
  int64_t v318;
  _QWORD **v319;
  void **v320;
  _QWORD **v321;
  uint64_t *v322;
  uint64_t *v323;
  unsigned int *v324;
  uint64_t *v325;
  void **p_dst;
  void **v327;
  uint64_t *v328;
  uint64_t *v329;
  uint64_t *v330;
  unint64_t *v331;
  void **v332;
  uint64_t *v333;
  _BYTE *v334;
  unsigned int v335;
  _BYTE *v336;
  uint64_t *v337;
  _QWORD **v338;
  void *__src;
  _QWORD **v340;
  void *v341;
  std::string::size_type v342;
  llvm *v343;
  unsigned int v344;
  void **v345;
  std::string::size_type *v346;
  std::string::size_type v347;
  std::string v348;
  __int128 v349;
  _anonymous_namespace_::EncodingReader *v350;
  std::string::size_type *v351;
  uint64_t v352;
  unint64_t v353[4];
  __int16 v354;
  mlir::Region *v355;
  __int128 v356;
  __int128 v357;
  _anonymous_namespace_::EncodingReader *v358;
  std::string::size_type *v359;
  _QWORD v360[4];
  unint64_t v361;
  unint64_t v362[4];
  __int16 v363;
  unint64_t v364[2];
  mlir::Region **v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  unsigned int v369;
  unsigned int v370;
  _BYTE v371[24];
  uint64_t v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  void *__dst;
  unint64_t v377;
  uint64_t v378;
  void *v379;
  _QWORD *v380;
  void *__p;
  _QWORD **v382;
  char v383;
  uint64_t v384;
  uint64_t v385;
  unsigned int v386;
  unsigned int v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  unint64_t v392[2];
  unint64_t v393;
  void *v394;
  _QWORD **v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _BYTE v400[32];
  void *v401;
  _QWORD *v402;
  void *v403;
  _QWORD **v404;
  char v405;
  uint64_t v406;

  v406 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
  {
LABEL_444:
    if (*(_BYTE *)(a3 + 120))
    {
      v256 = (_QWORD *)*((_QWORD *)a1 + 86);
      v257 = (void **)(v256 - 7);
      v258 = (_QWORD *)*(v256 - 4);
      if (v258 != v256 - 2)
        free(v258);
      v259 = *v257;
      if (*v257)
      {
        *(v256 - 6) = v259;
        operator delete(v259);
      }
      *((_QWORD *)a1 + 86) = v257;
    }
    v260 = a2[1];
    v261 = (char *)*(v260 - 11);
    if (v261 != (char *)(v260 - 9))
      free(v261);
    v262 = (void *)*(v260 - 13);
    *(v260 - 13) = 0;
    if (v262)
      operator delete(v262);
    a2[1] = v260 - 16;
    return 1;
  }
  v336 = v371;
  v7 = (_anonymous_namespace_::AttrTypeReader *)(a1 + 22);
  v341 = a1 + 106;
  v342 = (std::string::size_type)(a1 + 134);
  v346 = (std::string::size_type *)(a1 + 62);
  v345 = &v396;
  p_dst = &__dst;
  __src = &v393;
  v340 = (_QWORD **)(a1 + 84);
  v333 = &v378;
  v320 = &v394;
  v329 = &v372;
  v328 = &v375;
  v325 = &v367;
  v324 = &v369;
  v323 = &v385;
  v330 = &v389;
  v331 = &v392[1];
  v337 = &v398;
  v338 = (_QWORD **)(a1 + 128);
  v334 = v400;
  v321 = (_QWORD **)(a1 + 6);
  v322 = &v388;
  v319 = (_QWORD **)(a1 + 12);
  v327 = (void **)(a1 + 170);
  v347 = (std::string::size_type)(a1 + 22);
  while (!*(_QWORD *)(a3 + 104))
  {
    if (!mlir::BytecodeReader::Impl::parseRegion((uint64_t)a1, a3))
      return 0;
    v8 = *(_QWORD *)a3;
    if (**(_QWORD **)a3 != *(_QWORD *)a3)
      break;
LABEL_443:
    v255 = v8 + 24;
    *(_QWORD *)a3 = v255;
    if (v255 == *(_QWORD *)(a3 + 8))
      goto LABEL_444;
  }
  v332 = a2;
  v9 = *(_anonymous_namespace_::EncodingReader **)(a3 + 16);
  while (1)
  {
    v10 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = v10 - 1;
    v11 = v3;
    if (v10)
      break;
LABEL_435:
    v8 = *(_QWORD *)(*(_QWORD *)(a3 + 104) + 8);
    *(_QWORD *)(a3 + 104) = v8;
    if (v8 == *(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 104) = 0;
      v250 = (void **)*((_QWORD *)a1 + 86);
      v251 = (uint64_t)*(v250 - 7);
      v252 = ((uint64_t)*(v250 - 6) - v251) >> 3;
      v253 = *(unsigned int *)(a3 + 32);
      v254 = v252 - v253;
      if (v252 >= v253)
      {
        a2 = v332;
        if (v252 > v254)
          *(v250 - 6) = (void *)(v251 + 8 * v254);
      }
      else
      {
        std::vector<mlir::Value>::__append(v250 - 7, -v253);
        v8 = *(_QWORD *)a3;
        a2 = v332;
      }
      --*((_DWORD *)v250 - 6);
      v3 = v11;
      goto LABEL_443;
    }
    v3 = v11;
    v11 = 0;
    if (!mlir::BytecodeReader::Impl::parseBlockHeader((uint64_t)a1, v9, a3))
      return v11;
  }
  while (1)
  {
    v348.__r_.__value_.__r.__words[0] = 0;
      return 0;
    v12 = *((_QWORD *)v9 + 3);
    v13 = (_QWORD *)*((_QWORD *)a1 + 45);
    v14 = a1[92];
    v392[0] = (unint64_t)"operation name";
    v392[1] = 14;
    v355 = (mlir::Region *)v348.__r_.__value_.__r.__words[0];
    if (v348.__r_.__value_.__r.__words[0] >= v14)
    {
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v365);
      if (v365)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v365);
      if (v383)
      {
        v18 = (_QWORD **)__p;
        if (__p)
        {
          v19 = v382;
          v20 = __p;
          if (v382 != __p)
          {
            do
              v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            v20 = __p;
          }
          v382 = v18;
          operator delete(v20);
        }
        v21 = v379;
        if (v379)
        {
          v22 = v380;
          v23 = v379;
          if (v380 != v379)
          {
            do
            {
              v25 = (void *)*--v22;
              v24 = v25;
              *v22 = 0;
              if (v25)
                operator delete[](v24);
            }
            while (v22 != v21);
            v23 = v379;
          }
          v380 = v21;
          operator delete(v23);
        }
        if (v368 != v336)
          free(v368);
      }
      if (!v17)
        return 0;
      v15 = 0;
      v16 = MEMORY[0x28];
      if (MEMORY[8])
        goto LABEL_48;
    }
    else
    {
      v15 = &v13[6 * v348.__r_.__value_.__r.__words[0]];
      v16 = *((unsigned __int16 *)v15 + 20);
      if (*((_BYTE *)v15 + 8))
        goto LABEL_48;
    }
    v392[0] = (unint64_t)off_1E0E15720;
    v392[1] = (unint64_t)v7;
    v393 = v342;
    v394 = v341;
    v395 = v340;
    v396 = v9;
    v397 = (uint64_t)v346;
      return 0;
    v26 = (void *)v15[4];
    if (v26)
    {
      v27 = v15[2];
      WORD4(v357) = 773;
      v29 = *(mlir::Region **)(v27 + 24);
      v28 = *(_QWORD *)(v27 + 32);
      v355 = v29;
      *(_QWORD *)&v356 = v28;
      *((_QWORD *)&v356 + 1) = ".";
      v30 = v15[3];
      v365 = &v355;
      v367 = v30;
      v368 = v26;
      LOWORD(v369) = 1282;
      llvm::Twine::str((llvm::Twine *)&v365, &v348);
      v31 = **(_QWORD **)a1;
      if (*((_BYTE *)v15 + 8))
        *((_BYTE *)v15 + 8) = 0;
      if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v348;
      else
        v32 = (std::string *)v348.__r_.__value_.__r.__words[0];
      if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v348.__r_.__value_.__r.__words[2]);
      else
        size = v348.__r_.__value_.__l.__size_;
      mlir::OperationName::OperationName(v15, v32, size, v31);
      *((_BYTE *)v15 + 8) = 1;
      if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v348.__r_.__value_.__l.__data_);
    }
    else
    {
      v34 = (_QWORD *)v15[2];
      if (*v34)
      {
        mlir::emitError(*((_QWORD *)a1 + 1), (uint64_t)&v365);
        if (v365)
        {
          LODWORD(v355) = 3;
          *(_QWORD *)&v356 = "has an empty opname for dialect '";
          *((_QWORD *)&v356 + 1) = 33;
          v291 = &v355;
          v292 = (char *)v368;
          if (v369 >= v370)
          {
            v313 = v369 + 1;
            if (v368 <= &v355 && (char *)v368 + 24 * v369 > (char *)&v355)
            {
              v317 = (char *)&v355 - (_BYTE *)v368;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v368, v371, v313, 24);
              v292 = (char *)v368;
              v291 = (mlir::Region **)((char *)v368 + v317);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v368, v371, v313, 24);
              v291 = &v355;
              v292 = (char *)v368;
            }
          }
          v293 = &v292[24 * v369];
          v294 = *(_OWORD *)v291;
          *((_QWORD *)v293 + 2) = v291[2];
          *(_OWORD *)v293 = v294;
          ++v369;
          if (v365)
          {
            v295 = v15[2];
            WORD4(v357) = 261;
            v297 = *(mlir::Region **)(v295 + 24);
            v296 = *(_QWORD *)(v295 + 32);
            v355 = v297;
            *(_QWORD *)&v356 = v296;
            mlir::Diagnostic::operator<<((uint64_t)&v366, (const void ***)&v355);
            if (v365)
            {
              LODWORD(v355) = 3;
              *(_QWORD *)&v356 = "'\n";
              *((_QWORD *)&v356 + 1) = 2;
              v298 = &v355;
              v299 = (char *)v368;
              if (v369 >= v370)
              {
                v314 = v369 + 1;
                if (v368 <= &v355 && (char *)v368 + 24 * v369 > (char *)&v355)
                {
                  v318 = (char *)&v355 - (_BYTE *)v368;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v368, v371, v314, 24);
                  v299 = (char *)v368;
                  v298 = (mlir::Region **)((char *)v368 + v318);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v368, v371, v314, 24);
                  v298 = &v355;
                  v299 = (char *)v368;
                }
              }
              v300 = &v299[24 * v369];
              v301 = *(_OWORD *)v298;
              *((_QWORD *)v300 + 2) = v298[2];
              *(_OWORD *)v300 = v301;
              ++v369;
              if (v365)
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v365);
            }
          }
        }
        if (v383)
        {
          v302 = (_QWORD **)__p;
          if (__p)
          {
            v303 = v382;
            v304 = __p;
            if (v382 != __p)
            {
              do
                v303 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v303 - 1);
              while (v303 != v302);
              v304 = __p;
            }
            v382 = v302;
            operator delete(v304);
          }
          v305 = v379;
          if (v379)
          {
            v306 = v380;
            v307 = v379;
            if (v380 != v379)
            {
              do
              {
                v309 = (void *)*--v306;
                v308 = v309;
                *v306 = 0;
                if (v309)
                  operator delete[](v308);
              }
              while (v306 != v305);
              v307 = v379;
            }
            v380 = v305;
            operator delete(v307);
          }
          if (v368 != v371)
            free(v368);
        }
        return 0;
      }
      v35 = **(_QWORD **)a1;
      if (*((_BYTE *)v15 + 8))
        *((_BYTE *)v15 + 8) = 0;
      mlir::OperationName::OperationName(v15, v34[3], v34[4], v35);
      *((_BYTE *)v15 + 8) = 1;
    }
LABEL_48:
    v36 = *v15;
    v37 = (char *)*((_QWORD *)v9 + 2);
    v38 = (char *)(*(_QWORD *)v9 + *((_QWORD *)v9 + 1));
    v344 = v11;
    if (v37 == v38)
    {
      v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v365);
      if (v365)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v365);
      if (v383)
      {
        v41 = (_QWORD **)__p;
        if (__p)
        {
          v42 = v382;
          v43 = __p;
          if (v382 != __p)
          {
            do
              v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            v43 = __p;
          }
          v382 = v41;
          operator delete(v43);
        }
        v44 = v379;
        if (v379)
        {
          v45 = v380;
          v46 = v379;
          if (v380 != v379)
          {
            do
            {
              v48 = (void *)*--v45;
              v47 = v48;
              *v45 = 0;
              if (v48)
                operator delete[](v47);
            }
            while (v45 != v44);
            v46 = v379;
          }
          v380 = v44;
          operator delete(v46);
          v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
        }
        if (v368 != v336)
          free(v368);
      }
      if (!v40)
        return 0;
      v39 = 0;
    }
    else
    {
      *((_QWORD *)v9 + 2) = v37 + 1;
      v39 = *v37;
    }
    v352 = 0;
    if (!mlir::BytecodeReader::Impl::parseAttribute<mlir::LocationAttr>((uint64_t)a1, v9, &v352))
      return 0;
    mlir::OperationState::OperationState(&v365, v352, v36);
    if ((v39 & 1) == 0)
      goto LABEL_110;
    v392[0] = 0;
      goto LABEL_474;
    v348.__r_.__value_.__r.__words[0] = v50;
    if (!v50)
      goto LABEL_474;
    v51 = *(void **)(*(_QWORD *)v50 + 136);
    if (v51 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
      v52 = v50;
    else
      v52 = 0;
    if (v51 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    {
      v52 = v50;
    }
    else
    {
      v355 = (mlir::Region *)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DictionaryAttr]";
      *(_QWORD *)&v356 = 70;
      v53 = llvm::StringRef::find((uint64_t *)&v355, "DesiredTypeName = ", 0x12uLL, 0);
      if ((unint64_t)v356 >= v53)
        v54 = v53;
      else
        v54 = v356;
      v55 = (char *)v355 + v54;
      v56 = v356 - v54;
      v57 = 18;
      if (v56 < 0x12)
        v57 = v56;
      v58 = (mlir::Region *)&v55[v57];
      v59 = v56 - v57;
      if (v59 >= v59 - 1)
        --v59;
      v355 = v58;
      *(_QWORD *)&v356 = v59;
      v60 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v392);
      if (v392[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v392);
      if (v405)
      {
        v61 = (_QWORD **)v403;
        if (v403)
        {
          v62 = v404;
          v63 = v403;
          if (v404 != v403)
          {
            do
              v62 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v62 - 1);
            while (v62 != v61);
            v63 = v403;
          }
          v404 = v61;
          operator delete(v63);
        }
        v64 = v401;
        if (v401)
        {
          v65 = v402;
          v66 = v401;
          if (v402 != v401)
          {
            do
            {
              v68 = (void *)*--v65;
              v67 = v68;
              *v65 = 0;
              if (v68)
                operator delete[](v67);
            }
            while (v65 != v64);
            v66 = v401;
          }
          v402 = v64;
          operator delete(v66);
        }
        if (v394 != v345)
          free(v394);
      }
      if (!v60)
        goto LABEL_474;
    }
    mlir::NamedAttrList::NamedAttrList(v392, v52);
    v69 = (void *)v392[0];
    v49 = (const mlir::OperationState *)__src;
    if ((void *)v392[0] != __src)
    {
      if (__dst != v333)
      {
        free(__dst);
        v49 = (const mlir::OperationState *)__src;
        v69 = (void *)v392[0];
      }
      __dst = v69;
      v377 = v392[1];
      v392[0] = (unint64_t)v49;
      v392[1] = 0;
      v384 = v399;
      goto LABEL_110;
    }
    v85 = v392[1];
    v86 = v377;
    if (v377 < LODWORD(v392[1]))
    {
      if (HIDWORD(v377) >= LODWORD(v392[1]))
      {
        if ((_DWORD)v377)
        {
          memmove(__dst, __src, 16 * v377);
          goto LABEL_161;
        }
      }
      else
      {
        LODWORD(v377) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)p_dst, v333, LODWORD(v392[1]), 16);
      }
      v86 = 0;
LABEL_161:
      if (v86 != LODWORD(v392[1]))
        memcpy((char *)__dst + 16 * v86, (const void *)(v392[0] + 16 * v86), 16 * LODWORD(v392[1]) - 16 * v86);
      LODWORD(v377) = v85;
      v49 = (const mlir::OperationState *)__src;
      LODWORD(v392[1]) = 0;
      v95 = (void *)v392[0];
      v384 = v399;
      if ((void *)v392[0] != __src)
        goto LABEL_109;
      goto LABEL_110;
    }
    if (LODWORD(v392[1]))
    {
      memmove(__dst, __src, 16 * LODWORD(v392[1]));
      v49 = (const mlir::OperationState *)__src;
    }
    LODWORD(v377) = v85;
    LODWORD(v392[1]) = 0;
    v95 = (void *)v392[0];
    v384 = v399;
    if ((const mlir::OperationState *)v392[0] != v49)
LABEL_109:
      free(v95);
LABEL_110:
    if ((v39 & 0x40) != 0)
    {
      if (v16 <= 0xFF)
      {
        v272 = *((_QWORD *)a1 + 1);
        WORD4(v357) = 259;
        mlir::emitError(v272, (uint64_t)&v355, (uint64_t)v392);
        if (v392[0])
        {
          v273 = *v346;
          LODWORD(v348.__r_.__value_.__l.__data_) = 5;
          v348.__r_.__value_.__l.__size_ = v273;
          v274 = &v348;
          v275 = (char *)v394;
          if (v395 >= HIDWORD(v395))
          {
            v310 = v395 + 1;
            if (v394 <= &v348 && (char *)v394 + 24 * v395 > (char *)&v348)
            {
              v315 = (char *)&v348 - (_BYTE *)v394;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v320, v345, v310, 24);
              v275 = (char *)v394;
              v274 = (std::string *)((char *)v394 + v315);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v320, v345, v310, 24);
              v274 = &v348;
              v275 = (char *)v394;
            }
          }
          v276 = &v275[24 * v395];
          v277 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
          *((_QWORD *)v276 + 2) = *((_QWORD *)&v274->__r_.__value_.__l + 2);
          *(_OWORD *)v276 = v277;
          v278 = ((_DWORD)v395 + 1);
          LODWORD(v395) = (_DWORD)v395 + 1;
          if (v392[0])
          {
            LODWORD(v348.__r_.__value_.__l.__data_) = 3;
            v348.__r_.__value_.__l.__size_ = (std::string::size_type)" with properties.";
            v348.__r_.__value_.__r.__words[2] = 17;
            v279 = &v348;
            v280 = (char *)v394;
            if (v278 >= HIDWORD(v395))
            {
              v311 = v278 + 1;
              v312 = (char *)v394 + 24 * v278 > (char *)&v348;
              if (v394 <= &v348 && v312)
              {
                v316 = (char *)&v348 - (_BYTE *)v394;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v320, v345, v311, 24);
                v280 = (char *)v394;
                v279 = (std::string *)((char *)v394 + v316);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v320, v345, v311, 24);
                v279 = &v348;
                v280 = (char *)v394;
              }
            }
            v281 = &v280[24 * v395];
            v282 = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
            *((_QWORD *)v281 + 2) = *((_QWORD *)&v279->__r_.__value_.__l + 2);
            *(_OWORD *)v281 = v282;
            LODWORD(v395) = (_DWORD)v395 + 1;
            if (v392[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v392);
          }
        }
        if (v405)
        {
          v283 = (_QWORD **)v403;
          if (v403)
          {
            v284 = v404;
            v285 = v403;
            if (v404 != v403)
            {
              do
                v284 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v284 - 1);
              while (v284 != v283);
              v285 = v403;
            }
            v404 = v283;
            operator delete(v285);
          }
          v286 = v401;
          if (v401)
          {
            v287 = v402;
            v288 = v401;
            if (v402 != v401)
            {
              do
              {
                v290 = (void *)*--v287;
                v289 = v290;
                *v287 = 0;
                if (v290)
                  operator delete[](v289);
              }
              while (v287 != v286);
              v288 = v401;
            }
            v402 = v286;
            operator delete(v288);
          }
          if (v394 != v345)
            free(v394);
        }
        goto LABEL_474;
      }
      v348.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E0E15720;
      v348.__r_.__value_.__l.__size_ = v347;
      v348.__r_.__value_.__r.__words[2] = v342;
      *(_QWORD *)&v349 = v341;
      *((_QWORD *)&v349 + 1) = v340;
      v350 = v9;
      v351 = v346;
      v70 = (_QWORD *)*((_QWORD *)a1 + 1);
      v361 = 0;
        goto LABEL_474;
      if (v361 >= a1[156])
      {
        v362[0] = (unint64_t)"Properties idx out-of-bound for ";
        v363 = 259;
        (*(void (**)(unint64_t *__return_ptr, std::string *, unint64_t *))(v348.__r_.__value_.__r.__words[0]
                                                                                                  + 16))(v392, &v348, v362);
        v355 = *(mlir::Region **)(v36 + 8);
        AttrData = (mlir::Region *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v355);
        if (v392[0])
        {
          WORD4(v357) = 261;
          v355 = AttrData;
          *(_QWORD *)&v356 = v76;
          mlir::Diagnostic::operator<<((uint64_t)v331, (const void ***)&v355);
        }
        v74 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v392);
        if (v392[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v392);
        if (v405)
        {
          v77 = (_QWORD **)v403;
          if (v403)
          {
            v78 = v404;
            v79 = v403;
            if (v404 != v403)
            {
              do
                v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
              while (v78 != v77);
              v79 = v403;
            }
            v404 = v77;
            operator delete(v79);
          }
          v80 = v401;
          if (!v401)
            goto LABEL_184;
          v81 = v402;
          v82 = v401;
          if (v402 == v401)
            goto LABEL_183;
          do
          {
            v84 = (void *)*--v81;
            v83 = v84;
            *v81 = 0;
            if (v84)
              operator delete[](v83);
          }
          while (v81 != v80);
          goto LABEL_182;
        }
      }
      else
      {
        v71 = *((_QWORD *)a1 + 76);
        if (v361 >= v71)
        {
          v362[0] = (unint64_t)"Properties offset out-of-bound for ";
          v363 = 259;
          (*(void (**)(unint64_t *__return_ptr, std::string *, unint64_t *))(v348.__r_.__value_.__r.__words[0] + 16))(v392, &v348, v362);
          v355 = *(mlir::Region **)(v36 + 8);
          v87 = (mlir::Region *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v355);
          if (v392[0])
          {
            WORD4(v357) = 261;
            v355 = v87;
            *(_QWORD *)&v356 = v88;
            mlir::Diagnostic::operator<<((uint64_t)v331, (const void ***)&v355);
          }
          v74 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v392);
          if (v392[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v392);
          if (v405)
          {
            v89 = (_QWORD **)v403;
            if (v403)
            {
              v90 = v404;
              v91 = v403;
              if (v404 != v403)
              {
                do
                  v90 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v90 - 1);
                while (v90 != v89);
                v91 = v403;
              }
              v404 = v89;
              operator delete(v91);
            }
            v80 = v401;
            if (!v401)
              goto LABEL_184;
            v92 = v402;
            v82 = v401;
            if (v402 == v401)
              goto LABEL_183;
            do
            {
              v94 = (void *)*--v92;
              v93 = v94;
              *v92 = 0;
              if (v94)
                operator delete[](v93);
            }
            while (v92 != v80);
            goto LABEL_182;
          }
        }
        else
        {
          v72 = *(_QWORD *)(*((_QWORD *)a1 + 77) + 8 * v361);
          v392[0] = *((_QWORD *)a1 + 75) + v72;
          v392[1] = v71 - v72;
          v393 = v392[0];
          v394 = v70;
          v362[0] = 0;
          v355 = 0;
          *(_QWORD *)&v356 = 0;
          {
            goto LABEL_474;
          }
          v360[0] = v355;
          v360[1] = v356;
          v360[2] = v355;
          v360[3] = v70;
          v355 = (mlir::Region *)off_1E0E15720;
          v356 = *(_OWORD *)&v348.__r_.__value_.__r.__words[1];
          v357 = v349;
          v358 = (_anonymous_namespace_::EncodingReader *)v360;
          v359 = v351;
          v73 = (uint64_t (**)(mlir::Region **, mlir::Region ***))mlir::detail::InterfaceMap::lookup<mlir::BytecodeOpInterface>(v36 + 32);
          if (v73)
          {
            v74 = (*v73)(&v355, &v365);
            goto LABEL_186;
          }
          if (*(_UNKNOWN **)(v36 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
          {
            v212 = (_anonymous_namespace_::AttrTypeReader *)v356;
            v392[0] = 0;
            {
              v74 = v391 != 0;
            }
            else
            {
              v74 = 0;
            }
            goto LABEL_186;
          }
          v353[0] = (unint64_t)"has properties but missing BytecodeOpInterface for ";
          v354 = 259;
          v362[0] = *(_QWORD *)(v36 + 8);
          v96 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v362);
          if (v392[0])
          {
            v363 = 261;
            v362[0] = v96;
            v362[1] = v97;
            mlir::Diagnostic::operator<<((uint64_t)v331, (const void ***)v362);
          }
          v74 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v392);
          if (v392[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v392);
          if (v405)
          {
            v98 = (_QWORD **)v403;
            if (v403)
            {
              v99 = v404;
              v100 = v403;
              if (v404 != v403)
              {
                do
                  v99 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v99 - 1);
                while (v99 != v98);
                v100 = v403;
              }
              v404 = v98;
              operator delete(v100);
            }
            v80 = v401;
            if (!v401)
              goto LABEL_184;
            v101 = v402;
            v82 = v401;
            if (v402 == v401)
            {
LABEL_183:
              v402 = v80;
              operator delete(v82);
LABEL_184:
              if (v394 != v345)
                free(v394);
              goto LABEL_186;
            }
            do
            {
              v103 = (void *)*--v101;
              v102 = v103;
              *v101 = 0;
              if (v103)
                operator delete[](v102);
            }
            while (v101 != v80);
LABEL_182:
            v82 = v401;
            goto LABEL_183;
          }
        }
      }
LABEL_186:
      if (!v74)
        goto LABEL_474;
    }
    v104 = (_anonymous_namespace_::AttrTypeReader *)v347;
    if ((v39 & 2) != 0)
    {
      v355 = 0;
        goto LABEL_474;
      v105 = v355;
      v106 = v373;
      if (v355 != (mlir::Region *)v373)
      {
        if ((unint64_t)v355 >= v373)
        {
          if ((unint64_t)v355 > v374)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v329, v328, (unint64_t)v355, 8);
            v106 = v373;
          }
          if (v105 != (mlir::Region *)v106)
            bzero((void *)(v372 + 8 * v106), 8 * ((_QWORD)v105 - v106));
        }
        v373 = v105;
      }
      if ((int)v105 >= 1)
        break;
    }
LABEL_201:
    if ((v39 & 4) != 0)
    {
      v353[0] = 0;
        goto LABEL_474;
      v110 = v353[0];
      v111 = v368;
      if (v353[0] != v368)
      {
        if (v353[0] >= v368)
        {
          if (v353[0] > HIDWORD(v368))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v325, v324, v353[0], 8);
            v111 = v368;
          }
          if (v110 != v111)
            bzero((void *)(v367 + 8 * v111), 8 * (v110 - v111));
        }
        LODWORD(v368) = v110;
      }
      if ((int)v110 >= 1)
      {
        v112 = 0;
        while (1)
        {
          v113 = (_QWORD *)*((_QWORD *)a1 + 86);
          v362[0] = 0;
            break;
          v114 = v362[0];
          v49 = (const mlir::OperationState *)*((_QWORD *)v9 + 3);
          v116 = *(v113 - 7);
          v115 = *(v113 - 6);
          v355 = (mlir::Region *)"value";
          *(_QWORD *)&v356 = 5;
          v348.__r_.__value_.__r.__words[0] = v362[0];
          if (v362[0] >= (v115 - v116) >> 3)
          {
            mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v392);
            if (v392[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v392);
            if (v405)
            {
              v263 = (_QWORD **)v403;
              if (v403)
              {
                v264 = v404;
                v265 = v403;
                if (v404 != v403)
                {
                  do
                    v264 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v264 - 1);
                  while (v264 != v263);
                  v265 = v403;
                }
                v404 = v263;
                operator delete(v265);
              }
              v266 = v401;
              if (v401)
              {
                v267 = v402;
                v268 = v401;
                if (v402 != v401)
                {
                  do
                  {
                    v270 = (void *)*--v267;
                    v269 = v270;
                    *v267 = 0;
                    if (v270)
                      operator delete[](v269);
                  }
                  while (v267 != v266);
                  v268 = v401;
                }
                v402 = v266;
                operator delete(v268);
              }
              if (v394 != v345)
                free(v394);
            }
            break;
          }
          v117 = *(_QWORD *)(v116 + 8 * v362[0]);
          if (v117)
          {
            *(_QWORD *)(v367 + 8 * v112) = v117;
          }
          else
          {
            ForwardRef = mlir::BytecodeReader::Impl::createForwardRef((mlir::BytecodeReader::Impl *)a1, v49);
            *(_QWORD *)(v116 + 8 * v114) = ForwardRef;
            *(_QWORD *)(v367 + 8 * v112) = ForwardRef;
            if (!ForwardRef)
              goto LABEL_474;
          }
          if (v110 == ++v112)
            goto LABEL_219;
        }
        *(_QWORD *)(v367 + 8 * v112) = 0;
        goto LABEL_474;
      }
    }
LABEL_219:
    if ((v39 & 8) != 0)
    {
      v353[0] = 0;
        goto LABEL_474;
      v119 = v353[0];
      v120 = v386;
      if (v353[0] != v386)
      {
        if (v353[0] >= v386)
        {
          if (v353[0] > v387)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v323, v322, v353[0], 8);
            v120 = v386;
          }
          if (v119 != v120)
            bzero((void *)(v385 + 8 * v120), 8 * (v119 - v120));
        }
        v386 = v119;
      }
      if ((int)v119 >= 1)
      {
        v121 = 0;
        v122 = v119;
        do
        {
          v123 = v385;
          v362[0] = 0;
            goto LABEL_474;
          v49 = (const mlir::OperationState *)*((_QWORD *)v9 + 3);
          v124 = *(_QWORD *)(a3 + 40);
          v125 = *(unsigned int *)(a3 + 48);
          v355 = (mlir::Region *)"successor";
          *(_QWORD *)&v356 = 9;
          v348.__r_.__value_.__r.__words[0] = v362[0];
          if (v362[0] < v125)
          {
            *(_QWORD *)(v123 + 8 * v121) = *(_QWORD *)(v124 + 8 * v362[0]);
          }
          else
          {
            v126 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v392);
            if (v392[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v392);
            if (v405)
            {
              v127 = (_QWORD **)v403;
              if (v403)
              {
                v128 = v404;
                v129 = v403;
                if (v404 != v403)
                {
                  do
                    v128 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v128 - 1);
                  while (v128 != v127);
                  v129 = v403;
                }
                v404 = v127;
                operator delete(v129);
              }
              v130 = v401;
              if (v401)
              {
                v131 = v402;
                v132 = v401;
                if (v402 != v401)
                {
                  do
                  {
                    v134 = (void *)*--v131;
                    v133 = v134;
                    *v131 = 0;
                    if (v134)
                      operator delete[](v133);
                  }
                  while (v131 != v130);
                  v132 = v401;
                }
                v402 = v130;
                operator delete(v132);
              }
              if (v394 != v345)
                free(v394);
            }
            if (!v126)
              goto LABEL_474;
          }
        }
        while (++v121 != v122);
      }
    }
    v135 = (v39 & 0x20) != 0 && *v346 >= 3;
    v136 = !v135;
    if (v135)
      mlir::BytecodeReader::Impl::parseUseListOrderForRange((mlir::BytecodeReader::Impl *)v392, v9, v373);
    v343 = (llvm *)((unint64_t)v343 & 0xFFFFFFFFFFFFFF00);
    if ((v39 & 0x10) != 0)
    {
      v392[0] = 0;
      {
        if ((v136 & 1) != 0)
        {
LABEL_324:
          mlir::OperationState::~OperationState((mlir::OperationState *)&v365);
          return 0;
        }
LABEL_314:
        v181 = v343;
        v182 = v335;
        if (!v335)
        {
LABEL_322:
          v187 = 0;
          goto LABEL_323;
        }
LABEL_315:
        v183 = v182;
        v184 = 48 * v182;
        v185 = (char *)v181 + 24;
        do
        {
          if (*((_DWORD *)v185 - 6) <= 0xFFFFFFFD)
          {
            v186 = (char *)*((_QWORD *)v185 - 2);
            if (v185 != v186)
              free(v186);
          }
          v185 += 48;
          v184 -= 48;
        }
        while (v184);
        v187 = 48 * v183;
        v181 = v343;
LABEL_323:
        llvm::deallocate_buffer(v181, (void *)v187);
      }
      v139 = v392[0];
      v140 = v392[0] >> 1;
      v141 = (uint64_t)v330;
      llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve((uint64_t)v330, v392[0] >> 1);
      v138 = v337;
      if ((int)v140 >= 1)
      {
        do
        {
          v148 = (mlir::Region *)operator new(0x18uLL);
          *(_QWORD *)v148 = v148;
          *((_QWORD *)v148 + 1) = v148;
          *((_QWORD *)v148 + 2) = 0;
          v355 = v148;
          Address = llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress(v141, (unint64_t)&v355, 1);
          v150 = v389;
          v151 = v390;
          v152 = *(_QWORD *)Address;
          *(_QWORD *)Address = 0;
          *(_QWORD *)(v150 + 8 * v151) = v152;
          v390 = v151 + 1;
          v153 = v355;
          v355 = 0;
          if (v153)
          {
            mlir::Region::~Region(v153);
            operator delete(v154);
          }
          LODWORD(v140) = v140 - 1;
        }
        while ((_DWORD)v140);
      }
      v137 = v139 & 1;
    }
    else
    {
      v137 = 0;
      v138 = v337;
    }
    v142 = (unsigned int *)mlir::Operation::create((mlir::Operation *)&v365, v49);
    v143 = *(_QWORD *)(a3 + 104);
    if (v143)
      v144 = v143 - 8;
    else
      v144 = 0;
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v144 + 32, (uint64_t)v142);
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v142);
    v145 = *(_QWORD *)(v144 + 32);
    *v146 = v145;
    v146[1] = v144 + 32;
    *(_QWORD *)(v145 + 8) = v146;
    *(_QWORD *)(v144 + 32) = v146;
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v142);
    v147 = v142[9];
    if ((_DWORD)v147)
    {
      mlir::ValueRange::ValueRange(v364, (uint64_t)(v142 - 4), v147);
      if (!mlir::BytecodeReader::Impl::defineValues(a1, *((_QWORD *)v9 + 3), v364[0], v364[1]))
      {
        if ((v136 & 1) != 0)
          goto LABEL_324;
        goto LABEL_314;
      }
    }
    if (!v136)
    {
      v155 = v142[9];
      if ((_DWORD)v155)
      {
        v156 = 0;
        v157 = v335;
        v158 = v335 - 1;
        v159 = v343;
        while (1)
        {
          if (v157)
          {
            v165 = (37 * v156) & v158;
            v166 = (int *)((char *)v159 + 48 * v165);
            v167 = *v166;
            if (*v166 != (_DWORD)v156)
            {
              v171 = 1;
              v172 = *v166;
              v173 = (37 * v156) & v158;
              while (v172 != -1)
              {
                v174 = v173 + v171++;
                v173 = v174 & v158;
                v172 = *((_DWORD *)v159 + 12 * v173);
                if (v172 == (_DWORD)v156)
                  goto LABEL_283;
              }
              goto LABEL_280;
            }
LABEL_283:
            v168 = (uint64_t)&v142[-6 * (v156 - 5) - 24];
            if (v156 <= 5)
              v168 = (uint64_t)&v142[4 * ~v156];
            v392[0] = v168;
            if (v167 != (_DWORD)v156)
            {
              v175 = 1;
              while (v167 != -1)
              {
                v176 = v165 + v175++;
                v165 = v176 & v158;
                v166 = (int *)((char *)v159 + 48 * (v176 & v158));
                v167 = *v166;
                if (*v166 == (_DWORD)v156)
                  goto LABEL_286;
              }
              v166 = (int *)((char *)v343 + 48 * v335);
            }
LABEL_286:
            v169 = a1[132];
            if (!v169)
            {
              v170 = 0;
LABEL_288:
              llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<void *,mlir::BytecodeReader::Impl::UseListOrderStorage const&>((uint64_t)v338, v170, (uint64_t *)v392, (uint64_t)(v166 + 2));
              v155 = v142[9];
              v159 = v343;
              v157 = v335;
              goto LABEL_280;
            }
            v160 = (_QWORD *)*((_QWORD *)a1 + 64);
            v161 = v169 - 1;
            v162 = v161 & ((v168 >> 4) ^ (v168 >> 9));
            v163 = (char *)&v160[6 * v162];
            v164 = *(_QWORD *)v163;
            if (v168 != *(_QWORD *)v163)
            {
              v177 = 0;
              v178 = 1;
              while (v164 != -4096)
              {
                if (v177)
                  v179 = 0;
                else
                  v179 = v164 == -8192;
                v159 = v343;
                if (v179)
                  v177 = v163;
                v180 = v162 + v178++;
                v162 = v180 & v161;
                v163 = (char *)&v160[6 * v162];
                v164 = *(_QWORD *)v163;
                if (v168 == *(_QWORD *)v163)
                  goto LABEL_280;
              }
              if (v177)
                v170 = v177;
              else
                v170 = v163;
              goto LABEL_288;
            }
          }
LABEL_280:
          if (++v156 >= v155)
            goto LABEL_314;
        }
      }
      v181 = v343;
      v182 = v335;
      if (!v335)
        goto LABEL_322;
      goto LABEL_315;
    }
    mlir::OperationState::~OperationState((mlir::OperationState *)&v365);
    v188 = v142[11];
    if ((v188 & 0x7FFFFF) == 0)
    {
      v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
      v11 = v344;
      goto LABEL_412;
    }
    v392[0] = (((unint64_t)&v142[4 * ((v188 >> 23) & 1) + 17] + ((v188 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
            + 32 * v142[10];
    v392[1] = v392[0] + 24 * (v188 & 0x7FFFFF);
    v393 = (unint64_t)v9;
    v394 = 0;
    LODWORD(v395) = 0;
    v396 = v138;
    v397 = 0x600000000;
    v189 = v334;
    *(_QWORD *)v334 = 0;
    *((_QWORD *)v189 + 1) = 0;
    v400[16] = v137;
    if (!v137 || *v346 < 2)
      goto LABEL_335;
    LOBYTE(v362[0]) = 0;
    *(_OWORD *)&v348.__r_.__value_.__l.__data_ = 0uLL;
    {
      v344 = 0;
      v202 = 1;
      goto LABEL_406;
    }
    if (LOBYTE(v362[0]) == 4)
    {
      v190 = *(_OWORD *)&v348.__r_.__value_.__l.__data_;
      v191 = (_QWORD *)*((_QWORD *)a1 + 1);
      v192 = operator new(0x20uLL);
      *(_OWORD *)v192 = v190;
      v192[2] = v190;
      v192[3] = v191;
      v193 = v394;
      v394 = v192;
      if (v193)
      {
        operator delete(v193);
        v192 = v394;
      }
      v393 = (unint64_t)v192;
      if (*((_BYTE *)a1 + 16))
      {
        v194 = (_QWORD *)*((_QWORD *)a1 + 9);
        if (!v194)
          goto LABEL_372;
        if ((((uint64_t (*)(_QWORD, unsigned int *))v194)(*((_QWORD *)a1 + 10), v142) & 1) == 0)
        {
          v192 = v394;
LABEL_372:
          v215 = (char *)operator new(0x98uLL);
          v216 = v215;
          *(_QWORD *)v215 = 0;
          *((_QWORD *)v215 + 1) = 0;
          *((_QWORD *)v215 + 2) = v142;
          *(_OWORD *)(v215 + 24) = *(_OWORD *)v392;
          v394 = 0;
          *((_QWORD *)v215 + 5) = v393;
          *((_QWORD *)v215 + 6) = v192;
          v217 = v397;
          *((_DWORD *)v215 + 14) = (_DWORD)v395;
          v218 = v215 + 80;
          *((_QWORD *)v215 + 8) = v215 + 80;
          v219 = (void **)(v215 + 64);
          *((_QWORD *)v215 + 9) = 0x600000000;
          if ((_DWORD)v217)
          {
            if (v396 != v138)
            {
              *((_QWORD *)v215 + 8) = v396;
              v220 = HIDWORD(v397);
              *((_DWORD *)v215 + 18) = v217;
              *((_DWORD *)v215 + 19) = v220;
              v396 = v138;
              HIDWORD(v397) = 0;
              goto LABEL_388;
            }
            if (v217 < 7)
            {
              v223 = v138;
              v222 = v217;
LABEL_386:
              memcpy(v218, v223, 8 * v222);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v215 + 64), v218, v217, 8);
              v222 = v397;
              if ((_DWORD)v397)
              {
                v223 = v396;
                v218 = *v219;
                goto LABEL_386;
              }
            }
            *((_DWORD *)v216 + 18) = v217;
LABEL_388:
            LODWORD(v397) = 0;
          }
          v224 = v334;
          *((_OWORD *)v216 + 8) = *(_OWORD *)v334;
          v216[144] = v224[16];
          v225 = (_QWORD *)*((_QWORD *)a1 + 3);
          v226 = v321;
          *(_QWORD *)v216 = v225;
          *((_QWORD *)v216 + 1) = v226;
          v225[1] = v216;
          *((_QWORD *)a1 + 3) = v216;
          ++*((_QWORD *)a1 + 5);
          v227 = a1[16];
          if (v227)
          {
            v228 = (_QWORD *)*((_QWORD *)a1 + 6);
            v229 = (v227 - 1) & ((v142 >> 4) ^ (v142 >> 9));
            v230 = (unsigned int **)&v228[2 * v229];
            v231 = *v230;
            if (v142 == *v230)
              goto LABEL_405;
            v232 = 0;
            v233 = 1;
            while (v231 != (unsigned int *)-4096)
            {
              if (v232)
                v234 = 0;
              else
                v234 = v231 == (unsigned int *)-8192;
              if (v234)
                v232 = v230;
              v235 = v229 + v233++;
              v229 = v235 & (v227 - 1);
              v230 = (unsigned int **)&v228[2 * v229];
              v231 = *v230;
              v202 = 7;
              if (v142 == *v230)
              {
                v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
                v138 = v337;
                goto LABEL_407;
              }
            }
            if (v232)
              v239 = v232;
            else
              v239 = v230;
            v138 = v337;
            v240 = a1[14];
            if (4 * v240 + 4 >= 3 * v227)
              goto LABEL_418;
            if (v227 + ~v240 - a1[15] > v227 >> 3)
            {
              v236 = *v239;
              ++a1[14];
              if (v236 != (unsigned int *)-4096)
                goto LABEL_403;
LABEL_404:
              *v239 = v142;
              v239[1] = (unsigned int *)v216;
LABEL_405:
              v202 = 7;
LABEL_406:
              v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
              goto LABEL_407;
            }
          }
          else
          {
LABEL_418:
            v227 *= 2;
          }
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v319, v227);
          v241 = (_QWORD *)*((_QWORD *)a1 + 6);
          v242 = a1[16] - 1;
          v243 = v242 & ((v142 >> 4) ^ (v142 >> 9));
          v239 = (unsigned int **)&v241[2 * v243];
          v244 = *v239;
          if (v142 == *v239)
          {
LABEL_420:
            v138 = v337;
            ++a1[14];
            if (v142 == (unsigned int *)-4096)
              goto LABEL_404;
          }
          else
          {
            v245 = 0;
            v246 = 1;
            while (v244 != (unsigned int *)-4096)
            {
              if (v245)
                v247 = 0;
              else
                v247 = v244 == (unsigned int *)-8192;
              if (v247)
                v245 = v239;
              v248 = v243 + v246++;
              v243 = v248 & v242;
              v239 = (unsigned int **)&v241[2 * (v248 & v242)];
              v244 = *v239;
              if (v142 == *v239)
                goto LABEL_420;
            }
            if (v245)
              v239 = v245;
            v138 = v337;
            v249 = *v239;
            ++a1[14];
            if (v249 == (unsigned int *)-4096)
              goto LABEL_404;
          }
LABEL_403:
          --a1[15];
          goto LABEL_404;
        }
      }
LABEL_335:
      v195 = (unint64_t *)v332[1];
      if (v195 >= v332[2])
      {
        v332[1] = std::vector<mlir::BytecodeReader::Impl::RegionReadState>::__push_back_slow_path<mlir::BytecodeReader::Impl::RegionReadState>(v332, (uint64_t)v392);
        if (!v137)
          goto LABEL_380;
      }
      else
      {
        v196 = *(_OWORD *)v392;
        v195[2] = v393;
        *(_OWORD *)v195 = v196;
        v197 = v394;
        v394 = 0;
        v195[3] = (unint64_t)v197;
        *((_DWORD *)v195 + 8) = (_DWORD)v395;
        v198 = v195 + 7;
        v195[5] = (unint64_t)(v195 + 7);
        v195[6] = 0x600000000;
        if (v195 != v392)
        {
          v199 = v397;
          if ((_DWORD)v397)
          {
            if (v396 != v138)
            {
              v195[5] = (unint64_t)v396;
              *((_DWORD *)v195 + 12) = v199;
              *((_DWORD *)v195 + 13) = HIDWORD(v397);
              v396 = v138;
              HIDWORD(v397) = 0;
              goto LABEL_378;
            }
            if (v397 < 7)
            {
              v214 = v138;
              v213 = v397;
LABEL_376:
              memcpy(v198, v214, 8 * v213);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v195 + 5), v195 + 7, v397, 8);
              v213 = v397;
              if ((_DWORD)v397)
              {
                v214 = v396;
                v198 = (void *)v195[5];
                goto LABEL_376;
              }
            }
            *((_DWORD *)v195 + 12) = v199;
LABEL_378:
            LODWORD(v397) = 0;
          }
        }
        v221 = *(_OWORD *)v334;
        *((_BYTE *)v195 + 120) = v334[16];
        *(_OWORD *)(v195 + 13) = v221;
        v332[1] = v195 + 16;
        if (!v137)
        {
LABEL_380:
          v202 = 1;
          v344 = 1;
          goto LABEL_406;
        }
      }
      v200 = (_QWORD *)*((_QWORD *)a1 + 86);
      if ((unint64_t)v200 >= *((_QWORD *)a1 + 87))
      {
        v201 = std::vector<mlir::BytecodeReader::Impl::ValueScope>::__emplace_back_slow_path<>(v327);
      }
      else
      {
        *((_OWORD *)v200 + 1) = 0u;
        *((_OWORD *)v200 + 2) = 0u;
        v200[6] = 0;
        *(_OWORD *)v200 = 0u;
        v200[3] = v200 + 5;
        v201 = (char *)(v200 + 7);
        *((_DWORD *)v200 + 9) = 4;
      }
      v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
      *((_QWORD *)a1 + 86) = v201;
      v202 = 1;
      v344 = 1;
      goto LABEL_407;
    }
    v203 = *((_QWORD *)a1 + 1);
    v355 = (mlir::Region *)"expected IR section for region";
    WORD4(v357) = 259;
    mlir::emitError(v203, (uint64_t)&v355, (uint64_t)&v365);
    v344 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v365);
    if (v365)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v365);
    v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
    if (v383)
    {
      v204 = (_QWORD **)__p;
      if (__p)
      {
        v205 = v382;
        v206 = __p;
        if (v382 != __p)
        {
          do
            v205 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v205 - 1);
          while (v205 != v204);
          v206 = __p;
        }
        v382 = v204;
        operator delete(v206);
      }
      v207 = v379;
      if (v379)
      {
        v208 = v380;
        v209 = v379;
        if (v380 != v379)
        {
          do
          {
            v211 = (void *)*--v208;
            v210 = v211;
            *v208 = 0;
            if (v211)
              operator delete[](v210);
          }
          while (v208 != v207);
          v209 = v379;
        }
        v380 = v207;
        operator delete(v209);
      }
      if (v368 != v336)
        free(v368);
    }
    v202 = 1;
LABEL_407:
    if (v396 != v138)
      free(v396);
    v237 = v394;
    v394 = 0;
    v11 = v344;
    if (v237)
      operator delete(v237);
    if (v202 != 7)
      return v11;
LABEL_412:
    v238 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = v238 - 1;
    if (!v238)
      goto LABEL_435;
  }
  v107 = 0;
  while (1)
  {
    v108 = v372;
    v392[0] = 0;
      break;
    *(_QWORD *)(v108 + 8 * v107) = v109;
    if (!v109)
      break;
    if (v105 == ++v107)
      goto LABEL_201;
  }
LABEL_474:
  mlir::OperationState::~OperationState((mlir::OperationState *)&v365);
  return 0;
}

void `anonymous namespace'::EncodingReader::emitError<char const(&)[54]>(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  int64_t v32;
  int v33;
  const char *v34;
  size_t v35;
  _QWORD v36[2];
  int v37;
  void *__src;
  unsigned int v39;
  unsigned int v40;
  _BYTE v41[96];
  __int128 v42;
  uint64_t v43;
  __int128 __p;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  mlir::emitError(a2, (uint64_t)v36);
  v5 = v36[0];
  if (v36[0])
  {
    v33 = 3;
    v34 = a3;
    v35 = strlen(a3);
    v6 = &v33;
    v7 = (char *)__src;
    if (v39 >= v40)
    {
      v31 = v39 + 1;
      if (__src <= &v33 && (char *)__src + 24 * v39 > (char *)&v33)
      {
        v32 = (char *)&v33 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v41, v31, 24);
        v7 = (char *)__src;
        v6 = (int *)((char *)__src + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v41, v31, 24);
        v6 = &v33;
        v7 = (char *)__src;
      }
    }
    v8 = &v7[24 * v39];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v39;
    v5 = v36[0];
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v46)
  {
    *(_QWORD *)(a1 + 8) = v36[1];
    v10 = v39;
    *(_DWORD *)(a1 + 16) = v37;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (!(_DWORD)v10 || v36 == (_QWORD *)a1)
    {
      v12 = 1;
      goto LABEL_17;
    }
    if (__src != v41)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v11 = v40;
      *(_DWORD *)(a1 + 32) = v10;
      *(_DWORD *)(a1 + 36) = v11;
      __src = v41;
      v40 = 0;
      v12 = 1;
LABEL_16:
      v39 = 0;
LABEL_17:
      v14 = v45;
      *(_QWORD *)(a1 + 152) = v43;
      *(_OWORD *)(a1 + 136) = v42;
      v42 = 0uLL;
      *(_OWORD *)(a1 + 160) = __p;
      *(_QWORD *)(a1 + 176) = v14;
      v43 = 0;
      __p = 0uLL;
      v45 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v12)
      {
        v15 = (_QWORD **)__p;
        if ((_QWORD)__p)
        {
          v16 = (_QWORD **)*((_QWORD *)&__p + 1);
          v17 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
              v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
            while (v16 != v15);
            v17 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v15;
          operator delete(v17);
        }
        v18 = (_QWORD *)v42;
        if ((_QWORD)v42)
        {
          v19 = (_QWORD *)*((_QWORD *)&v42 + 1);
          v20 = (void *)v42;
          if (*((_QWORD *)&v42 + 1) != (_QWORD)v42)
          {
            do
            {
              v22 = (void *)*--v19;
              v21 = v22;
              *v19 = 0;
              if (v22)
                operator delete[](v21);
            }
            while (v19 != v18);
            v20 = (void *)v42;
          }
          *((_QWORD *)&v42 + 1) = v18;
          operator delete(v20);
        }
        if (__src != v41)
          free(__src);
        v46 = 0;
      }
      goto LABEL_34;
    }
    if (v10 < 5)
    {
      v13 = v10;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v10, 24);
      v13 = v39;
      if (!v39)
        goto LABEL_15;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v13);
LABEL_15:
    *(_DWORD *)(a1 + 32) = v10;
    v12 = v46;
    goto LABEL_16;
  }
LABEL_34:
  mlir::InFlightDiagnostic::abandon(v36);
  if (v36[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
  if (v46)
  {
    v23 = (_QWORD **)__p;
    if ((_QWORD)__p)
    {
      v24 = (_QWORD **)*((_QWORD *)&__p + 1);
      v25 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v23;
      operator delete(v25);
    }
    v26 = (_QWORD *)v42;
    if ((_QWORD)v42)
    {
      v27 = (_QWORD *)*((_QWORD *)&v42 + 1);
      v28 = (void *)v42;
      if (*((_QWORD *)&v42 + 1) != (_QWORD)v42)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = (void *)v42;
      }
      *((_QWORD *)&v42 + 1) = v26;
      operator delete(v28);
    }
    if (__src != v41)
      free(__src);
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<mlir::Operation>,llvm::ilist_traits<mlir::Operation>>::splice(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4 != a5 && a2 != a5)
  {
    result = llvm::ilist_traits<mlir::Operation>::transferNodesFromList(result, a3, (uint64_t)a4, (uint64_t)a5);
    v8 = *a5;
    v9 = *a4;
    *(_QWORD *)(v9 + 8) = a5;
    *a5 = v9;
    v10 = *a2;
    *(_QWORD *)(v8 + 8) = a2;
    *a4 = v10;
    *(_QWORD *)(v10 + 8) = a4;
    *a2 = v8;
  }
  return result;
}

uint64_t mlir::BytecodeReader::Impl::parseRegion(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_::EncodingReader *v4;
  unint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v4 = *(_anonymous_namespace_::EncodingReader **)(a2 + 16);
  v20 = 0;
    return 0;
  v5 = v20;
  if (!v20)
    return 1;
  v19 = 0;
    return 0;
  *(_DWORD *)(a2 + 32) = v19;
  *(_DWORD *)(a2 + 48) = 0;
  if (v5 > *(unsigned int *)(a2 + 52))
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 40, (void *)(a2 + 56), v5, 8);
  do
  {
    v6 = operator new(0x48uLL);
    *v6 = 0u;
    v6[1] = 0u;
    *((_QWORD *)v6 + 4) = v6 + 2;
    *((_QWORD *)v6 + 5) = v6 + 2;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 6) = 0;
    v7 = *(unsigned int *)(a2 + 48);
    if (v7 >= *(unsigned int *)(a2 + 52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 40, (void *)(a2 + 56), v7 + 1, 8);
      v7 = *(unsigned int *)(a2 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v7) = v6;
    v8 = *(_DWORD *)(a2 + 48) + 1;
    *(_DWORD *)(a2 + 48) = v8;
    v9 = *(uint64_t **)a2;
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v8 - 8);
    llvm::ilist_traits<mlir::Block>::addNodeToList(*(_QWORD *)a2, v10);
    v11 = *v9;
    *(_QWORD *)(v10 + 8) = *v9;
    *(_QWORD *)(v10 + 16) = v9;
    v10 += 8;
    *(_QWORD *)(v11 + 8) = v10;
    *v9 = v10;
    --v5;
  }
  while (v5);
  v13 = *(_QWORD *)(a1 + 688);
  v14 = (*(_QWORD *)(v13 - 48) - *(_QWORD *)(v13 - 56)) >> 3;
  v15 = *(unsigned int *)(v13 - 24);
  if (v15 >= *(_DWORD *)(v13 - 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13 - 32, (void *)(v13 - 16), v15 + 1, 4);
    LODWORD(v15) = *(_DWORD *)(v13 - 24);
  }
  *(_DWORD *)(*(_QWORD *)(v13 - 32) + 4 * v15) = v14;
  ++*(_DWORD *)(v13 - 24);
  v16 = *(_QWORD *)(v13 - 56);
  v17 = (*(_QWORD *)(v13 - 48) - v16) >> 3;
  v18 = *(unsigned int *)(a2 + 32);
  if (v17 >= v17 + v18)
  {
    if (v17 > v17 + v18)
      *(_QWORD *)(v13 - 48) = v16 + 8 * (v17 + v18);
  }
  else
  {
    std::vector<mlir::Value>::__append((void **)(v13 - 56), v18);
  }
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(*(_QWORD *)a2 + 8);
  return mlir::BytecodeReader::Impl::parseBlockHeader(a1, v4, a2);
}

uint64_t mlir::BytecodeReader::Impl::createForwardRef(mlir::BytecodeReader::Impl *this, const mlir::OperationState *a2)
{
  mlir::GenericProgramPoint *v3;
  mlir::GenericProgramPoint *v4;
  mlir::GenericProgramPoint **v5;
  uint64_t v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = (mlir::BytecodeReader::Impl *)((char *)this + 832);
  v4 = (mlir::GenericProgramPoint *)*((_QWORD *)this + 104);
  v5 = (mlir::GenericProgramPoint **)((char *)this + 760);
  if (v4 == v3)
  {
    v7 = (mlir::GenericProgramPoint *)mlir::Operation::create((mlir::BytecodeReader::Impl *)((char *)this + 872), a2);
    llvm::ilist_traits<mlir::Operation>::addNodeToList((uint64_t)this + 760, (uint64_t)v7);
    mlir::GenericProgramPoint::~GenericProgramPoint(v7);
    v8 = *((_QWORD *)this + 95);
    *v9 = v8;
    v9[1] = v5;
    *(_QWORD *)(v8 + 8) = v9;
    *((_QWORD *)this + 95) = v9;
    mlir::GenericProgramPoint::~GenericProgramPoint(v7);
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v4);
    mlir::Operation::moveBefore(v6, (mlir::BytecodeReader::Impl *)((char *)this + 728), (uint64_t *)this + 95);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(*v5);
  return v10 - 16;
}

BOOL mlir::isBytecode(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) >= 4uLL && **(_DWORD **)a1 == 1391414349;
}

uint64_t mlir::readBytecodeFile(_OWORD *a1, uint64_t a2, mlir::StringAttr **a3)
{
  __int128 v3;
  uint64_t result;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _OWORD v11[2];

  v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  v9 = 0;
  v10 = 0;
  result = readBytecodeFileImpl((uint64_t)v11, a2, a3, (uint64_t)&v9);
  v5 = result;
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v5;
    }
  }
  return result;
}

uint64_t readBytecodeFileImpl(uint64_t a1, uint64_t a2, mlir::StringAttr **a3, uint64_t a4)
{
  mlir::MLIRContext *v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[2];
  const char *v22;
  __int16 v23;
  llvm *v24[3];
  void *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *__p;
  _QWORD **v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = (mlir::MLIRContext *)mlir::FileLineColLoc::get(*a3, *(const char **)(a1 + 16), *(_QWORD *)(a1 + 24), 0, 0);
  if (*(_QWORD *)(a1 + 8) >= 4uLL && **(_DWORD **)a1 == 1391414349)
  {
    v19 = *(_OWORD *)(a1 + 16);
    v21[0] = *(_OWORD *)a1;
    v21[1] = v19;
    mlir::BytecodeReader::Impl::Impl((uint64_t)v24, v8, a3, 0, v21, a4);
    mlir::BytecodeReader::Impl::read((uint64_t *)v24, a2, 0, v20);
    mlir::BytecodeReader::Impl::~Impl(v24);
  }
  v22 = "input buffer is not an MLIR bytecode file";
  v23 = 259;
  mlir::emitError((uint64_t)v8, (uint64_t)&v22, (uint64_t)v24);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
  if (v24[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  if (v31)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v30;
      v12 = __p;
      if (v30 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v30 = v10;
      operator delete(v12);
    }
    v13 = v27;
    if (v27)
    {
      v14 = v28;
      v15 = v27;
      if (v28 != v27)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v27;
      }
      v28 = v13;
      operator delete(v15);
    }
    if (v25 != &v26)
      free(v25);
  }
  return v9;
}

uint64_t mlir::readBytecodeFile(const llvm::MemoryBuffer ****a1, uint64_t a2, mlir::StringAttr **a3)
{
  _BYTE v7[32];

  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v7, ***a1);
  return readBytecodeFileImpl((uint64_t)v7, a2, a3, (uint64_t)a1);
}

uint64_t mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>(uint64_t a1, char *__s, char **a3, char *a4, char **a5, char *a6)
{
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  BOOL v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  size_t v34;

  v12 = strlen(__s);
  v13 = *(_QWORD *)(a1 + 16);
  v32 = 3;
  v33 = __s;
  v34 = v12;
  v14 = *(unsigned int *)(a1 + 24);
  v15 = &v32;
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    v26 = v14 + 1;
    v27 = v13 + 24 * v14 > (unint64_t)&v32;
    if (v13 <= (unint64_t)&v32 && v27)
    {
      v30 = (char *)&v32 - v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      v13 = *(_QWORD *)(a1 + 16);
      v15 = (int *)&v30[v13];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      v13 = *(_QWORD *)(a1 + 16);
      v15 = &v32;
    }
  }
  v16 = v13 + 24 * *(unsigned int *)(a1 + 24);
  v17 = *(_OWORD *)v15;
  *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 + 2);
  *(_OWORD *)v16 = v17;
  v18 = *(_DWORD *)(a1 + 28);
  v19 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v19;
  v20 = *a3;
  v32 = 5;
  v33 = v20;
  v21 = *(_QWORD *)(a1 + 16);
  v22 = &v32;
  if (v19 >= v18)
  {
    v28 = v19 + 1;
    v29 = v21 + 24 * v19 > (unint64_t)&v32;
    if (v21 <= (unint64_t)&v32 && v29)
    {
      v31 = (char *)&v32 - v21;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      v21 = *(_QWORD *)(a1 + 16);
      v22 = (int *)&v31[v21];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      v21 = *(_QWORD *)(a1 + 16);
      v22 = &v32;
    }
  }
  v23 = v21 + 24 * *(unsigned int *)(a1 + 24);
  v24 = *(_OWORD *)v22;
  *(_QWORD *)(v23 + 16) = *((_QWORD *)v22 + 2);
  *(_OWORD *)v23 = v24;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[18],unsigned long,char const(&)[8]>(a1, a4, a5, a6);
}

uint64_t mlir::Diagnostic::append<char const(&)[18],unsigned long,char const(&)[8]>(uint64_t a1, char *__s, char **a3, char *a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v16;
  BOOL v17;
  char *v18;
  int v19;
  char *v20;
  size_t v21;

  v8 = strlen(__s);
  v9 = a1 + 16;
  v10 = *(_QWORD *)(a1 + 16);
  v19 = 3;
  v20 = __s;
  v21 = v8;
  v11 = *(unsigned int *)(a1 + 24);
  v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    v16 = v11 + 1;
    v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v12 = &v19;
    }
  }
  v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  v14 = *(_OWORD *)v12;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
  *(_OWORD *)v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<unsigned long,char const(&)[8]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<unsigned long,char const(&)[8]>(uint64_t a1, char **a2, char *__s)
{
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  size_t v26;

  v6 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *a2;
  v24 = 5;
  v25 = v7;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v24;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v19 = v8 + 1;
    v20 = v5 + 24 * v8 > (unint64_t)&v24;
    if (v5 <= (unint64_t)&v24 && v20)
    {
      v22 = (char *)&v24 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      v5 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v22[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      v5 = *(_QWORD *)(a1 + 16);
      v9 = &v24;
    }
  }
  v10 = v5 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  v12 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v12;
  v13 = strlen(__s);
  v24 = 3;
  v25 = __s;
  v26 = v13;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = &v24;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    v21 = v12 + 1;
    if (v14 <= (unint64_t)&v24 && v14 + 24 * v12 > (unint64_t)&v24)
    {
      v23 = (char *)&v24 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v21, 24);
      v14 = *(_QWORD *)(a1 + 16);
      v15 = (int *)&v23[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v21, 24);
      v14 = *(_QWORD *)(a1 + 16);
      v15 = &v24;
    }
  }
  v16 = v14 + 24 * *(unsigned int *)(a1 + 24);
  v17 = *(_OWORD *)v15;
  *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 + 2);
  *(_OWORD *)v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t `anonymous namespace'::EncodingReader::parseByte<unsigned char>(_QWORD *a1, _BYTE *a2)
{
  _BYTE *v2;
  uint64_t v3;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[3];
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *__p;
  _QWORD **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)a1[2];
  if (v2 == (_BYTE *)(*a1 + a1[1]))
  {
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
    if (v13[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
    if (v20)
    {
      v5 = (_QWORD **)__p;
      if (__p)
      {
        v6 = v19;
        v7 = __p;
        if (v19 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v19 = v5;
        operator delete(v7);
      }
      v8 = v16;
      if (v16)
      {
        v9 = v17;
        v10 = v16;
        if (v17 != v16)
        {
          do
          {
            v12 = (void *)*--v9;
            v11 = v12;
            *v9 = 0;
            if (v12)
              operator delete[](v11);
          }
          while (v9 != v8);
          v10 = v16;
        }
        v17 = v8;
        operator delete(v10);
      }
      if (v14 != &v15)
        free(v14);
    }
  }
  else
  {
    a1[2] = v2 + 1;
    *a2 = *v2;
    return 1;
  }
  return v3;
}

uint64_t `anonymous namespace'::EncodingReader::alignTo(_anonymous_namespace_::EncodingReader *this, __int32 a2, int8x8_t a3)
{
  uint8x8_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  const void **v12;
  void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  const void **v29;
  int v30;
  _BYTE *v31;
  void *v32;
  int v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD **v52;
  void *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  void *v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  void *v66;
  unint64_t v68;
  int64_t v69;
  std::string __dst;
  std::string v71;
  void *v72[2];
  std::string::size_type v73;
  unsigned __int8 v74;
  void **v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[57];
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  const void **v86;
  const char *v87;
  int v88;
  void *__src;
  uint64_t v90;
  _BYTE v91[96];
  __int128 v92;
  uint64_t v93;
  __int128 __p;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  a3.i32[0] = a2;
  v4 = (uint8x8_t)vcnt_s8(a3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.i32[0] == 1)
  {
    v5 = (a2 - 1);
    do
    {
      if ((v5 & *((_QWORD *)this + 2)) == 0)
        return 1;
      v74 = 0;
        return 0;
      v6 = v74;
    }
    while (v74 == 203);
    if (v74)
    {
      v7 = 16;
      do
      {
        *((_BYTE *)&v86 + v7--) = llvm::hexdigit(unsigned int,BOOL)::LUT[v6 & 0xF];
        v8 = v6 > 0xF;
        v6 >>= 4;
      }
      while (v8);
      v9 = v7 + 1;
      v10 = 16 - v7;
      if ((unint64_t)(16 - v7) >= 0x7FFFFFFFFFFFFFF8)
        abort();
    }
    else
    {
      LOBYTE(v88) = 48;
      v9 = 16;
      v10 = 1;
    }
    if (v10 > 0x16)
    {
      v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v23 = v10 | 7;
      v24 = v23 + 1;
      p_dst = (std::string *)operator new(v23 + 1);
      __dst.__r_.__value_.__l.__size_ = v10;
      __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (v9 == 17)
      {
LABEL_30:
        p_dst->__r_.__value_.__s.__data_[0] = 0;
        v25 = std::string::insert(&__dst, 0, "expected alignment byte (0xCB), but got: '0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v71.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v27 = std::string::append(&v71, "'");
        v28 = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)v72 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v73 = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        mlir::emitError(*((_QWORD *)this + 3), (uint64_t)&v86);
        v29 = v86;
        if (v86)
        {
          LOWORD(v79) = 260;
          v75 = v72;
          mlir::Diagnostic::operator<<((uint64_t)&v87, (const void ***)&v75);
          v29 = v86;
        }
        v75 = (void **)v29;
        LOBYTE(v76) = 0;
        v85 = 0;
        if (!v96)
        {
LABEL_94:
          mlir::InFlightDiagnostic::abandon(&v86);
          if (v86)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
          if (v96)
          {
            v51 = (_QWORD **)__p;
            if ((_QWORD)__p)
            {
              v52 = (_QWORD **)*((_QWORD *)&__p + 1);
              v53 = (void *)__p;
              if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
              {
                do
                  v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
                while (v52 != v51);
                v53 = (void *)__p;
              }
              *((_QWORD *)&__p + 1) = v51;
              operator delete(v53);
            }
            v54 = (_QWORD *)v92;
            if ((_QWORD)v92)
            {
              v55 = (_QWORD *)*((_QWORD *)&v92 + 1);
              v56 = (void *)v92;
              if (*((_QWORD *)&v92 + 1) != (_QWORD)v92)
              {
                do
                {
                  v58 = (void *)*--v55;
                  v57 = v58;
                  *v55 = 0;
                  if (v58)
                    operator delete[](v57);
                }
                while (v55 != v54);
                v56 = (void *)v92;
              }
              *((_QWORD *)&v92 + 1) = v54;
              operator delete(v56);
            }
            if (__src != v91)
              free(__src);
          }
          v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v75);
          if (v75)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
          if (v85)
          {
            v59 = (_QWORD **)v83;
            if ((_QWORD)v83)
            {
              v60 = (_QWORD **)*((_QWORD *)&v83 + 1);
              v61 = (void *)v83;
              if (*((_QWORD *)&v83 + 1) != (_QWORD)v83)
              {
                do
                  v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
                while (v60 != v59);
                v61 = (void *)v83;
              }
              *((_QWORD *)&v83 + 1) = v59;
              operator delete(v61);
            }
            v62 = (_QWORD *)v81;
            if ((_QWORD)v81)
            {
              v63 = (_QWORD *)*((_QWORD *)&v81 + 1);
              v64 = (void *)v81;
              if (*((_QWORD *)&v81 + 1) != (_QWORD)v81)
              {
                do
                {
                  v66 = (void *)*--v63;
                  v65 = v66;
                  *v63 = 0;
                  if (v66)
                    operator delete[](v65);
                }
                while (v63 != v62);
                v64 = (void *)v81;
              }
              *((_QWORD *)&v81 + 1) = v62;
              operator delete(v64);
            }
            if (v78 != v80)
              free(v78);
          }
          if (SHIBYTE(v73) < 0)
          {
            operator delete(v72[0]);
            if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_132:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                return v21;
LABEL_136:
              operator delete(__dst.__r_.__value_.__l.__data_);
              return v21;
            }
          }
          else if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_132;
          }
          operator delete(v71.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return v21;
          goto LABEL_136;
        }
        v76 = v87;
        v30 = v90;
        LODWORD(v77) = v88;
        v31 = v80;
        v78 = v80;
        v79 = 0x400000000;
        if (!(_DWORD)v90)
        {
          v33 = 1;
          goto LABEL_90;
        }
        v32 = __src;
        if (__src != v91)
        {
          v78 = __src;
          v79 = v90;
          __src = v91;
          HIDWORD(v90) = 0;
          v33 = 1;
LABEL_89:
          LODWORD(v90) = 0;
LABEL_90:
          v81 = v92;
          v82 = v93;
          v92 = 0uLL;
          v83 = __p;
          v84 = v95;
          v93 = 0;
          __p = 0uLL;
          v95 = 0;
          v85 = 1;
          if (v33)
          {
            if (__src != v91)
              free(__src);
            v96 = 0;
          }
          goto LABEL_94;
        }
        if (v90 < 5)
        {
          v50 = v90;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v90, 24);
          v50 = v90;
          if (!(_DWORD)v90)
          {
LABEL_88:
            LODWORD(v79) = v30;
            v33 = v96;
            goto LABEL_89;
          }
          v32 = __src;
          v31 = v78;
        }
        memcpy(v31, v32, 24 * v50);
        goto LABEL_88;
      }
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
      p_dst = &__dst;
      if (v9 == 17)
        goto LABEL_30;
    }
    memcpy(p_dst, (char *)&v86 + v9, v10);
    p_dst = (std::string *)((char *)p_dst + v10);
    goto LABEL_30;
  }
  mlir::emitError(*((_QWORD *)this + 3), (uint64_t)&v86);
  v12 = v86;
  if (v86)
  {
    LODWORD(v75) = 3;
    v76 = "expected alignment to be a power-of-two";
    v77 = 39;
    v13 = &v75;
    v14 = (char *)__src;
    if (v90 >= HIDWORD(v90))
    {
      v68 = v90 + 1;
      if (__src <= &v75 && (char *)__src + 24 * v90 > (char *)&v75)
      {
        v69 = (char *)&v75 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v91, v68, 24);
        v14 = (char *)__src;
        v13 = (void ***)((char *)__src + v69);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v91, v68, 24);
        v13 = &v75;
        v14 = (char *)__src;
      }
    }
    v15 = &v14[24 * v90];
    v16 = *(_OWORD *)v13;
    *((_QWORD *)v15 + 2) = v13[2];
    *(_OWORD *)v15 = v16;
    LODWORD(v90) = v90 + 1;
    v12 = v86;
  }
  v75 = (void **)v12;
  LOBYTE(v76) = 0;
  v85 = 0;
  if (v96)
  {
    v76 = v87;
    v17 = v90;
    LODWORD(v77) = v88;
    v18 = v80;
    v78 = v80;
    v79 = 0x400000000;
    if (!(_DWORD)v90)
    {
      v20 = 1;
      goto LABEL_42;
    }
    v19 = v91;
    if (__src != v91)
    {
      v78 = __src;
      v79 = v90;
      __src = v91;
      HIDWORD(v90) = 0;
      v20 = 1;
LABEL_41:
      LODWORD(v90) = 0;
LABEL_42:
      v81 = v92;
      v82 = v93;
      v92 = 0uLL;
      v83 = __p;
      v84 = v95;
      v93 = 0;
      __p = 0uLL;
      v95 = 0;
      v85 = 1;
      if (v20)
      {
        if (__src != v91)
          free(__src);
        v96 = 0;
      }
      goto LABEL_46;
    }
    if (v90 < 5)
    {
      v22 = v90;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v90, 24);
      v22 = v90;
      if (!(_DWORD)v90)
      {
LABEL_40:
        LODWORD(v79) = v17;
        v20 = v96;
        goto LABEL_41;
      }
      v19 = __src;
      v18 = v78;
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_40;
  }
LABEL_46:
  mlir::InFlightDiagnostic::abandon(&v86);
  if (v86)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
  if (v96)
  {
    v34 = (_QWORD **)__p;
    if ((_QWORD)__p)
    {
      v35 = (_QWORD **)*((_QWORD *)&__p + 1);
      v36 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v34;
      operator delete(v36);
    }
    v37 = (_QWORD *)v92;
    if ((_QWORD)v92)
    {
      v38 = (_QWORD *)*((_QWORD *)&v92 + 1);
      v39 = (void *)v92;
      if (*((_QWORD *)&v92 + 1) != (_QWORD)v92)
      {
        do
        {
          v41 = (void *)*--v38;
          v40 = v41;
          *v38 = 0;
          if (v41)
            operator delete[](v40);
        }
        while (v38 != v37);
        v39 = (void *)v92;
      }
      *((_QWORD *)&v92 + 1) = v37;
      operator delete(v39);
    }
    if (__src != v91)
      free(__src);
  }
  v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v75);
  if (v75)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
  if (v85)
  {
    v42 = (_QWORD **)v83;
    if ((_QWORD)v83)
    {
      v43 = (_QWORD **)*((_QWORD *)&v83 + 1);
      v44 = (void *)v83;
      if (*((_QWORD *)&v83 + 1) != (_QWORD)v83)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = (void *)v83;
      }
      *((_QWORD *)&v83 + 1) = v42;
      operator delete(v44);
    }
    v45 = (_QWORD *)v81;
    if ((_QWORD)v81)
    {
      v46 = (_QWORD *)*((_QWORD *)&v81 + 1);
      v47 = (void *)v81;
      if (*((_QWORD *)&v81 + 1) != (_QWORD)v81)
      {
        do
        {
          v49 = (void *)*--v46;
          v48 = v49;
          *v46 = 0;
          if (v49)
            operator delete[](v48);
        }
        while (v46 != v45);
        v47 = (void *)v81;
      }
      *((_QWORD *)&v81 + 1) = v45;
      operator delete(v47);
    }
    if (v78 != v80)
      free(v78);
  }
  return v21;
}

uint64_t `anonymous namespace'::EncodingReader::parseBytes(_QWORD *a1, char *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  char *v14;
  char *v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *__p;
  _QWORD **v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v3 = a1[2];
  if (*a1 + a1[1] - v3 >= (unint64_t)a2)
  {
    *a3 = v3;
    a3[1] = a2;
    a1[2] += a2;
    return 1;
  }
  else
  {
    v14 = (char *)(*a1 + a1[1] - v3);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    if (v23)
    {
      v5 = (_QWORD **)__p;
      if (__p)
      {
        v6 = v22;
        v7 = __p;
        if (v22 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v22 = v5;
        operator delete(v7);
      }
      v8 = v19;
      if (v19)
      {
        v9 = v20;
        v10 = v19;
        if (v20 != v19)
        {
          do
          {
            v12 = (void *)*--v9;
            v11 = v12;
            *v9 = 0;
            if (v12)
              operator delete[](v11);
          }
          while (v9 != v8);
          v10 = v19;
        }
        v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18)
        free(v17);
    }
  }
  return v4;
}

uint64_t mlir::Diagnostic::append<char const(&)[21],unsigned int>(uint64_t a1, char *__s, unsigned int *a3)
{
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  BOOL v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  size_t v28;

  v6 = strlen(__s);
  v7 = *(_QWORD *)(a1 + 16);
  v26 = 3;
  v27 = __s;
  v28 = v6;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v26;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v20 = v8 + 1;
    v21 = v7 + 24 * v8 > (unint64_t)&v26;
    if (v7 <= (unint64_t)&v26 && v21)
    {
      v24 = (char *)&v26 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v24[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = &v26;
    }
  }
  v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  v12 = *(_DWORD *)(a1 + 28);
  v13 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v13;
  v14 = (char *)*a3;
  v26 = 5;
  v27 = v14;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = &v26;
  if (v13 >= v12)
  {
    v22 = v13 + 1;
    v23 = v15 + 24 * v13 > (unint64_t)&v26;
    if (v15 <= (unint64_t)&v26 && v23)
    {
      v25 = (char *)&v26 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v16 = (int *)&v25[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v16 = &v26;
    }
  }
  v17 = v15 + 24 * *(unsigned int *)(a1 + 24);
  v18 = *(_OWORD *)v16;
  *(_QWORD *)(v17 + 16) = *((_QWORD *)v16 + 2);
  *(_OWORD *)v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

void `anonymous namespace'::EncodingReader::emitError<char const(&)[21],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>(uint64_t a1, uint64_t a2, char **a3, char **a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *__src;
  unsigned int v32;
  int v33;
  _BYTE v34[96];
  void *v35[2];
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  mlir::emitError(a2, (uint64_t)&v28);
  v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>((uint64_t)&v29, "attempting to parse ", a3, " bytes when only ", a4, " remain");
    v7 = v28;
  }
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v39)
  {
    *(_QWORD *)(a1 + 8) = v29;
    v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (!(_DWORD)v8 || &v28 == (uint64_t *)a1)
    {
      v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      __src = v34;
      v33 = 0;
      v10 = 1;
LABEL_15:
      v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(_QWORD *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 176) = v38;
      v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v38 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v10)
      {
        v12 = (_QWORD **)__p[0];
        if (__p[0])
        {
          v13 = (_QWORD **)__p[1];
          v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        v15 = v35[0];
        if (v35[0])
        {
          v16 = v35[1];
          v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              v19 = (void *)*--v16;
              v18 = v19;
              *v16 = 0;
              if (v19)
                operator delete[](v18);
            }
            while (v16 != v15);
            v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34)
          free(__src);
        v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      v11 = v32;
      if (!v32)
        goto LABEL_14;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  if (v39)
  {
    v20 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v21 = (_QWORD **)__p[1];
      v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    v23 = v35[0];
    if (v35[0])
    {
      v24 = v35[1];
      v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          *v24 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v24 != v23);
        v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34)
      free(__src);
  }
}

uint64_t mlir::Diagnostic::append<char const(&)[18],unsigned long long &,char const(&)[36],unsigned long long &>(uint64_t a1, char *__s, char **a3, char *a4, char **a5)
{
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  size_t v32;

  v10 = strlen(__s);
  v11 = *(_QWORD *)(a1 + 16);
  v30 = 3;
  v31 = __s;
  v32 = v10;
  v12 = *(unsigned int *)(a1 + 24);
  v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    v24 = v12 + 1;
    v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      v11 = *(_QWORD *)(a1 + 16);
      v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      v11 = *(_QWORD *)(a1 + 16);
      v13 = &v30;
    }
  }
  v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  v15 = *(_OWORD *)v13;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)v13 + 2);
  *(_OWORD *)v14 = v15;
  v16 = *(_DWORD *)(a1 + 28);
  v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v17;
  v18 = *a3;
  v30 = 5;
  v31 = v18;
  v19 = *(_QWORD *)(a1 + 16);
  v20 = &v30;
  if (v17 >= v16)
  {
    v26 = v17 + 1;
    v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = &v30;
    }
  }
  v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  v22 = *(_OWORD *)v20;
  *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
  *(_OWORD *)v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(uint64_t a1, char *__s, char **a3)
{
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  BOOL v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  size_t v28;

  v6 = strlen(__s);
  v7 = *(_QWORD *)(a1 + 16);
  v26 = 3;
  v27 = __s;
  v28 = v6;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v26;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v20 = v8 + 1;
    v21 = v7 + 24 * v8 > (unint64_t)&v26;
    if (v7 <= (unint64_t)&v26 && v21)
    {
      v24 = (char *)&v26 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v24[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = &v26;
    }
  }
  v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  v12 = *(_DWORD *)(a1 + 28);
  v13 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v13;
  v14 = *a3;
  v26 = 5;
  v27 = v14;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = &v26;
  if (v13 >= v12)
  {
    v22 = v13 + 1;
    v23 = v15 + 24 * v13 > (unint64_t)&v26;
    if (v15 <= (unint64_t)&v26 && v23)
    {
      v25 = (char *)&v26 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v16 = (int *)&v25[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v16 = &v26;
    }
  }
  v17 = v15 + 24 * *(unsigned int *)(a1 + 24);
  v18 = *(_OWORD *)v16;
  *(_QWORD *)(v17 + 16) = *((_QWORD *)v16 + 2);
  *(_OWORD *)v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t `anonymous namespace'::EncodingReader::parseBytes(_anonymous_namespace_::EncodingReader *this, size_t __n, unsigned __int8 *__dst)
{
  const void *v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  char *v16;
  char *v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v17 = (char *)__n;
  v5 = (const void *)*((_QWORD *)this + 2);
  if (*(_QWORD *)this + *((_QWORD *)this + 1) - (_QWORD)v5 >= __n)
  {
    memcpy(__dst, v5, __n);
    *((_QWORD *)this + 2) += __n;
    return 1;
  }
  else
  {
    v16 = (char *)(*(_QWORD *)this + *((_QWORD *)this + 1) - (_QWORD)v5);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    if (v25)
    {
      v7 = (_QWORD **)__p;
      if (__p)
      {
        v8 = v24;
        v9 = __p;
        if (v24 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v24 = v7;
        operator delete(v9);
      }
      v10 = v21;
      if (v21)
      {
        v11 = v22;
        v12 = v21;
        if (v22 != v21)
        {
          do
          {
            v14 = (void *)*--v11;
            v13 = v14;
            *v11 = 0;
            if (v14)
              operator delete[](v13);
          }
          while (v11 != v10);
          v12 = v21;
        }
        v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20)
        free(v19);
    }
  }
  return v6;
}

uint64_t `anonymous namespace'::EncodingReader::parseMultiByteVarInt(_anonymous_namespace_::EncodingReader *this, unint64_t *a2)
{
  size_t v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = __clz(__rbit32(*a2));
  v5[0] = *a2;
    return 0;
  *a2 = v5[0] >> (v3 + 1);
  return 1;
}

uint64_t resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(uint64_t a1, uint64_t a2, unsigned int a3, char *a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  char *v17;
  _QWORD v18[2];
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD **v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v18[0] = a6;
  v18[1] = a7;
  v17 = a4;
  if (a3 <= (unint64_t)a4)
  {
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
    if (v19[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
    if (v26)
    {
      v8 = (_QWORD **)__p;
      if (__p)
      {
        v9 = v25;
        v10 = __p;
        if (v25 != __p)
        {
          do
            v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          v10 = __p;
        }
        v25 = v8;
        operator delete(v10);
      }
      v11 = v22;
      if (v22)
      {
        v12 = v23;
        v13 = v22;
        if (v23 != v22)
        {
          do
          {
            v15 = (void *)*--v12;
            v14 = v15;
            *v12 = 0;
            if (v15)
              operator delete[](v14);
          }
          while (v12 != v11);
          v13 = v22;
        }
        v23 = v11;
        operator delete(v13);
      }
      if (v20 != &v21)
        free(v20);
    }
  }
  else
  {
    *a5 = *(_OWORD *)(a2 + 16 * (_QWORD)a4);
    return 1;
  }
  return v7;
}

void `anonymous namespace'::EncodingReader::emitError<char const(&)[9],llvm::StringRef &,char const(&)[9],unsigned long long &>(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *__src;
  unsigned int v32;
  int v33;
  _BYTE v34[96];
  void *v35[2];
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  mlir::emitError(a2, (uint64_t)&v28);
  v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[9],llvm::StringRef &,char const(&)[9],unsigned long long &>((uint64_t)&v29, "invalid ", a3, " index: ", a4);
    v7 = v28;
  }
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v39)
  {
    *(_QWORD *)(a1 + 8) = v29;
    v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (!(_DWORD)v8 || &v28 == (uint64_t *)a1)
    {
      v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      __src = v34;
      v33 = 0;
      v10 = 1;
LABEL_15:
      v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(_QWORD *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 176) = v38;
      v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v38 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v10)
      {
        v12 = (_QWORD **)__p[0];
        if (__p[0])
        {
          v13 = (_QWORD **)__p[1];
          v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        v15 = v35[0];
        if (v35[0])
        {
          v16 = v35[1];
          v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              v19 = (void *)*--v16;
              v18 = v19;
              *v16 = 0;
              if (v19)
                operator delete[](v18);
            }
            while (v16 != v15);
            v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34)
          free(__src);
        v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      v11 = v32;
      if (!v32)
        goto LABEL_14;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  if (v39)
  {
    v20 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v21 = (_QWORD **)__p[1];
      v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    v23 = v35[0];
    if (v35[0])
    {
      v24 = v35[1];
      v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          *v24 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v24 != v23);
        v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34)
      free(__src);
  }
}

uint64_t mlir::Diagnostic::append<char const(&)[9],llvm::StringRef &,char const(&)[9],unsigned long long &>(uint64_t a1, char *__s, uint64_t a3, char *a4, char **a5)
{
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const void ***v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  unint64_t v19;
  BOOL v20;
  char *v21;
  const void **v22;
  char *v23;
  size_t v24;
  __int16 v25;

  v10 = strlen(__s);
  v11 = a1 + 16;
  v12 = *(_QWORD *)(a1 + 16);
  LODWORD(v22) = 3;
  v23 = __s;
  v24 = v10;
  v13 = *(unsigned int *)(a1 + 24);
  v14 = &v22;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    v19 = v13 + 1;
    v20 = v12 + 24 * v13 > (unint64_t)&v22;
    if (v12 <= (unint64_t)&v22 && v20)
    {
      v21 = (char *)&v22 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = (const void ***)&v21[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = &v22;
    }
  }
  v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = v14[2];
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  v25 = 261;
  v17 = *(char **)(a3 + 8);
  v22 = *(const void ***)a3;
  v23 = v17;
  mlir::Diagnostic::operator<<(a1, &v22);
  return mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(a1, a4, a5);
}

uint64_t parseEntry<llvm::MutableArrayRef<std::unique_ptr<`anonymous namespace'::BytecodeDialect>>,std::unique_ptr<`anonymous namespace'::BytecodeDialect>*>(_anonymous_namespace_::EncodingReader *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v23;
  char *v24;
  _QWORD v25[2];
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v23 = 0;
    return 0;
  v10 = *((_QWORD *)a1 + 3);
  v11 = *a2;
  v12 = a2[1];
  v25[0] = a4;
  v25[1] = a5;
  v24 = (char *)v23;
  if (v12 <= v23)
  {
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v33)
    {
      v14 = (_QWORD **)__p;
      if (__p)
      {
        v15 = v32;
        v16 = __p;
        if (v32 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v32 = v14;
        operator delete(v16);
      }
      v17 = v29;
      if (v29)
      {
        v18 = v30;
        v19 = v29;
        if (v30 != v29)
        {
          do
          {
            v21 = (void *)*--v18;
            v20 = v21;
            *v18 = 0;
            if (v21)
              operator delete[](v20);
          }
          while (v18 != v17);
          v19 = v29;
        }
        v30 = v17;
        operator delete(v19);
      }
      if (v27 != &v28)
        free(v27);
    }
  }
  else
  {
    *a3 = v11 + 8 * v23;
    return 1;
  }
  return v13;
}

void `anonymous namespace'::DialectReader::emitError(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *__src;
  unsigned int v24;
  int v25;
  _BYTE v26[96];
  void *v27[2];
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  mlir::emitError(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24), (uint64_t)&v20);
  v5 = v20;
  if (v20)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v21, a2);
    v5 = v20;
  }
  *(_QWORD *)a3 = v5;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 184) = 0;
  if (v31)
  {
    *(_QWORD *)(a3 + 8) = v21;
    v6 = v24;
    *(_DWORD *)(a3 + 16) = v22;
    v7 = (void *)(a3 + 40);
    *(_QWORD *)(a3 + 24) = a3 + 40;
    *(_QWORD *)(a3 + 32) = 0x400000000;
    if (!(_DWORD)v6 || &v20 == (uint64_t *)a3)
    {
      v10 = 1;
      goto LABEL_16;
    }
    v8 = __src;
    if (__src != v26)
    {
      *(_QWORD *)(a3 + 24) = __src;
      v9 = v25;
      *(_DWORD *)(a3 + 32) = v6;
      *(_DWORD *)(a3 + 36) = v9;
      __src = v26;
      v25 = 0;
      v10 = 1;
LABEL_15:
      v24 = 0;
LABEL_16:
      *(_OWORD *)(a3 + 136) = *(_OWORD *)v27;
      *(_QWORD *)(a3 + 152) = v28;
      v27[0] = 0;
      v27[1] = 0;
      *(_OWORD *)(a3 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 176) = v30;
      v28 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v30 = 0;
      *(_BYTE *)(a3 + 184) = 1;
      if (v10)
      {
        if (__src != v26)
          free(__src);
        v31 = 0;
      }
      goto LABEL_20;
    }
    if (v6 < 5)
    {
      v11 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, (void *)(a3 + 40), v6, 24);
      v11 = v24;
      if (!v24)
      {
LABEL_14:
        *(_DWORD *)(a3 + 32) = v6;
        v10 = v31;
        goto LABEL_15;
      }
      v8 = __src;
      v7 = *(void **)(a3 + 24);
    }
    memcpy(v7, v8, 24 * v11);
    goto LABEL_14;
  }
LABEL_20:
  mlir::InFlightDiagnostic::abandon(&v20);
  if (v20)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  if (v31)
  {
    v12 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v13 = (_QWORD **)__p[1];
      v14 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = __p[0];
      }
      __p[1] = v12;
      operator delete(v14);
    }
    v15 = v27[0];
    if (v27[0])
    {
      v16 = v27[1];
      v17 = v27[0];
      if (v27[1] != v27[0])
      {
        do
        {
          v19 = (void *)*--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            operator delete[](v18);
        }
        while (v16 != v15);
        v17 = v27[0];
      }
      v27[1] = v15;
      operator delete(v17);
    }
    if (__src != v26)
      free(__src);
  }
}

uint64_t `anonymous namespace'::DialectReader::getDialectVersion(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v4;
  int Key;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 32);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)v4, a2, a3);
  if (Key == -1)
    v6 = *(unsigned int *)(v4 + 8);
  else
    v6 = Key;
  v7 = *(_QWORD *)v4 + 8 * v6;
  if (v7 == **(_QWORD **)(a1 + 32) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8))
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 8);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 56);
}

uint64_t `anonymous namespace'::DialectReader::getContext(_anonymous_namespace_::DialectReader *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 24);
  return mlir::Attribute::getContext((mlir::Attribute *)&v2);
}

uint64_t `anonymous namespace'::DialectReader::getBytecodeVersion(_anonymous_namespace_::DialectReader *this)
{
  return **((_QWORD **)this + 6);
}

BOOL `anonymous namespace'::DialectReader::readAttribute(_anonymous_namespace_::DialectReader *this, mlir::Attribute *a2)
{
  _anonymous_namespace_::AttrTypeReader *v3;
  _anonymous_namespace_::EncodingReader *v4;
  uint64_t v5;
  unint64_t v7;

  v3 = (_anonymous_namespace_::AttrTypeReader *)*((_QWORD *)this + 1);
  v4 = (_anonymous_namespace_::EncodingReader *)*((_QWORD *)this + 5);
  v7 = 0;
    return 0;
  *(_QWORD *)a2 = v5;
  return v5 != 0;
}

BOOL `anonymous namespace'::DialectReader::readOptionalAttribute(_anonymous_namespace_::DialectReader *this, mlir::Attribute *a2)
{
  _anonymous_namespace_::AttrTypeReader *v3;
  _anonymous_namespace_::EncodingReader *v4;
  uint64_t v6;
  unint64_t v7;

  v3 = (_anonymous_namespace_::AttrTypeReader *)*((_QWORD *)this + 1);
  v4 = (_anonymous_namespace_::EncodingReader *)*((_QWORD *)this + 5);
  v7 = 0;
    return 0;
  if ((v7 & 1) == 0)
    return 1;
  *(_QWORD *)a2 = v6;
  return v6 != 0;
}

BOOL `anonymous namespace'::DialectReader::readType(_anonymous_namespace_::DialectReader *this, mlir::Type *a2)
{
  _anonymous_namespace_::AttrTypeReader *v3;
  _anonymous_namespace_::EncodingReader *v4;
  uint64_t v5;
  unint64_t v7;

  v3 = (_anonymous_namespace_::AttrTypeReader *)*((_QWORD *)this + 1);
  v4 = (_anonymous_namespace_::EncodingReader *)*((_QWORD *)this + 5);
  v7 = 0;
    return 0;
  *(_QWORD *)a2 = v5;
  return v5 != 0;
}

uint64_t `anonymous namespace'::DialectReader::readVarInt(_anonymous_namespace_::EncodingReader **this, unint64_t *a2)
{
}

uint64_t `anonymous namespace'::DialectReader::readSignedVarInt(_anonymous_namespace_::EncodingReader **this, unint64_t *a2)
{
  unint64_t v4;

  v4 = 0;
    return 0;
  *a2 = -(uint64_t)(v4 & 1) ^ (v4 >> 1);
  return 1;
}

void `anonymous namespace'::DialectReader::readAPIntWithKnownWidth(_anonymous_namespace_::DialectReader *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x1E0C80C00];
  if (a2 <= 8)
  {
    LOBYTE(v18) = 0;
    {
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (!a2)
        LOBYTE(v6) = 0;
      v7 = v6 & v18;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  if (a2 <= 0x40)
  {
    v18 = 0;
    {
      v7 = (-(uint64_t)(v18 & 1) ^ ((unint64_t)v18 >> 1)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
LABEL_9:
      *(_DWORD *)(a3 + 8) = a2;
      *(_QWORD *)a3 = v7;
      *(_BYTE *)(a3 + 16) = 1;
      return;
    }
    goto LABEL_15;
  }
  v17 = 0;
  {
LABEL_15:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
  v8 = v17;
  v18 = v20;
  v19 = 0x400000000;
  if (v17)
  {
    if (v17 < 5)
    {
      v9 = 0;
      v10 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v17, 8);
      v9 = v19;
      v10 = v8 - v19;
      if (v8 == v19)
        goto LABEL_19;
    }
    bzero((char *)v18 + 8 * v9, 8 * v10);
LABEL_19:
    v12 = 0;
    LODWORD(v19) = v8;
    while (1)
    {
      v13 = (uint64_t *)((char *)v18 + v12);
      *v13 = -(*v13 & 1) ^ ((unint64_t)*v13 >> 1);
      v12 += 8;
      if (!--v8)
      {
        v11 = v19;
        goto LABEL_23;
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    v14 = v18;
    if (v18 == v20)
      return;
LABEL_24:
    free(v14);
    return;
  }
  v11 = 0;
LABEL_23:
  llvm::APInt::APInt((uint64_t)&v15, a2, v18, v11);
  *(_DWORD *)(a3 + 8) = v16;
  *(_QWORD *)a3 = v15;
  *(_BYTE *)(a3 + 16) = 1;
  v14 = v18;
  if (v18 != v20)
    goto LABEL_24;
}

void `anonymous namespace'::DialectReader::readAPFloatWithKnownSemantics(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t SizeInBits;
  llvm::APFloatBase *v7;
  void *v8;
  _QWORD *v9;
  void *__p;
  unsigned int v11;
  char v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  SizeInBits = llvm::APFloatBase::getSizeInBits((uint64_t)a2);
  v7 = (llvm::APFloatBase *)(*(_QWORD *(**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(&__p, a1, SizeInBits);
  if (!v12)
  {
    *a3 = 0;
    a3[32] = 0;
    return;
  }
  v8 = llvm::APFloatBase::PPCDoubleDouble(v7);
  if (v8 == a2)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, (uint64_t)a2, (uint64_t)&__p);
    v9 = a3 + 8;
    if (v8 != (void *)v13[0])
    {
LABEL_4:
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)v13);
      a3[32] = 1;
      if (v8 != (void *)v13[0])
        goto LABEL_5;
      goto LABEL_10;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v13, a2, (const llvm::APInt **)&__p);
    v9 = a3 + 8;
    if (v8 != (void *)v13[0])
      goto LABEL_4;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, v13);
  a3[32] = 1;
  if (v8 != (void *)v13[0])
  {
LABEL_5:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v13);
    if (!v12)
      return;
    goto LABEL_11;
  }
LABEL_10:
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v13);
  if (!v12)
    return;
LABEL_11:
  if (v11 >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
}

uint64_t `anonymous namespace'::DialectReader::readString(_anonymous_namespace_::DialectReader *this, llvm::StringRef *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v6;

  v3 = *((_QWORD *)this + 2);
  v4 = (uint64_t *)*((_QWORD *)this + 5);
  v6 = 0;
  else
    return 0;
}

uint64_t `anonymous namespace'::DialectReader::readBlob(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 0;
  {
    return 0;
  }
  v4 = v7;
  *a2 = v6;
  a2[1] = v4;
  return 1;
}

uint64_t `anonymous namespace'::DialectReader::readBool(_anonymous_namespace_::DialectReader *this, BOOL *a2)
{
}

void `anonymous namespace'::DialectReader::readResourceHandle(_anonymous_namespace_::DialectReader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _anonymous_namespace_::EncodingReader *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  unint64_t v21;
  char *v22;
  _QWORD v23[2];
  _QWORD v24[3];
  void *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *__p;
  _QWORD **v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  v4 = (_anonymous_namespace_::EncodingReader *)*((_QWORD *)this + 5);
  v21 = 0;
    goto LABEL_25;
  v5 = *((_QWORD *)v4 + 3);
  v6 = *v3;
  v7 = *((unsigned int *)v3 + 2);
  v23[0] = "resource handle";
  v23[1] = 15;
  v22 = (char *)v21;
  if (v21 >= v7)
  {
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    if (v31)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v30;
        v14 = __p;
        if (v30 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v30 = v12;
        operator delete(v14);
      }
      v15 = v27;
      if (v27)
      {
        v16 = v28;
        v17 = v27;
        if (v28 != v27)
        {
          do
          {
            v19 = (void *)*--v16;
            v18 = v19;
            *v16 = 0;
            if (v19)
              operator delete[](v18);
          }
          while (v16 != v15);
          v17 = v27;
        }
        v28 = v15;
        operator delete(v17);
      }
      if (v25 != &v26)
        free(v25);
    }
    if (v11)
    {
      v9 = 0;
      *(_QWORD *)&v10 = &mlir::detail::TypeIDResolver<void,void>::id;
      goto LABEL_24;
    }
LABEL_25:
    v20 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_26;
  }
  v8 = (uint64_t *)(v6 + 24 * v21);
  v9 = *v8;
  v10 = *(_OWORD *)(v8 + 1);
LABEL_24:
  *(_QWORD *)a2 = v9;
  *(_OWORD *)(a2 + 8) = v10;
  v20 = 1;
LABEL_26:
  *(_BYTE *)(a2 + 24) = v20;
}

BOOL `anonymous namespace'::BytecodeDialect::load(uint64_t a1, uint64_t a2, mlir::MLIRContext *a3)
{
  uint64_t v3;
  uint64_t **(*Dialect)(uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  const char *v32;
  const void ***v33;
  char *v34;
  char *v35;
  __int128 v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  _QWORD v47[4];
  __int16 v48;
  const void **v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  void (**v54)(_anonymous_namespace_::DialectReader *__hidden);
  __int128 v55;
  void *v56[2];
  _QWORD v57[12];
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 8))
    return 1;
  Dialect = mlir::MLIRContext::getOrLoadDialect((uint64_t)a3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  if (Dialect)
  {
    v9 = (uint64_t)Dialect;
    *(_QWORD *)a1 = Dialect;
    *(_BYTE *)(a1 + 8) = 1;
    v10 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>((uint64_t)Dialect);
    if (v10)
      v10 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>(v9);
    *(_QWORD *)(a1 + 16) = v10;
    v11 = *(const char **)(a1 + 48);
    if (!v11)
      return 1;
    goto LABEL_11;
  }
  if (mlir::MLIRContext::allowsUnregisteredDialects(a3))
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    v11 = *(const char **)(a1 + 48);
    if (!v11)
      return 1;
LABEL_11:
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 48);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 24);
      v49 = *(const void ***)(a1 + 40);
      v50 = v11;
      v51 = (uint64_t)v49;
      v52 = v14;
      v54 = off_1E0E15720;
      v15 = *(_OWORD *)(a2 + 24);
      v55 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)v56 = v15;
      v57[0] = &v49;
      v57[1] = v13;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, void (***)(_anonymous_namespace_::DialectReader *__hidden)))(*(_QWORD *)v12 + 56))(v47, v12, &v54);
      v16 = v47[0];
      v47[0] = 0;
      v17 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v16;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v18 = v47[0];
        v47[0] = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v16 = *(_QWORD *)(a1 + 56);
      }
      return v16 != 0;
    }
    v47[0] = "dialect '";
    v48 = 259;
    (*(void (**)(void (***__return_ptr)(_anonymous_namespace_::DialectReader *__hidden), uint64_t, _QWORD *))(*(_QWORD *)a2 + 16))(&v54, a2, v47);
    if (v54)
    {
      v53 = 261;
      v19 = *(const char **)(a1 + 32);
      v49 = *(const void ***)(a1 + 24);
      v50 = v19;
      mlir::Diagnostic::operator<<((uint64_t)&v55, &v49);
      if (v54)
      {
        LODWORD(v49) = 3;
        v50 = "' does not implement the bytecode interface, but found a version entry";
        v51 = 70;
        v20 = &v49;
        v21 = (char *)v56[0];
        if (LODWORD(v56[1]) >= HIDWORD(v56[1]))
        {
          v43 = LODWORD(v56[1]) + 1;
          if (v56[0] <= &v49 && (char *)v56[0] + 24 * LODWORD(v56[1]) > (char *)&v49)
          {
            v45 = (char *)&v49 - (char *)v56[0];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v43, 24);
            v21 = (char *)v56[0];
            v20 = (const void ***)((char *)v56[0] + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v43, 24);
            v20 = &v49;
            v21 = (char *)v56[0];
          }
        }
        v22 = &v21[24 * LODWORD(v56[1])];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++LODWORD(v56[1]);
      }
    }
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
    if (v54)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
    if (v62)
    {
      v24 = (_QWORD **)__p;
      if (__p)
      {
        v25 = v61;
        v26 = __p;
        if (v61 != __p)
        {
          do
            v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          v26 = __p;
        }
        v61 = v24;
        operator delete(v26);
      }
      v27 = v58;
      if (!v58)
        goto LABEL_56;
      v28 = v59;
      v29 = v58;
      if (v59 == v58)
      {
LABEL_55:
        v59 = v27;
        operator delete(v29);
LABEL_56:
        if (v56[0] != v57)
          free(v56[0]);
        return v3;
      }
      do
      {
        v31 = (void *)*--v28;
        v30 = v31;
        *v28 = 0;
        if (v31)
          operator delete[](v30);
      }
      while (v28 != v27);
LABEL_54:
      v29 = v58;
      goto LABEL_55;
    }
    return v3;
  }
  v47[0] = "dialect '";
  v48 = 259;
  (*(void (**)(void (***__return_ptr)(_anonymous_namespace_::DialectReader *__hidden), uint64_t, _QWORD *))(*(_QWORD *)a2 + 16))(&v54, a2, v47);
  if (v54)
  {
    v53 = 261;
    v32 = *(const char **)(a1 + 32);
    v49 = *(const void ***)(a1 + 24);
    v50 = v32;
    mlir::Diagnostic::operator<<((uint64_t)&v55, &v49);
    if (v54)
    {
      LODWORD(v49) = 3;
      v50 = "' is unknown. If this is intended, please call allowUnregisteredDialects() on the MLIRContext, or use -allow"
            "-unregistered-dialect with the MLIR tool used.";
      v51 = 154;
      v33 = &v49;
      v34 = (char *)v56[0];
      if (LODWORD(v56[1]) >= HIDWORD(v56[1]))
      {
        v44 = LODWORD(v56[1]) + 1;
        if (v56[0] <= &v49 && (char *)v56[0] + 24 * LODWORD(v56[1]) > (char *)&v49)
        {
          v46 = (char *)&v49 - (char *)v56[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v44, 24);
          v34 = (char *)v56[0];
          v33 = (const void ***)((char *)v56[0] + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v44, 24);
          v33 = &v49;
          v34 = (char *)v56[0];
        }
      }
      v35 = &v34[24 * LODWORD(v56[1])];
      v36 = *(_OWORD *)v33;
      *((_QWORD *)v35 + 2) = v33[2];
      *(_OWORD *)v35 = v36;
      ++LODWORD(v56[1]);
    }
  }
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
  if (v54)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
  if (v62)
  {
    v37 = (_QWORD **)__p;
    if (__p)
    {
      v38 = v61;
      v39 = __p;
      if (v61 != __p)
      {
        do
          v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        v39 = __p;
      }
      v61 = v37;
      operator delete(v39);
    }
    v27 = v58;
    if (!v58)
      goto LABEL_56;
    v40 = v59;
    v29 = v58;
    if (v59 == v58)
      goto LABEL_55;
    do
    {
      v42 = (void *)*--v40;
      v41 = v42;
      *v40 = 0;
      if (v42)
        operator delete[](v41);
    }
    while (v40 != v27);
    goto LABEL_54;
  }
  return v3;
}

void *mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  void **p_vtable;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  int v9;
  int v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeDialectInterface]";
      v23 = 80;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::BytecodeDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a1 = v21;
    }
  }
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    v5 = p_vtable[485];
    LODWORD(v6) = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
    v7 = (void **)(v3 + 16 * v6);
    v8 = *v7;
    if (*v7 == v5)
      goto LABEL_9;
    v9 = 1;
    while (v8 != (void *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v4 - 1);
      v8 = *(void **)(v3 + 16 * v6);
      if (v8 == v5)
      {
        v7 = (void **)(v3 + 16 * v6);
        goto LABEL_9;
      }
    }
  }
  v7 = (void **)(v3 + 16 * v4);
LABEL_9:
  if (v7 == (void **)(v3 + 16 * v4))
    return 0;
  else
    return v7[1];
}

uint64_t `anonymous namespace'::AttrTypeReader::resolveAttribute(_anonymous_namespace_::AttrTypeReader *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mlir::MLIRContext *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  const void ***v24;
  char *v25;
  char *v26;
  __int128 v27;
  const void ***v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const void ***v33;
  char *v34;
  char *v35;
  __int128 v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t **Context;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  void *v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  char *v67;
  unint64_t v68;
  const char *v69;
  uint64_t v70;
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  const void **v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  unsigned int v85;
  unsigned int v86;
  _BYTE v87[96];
  void *v88;
  _QWORD *v89;
  void *__p;
  _QWORD **v91;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)this + 8) <= a2)
  {
    mlir::emitError(*((_QWORD *)this + 17), (uint64_t)&v82);
    if (v82)
    {
      LODWORD(v75) = 3;
      v76 = (uint64_t)"invalid ";
      *(_QWORD *)&v77 = 8;
      v24 = &v75;
      v25 = (char *)v84;
      if (v85 >= v86)
      {
        v60 = v85 + 1;
        if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
        {
          v64 = (char *)&v75 - (_BYTE *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          v25 = (char *)v84;
          v24 = (const void ***)((char *)v84 + v64);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          v24 = &v75;
          v25 = (char *)v84;
        }
      }
      v26 = &v25[24 * v85];
      v27 = *(_OWORD *)v24;
      *((_QWORD *)v26 + 2) = v24[2];
      *(_OWORD *)v26 = v27;
      ++v85;
      if (v82)
      {
        LOWORD(v78) = 261;
        v75 = (const void **)"Attribute";
        v76 = 9;
        mlir::Diagnostic::operator<<((uint64_t)&v83, &v75);
        if (v82)
        {
          LODWORD(v75) = 3;
          v76 = (uint64_t)" index: ";
          *(_QWORD *)&v77 = 8;
          v28 = &v75;
          v29 = (char *)v84;
          if (v85 >= v86)
          {
            v61 = v85 + 1;
            if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
            {
              v65 = (char *)&v75 - (_BYTE *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              v29 = (char *)v84;
              v28 = (const void ***)((char *)v84 + v65);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              v28 = &v75;
              v29 = (char *)v84;
            }
          }
          v30 = &v29[24 * v85];
          v31 = *(_OWORD *)v28;
          *((_QWORD *)v30 + 2) = v28[2];
          *(_OWORD *)v30 = v31;
          v32 = ++v85;
          if (v82)
          {
            LODWORD(v75) = 5;
            v76 = a2;
            v33 = &v75;
            v34 = (char *)v84;
            if (v32 >= v86)
            {
              v62 = v32 + 1;
              v63 = (char *)v84 + 24 * v32 > (char *)&v75;
              if (v84 <= &v75 && v63)
              {
                v66 = (char *)&v75 - (_BYTE *)v84;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                v34 = (char *)v84;
                v33 = (const void ***)((char *)v84 + v66);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                v33 = &v75;
                v34 = (char *)v84;
              }
            }
            v35 = &v34[24 * v85];
            v36 = *(_OWORD *)v33;
            *((_QWORD *)v35 + 2) = v33[2];
            *(_OWORD *)v35 = v36;
            ++v85;
            if (v82)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
          }
        }
      }
    }
    if (!v92)
      return 0;
    v37 = (_QWORD **)__p;
    if (__p)
    {
      v38 = v91;
      v39 = __p;
      if (v91 != __p)
      {
        do
          v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        v39 = __p;
      }
      v91 = v37;
      operator delete(v39);
    }
    v40 = v88;
    if (!v88)
      goto LABEL_71;
    v41 = v89;
    v42 = v88;
    if (v89 == v88)
      goto LABEL_70;
    do
    {
      v44 = (void *)*--v41;
      v43 = v44;
      *v41 = 0;
      if (v44)
        operator delete[](v43);
    }
    while (v41 != v40);
    goto LABEL_69;
  }
  v4 = *((_QWORD *)this + 3);
  v5 = v4 + 40 * a2;
  result = *(_QWORD *)v5;
  if (*(_QWORD *)v5)
    return result;
  v7 = v4 + 40 * a2;
  v9 = *(_OWORD *)(v7 + 24);
  v8 = (_OWORD *)(v7 + 24);
  v10 = *((_QWORD *)this + 17);
  v72 = v9;
  v73 = v9;
  v74 = v10;
  if (!*((_BYTE *)v8 - 8))
  {
    v75 = (const void **)"Attribute";
    v76 = 9;
    v67 = 0;
    v68 = 0;
    {
      v81 = 0;
      Context = (uint64_t **)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
      mlir::parseAttribute(v67, v68, Context, 0, &v81, 1);
    }
    return 0;
  }
  v11 = *((_QWORD *)this + 2);
  v12 = *((_QWORD *)this + 18);
  v75 = (const void **)off_1E0E15720;
  v76 = (uint64_t)this;
  v77 = *(_OWORD *)this;
  v78 = v11;
  v79 = &v72;
  v80 = v12;
  v13 = v4 + 40 * a2;
  v15 = *(_QWORD *)(v13 + 8);
  v14 = v13 + 8;
  v16 = (mlir::MLIRContext *)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
  {
    v17 = *((_QWORD *)this + 19);
    v18 = *(unsigned int *)(v17 + 56);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD **)(v17 + 48);
      v20 = 8 * v18;
      while ((*(unsigned __int8 (**)(_QWORD, const void ***, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*v19 + 16))(*v19, &v75, *(_QWORD *)(*(_QWORD *)v14 + 24), *(_QWORD *)(*(_QWORD *)v14 + 32), v5))
      {
        if (*(_QWORD *)v5)
          goto LABEL_54;
        v72 = *v8;
        v73 = v72;
        ++v19;
        v20 -= 8;
        if (!v20)
          goto LABEL_10;
      }
      return 0;
    }
LABEL_10:
    v21 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    if (v21)
    {
      v22 = (*(uint64_t (**)(uint64_t, const void ***))(*(_QWORD *)v21 + 16))(v21, &v75);
      *(_QWORD *)v5 = v22;
      v23 = v22 != 0;
    }
    else
    {
      v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      if (v92)
      {
        v46 = (_QWORD **)__p;
        if (__p)
        {
          v47 = v91;
          v48 = __p;
          if (v91 != __p)
          {
            do
              v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
            while (v47 != v46);
            v48 = __p;
          }
          v91 = v46;
          operator delete(v48);
        }
        v49 = v88;
        if (v88)
        {
          v50 = v89;
          v51 = v88;
          if (v89 != v88)
          {
            do
            {
              v53 = (void *)*--v50;
              v52 = v53;
              *v50 = 0;
              if (v53)
                operator delete[](v52);
            }
            while (v50 != v49);
            v51 = v88;
          }
          v89 = v49;
          operator delete(v51);
        }
        if (v84 != v87)
          free(v84);
      }
    }
    if (v23)
    {
LABEL_54:
      if (v73 == (_QWORD)v72 + *((_QWORD *)&v72 + 1))
        return *(_QWORD *)v5;
      v71 = 1283;
      v67 = "unexpected trailing bytes after ";
      v69 = "Attribute";
      v70 = 9;
      v75 = (const void **)&v67;
      *(_QWORD *)&v77 = " entry";
      LOWORD(v78) = 770;
      if (v82)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      if (!v92)
        return 0;
      v54 = (_QWORD **)__p;
      if (__p)
      {
        v55 = v91;
        v56 = __p;
        if (v91 != __p)
        {
          do
            v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          v56 = __p;
        }
        v91 = v54;
        operator delete(v56);
      }
      v40 = v88;
      if (!v88)
        goto LABEL_71;
      v57 = v89;
      v42 = v88;
      if (v89 == v88)
      {
LABEL_70:
        v89 = v40;
        operator delete(v42);
LABEL_71:
        if (v84 != v87)
          free(v84);
        return 0;
      }
      do
      {
        v59 = (void *)*--v57;
        v58 = v59;
        *v57 = 0;
        if (v59)
          operator delete[](v58);
      }
      while (v57 != v40);
LABEL_69:
      v42 = v88;
      goto LABEL_70;
    }
  }
  return 0;
}

void `anonymous namespace'::EncodingReader::emitError<llvm::Twine>(uint64_t a1, uint64_t a2, const void ***a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *__src;
  unsigned int v30;
  int v31;
  _BYTE v32[96];
  void *v33[2];
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  mlir::emitError(a2, (uint64_t)&v26);
  v5 = v26;
  if (v26)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v27, a3);
    v5 = v26;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v37)
  {
    *(_QWORD *)(a1 + 8) = v27;
    v6 = v30;
    *(_DWORD *)(a1 + 16) = v28;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (!(_DWORD)v6 || &v26 == (uint64_t *)a1)
    {
      v8 = 1;
      goto LABEL_16;
    }
    if (__src != v32)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v7 = v31;
      *(_DWORD *)(a1 + 32) = v6;
      *(_DWORD *)(a1 + 36) = v7;
      __src = v32;
      v31 = 0;
      v8 = 1;
LABEL_15:
      v30 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v33;
      *(_QWORD *)(a1 + 152) = v34;
      v33[0] = 0;
      v33[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 176) = v36;
      v34 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v36 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v8)
      {
        v10 = (_QWORD **)__p[0];
        if (__p[0])
        {
          v11 = (_QWORD **)__p[1];
          v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
            while (v11 != v10);
            v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
        v13 = v33[0];
        if (v33[0])
        {
          v14 = v33[1];
          v15 = v33[0];
          if (v33[1] != v33[0])
          {
            do
            {
              v17 = (void *)*--v14;
              v16 = v17;
              *v14 = 0;
              if (v17)
                operator delete[](v16);
            }
            while (v14 != v13);
            v15 = v33[0];
          }
          v33[1] = v13;
          operator delete(v15);
        }
        if (__src != v32)
          free(__src);
        v37 = 0;
      }
      goto LABEL_33;
    }
    if (v6 < 5)
    {
      v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v6, 24);
      v9 = v30;
      if (!v30)
        goto LABEL_14;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v9);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v6;
    v8 = v37;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v26);
  if (v26)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
  if (v37)
  {
    v18 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v19 = (_QWORD **)__p[1];
      v20 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p[0];
      }
      __p[1] = v18;
      operator delete(v20);
    }
    v21 = v33[0];
    if (v33[0])
    {
      v22 = v33[1];
      v23 = v33[0];
      if (v33[1] != v33[0])
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v33[0];
      }
      v33[1] = v21;
      operator delete(v23);
    }
    if (__src != v32)
      free(__src);
  }
}

void `anonymous namespace'::EncodingReader::emitError<char const(&)[10],llvm::StringRef &,char const(&)[44]>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *__src;
  unsigned int v30;
  int v31;
  _BYTE v32[96];
  void *v33[2];
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  mlir::emitError(a2, (uint64_t)&v26);
  v5 = v26;
  if (v26)
  {
    mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)&v27, "dialect '", a3, "' does not implement the bytecode interface");
    v5 = v26;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v37)
  {
    *(_QWORD *)(a1 + 8) = v27;
    v6 = v30;
    *(_DWORD *)(a1 + 16) = v28;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (!(_DWORD)v6 || &v26 == (uint64_t *)a1)
    {
      v8 = 1;
      goto LABEL_16;
    }
    if (__src != v32)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v7 = v31;
      *(_DWORD *)(a1 + 32) = v6;
      *(_DWORD *)(a1 + 36) = v7;
      __src = v32;
      v31 = 0;
      v8 = 1;
LABEL_15:
      v30 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v33;
      *(_QWORD *)(a1 + 152) = v34;
      v33[0] = 0;
      v33[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 176) = v36;
      v34 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v36 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v8)
      {
        v10 = (_QWORD **)__p[0];
        if (__p[0])
        {
          v11 = (_QWORD **)__p[1];
          v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
            while (v11 != v10);
            v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
        v13 = v33[0];
        if (v33[0])
        {
          v14 = v33[1];
          v15 = v33[0];
          if (v33[1] != v33[0])
          {
            do
            {
              v17 = (void *)*--v14;
              v16 = v17;
              *v14 = 0;
              if (v17)
                operator delete[](v16);
            }
            while (v14 != v13);
            v15 = v33[0];
          }
          v33[1] = v13;
          operator delete(v15);
        }
        if (__src != v32)
          free(__src);
        v37 = 0;
      }
      goto LABEL_33;
    }
    if (v6 < 5)
    {
      v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v6, 24);
      v9 = v30;
      if (!v30)
        goto LABEL_14;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v9);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v6;
    v8 = v37;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v26);
  if (v26)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
  if (v37)
  {
    v18 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v19 = (_QWORD **)__p[1];
      v20 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p[0];
      }
      __p[1] = v18;
      operator delete(v20);
    }
    v21 = v33[0];
    if (v33[0])
    {
      v22 = v33[1];
      v23 = v33[0];
      if (v33[1] != v33[0])
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v33[0];
      }
      v33[1] = v21;
      operator delete(v23);
    }
    if (__src != v32)
      free(__src);
  }
}

void `anonymous namespace'::EncodingReader::emitError<char const(&)[33],llvm::StringRef &,char const(&)[19],llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *__src;
  unsigned int v32;
  int v33;
  _BYTE v34[96];
  void *v35[2];
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  mlir::emitError(a2, (uint64_t)&v28);
  v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[33],llvm::StringRef &,char const(&)[19],llvm::StringRef>((uint64_t)&v29, "trailing characters found after ", a3, " assembly format: ", a4);
    v7 = v28;
  }
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v39)
  {
    *(_QWORD *)(a1 + 8) = v29;
    v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (!(_DWORD)v8 || &v28 == (uint64_t *)a1)
    {
      v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      __src = v34;
      v33 = 0;
      v10 = 1;
LABEL_15:
      v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(_QWORD *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 176) = v38;
      v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v38 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v10)
      {
        v12 = (_QWORD **)__p[0];
        if (__p[0])
        {
          v13 = (_QWORD **)__p[1];
          v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        v15 = v35[0];
        if (v35[0])
        {
          v16 = v35[1];
          v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              v19 = (void *)*--v16;
              v18 = v19;
              *v16 = 0;
              if (v19)
                operator delete[](v18);
            }
            while (v16 != v15);
            v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34)
          free(__src);
        v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      v11 = v32;
      if (!v32)
        goto LABEL_14;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  if (v39)
  {
    v20 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v21 = (_QWORD **)__p[1];
      v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    v23 = v35[0];
    if (v35[0])
    {
      v24 = v35[1];
      v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          *v24 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v24 != v23);
        v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34)
      free(__src);
  }
}

uint64_t mlir::Diagnostic::append<char const(&)[33],llvm::StringRef &,char const(&)[19],llvm::StringRef>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const void ***v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  unint64_t v19;
  BOOL v20;
  char *v21;
  const void **v22;
  char *v23;
  size_t v24;
  __int16 v25;

  v10 = strlen(__s);
  v11 = a1 + 16;
  v12 = *(_QWORD *)(a1 + 16);
  LODWORD(v22) = 3;
  v23 = __s;
  v24 = v10;
  v13 = *(unsigned int *)(a1 + 24);
  v14 = &v22;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    v19 = v13 + 1;
    v20 = v12 + 24 * v13 > (unint64_t)&v22;
    if (v12 <= (unint64_t)&v22 && v20)
    {
      v21 = (char *)&v22 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = (const void ***)&v21[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = &v22;
    }
  }
  v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = v14[2];
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  v25 = 261;
  v17 = *(char **)(a3 + 8);
  v22 = *(const void ***)a3;
  v23 = v17;
  mlir::Diagnostic::operator<<(a1, &v22);
  return mlir::Diagnostic::append<char const(&)[19],llvm::StringRef>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[19],llvm::StringRef>(uint64_t a1, char *__s, uint64_t a3)
{
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const void ***v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  unint64_t v15;
  BOOL v16;
  char *v17;
  const void **v18;
  char *v19;
  size_t v20;
  __int16 v21;

  v6 = strlen(__s);
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  LODWORD(v18) = 3;
  v19 = __s;
  v20 = v6;
  v9 = *(unsigned int *)(a1 + 24);
  v10 = &v18;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    v15 = v9 + 1;
    v16 = v8 + 24 * v9 > (unint64_t)&v18;
    if (v8 <= (unint64_t)&v18 && v16)
    {
      v17 = (char *)&v18 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v15, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v10 = (const void ***)&v17[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v15, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v10 = &v18;
    }
  }
  v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v10[2];
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  v21 = 261;
  v13 = *(char **)(a3 + 8);
  v18 = *(const void ***)a3;
  v19 = v13;
  mlir::Diagnostic::operator<<(a1, &v18);
  return a1;
}

uint64_t `anonymous namespace'::AttrTypeReader::resolveType(_anonymous_namespace_::AttrTypeReader *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mlir::MLIRContext *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  const void ***v24;
  char *v25;
  char *v26;
  __int128 v27;
  const void ***v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const void ***v33;
  char *v34;
  char *v35;
  __int128 v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t **Context;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  void *v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  char *v67;
  unint64_t v68;
  const char *v69;
  uint64_t v70;
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  const void **v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  unsigned int v85;
  unsigned int v86;
  _BYTE v87[96];
  void *v88;
  _QWORD *v89;
  void *__p;
  _QWORD **v91;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)this + 22) <= a2)
  {
    mlir::emitError(*((_QWORD *)this + 17), (uint64_t)&v82);
    if (v82)
    {
      LODWORD(v75) = 3;
      v76 = (uint64_t)"invalid ";
      *(_QWORD *)&v77 = 8;
      v24 = &v75;
      v25 = (char *)v84;
      if (v85 >= v86)
      {
        v60 = v85 + 1;
        if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
        {
          v64 = (char *)&v75 - (_BYTE *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          v25 = (char *)v84;
          v24 = (const void ***)((char *)v84 + v64);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          v24 = &v75;
          v25 = (char *)v84;
        }
      }
      v26 = &v25[24 * v85];
      v27 = *(_OWORD *)v24;
      *((_QWORD *)v26 + 2) = v24[2];
      *(_OWORD *)v26 = v27;
      ++v85;
      if (v82)
      {
        LOWORD(v78) = 261;
        v75 = (const void **)"Type";
        v76 = 4;
        mlir::Diagnostic::operator<<((uint64_t)&v83, &v75);
        if (v82)
        {
          LODWORD(v75) = 3;
          v76 = (uint64_t)" index: ";
          *(_QWORD *)&v77 = 8;
          v28 = &v75;
          v29 = (char *)v84;
          if (v85 >= v86)
          {
            v61 = v85 + 1;
            if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
            {
              v65 = (char *)&v75 - (_BYTE *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              v29 = (char *)v84;
              v28 = (const void ***)((char *)v84 + v65);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              v28 = &v75;
              v29 = (char *)v84;
            }
          }
          v30 = &v29[24 * v85];
          v31 = *(_OWORD *)v28;
          *((_QWORD *)v30 + 2) = v28[2];
          *(_OWORD *)v30 = v31;
          v32 = ++v85;
          if (v82)
          {
            LODWORD(v75) = 5;
            v76 = a2;
            v33 = &v75;
            v34 = (char *)v84;
            if (v32 >= v86)
            {
              v62 = v32 + 1;
              v63 = (char *)v84 + 24 * v32 > (char *)&v75;
              if (v84 <= &v75 && v63)
              {
                v66 = (char *)&v75 - (_BYTE *)v84;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                v34 = (char *)v84;
                v33 = (const void ***)((char *)v84 + v66);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                v33 = &v75;
                v34 = (char *)v84;
              }
            }
            v35 = &v34[24 * v85];
            v36 = *(_OWORD *)v33;
            *((_QWORD *)v35 + 2) = v33[2];
            *(_OWORD *)v35 = v36;
            ++v85;
            if (v82)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
          }
        }
      }
    }
    if (!v92)
      return 0;
    v37 = (_QWORD **)__p;
    if (__p)
    {
      v38 = v91;
      v39 = __p;
      if (v91 != __p)
      {
        do
          v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        v39 = __p;
      }
      v91 = v37;
      operator delete(v39);
    }
    v40 = v88;
    if (!v88)
      goto LABEL_71;
    v41 = v89;
    v42 = v88;
    if (v89 == v88)
      goto LABEL_70;
    do
    {
      v44 = (void *)*--v41;
      v43 = v44;
      *v41 = 0;
      if (v44)
        operator delete[](v43);
    }
    while (v41 != v40);
    goto LABEL_69;
  }
  v4 = *((_QWORD *)this + 10);
  v5 = v4 + 40 * a2;
  result = *(_QWORD *)v5;
  if (*(_QWORD *)v5)
    return result;
  v7 = v4 + 40 * a2;
  v9 = *(_OWORD *)(v7 + 24);
  v8 = (_OWORD *)(v7 + 24);
  v10 = *((_QWORD *)this + 17);
  v72 = v9;
  v73 = v9;
  v74 = v10;
  if (!*((_BYTE *)v8 - 8))
  {
    v75 = (const void **)"Type";
    v76 = 4;
    v67 = 0;
    v68 = 0;
    {
      v81 = 0;
      Context = (uint64_t **)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
      mlir::parseType(v67, v68, Context, &v81, 1);
    }
    return 0;
  }
  v11 = *((_QWORD *)this + 2);
  v12 = *((_QWORD *)this + 18);
  v75 = (const void **)off_1E0E15720;
  v76 = (uint64_t)this;
  v77 = *(_OWORD *)this;
  v78 = v11;
  v79 = &v72;
  v80 = v12;
  v13 = v4 + 40 * a2;
  v15 = *(_QWORD *)(v13 + 8);
  v14 = v13 + 8;
  v16 = (mlir::MLIRContext *)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
  {
    v17 = *((_QWORD *)this + 19);
    v18 = *(unsigned int *)(v17 + 120);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD **)(v17 + 112);
      v20 = 8 * v18;
      while ((*(unsigned __int8 (**)(_QWORD, const void ***, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*v19 + 16))(*v19, &v75, *(_QWORD *)(*(_QWORD *)v14 + 24), *(_QWORD *)(*(_QWORD *)v14 + 32), v5))
      {
        if (*(_QWORD *)v5)
          goto LABEL_54;
        v72 = *v8;
        v73 = v72;
        ++v19;
        v20 -= 8;
        if (!v20)
          goto LABEL_10;
      }
      return 0;
    }
LABEL_10:
    v21 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    if (v21)
    {
      v22 = (*(uint64_t (**)(uint64_t, const void ***))(*(_QWORD *)v21 + 24))(v21, &v75);
      *(_QWORD *)v5 = v22;
      v23 = v22 != 0;
    }
    else
    {
      v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      if (v92)
      {
        v46 = (_QWORD **)__p;
        if (__p)
        {
          v47 = v91;
          v48 = __p;
          if (v91 != __p)
          {
            do
              v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
            while (v47 != v46);
            v48 = __p;
          }
          v91 = v46;
          operator delete(v48);
        }
        v49 = v88;
        if (v88)
        {
          v50 = v89;
          v51 = v88;
          if (v89 != v88)
          {
            do
            {
              v53 = (void *)*--v50;
              v52 = v53;
              *v50 = 0;
              if (v53)
                operator delete[](v52);
            }
            while (v50 != v49);
            v51 = v88;
          }
          v89 = v49;
          operator delete(v51);
        }
        if (v84 != v87)
          free(v84);
      }
    }
    if (v23)
    {
LABEL_54:
      if (v73 == (_QWORD)v72 + *((_QWORD *)&v72 + 1))
        return *(_QWORD *)v5;
      v71 = 1283;
      v67 = "unexpected trailing bytes after ";
      v69 = "Type";
      v70 = 4;
      v75 = (const void **)&v67;
      *(_QWORD *)&v77 = " entry";
      LOWORD(v78) = 770;
      if (v82)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      if (!v92)
        return 0;
      v54 = (_QWORD **)__p;
      if (__p)
      {
        v55 = v91;
        v56 = __p;
        if (v91 != __p)
        {
          do
            v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          v56 = __p;
        }
        v91 = v54;
        operator delete(v56);
      }
      v40 = v88;
      if (!v88)
        goto LABEL_71;
      v57 = v89;
      v42 = v88;
      if (v89 == v88)
      {
LABEL_70:
        v89 = v40;
        operator delete(v42);
LABEL_71:
        if (v84 != v87)
          free(v84);
        return 0;
      }
      do
      {
        v59 = (void *)*--v57;
        v58 = v59;
        *v57 = 0;
        if (v59)
          operator delete[](v58);
      }
      while (v57 != v40);
LABEL_69:
      v42 = v88;
      goto LABEL_70;
    }
  }
  return 0;
}

uint64_t `anonymous namespace'::EncodingReader::parseByte<BOOL>(_QWORD *a1, BOOL *a2)
{
  _BYTE *v2;
  uint64_t v3;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[3];
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *__p;
  _QWORD **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)a1[2];
  if (v2 == (_BYTE *)(*a1 + a1[1]))
  {
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
    if (v13[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
    if (v20)
    {
      v5 = (_QWORD **)__p;
      if (__p)
      {
        v6 = v19;
        v7 = __p;
        if (v19 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v19 = v5;
        operator delete(v7);
      }
      v8 = v16;
      if (v16)
      {
        v9 = v17;
        v10 = v16;
        if (v17 != v16)
        {
          do
          {
            v12 = (void *)*--v9;
            v11 = v12;
            *v9 = 0;
            if (v12)
              operator delete[](v11);
          }
          while (v9 != v8);
          v10 = v16;
        }
        v17 = v8;
        operator delete(v10);
      }
      if (v14 != &v15)
        free(v14);
    }
  }
  else
  {
    a1[2] = v2 + 1;
    *a2 = *v2 != 0;
    return 1;
  }
  return v3;
}

uint64_t `anonymous namespace'::EncodingReader::parseByte<mlir::AsmResourceEntryKind>(_QWORD *a1, _DWORD *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[3];
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *__p;
  _QWORD **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 *)a1[2];
  if (v2 == (unsigned __int8 *)(*a1 + a1[1]))
  {
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
    if (v13[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
    if (v20)
    {
      v5 = (_QWORD **)__p;
      if (__p)
      {
        v6 = v19;
        v7 = __p;
        if (v19 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v19 = v5;
        operator delete(v7);
      }
      v8 = v16;
      if (v16)
      {
        v9 = v17;
        v10 = v16;
        if (v17 != v16)
        {
          do
          {
            v12 = (void *)*--v9;
            v11 = v12;
            *v9 = 0;
            if (v12)
              operator delete[](v11);
          }
          while (v9 != v8);
          v10 = v16;
        }
        v17 = v8;
        operator delete(v10);
      }
      if (v14 != &v15)
        free(v14);
    }
  }
  else
  {
    a1[2] = v2 + 1;
    *a2 = *v2;
    return 1;
  }
  return v3;
}

void `anonymous namespace'::EncodingReader::emitError<char const(&)[46],llvm::StringRef &,char const(&)[2]>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *__src;
  unsigned int v30;
  int v31;
  _BYTE v32[96];
  void *v33[2];
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  mlir::emitError(a2, (uint64_t)&v26);
  v5 = v26;
  if (v26)
  {
    mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)&v27, "unexpected trailing bytes in resource entry '", a3, "'");
    v5 = v26;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v37)
  {
    *(_QWORD *)(a1 + 8) = v27;
    v6 = v30;
    *(_DWORD *)(a1 + 16) = v28;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (!(_DWORD)v6 || &v26 == (uint64_t *)a1)
    {
      v8 = 1;
      goto LABEL_16;
    }
    if (__src != v32)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v7 = v31;
      *(_DWORD *)(a1 + 32) = v6;
      *(_DWORD *)(a1 + 36) = v7;
      __src = v32;
      v31 = 0;
      v8 = 1;
LABEL_15:
      v30 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v33;
      *(_QWORD *)(a1 + 152) = v34;
      v33[0] = 0;
      v33[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 176) = v36;
      v34 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v36 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v8)
      {
        v10 = (_QWORD **)__p[0];
        if (__p[0])
        {
          v11 = (_QWORD **)__p[1];
          v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
            while (v11 != v10);
            v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
        v13 = v33[0];
        if (v33[0])
        {
          v14 = v33[1];
          v15 = v33[0];
          if (v33[1] != v33[0])
          {
            do
            {
              v17 = (void *)*--v14;
              v16 = v17;
              *v14 = 0;
              if (v17)
                operator delete[](v16);
            }
            while (v14 != v13);
            v15 = v33[0];
          }
          v33[1] = v13;
          operator delete(v15);
        }
        if (__src != v32)
          free(__src);
        v37 = 0;
      }
      goto LABEL_33;
    }
    if (v6 < 5)
    {
      v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v6, 24);
      v9 = v30;
      if (!v30)
        goto LABEL_14;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v9);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v6;
    v8 = v37;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v26);
  if (v26)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
  if (v37)
  {
    v18 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v19 = (_QWORD **)__p[1];
      v20 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p[0];
      }
      __p[1] = v18;
      operator delete(v20);
    }
    v21 = v33[0];
    if (v33[0])
    {
      v22 = v33[1];
      v23 = v33[0];
      if (v33[1] != v33[0])
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v33[0];
      }
      v33[1] = v21;
      operator delete(v23);
    }
    if (__src != v32)
      free(__src);
  }
}

void `anonymous namespace'::ParsedResourceEntry::emitError(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, uint64_t a2@<X8>)
{
  mlir::emitError(*(_QWORD *)(*((_QWORD *)this + 4) + 24), a2);
}

double `anonymous namespace'::ParsedResourceEntry::parseAsString@<D0>(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;
  const void *v7;
  size_t v8;
  __int128 *p_dst;
  __int128 *p_src;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  __int128 __src;
  uint64_t v36;
  __int16 v37;
  __int128 __dst;
  unint64_t v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE v43[96];
  void *v44;
  _QWORD *v45;
  void *__p;
  _QWORD **v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 6) == 2)
  {
    __src = 0uLL;
    v4 = (uint64_t *)*((_QWORD *)this + 4);
    v5 = *((_QWORD *)this + 5);
    *(_QWORD *)&__dst = 0;
    {
      v7 = (const void *)__src;
      if (!(_QWORD)__src)
      {
        __dst = 0uLL;
        v39 = 0;
LABEL_41:
        *(_QWORD *)&v6 = __dst;
        *(_OWORD *)a2 = __dst;
        *(_QWORD *)(a2 + 16) = v39;
        *(_BYTE *)(a2 + 24) = 1;
        return *(double *)&v6;
      }
      v8 = *((_QWORD *)&__src + 1);
      if (*((_QWORD *)&__src + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        abort();
      if (*((_QWORD *)&__src + 1) >= 0x17uLL)
      {
        v28 = (*((_QWORD *)&__src + 1) & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*((_QWORD *)&__src + 1) | 7) != 0x17)
          v28 = *((_QWORD *)&__src + 1) | 7;
        v29 = v28 + 1;
        p_dst = (__int128 *)operator new(v28 + 1);
        *((_QWORD *)&__dst + 1) = v8;
        v39 = v29 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v39) = BYTE8(__src);
        p_dst = &__dst;
        if (!*((_QWORD *)&__src + 1))
          goto LABEL_40;
      }
      memmove(p_dst, v7, v8);
LABEL_40:
      *((_BYTE *)p_dst + v8) = 0;
      goto LABEL_41;
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    mlir::emitError(*(_QWORD *)(*((_QWORD *)this + 4) + 24), (uint64_t)&__dst);
    if ((_QWORD)__dst)
    {
      LODWORD(__src) = 3;
      *((_QWORD *)&__src + 1) = "expected a string resource entry, but found a ";
      v36 = 46;
      p_src = &__src;
      v11 = (char *)v40;
      if (v41 >= v42)
      {
        v30 = v41 + 1;
        if (v40 <= &__src && (char *)v40 + 24 * v41 > (char *)&__src)
        {
          v32 = (char *)&__src - (_BYTE *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          v11 = (char *)v40;
          p_src = (__int128 *)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          p_src = &__src;
          v11 = (char *)v40;
        }
      }
      v12 = &v11[24 * v41];
      v13 = *p_src;
      *((_QWORD *)v12 + 2) = *((_QWORD *)p_src + 2);
      *(_OWORD *)v12 = v13;
      ++v41;
    }
    v14 = mlir::toString(*((_DWORD *)this + 6));
    if ((_QWORD)__dst
      && (v37 = 261,
          *(_QWORD *)&__src = v14,
          *((_QWORD *)&__src + 1) = v15,
          mlir::Diagnostic::operator<<((uint64_t)&__dst + 8, (const void ***)&__src),
          (_QWORD)__dst))
    {
      LODWORD(__src) = 3;
      *((_QWORD *)&__src + 1) = " entry instead";
      v36 = 14;
      v16 = &__src;
      v17 = (char *)v40;
      if (v41 >= v42)
      {
        v31 = v41 + 1;
        if (v40 <= &__src && (char *)v40 + 24 * v41 > (char *)&__src)
        {
          v33 = (char *)&__src - (_BYTE *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v31, 24);
          v17 = (char *)v40;
          v16 = (__int128 *)((char *)v40 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v31, 24);
          v16 = &__src;
          v17 = (char *)v40;
        }
      }
      v18 = &v17[24 * v41];
      v6 = *v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v6;
      ++v41;
      v19 = __dst;
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      if (v19)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__dst);
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
    }
    if (v48)
    {
      v20 = (_QWORD **)__p;
      if (__p)
      {
        v21 = v47;
        v22 = __p;
        if (v47 != __p)
        {
          do
            v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          v22 = __p;
        }
        v47 = v20;
        operator delete(v22);
      }
      v23 = v44;
      if (v44)
      {
        v24 = v45;
        v25 = v44;
        if (v45 != v44)
        {
          do
          {
            v27 = (void *)*--v24;
            v26 = v27;
            *v24 = 0;
            if (v27)
              operator delete[](v26);
          }
          while (v24 != v23);
          v25 = v44;
        }
        v45 = v23;
        operator delete(v25);
      }
      if (v40 != v43)
        free(v40);
    }
  }
  return *(double *)&v6;
}

void `anonymous namespace'::ParsedResourceEntry::parseAsBlob(uint64_t a1@<X0>, void (*a2)(void **__return_ptr, uint64_t, void *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  __n128 v9;
  char *v10;
  unint64_t v11;
  __n128 *v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  void *v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  _anonymous_namespace_::EncodingReader *v27;
  int8x8_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  unint64_t v39;
  __n128 *v40;
  char v41;
  __n128 *v42;
  char v43;
  __n128 *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unsigned int v49[2];
  void *__src;
  void *v51;
  __n128 v52;
  unint64_t v53;
  void *__dst[2];
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  char *v58;
  char v59;
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  __n128 v65;
  uint64_t v66;
  unint64_t v67;
  __int16 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 24))
  {
    mlir::emitError(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), (uint64_t)__dst);
    if (__dst[0])
    {
      v65.n128_u32[0] = 3;
      v65.n128_u64[1] = (unint64_t)"expected a blob resource entry, but found a ";
      v66 = 44;
      v6 = &v65;
      v7 = v56.n128_u64[0];
      if (v56.n128_u32[2] >= v56.n128_u32[3])
      {
        v45 = v56.n128_u32[2] + 1;
        if (v56.n128_u64[0] <= (unint64_t)&v65
          && v56.n128_u64[0] + 24 * (unint64_t)v56.n128_u32[2] > (unint64_t)&v65)
        {
          v47 = (char *)&v65 - v56.n128_u64[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, &v57, v45, 24);
          v7 = v56.n128_u64[0];
          v6 = (__n128 *)&v47[v56.n128_u64[0]];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, &v57, v45, 24);
          v6 = &v65;
          v7 = v56.n128_u64[0];
        }
      }
      v8 = v7 + 24 * v56.n128_u32[2];
      v9 = *v6;
      *(_QWORD *)(v8 + 16) = v6[1].n128_u64[0];
      *(__n128 *)v8 = v9;
      ++v56.n128_u32[2];
    }
    v10 = mlir::toString(*(_DWORD *)(a1 + 24));
    if (__dst[0]
      && (v68 = 261,
          v65.n128_u64[0] = (unint64_t)v10,
          v65.n128_u64[1] = v11,
          mlir::Diagnostic::operator<<((uint64_t)&__dst[1], (const void ***)&v65),
          __dst[0]))
    {
      v65.n128_u32[0] = 3;
      v65.n128_u64[1] = (unint64_t)" entry instead";
      v66 = 14;
      v12 = &v65;
      v13 = v56.n128_u64[0];
      if (v56.n128_u32[2] >= v56.n128_u32[3])
      {
        v46 = v56.n128_u32[2] + 1;
        if (v56.n128_u64[0] <= (unint64_t)&v65
          && v56.n128_u64[0] + 24 * (unint64_t)v56.n128_u32[2] > (unint64_t)&v65)
        {
          v48 = (char *)&v65 - v56.n128_u64[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, &v57, v46, 24);
          v13 = v56.n128_u64[0];
          v12 = (__n128 *)&v48[v56.n128_u64[0]];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, &v57, v46, 24);
          v12 = &v65;
          v13 = v56.n128_u64[0];
        }
      }
      v14 = v13 + 24 * v56.n128_u32[2];
      v15 = *v12;
      *(_QWORD *)(v14 + 16) = v12[1].n128_u64[0];
      *(__n128 *)v14 = v15;
      ++v56.n128_u32[2];
      v16 = __dst[0];
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 64) = 0;
      if (v16)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 64) = 0;
    }
    if (v64)
    {
      v17 = (_QWORD **)__p;
      if (__p)
      {
        v18 = v63;
        v19 = __p;
        if (v63 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v63 = v17;
        operator delete(v19);
      }
      v20 = v60;
      if (v60)
      {
        v21 = v61;
        v22 = v60;
        if (v61 != v60)
        {
          do
          {
            v24 = (void *)*--v21;
            v23 = v24;
            *v21 = 0;
            if (v24)
              operator delete[](v23);
          }
          while (v21 != v20);
          v22 = v60;
        }
        v61 = v20;
        operator delete(v22);
      }
      if ((uint64_t *)v56.n128_u64[0] != &v57)
        free((void *)v56.n128_u64[0]);
    }
    return;
  }
  __src = 0;
  v51 = 0;
  *(_QWORD *)v49 = 0;
  v27 = *(_anonymous_namespace_::EncodingReader **)(a1 + 32);
    || (__dst[0] = 0,
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 64) = 0;
    return;
  }
  v30 = *(unint64_t **)(a1 + 48);
  v31 = *v30;
  if (*v30)
  {
    v33 = __src;
    v32 = v51;
    v34 = v30[1];
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v52.n128_u64[0] = v31;
    v52.n128_u64[1] = v34;
        + 6;
        + 6;
        + 6;
       + 6 <= 7)
    {
      __dst[0] = v33;
      __dst[1] = v32;
      v55 = v29;
          + 6;
    }
    else
    {
                                                 + 8))(&v65, &v52);
      v37 = v67;
      v53 = 0;
      __dst[0] = v33;
      __dst[1] = v32;
      v55 = v29;
      v58 = (char *)v67;
      if (v67 <= 7)
      {
        v41 = 0;
        v59 = 0;
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(_QWORD *)(a4 + 16) = v55;
        *(_QWORD *)(a4 + 48) = v37;
        goto LABEL_55;
      }
      if ((~(_BYTE)v67 & 6) != 0)
      {
        v56 = v65;
        v57 = v66;
        v59 = 0;
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(_QWORD *)(a4 + 16) = v55;
        *(_QWORD *)(a4 + 48) = v37;
LABEL_50:
        v42 = (__n128 *)(a4 + 24);
        if ((v37 & 2) != 0 && (v37 & 4) != 0)
        {
          (*(void (**)(__n128 *, __n128 *))((v37 & 0xFFFFFFFFFFFFFFF8) + 8))(v42, &v56);
          v41 = v59;
        }
        else
        {
          v41 = 0;
          *v42 = v56;
          *(_QWORD *)(a4 + 40) = v57;
        }
        v58 = 0;
LABEL_55:
        *(_BYTE *)(a4 + 56) = v41;
        *(_BYTE *)(a4 + 64) = 1;
        v43 = v53;
        if (v53 >= 8)
        {
          if ((v53 & 4) != 0)
          {
            if ((v53 & 2) != 0)
              v44 = &v52;
            else
              v44 = (__n128 *)v52.n128_u64[0];
            (*(void (**)(__n128 *))((v53 & 0xFFFFFFFFFFFFFFF8) + 16))(v44);
          }
          if ((v43 & 2) == 0)
            llvm::deallocate_buffer((llvm *)v52.n128_u64[0], (void *)v52.n128_u64[1]);
        }
        return;
      }
      (*(void (**)(__n128 *, __n128 *))((v67 & 0xFFFFFFFFFFFFFFF8) + 8))(&v56, &v65);
      v37 = (unint64_t)v58;
    }
    v41 = 0;
    v59 = 0;
    *(_OWORD *)a4 = *(_OWORD *)__dst;
    *(_QWORD *)(a4 + 16) = v55;
    *(_QWORD *)(a4 + 48) = v37;
    if (v37 < 8)
      goto LABEL_55;
    goto LABEL_50;
  }
  v38 = (size_t)v51;
  a2(__dst, a3, v51, v29);
  memcpy(__dst[0], __src, v38);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  v39 = (unint64_t)v58;
  *(_QWORD *)(a4 + 16) = v55;
  *(_QWORD *)(a4 + 48) = v39;
  if (v39 >= 8)
  {
    v40 = (__n128 *)(a4 + 24);
    if ((v39 & 2) != 0 && (v39 & 4) != 0)
    {
      (*(void (**)(__n128 *, __n128 *))((v39 & 0xFFFFFFFFFFFFFFF8) + 8))(v40, &v56);
    }
    else
    {
      *v40 = v56;
      *(_QWORD *)(a4 + 40) = v57;
    }
  }
  *(_BYTE *)(a4 + 56) = v59;
  *(_BYTE *)(a4 + 64) = 1;
}

__n128 llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::MoveImpl<`anonymous namespace'::ParsedResourceEntry::parseAsBlob(llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>)::{lambda(void *,unsigned long,unsigned long)#1}>(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::DestroyImpl<`anonymous namespace'::ParsedResourceEntry::parseAsBlob(llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>)::{lambda(void *,unsigned long,unsigned long)#1}>(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t *llvm::StringMap<std::string,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 33), (std::align_val_t)8uLL);
    v10 = buffer + 4;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 33), (std::align_val_t)8uLL);
    v10 = buffer + 4;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *buffer = a3;
  buffer[1] = 0;
  buffer[2] = 0;
  buffer[3] = 0;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

void std::vector<mlir::Value>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

uint64_t mlir::BytecodeReader::Impl::parseAttribute<mlir::LocationAttr>(uint64_t a1, _anonymous_namespace_::EncodingReader *this, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  void *__p;
  _QWORD **v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v28 = 0;
    return 0;
  v27 = v6;
  if (!v6)
    return 0;
  v7 = v6;
  if (mlir::LocationAttr::classof(v6))
    v8 = v7;
  else
    v8 = 0;
  *a3 = v8;
  if (v8)
    return 1;
  v28 = (unint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::LocationAttr]";
  v29 = 68;
  v11 = llvm::StringRef::find((uint64_t *)&v28, "DesiredTypeName = ", 0x12uLL, 0);
  if (v29 >= v11)
    v12 = v11;
  else
    v12 = v29;
  v13 = v28 + v12;
  v14 = v29 - v12;
  if (v29 - v12 >= 0x12)
    v15 = 18;
  else
    v15 = v29 - v12;
  v16 = v13 + v15;
  v17 = v14 - v15;
  if (v17 >= v17 - 1)
    --v17;
  v26[0] = v16;
  v26[1] = v17;
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v28);
  if (v28)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  if (v36)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v35;
      v20 = __p;
      if (v35 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v35 = v18;
      operator delete(v20);
    }
    v21 = v32;
    if (v32)
    {
      v22 = v33;
      v23 = v32;
      if (v33 != v32)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v32;
      }
      v33 = v21;
      operator delete(v23);
    }
    if (v30 != &v31)
      free(v30);
  }
  return v9;
}

void mlir::BytecodeReader::Impl::parseUseListOrderForRange(mlir::BytecodeReader::Impl *this, _anonymous_namespace_::EncodingReader *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  char *v24;
  void *v25;
  BOOL v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  llvm *v38;
  uint64_t v39;
  unsigned int v40;
  void *__dst;
  unint64_t v42;
  _BYTE v43[24];
  void *__src;
  uint64_t v45;
  _QWORD v46[4];

  v3 = a3;
  v46[2] = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v5 = 1;
  v37 = 1;
  if (a3 < 2)
    goto LABEL_4;
  {
    v5 = v37;
    if (v37)
    {
LABEL_4:
      v6 = 0;
      while (1)
      {
        v36 = 0;
          goto LABEL_54;
        v35 = 0;
          goto LABEL_54;
        v7 = v35;
        v8 = v35 >> 1;
        v35 >>= 1;
        __src = v46;
        v45 = 0x400000000;
        if (v7 <= 1)
        {
          v34 = v36;
          __dst = v43;
          v42 = 0x400000000;
          goto LABEL_20;
        }
        v9 = v5;
        v10 = v3;
        v11 = v8 <= 1 ? 1 : v8;
        __dst = 0;
          break;
        v26 = 1;
LABEL_44:
        *(_BYTE *)this = 0;
        *((_BYTE *)this + 24) = 0;
        v3 = v10;
        v5 = v9;
        v25 = __src;
        if (__src == v46)
          goto LABEL_37;
LABEL_36:
        free(v25);
LABEL_37:
        if (v26)
          goto LABEL_55;
        if (++v6 == v5)
          goto LABEL_62;
      }
      v12 = 0;
      v13 = v11 - 1;
      while (1)
      {
        v14 = (int)__dst;
        v15 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v46, v45 + 1, 4);
          v15 = v45;
        }
        *((_DWORD *)__src + v15) = v14;
        v16 = (v45 + 1);
        LODWORD(v45) = v45 + 1;
        if (v13 == v12)
          break;
        __dst = 0;
        ++v12;
        {
          v26 = v12 < v8;
          goto LABEL_44;
        }
      }
      v34 = v36;
      __dst = v43;
      v42 = 0x400000000;
      v3 = v10;
      v5 = v9;
      if ((_DWORD)v16)
      {
        if (__src == v46)
        {
          v27 = v16;
          if (v16 < 5
            || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v43, v16, 4), (v27 = v45) != 0))
          {
            memcpy(__dst, __src, 4 * v27);
          }
          LODWORD(v42) = v16;
        }
        else
        {
          __dst = __src;
          v42 = __PAIR64__(HIDWORD(v45), v16);
          __src = v46;
          HIDWORD(v45) = 0;
        }
        LODWORD(v45) = 0;
      }
LABEL_20:
      v43[16] = v7 & 1;
      if (v40)
      {
        v17 = (37 * v34) & (v40 - 1);
        v18 = (char *)v38 + 48 * v17;
        v19 = *(_DWORD *)v18;
        if (v34 == *(_DWORD *)v18)
          goto LABEL_33;
        v20 = 0;
        v21 = 1;
        while (v19 != -1)
        {
          if (v20)
            v22 = 0;
          else
            v22 = v19 == -2;
          if (v22)
            v20 = v18;
          v23 = v17 + v21++;
          v17 = v23 & (v40 - 1);
          v18 = (char *)v38 + 48 * v17;
          v19 = *(_DWORD *)v18;
          if (v34 == *(_DWORD *)v18)
            goto LABEL_33;
        }
        if (v20)
          v24 = v20;
        else
          v24 = v18;
      }
      else
      {
        v24 = 0;
      }
      llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>((uint64_t)&v38, v24, &v34, (uint64_t)&__dst);
LABEL_33:
      if (__dst != v43)
        free(__dst);
      v26 = 0;
      v25 = __src;
      if (__src == v46)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_62:
    *(_QWORD *)this = v38;
    *((_QWORD *)this + 1) = v39;
    v38 = 0;
    v39 = 0;
    *((_DWORD *)this + 4) = v40;
    v40 = 0;
    *((_BYTE *)this + 24) = 1;
    v28 = v38;
  }
  else
  {
LABEL_54:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 24) = 0;
LABEL_55:
    v28 = v38;
    if (v40)
    {
      v29 = 48 * v40;
      v30 = (char *)v38 + 24;
      do
      {
        if (*((_DWORD *)v30 - 6) <= 0xFFFFFFFD)
        {
          v31 = (char *)*((_QWORD *)v30 - 2);
          if (v30 != v31)
            free(v31);
        }
        v30 += 48;
        v29 -= 48;
      }
      while (v29);
      v28 = v38;
      v32 = 48 * v40;
LABEL_64:
      llvm::deallocate_buffer(v28, (void *)v32);
    }
  }
  v32 = 0;
  goto LABEL_64;
}

void llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  mlir::Region *v22;
  void *v23;
  int v24;
  unint64_t v25;

  if (*(unsigned int *)(a1 + 12) >= a2)
    return;
  v25 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v25);
  v5 = *(char **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v8 = 8 * v6;
    if (v7 >= 0xB)
    {
      v11 = v5 >= &v4[v8] || v4 >= &v5[v8];
      v9 = v4;
      v10 = *(char **)a1;
      if (v11)
      {
        v12 = v7 + 1;
        v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
        v9 = &v4[v13];
        v10 = &v5[v13];
        v14 = (__int128 *)(v5 + 16);
        v15 = v4 + 16;
        v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v17 = *(v14 - 1);
          v18 = *v14;
          *(v14 - 1) = 0uLL;
          *v14 = 0uLL;
          *(v15 - 1) = v17;
          *v15 = v18;
          v14 += 2;
          v15 += 2;
          v16 -= 4;
        }
        while (v16);
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_15:
          v21 = *(_QWORD *)a1 - 8;
          do
          {
            v22 = *(mlir::Region **)(v21 + v8);
            *(_QWORD *)(v21 + v8) = 0;
            if (v22)
            {
              mlir::Region::~Region(v22);
              operator delete(v23);
            }
            v8 -= 8;
          }
          while (v8);
          v5 = *(char **)a1;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v9 = v4;
      v10 = *(char **)a1;
    }
    v19 = &v5[8 * v6];
    do
    {
      v20 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      v10 += 8;
      *(_QWORD *)v9 = v20;
      v9 += 8;
    }
    while (v10 != v19);
    goto LABEL_15;
  }
LABEL_20:
  v24 = v25;
  if (v5 != v3)
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v24;
}

uint64_t mlir::BytecodeReader::Impl::defineValues(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  unint64_t v8;
  _QWORD **v9;
  int v10;
  _BYTE *v11;
  void *v12;
  int v13;
  uint64_t v14;
  mlir::Block *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD **v21;
  uint64_t *v22;
  uint64_t DefiningOp;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  char *v47;
  unsigned int v48;
  _QWORD **v49;
  uint64_t v50;
  int v51;
  void *__dst;
  uint64_t v53;
  _BYTE v54[49];
  void *v55[2];
  uint64_t v56;
  void *v57[2];
  uint64_t v58;
  char v59;
  _QWORD v60[2];
  _QWORD **v61;
  uint64_t v62;
  int v63;
  void *__src;
  uint64_t v65;
  _BYTE v66[96];
  __int128 v67;
  uint64_t v68;
  __int128 __p;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v60[0] = a3;
  v60[1] = a4;
  v4 = a1[86];
  v5 = *(_QWORD *)(v4 - 32) + 4 * *(unsigned int *)(v4 - 24);
  v7 = *(_DWORD *)(v5 - 4);
  v6 = (unsigned int *)(v5 - 4);
  v48 = v7 + a4;
  v8 = (uint64_t)(*(_QWORD *)(v4 - 48) - *(_QWORD *)(v4 - 56)) >> 3;
  if (v8 < (v7 + a4))
  {
    v47 = (char *)(v8 - 1);
    mlir::emitError(a2, (uint64_t)&v61);
    v9 = v61;
    if (v61)
    {
      mlir::Diagnostic::append<char const(&)[81],unsigned int &,char const(&)[3],unsigned int &,char const(&)[30],unsigned long>((uint64_t)&v62, "value index range was outside of the expected range for the parent region, got [", v6, ", ", &v48, "), but the maximum index was ", &v47);
      v9 = v61;
    }
    v49 = v9;
    LOBYTE(v50) = 0;
    v59 = 0;
    if (!v71)
      goto LABEL_34;
    v50 = v62;
    v10 = v65;
    v51 = v63;
    v11 = v54;
    __dst = v54;
    v53 = 0x400000000;
    if (!(_DWORD)v65)
    {
      v13 = 1;
      goto LABEL_30;
    }
    v12 = __src;
    if (__src != v66)
    {
      __dst = __src;
      v53 = v65;
      __src = v66;
      HIDWORD(v65) = 0;
      v13 = 1;
LABEL_29:
      LODWORD(v65) = 0;
LABEL_30:
      *(_OWORD *)v55 = v67;
      v56 = v68;
      v67 = 0uLL;
      *(_OWORD *)v57 = __p;
      v58 = v70;
      v68 = 0;
      __p = 0uLL;
      v70 = 0;
      v59 = 1;
      if (v13)
      {
        if (__src != v66)
          free(__src);
        v71 = 0;
      }
LABEL_34:
      mlir::InFlightDiagnostic::abandon(&v61);
      if (v61)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v61);
      if (v71)
      {
        v30 = (_QWORD **)__p;
        if ((_QWORD)__p)
        {
          v31 = (_QWORD **)*((_QWORD *)&__p + 1);
          v32 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
              v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            v32 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v30;
          operator delete(v32);
        }
        v33 = (_QWORD *)v67;
        if ((_QWORD)v67)
        {
          v34 = (_QWORD *)*((_QWORD *)&v67 + 1);
          v35 = (void *)v67;
          if (*((_QWORD *)&v67 + 1) != (_QWORD)v67)
          {
            do
            {
              v37 = (void *)*--v34;
              v36 = v37;
              *v34 = 0;
              if (v37)
                operator delete[](v36);
            }
            while (v34 != v33);
            v35 = (void *)v67;
          }
          *((_QWORD *)&v67 + 1) = v33;
          operator delete(v35);
        }
        if (__src != v66)
          free(__src);
      }
      v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v49);
      if (v49)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v49);
      if (v59)
      {
        v38 = (_QWORD **)v57[0];
        if (v57[0])
        {
          v39 = (_QWORD **)v57[1];
          v40 = v57[0];
          if (v57[1] != v57[0])
          {
            do
              v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
            while (v39 != v38);
            v40 = v57[0];
          }
          v57[1] = v38;
          operator delete(v40);
        }
        v41 = v55[0];
        if (v55[0])
        {
          v42 = v55[1];
          v43 = v55[0];
          if (v55[1] != v55[0])
          {
            do
            {
              v45 = (void *)*--v42;
              v44 = v45;
              *v42 = 0;
              if (v45)
                operator delete[](v44);
            }
            while (v42 != v41);
            v43 = v55[0];
          }
          v55[1] = v41;
          operator delete(v43);
        }
        if (__dst != v54)
          free(__dst);
      }
      return v28;
    }
    if (v65 < 5)
    {
      v29 = v65;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v54, v65, 24);
      v29 = v65;
      if (!(_DWORD)v65)
      {
LABEL_28:
        LODWORD(v53) = v10;
        v13 = v71;
        goto LABEL_29;
      }
      v12 = __src;
      v11 = __dst;
    }
    memcpy(v11, v12, 24 * v29);
    goto LABEL_28;
  }
  if ((_DWORD)a4)
  {
    v14 = 0;
    v15 = (mlir::Block *)(a1 + 100);
    v16 = a1 + 104;
    v17 = a4;
    do
    {
      v19 = mlir::ValueRange::dereference_iterator(v60, v14);
      v18 = *v6;
      v20 = *(_QWORD *)(v4 - 56);
      v21 = *(_QWORD ***)(v20 + 8 * v18);
      *(_QWORD *)(v20 + 8 * v18) = v19;
      v61 = v21;
      if (v21)
      {
        v22 = (uint64_t *)v19;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v61);
        v24 = v61;
        while (1)
        {
          v25 = *v24;
          if (!*v24)
            break;
          v26 = (uint64_t *)v25[1];
          if (v26)
          {
            *v26 = *v25;
            if (*v25)
              *(_QWORD *)(*v25 + 8) = v25[1];
          }
          v25[3] = (uint64_t)v22;
          v25[1] = (uint64_t)v22;
          v27 = *v22;
          *v25 = *v22;
          if (v27)
            *(_QWORD *)(v27 + 8) = v25;
          *v22 = (uint64_t)v25;
        }
        mlir::Operation::moveBefore(DefiningOp, v15, v16);
        LODWORD(v18) = *v6;
      }
      ++v14;
      *v6 = v18 + 1;
    }
    while (v14 != v17);
  }
  return 1;
}

void `anonymous namespace'::EncodingReader::emitError<char const(&)[29],llvm::StringRef,char const(&)[12],mlir::Attribute &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *__src;
  unsigned int v32;
  int v33;
  _BYTE v34[96];
  void *v35[2];
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  mlir::emitError(a2, (uint64_t)&v28);
  v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[29],llvm::StringRef,char const(&)[12],mlir::Attribute &>((uint64_t)&v29, "expected attribute of type: ", a3, ", but got: ", a4);
    v7 = v28;
  }
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v39)
  {
    *(_QWORD *)(a1 + 8) = v29;
    v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(_QWORD *)(a1 + 24) = a1 + 40;
    *(_QWORD *)(a1 + 32) = 0x400000000;
    if (!(_DWORD)v8 || &v28 == (uint64_t *)a1)
    {
      v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(_QWORD *)(a1 + 24) = __src;
      v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      __src = v34;
      v33 = 0;
      v10 = 1;
LABEL_15:
      v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(_QWORD *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 176) = v38;
      v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v38 = 0;
      *(_BYTE *)(a1 + 184) = 1;
      if (v10)
      {
        v12 = (_QWORD **)__p[0];
        if (__p[0])
        {
          v13 = (_QWORD **)__p[1];
          v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        v15 = v35[0];
        if (v35[0])
        {
          v16 = v35[1];
          v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              v19 = (void *)*--v16;
              v18 = v19;
              *v16 = 0;
              if (v19)
                operator delete[](v18);
            }
            while (v16 != v15);
            v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34)
          free(__src);
        v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      v11 = v32;
      if (!v32)
        goto LABEL_14;
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  if (v39)
  {
    v20 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v21 = (_QWORD **)__p[1];
      v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    v23 = v35[0];
    if (v35[0])
    {
      v24 = v35[1];
      v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          *v24 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v24 != v23);
        v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34)
      free(__src);
  }
}

uint64_t mlir::Diagnostic::append<char const(&)[29],llvm::StringRef,char const(&)[12],mlir::Attribute &>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t *a5)
{
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const void ***v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  unint64_t v19;
  BOOL v20;
  char *v21;
  const void **v22;
  char *v23;
  size_t v24;
  __int16 v25;

  v10 = strlen(__s);
  v11 = a1 + 16;
  v12 = *(_QWORD *)(a1 + 16);
  LODWORD(v22) = 3;
  v23 = __s;
  v24 = v10;
  v13 = *(unsigned int *)(a1 + 24);
  v14 = &v22;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    v19 = v13 + 1;
    v20 = v12 + 24 * v13 > (unint64_t)&v22;
    if (v12 <= (unint64_t)&v22 && v20)
    {
      v21 = (char *)&v22 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = (const void ***)&v21[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = &v22;
    }
  }
  v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = v14[2];
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  v25 = 261;
  v17 = *(char **)(a3 + 8);
  v22 = *(const void ***)a3;
  v23 = v17;
  mlir::Diagnostic::operator<<(a1, &v22);
  return mlir::Diagnostic::append<char const(&)[12],mlir::Attribute &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[12],mlir::Attribute &>(uint64_t a1, char *__s, uint64_t *a3)
{
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  BOOL v22;
  char *v23;
  char *v24;
  int v25;
  char *v26;
  size_t v27;

  v6 = strlen(__s);
  v7 = *(_QWORD *)(a1 + 16);
  v25 = 3;
  v26 = __s;
  v27 = v6;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v25;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v19 = v8 + 1;
    v20 = v7 + 24 * v8 > (unint64_t)&v25;
    if (v7 <= (unint64_t)&v25 && v20)
    {
      v23 = (char *)&v25 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v23[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = &v25;
    }
  }
  v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  v12 = *a3;
  v13 = &v25;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v25, v12);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 16);
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    v21 = v14 + 1;
    v22 = v15 + 24 * v14 > (unint64_t)&v25;
    if (v15 <= (unint64_t)&v25 && v22)
    {
      v24 = (char *)&v25 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v13 = (int *)&v24[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v13 = &v25;
    }
  }
  v16 = v15 + 24 * *(unsigned int *)(a1 + 24);
  v17 = *(_OWORD *)v13;
  *(_QWORD *)(v16 + 16) = *((_QWORD *)v13 + 2);
  *(_OWORD *)v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

void *mlir::detail::InterfaceMap::lookup<mlir::BytecodeOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  void **p_vtable;
  unint64_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  void **v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v23 = 75;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = p_vtable[482];
  v5 = *(void ***)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = (unint64_t *)&v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = (void **)(v8 + 2);
    v3 += ~(v3 >> 1);
    if (v10 < (unint64_t)v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (void **)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

char *llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>(uint64_t a1, char *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  _DWORD *buffer;
  unsigned int v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  char *v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    v11 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
      goto LABEL_3;
    v11 = *(_DWORD *)(a1 + 16);
  }
  v12 = *(int **)a1;
  v13 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
  v14 = v13 | (v13 >> 2) | ((v13 | (v13 >> 2)) >> 4);
  v15 = ((v14 | (v14 >> 8)) >> 16) | v14 | (v14 >> 8);
  if ((v15 + 1) > 0x40)
    v16 = v15 + 1;
  else
    v16 = 64;
  *(_DWORD *)(a1 + 16) = v16;
  buffer = llvm::allocate_buffer(48 * v16, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v12)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(a1, v12, &v12[12 * v8]);
    llvm::deallocate_buffer((llvm *)v12, (void *)(48 * v8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(_DWORD *)(a1 + 16);
  if (v18)
  {
    v19 = 48 * v18 - 48;
    v20 = buffer;
    if (v19 < 0x30)
      goto LABEL_37;
    v21 = v19 / 0x30 + 1;
    v20 = &buffer[12 * (v21 & 0xFFFFFFFFFFFFFFELL)];
    v22 = v21 & 0xFFFFFFFFFFFFFFELL;
    v23 = buffer;
    do
    {
      *v23 = -1;
      v23[12] = -1;
      v23 += 24;
      v22 -= 2;
    }
    while (v22);
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_37:
      do
      {
        *v20 = -1;
        v20 += 12;
      }
      while (v20 != &buffer[12 * v18]);
    }
    v24 = v18 - 1;
    v25 = (37 * *a3) & v24;
    a2 = (char *)&buffer[12 * v25];
    v26 = *(_DWORD *)a2;
    if (*a3 != *(_DWORD *)a2)
    {
      v27 = 0;
      v28 = 1;
      while (v26 != -1)
      {
        if (v27)
          v29 = 0;
        else
          v29 = v26 == -2;
        if (v29)
          v27 = a2;
        v30 = v25 + v28++;
        v25 = v30 & v24;
        a2 = (char *)&buffer[12 * v25];
        v26 = *(_DWORD *)a2;
        if (*a3 == *(_DWORD *)a2)
          goto LABEL_3;
      }
      if (v27)
        a2 = v27;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a2 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = *a3;
  *((_QWORD *)a2 + 1) = a2 + 24;
  *((_QWORD *)a2 + 2) = 0x400000000;
  if (*(_DWORD *)(a4 + 8))
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(a2 + 8), a4);
  a2[40] = *(_BYTE *)(a4 + 32);
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  unsigned int v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  int *v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 48 * v6 - 48;
    if (v8 < 0x30)
    {
      v9 = *(_DWORD **)a1;
LABEL_7:
      v13 = &v7[12 * v6];
      do
      {
        *v9 = -1;
        v9 += 12;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x30 + 1;
    v9 = &v7[12 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_DWORD **)a1;
    do
    {
      *v12 = -1;
      v12[12] = -1;
      v12 += 24;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        v15 = *(_DWORD *)(a1 + 16);
        if (v15)
        {
          v16 = v15 - 1;
          v17 = v16 & (37 * v14);
          v18 = *(_QWORD *)a1 + 48 * v17;
          v19 = *(_DWORD *)v18;
          if (v14 != *(_DWORD *)v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v16;
              v18 = *(_QWORD *)a1 + 48 * v17;
              v19 = *(_DWORD *)v18;
              if (v14 == *(_DWORD *)v18)
                goto LABEL_25;
            }
            if (v20)
              v18 = v20;
          }
        }
        else
        {
          v18 = 0;
        }
LABEL_25:
        *(_DWORD *)v18 = v14;
        *(_QWORD *)(v18 + 8) = v18 + 24;
        *(_QWORD *)(v18 + 16) = 0x400000000;
        if (v4[4])
          llvm::SmallVectorImpl<unsigned int>::operator=(v18 + 8, (uint64_t)(v4 + 2));
        *(_BYTE *)(v18 + 40) = *((_BYTE *)v4 + 40);
        ++*(_DWORD *)(a1 + 8);
        v24 = (int *)*((_QWORD *)v4 + 1);
        if (v24 != v4 + 6)
          free(v24);
      }
      v4 += 12;
    }
    while (v4 != a3);
  }
}

char *llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  mlir::Region *v28;
  void *v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  mlir::Region *v50;
  void *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 <= *(unsigned int *)(a1 + 12))
    return (char *)v3;
  v8 = *(_QWORD *)a1 + 8 * v4;
  if (*(_QWORD *)a1 > a2 || v8 <= a2)
  {
    v54 = 0;
    v10 = (char *)(a1 + 16);
    v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v54);
    v12 = *(char **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v13)
    {
LABEL_22:
      v30 = v54;
      if (v12 != v10)
        free(v12);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v30;
      return (char *)v3;
    }
    v14 = (v13 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v15 = 8 * v13;
    if (v14 >= 0xB)
    {
      if (v12 >= &v11[v15] || (v16 = v11, v17 = *(char **)a1, v11 >= &v12[v15]))
      {
        v18 = v14 + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v16 = &v11[v19];
        v17 = &v12[v19];
        v20 = (__int128 *)(v12 + 16);
        v21 = v11 + 16;
        v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *(v20 - 1);
          v24 = *v20;
          *(v20 - 1) = 0uLL;
          *v20 = 0uLL;
          *(v21 - 1) = v23;
          *v21 = v24;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          v27 = *(_QWORD *)a1 - 8;
          do
          {
            v28 = *(mlir::Region **)(v27 + v15);
            *(_QWORD *)(v27 + v15) = 0;
            if (v28)
            {
              mlir::Region::~Region(v28);
              operator delete(v29);
            }
            v15 -= 8;
          }
          while (v15);
          v12 = *(char **)a1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      v16 = v11;
      v17 = *(char **)a1;
    }
    v25 = &v12[8 * v13];
    do
    {
      v26 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      v17 += 8;
      *(_QWORD *)v16 = v26;
      v16 += 8;
    }
    while (v17 != v25);
    goto LABEL_17;
  }
  v31 = a2 - *(_QWORD *)a1;
  v54 = 0;
  v32 = (char *)(a1 + 16);
  v33 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v54);
  v34 = *(char **)a1;
  v35 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v35)
  {
    v36 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v37 = 8 * v35;
    if (v36 >= 0xB)
    {
      if (v34 >= &v33[v37] || (v38 = v33, v39 = *(char **)a1, v33 >= &v34[v37]))
      {
        v40 = v36 + 1;
        v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        v38 = &v33[v41];
        v39 = &v34[v41];
        v42 = (__int128 *)(v34 + 16);
        v43 = v33 + 16;
        v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = *(v42 - 1);
          v46 = *v42;
          *(v42 - 1) = 0uLL;
          *v42 = 0uLL;
          *(v43 - 1) = v45;
          *v43 = v46;
          v42 += 2;
          v43 += 2;
          v44 -= 4;
        }
        while (v44);
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          v49 = *(_QWORD *)a1 - 8;
          do
          {
            v50 = *(mlir::Region **)(v49 + v37);
            *(_QWORD *)(v49 + v37) = 0;
            if (v50)
            {
              mlir::Region::~Region(v50);
              operator delete(v51);
            }
            v37 -= 8;
          }
          while (v37);
          v34 = *(char **)a1;
          goto LABEL_40;
        }
      }
    }
    else
    {
      v38 = v33;
      v39 = *(char **)a1;
    }
    v47 = &v34[8 * v35];
    do
    {
      v48 = *(_QWORD *)v39;
      *(_QWORD *)v39 = 0;
      v39 += 8;
      *(_QWORD *)v38 = v48;
      v38 += 8;
    }
    while (v39 != v47);
    goto LABEL_35;
  }
LABEL_40:
  v52 = v31 >> 3;
  v53 = v54;
  if (v34 != v32)
    free(v34);
  *(_QWORD *)a1 = v33;
  *(_DWORD *)(a1 + 12) = v53;
  return &v33[8 * v52];
}

uint64_t mlir::Diagnostic::append<char const(&)[81],unsigned int &,char const(&)[3],unsigned int &,char const(&)[30],unsigned long>(uint64_t a1, char *__s, unsigned int *a3, char *a4, unsigned int *a5, char *a6, char **a7)
{
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  BOOL v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  size_t v36;

  v14 = strlen(__s);
  v15 = *(_QWORD *)(a1 + 16);
  v34 = 3;
  v35 = __s;
  v36 = v14;
  v16 = *(unsigned int *)(a1 + 24);
  v17 = &v34;
  if (v16 >= *(_DWORD *)(a1 + 28))
  {
    v28 = v16 + 1;
    v29 = v15 + 24 * v16 > (unint64_t)&v34;
    if (v15 <= (unint64_t)&v34 && v29)
    {
      v32 = (char *)&v34 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v17 = (int *)&v32[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      v15 = *(_QWORD *)(a1 + 16);
      v17 = &v34;
    }
  }
  v18 = v15 + 24 * *(unsigned int *)(a1 + 24);
  v19 = *(_OWORD *)v17;
  *(_QWORD *)(v18 + 16) = *((_QWORD *)v17 + 2);
  *(_OWORD *)v18 = v19;
  v20 = *(_DWORD *)(a1 + 28);
  v21 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v21;
  v22 = (char *)*a3;
  v34 = 5;
  v35 = v22;
  v23 = *(_QWORD *)(a1 + 16);
  v24 = &v34;
  if (v21 >= v20)
  {
    v30 = v21 + 1;
    v31 = v23 + 24 * v21 > (unint64_t)&v34;
    if (v23 <= (unint64_t)&v34 && v31)
    {
      v33 = (char *)&v34 - v23;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v30, 24);
      v23 = *(_QWORD *)(a1 + 16);
      v24 = (int *)&v33[v23];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v30, 24);
      v23 = *(_QWORD *)(a1 + 16);
      v24 = &v34;
    }
  }
  v25 = v23 + 24 * *(unsigned int *)(a1 + 24);
  v26 = *(_OWORD *)v24;
  *(_QWORD *)(v25 + 16) = *((_QWORD *)v24 + 2);
  *(_OWORD *)v25 = v26;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[3],unsigned int &,char const(&)[30],unsigned long>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[3],unsigned int &,char const(&)[30],unsigned long>(uint64_t a1, char *__s, unsigned int *a3, char *a4, char **a5)
{
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  size_t v32;

  v10 = strlen(__s);
  v11 = *(_QWORD *)(a1 + 16);
  v30 = 3;
  v31 = __s;
  v32 = v10;
  v12 = *(unsigned int *)(a1 + 24);
  v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    v24 = v12 + 1;
    v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      v11 = *(_QWORD *)(a1 + 16);
      v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      v11 = *(_QWORD *)(a1 + 16);
      v13 = &v30;
    }
  }
  v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  v15 = *(_OWORD *)v13;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)v13 + 2);
  *(_OWORD *)v14 = v15;
  v16 = *(_DWORD *)(a1 + 28);
  v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v17;
  v18 = (char *)*a3;
  v30 = 5;
  v31 = v18;
  v19 = *(_QWORD *)(a1 + 16);
  v20 = &v30;
  if (v17 >= v16)
  {
    v26 = v17 + 1;
    v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = &v30;
    }
  }
  v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  v22 = *(_OWORD *)v20;
  *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
  *(_OWORD *)v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(a1, a4, a5);
}

char *llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<void *,mlir::BytecodeReader::Impl::UseListOrderStorage const&>(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  unsigned int v14;
  int v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  _QWORD *buffer;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  int v34;
  BOOL v35;
  unsigned int v36;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    v16 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
    {
LABEL_3:
      v10 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v16 = *(_DWORD *)(a1 + 16);
  }
  v17 = *(uint64_t **)a1;
  v18 = (v16 - 1) | ((unint64_t)(v16 - 1) >> 1);
  v19 = v18 | (v18 >> 2) | ((v18 | (v18 >> 2)) >> 4);
  v20 = ((v19 | (v19 >> 8)) >> 16) | v19 | (v19 >> 8);
  if ((v20 + 1) > 0x40)
    v21 = v20 + 1;
  else
    v21 = 64;
  *(_DWORD *)(a1 + 16) = v21;
  buffer = llvm::allocate_buffer(48 * v21, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v17)
  {
    v23 = 6 * v8;
    llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(a1, v17, &v17[v23]);
    llvm::deallocate_buffer((llvm *)v17, (void *)(v23 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v24 = *(unsigned int *)(a1 + 16);
  v25 = 48 * v24 - 48;
  v26 = buffer;
  if (v25 < 0x30)
    goto LABEL_44;
  v27 = v25 / 0x30 + 1;
  v26 = &buffer[6 * (v27 & 0xFFFFFFFFFFFFFFELL)];
  v28 = v27 & 0xFFFFFFFFFFFFFFELL;
  v29 = buffer;
  do
  {
    *v29 = -4096;
    v29[6] = -4096;
    v29 += 12;
    v28 -= 2;
  }
  while (v28);
  if (v27 != (v27 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_44:
    do
    {
      *v26 = -4096;
      v26 += 6;
    }
    while (v26 != &buffer[6 * v24]);
  }
  v10 = *a3;
  v30 = v24 - 1;
  v31 = ((*a3 >> 4) ^ (*a3 >> 9)) & v30;
  a2 = (char *)&buffer[6 * v31];
  v32 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v33 = 0;
    v34 = 1;
    while (v32 != -4096)
    {
      if (v33)
        v35 = 0;
      else
        v35 = v32 == -8192;
      if (v35)
        v33 = a2;
      v36 = v31 + v34++;
      v31 = v36 & v30;
      a2 = (char *)&buffer[6 * v31];
      v32 = *(_QWORD *)a2;
      if (v10 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v33)
      a2 = v33;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  v11 = a2 + 24;
  *((_QWORD *)a2 + 1) = a2 + 24;
  *((_QWORD *)a2 + 2) = 0x400000000;
  v12 = *(_DWORD *)(a4 + 8);
  if (a2 + 8 != (char *)a4 && v12 != 0)
  {
    if (v12 < 5)
    {
      v14 = *(_DWORD *)(a4 + 8);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 8), a2 + 24, *(unsigned int *)(a4 + 8), 4);
      v14 = *(_DWORD *)(a4 + 8);
      if (!v14)
      {
LABEL_15:
        *((_DWORD *)a2 + 4) = v12;
        goto LABEL_16;
      }
      v11 = (void *)*((_QWORD *)a2 + 1);
    }
    memcpy(v11, *(const void **)a4, 4 * v14);
    goto LABEL_15;
  }
LABEL_16:
  a2[40] = *(_BYTE *)(a4 + 32);
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t *v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 48 * v6 - 48;
    if (v8 < 0x30)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[6 * v6];
      do
      {
        *v9 = -4096;
        v9 += 6;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x30 + 1;
    v9 = &v7[6 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[6] = -4096;
      v12 += 12;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = *(_DWORD *)(a1 + 16);
        if (v15)
        {
          v16 = v15 - 1;
          v17 = v16 & ((v14 >> 4) ^ (v14 >> 9));
          v18 = *(_QWORD *)a1 + 48 * v17;
          v19 = *(_QWORD *)v18;
          if (v14 != *(_QWORD *)v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -4096)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -8192;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v16;
              v18 = *(_QWORD *)a1 + 48 * v17;
              v19 = *(_QWORD *)v18;
              if (v14 == *(_QWORD *)v18)
                goto LABEL_25;
            }
            if (v20)
              v18 = v20;
          }
        }
        else
        {
          v18 = 0;
        }
LABEL_25:
        *(_QWORD *)v18 = v14;
        *(_QWORD *)(v18 + 8) = v18 + 24;
        *(_QWORD *)(v18 + 16) = 0x400000000;
        if (*((_DWORD *)v4 + 4))
          llvm::SmallVectorImpl<unsigned int>::operator=(v18 + 8, (uint64_t)(v4 + 1));
        *(_BYTE *)(v18 + 40) = *((_BYTE *)v4 + 40);
        ++*(_DWORD *)(a1 + 8);
        v24 = (uint64_t *)v4[1];
        if (v24 != v4 + 3)
          free(v24);
      }
      v4 += 6;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::BytecodeReader::Impl::Impl(uint64_t a1, mlir::MLIRContext *a2, mlir::UnknownLoc **a3, char a4, _OWORD *a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  mlir::MLIRContext *v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16[2];
  unint64_t v17[2];
  unint64_t v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 536;
  *(_QWORD *)(a1 + 96) = a1 + 424;
  *(_QWORD *)(a1 + 104) = a1 + 336;
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0x100000000;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0x100000000;
  *(_QWORD *)(a1 + 224) = a2;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = a3;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 288;
  *(_QWORD *)(a1 + 280) = 0x600000000;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = 0x1000000000;
  *(_QWORD *)(a1 + 360) = a1 + 376;
  *(_QWORD *)(a1 + 368) = 0x100000000;
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_QWORD *)(a1 + 432) = 0x200000000;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_QWORD *)(a1 + 504) = 0x2000000000;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = a1 + 552;
  *(_QWORD *)(a1 + 544) = 0x300000000;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_QWORD *)(a1 + 616) = a1 + 632;
  *(_QWORD *)(a1 + 624) = 0x600000000;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 708) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 760) = a1 + 760;
  *(_QWORD *)(a1 + 768) = a1 + 760;
  *(_QWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_QWORD *)(a1 + 832) = a1 + 832;
  *(_QWORD *)(a1 + 840) = a1 + 832;
  *(_QWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  v10 = (_QWORD *)(a1 + 872);
  v11 = mlir::UnknownLoc::get(*a3, a2);
  mlir::ValueRange::ValueRange(v18, 0, 0);
  v15 = mlir::NoneType::get(*a3, v12);
  mlir::ValueRange::ValueRange(v17, (uint64_t)&v15, 1uLL);
  mlir::BlockRange::BlockRange(v16, 0, 0);
  mlir::OperationState::OperationState(v10, v11, (uint64_t)"builtin.unrealized_conversion_cast", 34, v18[0], v18[1], v17[0], v17[1], 0, 0, v16[0], v16[1], 0, 0);
  v13 = a5[1];
  *(_OWORD *)(a1 + 1176) = *a5;
  *(_OWORD *)(a1 + 1192) = v13;
  *(_QWORD *)(a1 + 1208) = a6;
  return a1;
}

void mlir::BytecodeReader::Impl::~Impl(llvm **this)
{
  mlir::OperationState::~OperationState((mlir::OperationState *)(this + 109));
  mlir::Block::~Block((mlir::Block *)(this + 100));
  mlir::Block::~Block((mlir::Block *)(this + 91));
  llvm::deallocate_buffer(this[88], (void *)(16 * *((unsigned int *)this + 180)));
}

char *std::vector<mlir::BytecodeReader::Impl::ValueScope>::__emplace_back_slow_path<>(void **a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;

  v2 = (char *)*a1;
  v1 = (char *)a1[1];
  v3 = 0x6DB6DB6DB6DB6DB7 * ((v1 - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - v2) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - v2) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - v2) >> 3)) >= 0x249249249249249)
    v4 = 0x492492492492492;
  if (v4 > 0x492492492492492)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v6 = 56 * v4;
  v7 = (char *)operator new(56 * v4);
  v8 = &v7[56 * v3];
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  v9 = &v7[v6];
  *(_OWORD *)v8 = 0u;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 3) = v8 + 40;
  *((_DWORD *)v8 + 9) = 4;
  v10 = v8 + 56;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = &v8[v11];
      v13 = &v1[v11];
      *(_OWORD *)(v12 - 56) = *(_OWORD *)&v1[v11 - 56];
      *((_QWORD *)v12 - 5) = *(_QWORD *)&v1[v11 - 40];
      *((_QWORD *)v13 - 7) = 0;
      *((_QWORD *)v13 - 6) = 0;
      *((_QWORD *)v13 - 5) = 0;
      *((_QWORD *)v12 - 4) = &v8[v11 - 16];
      *(_QWORD *)&v8[v11 - 24] = 0x400000000;
      if (*(_DWORD *)&v1[v11 - 24])
        llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v8[v11 - 32], (uint64_t)(v13 - 32));
      v11 -= 56;
    }
    while (&v1[v11] != v2);
    v1 = (char *)*a1;
    v14 = (char *)a1[1];
    *a1 = &v8[v11];
    a1[1] = v10;
    a1[2] = v9;
    if (v14 != v1)
    {
      v15 = v14 - 16;
      do
      {
        v17 = (char *)*((_QWORD *)v15 - 2);
        if (v15 != v17)
          free(v17);
        v18 = (void *)*((_QWORD *)v15 - 5);
        if (v18)
        {
          *((_QWORD *)v15 - 4) = v18;
          operator delete(v18);
        }
        v16 = v15 - 40;
        v15 -= 56;
      }
      while (v16 != v1);
    }
  }
  if (v1)
    operator delete(v1);
  return v8 + 56;
}

char *std::vector<mlir::BytecodeReader::Impl::RegionReadState>::__push_back_slow_path<mlir::BytecodeReader::Impl::RegionReadState>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 7;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 57)
    abort();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 6 > v3)
    v3 = v6 >> 6;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80)
    v7 = 0x1FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 57)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v8 = (char *)operator new(v7 << 7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[128 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v9 + 2) = v10;
  *((_QWORD *)v9 + 3) = v11;
  *((_DWORD *)v9 + 8) = *(_DWORD *)(a2 + 32);
  *((_QWORD *)v9 + 5) = v9 + 56;
  *((_QWORD *)v9 + 6) = 0x600000000;
  if (*(_DWORD *)(a2 + 48))
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v9 + 40), a2 + 40);
  v12 = &v8[128 * v7];
  *(_OWORD *)(v9 + 104) = *(_OWORD *)(a2 + 104);
  v9[120] = *(_BYTE *)(a2 + 120);
  v13 = v9 + 128;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = 0;
    do
    {
      v18 = &v9[v16];
      v19 = &v14[v16];
      v20 = *(_OWORD *)&v14[v16 - 128];
      *((_QWORD *)v18 - 14) = *(_QWORD *)&v14[v16 - 112];
      *((_OWORD *)v18 - 8) = v20;
      v21 = *(_QWORD *)&v14[v16 - 104];
      *(_QWORD *)&v14[v16 - 104] = 0;
      *(_QWORD *)&v9[v16 - 88] = &v9[v16 - 72];
      v22 = (uint64_t)&v9[v16 - 88];
      *(_QWORD *)(v22 - 16) = v21;
      *(_DWORD *)(v22 - 8) = *(_DWORD *)&v14[v16 - 96];
      *(_QWORD *)(v22 + 8) = 0x600000000;
      if (*(_DWORD *)&v14[v16 - 80])
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v22, (uint64_t)(v19 - 88));
      v17 = *(_OWORD *)(v19 - 24);
      *(v18 - 8) = *(v19 - 8);
      *(_OWORD *)(v18 - 24) = v17;
      v16 -= 128;
    }
    while (&v14[v16] != v15);
    v14 = (char *)*a1;
    v23 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v12;
    while (v23 != v14)
    {
      v24 = (char *)*((_QWORD *)v23 - 11);
      if (v23 - 72 != v24)
        free(v24);
      v25 = (void *)*((_QWORD *)v23 - 13);
      *((_QWORD *)v23 - 13) = 0;
      if (v25)
        operator delete(v25);
      v23 -= 128;
    }
  }
  if (v14)
    operator delete(v14);
  return v9 + 128;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 4 * v8);
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 4 * v9);
        v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          *v7 = 0;
          return a1;
        }
      }
      else
      {
        v9 = 0;
        v10 = *v7;
        if (!*v7)
          goto LABEL_15;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 4);
      v9 = 0;
      v10 = *v7;
      if (!*v7)
        goto LABEL_15;
    }
    memcpy((void *)(*(_QWORD *)a1 + 4 * v9), (const void *)(*(_QWORD *)a2 + 4 * v9), *(_QWORD *)a2 + 4 * v10 - (*(_QWORD *)a2 + 4 * v9));
    goto LABEL_15;
  }
  return a1;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallImpl<mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void ***v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  const void ***v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  const void ***v21;
  uint64_t v22;
  __int128 v23;
  const char *v24;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  BOOL v31;
  char *v32;
  char *v33;
  char *v34;
  const void **v35;
  const char *v36;
  uint64_t v37;
  __int16 v38;

  v2 = (_QWORD *)*a1;
  v3 = mlir::Diagnostic::attachNote(a2, 0, 0);
  v4 = v3;
  v6 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  LODWORD(v35) = 3;
  v36 = "in bytecode version ";
  v37 = 20;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v35;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v26 = v7 + 1;
    v27 = v5 + 24 * v7 > (unint64_t)&v35;
    if (v5 <= (unint64_t)&v35 && v27)
    {
      v32 = (char *)&v35 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 16, (void *)(v3 + 32), v26, 24);
      v5 = *(_QWORD *)(v4 + 16);
      v8 = (const void ***)&v32[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 16, (void *)(v3 + 32), v26, 24);
      v5 = *(_QWORD *)(v4 + 16);
      v8 = &v35;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v4 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = v8[2];
  *(_OWORD *)v9 = v10;
  v11 = *(_DWORD *)(v4 + 28);
  v12 = (*(_DWORD *)(v4 + 24) + 1);
  *(_DWORD *)(v4 + 24) = v12;
  v13 = (const char *)v2[31];
  LODWORD(v35) = 5;
  v36 = v13;
  v14 = *(_QWORD *)(v4 + 16);
  v15 = &v35;
  if (v12 >= v11)
  {
    v28 = v12 + 1;
    v29 = v14 + 24 * v12 > (unint64_t)&v35;
    if (v14 <= (unint64_t)&v35 && v29)
    {
      v33 = (char *)&v35 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v4 + 32), v28, 24);
      v14 = *(_QWORD *)(v4 + 16);
      v15 = (const void ***)&v33[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v4 + 32), v28, 24);
      v14 = *(_QWORD *)(v4 + 16);
      v15 = &v35;
    }
  }
  v16 = v14 + 24 * *(unsigned int *)(v4 + 24);
  v17 = *(_OWORD *)v15;
  *(_QWORD *)(v16 + 16) = v15[2];
  *(_OWORD *)v16 = v17;
  v18 = *(_DWORD *)(v4 + 28);
  v19 = (*(_DWORD *)(v4 + 24) + 1);
  *(_DWORD *)(v4 + 24) = v19;
  LODWORD(v35) = 3;
  v36 = " produced by: ";
  v37 = 14;
  v20 = *(_QWORD *)(v4 + 16);
  v21 = &v35;
  if (v19 >= v18)
  {
    v30 = v19 + 1;
    v31 = v20 + 24 * v19 > (unint64_t)&v35;
    if (v20 <= (unint64_t)&v35 && v31)
    {
      v34 = (char *)&v35 - v20;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v4 + 32), v30, 24);
      v20 = *(_QWORD *)(v4 + 16);
      v21 = (const void ***)&v34[v20];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v4 + 32), v30, 24);
      v20 = *(_QWORD *)(v4 + 16);
      v21 = &v35;
    }
  }
  v22 = v20 + 24 * *(unsigned int *)(v4 + 24);
  v23 = *(_OWORD *)v21;
  *(_QWORD *)(v22 + 16) = v21[2];
  *(_OWORD *)v22 = v23;
  ++*(_DWORD *)(v4 + 24);
  v38 = 261;
  v24 = (const char *)v2[33];
  v35 = (const void **)v2[32];
  v36 = v24;
  mlir::Diagnostic::operator<<(v4, &v35);
  return 0;
}

uint64_t mlir::Diagnostic::append<char const(&)[30],std::string>(uint64_t a1, char *__s, const void **a3)
{
  const void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const void ***v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  const void **v17[4];
  __int16 v18;

  v6 = (const void **)strlen(__s);
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  LODWORD(v17[0]) = 3;
  v17[1] = (const void **)__s;
  v17[2] = v6;
  v9 = *(unsigned int *)(a1 + 24);
  v10 = v17;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    v14 = v9 + 1;
    v15 = v8 + 24 * v9 > (unint64_t)v17;
    if (v8 <= (unint64_t)v17 && v15)
    {
      v16 = (char *)v17 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v10 = (const void ***)&v16[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v10 = v17;
    }
  }
  v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v10[2];
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  v18 = 260;
  v17[0] = a3;
  mlir::Diagnostic::operator<<(a1, v17);
  return a1;
}

int *std::__introsort<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int *v66;
  int *v67;
  unint64_t v68;
  int *v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int *v81;
  int *v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  int *v106;
  BOOL v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  BOOL v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v88 = *((_QWORD *)a2 - 1);
        v89 = *(_QWORD *)(v8 + 8);
        if (v88 > v89)
        {
          v90 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(a2 - 4);
          *(a2 - 4) = v90;
          *(_QWORD *)(v8 + 8) = v88;
          *((_QWORD *)a2 - 1) = v89;
        }
        return result;
      case 3:
        v91 = *(_QWORD *)(v8 + 24);
        v92 = *(_QWORD *)(v8 + 8);
        v93 = *((_QWORD *)a2 - 1);
        if (v91 <= v92)
        {
          if (v93 > v91)
          {
            v142 = *(_DWORD *)(v8 + 16);
            *(_DWORD *)(v8 + 16) = *(a2 - 4);
            *(a2 - 4) = v142;
            *(_QWORD *)(v8 + 24) = v93;
            *((_QWORD *)a2 - 1) = v91;
            v143 = *(_QWORD *)(v8 + 24);
            v144 = *(_QWORD *)(v8 + 8);
            if (v143 > v144)
            {
              v145 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v145;
              *(_QWORD *)(v8 + 8) = v143;
              *(_QWORD *)(v8 + 24) = v144;
            }
          }
        }
        else
        {
          v94 = *(_DWORD *)v8;
          if (v93 <= v91)
          {
            *(_DWORD *)v8 = *(_DWORD *)(v8 + 16);
            *(_DWORD *)(v8 + 16) = v94;
            *(_QWORD *)(v8 + 8) = v91;
            *(_QWORD *)(v8 + 24) = v92;
            v153 = *((_QWORD *)a2 - 1);
            if (v153 <= v92)
              return result;
            *(_DWORD *)(v8 + 16) = *(a2 - 4);
            *(a2 - 4) = v94;
            *(_QWORD *)(v8 + 24) = v153;
          }
          else
          {
            *(_DWORD *)v8 = *(a2 - 4);
            *(a2 - 4) = v94;
            *(_QWORD *)(v8 + 8) = v93;
          }
          *((_QWORD *)a2 - 1) = v92;
        }
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)v8, (int *)(v8 + 16), (int *)(v8 + 32), a2 - 4);
      case 5:
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)v8, (int *)(v8 + 16), (int *)(v8 + 32), (int *)(v8 + 48));
        v95 = *((_QWORD *)a2 - 1);
        v96 = *(_QWORD *)(v8 + 56);
        if (v95 > v96)
        {
          v97 = *(_DWORD *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = *(a2 - 4);
          *(a2 - 4) = v97;
          *(_QWORD *)(v8 + 56) = v95;
          *((_QWORD *)a2 - 1) = v96;
          v98 = *(_QWORD *)(v8 + 56);
          v99 = *(_QWORD *)(v8 + 40);
          if (v98 > v99)
          {
            v100 = *(_DWORD *)(v8 + 32);
            v101 = *(_DWORD *)(v8 + 48);
            *(_DWORD *)(v8 + 32) = v101;
            *(_DWORD *)(v8 + 48) = v100;
            *(_QWORD *)(v8 + 40) = v98;
            *(_QWORD *)(v8 + 56) = v99;
            v102 = *(_QWORD *)(v8 + 24);
            if (v98 > v102)
            {
              v103 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v101;
              *(_DWORD *)(v8 + 32) = v103;
              *(_QWORD *)(v8 + 24) = v98;
              *(_QWORD *)(v8 + 40) = v102;
              v104 = *(_QWORD *)(v8 + 8);
              if (v98 > v104)
              {
                v105 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v101;
                *(_DWORD *)(v8 + 16) = v105;
                *(_QWORD *)(v8 + 8) = v98;
                *(_QWORD *)(v8 + 24) = v104;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v106 = (int *)(v8 + 16);
          v108 = (int *)v8 == a2 || v106 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v108)
            {
              v109 = 0;
              v110 = (int *)v8;
              do
              {
                v112 = *((_QWORD *)v110 + 3);
                v113 = *((_QWORD *)v110 + 1);
                v110 = v106;
                if (v112 > v113)
                {
                  v114 = *v106;
                  v115 = v109;
                  do
                  {
                    v116 = v8 + v115;
                    *(_DWORD *)(v116 + 16) = *(_DWORD *)(v8 + v115);
                    *(_QWORD *)(v116 + 24) = *(_QWORD *)(v8 + v115 + 8);
                    if (!v115)
                    {
                      v111 = v8;
                      goto LABEL_121;
                    }
                    v115 -= 16;
                  }
                  while (v112 > *(_QWORD *)(v116 - 8));
                  v111 = v8 + v115 + 16;
LABEL_121:
                  *(_DWORD *)v111 = v114;
                  *(_QWORD *)(v111 + 8) = v112;
                }
                v106 = v110 + 4;
                v109 += 16;
              }
              while (v110 + 4 != a2);
            }
          }
          else if (!v108)
          {
            v146 = (unint64_t *)(v8 + 24);
            do
            {
              v147 = *(_QWORD *)(v7 + 24);
              v148 = *(_QWORD *)(v7 + 8);
              v7 = (uint64_t)v106;
              if (v147 > v148)
              {
                v149 = *(_QWORD *)v106;
                v150 = v146;
                do
                {
                  v151 = v150;
                  *((_DWORD *)v150 - 2) = *((_DWORD *)v150 - 6);
                  v152 = *(v150 - 2);
                  v150 -= 2;
                  *v151 = v152;
                }
                while (v147 > *(v151 - 4));
                *((_DWORD *)v150 - 2) = v149;
                *v150 = v147;
              }
              v106 = (int *)(v7 + 16);
              v146 += 2;
            }
            while ((int *)(v7 + 16) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((int *)v8 != a2)
          {
            v117 = (unint64_t)(v10 - 2) >> 1;
            v118 = v117;
            do
            {
              if (v117 >= v118)
              {
                v120 = (2 * v118) | 1;
                v121 = v8 + 16 * v120;
                if (2 * v118 + 2 < v10)
                {
                  v119 = *(_QWORD *)(v121 + 8) > *(_QWORD *)(v121 + 24);
                  v121 += 16 * v119;
                  if (v119)
                    v120 = 2 * v118 + 2;
                }
                v122 = v8 + 16 * v118;
                v123 = *(_QWORD *)(v122 + 8);
                if (*(_QWORD *)(v121 + 8) <= v123)
                {
                  v124 = *(_DWORD *)v122;
                  do
                  {
                    v125 = v122;
                    v122 = v121;
                    *(_DWORD *)v125 = *(_DWORD *)v121;
                    *(_QWORD *)(v125 + 8) = *(_QWORD *)(v121 + 8);
                    if (v117 < v120)
                      break;
                    v126 = (2 * v120) | 1;
                    v121 = v8 + 16 * v126;
                    v127 = 2 * v120 + 2;
                    if (v127 < v10)
                    {
                      v119 = *(_QWORD *)(v121 + 8) > *(_QWORD *)(v121 + 24);
                      v121 += 16 * v119;
                      if (v119)
                        v126 = v127;
                    }
                    result = *(int **)(v121 + 8);
                    v120 = v126;
                  }
                  while ((unint64_t)result <= v123);
                  *(_DWORD *)v122 = v124;
                  *(_QWORD *)(v122 + 8) = v123;
                }
              }
              v119 = v118-- <= 0;
            }
            while (!v119);
            v128 = (unint64_t)v9 >> 4;
            do
            {
              v129 = 0;
              v130 = *(_DWORD *)v8;
              v131 = *(_QWORD *)(v8 + 8);
              v132 = v8;
              do
              {
                v133 = v132 + 16 * v129 + 16;
                v134 = (2 * v129) | 1;
                v135 = 2 * v129 + 2;
                if (v135 < v128)
                {
                  v119 = *(_QWORD *)(v133 + 8) > *(_QWORD *)(v133 + 24);
                  v133 += 16 * v119;
                  if (v119)
                    v134 = v135;
                }
                *(_DWORD *)v132 = *(_DWORD *)v133;
                *(_QWORD *)(v132 + 8) = *(_QWORD *)(v133 + 8);
                v132 = v133;
                v129 = v134;
              }
              while (v134 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
              if ((int *)v133 == a2 - 4)
              {
                *(_DWORD *)v133 = v130;
                *(_QWORD *)(v133 + 8) = v131;
              }
              else
              {
                *(_DWORD *)v133 = *(a2 - 4);
                *(_QWORD *)(v133 + 8) = *((_QWORD *)a2 - 1);
                *(a2 - 4) = v130;
                *((_QWORD *)a2 - 1) = v131;
                v136 = v133 - v8 + 16;
                if (v136 >= 17)
                {
                  v137 = (((unint64_t)v136 >> 4) - 2) >> 1;
                  v138 = v8 + 16 * v137;
                  v139 = *(_QWORD *)(v133 + 8);
                  if (*(_QWORD *)(v138 + 8) > v139)
                  {
                    v140 = *(_DWORD *)v133;
                    do
                    {
                      v141 = v133;
                      v133 = v138;
                      *(_DWORD *)v141 = *(_DWORD *)v138;
                      *(_QWORD *)(v141 + 8) = *(_QWORD *)(v138 + 8);
                      if (!v137)
                        break;
                      v137 = (v137 - 1) >> 1;
                      v138 = v8 + 16 * v137;
                    }
                    while (*(_QWORD *)(v138 + 8) > v139);
                    *(_DWORD *)v133 = v140;
                    *(_QWORD *)(v133 + 8) = v139;
                  }
                }
              }
              a2 -= 4;
              v119 = v128-- <= 2;
            }
            while (!v119);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 16 * ((unint64_t)v10 >> 1);
        v13 = *((_QWORD *)a2 - 1);
        if ((unint64_t)v9 < 0x801)
        {
          v17 = *(_QWORD *)(v8 + 8);
          v18 = *(_QWORD *)(v12 + 8);
          if (v17 <= v18)
          {
            if (v13 > v17)
            {
              v24 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(a2 - 4);
              *(a2 - 4) = v24;
              *(_QWORD *)(v8 + 8) = v13;
              *((_QWORD *)a2 - 1) = v17;
              v25 = *(_QWORD *)(v8 + 8);
              v26 = *(_QWORD *)(v12 + 8);
              if (v25 > v26)
              {
                v27 = *(_DWORD *)v12;
                *(_DWORD *)v12 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v27;
                *(_QWORD *)(v12 + 8) = v25;
                *(_QWORD *)(v8 + 8) = v26;
                --a3;
                v28 = *(_QWORD *)v8;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_DWORD *)v12;
            if (v13 <= v17)
            {
              *(_DWORD *)v12 = *(_DWORD *)v8;
              *(_DWORD *)v8 = v19;
              *(_QWORD *)(v12 + 8) = v17;
              *(_QWORD *)(v8 + 8) = v18;
              v40 = *((_QWORD *)a2 - 1);
              if (v40 <= v18)
                goto LABEL_32;
              *(_DWORD *)v8 = *(a2 - 4);
              *(a2 - 4) = v19;
              *(_QWORD *)(v8 + 8) = v40;
            }
            else
            {
              *(_DWORD *)v12 = *(a2 - 4);
              *(a2 - 4) = v19;
              *(_QWORD *)(v12 + 8) = v13;
            }
            *((_QWORD *)a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          v28 = *(_QWORD *)v8;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v41 = *(_QWORD *)(v8 + 8);
          if (*(_QWORD *)(v8 - 8) > v41)
            goto LABEL_58;
          if (v41 <= *((_QWORD *)a2 - 1))
          {
            v79 = v8 + 16;
            do
            {
              v8 = v79;
              if (v79 >= (unint64_t)a2)
                break;
              v80 = *(_QWORD *)(v79 + 8);
              v79 += 16;
            }
            while (v41 <= v80);
          }
          else
          {
            v77 = v8;
            do
            {
              v8 = v77 + 16;
              v78 = *(_QWORD *)(v77 + 24);
              v77 += 16;
            }
            while (v41 <= v78);
          }
          v81 = a2;
          if (v8 < (unint64_t)a2)
          {
            v82 = a2;
            do
            {
              v81 = v82 - 4;
              v83 = *((_QWORD *)v82 - 1);
              v82 -= 4;
            }
            while (v41 > v83);
          }
          while (v8 < (unint64_t)v81)
          {
            v84 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *v81;
            *v81 = v84;
            v85 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *((_QWORD *)v81 + 1);
            *((_QWORD *)v81 + 1) = v85;
            do
            {
              v86 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v41 <= v86);
            do
            {
              v87 = *((_QWORD *)v81 - 1);
              v81 -= 4;
            }
            while (v41 > v87);
          }
          if (v8 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v28;
          *(_QWORD *)(v8 - 8) = v41;
          continue;
        }
        v14 = *(_QWORD *)(v12 + 8);
        v15 = *(_QWORD *)(v8 + 8);
        if (v14 <= v15)
        {
          if (v13 > v14)
          {
            v20 = *(_DWORD *)v12;
            *(_DWORD *)v12 = *(a2 - 4);
            *(a2 - 4) = v20;
            *(_QWORD *)(v12 + 8) = v13;
            *((_QWORD *)a2 - 1) = v14;
            v21 = *(_QWORD *)(v12 + 8);
            v22 = *(_QWORD *)(v8 + 8);
            if (v21 > v22)
            {
              v23 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(_DWORD *)v12;
              *(_DWORD *)v12 = v23;
              *(_QWORD *)(v8 + 8) = v21;
              *(_QWORD *)(v12 + 8) = v22;
            }
          }
        }
        else
        {
          v16 = *(_DWORD *)v8;
          if (v13 > v14)
          {
            *(_DWORD *)v8 = *(a2 - 4);
            *(a2 - 4) = v16;
            *(_QWORD *)(v8 + 8) = v13;
            goto LABEL_22;
          }
          *(_DWORD *)v8 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v16;
          *(_QWORD *)(v8 + 8) = v14;
          *(_QWORD *)(v12 + 8) = v15;
          v29 = *((_QWORD *)a2 - 1);
          if (v29 > v15)
          {
            *(_DWORD *)v12 = *(a2 - 4);
            *(a2 - 4) = v16;
            *(_QWORD *)(v12 + 8) = v29;
LABEL_22:
            *((_QWORD *)a2 - 1) = v15;
          }
        }
        v30 = v8 + 16 * v11;
        v31 = v30 - 16;
        v32 = *(_QWORD *)(v30 - 8);
        v33 = *(_QWORD *)(v8 + 24);
        v34 = *((_QWORD *)a2 - 3);
        if (v32 <= v33)
        {
          if (v34 > v32)
          {
            v36 = *(_DWORD *)v31;
            *(_DWORD *)v31 = *(a2 - 8);
            *(a2 - 8) = v36;
            *(_QWORD *)(v31 + 8) = v34;
            *((_QWORD *)a2 - 3) = v32;
            v37 = *(_QWORD *)(v31 + 8);
            v38 = *(_QWORD *)(v8 + 24);
            if (v37 > v38)
            {
              v39 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = *(_DWORD *)v31;
              *(_DWORD *)v31 = v39;
              *(_QWORD *)(v8 + 24) = v37;
              *(_QWORD *)(v31 + 8) = v38;
            }
          }
        }
        else
        {
          v35 = *(_DWORD *)(v8 + 16);
          if (v34 > v32)
          {
            *(_DWORD *)(v8 + 16) = *(a2 - 8);
            *(a2 - 8) = v35;
            *(_QWORD *)(v8 + 24) = v34;
            goto LABEL_36;
          }
          *(_DWORD *)(v8 + 16) = *(_DWORD *)v31;
          *(_DWORD *)v31 = v35;
          *(_QWORD *)(v8 + 24) = v32;
          *(_QWORD *)(v31 + 8) = v33;
          v42 = *((_QWORD *)a2 - 3);
          if (v42 > v33)
          {
            *(_DWORD *)v31 = *(a2 - 8);
            *(a2 - 8) = v35;
            *(_QWORD *)(v31 + 8) = v42;
LABEL_36:
            *((_QWORD *)a2 - 3) = v33;
          }
        }
        v43 = v8 + 16 * v11;
        v44 = v43 + 16;
        v45 = *(_QWORD *)(v43 + 24);
        v46 = *(_QWORD *)(v8 + 40);
        v47 = *((_QWORD *)a2 - 5);
        if (v45 <= v46)
        {
          if (v47 > v45)
          {
            v49 = *(_DWORD *)v44;
            *(_DWORD *)v44 = *(a2 - 12);
            *(a2 - 12) = v49;
            *(_QWORD *)(v44 + 8) = v47;
            *((_QWORD *)a2 - 5) = v45;
            v50 = *(_QWORD *)(v44 + 8);
            v51 = *(_QWORD *)(v8 + 40);
            if (v50 > v51)
            {
              v52 = *(_DWORD *)(v8 + 32);
              *(_DWORD *)(v8 + 32) = *(_DWORD *)v44;
              *(_DWORD *)v44 = v52;
              *(_QWORD *)(v8 + 40) = v50;
              *(_QWORD *)(v44 + 8) = v51;
            }
          }
        }
        else
        {
          v48 = *(_DWORD *)(v8 + 32);
          if (v47 > v45)
          {
            *(_DWORD *)(v8 + 32) = *(a2 - 12);
            *(a2 - 12) = v48;
            *(_QWORD *)(v8 + 40) = v47;
            goto LABEL_45;
          }
          *(_DWORD *)(v8 + 32) = *(_DWORD *)v44;
          *(_DWORD *)v44 = v48;
          *(_QWORD *)(v8 + 40) = v45;
          *(_QWORD *)(v44 + 8) = v46;
          v53 = *((_QWORD *)a2 - 5);
          if (v53 > v46)
          {
            *(_DWORD *)v44 = *(a2 - 12);
            *(a2 - 12) = v48;
            *(_QWORD *)(v44 + 8) = v53;
LABEL_45:
            *((_QWORD *)a2 - 5) = v46;
          }
        }
        v54 = *(_QWORD *)(v12 + 8);
        v55 = *(_QWORD *)(v31 + 8);
        v56 = *(_QWORD *)(v44 + 8);
        if (v54 <= v55)
        {
          v57 = *(_DWORD *)v12;
          if (v56 <= v54)
          {
            v55 = *(_QWORD *)(v12 + 8);
          }
          else
          {
            v58 = *(_DWORD *)v44;
            *(_DWORD *)v12 = *(_DWORD *)v44;
            *(_DWORD *)v44 = v57;
            *(_QWORD *)(v12 + 8) = v56;
            *(_QWORD *)(v44 + 8) = v54;
            if (v56 <= v55)
            {
              v55 = v56;
              v57 = v58;
            }
            else
            {
              v57 = *(_DWORD *)v31;
              *(_DWORD *)v31 = v58;
              *(_DWORD *)v12 = v57;
              *(_QWORD *)(v31 + 8) = v56;
              *(_QWORD *)(v12 + 8) = v55;
            }
          }
        }
        else
        {
          v57 = *(_DWORD *)v31;
          if (v56 <= v54)
          {
            *(_DWORD *)v31 = *(_DWORD *)v12;
            *(_DWORD *)v12 = v57;
            *(_QWORD *)(v31 + 8) = v54;
            *(_QWORD *)(v12 + 8) = v55;
            if (v56 > v55)
            {
              v59 = *(_DWORD *)v44;
              *(_DWORD *)v12 = *(_DWORD *)v44;
              *(_DWORD *)v44 = v57;
              *(_QWORD *)(v12 + 8) = v56;
              *(_QWORD *)(v44 + 8) = v55;
              v55 = v56;
              v57 = v59;
            }
          }
          else
          {
            *(_DWORD *)v31 = *(_DWORD *)v44;
            *(_DWORD *)v44 = v57;
            *(_QWORD *)(v31 + 8) = v56;
            *(_QWORD *)(v44 + 8) = v55;
            v57 = *(_DWORD *)v12;
            v55 = v54;
          }
        }
        v60 = *(_DWORD *)v8;
        *(_DWORD *)v8 = v57;
        *(_DWORD *)v12 = v60;
        v61 = v8 + 16 * v11;
        v62 = *(_QWORD *)(v8 + 8);
        *(_QWORD *)(v8 + 8) = v55;
        *(_QWORD *)(v61 + 8) = v62;
        --a3;
        v28 = *(_QWORD *)v8;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v41 = *(_QWORD *)(v8 + 8);
LABEL_58:
        v63 = 0;
        do
        {
          v64 = *(_QWORD *)(v8 + v63 + 24);
          v63 += 16;
        }
        while (v64 > v41);
        v65 = v8 + v63;
        v66 = a2;
        if (v63 == 16)
        {
          v69 = a2;
          while (v65 < (unint64_t)v69)
          {
            v67 = v69 - 4;
            v70 = *((_QWORD *)v69 - 1);
            v69 -= 4;
            if (v70 > v41)
              goto LABEL_66;
          }
          v67 = v69;
          v8 = v65;
        }
        else
        {
          do
          {
            v67 = v66 - 4;
            v68 = *((_QWORD *)v66 - 1);
            v66 -= 4;
          }
          while (v68 <= v41);
LABEL_66:
          v8 = v65;
          if (v65 < (unint64_t)v67)
          {
            v71 = (unint64_t)v67;
            do
            {
              v72 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(_DWORD *)v71;
              *(_DWORD *)v71 = v72;
              v73 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *(_QWORD *)(v71 + 8);
              *(_QWORD *)(v71 + 8) = v73;
              do
              {
                v74 = *(_QWORD *)(v8 + 24);
                v8 += 16;
              }
              while (v74 > v41);
              do
              {
                v75 = *(_QWORD *)(v71 - 8);
                v71 -= 16;
              }
              while (v75 <= v41);
            }
            while (v8 < v71);
          }
        }
        if (v8 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v28;
        *(_QWORD *)(v8 - 8) = v41;
        if (v65 < (unint64_t)v67)
        {
LABEL_77:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v76 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(v7, (int *)(v8 - 16));
        result = (int *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v76)
            continue;
          goto LABEL_77;
        }
        a2 = (int *)(v8 - 16);
        if (!v76)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(uint64_t a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  int *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 1);
      v7 = *(_QWORD *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(a2 - 4);
        *(a2 - 4) = v8;
        *(_QWORD *)(a1 + 8) = v6;
        *((_QWORD *)a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *((_QWORD *)a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v30 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = *(a2 - 4);
          *(a2 - 4) = v30;
          *(_QWORD *)(a1 + 24) = v11;
          *((_QWORD *)a2 - 1) = v9;
          v31 = *(_QWORD *)(a1 + 24);
          v32 = *(_QWORD *)(a1 + 8);
          if (v31 > v32)
          {
            v33 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v33;
            *(_QWORD *)(a1 + 8) = v31;
            *(_QWORD *)(a1 + 24) = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v12;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 24) = v10;
          v37 = *((_QWORD *)a2 - 1);
          if (v37 > v10)
          {
            *(_DWORD *)(a1 + 16) = *(a2 - 4);
            *(a2 - 4) = v12;
            *(_QWORD *)(a1 + 24) = v37;
            *((_QWORD *)a2 - 1) = v10;
          }
        }
        else
        {
          *(_DWORD *)a1 = *(a2 - 4);
          *(a2 - 4) = v12;
          *(_QWORD *)(a1 + 8) = v11;
          *((_QWORD *)a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a2 - 4);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (int *)(a1 + 48));
      v19 = *((_QWORD *)a2 - 1);
      v20 = *(_QWORD *)(a1 + 56);
      if (v19 <= v20)
        return 1;
      v21 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = *(a2 - 4);
      *(a2 - 4) = v21;
      *(_QWORD *)(a1 + 56) = v19;
      *((_QWORD *)a2 - 1) = v20;
      v22 = *(_QWORD *)(a1 + 56);
      v23 = *(_QWORD *)(a1 + 40);
      if (v22 <= v23)
        return 1;
      v24 = *(_DWORD *)(a1 + 32);
      v25 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 32) = v25;
      *(_DWORD *)(a1 + 48) = v24;
      *(_QWORD *)(a1 + 40) = v22;
      *(_QWORD *)(a1 + 56) = v23;
      v26 = *(_QWORD *)(a1 + 24);
      if (v22 <= v26)
        return 1;
      v27 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v25;
      *(_DWORD *)(a1 + 32) = v27;
      *(_QWORD *)(a1 + 24) = v22;
      *(_QWORD *)(a1 + 40) = v26;
      v28 = *(_QWORD *)(a1 + 8);
      if (v22 <= v28)
        return 1;
      v29 = *(_DWORD *)a1;
      *(_DWORD *)a1 = v25;
      *(_DWORD *)(a1 + 16) = v29;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 24) = v28;
      return 1;
    default:
      v13 = *(_QWORD *)(a1 + 8);
      v14 = (unint64_t *)(a1 + 24);
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 40);
      if (v15 > v13)
      {
        v17 = *(_DWORD *)a1;
        if (v16 <= v15)
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v17;
          *(_QWORD *)(a1 + 8) = v15;
          *(_QWORD *)(a1 + 24) = v13;
          if (v16 <= v13)
            goto LABEL_30;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v17;
          v18 = (unint64_t *)(a1 + 24);
        }
        else
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v17;
          v18 = (unint64_t *)(a1 + 8);
        }
        v14 = (unint64_t *)(a1 + 40);
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        v34 = *(_DWORD *)(a1 + 16);
        v35 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 16) = v35;
        *(_DWORD *)(a1 + 32) = v34;
        *(_QWORD *)(a1 + 24) = v16;
        *(_QWORD *)(a1 + 40) = v15;
        if (v16 > v13)
        {
          v36 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v35;
          *(_DWORD *)(a1 + 16) = v36;
          v18 = (unint64_t *)(a1 + 8);
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = (int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = (int *)(a1 + 32);
      while (1)
      {
        v42 = *((_QWORD *)v38 + 1);
        if (v42 > *((_QWORD *)v41 + 1))
          break;
LABEL_39:
        v41 = v38;
        v39 += 16;
        v38 += 4;
        if (v38 == a2)
          return 1;
      }
      v43 = *v38;
      v44 = v39;
      do
      {
        v45 = a1 + v44;
        *(_DWORD *)(v45 + 48) = *(_DWORD *)(a1 + v44 + 32);
        *(_QWORD *)(v45 + 56) = *(_QWORD *)(a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_DWORD *)a1 = v43;
          *(_QWORD *)(a1 + 8) = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 4 == a2;
        }
        v44 -= 16;
      }
      while (v42 > *(_QWORD *)(v45 + 24));
      v46 = a1 + v44;
      *(_DWORD *)(v46 + 48) = v43;
      *(_QWORD *)(v46 + 56) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 4 == a2;
  }
}

int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(int *result, int *a2, int *a3, int *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;

  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)result + 1);
  v6 = *((_QWORD *)a3 + 1);
  if (v4 > v5)
  {
    v7 = *result;
    if (v6 <= v4)
    {
      *result = *a2;
      *a2 = v7;
      *((_QWORD *)result + 1) = v4;
      *((_QWORD *)a2 + 1) = v5;
      v4 = *((_QWORD *)a3 + 1);
      if (v4 <= v5)
        goto LABEL_11;
      *a2 = *a3;
      *a3 = v7;
      *((_QWORD *)a2 + 1) = v4;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
      *((_QWORD *)result + 1) = v6;
    }
    *((_QWORD *)a3 + 1) = v5;
    v4 = v5;
LABEL_11:
    v12 = *((_QWORD *)a4 + 1);
    if (v12 <= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 <= v4)
  {
    v4 = *((_QWORD *)a3 + 1);
    v12 = *((_QWORD *)a4 + 1);
    if (v12 <= v6)
      return result;
    goto LABEL_14;
  }
  v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a3 + 1) = v4;
  v9 = *((_QWORD *)a2 + 1);
  v10 = *((_QWORD *)result + 1);
  if (v9 <= v10)
    goto LABEL_11;
  v11 = *result;
  *result = *a2;
  *a2 = v11;
  *((_QWORD *)result + 1) = v9;
  *((_QWORD *)a2 + 1) = v10;
  v4 = *((_QWORD *)a3 + 1);
  v12 = *((_QWORD *)a4 + 1);
  if (v12 <= v4)
    return result;
LABEL_14:
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  *((_QWORD *)a3 + 1) = v12;
  *((_QWORD *)a4 + 1) = v4;
  v14 = *((_QWORD *)a3 + 1);
  v15 = *((_QWORD *)a2 + 1);
  if (v14 > v15)
  {
    v16 = *a2;
    *a2 = *a3;
    *a3 = v16;
    *((_QWORD *)a2 + 1) = v14;
    *((_QWORD *)a3 + 1) = v15;
    v17 = *((_QWORD *)a2 + 1);
    v18 = *((_QWORD *)result + 1);
    if (v17 > v18)
    {
      v19 = *result;
      *result = *a2;
      *a2 = v19;
      *((_QWORD *)result + 1) = v17;
      *((_QWORD *)a2 + 1) = v18;
    }
  }
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(char *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  char v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  _DWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  v4 = result;
  v6 = *(_QWORD *)result;
  v7 = *((_DWORD *)result + 4);
  if (!v7)
    goto LABEL_22;
  v8 = v7 - 1;
  v9 = (37 * *a2) & (v7 - 1);
  v10 = (_DWORD *)(v6 + 4 * v9);
  v11 = *v10;
  if (*a2 == *v10)
  {
LABEL_3:
    v12 = 0;
    goto LABEL_9;
  }
  v13 = 0;
  v14 = 1;
  while (v11 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v11 == -2;
    if (v15)
      v13 = v10;
    v16 = v9 + v14++;
    v9 = v16 & v8;
    v10 = (_DWORD *)(v6 + 4 * (v16 & v8));
    v11 = *v10;
    if (*a2 == *v10)
      goto LABEL_3;
  }
  if (v13)
    v10 = v13;
  v17 = *((_DWORD *)result + 2);
  if (4 * v17 + 4 >= 3 * v7)
  {
LABEL_22:
    v7 *= 2;
LABEL_23:
    result = llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow((uint64_t)result, v7);
    v6 = *(_QWORD *)v4;
    v18 = *((_DWORD *)v4 + 4);
    if (v18)
    {
      v19 = v18 - 1;
      v20 = (37 * *a2) & (v18 - 1);
      v10 = (_DWORD *)(v6 + 4 * v20);
      v21 = *v10;
      if (*a2 != *v10)
      {
        v22 = 0;
        v23 = 1;
        while (v21 != -1)
        {
          if (v22)
            v24 = 0;
          else
            v24 = v21 == -2;
          if (v24)
            v22 = v10;
          v25 = v20 + v23++;
          v20 = v25 & v19;
          v10 = (_DWORD *)(v6 + 4 * (v25 & v19));
          v21 = *v10;
          if (*a2 == *v10)
            goto LABEL_6;
        }
        if (v22)
          v10 = v22;
      }
    }
    else
    {
      v10 = 0;
    }
    goto LABEL_6;
  }
  if (v7 + ~v17 - *((_DWORD *)result + 3) <= v7 >> 3)
    goto LABEL_23;
LABEL_6:
  ++*((_DWORD *)v4 + 2);
  if (*v10 != -1)
    --*((_DWORD *)v4 + 3);
  *v10 = *a2;
  v7 = *((_DWORD *)v4 + 4);
  v12 = 1;
LABEL_9:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v6 + 4 * v7;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

char *llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  char *v10;
  uint64_t v11;
  int v12;
  llvm *v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  char *v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)llvm::allocate_buffer(4 * v8, (std::align_val_t)4uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
      memset(result, 255, 4 * v11);
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v4;
      do
      {
        v16 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          v17 = *(_DWORD *)(a1 + 16) - 1;
          v18 = v17 & (37 * v16);
          v15 = &v10[4 * v18];
          v19 = *(_DWORD *)v15;
          if (v16 != *(_DWORD *)v15)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v15;
              v23 = v18 + v21++;
              v18 = v23 & v17;
              v15 = &v10[4 * (v23 & v17)];
              v19 = *(_DWORD *)v15;
              if (v16 == *(_DWORD *)v15)
                goto LABEL_14;
            }
            if (v20)
              v15 = v20;
          }
LABEL_14:
          *(_DWORD *)v15 = v16;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v13 = (llvm *)((char *)v13 + 4);
      }
      while (v13 != (llvm *)((char *)v4 + 4 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(4 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14)
    return (char *)memset(result, 255, 4 * v14);
  return result;
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_0>(uint64_t *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  v4 = *result;
  v3 = (_DWORD *)result[1];
  v5 = (*v3)++;
  v6 = *(_DWORD *)(v4 + 720);
  if (!v6)
    goto LABEL_22;
  v7 = *(_QWORD *)(v4 + 704);
  v8 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v9 = (_QWORD *)(v7 + 16 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v12 = 0;
    v13 = 1;
    while (v10 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v10 == -8192;
      if (v14)
        v12 = v9;
      v15 = v8 + v13++;
      v8 = v15 & (v6 - 1);
      v9 = (_QWORD *)(v7 + 16 * v8);
      v10 = *v9;
      if (*v9 == a2)
        return result;
    }
    if (v12)
      v16 = v12;
    else
      v16 = v9;
    v17 = *(_DWORD *)(v4 + 712);
    if (4 * v17 + 4 < 3 * v6)
    {
      if (v6 + ~v17 - *(_DWORD *)(v4 + 716) > v6 >> 3)
        goto LABEL_6;
      goto LABEL_23;
    }
LABEL_22:
    v6 *= 2;
LABEL_23:
    result = llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v4 + 704, v6);
    v18 = *(_QWORD *)(v4 + 704);
    v19 = *(_DWORD *)(v4 + 720) - 1;
    v20 = v19 & ((a2 >> 4) ^ (a2 >> 9));
    v16 = (_QWORD *)(v18 + 16 * v20);
    v21 = *v16;
    if (*v16 == a2)
    {
LABEL_24:
      ++*(_DWORD *)(v4 + 712);
      if (a2 == -4096)
        goto LABEL_8;
      goto LABEL_7;
    }
    v22 = 0;
    v23 = 1;
    while (v21 != -4096)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v21 == -8192;
      if (v24)
        v22 = v16;
      v25 = v20 + v23++;
      v20 = v25 & v19;
      v16 = (_QWORD *)(v18 + 16 * (v25 & v19));
      v21 = *v16;
      if (*v16 == a2)
        goto LABEL_24;
    }
    if (v22)
      v16 = v22;
LABEL_6:
    v11 = *v16;
    ++*(_DWORD *)(v4 + 712);
    if (v11 == -4096)
    {
LABEL_8:
      *v16 = a2;
      *((_DWORD *)v16 + 2) = v5;
      return result;
    }
LABEL_7:
    --*(_DWORD *)(v4 + 716);
    goto LABEL_8;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Block *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_1>(uint64_t *a1, uint64_t a2)
{
  _QWORD **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD ***)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 56) - (_QWORD)v2;
  if (!v3)
    return 1;
  v4 = *a1;
  v5 = 8 * (v3 >> 3);
  while (mlir::BytecodeReader::Impl::sortUseListOrder(v4, *v2))
  {
    ++v2;
    v5 -= 8;
    if (!v5)
      return 1;
  }
  return 0;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_2>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *NextResultAtOffset;

  v2 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v2)
    v3 = a2 - 16;
  else
    v3 = 0;
  if (!(_DWORD)v2)
    return 1;
  v4 = 0;
  v5 = *a1;
  while (1)
  {
    NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v3, v4);
    if (!mlir::BytecodeReader::Impl::sortUseListOrder(v5, NextResultAtOffset))
      break;
    if (v2 == ++v4)
      return 1;
  }
  return 0;
}

_QWORD *mlir::BytecodeWriterConfig::BytecodeWriterConfig(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;

  v6 = (char *)operator new(0xF8uLL);
  *(_QWORD *)v6 = 6;
  v6[8] = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0x1000000000;
  *((_QWORD *)v6 + 5) = a2;
  *((_QWORD *)v6 + 6) = a3;
  *((_QWORD *)v6 + 7) = v6 + 72;
  *((_QWORD *)v6 + 8) = 0x600000000;
  *((_QWORD *)v6 + 15) = v6 + 136;
  *((_QWORD *)v6 + 16) = 0x600000000;
  *((_QWORD *)v6 + 23) = v6 + 200;
  *((_QWORD *)v6 + 24) = 0x600000000;
  *a1 = v6;
  return a1;
}

void mlir::BytecodeWriterConfig::~BytecodeWriterConfig(mlir::BytecodeWriterConfig::Impl **this)
{
  mlir::BytecodeWriterConfig::Impl *v2;
  void *v3;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    mlir::BytecodeWriterConfig::Impl::~Impl(v2);
    operator delete(v3);
  }
}

uint64_t mlir::BytecodeWriterConfig::getAttributeWriterCallbacks(mlir::BytecodeWriterConfig *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 56);
}

uint64_t mlir::BytecodeWriterConfig::getTypeWriterCallbacks(mlir::BytecodeWriterConfig *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 120);
}

uint64_t mlir::BytecodeWriterConfig::setElideResourceDataFlag(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 8) = a2;
  return this;
}

_QWORD **mlir::BytecodeWriterConfig::setDesiredBytecodeVersion(_QWORD **this, uint64_t a2)
{
  **this = a2;
  return this;
}

uint64_t mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(mlir::BytecodeWriterConfig *this)
{
  return **(_QWORD **)this;
}

uint64_t mlir::BytecodeWriterConfig::getDialectVersionMap(mlir::BytecodeWriterConfig *this)
{
  return *(_QWORD *)this + 16;
}

void mlir::writeBytecodeToFile(mlir *this, mlir::Operation *a2, llvm::raw_ostream *a3, const mlir::BytecodeWriterConfig *a4)
{
  uint64_t v7;
  void (***v8)(_anonymous_namespace_::DialectWriter *__hidden);
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  void (***v14)(_anonymous_namespace_::DialectWriter *__hidden);
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  void (***v19)(_anonymous_namespace_::DialectWriter *__hidden);
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  void (***v24)(_anonymous_namespace_::DialectWriter *__hidden);
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  void (***v29)(_anonymous_namespace_::DialectWriter *__hidden);
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  void (***v34)(_anonymous_namespace_::DialectWriter *__hidden);
  char *v35;
  char *v36;
  __int128 v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unsigned int HashValue;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  void *v61;
  char *v62;
  void *v63;
  void *v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t **v67;
  uint64_t **v68;
  uint64_t v69;
  uint64_t *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  char *v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  unsigned int v79;
  void (**v80)(_anonymous_namespace_::DialectWriter *__hidden);
  llvm *v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  char *v85;
  int v86;
  const void *v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  BOOL v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  unint64_t v101;
  int64_t v102;
  unint64_t v103;
  size_t v104;
  char *v105;
  char *v106;
  char *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  unint64_t v111;
  __int128 v112;
  char *v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char v118;
  void (**v119)(_anonymous_namespace_::DialectWriter *__hidden);
  int v120;
  unint64_t v121;
  BOOL v122;
  void **v123;
  char *v124;
  char *v125;
  __int128 v126;
  unint64_t v127;
  int64_t v128;
  char *v129;
  _QWORD *v130;
  void *v131;
  char *v132;
  void *v133;
  void *v134;
  _QWORD *v135;
  int64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  int64_t v141;
  _QWORD *v142;
  void (**v143)(_anonymous_namespace_::DialectWriter *__hidden);
  void (*v144)(_anonymous_namespace_::DialectWriter *__hidden);
  unsigned __int8 v145;
  _QWORD *v146;
  uint64_t v147;
  void (*v148)(_anonymous_namespace_::DialectWriter *__hidden);
  unsigned __int8 v149;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  unint64_t v155;
  int64_t v156;
  unint64_t v157;
  size_t v158;
  char *v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  unint64_t v172;
  int64_t v173;
  unint64_t v174;
  size_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  unint64_t v180;
  __int128 v181;
  char *v182;
  char *v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  char v188;
  char *v189;
  char *v190;
  unint64_t v191;
  __int128 v192;
  char *v193;
  char *v194;
  unint64_t v195;
  uint64_t v196;
  char *v197;
  char v198;
  unint64_t v199;
  char v200;
  char *v201;
  char *v202;
  unint64_t v203;
  int64_t v204;
  unint64_t v205;
  size_t v206;
  _BYTE *v207;
  char *v208;
  char *v209;
  unint64_t v210;
  _OWORD *v211;
  char *v212;
  unint64_t v213;
  __int128 v214;
  _QWORD *v215;
  char *v216;
  unint64_t v217;
  uint64_t v218;
  char *v219;
  char v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  int64_t v240;
  _QWORD *v241;
  void (**v242)(_anonymous_namespace_::DialectWriter *__hidden);
  void (*v243)(_anonymous_namespace_::DialectWriter *__hidden);
  unsigned __int8 v244;
  _QWORD *v245;
  uint64_t v246;
  void (*v247)(_anonymous_namespace_::DialectWriter *__hidden);
  unsigned __int8 v248;
  _QWORD *v249;
  uint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  unint64_t v254;
  int64_t v255;
  unint64_t v256;
  size_t v257;
  char *v258;
  char *v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  unint64_t v271;
  int64_t v272;
  unint64_t v273;
  size_t v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  unint64_t v279;
  __int128 v280;
  char *v281;
  char *v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char *v286;
  char v287;
  char *v288;
  char *v289;
  unint64_t v290;
  __int128 v291;
  char *v292;
  char *v293;
  unint64_t v294;
  uint64_t v295;
  char *v296;
  char v297;
  unint64_t v298;
  char v299;
  char *v300;
  char *v301;
  unint64_t v302;
  int64_t v303;
  unint64_t v304;
  size_t v305;
  char *v306;
  char *v307;
  char *v308;
  unint64_t v309;
  char *v310;
  char *v311;
  unint64_t v312;
  __int128 v313;
  char *v314;
  char *v315;
  unint64_t v316;
  uint64_t v317;
  char *v318;
  char v319;
  unint64_t v320;
  unint64_t v321;
  char *v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  char *v334;
  _QWORD *v335;
  void *v336;
  char *v337;
  void *v338;
  void *v339;
  char *v340;
  _QWORD *v341;
  void *v342;
  char *v343;
  void *v344;
  void *v345;
  _BYTE *v346;
  BOOL v347;
  char *v348;
  _QWORD *v349;
  void *v350;
  char *v351;
  void *v352;
  void *v353;
  char v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  _QWORD *v360;
  int v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  int64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  BOOL v382;
  uint64_t v383;
  __int128 *v384;
  __int128 *v385;
  __int128 v386;
  char *v387;
  char *v388;
  _QWORD *v389;
  void *v390;
  char *v391;
  void *v392;
  void *v393;
  char *v394;
  char *v395;
  _QWORD *v396;
  void *v397;
  char *v398;
  void *v399;
  void *v400;
  char *v401;
  uint64_t v402;
  char **v403;
  char **v404;
  char *v405;
  _QWORD *v406;
  void *v407;
  char *v408;
  void *v409;
  void *v410;
  char *v411;
  char *v412;
  char *v413;
  _QWORD **v414;
  _QWORD **v415;
  void *v416;
  _QWORD *v417;
  void *v418;
  void *v419;
  char *v420;
  _QWORD *v421;
  void *v422;
  char *v423;
  void *v424;
  void *v425;
  _QWORD *v426;
  char *v427;
  char *v428;
  void *v429;
  void *v430;
  char *v431;
  char *v432;
  const char *v433;
  size_t v434;
  unint64_t v435;
  unint64_t v436;
  BOOL v437;
  unint64_t v438;
  BOOL v439;
  unint64_t v440;
  BOOL v441;
  unint64_t v442;
  BOOL v443;
  unint64_t v444;
  BOOL v445;
  int64_t v446;
  int64_t v447;
  int64_t v448;
  int64_t v449;
  int64_t v450;
  int64_t v451;
  llvm::raw_ostream *v452;
  uint64_t *v453;
  uint64_t **v454;
  unsigned int v455;
  uint64_t **v456;
  unint64_t v457;
  unsigned int v458;
  mlir::bytecode::detail::IRNumberingState *v459;
  uint64_t **v460;
  uint64_t *v461;
  _QWORD *v462;
  _QWORD *v463;
  void *v464[2];
  void *v465[2];
  __int128 v466;
  void *v467[2];
  __int128 v468;
  int v469;
  void (**v470)(_anonymous_namespace_::DialectWriter *__hidden);
  void **v471;
  void *v472;
  mlir::bytecode::detail::IRNumberingState *v473;
  llvm **v474;
  uint64_t v475;
  _QWORD v476[3];
  void **v477;
  void (***v478)(_anonymous_namespace_::DialectWriter *__hidden);
  int64_t *v479;
  uint64_t v480;
  void *v481[2];
  void *v482[2];
  __int128 v483;
  void *v484[2];
  __int128 v485;
  int v486;
  __int128 v487;
  uint64_t v488[2];
  llvm *v489;
  uint64_t v490;
  unsigned int v491;
  void *v492;
  unint64_t v493;
  _BYTE v494[144];
  uint64_t v495;
  unint64_t v496;
  _QWORD *v497;
  _QWORD *v498;
  uint64_t **v499;
  uint64_t **v500;
  _QWORD *v501;
  _QWORD *v502;
  uint64_t v503;
  void *v504;
  char *v505;
  uint64_t v506;
  void *v507;
  __int128 v508;
  uint64_t v509;
  llvm *v510;
  uint64_t v511;
  unsigned int v512;
  uint64_t v513;
  llvm **v514;
  uint64_t v515;
  void *__dst[2];
  void *v517[8];
  int v518;
  void *v519;
  _QWORD *v520;
  void *__p;
  _QWORD **v522;
  char v523;
  void (**v524)(_anonymous_namespace_::DialectWriter *__hidden);
  unint64_t v525;
  uint64_t v526;
  mlir::bytecode::detail::IRNumberingState *v527;
  llvm **v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  void **v532;
  uint64_t v533;

  v533 = *MEMORY[0x1E0C80C00];
  v489 = 0;
  v490 = 0;
  v491 = 0;
  v492 = v494;
  v493 = 0;
  v7 = mlir::bytecode::detail::IRNumberingState::IRNumberingState((mlir::bytecode::detail::IRNumberingState *)v494, this, a3);
  v503 = *(_QWORD *)a3;
  v504 = 0;
  v506 = 0;
  v505 = 0;
  v507 = &v509;
  v508 = xmmword_181233150;
  v511 = 0;
  v510 = 0;
  v512 = 0;
  v459 = (mlir::bytecode::detail::IRNumberingState *)v7;
  v513 = v7;
  v514 = &v489;
  v515 = v503;
  *(_OWORD *)v467 = 0u;
  v468 = 0u;
  *(_OWORD *)v465 = 0u;
  v466 = 0u;
  *(_OWORD *)v464 = 0u;
  v469 = 1;
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)v464, 0, "ML\xEF\x52duplicate top-level section: ", "\x00duplicate top-level section: ", 4);
  if (*(_QWORD *)v503 >= 7uLL)
  {
    LOWORD(v483) = 257;
    mlir::Operation::emitError((uint64_t *)this, (uint64_t)v481, (uint64_t)__dst);
    if (__dst[0])
    {
      LODWORD(v524) = 3;
      v525 = (unint64_t)"unsupported version requested ";
      v526 = 30;
      v8 = &v524;
      v9 = (char *)v517[1];
      if (LODWORD(v517[2]) >= HIDWORD(v517[2]))
      {
        v435 = LODWORD(v517[2]) + 1;
        if (v517[1] <= &v524 && (char *)v517[1] + 24 * LODWORD(v517[2]) > (char *)&v524)
        {
          v446 = (char *)&v524 - (char *)v517[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v435, 24);
          v9 = (char *)v517[1];
          v8 = (void (***)(_anonymous_namespace_::DialectWriter *__hidden))((char *)v517[1] + v446);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v435, 24);
          v8 = &v524;
          v9 = (char *)v517[1];
        }
      }
      v10 = &v9[24 * LODWORD(v517[2])];
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v10 + 2) = v8[2];
      *(_OWORD *)v10 = v11;
      v12 = ++LODWORD(v517[2]);
      if (__dst[0])
      {
        v13 = *(_QWORD *)v503;
        LODWORD(v524) = 2;
        v525 = v13;
        v14 = &v524;
        v15 = (char *)v517[1];
        if (v12 >= HIDWORD(v517[2]))
        {
          v436 = v12 + 1;
          v437 = (char *)v517[1] + 24 * v12 > (char *)&v524;
          if (v517[1] <= &v524 && v437)
          {
            v447 = (char *)&v524 - (char *)v517[1];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v436, 24);
            v15 = (char *)v517[1];
            v14 = (void (***)(_anonymous_namespace_::DialectWriter *__hidden))((char *)v517[1] + v447);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v436, 24);
            v14 = &v524;
            v15 = (char *)v517[1];
          }
        }
        v16 = &v15[24 * LODWORD(v517[2])];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = v14[2];
        *(_OWORD *)v16 = v17;
        v18 = ++LODWORD(v517[2]);
        if (__dst[0])
        {
          LODWORD(v524) = 3;
          v525 = (unint64_t)", must be in range [";
          v526 = 20;
          v19 = &v524;
          v20 = (char *)v517[1];
          if (v18 >= HIDWORD(v517[2]))
          {
            v438 = v18 + 1;
            v439 = (char *)v517[1] + 24 * v18 > (char *)&v524;
            if (v517[1] <= &v524 && v439)
            {
              v448 = (char *)&v524 - (char *)v517[1];
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v438, 24);
              v20 = (char *)v517[1];
              v19 = (void (***)(_anonymous_namespace_::DialectWriter *__hidden))((char *)v517[1] + v448);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v438, 24);
              v19 = &v524;
              v20 = (char *)v517[1];
            }
          }
          v21 = &v20[24 * LODWORD(v517[2])];
          v22 = *(_OWORD *)v19;
          *((_QWORD *)v21 + 2) = v19[2];
          *(_OWORD *)v21 = v22;
          v23 = ++LODWORD(v517[2]);
          if (__dst[0])
          {
            LODWORD(v524) = 2;
            v525 = 0;
            v24 = &v524;
            v25 = (char *)v517[1];
            if (v23 >= HIDWORD(v517[2]))
            {
              v440 = v23 + 1;
              v441 = (char *)v517[1] + 24 * v23 > (char *)&v524;
              if (v517[1] <= &v524 && v441)
              {
                v449 = (char *)&v524 - (char *)v517[1];
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v440, 24);
                v25 = (char *)v517[1];
                v24 = (void (***)(_anonymous_namespace_::DialectWriter *__hidden))((char *)v517[1] + v449);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v440, 24);
                v24 = &v524;
                v25 = (char *)v517[1];
              }
            }
            v26 = &v25[24 * LODWORD(v517[2])];
            v27 = *(_OWORD *)v24;
            *((_QWORD *)v26 + 2) = v24[2];
            *(_OWORD *)v26 = v27;
            v28 = ++LODWORD(v517[2]);
            if (__dst[0])
            {
              LODWORD(v524) = 3;
              v525 = (unint64_t)", ";
              v526 = 2;
              v29 = &v524;
              v30 = (char *)v517[1];
              if (v28 >= HIDWORD(v517[2]))
              {
                v442 = v28 + 1;
                v443 = (char *)v517[1] + 24 * v28 > (char *)&v524;
                if (v517[1] <= &v524 && v443)
                {
                  v450 = (char *)&v524 - (char *)v517[1];
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v442, 24);
                  v30 = (char *)v517[1];
                  v29 = (void (***)(_anonymous_namespace_::DialectWriter *__hidden))((char *)v517[1] + v450);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v442, 24);
                  v29 = &v524;
                  v30 = (char *)v517[1];
                }
              }
              v31 = &v30[24 * LODWORD(v517[2])];
              v32 = *(_OWORD *)v29;
              *((_QWORD *)v31 + 2) = v29[2];
              *(_OWORD *)v31 = v32;
              v33 = ++LODWORD(v517[2]);
              if (__dst[0])
              {
                LODWORD(v524) = 2;
                v525 = 6;
                v34 = &v524;
                v35 = (char *)v517[1];
                if (v33 >= HIDWORD(v517[2]))
                {
                  v444 = v33 + 1;
                  v445 = (char *)v517[1] + 24 * v33 > (char *)&v524;
                  if (v517[1] <= &v524 && v445)
                  {
                    v451 = (char *)&v524 - (char *)v517[1];
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v444, 24);
                    v35 = (char *)v517[1];
                    v34 = (void (***)(_anonymous_namespace_::DialectWriter *__hidden))((char *)v517[1] + v451);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517[1], &v517[3], v444, 24);
                    v34 = &v524;
                    v35 = (char *)v517[1];
                  }
                }
                v36 = &v35[24 * LODWORD(v517[2])];
                v37 = *(_OWORD *)v34;
                *((_QWORD *)v36 + 2) = v34[2];
                *(_OWORD *)v36 = v37;
                ++LODWORD(v517[2]);
                if (__dst[0])
                  mlir::Diagnostic::operator<<((uint64_t)&__dst[1], 93);
              }
            }
          }
        }
      }
    }
    mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__dst);
    if (__dst[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    if (v523)
    {
      v38 = (_QWORD **)__p;
      if (__p)
      {
        v39 = v522;
        v40 = __p;
        if (v522 != __p)
        {
          do
            v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          v40 = __p;
        }
        v522 = v38;
        operator delete(v40);
      }
      v41 = v519;
      if (!v519)
        goto LABEL_589;
      v42 = v520;
      v43 = v519;
      if (v520 == v519)
      {
LABEL_588:
        v520 = v41;
        operator delete(v43);
LABEL_589:
        if (v517[1] != &v517[3])
          free(v517[1]);
        goto LABEL_591;
      }
      do
      {
        v45 = (void *)*--v42;
        v44 = v45;
        *v42 = 0;
        if (v45)
          operator delete[](v44);
      }
      while (v42 != v41);
LABEL_587:
      v43 = v519;
      goto LABEL_588;
    }
    goto LABEL_591;
  }
  v453 = (uint64_t *)this;
  v452 = a2;
  memset(v517, 0, sizeof(v517));
  *(_OWORD *)__dst = 0u;
  v518 = 1;
  v46 = v495;
  v47 = v496;
  if (v47)
  {
    v48 = v46 + 24 * v47;
    do
    {
      v49 = *(_QWORD *)(v46 + 16);
      v50 = *(void **)v49;
      v51 = *(_QWORD *)(v49 + 8);
      HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)v49, v51);
      v481[0] = v50;
      v481[1] = (void *)__PAIR64__(HashValue, v51);
      v482[0] = (void *)v493;
      v53 = *(_QWORD *)(llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>((uint64_t)&v489, (__int128 *)v481, (uint64_t *)v482)+ 16);
      if (*(uint64_t *)v503 <= 0)
      {
      }
      else
      {
        *(_OWORD *)v484 = 0u;
        v485 = 0u;
        *(_OWORD *)v482 = 0u;
        v483 = 0u;
        *(_OWORD *)v481 = 0u;
        v486 = 1;
        v54 = *(char **)(v49 + 24);
        if (v54)
        {
          v55 = *(_QWORD *)v503;
          v524 = off_1E0E157B8;
          v525 = v55;
          v526 = (uint64_t)v481;
          v527 = v459;
          v528 = &v489;
          v529 = v503 + 16;
          (*(void (**)(_QWORD, void (***)(_anonymous_namespace_::DialectWriter *__hidden)))(**(_QWORD **)(v49 + 24) + 48))(*(_QWORD *)(v49 + 24), &v524);
          v56 = *((_QWORD *)&v485 + 1);
          v57 = (char *)v481[0];
          v54 = (char *)v481[1];
        }
        else
        {
          v57 = 0;
          v56 = 0;
        }
        v58 = &v54[v56];
        if (v58 != v57)
        v59 = (char *)v484[0];
        if (v484[0])
        {
          v60 = v484[1];
          v61 = v484[0];
          if (v484[1] != v484[0])
          {
            v62 = (char *)v484[1];
            do
            {
              v64 = (void *)*((_QWORD *)v62 - 3);
              v62 -= 24;
              v63 = v64;
              if (v64)
              {
                *(v60 - 2) = v63;
                operator delete(v63);
              }
              v60 = v62;
            }
            while (v62 != v59);
            v61 = v484[0];
          }
          v484[1] = v59;
          operator delete(v61);
        }
        if (v482[1])
        {
          *(void **)&v483 = v482[1];
          operator delete(v482[1]);
        }
        if (v481[0])
        {
          v481[1] = v481[0];
          operator delete(v481[0]);
        }
      }
      v46 += 24;
    }
    while (v46 != v48);
  }
  if (*(uint64_t *)v503 > 3)
  v65 = v499;
  v66 = v500;
  if (v499 != v500)
  {
    v454 = v500;
    while (1)
    {
      v67 = v65;
      v68 = v65 + 1;
      v69 = **v65;
      v65 = v66;
      if (v68 != v66)
      {
        v65 = v68;
        do
        {
          if (**v65 != v69)
            goto LABEL_62;
          ++v65;
        }
        while (v65 != v66);
        v65 = v66;
      }
LABEL_62:
      if (v65 != v67)
        break;
LABEL_56:
      v66 = v454;
      if (v65 == v454)
        goto LABEL_149;
    }
    v460 = v65;
    while (2)
    {
      v70 = *v67;
      v481[0] = *(void **)((*v67)[1] + 8);
      v481[0] = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v481);
      v481[1] = v71;
      LOBYTE(v524) = 46;
      v72 = llvm::StringRef::find((uint64_t *)v481, (char *)&v524, 1uLL, 0);
      if (v72 == -1)
      {
        v74 = 0;
        v75 = 0;
      }
      else
      {
        if (v481[1] >= (void *)(v72 + 1))
          v73 = (void *)(v72 + 1);
        else
          v73 = v481[1];
        v74 = (char *)v481[0] + (unint64_t)v73;
        v75 = (char *)((char *)v481[1] - (char *)v73);
      }
      v76 = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v74, (uint64_t)v75);
      v77 = v76;
      v481[0] = v74;
      v481[1] = (void *)__PAIR64__(v76, v75);
      LODWORD(v482[0]) = 0;
      v78 = v493;
      v79 = v491;
      if (!v491)
      {
LABEL_140:
        v120 = 2 * v79;
        goto LABEL_146;
      }
      v461 = v70;
      v80 = 0;
      v81 = v489;
      v82 = v491 - 1;
      v83 = 1;
      v84 = v76 & v82;
      v85 = (char *)v489 + 24 * (v76 & v82);
      v86 = *((_DWORD *)v85 + 3);
      if (v76 != v86)
        goto LABEL_83;
LABEL_74:
      v87 = *(const void **)v85;
      if (*(_QWORD *)v85 == -2)
      {
        if (v74 != (_QWORD *)-2)
          goto LABEL_83;
LABEL_93:
        v65 = v460;
        v70 = v461;
        v95 = *((_QWORD *)v492 + 3 * *((unsigned int *)v85 + 4) + 2);
        if (*(uint64_t *)v503 < 5)
          goto LABEL_95;
LABEL_94:
        v95 = (*(_QWORD *)(v70[1] + 16) != (_QWORD)&mlir::detail::TypeIDResolver<void,void>::id) | (2 * v95);
        goto LABEL_95;
      }
      if (v87 == (const void *)-1)
      {
        if (v74 != (_QWORD *)-1)
          goto LABEL_83;
        goto LABEL_93;
      }
      if (*((_DWORD *)v85 + 2) == (_DWORD)v75)
      {
        if (!(_DWORD)v75)
          goto LABEL_93;
        v456 = v67;
        v457 = v78;
        v458 = v77;
        v88 = v82;
        v89 = v83;
        v455 = v84;
        v90 = memcmp(v74, v87, v75);
        v84 = v455;
        v83 = v89;
        v82 = v88;
        v67 = v456;
        v78 = v457;
        v77 = v458;
        if (!v90)
          goto LABEL_93;
      }
LABEL_83:
      while (v86)
      {
        v91 = v84;
        v92 = v82;
        if (v86 != 1)
          goto LABEL_88;
        v93 = *(_QWORD *)v85 == -2;
LABEL_89:
        if (v93 && v80 == 0)
          v80 = (void (**)(_anonymous_namespace_::DialectWriter *__hidden))v85;
        v94 = v91 + v83++;
        v82 = v92;
        v84 = v94 & v92;
        v85 = (char *)v81 + 24 * v84;
        v86 = *((_DWORD *)v85 + 3);
        if (v77 == v86)
          goto LABEL_74;
      }
      if (*(_QWORD *)v85 == -1)
      {
        if (v80)
          v119 = v80;
        else
          v119 = (void (**)(_anonymous_namespace_::DialectWriter *__hidden))v85;
        v65 = v460;
        v70 = v461;
        if (4 * (int)v490 + 4 >= 3 * v79)
          goto LABEL_140;
        if (v79 + ~(_DWORD)v490 - HIDWORD(v490) > v79 >> 3)
        {
          LODWORD(v490) = v490 + 1;
          if (!*((_DWORD *)v119 + 3))
            goto LABEL_101;
LABEL_102:
          --HIDWORD(v490);
          goto LABEL_103;
        }
        v120 = v79;
LABEL_146:
        v127 = v78;
        llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::grow((uint64_t)&v489, v120);
        v524 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::LookupBucketFor<llvm::CachedHashStringRef>((uint64_t *)&v489, (uint64_t)v481, (uint64_t *)&v524);
        v78 = v127;
        v119 = v524;
        LODWORD(v490) = v490 + 1;
        if (*((_DWORD *)v524 + 3))
          goto LABEL_102;
LABEL_101:
        if (*v119 != (void (*)(_anonymous_namespace_::DialectWriter *__hidden))-1)
          goto LABEL_102;
LABEL_103:
        *(_OWORD *)v119 = *(_OWORD *)v481;
        *((_DWORD *)v119 + 4) = v482[0];
        v98 = v493;
        *((_DWORD *)v119 + 4) = v493;
        if (v98 >= HIDWORD(v493))
        {
          v481[0] = v74;
          v481[1] = (void *)__PAIR64__(v77, v75);
          v482[0] = (void *)v78;
          v121 = v98 + 1;
          v122 = (char *)v492 + 24 * v98 > (char *)v481;
          if (v492 <= v481 && v122)
          {
            v128 = (char *)v481 - (_BYTE *)v492;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v492, v459, v121, 24);
            v124 = (char *)v492;
            v123 = (void **)((char *)v492 + v128);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v492, v459, v121, 24);
            v123 = v481;
            v124 = (char *)v492;
          }
          v125 = &v124[24 * v493];
          v126 = *(_OWORD *)v123;
          *((_QWORD *)v125 + 2) = v123[2];
          *(_OWORD *)v125 = v126;
        }
        else
        {
          v99 = (char *)v492 + 24 * v98;
          *(_QWORD *)v99 = v74;
          *((_DWORD *)v99 + 2) = (_DWORD)v75;
          *((_DWORD *)v99 + 3) = v77;
          *((_QWORD *)v99 + 2) = v78;
        }
        LODWORD(v493) = v493 + 1;
        v95 = *((_QWORD *)v492 + 3 * v493 - 1);
        if (*(uint64_t *)v503 >= 5)
          goto LABEL_94;
LABEL_95:
        if (v95 > 0x7F)
        {
          goto LABEL_65;
        }
        v96 = (2 * v95) | 1;
        v97 = (char *)__dst[1];
        if (__dst[1] < v517[0])
        {
          *(_BYTE *)__dst[1] = v96;
          __dst[1] = v97 + 1;
          goto LABEL_65;
        }
        v100 = (char *)__dst[0];
        v101 = (char *)__dst[1] - (char *)__dst[0];
        v102 = (char *)__dst[1] - (char *)__dst[0] + 1;
        if (v102 < 0)
LABEL_614:
          abort();
        v103 = (char *)v517[0] - (char *)__dst[0];
        if (2 * ((char *)v517[0] - (char *)__dst[0]) > (unint64_t)v102)
          v102 = 2 * v103;
        if (v103 >= 0x3FFFFFFFFFFFFFFFLL)
          v104 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v104 = v102;
        if (v104)
        {
          v105 = (char *)operator new(v104);
          v106 = &v105[v101];
          v105[v101] = v96;
          v107 = &v105[v101 + 1];
          if (v97 == v100)
            goto LABEL_133;
LABEL_117:
          if (v101 >= 8 && (unint64_t)(v100 - v105) >= 0x20)
          {
            if (v101 >= 0x20)
            {
              v108 = v101 & 0xFFFFFFFFFFFFFFE0;
              v109 = &v105[v101 - 16];
              v110 = v97 - 16;
              v111 = v101 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v112 = *(_OWORD *)v110;
                *((_OWORD *)v109 - 1) = *((_OWORD *)v110 - 1);
                *(_OWORD *)v109 = v112;
                v109 -= 32;
                v110 -= 32;
                v111 -= 32;
              }
              while (v111);
              if (v101 == v108)
                goto LABEL_132;
              if ((v101 & 0x18) != 0)
                goto LABEL_125;
              v106 -= v108;
              v97 -= v108;
            }
            else
            {
              v108 = 0;
LABEL_125:
              v106 -= v101 & 0xFFFFFFFFFFFFFFF8;
              v113 = &v105[&v97[-v108] - v100 - 8];
              v114 = &v97[-v108 - 8];
              v115 = v108 - (v101 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v116 = *(_QWORD *)v114;
                v114 -= 8;
                *(_QWORD *)v113 = v116;
                v113 -= 8;
                v115 += 8;
              }
              while (v115);
              v97 -= v101 & 0xFFFFFFFFFFFFFFF8;
              if (v101 == (v101 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_132:
                v97 = (char *)__dst[0];
                v106 = v105;
                goto LABEL_133;
              }
            }
          }
          v117 = v106 - 1;
          do
          {
            v118 = *--v97;
            *v117-- = v118;
          }
          while (v97 != v100);
          goto LABEL_132;
        }
        v105 = 0;
        v106 = (char *)((char *)__dst[1] - (char *)__dst[0]);
        *(_BYTE *)v101 = v96;
        v107 = (char *)(v101 + 1);
        if (v97 != v100)
          goto LABEL_117;
LABEL_133:
        __dst[0] = v106;
        __dst[1] = v107;
        v517[0] = &v105[v104];
        if (v97)
          operator delete(v97);
        __dst[1] = v107;
LABEL_65:
        if (++v67 == v65)
          goto LABEL_56;
        continue;
      }
      break;
    }
    v91 = v84;
    v92 = v82;
LABEL_88:
    v93 = 0;
    goto LABEL_89;
  }
LABEL_149:
  v129 = (char *)v517[4];
  if (v517[4])
  {
    v130 = v517[5];
    v131 = v517[4];
    if (v517[5] != v517[4])
    {
      v132 = (char *)v517[5];
      do
      {
        v134 = (void *)*((_QWORD *)v132 - 3);
        v132 -= 24;
        v133 = v134;
        if (v134)
        {
          *(v130 - 2) = v133;
          operator delete(v133);
        }
        v130 = v132;
      }
      while (v132 != v129);
      v131 = v517[4];
    }
    v517[5] = v129;
    operator delete(v131);
  }
  if (v517[1])
  {
    v517[2] = v517[1];
    operator delete(v517[1]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  memset(v517, 0, sizeof(v517));
  *(_OWORD *)__dst = 0u;
  v518 = 1;
  *(_OWORD *)v484 = 0u;
  v485 = 0u;
  *(_OWORD *)v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  v486 = 1;
  v135 = v497;
  if (v497 != v498)
  {
    v136 = 0;
    v137 = v498;
    v462 = v498;
    while (1)
    {
      v138 = v135;
      v139 = v135 + 1;
      v140 = *(_QWORD *)(*v135 + 16);
      v135 = v137;
      if (v139 != v137)
      {
        v135 = v139;
        do
        {
          if (*(_QWORD *)(*v135 + 16) != v140)
            goto LABEL_169;
          ++v135;
        }
        while (v135 != v137);
        v135 = v137;
      }
LABEL_169:
      if (v135 != v138)
        break;
      v141 = v136;
LABEL_163:
      v136 = v141;
      v137 = v462;
      if (v135 == v462)
        goto LABEL_304;
    }
    while (1)
    {
      v142 = (_QWORD *)*v138;
      v143 = (void (**)(_anonymous_namespace_::DialectWriter *__hidden))(*(_QWORD *)*v138 & 0xFFFFFFFFFFFFFFF8);
      v144 = *v143;
      if ((v145 & 1) == 0
      {
        v524 = (void (**)(_anonymous_namespace_::DialectWriter *__hidden))"StringRef llvm::getTypeName() [Desi"
                                                                                     "redTypeName = mlir::detail::Storage"
                                                                                     "UserTrait::IsMutable<Empty>]";
        v525 = 98;
        v221 = llvm::StringRef::find((uint64_t *)&v524, "DesiredTypeName = ", 0x12uLL, 0);
        if (v525 >= v221)
          v222 = v221;
        else
          v222 = v525;
        v223 = (char *)v524 + v222;
        v224 = v525 - v222;
        v225 = 18;
        if (v224 < 0x12)
          v225 = v224;
        v226 = v224 - v225;
        if (v226 >= v226 - 1)
          v227 = v226 - 1;
        else
          v227 = v226;
        mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v223[v225], v227);
      }
      v146 = (_QWORD *)((char *)v144 + 72);
      v147 = *((_QWORD *)v144 + 12);
      if ((v147 & 2) == 0)
        v146 = (_QWORD *)*v146;
      if (((*(uint64_t (**)(_QWORD *, uint64_t))(v147 & 0xFFFFFFFFFFFFFFF8))(v146, mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) != 0)goto LABEL_181;
      v148 = *v143;
      if ((v149 & 1) == 0
      {
        v524 = (void (**)(_anonymous_namespace_::DialectWriter *__hidden))"StringRef llvm::getTypeName() [Desi"
                                                                                     "redTypeName = mlir::detail::Storage"
                                                                                     "UserTrait::IsMutable<Empty>]";
        v525 = 98;
        v228 = llvm::StringRef::find((uint64_t *)&v524, "DesiredTypeName = ", 0x12uLL, 0);
        if (v525 >= v228)
          v229 = v228;
        else
          v229 = v525;
        v230 = (char *)v524 + v229;
        v231 = v525 - v229;
        v232 = 18;
        if (v231 < 0x12)
          v232 = v231;
        v233 = v231 - v232;
        if (v233 >= v233 - 1)
          v234 = v233 - 1;
        else
          v234 = v233;
        mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v230[v232], v234);
      }
      v150 = (_QWORD *)((char *)v148 + 72);
      v151 = *((_QWORD *)v148 + 12);
      if ((v151 & 2) == 0)
        v150 = (_QWORD *)*v150;
      if ((*(unsigned int (**)(_QWORD *, uint64_t))(v151 & 0xFFFFFFFFFFFFFFF8))(v150, mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id))
      {
LABEL_181:
        LODWORD(v525) = 0;
        LOBYTE(v529) = 0;
        v530 = 0;
        v531 = 1;
        v527 = 0;
        v528 = 0;
        v526 = 0;
        v524 = off_1E0E16A10;
        v532 = __dst;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v524, 0, 0, 0);
        v470 = v143;
        mlir::Attribute::print((mlir::Attribute *)&v470, (llvm::raw_ostream *)&v524, 0);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v524);
        v152 = (char *)__dst[1];
        if (__dst[1] < v517[0])
        {
          *(_BYTE *)__dst[1] = 0;
          v153 = v152 + 1;
LABEL_234:
          v167 = 0;
          __dst[1] = v153;
          goto LABEL_251;
        }
        v154 = (char *)__dst[0];
        v155 = (char *)__dst[1] - (char *)__dst[0];
        v156 = (char *)__dst[1] - (char *)__dst[0] + 1;
        if (v156 < 0)
          goto LABEL_614;
        v157 = (char *)v517[0] - (char *)__dst[0];
        if (2 * ((char *)v517[0] - (char *)__dst[0]) > (unint64_t)v156)
          v156 = 2 * v157;
        if (v157 >= 0x3FFFFFFFFFFFFFFFLL)
          v158 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v158 = v156;
        if (v158)
        {
          v159 = (char *)operator new(v158);
          v160 = &v159[v155];
          v159[v155] = 0;
          v153 = &v159[v155 + 1];
          if (v152 == v154)
          {
LABEL_232:
            __dst[0] = v160;
            __dst[1] = v153;
            v517[0] = &v159[v158];
            if (v152)
              operator delete(v152);
            goto LABEL_234;
          }
        }
        else
        {
          v159 = 0;
          v160 = (char *)((char *)__dst[1] - (char *)__dst[0]);
          *(_BYTE *)v155 = 0;
          v153 = (char *)(v155 + 1);
          if (v152 == v154)
            goto LABEL_232;
        }
        if (v155 >= 8 && (unint64_t)(v154 - v159) >= 0x20)
        {
          if (v155 >= 0x20)
          {
            v168 = v155 & 0xFFFFFFFFFFFFFFE0;
            v178 = &v159[v155 - 16];
            v179 = v152 - 16;
            v180 = v155 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v181 = *(_OWORD *)v179;
              *((_OWORD *)v178 - 1) = *((_OWORD *)v179 - 1);
              *(_OWORD *)v178 = v181;
              v178 -= 32;
              v179 -= 32;
              v180 -= 32;
            }
            while (v180);
            if (v155 == v168)
              goto LABEL_231;
            if ((v155 & 0x18) != 0)
              goto LABEL_219;
            v160 -= v168;
            v152 -= v168;
          }
          else
          {
            v168 = 0;
LABEL_219:
            v160 -= v155 & 0xFFFFFFFFFFFFFFF8;
            v182 = &v159[&v152[-v168] - v154 - 8];
            v183 = &v152[-v168 - 8];
            v184 = v168 - (v155 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v185 = *(_QWORD *)v183;
              v183 -= 8;
              *(_QWORD *)v182 = v185;
              v182 -= 8;
              v184 += 8;
            }
            while (v184);
            v152 -= v155 & 0xFFFFFFFFFFFFFFF8;
            if (v155 == (v155 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_231:
              v152 = (char *)__dst[0];
              v160 = v159;
              goto LABEL_232;
            }
          }
        }
        v187 = v160 - 1;
        do
        {
          v188 = *--v152;
          *v187-- = v188;
        }
        while (v152 != v154);
        goto LABEL_231;
      }
      v161 = *(_QWORD *)v503;
      v470 = off_1E0E157B8;
      v471 = (void **)v161;
      v472 = __dst;
      v473 = v459;
      v474 = &v489;
      v475 = v503 + 16;
      v162 = *(unsigned int *)(v503 + 64);
      if ((_DWORD)v162)
      {
        v163 = *(uint64_t **)(v503 + 56);
        v164 = 8 * v162;
        while (1)
        {
          v165 = *v163;
          LOBYTE(v524) = 0;
          LOBYTE(v526) = 0;
          if ((*(unsigned __int8 (**)(uint64_t, void (**)(_anonymous_namespace_::DialectWriter *__hidden), void (***)(_anonymous_namespace_::DialectWriter *__hidden), void (***)(_anonymous_namespace_::DialectWriter *__hidden)))(*(_QWORD *)v165 + 16))(v165, v143, &v524, &v470))
          {
            break;
          }
          ++v163;
          v164 -= 8;
          if (!v164)
            goto LABEL_196;
        }
      }
      else
      {
LABEL_196:
        v166 = *(_QWORD *)(v142[2] + 24);
        if (!v166
          || !(*(unsigned __int8 (**)(uint64_t, void (**)(_anonymous_namespace_::DialectWriter *__hidden), void (***)(_anonymous_namespace_::DialectWriter *__hidden)))(*(_QWORD *)v166 + 32))(v166, v143, &v470))
        {
          LODWORD(v525) = 0;
          LOBYTE(v529) = 0;
          v530 = 0;
          v531 = 1;
          v527 = 0;
          v528 = 0;
          v526 = 0;
          v524 = off_1E0E16A10;
          v532 = __dst;
          llvm::raw_ostream::SetBufferAndMode((uint64_t)&v524, 0, 0, 0);
          *(_QWORD *)&v487 = v143;
          mlir::Attribute::print((mlir::Attribute *)&v487, (llvm::raw_ostream *)&v524, 0);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v524);
          v169 = (char *)__dst[1];
          if (__dst[1] < v517[0])
          {
            *(_BYTE *)__dst[1] = 0;
            v170 = v169 + 1;
LABEL_249:
            v167 = 0;
            __dst[1] = v170;
            goto LABEL_250;
          }
          v171 = (char *)__dst[0];
          v172 = (char *)__dst[1] - (char *)__dst[0];
          v173 = (char *)__dst[1] - (char *)__dst[0] + 1;
          if (v173 < 0)
            goto LABEL_614;
          v174 = (char *)v517[0] - (char *)__dst[0];
          if (2 * ((char *)v517[0] - (char *)__dst[0]) > (unint64_t)v173)
            v173 = 2 * v174;
          if (v174 >= 0x3FFFFFFFFFFFFFFFLL)
            v175 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v175 = v173;
          if (v175)
          {
            v176 = (char *)operator new(v175);
            v177 = &v176[v172];
            v176[v172] = 0;
            v170 = &v176[v172 + 1];
            if (v169 == v171)
            {
LABEL_247:
              __dst[0] = v177;
              __dst[1] = v170;
              v517[0] = &v176[v175];
              if (v169)
                operator delete(v169);
              goto LABEL_249;
            }
          }
          else
          {
            v176 = 0;
            v177 = (char *)((char *)__dst[1] - (char *)__dst[0]);
            *(_BYTE *)v172 = 0;
            v170 = (char *)(v172 + 1);
            if (v169 == v171)
              goto LABEL_247;
          }
          if (v172 >= 8 && (unint64_t)(v171 - v176) >= 0x20)
          {
            if (v172 >= 0x20)
            {
              v186 = v172 & 0xFFFFFFFFFFFFFFE0;
              v189 = &v176[v172 - 16];
              v190 = v169 - 16;
              v191 = v172 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v192 = *(_OWORD *)v190;
                *((_OWORD *)v189 - 1) = *((_OWORD *)v190 - 1);
                *(_OWORD *)v189 = v192;
                v189 -= 32;
                v190 -= 32;
                v191 -= 32;
              }
              while (v191);
              if (v172 == v186)
                goto LABEL_246;
              if ((v172 & 0x18) != 0)
                goto LABEL_239;
              v177 -= v186;
              v169 -= v186;
            }
            else
            {
              v186 = 0;
LABEL_239:
              v177 -= v172 & 0xFFFFFFFFFFFFFFF8;
              v193 = &v176[&v169[-v186] - v171 - 8];
              v194 = &v169[-v186 - 8];
              v195 = v186 - (v172 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v196 = *(_QWORD *)v194;
                v194 -= 8;
                *(_QWORD *)v193 = v196;
                v193 -= 8;
                v195 += 8;
              }
              while (v195);
              v169 -= v172 & 0xFFFFFFFFFFFFFFF8;
              if (v172 == (v172 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_246:
                v169 = (char *)__dst[0];
                v177 = v176;
                goto LABEL_247;
              }
            }
          }
          v197 = v177 - 1;
          do
          {
            v198 = *--v169;
            *v197-- = v198;
          }
          while (v169 != v171);
          goto LABEL_246;
        }
      }
      v167 = 1;
LABEL_250:
      v153 = (char *)__dst[1];
LABEL_251:
      v141 = (char *)v517[7] + (unint64_t)v153 - (char *)__dst[0];
      v199 = v167 | (2 * (v141 - v136));
      if (v199 > 0x7F)
      {
      }
      else
      {
        v200 = (2 * v199) | 1;
        v201 = (char *)v481[1];
        if (v481[1] >= v482[0])
        {
          v202 = (char *)v481[0];
          v203 = (char *)v481[1] - (char *)v481[0];
          v204 = (char *)v481[1] - (char *)v481[0] + 1;
          if (v204 < 0)
            goto LABEL_614;
          v205 = (char *)v482[0] - (char *)v481[0];
          if (2 * ((char *)v482[0] - (char *)v481[0]) > (unint64_t)v204)
            v204 = 2 * v205;
          if (v205 >= 0x3FFFFFFFFFFFFFFFLL)
            v206 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v206 = v204;
          if (v206)
          {
            v207 = operator new(v206);
            v208 = &v207[v203];
            v207[v203] = v200;
            v209 = &v207[v203 + 1];
            if (v201 != v202)
            {
LABEL_262:
              if (v203 >= 8 && (unint64_t)(v202 - v207) >= 0x20)
              {
                if (v203 >= 0x20)
                {
                  v210 = v203 & 0xFFFFFFFFFFFFFFE0;
                  v211 = &v207[v203 - 16];
                  v212 = v201 - 16;
                  v213 = v203 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v214 = *(_OWORD *)v212;
                    *(v211 - 1) = *((_OWORD *)v212 - 1);
                    *v211 = v214;
                    v211 -= 2;
                    v212 -= 32;
                    v213 -= 32;
                  }
                  while (v213);
                  if (v203 == v210)
                    goto LABEL_280;
                  if ((v203 & 0x18) != 0)
                    goto LABEL_273;
                  v208 -= v210;
                  v201 -= v210;
                }
                else
                {
                  v210 = 0;
LABEL_273:
                  v208 -= v203 & 0xFFFFFFFFFFFFFFF8;
                  v215 = &v207[&v201[-v210] - v202 - 8];
                  v216 = &v201[-v210 - 8];
                  v217 = v210 - (v203 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v218 = *(_QWORD *)v216;
                    v216 -= 8;
                    *v215-- = v218;
                    v217 += 8;
                  }
                  while (v217);
                  v201 -= v203 & 0xFFFFFFFFFFFFFFF8;
                  if (v203 == (v203 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_280:
                    v201 = (char *)v481[0];
                    v481[0] = v207;
                    v481[1] = v209;
                    v482[0] = &v207[v206];
                    if (v201)
LABEL_281:
                      operator delete(v201);
LABEL_282:
                    v481[1] = v209;
                    goto LABEL_172;
                  }
                }
              }
              v219 = v208 - 1;
              do
              {
                v220 = *--v201;
                *v219-- = v220;
              }
              while (v201 != v202);
              goto LABEL_280;
            }
          }
          else
          {
            v207 = 0;
            v208 = (char *)((char *)v481[1] - (char *)v481[0]);
            *(_BYTE *)v203 = v200;
            v209 = (char *)(v203 + 1);
            if (v201 != v202)
              goto LABEL_262;
          }
          v481[0] = v208;
          v481[1] = v209;
          v482[0] = &v207[v206];
          if (v201)
            goto LABEL_281;
          goto LABEL_282;
        }
        *(_BYTE *)v481[1] = v200;
        v481[1] = v201 + 1;
      }
LABEL_172:
      ++v138;
      v136 = v141;
      if (v138 == v135)
        goto LABEL_163;
    }
  }
  v141 = 0;
LABEL_304:
  v235 = v501;
  v236 = v502;
  if (v501 == v502)
  {
LABEL_446:
    v334 = (char *)v484[0];
    if (v484[0])
    {
      v335 = v484[1];
      v336 = v484[0];
      if (v484[1] != v484[0])
      {
        v337 = (char *)v484[1];
        do
        {
          v339 = (void *)*((_QWORD *)v337 - 3);
          v337 -= 24;
          v338 = v339;
          if (v339)
          {
            *(v335 - 2) = v338;
            operator delete(v338);
          }
          v335 = v337;
        }
        while (v337 != v334);
        v336 = v484[0];
      }
      v484[1] = v334;
      operator delete(v336);
    }
    if (v482[1])
    {
      *(void **)&v483 = v482[1];
      operator delete(v482[1]);
    }
    if (v481[0])
    {
      v481[1] = v481[0];
      operator delete(v481[0]);
    }
    v340 = (char *)v517[4];
    if (v517[4])
    {
      v341 = v517[5];
      v342 = v517[4];
      if (v517[5] != v517[4])
      {
        v343 = (char *)v517[5];
        do
        {
          v345 = (void *)*((_QWORD *)v343 - 3);
          v343 -= 24;
          v344 = v345;
          if (v345)
          {
            *(v341 - 2) = v344;
            operator delete(v344);
          }
          v341 = v343;
        }
        while (v343 != v340);
        v342 = v517[4];
      }
      v517[5] = v340;
      operator delete(v342);
    }
    if (v517[1])
    {
      v517[2] = v517[1];
      operator delete(v517[1]);
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    memset(&v517[1], 0, 56);
    v518 = 1;
    v346 = operator new(1uLL);
    __dst[0] = v346;
    *v346 = 5;
    v517[0] = v346 + 1;
    __dst[1] = v346 + 1;
    if (v347)
    v348 = (char *)v517[4];
    if (v517[4])
    {
      v349 = v517[5];
      v350 = v517[4];
      if (v517[5] != v517[4])
      {
        v351 = (char *)v517[5];
        do
        {
          v353 = (void *)*((_QWORD *)v351 - 3);
          v351 -= 24;
          v352 = v353;
          if (v353)
          {
            *(v349 - 2) = v352;
            operator delete(v352);
          }
          v349 = v351;
        }
        while (v351 != v348);
        v350 = v517[4];
      }
      v517[5] = v348;
      operator delete(v350);
    }
    if (v517[1])
    {
      v517[2] = v517[1];
      operator delete(v517[1]);
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    if (!v347)
    {
      v394 = (char *)v467[0];
      if (!v467[0])
        goto LABEL_599;
      goto LABEL_592;
    }
    memset(v517, 0, sizeof(v517));
    *(_OWORD *)__dst = 0u;
    v518 = 1;
    *(_OWORD *)v484 = 0u;
    v485 = 0u;
    *(_OWORD *)v482 = 0u;
    v483 = 0u;
    *(_OWORD *)v481 = 0u;
    v486 = 1;
    v524 = (void (**)(_anonymous_namespace_::DialectWriter *__hidden))&v526;
    v525 = 0x100000000;
    v477 = __dst;
    v478 = &v524;
    v479 = &v480;
    v480 = 0;
    v476[0] = v481;
    v476[1] = &v524;
    v476[2] = &v489;
    v354 = *(_BYTE *)(v503 + 8);
    v470 = off_1E0E15D88;
    v471 = __dst;
    v472 = &v489;
    v474 = (llvm **)&v477;
    LOBYTE(v475) = v354;
    v355 = *(unsigned int *)(v503 + 192);
    if ((_DWORD)v355)
    {
      v356 = *(uint64_t **)(v503 + 184);
      v357 = 8 * v355;
      do
      {
        LODWORD(v525) = 0;
        (*(void (**)(uint64_t, uint64_t *, void (***)(_anonymous_namespace_::DialectWriter *__hidden)))(*(_QWORD *)*v356 + 16))(*v356, v453, &v470);
        v358 = *v356++;
        v359 = (_QWORD *)(v358 + 8);
        v360 = *(_QWORD **)(v358 + 8);
        v361 = *(char *)(v358 + 31);
        if (v361 >= 0)
          v362 = v359;
        else
          v362 = v360;
        v363 = v359[1];
        if (v361 >= 0)
          v364 = v361;
        else
          v364 = v363;
        v365 = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v362, v364);
        *(_QWORD *)&v487 = v362;
        *((_QWORD *)&v487 + 1) = __PAIR64__(v365, v364);
        v488[0] = v493;
        v366 = llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>((uint64_t)&v489, &v487, v488);
        v357 -= 8;
      }
      while (v357);
    }
    if ((_DWORD)v496)
    {
      v367 = v495;
      v368 = v495 + 24 * v496;
      do
      {
        v369 = *(_QWORD *)(v367 + 16);
        v370 = *(_QWORD *)(v369 + 32);
        if (v370)
        {
          LODWORD(v525) = 0;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, void (***)(_anonymous_namespace_::DialectWriter *__hidden)))(*(_QWORD *)v370 + 56))(v370, v453, v369 + 40, &v470);
          v371 = *(unsigned int *)(v369 + 112);
          if ((_DWORD)v371)
          {
            v372 = 24 * v371;
            v373 = (uint64_t *)(*(_QWORD *)(v369 + 104) + 8);
            do
            {
              if (*(_BYTE *)(v373[1] + 28))
              {
                v376 = *v373;
                v377 = (uint64_t)v478;
                v378 = (char *)v477[1] + (_QWORD)v477[9] - (char *)*v477;
                v379 = v378 - *v479;
                v380 = *((unsigned int *)v478 + 2);
                if (v380 < *((_DWORD *)v478 + 3))
                {
                  v374 = (uint64_t)&(*v478)[4 * v380];
                  *(_QWORD *)v374 = *(v373 - 1);
                  *(_QWORD *)(v374 + 8) = v376;
                  *(_DWORD *)(v374 + 16) = 0;
                  *(_QWORD *)(v374 + 24) = v379;
                  v375 = v380 + 1;
                }
                else
                {
                  *(_QWORD *)&v487 = *(v373 - 1);
                  *((_QWORD *)&v487 + 1) = v376;
                  LODWORD(v488[0]) = 0;
                  v488[1] = v379;
                  v381 = v380 + 1;
                  v382 = &(*v478)[4 * v380] > (void (**)(_anonymous_namespace_::DialectWriter *__hidden))&v487;
                  if (*v478 <= (void (**)(_anonymous_namespace_::DialectWriter *__hidden))&v487 && v382)
                  {
                    v387 = (char *)((char *)&v487 - (char *)*v478);
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v478, v478 + 2, v381, 32);
                    v383 = *(_QWORD *)v377;
                    v384 = (__int128 *)&v387[*(_QWORD *)v377];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v478, v478 + 2, v381, 32);
                    v383 = *(_QWORD *)v377;
                    v384 = &v487;
                  }
                  v385 = (__int128 *)(v383 + 32 * *(unsigned int *)(v377 + 8));
                  v386 = v384[1];
                  *v385 = *v384;
                  v385[1] = v386;
                  v375 = *(_DWORD *)(v377 + 8) + 1;
                }
                *(_DWORD *)(v377 + 8) = v375;
                *v479 = v378;
              }
              v373 += 3;
              v372 -= 24;
            }
            while (v372);
          }
          if ((_DWORD)v525)
        }
        v367 += 24;
      }
      while (v367 != v368);
    }
    if ((char *)v481[1] + *((_QWORD *)&v485 + 1) != v481[0])
    {
    }
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v470);
    if (v524 != (void (**)(_anonymous_namespace_::DialectWriter *__hidden))&v526)
      free(v524);
    v388 = (char *)v484[0];
    if (v484[0])
    {
      v389 = v484[1];
      v390 = v484[0];
      if (v484[1] != v484[0])
      {
        v391 = (char *)v484[1];
        do
        {
          v393 = (void *)*((_QWORD *)v391 - 3);
          v391 -= 24;
          v392 = v393;
          if (v393)
          {
            *(v389 - 2) = v392;
            operator delete(v392);
          }
          v389 = v391;
        }
        while (v391 != v388);
        v390 = v484[0];
      }
      v484[1] = v388;
      operator delete(v390);
    }
    if (v482[1])
    {
      *(void **)&v483 = v482[1];
      operator delete(v482[1]);
    }
    if (v481[0])
    {
      v481[1] = v481[0];
      operator delete(v481[0]);
    }
    v395 = (char *)v517[4];
    if (v517[4])
    {
      v396 = v517[5];
      v397 = v517[4];
      if (v517[5] != v517[4])
      {
        v398 = (char *)v517[5];
        do
        {
          v400 = (void *)*((_QWORD *)v398 - 3);
          v398 -= 24;
          v399 = v400;
          if (v400)
          {
            *(v396 - 2) = v399;
            operator delete(v399);
          }
          v396 = v398;
        }
        while (v398 != v395);
        v397 = v517[4];
      }
      v517[5] = v395;
      operator delete(v397);
    }
    if (v517[1])
    {
      v517[2] = v517[1];
      operator delete(v517[1]);
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    memset(v517, 0, sizeof(v517));
    *(_OWORD *)__dst = 0u;
    v518 = 1;
    if ((_DWORD)v493)
    {
      v401 = (char *)v492 - 16;
      v402 = 24 * v493;
      do
      {
        v402 -= 24;
      }
      while (v402);
      if ((_DWORD)v493)
      {
        v403 = (char **)v492;
        v404 = (char **)((char *)v492 + 24 * v493);
        do
        {
          v403 += 3;
        }
        while (v403 != v404);
      }
    }
    v405 = (char *)v517[4];
    if (v517[4])
    {
      v406 = v517[5];
      v407 = v517[4];
      if (v517[5] != v517[4])
      {
        v408 = (char *)v517[5];
        do
        {
          v410 = (void *)*((_QWORD *)v408 - 3);
          v408 -= 24;
          v409 = v410;
          if (v410)
          {
            *(v406 - 2) = v409;
            operator delete(v409);
          }
          v406 = v408;
        }
        while (v408 != v405);
        v407 = v517[4];
      }
      v517[5] = v405;
      operator delete(v407);
    }
    if (v517[1])
    {
      v517[2] = v517[1];
      operator delete(v517[1]);
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    if (*(uint64_t *)v503 < 5)
    {
      if (v504 != v505)
      {
        v481[0] = "unexpected properties emitted incompatible with bytecode <5";
        LOWORD(v483) = 259;
        mlir::Operation::emitError(v453, (uint64_t)v481, (uint64_t)__dst);
        mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__dst);
        if (__dst[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
        if (v523)
        {
          v414 = (_QWORD **)__p;
          if (__p)
          {
            v415 = v522;
            v416 = __p;
            if (v522 != __p)
            {
              do
                v415 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v415 - 1);
              while (v415 != v414);
              v416 = __p;
            }
            v522 = v414;
            operator delete(v416);
          }
          v41 = v519;
          if (!v519)
            goto LABEL_589;
          v417 = v520;
          v43 = v519;
          if (v520 == v519)
            goto LABEL_588;
          do
          {
            v419 = (void *)*--v417;
            v418 = v419;
            *v417 = 0;
            if (v419)
              operator delete[](v418);
          }
          while (v417 != v41);
          goto LABEL_587;
        }
LABEL_591:
        v394 = (char *)v467[0];
        if (!v467[0])
          goto LABEL_599;
        goto LABEL_592;
      }
    }
    else
    {
      memset(v517, 0, sizeof(v517));
      *(_OWORD *)__dst = 0u;
      v518 = 1;
      v411 = (char *)v504;
      v412 = v505;
      while (v411 != v412)
      {
        v413 = (char *)*((_QWORD *)v411 + 1);
        if (*(char **)v411 != v413)
          std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)__dst, (char *)__dst[1], *(char **)v411, v413, (int64_t)&v413[-*(_QWORD *)v411]);
        v411 += 24;
      }
      v420 = (char *)v517[4];
      if (v517[4])
      {
        v421 = v517[5];
        v422 = v517[4];
        if (v517[5] != v517[4])
        {
          v423 = (char *)v517[5];
          do
          {
            v425 = (void *)*((_QWORD *)v423 - 3);
            v423 -= 24;
            v424 = v425;
            if (v425)
            {
              *(v421 - 2) = v424;
              operator delete(v424);
            }
            v421 = v423;
          }
          while (v423 != v420);
          v422 = v517[4];
        }
        v517[5] = v420;
        operator delete(v422);
      }
      if (v517[1])
      {
        v517[2] = v517[1];
        operator delete(v517[1]);
      }
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
    }
    v431 = (char *)v465[1];
    v432 = (char *)v466;
    while (v431 != v432)
    {
      v433 = *(const char **)v431;
      v434 = *((_QWORD *)v431 + 1);
      v431 += 16;
      llvm::raw_ostream::write(v452, v433, v434);
    }
    llvm::raw_ostream::write(v452, (const char *)v464[0], (char *)v464[1] - (char *)v464[0]);
    v394 = (char *)v467[0];
    if (!v467[0])
    {
LABEL_599:
      if (v465[1])
      {
        *(void **)&v466 = v465[1];
        operator delete(v465[1]);
      }
      if (v464[0])
      {
        v464[1] = v464[0];
        operator delete(v464[0]);
      }
      llvm::deallocate_buffer(v510, (void *)(24 * v512));
    }
LABEL_592:
    v426 = v467[1];
    v427 = v394;
    if (v467[1] != v394)
    {
      v428 = (char *)v467[1];
      do
      {
        v430 = (void *)*((_QWORD *)v428 - 3);
        v428 -= 24;
        v429 = v430;
        if (v430)
        {
          *(v426 - 2) = v429;
          operator delete(v429);
        }
        v426 = v428;
      }
      while (v428 != v394);
      v427 = (char *)v467[0];
    }
    v467[1] = v394;
    operator delete(v427);
    goto LABEL_599;
  }
  v463 = v502;
  while (1)
  {
    v237 = v235;
    v238 = v235 + 1;
    v239 = *(_QWORD *)(*v235 + 16);
    v235 = v236;
    if (v238 != v236)
    {
      v235 = v238;
      do
      {
        if (*(_QWORD *)(*v235 + 16) != v239)
          goto LABEL_312;
        ++v235;
      }
      while (v235 != v236);
      v235 = v236;
    }
LABEL_312:
    if (v235 != v237)
      break;
    v240 = v141;
LABEL_306:
    v141 = v240;
    v236 = v463;
    if (v235 == v463)
      goto LABEL_446;
  }
  while (1)
  {
    v241 = (_QWORD *)*v237;
    v242 = (void (**)(_anonymous_namespace_::DialectWriter *__hidden))(*(_QWORD *)*v237 & 0xFFFFFFFFFFFFFFF8);
    v243 = *v242;
    if ((v244 & 1) == 0
    {
      v524 = (void (**)(_anonymous_namespace_::DialectWriter *__hidden))"StringRef llvm::getTypeName() [Desire"
                                                                                   "dTypeName = mlir::detail::StorageUser"
                                                                                   "Trait::IsMutable<Empty>]";
      v525 = 98;
      v320 = llvm::StringRef::find((uint64_t *)&v524, "DesiredTypeName = ", 0x12uLL, 0);
      if (v525 >= v320)
        v321 = v320;
      else
        v321 = v525;
      v322 = (char *)v524 + v321;
      v323 = v525 - v321;
      v324 = 18;
      if (v323 < 0x12)
        v324 = v323;
      v325 = v323 - v324;
      if (v325 >= v325 - 1)
        v326 = v325 - 1;
      else
        v326 = v325;
      mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v322[v324], v326);
    }
    v245 = (_QWORD *)((char *)v243 + 72);
    v246 = *((_QWORD *)v243 + 12);
    if ((v246 & 2) == 0)
      v245 = (_QWORD *)*v245;
    if (((*(uint64_t (**)(_QWORD *, uint64_t))(v246 & 0xFFFFFFFFFFFFFFF8))(v245, mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) != 0)goto LABEL_324;
    v247 = *v242;
    if ((v248 & 1) == 0
    {
      v524 = (void (**)(_anonymous_namespace_::DialectWriter *__hidden))"StringRef llvm::getTypeName() [Desire"
                                                                                   "dTypeName = mlir::detail::StorageUser"
                                                                                   "Trait::IsMutable<Empty>]";
      v525 = 98;
      v327 = llvm::StringRef::find((uint64_t *)&v524, "DesiredTypeName = ", 0x12uLL, 0);
      if (v525 >= v327)
        v328 = v327;
      else
        v328 = v525;
      v329 = (char *)v524 + v328;
      v330 = v525 - v328;
      v331 = 18;
      if (v330 < 0x12)
        v331 = v330;
      v332 = v330 - v331;
      if (v332 >= v332 - 1)
        v333 = v332 - 1;
      else
        v333 = v332;
      mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v329[v331], v333);
    }
    v249 = (_QWORD *)((char *)v247 + 72);
    v250 = *((_QWORD *)v247 + 12);
    if ((v250 & 2) == 0)
      v249 = (_QWORD *)*v249;
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v250 & 0xFFFFFFFFFFFFFFF8))(v249, mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id))
    {
LABEL_324:
      LODWORD(v525) = 0;
      LOBYTE(v529) = 0;
      v530 = 0;
      v531 = 1;
      v527 = 0;
      v528 = 0;
      v526 = 0;
      v524 = off_1E0E16A10;
      v532 = __dst;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v524, 0, 0, 0);
      v470 = v242;
      mlir::Type::print((llvm::raw_ostream *)&v470, (llvm::raw_ostream *)&v524);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v524);
      v251 = (char *)__dst[1];
      if (__dst[1] < v517[0])
      {
        *(_BYTE *)__dst[1] = 0;
        v252 = v251 + 1;
LABEL_377:
        v266 = 0;
        __dst[1] = v252;
        goto LABEL_394;
      }
      v253 = (char *)__dst[0];
      v254 = (char *)__dst[1] - (char *)__dst[0];
      v255 = (char *)__dst[1] - (char *)__dst[0] + 1;
      if (v255 < 0)
        goto LABEL_614;
      v256 = (char *)v517[0] - (char *)__dst[0];
      if (2 * ((char *)v517[0] - (char *)__dst[0]) > (unint64_t)v255)
        v255 = 2 * v256;
      if (v256 >= 0x3FFFFFFFFFFFFFFFLL)
        v257 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v257 = v255;
      if (v257)
      {
        v258 = (char *)operator new(v257);
        v259 = &v258[v254];
        v258[v254] = 0;
        v252 = &v258[v254 + 1];
        if (v251 == v253)
        {
LABEL_375:
          __dst[0] = v259;
          __dst[1] = v252;
          v517[0] = &v258[v257];
          if (v251)
            operator delete(v251);
          goto LABEL_377;
        }
      }
      else
      {
        v258 = 0;
        v259 = (char *)((char *)__dst[1] - (char *)__dst[0]);
        *(_BYTE *)v254 = 0;
        v252 = (char *)(v254 + 1);
        if (v251 == v253)
          goto LABEL_375;
      }
      if (v254 >= 8 && (unint64_t)(v253 - v258) >= 0x20)
      {
        if (v254 >= 0x20)
        {
          v267 = v254 & 0xFFFFFFFFFFFFFFE0;
          v277 = &v258[v254 - 16];
          v278 = v251 - 16;
          v279 = v254 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v280 = *(_OWORD *)v278;
            *((_OWORD *)v277 - 1) = *((_OWORD *)v278 - 1);
            *(_OWORD *)v277 = v280;
            v277 -= 32;
            v278 -= 32;
            v279 -= 32;
          }
          while (v279);
          if (v254 == v267)
            goto LABEL_374;
          if ((v254 & 0x18) != 0)
            goto LABEL_362;
          v259 -= v267;
          v251 -= v267;
        }
        else
        {
          v267 = 0;
LABEL_362:
          v259 -= v254 & 0xFFFFFFFFFFFFFFF8;
          v281 = &v258[&v251[-v267] - v253 - 8];
          v282 = &v251[-v267 - 8];
          v283 = v267 - (v254 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v284 = *(_QWORD *)v282;
            v282 -= 8;
            *(_QWORD *)v281 = v284;
            v281 -= 8;
            v283 += 8;
          }
          while (v283);
          v251 -= v254 & 0xFFFFFFFFFFFFFFF8;
          if (v254 == (v254 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_374:
            v251 = (char *)__dst[0];
            v259 = v258;
            goto LABEL_375;
          }
        }
      }
      v286 = v259 - 1;
      do
      {
        v287 = *--v251;
        *v286-- = v287;
      }
      while (v251 != v253);
      goto LABEL_374;
    }
    v260 = *(_QWORD *)v503;
    v470 = off_1E0E157B8;
    v471 = (void **)v260;
    v472 = __dst;
    v473 = v459;
    v474 = &v489;
    v475 = v503 + 16;
    v261 = *(unsigned int *)(v503 + 128);
    if ((_DWORD)v261)
    {
      v262 = *(uint64_t **)(v503 + 120);
      v263 = 8 * v261;
      while (1)
      {
        v264 = *v262;
        LOBYTE(v524) = 0;
        LOBYTE(v526) = 0;
        if ((*(unsigned __int8 (**)(uint64_t, void (**)(_anonymous_namespace_::DialectWriter *__hidden), void (***)(_anonymous_namespace_::DialectWriter *__hidden), void (***)(_anonymous_namespace_::DialectWriter *__hidden)))(*(_QWORD *)v264 + 16))(v264, v242, &v524, &v470))
        {
          break;
        }
        ++v262;
        v263 -= 8;
        if (!v263)
          goto LABEL_339;
      }
    }
    else
    {
LABEL_339:
      v265 = *(_QWORD *)(v241[2] + 24);
      if (!v265
        || !(*(unsigned __int8 (**)(uint64_t, void (**)(_anonymous_namespace_::DialectWriter *__hidden), void (***)(_anonymous_namespace_::DialectWriter *__hidden)))(*(_QWORD *)v265 + 40))(v265, v242, &v470))
      {
        LODWORD(v525) = 0;
        LOBYTE(v529) = 0;
        v530 = 0;
        v531 = 1;
        v527 = 0;
        v528 = 0;
        v526 = 0;
        v524 = off_1E0E16A10;
        v532 = __dst;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v524, 0, 0, 0);
        *(_QWORD *)&v487 = v242;
        mlir::Type::print((llvm::raw_ostream *)&v487, (llvm::raw_ostream *)&v524);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v524);
        v268 = (char *)__dst[1];
        if (__dst[1] < v517[0])
        {
          *(_BYTE *)__dst[1] = 0;
          v269 = v268 + 1;
LABEL_392:
          v266 = 0;
          __dst[1] = v269;
          goto LABEL_393;
        }
        v270 = (char *)__dst[0];
        v271 = (char *)__dst[1] - (char *)__dst[0];
        v272 = (char *)__dst[1] - (char *)__dst[0] + 1;
        if (v272 < 0)
          goto LABEL_614;
        v273 = (char *)v517[0] - (char *)__dst[0];
        if (2 * ((char *)v517[0] - (char *)__dst[0]) > (unint64_t)v272)
          v272 = 2 * v273;
        if (v273 >= 0x3FFFFFFFFFFFFFFFLL)
          v274 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v274 = v272;
        if (v274)
        {
          v275 = (char *)operator new(v274);
          v276 = &v275[v271];
          v275[v271] = 0;
          v269 = &v275[v271 + 1];
          if (v268 == v270)
          {
LABEL_390:
            __dst[0] = v276;
            __dst[1] = v269;
            v517[0] = &v275[v274];
            if (v268)
              operator delete(v268);
            goto LABEL_392;
          }
        }
        else
        {
          v275 = 0;
          v276 = (char *)((char *)__dst[1] - (char *)__dst[0]);
          *(_BYTE *)v271 = 0;
          v269 = (char *)(v271 + 1);
          if (v268 == v270)
            goto LABEL_390;
        }
        if (v271 >= 8 && (unint64_t)(v270 - v275) >= 0x20)
        {
          if (v271 >= 0x20)
          {
            v285 = v271 & 0xFFFFFFFFFFFFFFE0;
            v288 = &v275[v271 - 16];
            v289 = v268 - 16;
            v290 = v271 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v291 = *(_OWORD *)v289;
              *((_OWORD *)v288 - 1) = *((_OWORD *)v289 - 1);
              *(_OWORD *)v288 = v291;
              v288 -= 32;
              v289 -= 32;
              v290 -= 32;
            }
            while (v290);
            if (v271 == v285)
              goto LABEL_389;
            if ((v271 & 0x18) != 0)
              goto LABEL_382;
            v276 -= v285;
            v268 -= v285;
          }
          else
          {
            v285 = 0;
LABEL_382:
            v276 -= v271 & 0xFFFFFFFFFFFFFFF8;
            v292 = &v275[&v268[-v285] - v270 - 8];
            v293 = &v268[-v285 - 8];
            v294 = v285 - (v271 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v295 = *(_QWORD *)v293;
              v293 -= 8;
              *(_QWORD *)v292 = v295;
              v292 -= 8;
              v294 += 8;
            }
            while (v294);
            v268 -= v271 & 0xFFFFFFFFFFFFFFF8;
            if (v271 == (v271 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_389:
              v268 = (char *)__dst[0];
              v276 = v275;
              goto LABEL_390;
            }
          }
        }
        v296 = v276 - 1;
        do
        {
          v297 = *--v268;
          *v296-- = v297;
        }
        while (v268 != v270);
        goto LABEL_389;
      }
    }
    v266 = 1;
LABEL_393:
    v252 = (char *)__dst[1];
LABEL_394:
    v240 = (char *)v517[7] + (unint64_t)v252 - (char *)__dst[0];
    v298 = v266 | (2 * (v240 - v141));
    if (v298 > 0x7F)
    {
    }
    else
    {
      v299 = (2 * v298) | 1;
      v300 = (char *)v481[1];
      if (v481[1] >= v482[0])
      {
        v301 = (char *)v481[0];
        v302 = (char *)v481[1] - (char *)v481[0];
        v303 = (char *)v481[1] - (char *)v481[0] + 1;
        if (v303 < 0)
          goto LABEL_614;
        v304 = (char *)v482[0] - (char *)v481[0];
        if (2 * ((char *)v482[0] - (char *)v481[0]) > (unint64_t)v303)
          v303 = 2 * v304;
        if (v304 >= 0x3FFFFFFFFFFFFFFFLL)
          v305 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v305 = v303;
        if (v305)
        {
          v306 = (char *)operator new(v305);
          v307 = &v306[v302];
          v306[v302] = v299;
          v308 = &v306[v302 + 1];
          if (v300 == v301)
            goto LABEL_423;
LABEL_407:
          if (v302 >= 8 && (unint64_t)(v301 - v306) >= 0x20)
          {
            if (v302 >= 0x20)
            {
              v309 = v302 & 0xFFFFFFFFFFFFFFE0;
              v310 = &v306[v302 - 16];
              v311 = v300 - 16;
              v312 = v302 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v313 = *(_OWORD *)v311;
                *((_OWORD *)v310 - 1) = *((_OWORD *)v311 - 1);
                *(_OWORD *)v310 = v313;
                v310 -= 32;
                v311 -= 32;
                v312 -= 32;
              }
              while (v312);
              if (v302 == v309)
                goto LABEL_422;
              if ((v302 & 0x18) != 0)
                goto LABEL_415;
              v307 -= v309;
              v300 -= v309;
            }
            else
            {
              v309 = 0;
LABEL_415:
              v307 -= v302 & 0xFFFFFFFFFFFFFFF8;
              v314 = &v306[&v300[-v309] - v301 - 8];
              v315 = &v300[-v309 - 8];
              v316 = v309 - (v302 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v317 = *(_QWORD *)v315;
                v315 -= 8;
                *(_QWORD *)v314 = v317;
                v314 -= 8;
                v316 += 8;
              }
              while (v316);
              v300 -= v302 & 0xFFFFFFFFFFFFFFF8;
              if (v302 == (v302 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_422:
                v300 = (char *)v481[0];
                v307 = v306;
                goto LABEL_423;
              }
            }
          }
          v318 = v307 - 1;
          do
          {
            v319 = *--v300;
            *v318-- = v319;
          }
          while (v300 != v301);
          goto LABEL_422;
        }
        v306 = 0;
        v307 = (char *)((char *)v481[1] - (char *)v481[0]);
        *(_BYTE *)v302 = v299;
        v308 = (char *)(v302 + 1);
        if (v300 != v301)
          goto LABEL_407;
LABEL_423:
        v481[0] = v307;
        v481[1] = v308;
        v482[0] = &v306[v305];
        if (v300)
          operator delete(v300);
        v481[1] = v308;
        goto LABEL_315;
      }
      *(_BYTE *)v481[1] = v299;
      v481[1] = v300 + 1;
    }
LABEL_315:
    ++v237;
    v141 = v240;
    if (v237 == v235)
      goto LABEL_306;
  }
}

void `anonymous namespace'::EncodingEmitter::emitVarInt(char **this, unint64_t a2)
{
  char v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;

  if (a2 > 0x7F)
  {
    return;
  }
  v3 = (2 * a2) | 1;
  v5 = this[1];
  v4 = this[2];
  if (v5 < v4)
  {
    *v5 = v3;
    v6 = (uint64_t)(v5 + 1);
LABEL_4:
    this[1] = (char *)v6;
    return;
  }
  v7 = *this;
  v8 = v5 - *this;
  v9 = v8 + 1;
  if ((uint64_t)(v8 + 1) < 0)
    abort();
  v10 = v4 - v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = (char *)operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v3;
    v6 = (uint64_t)&v12[v8 + 1];
    if (v5 != v7)
    {
LABEL_14:
      if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
        goto LABEL_30;
      if (v8 >= 0x20)
      {
        v15 = v8 & 0xFFFFFFFFFFFFFFE0;
        v16 = v5 - 16;
        v17 = &v12[v5 - 16 - v7];
        v18 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v19 = *(_OWORD *)v16;
          *((_OWORD *)v17 - 1) = *((_OWORD *)v16 - 1);
          *(_OWORD *)v17 = v19;
          v17 -= 32;
          v16 -= 32;
          v18 -= 32;
        }
        while (v18);
        if (v8 == v15)
        {
LABEL_32:
          v5 = *this;
          *this = v12;
          this[1] = (char *)v6;
          this[2] = v14;
          if (!v5)
            goto LABEL_4;
          goto LABEL_33;
        }
        if ((v8 & 0x18) == 0)
        {
          v13 -= v15;
          v5 -= v15;
          goto LABEL_30;
        }
      }
      else
      {
        v15 = 0;
      }
      v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
      v20 = &v5[-v15 - 8];
      v21 = &v12[v20 - v7];
      v22 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v23 = *(_QWORD *)v20;
        v20 -= 8;
        *(_QWORD *)v21 = v23;
        v21 -= 8;
        v22 += 8;
      }
      while (v22);
      v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
      if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_32;
LABEL_30:
      v24 = v13 - 1;
      do
      {
        v25 = *--v5;
        *v24-- = v25;
      }
      while (v5 != v7);
      goto LABEL_32;
    }
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - *this);
    v14 = 0;
    *(_BYTE *)v8 = v3;
    v6 = v8 + 1;
    if (v5 != v7)
      goto LABEL_14;
  }
  *this = v13;
  this[1] = (char *)v6;
  this[2] = v14;
  if (!v5)
    goto LABEL_4;
LABEL_33:
  operator delete(v5);
  this[1] = (char *)v6;
}

void `anonymous namespace'::EncodingEmitter::emitNulTerminatedString(uint64_t a1, char *a2, int64_t a3)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;

  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(a1, *(char **)(a1 + 8), a2, &a2[a3], a3);
  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *v5 = 0;
    v7 = (uint64_t)(v5 + 1);
LABEL_3:
    *(_QWORD *)(a1 + 8) = v7;
    return;
  }
  v8 = *(char **)a1;
  v9 = (unint64_t)&v5[-*(_QWORD *)a1];
  v10 = v9 + 1;
  if ((uint64_t)(v9 + 1) < 0)
    abort();
  v11 = v4 - (_QWORD)v8;
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
    v12 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (!v12)
  {
    v13 = 0;
    v14 = &v5[-*(_QWORD *)a1];
    v15 = 0;
    *(_BYTE *)v9 = 0;
    v7 = v9 + 1;
    if (v5 != v8)
      goto LABEL_12;
LABEL_17:
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v5)
      goto LABEL_3;
    goto LABEL_31;
  }
  v13 = operator new(v12);
  v14 = &v13[v9];
  v15 = &v13[v12];
  v13[v9] = 0;
  v7 = (uint64_t)&v13[v9 + 1];
  if (v5 == v8)
    goto LABEL_17;
LABEL_12:
  if (v9 < 8 || (unint64_t)(v8 - v13) < 0x20)
    goto LABEL_28;
  if (v9 < 0x20)
  {
    v16 = 0;
    goto LABEL_23;
  }
  v16 = v9 & 0xFFFFFFFFFFFFFFE0;
  v17 = (__int128 *)(v5 - 16);
  v18 = &v13[v5 - 16 - v8];
  v19 = v9 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v20 = *v17;
    *(v18 - 1) = *(v17 - 1);
    *v18 = v20;
    v18 -= 2;
    v17 -= 2;
    v19 -= 32;
  }
  while (v19);
  if (v9 != v16)
  {
    if ((v9 & 0x18) == 0)
    {
      v14 -= v16;
      v6 = &v5[-v16];
      goto LABEL_28;
    }
LABEL_23:
    v6 = &v5[-(v9 & 0xFFFFFFFFFFFFFFF8)];
    v14 -= v9 & 0xFFFFFFFFFFFFFFF8;
    v21 = &v5[-v16 - 8];
    v22 = &v13[v21 - v8];
    v23 = v16 - (v9 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v24 = *(_QWORD *)v21;
      v21 -= 8;
      *v22-- = v24;
      v23 += 8;
    }
    while (v23);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
LABEL_28:
    v25 = v14 - 1;
    do
    {
      v26 = *--v6;
      *v25-- = v26;
    }
    while (v6 != v8);
  }
LABEL_30:
  v6 = *(char **)a1;
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v15;
  if (!v6)
    goto LABEL_3;
LABEL_31:
  operator delete(v6);
  *(_QWORD *)(a1 + 8) = v7;
}

char *std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  __int128 v33;
  char v34;
  char *v35;
  size_t v36;
  char *v37;
  char *v38;
  _OWORD *v39;
  __int128 *v40;
  unint64_t v41;
  __int128 v42;
  char v43;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      abort();
    v13 = __dst - v11;
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v15 = (size_t)operator new(v15);
    }
    else
    {
      v16 = 0;
    }
    v25 = v15 + v13;
    v26 = v15;
    memcpy((void *)(v15 + v13), __src, a5);
    v27 = v26;
    v28 = v25;
    if (v11 != v5)
    {
      v29 = v5;
      v28 = v25;
      if (v13 < 0x20)
        goto LABEL_47;
      v29 = v5;
      v28 = v25;
      if ((unint64_t)&v11[-v27] < 0x20)
        goto LABEL_47;
      v29 = &v5[-(v13 & 0xFFFFFFFFFFFFFFE0)];
      v28 = v25 - (v13 & 0xFFFFFFFFFFFFFFE0);
      v30 = v5 - 16;
      v31 = (char *)(v27 + v5 - 16 - v11);
      v32 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v33 = *(_OWORD *)v30;
        *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
        *(_OWORD *)v31 = v33;
        v31 -= 32;
        v30 -= 32;
        v32 -= 32;
      }
      while (v32);
      if (v13 != (v13 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_47:
        do
        {
          v34 = *--v29;
          *(_BYTE *)--v28 = v34;
        }
        while (v29 != v11);
      }
      v10 = *(char **)(a1 + 8);
    }
    v35 = (char *)(v25 + a5);
    v36 = v27 + v16;
    if (v10 != v5)
      memmove(v35, v5, v10 - v5);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v35[v10 - v5];
    *(_QWORD *)(a1 + 16) = v36;
    if (v37)
      operator delete(v37);
    return (char *)v25;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
    v21 = &__dst[a5];
    v22 = &v10[-a5];
    v23 = v20;
    if ((unint64_t)v10 < a5)
      goto LABEL_39;
    goto LABEL_18;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    v21 = &v5[a5];
    v22 = &v20[-a5];
    v23 = &v10[v19];
    if (&v20[-a5] >= v10)
      goto LABEL_39;
LABEL_18:
    v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        v38 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        v39 = v20 + 16;
        v40 = (__int128 *)(v22 + 16);
        v41 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 32;
        }
        while (v41);
        v22 = v38;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_39;
      }
    }
    else
    {
      v23 = v20;
    }
    do
    {
      v43 = *v22++;
      *v23++ = v43;
    }
    while (v22 != v10);
LABEL_39:
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(v21, v5, v20 - v21);
    if (v18 != __src)
      memmove(v5, __src, v18 - __src);
  }
  return v5;
}

char *`anonymous namespace'::EncodingEmitter::emitMultiByteVarInt(char **this, unint64_t a2)
{
  _anonymous_namespace_::EncodingEmitter *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  int64_t v28;
  uint64_t v30;
  uint64_t v31;

  v3 = (_anonymous_namespace_::EncodingEmitter *)this;
  v31 = *MEMORY[0x1E0C80C00];
  if (!(a2 >> 14))
  {
    v28 = 2;
LABEL_47:
    v30 = ((2 * a2) | 1) << (v28 - 1);
    v27 = this[1];
    v26 = (char *)&v30 + v28;
    return std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)this, v27, (char *)&v30, v26, v28);
  }
  if (a2 < 0x200000)
  {
    v28 = 3;
    goto LABEL_47;
  }
  if (!(a2 >> 28))
  {
    v28 = 4;
    goto LABEL_47;
  }
  if (!(a2 >> 35))
  {
    v28 = 5;
    goto LABEL_47;
  }
  if (!(a2 >> 42))
  {
    v28 = 6;
    goto LABEL_47;
  }
  if (!(a2 >> 49))
  {
    v28 = 7;
    goto LABEL_47;
  }
  if (!HIBYTE(a2))
  {
    v28 = 8;
    goto LABEL_47;
  }
  v5 = this[1];
  v4 = (unint64_t)this[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *this;
    v8 = v5 - *this;
    v9 = v8 + 1;
    if ((uint64_t)(v8 + 1) < 0)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = operator new(v11);
      v13 = &v12[v8];
      v14 = &v12[v11];
      v12[v8] = 0;
      v6 = (uint64_t)&v12[v8 + 1];
      if (v5 != v7)
      {
LABEL_18:
        if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
          goto LABEL_34;
        if (v8 >= 0x20)
        {
          v15 = v8 & 0xFFFFFFFFFFFFFFE0;
          v16 = v5 - 16;
          v17 = &v12[v5 - 16 - v7];
          v18 = v8 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v19 = *(_OWORD *)v16;
            *(v17 - 1) = *((_OWORD *)v16 - 1);
            *v17 = v19;
            v17 -= 2;
            v16 -= 32;
            v18 -= 32;
          }
          while (v18);
          if (v8 == v15)
          {
LABEL_36:
            v5 = *(char **)v3;
            *(_QWORD *)v3 = v12;
            *((_QWORD *)v3 + 1) = v6;
            *((_QWORD *)v3 + 2) = v14;
            if (!v5)
              goto LABEL_38;
LABEL_37:
            operator delete(v5);
            goto LABEL_38;
          }
          if ((v8 & 0x18) == 0)
          {
            v13 -= v15;
            v5 -= v15;
            goto LABEL_34;
          }
        }
        else
        {
          v15 = 0;
        }
        v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v20 = &v5[-v15 - 8];
        v21 = &v12[v20 - v7];
        v22 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v23 = *(_QWORD *)v20;
          v20 -= 8;
          *v21-- = v23;
          v22 += 8;
        }
        while (v22);
        v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_36;
LABEL_34:
        v24 = v13 - 1;
        do
        {
          v25 = *--v5;
          *v24-- = v25;
        }
        while (v5 != v7);
        goto LABEL_36;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*(_QWORD *)v3];
      v14 = 0;
      *(_BYTE *)v8 = 0;
      v6 = v8 + 1;
      if (v5 != v7)
        goto LABEL_18;
    }
    *(_QWORD *)v3 = v13;
    *((_QWORD *)v3 + 1) = v6;
    *((_QWORD *)v3 + 2) = v14;
    if (!v5)
      goto LABEL_38;
    goto LABEL_37;
  }
  *v5 = 0;
  v6 = (uint64_t)(v5 + 1);
LABEL_38:
  *((_QWORD *)v3 + 1) = v6;
  v30 = a2;
  v26 = (char *)&v31;
  this = (char **)v3;
  v27 = (char *)v6;
  v28 = 8;
  return std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)this, v27, (char *)&v30, v26, v28);
}

void `anonymous namespace'::EncodingEmitter::emitSection(_anonymous_namespace_::EncodingEmitter *this, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  unsigned int v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  unsigned int v39;

  v6 = *(char **)this;
  v7 = (char *)*((_QWORD *)this + 1);
  v8 = v7;
  v9 = (unint64_t)&v7[-*(_QWORD *)this];
  v10 = *((_QWORD *)this + 2);
  if ((unint64_t)v7 < v10)
  {
    *v7 = a2;
    v11 = (uint64_t)(v7 + 1);
    goto LABEL_31;
  }
  v12 = v9 + 1;
  if ((uint64_t)(v9 + 1) < 0)
    abort();
  v13 = v10 - (_QWORD)v6;
  if (2 * v13 > v12)
    v12 = 2 * v13;
  if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    v15 = operator new(v14);
    v16 = &v15[v9];
    v17 = &v15[v14];
    v15[v9] = a2;
    v11 = (uint64_t)&v15[v9 + 1];
    if (v7 != v6)
    {
LABEL_11:
      if (v9 < 8 || (unint64_t)(v6 - v15) < 0x20)
        goto LABEL_27;
      if (v9 >= 0x20)
      {
        v18 = v9 & 0xFFFFFFFFFFFFFFE0;
        v19 = (__int128 *)(v7 - 16);
        v20 = &v15[v7 - 16 - v6];
        v21 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v22 = *v19;
          *(v20 - 1) = *(v19 - 1);
          *v20 = v22;
          v20 -= 2;
          v19 -= 2;
          v21 -= 32;
        }
        while (v21);
        if (v9 == v18)
        {
LABEL_29:
          v8 = *(char **)this;
          *(_QWORD *)this = v15;
          *((_QWORD *)this + 1) = v11;
          *((_QWORD *)this + 2) = v17;
          if (!v8)
            goto LABEL_31;
          goto LABEL_30;
        }
        if ((v9 & 0x18) == 0)
        {
          v16 -= v18;
          v8 = &v7[-v18];
          goto LABEL_27;
        }
      }
      else
      {
        v18 = 0;
      }
      v8 = &v7[-(v9 & 0xFFFFFFFFFFFFFFF8)];
      v16 -= v9 & 0xFFFFFFFFFFFFFFF8;
      v23 = &v7[-v18 - 8];
      v24 = &v15[v23 - v6];
      v25 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v26 = *(_QWORD *)v23;
        v23 -= 8;
        *v24-- = v26;
        v25 += 8;
      }
      while (v25);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_29;
LABEL_27:
      v27 = v16 - 1;
      do
      {
        v28 = *--v8;
        *v27-- = v28;
      }
      while (v8 != v6);
      goto LABEL_29;
    }
  }
  else
  {
    v15 = 0;
    v16 = (char *)v9;
    v17 = 0;
    *(_BYTE *)v9 = a2;
    v11 = v9 + 1;
    if (v7 != v6)
      goto LABEL_11;
  }
  *(_QWORD *)this = v16;
  *((_QWORD *)this + 1) = v11;
  *((_QWORD *)this + 2) = v17;
  if (v7)
LABEL_30:
    operator delete(v8);
LABEL_31:
  *((_QWORD *)this + 1) = v11;
  v29 = *(_DWORD *)(a3 + 80);
  v30 = *(char **)this;
  v31 = (char *)*((_QWORD *)this + 1);
  if (v29 < 2)
    goto LABEL_34;
  if (((*((_DWORD *)this + 18) + (_DWORD)v31 - (_DWORD)v30) & (*(_DWORD *)(a3 + 80) - 1)) != 0)
  {
    *(_BYTE *)(*(_QWORD *)this + v9) |= 0x80u;
    v30 = *(char **)this;
    v31 = (char *)*((_QWORD *)this + 1);
LABEL_34:
    if (v30 == v31)
      goto LABEL_39;
    goto LABEL_35;
  }
  v39 = *((_DWORD *)this + 20);
  if (v39 <= v29)
    v39 = *(_DWORD *)(a3 + 80);
  *((_DWORD *)this + 20) = v39;
  if (v30 != v31)
  {
LABEL_35:
    v32 = (_QWORD *)*((_QWORD *)this + 7);
    if ((unint64_t)v32 >= *((_QWORD *)this + 8))
    {
      v33 = std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>((char **)this + 6, (uint64_t)this);
    }
    else
    {
      *v32 = 0;
      v32[1] = 0;
      v32[2] = 0;
      *(_OWORD *)v32 = *(_OWORD *)this;
      v32[2] = *((_QWORD *)this + 2);
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      v33 = (char *)(v32 + 3);
    }
    *((_QWORD *)this + 7) = v33;
  }
LABEL_39:
  v34 = *(_QWORD *)(a3 + 48);
  v35 = *(_QWORD *)(a3 + 56);
  if (v34 != v35)
  {
    v36 = (char *)*((_QWORD *)this + 7);
    do
    {
      while ((unint64_t)v36 >= *((_QWORD *)this + 8))
      {
        v36 = std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>((char **)this + 6, v34);
        *((_QWORD *)this + 7) = v36;
        v34 += 24;
        if (v34 == v35)
          goto LABEL_44;
      }
      *(_QWORD *)v36 = 0;
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v36 + 2) = 0;
      *(_OWORD *)v36 = *(_OWORD *)v34;
      *((_QWORD *)v36 + 2) = *(_QWORD *)(v34 + 16);
      *(_QWORD *)v34 = 0;
      *(_QWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v34 + 16) = 0;
      v36 += 24;
      *((_QWORD *)this + 7) = v36;
      v34 += 24;
    }
    while (v34 != v35);
  }
LABEL_44:
  std::vector<llvm::ArrayRef<unsigned char>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<llvm::ArrayRef<unsigned char>*>,std::__wrap_iter<llvm::ArrayRef<unsigned char>*>>((uint64_t)this + 24, *((_QWORD *)this + 4), *(char **)(a3 + 24), *(char **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 4);
  *((_QWORD *)this + 9) += *(_QWORD *)(a3 + 72);
  if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
  {
    v37 = (_QWORD *)*((_QWORD *)this + 7);
    if ((unint64_t)v37 >= *((_QWORD *)this + 8))
    {
      v38 = std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>((char **)this + 6, a3);
    }
    else
    {
      *v37 = 0;
      v37[1] = 0;
      v37[2] = 0;
      *(_OWORD *)v37 = *(_OWORD *)a3;
      v37[2] = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v38 = (char *)(v37 + 3);
    }
    *((_QWORD *)this + 7) = v38;
  }
}

uint64_t llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v20 = *a2;
  LODWORD(v21) = 0;
  v19 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::LookupBucketFor<llvm::CachedHashStringRef>((uint64_t *)a1, (uint64_t)&v20, &v19) & 1) != 0)return *(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(v19 + 16);
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::InsertIntoBucketImpl<llvm::CachedHashStringRef>(a1, (uint64_t)&v20, (uint64_t)&v20, v19);
  *(_OWORD *)v7 = v20;
  *(_DWORD *)(v7 + 16) = v21;
  v8 = (_QWORD *)(a1 + 24);
  v9 = *(unsigned int *)(a1 + 32);
  *(_DWORD *)(v7 + 16) = v9;
  if (v9 >= *(_DWORD *)(a1 + 36))
  {
    v20 = *a2;
    v21 = *a3;
    v12 = v9 + 1;
    v13 = *v8 + 24 * (unint64_t)v9 > (unint64_t)&v20;
    if (*v8 <= (unint64_t)&v20 && v13)
    {
      v18 = (char *)&v20 - *v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v12, 24);
      v14 = *(_QWORD *)(a1 + 24);
      v15 = &v18[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v12, 24);
      v14 = *(_QWORD *)(a1 + 24);
      v15 = (char *)&v20;
    }
    v16 = v14 + 24 * *(unsigned int *)(a1 + 32);
    v17 = *(_OWORD *)v15;
    *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 + 2);
    *(_OWORD *)v16 = v17;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24) + 24 * v9;
    *(_OWORD *)v10 = *a2;
    *(_QWORD *)(v10 + 16) = *a3;
  }
  v11 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v11;
  return *v8 + 24 * v11 - 24;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::LookupBucketFor<llvm::CachedHashStringRef>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  size_t v14;
  unsigned int v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = 0;
    v7 = *a1;
    v17 = xmmword_181235180;
    v18 = xmmword_181234BE0;
    v8 = v4 - 1;
    v9 = 1;
    v10 = *(_DWORD *)(a2 + 12) & (v4 - 1);
    v11 = v7 + 24 * v10;
    if (*(_DWORD *)(a2 + 12) != *(_DWORD *)(v11 + 12))
      goto LABEL_12;
LABEL_3:
    v12 = *(const void **)a2;
    v13 = *(const void **)v11;
    if (*(_QWORD *)v11 == -2)
    {
      if (v12 != (const void *)-2)
        goto LABEL_12;
    }
    else if (v13 == (const void *)-1)
    {
      if (v12 != (const void *)-1)
        goto LABEL_12;
    }
    else
    {
      v14 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v14 != *(_DWORD *)(v11 + 8) || (_DWORD)v14 && memcmp(v12, v13, v14))
      {
LABEL_12:
        while (!llvm::DenseMapInfo<llvm::CachedHashStringRef,void>::isEqual(v11, (uint64_t)&v18))
        {
          if ((llvm::DenseMapInfo<llvm::CachedHashStringRef,void>::isEqual(v11, (uint64_t)&v17) & (v6 == 0)) != 0)
            v6 = v11;
          v15 = v10 + v9++;
          v10 = v15 & v8;
          v11 = v7 + 24 * (v15 & v8);
          if (*(_DWORD *)(a2 + 12) == *(_DWORD *)(v11 + 12))
            goto LABEL_3;
        }
        result = 0;
        if (v6)
          v11 = v6;
        goto LABEL_18;
      }
    }
    result = 1;
LABEL_18:
    *a3 = v11;
    return result;
  }
  result = 0;
  *a3 = 0;
  return result;
}

uint64_t llvm::DenseMapInfo<llvm::CachedHashStringRef,void>::isEqual(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  size_t v7;

  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  v4 = *(const void **)a1;
  v5 = *(const void **)a2;
  if (v5 == (const void *)-2)
    return v4 == (const void *)-2;
  if (v5 == (const void *)-1)
    return v4 == (const void *)-1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7 != *(_DWORD *)(a2 + 8))
    return 0;
  if ((_DWORD)v7)
    return memcmp(v4, v5, v7) == 0;
  return 1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::InsertIntoBucketImpl<llvm::CachedHashStringRef>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_8:
    llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::LookupBucketFor<llvm::CachedHashStringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*(_DWORD *)(a4 + 12))
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_8;
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 12))
  {
LABEL_5:
    --*(_DWORD *)(a1 + 12);
    return a4;
  }
LABEL_4:
  if (*(_QWORD *)a4 != -1)
    goto LABEL_5;
  return a4;
}

_OWORD *llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 24 * v10 - 24;
      if (v11 >= 0x18)
      {
        v16 = v11 / 0x18 + 1;
        v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
        v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
        v18 = result;
        do
        {
          *v18 = xmmword_181234BE0;
          *(_OWORD *)((char *)v18 + 24) = xmmword_181234BE0;
          v18 += 3;
          v17 -= 2;
        }
        while (v17);
        if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
          goto LABEL_16;
      }
      else
      {
        v12 = result;
      }
      v19 = (_OWORD *)((char *)result + 24 * v10);
      do
      {
        *v12 = xmmword_181234BE0;
        v12 = (_OWORD *)((char *)v12 + 24);
      }
      while (v12 != v19);
    }
LABEL_16:
    if (!(_DWORD)v3)
LABEL_25:
      llvm::deallocate_buffer(v4, (void *)(24 * v3));
    v20 = 24 * v3;
    v21 = (uint64_t)v4;
    while (1)
    {
      v23 = *(_DWORD *)(v21 + 12);
      if (v23 != 1)
        break;
      if (*(_QWORD *)v21 != -2)
        goto LABEL_19;
LABEL_20:
      v21 += 24;
      v20 -= 24;
      if (!v20)
        goto LABEL_25;
    }
    if (!v23 && *(_QWORD *)v21 == -1)
      goto LABEL_20;
LABEL_19:
    v28 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::LookupBucketFor<llvm::CachedHashStringRef>((uint64_t *)a1, v21, (uint64_t *)&v28);
    v22 = v28;
    *v28 = *(_OWORD *)v21;
    *((_DWORD *)v22 + 4) = *(_DWORD *)(v21 + 16);
    ++*(_DWORD *)(a1 + 8);
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_29:
      v27 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181234BE0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v27);
      return result;
    }
    v24 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v24 & 0x1FFFFFFFFFFFFFFELL));
    v25 = v24 & 0x1FFFFFFFFFFFFFFELL;
    v26 = result;
    do
    {
      *v26 = xmmword_181234BE0;
      *(_OWORD *)((char *)v26 + 24) = xmmword_181234BE0;
      v26 += 3;
      v25 -= 2;
    }
    while (v25);
    if (v24 != (v24 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_29;
  }
  return result;
}

void `anonymous namespace'::DialectWriter::writeAttribute(uint64_t a1, uint64_t a2)
{
  char **v2;
  unint64_t Number;

  v2 = *(char ***)(a1 + 16);
  Number = mlir::bytecode::detail::IRNumberingState::getNumber(*(_QWORD *)(a1 + 24), a2);
}

void `anonymous namespace'::DialectWriter::writeOptionalAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  if (a2)
  {
    v3 = (2 * mlir::bytecode::detail::IRNumberingState::getNumber(*(_QWORD *)(a1 + 24), a2)) | 1;
    return;
  }
  v5 = *(char **)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  if ((unint64_t)v5 < v4)
  {
    *v5 = 1;
    v6 = (uint64_t)(v5 + 1);
LABEL_5:
    *(_QWORD *)(v2 + 8) = v6;
    return;
  }
  v7 = *(char **)v2;
  v8 = (unint64_t)&v5[-*(_QWORD *)v2];
  v9 = v8 + 1;
  if ((uint64_t)(v8 + 1) < 0)
    abort();
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
    v12 = operator new(v11);
  else
    v12 = 0;
  v13 = &v12[v8];
  v14 = &v12[v11];
  v12[v8] = 1;
  v6 = (uint64_t)&v12[v8 + 1];
  if (v5 == v7)
  {
    *(_QWORD *)v2 = v13;
    *(_QWORD *)(v2 + 8) = v6;
    *(_QWORD *)(v2 + 16) = v14;
    if (!v5)
      goto LABEL_5;
    goto LABEL_34;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_31;
  if (v8 < 0x20)
  {
    v15 = 0;
    goto LABEL_26;
  }
  v15 = v8 & 0xFFFFFFFFFFFFFFE0;
  v16 = v5 - 16;
  v17 = &v12[v5 - 16 - v7];
  v18 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v19 = *(_OWORD *)v16;
    *(v17 - 1) = *((_OWORD *)v16 - 1);
    *v17 = v19;
    v17 -= 2;
    v16 -= 32;
    v18 -= 32;
  }
  while (v18);
  if (v8 != v15)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v15;
      v5 -= v15;
      goto LABEL_31;
    }
LABEL_26:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v20 = &v5[-v15 - 8];
    v21 = &v12[v20 - v7];
    v22 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *(_QWORD *)v20;
      v20 -= 8;
      *v21-- = v23;
      v22 += 8;
    }
    while (v22);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_33;
LABEL_31:
    v24 = v13 - 1;
    do
    {
      v25 = *--v5;
      *v24-- = v25;
    }
    while (v5 != v7);
  }
LABEL_33:
  v5 = *(char **)v2;
  *(_QWORD *)v2 = v12;
  *(_QWORD *)(v2 + 8) = v6;
  *(_QWORD *)(v2 + 16) = v14;
  if (!v5)
    goto LABEL_5;
LABEL_34:
  operator delete(v5);
  *(_QWORD *)(v2 + 8) = v6;
}

void `anonymous namespace'::DialectWriter::writeType(uint64_t a1, uint64_t a2)
{
  char **v2;
  unint64_t Number;

  v2 = *(char ***)(a1 + 16);
  Number = mlir::bytecode::detail::IRNumberingState::getNumber(*(_QWORD *)(a1 + 24), a2);
}

void `anonymous namespace'::DialectWriter::writeResourceHandle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  int v18;

  v4 = *(char ***)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v3 + 232);
  v5 = v3 + 232;
  v6 = v7;
  v8 = *(_DWORD *)(v5 + 16);
  if (!v8)
  {
    v13 = 0;
LABEL_6:
    v14 = *(unsigned int *)(llvm::DenseMapBase<llvm::DenseMap<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>,mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>::InsertIntoBucket<mlir::AsmDialectResourceHandle const&>(v5, v13, a2)[3]+ 24);
    return;
  }
  v9 = v8 - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
  v11 = (_QWORD *)(v6 + 32 * v10);
  v12 = *v11;
  if (*a2 != *v11)
  {
    v15 = 0;
    v16 = 1;
    while (v12 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v12 == -8192;
      if (v17)
        v15 = v11;
      v18 = v10 + v16++;
      v10 = v18 & v9;
      v11 = (_QWORD *)(v6 + 32 * v10);
      v12 = *v11;
      if (*a2 == *v11)
        goto LABEL_3;
    }
    if (v15)
      v13 = v15;
    else
      v13 = v11;
    goto LABEL_6;
  }
LABEL_3:
}

void `anonymous namespace'::DialectWriter::writeVarInt(char ***this, unint64_t a2)
{
}

void `anonymous namespace'::DialectWriter::writeSignedVarInt(char ***this, uint64_t a2)
{
}

void `anonymous namespace'::DialectWriter::writeAPIntWithKnownWidth(_anonymous_namespace_::DialectWriter *this, const llvm::APInt *a2)
{
  const llvm::APInt *v2;
  unsigned int v4;
  _QWORD *v5;
  char v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;

  v2 = a2;
  v4 = *((_DWORD *)a2 + 2);
  if (v4 <= 8)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 2);
    v6 = *(_BYTE *)a2;
    v8 = (_BYTE *)v5[1];
    v7 = v5[2];
    if ((unint64_t)v8 < v7)
    {
      *v8 = v6;
      v5[1] = v8 + 1;
      return;
    }
    v9 = (_BYTE *)*v5;
    v10 = (unint64_t)&v8[-*v5];
    v11 = v10 + 1;
    if ((uint64_t)(v10 + 1) < 0)
      abort();
    v12 = v7 - (_QWORD)v9;
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = operator new(v13);
      v15 = &v14[v10];
      v16 = &v14[v13];
      v14[v10] = v6;
      v17 = (uint64_t)&v14[v10 + 1];
      if (v8 != v9)
      {
LABEL_14:
        if (v10 < 8 || (unint64_t)(v9 - v14) < 0x20)
          goto LABEL_37;
        if (v10 >= 0x20)
        {
          v18 = v10 & 0xFFFFFFFFFFFFFFE0;
          v22 = (__int128 *)(v8 - 16);
          v23 = &v14[v8 - 16 - v9];
          v24 = v10 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v25 = *v22;
            *(v23 - 1) = *(v22 - 1);
            *v23 = v25;
            v23 -= 2;
            v22 -= 2;
            v24 -= 32;
          }
          while (v24);
          if (v10 == v18)
          {
LABEL_39:
            v8 = (_BYTE *)*v5;
            *v5 = v14;
            v5[1] = v17;
            v5[2] = v16;
            if (!v8)
            {
LABEL_41:
              v5[1] = v17;
              return;
            }
LABEL_40:
            operator delete(v8);
            goto LABEL_41;
          }
          if ((v10 & 0x18) == 0)
          {
            v15 -= v18;
            v8 -= v18;
            goto LABEL_37;
          }
        }
        else
        {
          v18 = 0;
        }
        v15 -= v10 & 0xFFFFFFFFFFFFFFF8;
        v26 = &v8[-v18 - 8];
        v27 = &v14[v26 - v9];
        v28 = v18 - (v10 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v29 = *(_QWORD *)v26;
          v26 -= 8;
          *v27-- = v29;
          v28 += 8;
        }
        while (v28);
        v8 -= v10 & 0xFFFFFFFFFFFFFFF8;
        if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_39;
LABEL_37:
        v30 = v15 - 1;
        do
        {
          v31 = *--v8;
          *v30-- = v31;
        }
        while (v8 != v9);
        goto LABEL_39;
      }
    }
    else
    {
      v14 = 0;
      v15 = &v8[-*v5];
      v16 = 0;
      *(_BYTE *)v10 = v6;
      v17 = v10 + 1;
      if (v8 != v9)
        goto LABEL_14;
    }
    *v5 = v15;
    v5[1] = v17;
    v5[2] = v16;
    if (!v8)
      goto LABEL_41;
    goto LABEL_40;
  }
  if (v4 > 0x40)
  {
    v19 = llvm::APInt::countLeadingZerosSlowCase(a2);
    if (v4 == v19)
      v20 = 1;
    else
      v20 = ((v4 + ~v19) >> 6) + 1;
    if (*((_DWORD *)v2 + 2) >= 0x41u)
      v2 = *(const llvm::APInt **)v2;
    do
    {
      v21 = *(_QWORD *)v2;
      v2 = (const llvm::APInt *)((char *)v2 + 8);
      --v20;
    }
    while (v20);
  }
  else
  {
  }
}

void `anonymous namespace'::DialectWriter::writeAPFloatWithKnownSemantics(_anonymous_namespace_::DialectWriter *this, const llvm::APFloat *a2)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  void *__p;
  unsigned int v6;

  v3 = (const llvm::APFloat *)((char *)a2 + 8);
  v4 = (void *)*((_QWORD *)a2 + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v4)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v3, (llvm::APInt *)&__p);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt(v3, (uint64_t)&__p);
  (*(void (**)(_anonymous_namespace_::DialectWriter *, void **))(*(_QWORD *)this + 64))(this, &__p);
  if (v6 >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
}

void `anonymous namespace'::DialectWriter::writeOwnedString(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v3;
  char **v5;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = a3;
  v5 = *(char ***)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(a2, a3);
  v8 = *(unsigned int *)(v6 + 32);
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = __PAIR64__(HashValue, v3);
  v11 = v8;
  v9 = llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>(v6, &v10, &v11);
}

void `anonymous namespace'::DialectWriter::writeOwnedBlob(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  char *v8;

  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)v6 != *(_QWORD *)(v6 + 8))
  {
    v7 = *(_QWORD **)(v6 + 56);
    if ((unint64_t)v7 >= *(_QWORD *)(v6 + 64))
    {
      v8 = std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>((char **)(v6 + 48), v6);
    }
    else
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v7[2] = *(_QWORD *)(v6 + 16);
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      v8 = (char *)(v7 + 3);
    }
    *(_QWORD *)(v6 + 56) = v8;
  }
}

void `anonymous namespace'::DialectWriter::writeOwnedBool(_anonymous_namespace_::DialectWriter *this, char a2)
{
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  v5 = (char *)v3[1];
  v4 = v3[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*v3;
    v9 = (unint64_t)&v5[-*v3];
    v10 = v9 + 1;
    if ((uint64_t)(v9 + 1) < 0)
      abort();
    v11 = v4 - (_QWORD)v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = operator new(v12);
      v14 = &v13[v9];
      v15 = &v13[v12];
      v13[v9] = a2;
      v7 = (uint64_t)&v13[v9 + 1];
      if (v5 != v8)
      {
LABEL_11:
        if (v9 < 8 || (unint64_t)(v8 - v13) < 0x20)
          goto LABEL_27;
        if (v9 >= 0x20)
        {
          v16 = v9 & 0xFFFFFFFFFFFFFFE0;
          v17 = (__int128 *)(v5 - 16);
          v18 = &v13[v5 - 16 - v8];
          v19 = v9 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v20 = *v17;
            *(v18 - 1) = *(v17 - 1);
            *v18 = v20;
            v18 -= 2;
            v17 -= 2;
            v19 -= 32;
          }
          while (v19);
          if (v9 == v16)
          {
LABEL_29:
            v6 = (char *)*v3;
            *v3 = v13;
            v3[1] = v7;
            v3[2] = v15;
            if (!v6)
              goto LABEL_31;
LABEL_30:
            operator delete(v6);
            goto LABEL_31;
          }
          if ((v9 & 0x18) == 0)
          {
            v14 -= v16;
            v6 = &v5[-v16];
            goto LABEL_27;
          }
        }
        else
        {
          v16 = 0;
        }
        v6 = &v5[-(v9 & 0xFFFFFFFFFFFFFFF8)];
        v14 -= v9 & 0xFFFFFFFFFFFFFFF8;
        v21 = &v5[-v16 - 8];
        v22 = &v13[v21 - v8];
        v23 = v16 - (v9 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v24 = *(_QWORD *)v21;
          v21 -= 8;
          *v22-- = v24;
          v23 += 8;
        }
        while (v23);
        if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_29;
LABEL_27:
        v25 = v14 - 1;
        do
        {
          v26 = *--v6;
          *v25-- = v26;
        }
        while (v6 != v8);
        goto LABEL_29;
      }
    }
    else
    {
      v13 = 0;
      v14 = &v5[-*v3];
      v15 = 0;
      *(_BYTE *)v9 = a2;
      v7 = v9 + 1;
      if (v5 != v8)
        goto LABEL_11;
    }
    *v3 = v14;
    v3[1] = v7;
    v3[2] = v15;
    if (!v5)
      goto LABEL_31;
    goto LABEL_30;
  }
  *v5 = a2;
  v7 = (uint64_t)(v5 + 1);
LABEL_31:
  v3[1] = v7;
}

uint64_t `anonymous namespace'::DialectWriter::getBytecodeVersion(_anonymous_namespace_::DialectWriter *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t `anonymous namespace'::DialectWriter::getDialectVersion(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v4;
  int Key;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 40);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)v4, a2, a3);
  if (Key == -1)
    v6 = *(unsigned int *)(v4 + 8);
  else
    v6 = Key;
  v7 = *(_QWORD *)v4 + 8 * v6;
  if (v7 == **(_QWORD **)(a1 + 40) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)v7 + 8);
}

uint64_t mlir::bytecode::detail::IRNumberingState::getNumber(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v4 = *(_DWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_22;
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
    return *(unsigned int *)(v7[1] + 8);
  v11 = 0;
  v12 = 1;
  while (v8 != -4096)
  {
    if (v11)
      v13 = 0;
    else
      v13 = v8 == -8192;
    if (v13)
      v11 = v7;
    v14 = v6 + v12++;
    v6 = v14 & v5;
    v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v14 & v5));
    v8 = *v7;
    if (*v7 == a2)
      return *(unsigned int *)(v7[1] + 8);
  }
  if (v11)
    v7 = v11;
  v15 = *(_DWORD *)(a1 + 8);
  if (4 * v15 + 4 < 3 * v4)
  {
    if (v4 + ~v15 - *(_DWORD *)(a1 + 12) > v4 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_22:
    v4 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1, v4);
  v16 = *(_DWORD *)(a1 + 16) - 1;
  v17 = v16 & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v17);
  v18 = *v7;
  if (*v7 == a2)
  {
    v10 = a2;
    goto LABEL_7;
  }
  v19 = 0;
  v20 = 1;
  while (v18 != -4096)
  {
    if (v19)
      v21 = 0;
    else
      v21 = v18 == -8192;
    if (v21)
      v19 = v7;
    v22 = v17 + v20++;
    v17 = v22 & v16;
    v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v22 & v16));
    v18 = *v7;
    v10 = a2;
    if (*v7 == a2)
      goto LABEL_7;
  }
  if (v19)
    v7 = v19;
LABEL_6:
  v10 = *v7;
LABEL_7:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v7 = a2;
  v7[1] = 0;
  return *(unsigned int *)(v7[1] + 8);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = a1 + 72;
  v5 = v6;
  v7 = *(_DWORD *)(v4 + 16);
  if (!v7)
    goto LABEL_22;
  v8 = v7 - 1;
  v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (_QWORD *)(v5 + 16 * v9);
  v11 = *v10;
  if (*v10 == a2)
    return *(unsigned int *)(v10[1] + 8);
  v14 = 0;
  v15 = 1;
  while (v11 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v11 == -8192;
    if (v16)
      v14 = v10;
    v17 = v9 + v15++;
    v9 = v17 & v8;
    v10 = (_QWORD *)(v5 + 16 * (v17 & v8));
    v11 = *v10;
    if (*v10 == a2)
      return *(unsigned int *)(v10[1] + 8);
  }
  if (v14)
    v10 = v14;
  v18 = *(_DWORD *)(a1 + 80);
  if (4 * v18 + 4 < 3 * v7)
  {
    if (v7 + ~v18 - *(_DWORD *)(a1 + 84) > v7 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_22:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_DWORD *)(a1 + 88) - 1;
  v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (_QWORD *)(v19 + 16 * v21);
  v22 = *v10;
  if (*v10 == a2)
  {
    v13 = a2;
    goto LABEL_7;
  }
  v23 = 0;
  v24 = 1;
  while (v22 != -4096)
  {
    if (v23)
      v25 = 0;
    else
      v25 = v22 == -8192;
    if (v25)
      v23 = v10;
    v26 = v21 + v24++;
    v21 = v26 & v20;
    v10 = (_QWORD *)(v19 + 16 * (v26 & v20));
    v22 = *v10;
    v13 = a2;
    if (*v10 == a2)
      goto LABEL_7;
  }
  if (v23)
    v10 = v23;
LABEL_6:
  v13 = *v10;
LABEL_7:
  ++*(_DWORD *)(a1 + 80);
  if (v13 != -4096)
    --*(_DWORD *)(a1 + 84);
  *v10 = a2;
  v10[1] = 0;
  return *(unsigned int *)(v10[1] + 8);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v6 = *(_QWORD *)(a1 + 48);
  v4 = a1 + 48;
  v5 = v6;
  v7 = *(_DWORD *)(v4 + 16);
  if (!v7)
    goto LABEL_22;
  v8 = v7 - 1;
  v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (_QWORD *)(v5 + 16 * v9);
  v11 = *v10;
  if (*v10 == a2)
    return *(unsigned int *)(v10[1] + 16);
  v14 = 0;
  v15 = 1;
  while (v11 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v11 == -8192;
    if (v16)
      v14 = v10;
    v17 = v9 + v15++;
    v9 = v17 & v8;
    v10 = (_QWORD *)(v5 + 16 * (v17 & v8));
    v11 = *v10;
    if (*v10 == a2)
      return *(unsigned int *)(v10[1] + 16);
  }
  if (v14)
    v10 = v14;
  v18 = *(_DWORD *)(a1 + 56);
  if (4 * v18 + 4 < 3 * v7)
  {
    if (v7 + ~v18 - *(_DWORD *)(a1 + 60) > v7 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_22:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_DWORD *)(a1 + 64) - 1;
  v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (_QWORD *)(v19 + 16 * v21);
  v22 = *v10;
  if (*v10 == a2)
  {
    v13 = a2;
    goto LABEL_7;
  }
  v23 = 0;
  v24 = 1;
  while (v22 != -4096)
  {
    if (v23)
      v25 = 0;
    else
      v25 = v22 == -8192;
    if (v25)
      v23 = v10;
    v26 = v21 + v24++;
    v21 = v26 & v20;
    v10 = (_QWORD *)(v19 + 16 * (v26 & v20));
    v22 = *v10;
    v13 = a2;
    if (*v10 == a2)
      goto LABEL_7;
  }
  if (v23)
    v10 = v23;
LABEL_6:
  v13 = *v10;
LABEL_7:
  ++*(_DWORD *)(a1 + 56);
  if (v13 != -4096)
    --*(_DWORD *)(a1 + 60);
  *v10 = a2;
  v10[1] = 0;
  return *(unsigned int *)(v10[1] + 16);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>,mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>::InsertIntoBucket<mlir::AsmDialectResourceHandle const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  int v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>::grow(a1, v7);
  v8 = *a3;
  v11 = *(_DWORD *)(a1 + 16) - 1;
  v12 = ((*a3 >> 4) ^ (*a3 >> 9)) & v11;
  a2 = (_QWORD *)(*(_QWORD *)a1 + 32 * v12);
  v13 = *a2;
  if (*a3 != *a2)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = a2;
      v17 = v12 + v15++;
      v12 = v17 & v11;
      a2 = (_QWORD *)(*(_QWORD *)a1 + 32 * v12);
      v13 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v14)
      a2 = v14;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  v9 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v9;
  a2[3] = 0;
  return a2;
}

_QWORD *llvm::DenseMap<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  int v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *(v13 - 3) = -4096;
        *v13 = -4096;
        v13[1] = -4096;
        *(v13 - 2) = 0;
        v13[2] = 0;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -4096;
          v10[1] = -4096;
          v10[2] = 0;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v24 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = *(_DWORD *)(a1 + 16) - 1;
          v26 = v25 & ((v24 >> 4) ^ (v24 >> 9));
          v22 = (_QWORD *)(*(_QWORD *)a1 + 32 * v26);
          v27 = *v22;
          if (v24 != *v22)
          {
            v28 = 0;
            v29 = 1;
            while (v27 != -4096)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v27 == -8192;
              if (v30)
                v28 = v22;
              v31 = v26 + v29++;
              v26 = v31 & v25;
              v22 = (_QWORD *)(*(_QWORD *)a1 + 32 * v26);
              v27 = *v22;
              if (v24 == *v22)
                goto LABEL_24;
            }
            if (v28)
              v22 = v28;
          }
LABEL_24:
          v23 = *(_OWORD *)v16;
          v22[2] = *((_QWORD *)v16 + 2);
          *(_OWORD *)v22 = v23;
          v22[3] = *((_QWORD *)v16 + 3);
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v18 & 0xFFFFFFFFFFFFFFELL)];
    v19 = result + 4;
    v20 = v18 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -4096;
      *(v19 - 3) = -4096;
      *v19 = -4096;
      v19[1] = -4096;
      *(v19 - 2) = 0;
      v19[2] = 0;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[4 * v17];
      do
      {
        *v10 = -4096;
        v10[1] = -4096;
        v10[2] = 0;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

void `anonymous namespace'::EncodingEmitter::appendOwnedResult(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  if (a3)
  {
    a1[9] += a3;
    v7 = (char *)a1[4];
    v6 = a1[5];
    if ((unint64_t)v7 < v6)
    {
      *(_QWORD *)v7 = a2;
      *((_QWORD *)v7 + 1) = a3;
      v8 = (uint64_t)(v7 + 16);
LABEL_19:
      a1[4] = v8;
      return;
    }
    v9 = (char *)a1[3];
    v10 = (v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = (char *)operator new(16 * v13);
      v15 = &v14[16 * v10];
      v16 = &v14[16 * v13];
      *(_QWORD *)v15 = a2;
      *((_QWORD *)v15 + 1) = a3;
      v8 = (uint64_t)(v15 + 16);
      if (v7 == v9)
        goto LABEL_17;
    }
    else
    {
      v15 = (char *)(16 * v10);
      v16 = 0;
      *(_QWORD *)v15 = a2;
      *((_QWORD *)v15 + 1) = a3;
      v8 = 16 * v10 + 16;
      if (v7 == v9)
      {
LABEL_17:
        a1[3] = v15;
        a1[4] = v8;
        a1[5] = v16;
        if (v7)
          operator delete(v7);
        goto LABEL_19;
      }
    }
    do
    {
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 16;
      v7 -= 16;
    }
    while (v7 != v9);
    v7 = (char *)a1[3];
    goto LABEL_17;
  }
}

char *std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>(char **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v2];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void `anonymous namespace'::EncodingEmitter::alignTo(_anonymous_namespace_::EncodingEmitter *this, unsigned int a2)
{
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  char v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;

  if (a2 >= 2)
  {
    v4 = (_BYTE *)*((_QWORD *)this + 1);
    v5 = (unint64_t)&v4[*((_QWORD *)this + 9) - *(_QWORD *)this - 1 + a2] % a2;
    v6 = a2 - 1;
    v7 = v6 - v5;
    if (v6 != v5)
    {
      while (1)
      {
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v4 >= v9)
          break;
        *v4 = -53;
        v8 = (uint64_t)(v4 + 1);
LABEL_5:
        *((_QWORD *)this + 1) = v8;
        v4 = (_BYTE *)v8;
        if (!--v7)
          goto LABEL_38;
      }
      v10 = *(_QWORD *)this;
      v11 = (unint64_t)&v4[-*(_QWORD *)this];
      v12 = v11 + 1;
      if ((uint64_t)(v11 + 1) < 0)
        abort();
      v13 = v9 - v10;
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = operator new(v14);
        v16 = (char *)v15 + v11;
        *((_BYTE *)v15 + v11) = -53;
        v8 = (uint64_t)v15 + v11 + 1;
        if (v4 == (_BYTE *)v10)
        {
LABEL_25:
          *(_QWORD *)this = v16;
          *((_QWORD *)this + 1) = v8;
          *((_QWORD *)this + 2) = (char *)v15 + v14;
          if (v4)
            operator delete(v4);
          goto LABEL_5;
        }
      }
      else
      {
        v15 = 0;
        v16 = &v4[-*(_QWORD *)this];
        *(_BYTE *)v11 = -53;
        v8 = v11 + 1;
        if (v4 == (_BYTE *)v10)
          goto LABEL_25;
      }
      if (v11 < 8
        || (char *)v15 + v11 + v10 - (_QWORD)v4 > (char *)v15 + v11 - 1
        || v10 > (unint64_t)(v4 - 1)
        || v10 - (unint64_t)v15 < 0x20)
      {
        v17 = v4;
        goto LABEL_22;
      }
      if (v11 >= 0x20)
      {
        v20 = v11 & 0xFFFFFFFFFFFFFFE0;
        v21 = (char *)v15 + v11 - 16;
        v22 = (__int128 *)(v4 - 16);
        v23 = v11 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 32;
        }
        while (v23);
        if (v11 == v20)
          goto LABEL_24;
        if ((v11 & 0x18) == 0)
        {
          v16 -= v20;
          v17 = &v4[-v20];
LABEL_22:
          v18 = v16 - 1;
          do
          {
            v19 = *--v17;
            *v18-- = v19;
          }
          while (v17 != (_BYTE *)v10);
LABEL_24:
          v4 = *(_BYTE **)this;
          v16 = (char *)v15;
          goto LABEL_25;
        }
      }
      else
      {
        v20 = 0;
      }
      v17 = &v4[-(v11 & 0xFFFFFFFFFFFFFFF8)];
      v16 -= v11 & 0xFFFFFFFFFFFFFFF8;
      v25 = &v4[-v20 - v10 - 8 + (_QWORD)v15];
      v26 = (uint64_t *)&v4[-v20 - 8];
      v27 = v20 - (v11 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v28 = *v26--;
        *v25-- = v28;
        v27 += 8;
      }
      while (v27);
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_24;
      goto LABEL_22;
    }
LABEL_38:
    v29 = *((_DWORD *)this + 20);
    if (v29 <= a2)
      v29 = a2;
    *((_DWORD *)this + 20) = v29;
  }
}

char *std::vector<llvm::ArrayRef<unsigned char>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<llvm::ArrayRef<unsigned char>*>,std::__wrap_iter<llvm::ArrayRef<unsigned char>*>>(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  uint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  __int128 *v23;
  char *v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  _BYTE *v34;
  char *v35;
  size_t v36;
  char *v37;

  v5 = *(char **)a1;
  v6 = a2 - *(_QWORD *)a1;
  v7 = (char *)(*(_QWORD *)a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1)
    return v7;
  v9 = __src;
  v12 = *(__int128 **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (a5 > (v11 - (uint64_t)v12) >> 4)
  {
    v13 = a5 + (((char *)v12 - v5) >> 4);
    if (v13 >> 60)
      abort();
    v14 = v11 - (_QWORD)v5;
    v15 = v14 >> 3;
    if (v14 >> 3 <= v13)
      v15 = v13;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = &v17[16 * (v6 >> 4)];
    v27 = 16 * a5;
    v28 = &v26[16 * a5];
    v29 = v26;
    do
    {
      v30 = *(_OWORD *)v9;
      v9 += 16;
      *(_OWORD *)v29 = v30;
      v29 += 16;
      v27 -= 16;
    }
    while (v27);
    v31 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      v33 = v26;
      v35 = &v17[16 * v16];
      v36 = (char *)v12 - v7;
      if (v12 == (__int128 *)v7)
        goto LABEL_33;
    }
    else
    {
      v32 = v7;
      v33 = v26;
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v32 - 1);
        v33 -= 16;
        v32 -= 16;
      }
      while (v32 != v31);
      v34 = *(_BYTE **)(a1 + 8);
      v35 = &v17[16 * v16];
      v36 = v34 - v7;
      if (v34 == v7)
        goto LABEL_33;
    }
    memmove(v28, v7, v36);
LABEL_33:
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v33;
    *(_QWORD *)(a1 + 8) = &v28[v36];
    *(_QWORD *)(a1 + 16) = v35;
    if (v37)
      operator delete(v37);
    return v26;
  }
  v18 = ((char *)v12 - v7) >> 4;
  if (v18 >= a5)
  {
    v19 = &__src[16 * a5];
    v21 = *(char **)(a1 + 8);
    v22 = &v7[16 * a5];
    v23 = &v12[-a5];
    v24 = v21;
    if (v23 >= v12)
    {
LABEL_21:
      *(_QWORD *)(a1 + 8) = v24;
      if (v21 != v22)
        memmove(&v21[-16 * ((v21 - v22) >> 4)], v7, v21 - v22);
      if (v19 != v9)
        memmove(v7, v9, v19 - v9);
      return v7;
    }
LABEL_19:
    v24 = v21;
    do
    {
      v25 = *v23++;
      *(_OWORD *)v24 = v25;
      v24 += 16;
    }
    while (v23 < v12);
    goto LABEL_21;
  }
  v19 = &__src[16 * v18];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  v21 = (char *)v12 + v20;
  *(_QWORD *)(a1 + 8) = (char *)v12 + v20;
  if ((char *)v12 - v7 >= 1)
  {
    v22 = &v7[16 * a5];
    v23 = (__int128 *)&v21[-16 * a5];
    v24 = (char *)v12 + v20;
    if (v23 >= v12)
      goto LABEL_21;
    goto LABEL_19;
  }
  return v7;
}

void `anonymous namespace'::RawEmitterOstream::~RawEmitterOstream(_anonymous_namespace_::RawEmitterOstream *this)
{
  void *v1;

  llvm::raw_ostream::~raw_ostream(this);
  operator delete(v1);
}

uint64_t llvm::raw_ostream::is_displayed(llvm::raw_ostream *this)
{
  return 0;
}

uint64_t llvm::raw_ostream::has_colors(llvm::raw_ostream *this)
{
  return (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)this + 48))(this);
}

uint64_t llvm::raw_ostream::enable_colors(uint64_t this, char a2)
{
  *(_BYTE *)(this + 40) = a2;
  return this;
}

char *`anonymous namespace'::RawEmitterOstream::write_impl(_anonymous_namespace_::RawEmitterOstream *this, char *__src, int64_t a3)
{
  return std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 8), *(char **)(*((_QWORD *)this + 8) + 8), __src, &__src[a3], a3);
}

uint64_t `anonymous namespace'::RawEmitterOstream::current_pos(_anonymous_namespace_::RawEmitterOstream *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 72) + *(_QWORD *)(*((_QWORD *)this + 8) + 8) - **((_QWORD **)this + 8);
}

BOOL `anonymous namespace'::BytecodeWriter::writeOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::bytecode::detail::IRNumberingState *v6;
  unsigned int Number;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  void *InterfaceFor;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  void (*v41)(llvm::raw_svector_ostream *__hidden);
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  unint64_t v58;
  __int128 *v59;
  void (**v60)(llvm::raw_svector_ostream *__hidden);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t NextResultAtOffset;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  void (***v68)(llvm::raw_svector_ostream *__hidden);
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  mlir::Block **v72;
  mlir::Block *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  int64_t v77;
  int v78;
  _BOOL4 isIsolatedFromAbove;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v89;
  char *v90;
  char *v91;
  void *v92;
  void *v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  int v102;
  BOOL v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  char *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  size_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  __int128 v122;
  char *v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char v128;
  int v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  unint64_t v133;
  unint64_t *v134;
  int v135;
  BOOL v136;
  unsigned int v137;
  unint64_t AttrDictionary;
  char v139;
  _QWORD v140[2];
  _QWORD v141[3];
  __int128 v142;
  _QWORD *v143;
  void (**v144)(llvm::raw_svector_ostream *__hidden);
  __int128 *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 __p;
  __int128 v157;
  int v158;
  unint64_t v159[5];

  v159[2] = *MEMORY[0x1E0C80C00];
  v6 = (mlir::bytecode::detail::IRNumberingState *)(a1 + 40);
  Number = mlir::bytecode::detail::IRNumberingState::getNumber(a1 + 40, *(_QWORD *)(a3 + 48));
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(char **)a2;
  v10 = *(char **)(a2 + 8);
  v11 = v10;
  v139 = 0;
  v12 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v10 < v12)
  {
    *v10 = 0;
    v13 = (uint64_t)(v10 + 1);
    goto LABEL_31;
  }
  v14 = v10 - v9;
  v15 = v10 - v9 + 1;
  if (v15 < 0)
LABEL_184:
    abort();
  v16 = v12 - (_QWORD)v9;
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    v18 = operator new(v17);
    v19 = &v18[v14];
    v20 = &v18[v17];
    v18[v14] = 0;
    v13 = (uint64_t)&v18[v14 + 1];
    if (v10 != v9)
    {
LABEL_11:
      if (v14 < 8 || (unint64_t)(v9 - v18) < 0x20)
        goto LABEL_27;
      if (v14 >= 0x20)
      {
        v21 = v14 & 0xFFFFFFFFFFFFFFE0;
        v22 = v10 - 16;
        v23 = &v18[v10 - 16 - v9];
        v24 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v25 = *(_OWORD *)v22;
          *(v23 - 1) = *((_OWORD *)v22 - 1);
          *v23 = v25;
          v23 -= 2;
          v22 -= 32;
          v24 -= 32;
        }
        while (v24);
        if (v14 == v21)
        {
LABEL_29:
          v11 = *(char **)a2;
          *(_QWORD *)a2 = v18;
          *(_QWORD *)(a2 + 8) = v13;
          *(_QWORD *)(a2 + 16) = v20;
          if (!v11)
            goto LABEL_31;
          goto LABEL_30;
        }
        if ((v14 & 0x18) == 0)
        {
          v19 -= v21;
          v11 = &v10[-v21];
          goto LABEL_27;
        }
      }
      else
      {
        v21 = 0;
      }
      v11 = &v10[-(v14 & 0xFFFFFFFFFFFFFFF8)];
      v19 -= v14 & 0xFFFFFFFFFFFFFFF8;
      v26 = &v10[-v21 - 8];
      v27 = &v18[v26 - v9];
      v28 = v21 - (v14 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v29 = *(_QWORD *)v26;
        v26 -= 8;
        *v27-- = v29;
        v28 += 8;
      }
      while (v28);
      if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_29;
LABEL_27:
      v30 = v19 - 1;
      do
      {
        v31 = *--v11;
        *v30-- = v31;
      }
      while (v11 != v9);
      goto LABEL_29;
    }
  }
  else
  {
    v18 = 0;
    v19 = (char *)(v10 - v9);
    v20 = 0;
    *(_BYTE *)v14 = 0;
    v13 = v14 + 1;
    if (v10 != v9)
      goto LABEL_11;
  }
  *(_QWORD *)a2 = v19;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v20;
  if (v10)
LABEL_30:
    operator delete(v11);
LABEL_31:
  *(_QWORD *)(a2 + 8) = v13;
  v32 = mlir::bytecode::detail::IRNumberingState::getNumber((uint64_t)v6, *(_QWORD *)(a3 + 24));
  AttrDictionary = *(_QWORD *)(a3 + 56);
  if (**(uint64_t **)(a1 + 984) <= 4)
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a3);
  if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&AttrDictionary))
  {
    v139 |= 1u;
    v33 = mlir::bytecode::detail::IRNumberingState::getNumber((uint64_t)v6, AttrDictionary);
  }
  if (**(uint64_t **)(a1 + 984) >= 5 && HIBYTE(*(_DWORD *)(a3 + 44)))
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(a3 + 48) + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v48 = *(_QWORD *)(a3 + 16 * (((unint64_t)*(unsigned int *)(a3 + 44) >> 23) & 1) + 64);
      if (!v48)
        goto LABEL_62;
      __p = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v153 = 0u;
      v158 = 1;
      v49 = mlir::bytecode::detail::IRNumberingState::getNumber(*(_QWORD *)(a1 + 1104), v48);
      *(_QWORD *)(a1 + 1024) = 0;
      LODWORD(v145) = 0;
      v149 = 0;
      v150 = 0;
      v151 = 1;
      v147 = 0;
      v148 = 0;
      v146 = 0;
      v144 = off_1E0E22B88;
      v152 = a1 + 1016;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v144, 0, 0, 0);
      v50 = *((_QWORD *)&v154 + 1);
      v51 = v155;
      while (v50 != v51)
      {
        v52 = *(const char **)v50;
        v53 = *(_QWORD *)(v50 + 8);
        v50 += 16;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v144, v52, v53);
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v144, (const char *)v153, *((_QWORD *)&v153 + 1) - v153);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v144);
      v42 = __p;
      if (!(_QWORD)__p)
        goto LABEL_57;
      v54 = *((_QWORD *)&__p + 1);
      v44 = (void *)__p;
      if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
        goto LABEL_56;
      v55 = *((_QWORD *)&__p + 1);
      do
      {
        v57 = *(void **)(v55 - 24);
        v55 -= 24;
        v56 = v57;
        if (v57)
        {
          *(_QWORD *)(v54 - 16) = v56;
          operator delete(v56);
        }
        v54 = v55;
      }
      while (v55 != v42);
    }
    else
    {
      __p = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v153 = 0u;
      v158 = 1;
      v34 = *(uint64_t **)(a1 + 1120);
      v35 = *v34;
      v141[0] = off_1E0E157B8;
      v141[1] = v35;
      v141[2] = &v153;
      v142 = *(_OWORD *)(a1 + 1104);
      v143 = v34 + 2;
      InterfaceFor = mlir::OpInterface<mlir::BytecodeOpInterface,mlir::detail::BytecodeOpInterfaceInterfaceTraits>::getInterfaceFor(a3);
      v140[0] = a3;
      v140[1] = InterfaceFor;
      mlir::BranchOpInterface::getSuccessorBlockArgument((mlir::BranchOpInterface *)v140, (uint64_t)v141);
      *(_QWORD *)(a1 + 1024) = 0;
      LODWORD(v145) = 0;
      v149 = 0;
      v150 = 0;
      v151 = 1;
      v147 = 0;
      v148 = 0;
      v146 = 0;
      v144 = off_1E0E22B88;
      v152 = a1 + 1016;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v144, 0, 0, 0);
      v37 = *((_QWORD *)&v154 + 1);
      v38 = v155;
      while (v37 != v38)
      {
        v39 = *(const char **)v37;
        v40 = *(_QWORD *)(v37 + 8);
        v37 += 16;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v144, v39, v40);
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v144, (const char *)v153, *((_QWORD *)&v153 + 1) - v153);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v144);
      v42 = __p;
      if (!(_QWORD)__p)
        goto LABEL_57;
      v43 = *((_QWORD *)&__p + 1);
      v44 = (void *)__p;
      if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
      {
LABEL_56:
        *((_QWORD *)&__p + 1) = v42;
        operator delete(v44);
LABEL_57:
        if (*((_QWORD *)&v154 + 1))
        {
          *(_QWORD *)&v155 = *((_QWORD *)&v154 + 1);
          operator delete(*((void **)&v154 + 1));
        }
        if ((_QWORD)v153)
        {
          *((_QWORD *)&v153 + 1) = v153;
          operator delete((void *)v153);
        }
        v139 |= 0x40u;
        goto LABEL_62;
      }
      v45 = *((_QWORD *)&__p + 1);
      do
      {
        v47 = *(void **)(v45 - 24);
        v45 -= 24;
        v46 = v47;
        if (v47)
        {
          *(_QWORD *)(v43 - 16) = v46;
          operator delete(v46);
        }
        v43 = v45;
      }
      while (v45 != v42);
    }
    v44 = (void *)__p;
    goto LABEL_56;
  }
LABEL_62:
  v58 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v58)
  {
    v139 |= 2u;
    v59 = (__int128 *)*(unsigned int *)(a3 + 36);
    v60 = (void (**)(llvm::raw_svector_ostream *__hidden))(a3 - 16);
    if (!(_DWORD)v59)
      v60 = 0;
    v144 = v60;
    v145 = v59;
    mlir::OperandRange::getTypes((uint64_t *)&v144, (uint64_t *)&v153);
    v62 = *((_QWORD *)&v153 + 1);
    v61 = v153;
    v63 = *((_QWORD *)&v154 + 1);
    if (v153 != v154)
    {
      if ((_QWORD)v153 == (_QWORD)v154)
      {
        do
        {
          NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v61, v62);
          v65 = mlir::bytecode::detail::IRNumberingState::getNumber((uint64_t)v6, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
          ++v62;
        }
        while (v63 != v62);
        goto LABEL_68;
      }
      while (1)
      {
        v94 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v61, v62) + 8) & 0xFFFFFFFFFFFFFFF8;
        v95 = *(_DWORD *)(a1 + 128);
        if (!v95)
          goto LABEL_169;
        v96 = *(_QWORD *)(a1 + 112);
        v97 = v95 - 1;
        v98 = ((v94 >> 4) ^ (v94 >> 9)) & (v95 - 1);
        v99 = (unint64_t *)(v96 + 16 * v98);
        v100 = *v99;
        if (*v99 != v94)
          break;
LABEL_134:
        v106 = *(unsigned int *)(v99[1] + 8);
        if (v106 > 0x7F)
        {
          ++v62;
        }
        else
        {
          v107 = (2 * v106) | 1;
          v109 = *(char **)(a2 + 8);
          v108 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v109 < v108)
          {
            *v109 = v107;
            *(_QWORD *)(a2 + 8) = v109 + 1;
            ++v62;
          }
          else
          {
            v110 = *(char **)a2;
            v111 = (unint64_t)&v109[-*(_QWORD *)a2];
            v112 = v111 + 1;
            if ((uint64_t)(v111 + 1) < 0)
              goto LABEL_184;
            v113 = v108 - (_QWORD)v110;
            if (2 * v113 > v112)
              v112 = 2 * v113;
            if (v113 >= 0x3FFFFFFFFFFFFFFFLL)
              v114 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v114 = v112;
            if (!v114)
            {
              v115 = 0;
              v116 = &v109[-*(_QWORD *)a2];
              *(_BYTE *)v111 = v107;
              v117 = v111 + 1;
              if (v109 == v110)
                goto LABEL_163;
LABEL_147:
              if (v111 >= 8 && (unint64_t)(v110 - v115) >= 0x20)
              {
                if (v111 >= 0x20)
                {
                  v118 = v111 & 0xFFFFFFFFFFFFFFE0;
                  v119 = &v115[v111 - 16];
                  v120 = v109 - 16;
                  v121 = v111 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v122 = *(_OWORD *)v120;
                    *((_OWORD *)v119 - 1) = *((_OWORD *)v120 - 1);
                    *(_OWORD *)v119 = v122;
                    v119 -= 32;
                    v120 -= 32;
                    v121 -= 32;
                  }
                  while (v121);
                  if (v111 == v118)
                    goto LABEL_162;
                  if ((v111 & 0x18) != 0)
                    goto LABEL_155;
                  v116 -= v118;
                  v109 -= v118;
                }
                else
                {
                  v118 = 0;
LABEL_155:
                  v116 -= v111 & 0xFFFFFFFFFFFFFFF8;
                  v123 = &v115[&v109[-v118] - v110 - 8];
                  v124 = &v109[-v118 - 8];
                  v125 = v118 - (v111 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v126 = *(_QWORD *)v124;
                    v124 -= 8;
                    *(_QWORD *)v123 = v126;
                    v123 -= 8;
                    v125 += 8;
                  }
                  while (v125);
                  v109 -= v111 & 0xFFFFFFFFFFFFFFF8;
                  if (v111 == (v111 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_162:
                    v109 = *(char **)a2;
                    v116 = v115;
                    goto LABEL_163;
                  }
                }
              }
              v127 = v116 - 1;
              do
              {
                v128 = *--v109;
                *v127-- = v128;
              }
              while (v109 != v110);
              goto LABEL_162;
            }
            v115 = (char *)operator new(v114);
            v116 = &v115[v111];
            v115[v111] = v107;
            v117 = (uint64_t)&v115[v111 + 1];
            if (v109 != v110)
              goto LABEL_147;
LABEL_163:
            *(_QWORD *)a2 = v116;
            *(_QWORD *)(a2 + 8) = v117;
            *(_QWORD *)(a2 + 16) = &v115[v114];
            if (v109)
              operator delete(v109);
            *(_QWORD *)(a2 + 8) = v117;
            ++v62;
          }
        }
      }
      v101 = 0;
      v102 = 1;
      while (v100 != -4096)
      {
        if (v101)
          v103 = 0;
        else
          v103 = v100 == -8192;
        if (v103)
          v101 = v99;
        v104 = v98 + v102++;
        v98 = v104 & v97;
        v99 = (unint64_t *)(v96 + 16 * (v104 & v97));
        v100 = *v99;
        if (*v99 == v94)
          goto LABEL_134;
      }
      if (v101)
        v99 = v101;
      v129 = *(_DWORD *)(a1 + 120);
      if (4 * v129 + 4 < 3 * v95)
      {
        if (v95 + ~v129 - *(_DWORD *)(a1 + 124) > v95 >> 3)
          goto LABEL_130;
      }
      else
      {
LABEL_169:
        v95 *= 2;
      }
      llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1 + 112, v95);
      v130 = *(_QWORD *)(a1 + 112);
      v131 = *(_DWORD *)(a1 + 128) - 1;
      v132 = v131 & ((v94 >> 4) ^ (v94 >> 9));
      v99 = (unint64_t *)(v130 + 16 * v132);
      v133 = *v99;
      if (*v99 == v94)
      {
        v105 = v94;
        goto LABEL_131;
      }
      v134 = 0;
      v135 = 1;
      while (v133 != -4096)
      {
        if (v134)
          v136 = 0;
        else
          v136 = v133 == -8192;
        if (v136)
          v134 = v99;
        v137 = v132 + v135++;
        v132 = v137 & v131;
        v99 = (unint64_t *)(v130 + 16 * (v137 & v131));
        v133 = *v99;
        v105 = v94;
        if (*v99 == v94)
          goto LABEL_131;
      }
      if (v134)
        v99 = v134;
LABEL_130:
      v105 = *v99;
LABEL_131:
      ++*(_DWORD *)(a1 + 120);
      if (v105 != -4096)
        --*(_DWORD *)(a1 + 124);
      *v99 = v94;
      v99[1] = 0;
      goto LABEL_134;
    }
  }
LABEL_68:
  if ((*(_BYTE *)(a3 + 46) & 0x80) != 0)
  {
    v66 = *(unsigned int *)(a3 + 68);
    if ((_DWORD)v66)
    {
      v139 |= 4u;
      if ((*(_BYTE *)(a3 + 46) & 0x80) != 0)
      {
        v67 = *(unsigned int *)(a3 + 68);
        if ((_DWORD)v67)
        {
          v68 = (void (***)(llvm::raw_svector_ostream *__hidden))(*(_QWORD *)(a3 + 72) + 24);
          do
          {
            while (1)
            {
              v144 = *v68;
              *(_QWORD *)&v153 = 0;
              if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 896), (unint64_t *)&v144, &v153))break;
              v69 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(a1 + 896, (uint64_t)&v144, (unint64_t *)&v144, (_QWORD *)v153);
              *v69 = v144;
              *((_DWORD *)v69 + 2) = 0;
              v68 += 4;
              if (!--v67)
                goto LABEL_76;
            }
            v68 += 4;
            --v67;
          }
          while (v67);
        }
      }
    }
  }
LABEL_76:
  v70 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v70)
  {
    v139 |= 8u;
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v153, (Operation *)a3);
    v71 = *((_QWORD *)&v153 + 1);
    if (*((_QWORD *)&v153 + 1))
    {
      v72 = (mlir::Block **)(v153 + 24);
      do
      {
        v73 = *v72;
        v72 += 4;
        v74 = mlir::bytecode::detail::IRNumberingState::getNumber(v6, v73);
        --v71;
      }
      while (v71);
    }
  }
  if (**(uint64_t **)(a1 + 984) >= 3)
  {
    v75 = *(unsigned int *)(a3 + 36);
    if ((_DWORD)v75)
      v76 = a3 - 16;
    else
      v76 = 0;
    mlir::ValueRange::ValueRange(v159, v76, v75);
  }
  v77 = &v10[v8] - v9;
  v78 = *(_DWORD *)(a3 + 44) & 0x7FFFFF;
  if (!v78)
  {
    *(_BYTE *)(*(_QWORD *)a2 + v77 - *(_QWORD *)(a2 + 72)) = v139;
    return 1;
  }
  *(_BYTE *)(*(_QWORD *)a2 + v77 - *(_QWORD *)(a2 + 72)) = v139 | 0x10;
  isIsolatedFromAbove = mlir::bytecode::detail::IRNumberingState::isIsolatedFromAbove(v6, (mlir::Operation *)a3);
  if (!isIsolatedFromAbove || **(uint64_t **)(a1 + 984) < 2)
  {
    v85 = *(unsigned int *)(a3 + 44);
    if ((v85 & 0x7FFFFF) != 0)
    {
      v86 = (_QWORD *)(((a3 + 16 * ((v85 >> 23) & 1) + ((v85 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *(unsigned int *)(a3 + 40));
      *(_QWORD *)&v153 = a1;
      *((_QWORD *)&v153 + 1) = a2;
      v87 = 24 * (v85 & 0x7FFFFF);
      {
        v86 += 3;
        v87 -= 24;
        if (!v87)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  __p = 0u;
  v157 = 0u;
  v154 = 0u;
  v155 = 0u;
  v153 = 0u;
  v158 = 1;
  v80 = *(unsigned int *)(a3 + 44);
  if ((v80 & 0x7FFFFF) == 0)
  {
LABEL_92:
    v83 = 1;
    v84 = (char *)__p;
    if (!(_QWORD)__p)
      goto LABEL_109;
    goto LABEL_102;
  }
  v81 = (_QWORD *)(((a3 + 16 * ((v80 >> 23) & 1) + ((v80 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a3 + 40));
  v144 = (void (**)(llvm::raw_svector_ostream *__hidden))a1;
  v145 = &v153;
  v82 = 24 * (v80 & 0x7FFFFF);
  {
    v81 += 3;
    v82 -= 24;
    if (!v82)
      goto LABEL_92;
  }
  v83 = 0;
  v84 = (char *)__p;
  if ((_QWORD)__p)
  {
LABEL_102:
    v89 = (char *)*((_QWORD *)&__p + 1);
    v90 = v84;
    if (*((char **)&__p + 1) != v84)
    {
      v91 = (char *)*((_QWORD *)&__p + 1);
      do
      {
        v93 = (void *)*((_QWORD *)v91 - 3);
        v91 -= 24;
        v92 = v93;
        if (v93)
        {
          *((_QWORD *)v89 - 2) = v92;
          operator delete(v92);
        }
        v89 = v91;
      }
      while (v91 != v84);
      v90 = (char *)__p;
    }
    *((_QWORD *)&__p + 1) = v84;
    operator delete(v90);
  }
LABEL_109:
  if (*((_QWORD *)&v154 + 1))
  {
    *(_QWORD *)&v155 = *((_QWORD *)&v154 + 1);
    operator delete(*((void **)&v154 + 1));
  }
  if ((_QWORD)v153)
  {
    *((_QWORD *)&v153 + 1) = v153;
    operator delete((void *)v153);
  }
  return (v83 & 1) != 0;
}

uint64_t mlir::bytecode::detail::IRNumberingState::getNumber(mlir::bytecode::detail::IRNumberingState *this, mlir::Block *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  mlir::Block *v9;
  mlir::Block *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  mlir::Block *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;

  v4 = *((_DWORD *)this + 212);
  if (!v4)
    goto LABEL_21;
  v5 = *((_QWORD *)this + 104);
  v6 = v4 - 1;
  v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = v5 + 16 * v7;
  v9 = *(mlir::Block **)v8;
  if (*(mlir::Block **)v8 == a2)
    return *(unsigned int *)(v8 + 8);
  v12 = 0;
  v13 = 1;
  while (v9 != (mlir::Block *)-4096)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v9 == (mlir::Block *)-8192;
    if (v14)
      v12 = v8;
    v15 = v7 + v13++;
    v7 = v15 & v6;
    v8 = v5 + 16 * (v15 & v6);
    v9 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2)
      return *(unsigned int *)(v8 + 8);
  }
  if (v12)
    v8 = v12;
  v16 = *((_DWORD *)this + 210);
  if (4 * v16 + 4 < 3 * v4)
  {
    if (v4 + ~v16 - *((_DWORD *)this + 211) > v4 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_21:
    v4 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 832, v4);
  v17 = *((_QWORD *)this + 104);
  v18 = *((_DWORD *)this + 212) - 1;
  v19 = v18 & ((a2 >> 4) ^ (a2 >> 9));
  v8 = v17 + 16 * v19;
  v20 = *(mlir::Block **)v8;
  if (*(mlir::Block **)v8 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 210);
    if (a2 == (mlir::Block *)-4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != (mlir::Block *)-4096)
  {
    if (v21)
      v23 = 0;
    else
      v23 = v20 == (mlir::Block *)-8192;
    if (v23)
      v21 = v8;
    v24 = v19 + v22++;
    v19 = v24 & v18;
    v8 = v17 + 16 * (v24 & v18);
    v20 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2)
      goto LABEL_23;
  }
  if (v21)
    v8 = v21;
LABEL_6:
  v11 = *(mlir::Block **)v8;
  ++*((_DWORD *)this + 210);
  if (v11 != (mlir::Block *)-4096)
LABEL_7:
    --*((_DWORD *)this + 211);
LABEL_8:
  *(_QWORD *)v8 = a2;
  *(_DWORD *)(v8 + 8) = 0;
  return 0;
}

void `anonymous namespace'::BytecodeWriter::writeUseListOrders(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  int v9;
  unsigned int v10;
  char *v11;
  int v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t Number;
  unint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int *v54;
  uint64_t v55;
  char *v56;
  int v57;
  char **v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  BOOL v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  const double *v68;
  int32x4_t *v69;
  const double *v70;
  unsigned __int128 v71;
  const double *v72;
  unsigned __int128 v73;
  const double *v74;
  const double *v75;
  unsigned __int128 v76;
  unsigned __int128 v77;
  uint64_t v78;
  char *v79;
  int v80;
  BOOL v81;
  unsigned int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  llvm *buffer;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  llvm *v92;
  unint64_t v93;
  uint64_t v94;
  llvm *v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  char *v99;
  int v100;
  BOOL v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  llvm *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int *v114;
  unint64_t v115;
  _QWORD *v116;
  int64x2_t v117;
  uint64_t v118;
  int64x2_t v119;
  int64x2_t v120;
  uint64_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  char *v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  size_t v138;
  _BYTE *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  _OWORD *v143;
  char *v144;
  unint64_t v145;
  __int128 v146;
  _QWORD *v147;
  char *v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  char v152;
  char v153;
  unint64_t v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  size_t v160;
  _BYTE *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  _OWORD *v165;
  char *v166;
  unint64_t v167;
  __int128 v168;
  _QWORD *v169;
  char *v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  char v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int *v177;
  unint64_t v178;
  char v179;
  unint64_t v180;
  char *v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  size_t v186;
  _BYTE *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  _OWORD *v191;
  char *v192;
  unint64_t v193;
  __int128 v194;
  _QWORD *v195;
  char *v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  char v200;
  llvm *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  int64x2_t v206;
  uint64_t v207;
  llvm *v209;
  mlir::bytecode::detail::IRNumberingState *v212;
  llvm *v213;
  unint64_t v214;
  unsigned int v215;
  void *__dst;
  uint64_t v217;
  int v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;

  v223 = *MEMORY[0x1E0C80C00];
  v213 = 0;
  v214 = 0;
  v215 = 0;
  v220 = 0;
  v221 = a4;
  v222 = 0;
  if (!a5)
    goto LABEL_268;
  v5 = a5;
  v8 = 0;
  v9 = 0;
  v212 = (mlir::bytecode::detail::IRNumberingState *)(a1 + 40);
  v207 = a1 + 64;
  while (1)
  {
    v14 = (unint64_t *)mlir::ValueRange::dereference_iterator(&v221, v8);
    v15 = *v14;
    if (!*v14)
      goto LABEL_6;
    if (!*(_QWORD *)v15)
      goto LABEL_6;
    v16 = v14;
    Number = mlir::bytecode::detail::IRNumberingState::getNumber(v212, *(mlir::Operation **)(v15 + 16));
    v18 = mlir::OpOperand::getOperandNumber(v15) | (unint64_t)(Number << 32);
    __dst = &v218;
    v218 = 0;
    v219 = v18;
    v217 = 0x300000001;
    v19 = *(_QWORD **)*v16;
    if (!v19)
      goto LABEL_6;
    v20 = 1;
    v21 = 1;
    do
    {
      v22 = v19[2];
      v23 = *(_DWORD *)(a1 + 80);
      if (!v23)
        goto LABEL_37;
      v24 = *(_QWORD *)(a1 + 64);
      v25 = v23 - 1;
      v26 = ((v22 >> 4) ^ (v22 >> 9)) & (v23 - 1);
      v27 = (_QWORD *)(v24 + 16 * v26);
      v28 = *v27;
      if (*v27 == v22)
        goto LABEL_30;
      v29 = 0;
      v30 = 1;
      while (v28 != -4096)
      {
        if (v29)
          v31 = 0;
        else
          v31 = v28 == -8192;
        if (v31)
          v29 = v27;
        v32 = v26 + v30++;
        v26 = v32 & v25;
        v27 = (_QWORD *)(v24 + 16 * (v32 & v25));
        v28 = *v27;
        if (*v27 == v22)
          goto LABEL_30;
      }
      if (v29)
        v27 = v29;
      v40 = *(_DWORD *)(a1 + 72);
      if (4 * v40 + 4 >= 3 * v23)
      {
LABEL_37:
        v23 *= 2;
LABEL_38:
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v207, v23);
        v41 = *(_QWORD *)(a1 + 64);
        v42 = *(_DWORD *)(a1 + 80) - 1;
        v43 = v42 & ((v22 >> 4) ^ (v22 >> 9));
        v27 = (_QWORD *)(v41 + 16 * v43);
        v44 = *v27;
        if (*v27 == v22)
        {
LABEL_39:
          ++*(_DWORD *)(a1 + 72);
          if (v22 == -4096)
            goto LABEL_29;
        }
        else
        {
          v45 = 0;
          v46 = 1;
          while (v44 != -4096)
          {
            if (v45)
              v47 = 0;
            else
              v47 = v44 == -8192;
            if (v47)
              v45 = v27;
            v48 = v43 + v46++;
            v43 = v48 & v42;
            v27 = (_QWORD *)(v41 + 16 * (v48 & v42));
            v44 = *v27;
            if (*v27 == v22)
              goto LABEL_39;
          }
          if (v45)
            v27 = v45;
          v49 = *v27;
          ++*(_DWORD *)(a1 + 72);
          if (v49 == -4096)
            goto LABEL_29;
        }
LABEL_28:
        --*(_DWORD *)(a1 + 76);
        goto LABEL_29;
      }
      if (v23 + ~v40 - *(_DWORD *)(a1 + 76) <= v23 >> 3)
        goto LABEL_38;
      v33 = *v27;
      ++*(_DWORD *)(a1 + 72);
      if (v33 != -4096)
        goto LABEL_28;
LABEL_29:
      *v27 = v22;
      v27[1] = 0;
LABEL_30:
      v34 = *(unsigned int *)v27[1];
      v35 = mlir::OpOperand::getOperandNumber((unint64_t)v19) | (unint64_t)(v34 << 32);
      v36 = v18 > v35;
      v37 = v217;
      if (v217 >= (unint64_t)HIDWORD(v217))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, &v218, v217 + 1, 16);
        v37 = v217;
      }
      v20 &= v36;
      v38 = (char *)__dst + 16 * v37;
      *v38 = v21;
      v38[1] = v35;
      v39 = (v217 + 1);
      LODWORD(v217) = v217 + 1;
      ++v21;
      v19 = (_QWORD *)*v19;
      v18 = v35;
    }
    while (v19);
    v50 = (char *)__dst;
    if ((v20 & 1) == 0)
    {
      v51 = 126 - 2 * __clz(v39);
      if ((_DWORD)v39)
        v52 = v51;
      else
        v52 = 0;
      v50 = (char *)__dst;
      v53 = v217;
      v54 = (int *)v213;
      v55 = v215;
      if (!v215)
      {
        v56 = 0;
        v57 = v214;
        if (4 * (int)v214 + 4 < 3 * v215)
          goto LABEL_60;
LABEL_95:
        v83 = 2 * v215;
LABEL_97:
        v84 = (v83 - 1) | ((unint64_t)(v83 - 1) >> 1);
        v85 = v84 | (v84 >> 2) | ((v84 | (v84 >> 2)) >> 4);
        v86 = ((v85 | (v85 >> 8)) >> 16) | v85 | (v85 >> 8);
        if ((v86 + 1) > 0x40)
          v87 = v86 + 1;
        else
          v87 = 64;
        v215 = v87;
        buffer = (llvm *)llvm::allocate_buffer(72 * v87, (std::align_val_t)8uLL);
        v213 = buffer;
        if (v54)
        {
          v89 = 18 * v55;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,12u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,12u>>>,unsigned int,llvm::SmallVector<unsigned int,12u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,12u>>>::moveFromOldBuckets((uint64_t)&v213, v54, &v54[v89]);
          llvm::deallocate_buffer((llvm *)v54, (void *)(v89 * 4));
        }
        v214 = 0;
        v90 = v215;
        if (!v215)
          goto LABEL_119;
        v91 = 72 * v215 - 72;
        v92 = buffer;
        if (v91 < 0x48)
          goto LABEL_280;
        v93 = v91 / 0x48 + 1;
        v92 = (llvm *)((char *)buffer + 72 * (v93 & 0x7FFFFFFFFFFFFFELL));
        v94 = v93 & 0x7FFFFFFFFFFFFFELL;
        v95 = buffer;
        do
        {
          *(_DWORD *)v95 = -1;
          *((_DWORD *)v95 + 18) = -1;
          v95 = (llvm *)((char *)v95 + 144);
          v94 -= 2;
        }
        while (v94);
        if (v93 != (v93 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_280:
          do
          {
            *(_DWORD *)v92 = -1;
            v92 = (llvm *)((char *)v92 + 72);
          }
          while (v92 != (llvm *)((char *)buffer + 72 * v90));
        }
        if (v90)
        {
          v96 = v90 - 1;
          v97 = v96 & (37 * v9);
          v56 = (char *)buffer + 72 * v97;
          v98 = *(_DWORD *)v56;
          if (*(_DWORD *)v56 != v9)
          {
            v99 = 0;
            v100 = 1;
            while (v98 != -1)
            {
              if (v99)
                v101 = 0;
              else
                v101 = v98 == -2;
              if (v101)
                v99 = v56;
              v102 = v97 + v100++;
              v97 = v102 & v96;
              v56 = (char *)buffer + 72 * v97;
              v98 = *(_DWORD *)v56;
              if (*(_DWORD *)v56 == v9)
                goto LABEL_61;
            }
            if (v99)
              v56 = v99;
          }
        }
        else
        {
LABEL_119:
          v56 = 0;
        }
        goto LABEL_61;
      }
      v10 = (v215 - 1) & (37 * v9);
      v11 = (char *)v213 + 72 * v10;
      v12 = *(_DWORD *)v11;
      if (*(_DWORD *)v11 != v9)
      {
        v79 = 0;
        v80 = 1;
        while (v12 != -1)
        {
          if (v79)
            v81 = 0;
          else
            v81 = v12 == -2;
          if (v81)
            v79 = v11;
          v82 = v10 + v80++;
          v10 = v82 & (v215 - 1);
          v11 = (char *)v213 + 72 * v10;
          v12 = *(_DWORD *)v11;
          if (*(_DWORD *)v11 == v9)
            goto LABEL_4;
        }
        if (v79)
          v56 = v79;
        else
          v56 = v11;
        v57 = v214;
        if (4 * (int)v214 + 4 >= 3 * v215)
          goto LABEL_95;
LABEL_60:
        if (v215 + ~v57 - HIDWORD(v214) <= v215 >> 3)
        {
          v83 = v215;
          goto LABEL_97;
        }
LABEL_61:
        LODWORD(v214) = v214 + 1;
        if (*(_DWORD *)v56 != -1)
          --HIDWORD(v214);
        *(_DWORD *)v56 = v9;
        *((_QWORD *)v56 + 1) = v56 + 24;
        v58 = (char **)(v56 + 8);
        *((_QWORD *)v56 + 2) = 0xC00000000;
        v5 = a5;
        if (v53 >= 0xD)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v56 + 8), v56 + 24, v53, 4);
          v59 = *((unsigned int *)v56 + 4);
          v60 = *v58;
          v61 = &(*v58)[4 * v59];
          v62 = (v53 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (v62 < 0x14)
            goto LABEL_65;
LABEL_68:
          v64 = v61 >= &v50[16 * v62 + 8] || v50 >= &v60[4 * v59 + 4 + 4 * v62];
          v63 = v50;
          if (v64)
          {
            v65 = v62 + 1;
            v66 = (v62 + 1) & 7;
            if (!v66)
              v66 = 8;
            v67 = v65 - v66;
            v61 += 4 * v67;
            v63 = &v50[16 * v67];
            v68 = (const double *)(v50 + 64);
            v69 = (int32x4_t *)&v60[4 * v59 + 16];
            do
            {
              v70 = v68 - 8;
              v71 = (unsigned __int128)vld2q_f64(v70);
              v72 = v68 - 4;
              v73 = (unsigned __int128)vld2q_f64(v72);
              v74 = v68 + 16;
              v76 = (unsigned __int128)vld2q_f64(v68);
              v75 = v68 + 4;
              v77 = (unsigned __int128)vld2q_f64(v75);
              v69[-1] = vuzp1q_s32((int32x4_t)v71, (int32x4_t)v73);
              *v69 = vuzp1q_s32((int32x4_t)v76, (int32x4_t)v77);
              v69 += 2;
              v68 = v74;
              v67 -= 8;
            }
            while (v67);
          }
          goto LABEL_77;
        }
        if ((_DWORD)v53)
        {
          v59 = 0;
          v60 = *v58;
          v61 = *v58;
          v62 = (v53 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (v62 >= 0x14)
            goto LABEL_68;
LABEL_65:
          v63 = v50;
          do
          {
LABEL_77:
            v78 = *(_QWORD *)v63;
            v63 += 16;
            *(_DWORD *)v61 = v78;
            v61 += 4;
          }
          while (v63 != &v50[16 * v53]);
          *((_DWORD *)v56 + 4) += v53;
          v50 = (char *)__dst;
          if (__dst == &v218)
            goto LABEL_6;
        }
        else
        {
          *((_DWORD *)v56 + 4) = 0;
          v50 = (char *)__dst;
          if (__dst == &v218)
            goto LABEL_6;
        }
LABEL_5:
        free(v50);
        goto LABEL_6;
      }
    }
LABEL_4:
    v5 = a5;
    if (v50 != (char *)&v218)
      goto LABEL_5;
LABEL_6:
    v9 = v220 + 1;
    v8 = v222 + 1;
    ++v220;
    ++v222;
    if (v221 == a4 && v8 == v5)
    {
      v103 = v214;
      if ((_DWORD)v214)
      {
        *a3 |= 0x20u;
        if (v5 != 1)
        if ((_DWORD)v214)
        {
          if (v215)
          {
            v104 = 72 * v215;
            v105 = v213;
            while (*(_DWORD *)v105 >= 0xFFFFFFFE)
            {
              v105 = (llvm *)((char *)v105 + 72);
              v104 -= 72;
              if (!v104)
                goto LABEL_268;
            }
          }
          else
          {
            v105 = v213;
          }
          if (v105 != (llvm *)((char *)v213 + 72 * v215))
          {
            v206 = vdupq_n_s64(2uLL);
            v209 = (llvm *)((char *)v213 + 72 * v215);
            while (1)
            {
              v106 = 0;
              v107 = *(unsigned int *)v105;
              __dst = &v218;
              v217 = 0xC00000000;
              if (&__dst == (void **)((char *)v105 + 8))
              {
                v109 = 0;
                goto LABEL_151;
              }
              v108 = *((unsigned int *)v105 + 4);
              v109 = 0;
              if (!*((_DWORD *)v105 + 4))
                goto LABEL_151;
              v110 = &v218;
              v111 = *((unsigned int *)v105 + 4);
              if (v108 >= 0xD)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, &v218, *((unsigned int *)v105 + 4), 4);
                v111 = *((unsigned int *)v105 + 4);
                if (!(_DWORD)v111)
                  goto LABEL_141;
                v110 = (int *)__dst;
              }
              memcpy(v110, *((const void **)v105 + 1), 4 * v111);
LABEL_141:
              LODWORD(v217) = v108;
              v112 = (v108 - 1) & 0x3FFFFFFFFFFFFFFFLL;
              if (v112 < 3)
              {
                v109 = 0;
                v113 = 0;
                v114 = (int *)__dst;
                do
                {
LABEL_147:
                  v124 = *v114++;
                  if (v113 != v124)
                    ++v109;
                  ++v113;
                }
                while (v114 != (int *)((char *)__dst + 4 * v108));
                goto LABEL_150;
              }
              v115 = v112 + 1;
              v113 = (v112 + 1) & 0x7FFFFFFFFFFFFFFCLL;
              v114 = (int *)((char *)__dst + 4 * v113);
              v116 = (char *)__dst + 8;
              v117 = 0uLL;
              v118 = v113;
              v119 = 0uLL;
              v120 = (int64x2_t)xmmword_181233120;
              do
              {
                v121 = *(v116 - 1);
                v122.i64[0] = v121;
                v122.i64[1] = HIDWORD(v121);
                v123 = v122;
                v122.i64[0] = *v116;
                v122.i64[1] = HIDWORD(*v116);
                v117 = vsubq_s64(v117, (int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(v120, v123)));
                v119 = vsubq_s64(v119, (int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(vaddq_s64(v120, v206), v122)));
                v120 = vaddq_s64(v120, vdupq_n_s64(4uLL));
                v116 += 2;
                v118 -= 4;
              }
              while (v118);
              v109 = vaddvq_s64(vaddq_s64(v119, v117));
              if (v115 != v113)
                goto LABEL_147;
LABEL_150:
              v106 = v108;
LABEL_151:
              if (a5 != 1)
              if (v109 >= v106 >> 1)
              {
                v175 = a2;
                if (!(_DWORD)v217)
                  goto LABEL_261;
                v176 = (unsigned int *)__dst;
                v177 = (unsigned int *)((char *)__dst + 4 * v217);
                while (2)
                {
                  v178 = *v176;
                  if (v178 > 0x7F)
                  {
                    goto LABEL_228;
                  }
                  v179 = (2 * v178) | 1;
                  v181 = *(char **)(v175 + 8);
                  v180 = *(_QWORD *)(v175 + 16);
                  if ((unint64_t)v181 < v180)
                  {
                    *v181 = v179;
                    *(_QWORD *)(v175 + 8) = v181 + 1;
                    goto LABEL_228;
                  }
                  v182 = *(char **)v175;
                  v183 = v181 - v182;
                  v184 = v181 - v182 + 1;
                  if (v184 < 0)
LABEL_277:
                    abort();
                  v185 = v180 - (_QWORD)v182;
                  if (2 * v185 > v184)
                    v184 = 2 * v185;
                  if (v185 >= 0x3FFFFFFFFFFFFFFFLL)
                    v186 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v186 = v184;
                  if (v186)
                  {
                    v187 = operator new(v186);
                    v188 = &v187[v183];
                    v187[v183] = v179;
                    v189 = (uint64_t)&v187[v183 + 1];
                    if (v181 != v182)
                    {
LABEL_240:
                      if (v183 >= 8 && (unint64_t)(v182 - v187) >= 0x20)
                      {
                        if (v183 >= 0x20)
                        {
                          v190 = v183 & 0xFFFFFFFFFFFFFFE0;
                          v191 = &v187[v183 - 16];
                          v192 = v181 - 16;
                          v193 = v183 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v194 = *(_OWORD *)v192;
                            *(v191 - 1) = *((_OWORD *)v192 - 1);
                            *v191 = v194;
                            v191 -= 2;
                            v192 -= 32;
                            v193 -= 32;
                          }
                          while (v193);
                          if (v183 == v190)
                            goto LABEL_258;
                          if ((v183 & 0x18) != 0)
                            goto LABEL_251;
                          v188 -= v190;
                          v181 -= v190;
                        }
                        else
                        {
                          v190 = 0;
LABEL_251:
                          v188 -= v183 & 0xFFFFFFFFFFFFFFF8;
                          v195 = &v187[&v181[-v190] - v182 - 8];
                          v196 = &v181[-v190 - 8];
                          v197 = v190 - (v183 & 0xFFFFFFFFFFFFFFF8);
                          do
                          {
                            v198 = *(_QWORD *)v196;
                            v196 -= 8;
                            *v195-- = v198;
                            v197 += 8;
                          }
                          while (v197);
                          v181 -= v183 & 0xFFFFFFFFFFFFFFF8;
                          if (v183 == (v183 & 0xFFFFFFFFFFFFFFF8))
                          {
LABEL_258:
                            v175 = a2;
                            v181 = *(char **)a2;
                            *(_QWORD *)a2 = v187;
                            *(_QWORD *)(a2 + 8) = v189;
                            *(_QWORD *)(a2 + 16) = &v187[v186];
                            if (v181)
LABEL_259:
                              operator delete(v181);
LABEL_260:
                            *(_QWORD *)(v175 + 8) = v189;
LABEL_228:
                            if (++v176 == v177)
                              goto LABEL_261;
                            continue;
                          }
                        }
                      }
                      v199 = v188 - 1;
                      do
                      {
                        v200 = *--v181;
                        *v199-- = v200;
                      }
                      while (v181 != v182);
                      goto LABEL_258;
                    }
                  }
                  else
                  {
                    v187 = 0;
                    v188 = (char *)(v181 - v182);
                    *(_BYTE *)v183 = v179;
                    v189 = v183 + 1;
                    if (v181 != v182)
                      goto LABEL_240;
                  }
                  break;
                }
                v175 = a2;
                *(_QWORD *)a2 = v188;
                *(_QWORD *)(a2 + 8) = v189;
                *(_QWORD *)(a2 + 16) = &v187[v186];
                if (v181)
                  goto LABEL_259;
                goto LABEL_260;
              }
              v125 = (4 * v109) | 1;
              v126 = a2;
              if ((_DWORD)v217)
              {
                v127 = 0;
                v128 = (char *)__dst;
                v129 = (char *)__dst + 4 * v217;
                do
                {
                  v130 = *(unsigned int *)v128;
                  if (v127 == v130)
                    goto LABEL_157;
                  if (v130 > 0x7F)
                  {
                    if (v127 > 0x7F)
                      goto LABEL_156;
                    goto LABEL_194;
                  }
                  v131 = (2 * v130) | 1;
                  v133 = *(char **)(v126 + 8);
                  v132 = *(_QWORD *)(v126 + 16);
                  if ((unint64_t)v133 < v132)
                  {
                    *v133 = v131;
                    *(_QWORD *)(v126 + 8) = v133 + 1;
                    if (v127 > 0x7F)
                      goto LABEL_156;
                    goto LABEL_194;
                  }
                  v134 = *(char **)v126;
                  v135 = v133 - v134;
                  v136 = v133 - v134 + 1;
                  if (v136 < 0)
                    goto LABEL_277;
                  v137 = v132 - (_QWORD)v134;
                  if (2 * v137 > v136)
                    v136 = 2 * v137;
                  if (v137 >= 0x3FFFFFFFFFFFFFFFLL)
                    v138 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v138 = v136;
                  if (v138)
                  {
                    v139 = operator new(v138);
                    v140 = &v139[v135];
                    v139[v135] = v131;
                    v141 = (uint64_t)&v139[v135 + 1];
                    if (v133 != v134)
                      goto LABEL_173;
                  }
                  else
                  {
                    v139 = 0;
                    v140 = (char *)(v133 - v134);
                    *(_BYTE *)v135 = v131;
                    v141 = v135 + 1;
                    if (v133 != v134)
                    {
LABEL_173:
                      if (v135 >= 8 && (unint64_t)(v134 - v139) >= 0x20)
                      {
                        if (v135 >= 0x20)
                        {
                          v142 = v135 & 0xFFFFFFFFFFFFFFE0;
                          v143 = &v139[v135 - 16];
                          v144 = v133 - 16;
                          v145 = v135 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v146 = *(_OWORD *)v144;
                            *(v143 - 1) = *((_OWORD *)v144 - 1);
                            *v143 = v146;
                            v143 -= 2;
                            v144 -= 32;
                            v145 -= 32;
                          }
                          while (v145);
                          if (v135 == v142)
                            goto LABEL_191;
                          if ((v135 & 0x18) != 0)
                            goto LABEL_184;
                          v140 -= v142;
                          v133 -= v142;
                        }
                        else
                        {
                          v142 = 0;
LABEL_184:
                          v140 -= v135 & 0xFFFFFFFFFFFFFFF8;
                          v147 = &v139[&v133[-v142] - v134 - 8];
                          v148 = &v133[-v142 - 8];
                          v149 = v142 - (v135 & 0xFFFFFFFFFFFFFFF8);
                          do
                          {
                            v150 = *(_QWORD *)v148;
                            v148 -= 8;
                            *v147-- = v150;
                            v149 += 8;
                          }
                          while (v149);
                          v133 -= v135 & 0xFFFFFFFFFFFFFFF8;
                          if (v135 == (v135 & 0xFFFFFFFFFFFFFFF8))
                          {
LABEL_191:
                            v126 = a2;
                            v133 = *(char **)a2;
                            *(_QWORD *)a2 = v139;
                            *(_QWORD *)(a2 + 8) = v141;
                            *(_QWORD *)(a2 + 16) = &v139[v138];
                            if (!v133)
                              goto LABEL_193;
LABEL_192:
                            operator delete(v133);
                            goto LABEL_193;
                          }
                        }
                      }
                      v151 = v140 - 1;
                      do
                      {
                        v152 = *--v133;
                        *v151-- = v152;
                      }
                      while (v133 != v134);
                      goto LABEL_191;
                    }
                  }
                  v126 = a2;
                  *(_QWORD *)a2 = v140;
                  *(_QWORD *)(a2 + 8) = v141;
                  *(_QWORD *)(a2 + 16) = &v139[v138];
                  if (v133)
                    goto LABEL_192;
LABEL_193:
                  *(_QWORD *)(v126 + 8) = v141;
                  if (v127 > 0x7F)
                  {
LABEL_156:
                    goto LABEL_157;
                  }
LABEL_194:
                  v153 = (2 * v127) | 1;
                  v155 = *(char **)(v126 + 8);
                  v154 = *(_QWORD *)(v126 + 16);
                  if ((unint64_t)v155 >= v154)
                  {
                    v156 = *(char **)v126;
                    v157 = v155 - v156;
                    v158 = v155 - v156 + 1;
                    if (v158 < 0)
                      goto LABEL_277;
                    v159 = v154 - (_QWORD)v156;
                    if (2 * v159 > v158)
                      v158 = 2 * v159;
                    if (v159 >= 0x3FFFFFFFFFFFFFFFLL)
                      v160 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v160 = v158;
                    if (v160)
                    {
                      v161 = operator new(v160);
                      v162 = &v161[v157];
                      v161[v157] = v153;
                      v163 = (uint64_t)&v161[v157 + 1];
                      if (v155 != v156)
                      {
LABEL_204:
                        if (v157 >= 8 && (unint64_t)(v156 - v161) >= 0x20)
                        {
                          if (v157 >= 0x20)
                          {
                            v164 = v157 & 0xFFFFFFFFFFFFFFE0;
                            v165 = &v161[v157 - 16];
                            v166 = v155 - 16;
                            v167 = v157 & 0xFFFFFFFFFFFFFFE0;
                            do
                            {
                              v168 = *(_OWORD *)v166;
                              *(v165 - 1) = *((_OWORD *)v166 - 1);
                              *v165 = v168;
                              v165 -= 2;
                              v166 -= 32;
                              v167 -= 32;
                            }
                            while (v167);
                            if (v157 == v164)
                              goto LABEL_222;
                            if ((v157 & 0x18) != 0)
                              goto LABEL_215;
                            v162 -= v164;
                            v155 -= v164;
                          }
                          else
                          {
                            v164 = 0;
LABEL_215:
                            v162 -= v157 & 0xFFFFFFFFFFFFFFF8;
                            v169 = &v161[&v155[-v164] - v156 - 8];
                            v170 = &v155[-v164 - 8];
                            v171 = v164 - (v157 & 0xFFFFFFFFFFFFFFF8);
                            do
                            {
                              v172 = *(_QWORD *)v170;
                              v170 -= 8;
                              *v169-- = v172;
                              v171 += 8;
                            }
                            while (v171);
                            v155 -= v157 & 0xFFFFFFFFFFFFFFF8;
                            if (v157 == (v157 & 0xFFFFFFFFFFFFFFF8))
                            {
LABEL_222:
                              v126 = a2;
                              v155 = *(char **)a2;
                              *(_QWORD *)a2 = v161;
                              *(_QWORD *)(a2 + 8) = v163;
                              *(_QWORD *)(a2 + 16) = &v161[v160];
                              if (v155)
LABEL_223:
                                operator delete(v155);
LABEL_224:
                              *(_QWORD *)(v126 + 8) = v163;
                              goto LABEL_157;
                            }
                          }
                        }
                        v173 = v162 - 1;
                        do
                        {
                          v174 = *--v155;
                          *v173-- = v174;
                        }
                        while (v155 != v156);
                        goto LABEL_222;
                      }
                    }
                    else
                    {
                      v161 = 0;
                      v162 = (char *)(v155 - v156);
                      *(_BYTE *)v157 = v153;
                      v163 = v157 + 1;
                      if (v155 != v156)
                        goto LABEL_204;
                    }
                    v126 = a2;
                    *(_QWORD *)a2 = v162;
                    *(_QWORD *)(a2 + 8) = v163;
                    *(_QWORD *)(a2 + 16) = &v161[v160];
                    if (v155)
                      goto LABEL_223;
                    goto LABEL_224;
                  }
                  *v155 = v153;
                  *(_QWORD *)(v126 + 8) = v155 + 1;
LABEL_157:
                  ++v127;
                  v128 += 4;
                }
                while (v128 != v129);
              }
LABEL_261:
              if (__dst != &v218)
                free(__dst);
              v105 = (llvm *)((char *)v105 + 72);
              if (v105 != v209)
              {
                while (*(_DWORD *)v105 >= 0xFFFFFFFE)
                {
                  v105 = (llvm *)((char *)v105 + 72);
                  if (v105 == v209)
                    goto LABEL_268;
                }
                if (v105 != v209)
                  continue;
              }
              break;
            }
          }
        }
      }
LABEL_268:
      v201 = v213;
      if (v215)
      {
        v202 = 72 * v215;
        v203 = (char *)v213 + 24;
        do
        {
          if (*((_DWORD *)v203 - 6) <= 0xFFFFFFFD)
          {
            v204 = (char *)*((_QWORD *)v203 - 2);
            if (v203 != v204)
              free(v204);
          }
          v203 += 72;
          v202 -= 72;
        }
        while (v202);
        v201 = v213;
        v205 = 72 * v215;
      }
      else
      {
        v205 = 0;
      }
      llvm::deallocate_buffer(v201, (void *)v205);
    }
  }
}

BOOL mlir::bytecode::detail::IRNumberingState::isIsolatedFromAbove(mlir::bytecode::detail::IRNumberingState *this, mlir::Operation *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  mlir::Operation **v10;
  mlir::Operation *v11;
  mlir::Operation **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  mlir::Operation *v16;
  mlir::Operation *v17;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  mlir::Operation *v23;
  mlir::Operation **v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v6 = *((_QWORD *)this + 3);
  v4 = (char *)this + 24;
  v5 = v6;
  v7 = *((_DWORD *)v4 + 4);
  if (!v7)
    goto LABEL_23;
  v8 = v7 - 1;
  v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (mlir::Operation **)(v5 + 16 * v9);
  v11 = *v10;
  if (*v10 == a2)
    goto LABEL_17;
  v12 = 0;
  v13 = 1;
  while (v11 != (mlir::Operation *)-4096)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == (mlir::Operation *)-8192;
    if (v14)
      v12 = v10;
    v15 = v9 + v13++;
    v9 = v15 & v8;
    v10 = (mlir::Operation **)(v5 + 16 * (v15 & v8));
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_17;
  }
  if (v12)
    v10 = v12;
  v19 = *((_DWORD *)this + 8);
  if (4 * v19 + 4 < 3 * v7)
  {
    if (v7 + ~v19 - *((_DWORD *)this + 9) > v7 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_23:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v7);
  v20 = *((_QWORD *)this + 3);
  v21 = *((_DWORD *)this + 10) - 1;
  v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (mlir::Operation **)(v20 + 16 * v22);
  v23 = *v10;
  if (*v10 == a2)
  {
LABEL_25:
    ++*((_DWORD *)this + 8);
    if (a2 == (mlir::Operation *)-4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v24 = 0;
  v25 = 1;
  while (v23 != (mlir::Operation *)-4096)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == (mlir::Operation *)-8192;
    if (v26)
      v24 = v10;
    v27 = v22 + v25++;
    v22 = v27 & v21;
    v10 = (mlir::Operation **)(v20 + 16 * (v27 & v21));
    v23 = *v10;
    if (*v10 == a2)
      goto LABEL_25;
  }
  if (v24)
    v10 = v24;
LABEL_14:
  v16 = *v10;
  ++*((_DWORD *)this + 8);
  if (v16 != (mlir::Operation *)-4096)
LABEL_15:
    --*((_DWORD *)this + 9);
LABEL_16:
  *v10 = a2;
  v10[1] = 0;
LABEL_17:
  v17 = v10[1];
  return *((_BYTE *)v17 + 5) && *((_BYTE *)v17 + 4) != 0;
}

void (*`anonymous namespace'::`anonymous namespace'::PropertiesSectionBuilder::emit(uint64_t a1, char *a2, unint64_t a3))(llvm::raw_svector_ostream *__hidden this)
{
  char *v6;
  char *v7;
  const char *v8;
  size_t v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  char *v13;
  void *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  int64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  char *v25;
  _BYTE *v26;
  char *v27;
  unint64_t v28;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  void *v39;
  char v40;
  void (**v41)(llvm::raw_svector_ostream *__hidden);
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void (*v46)(llvm::raw_svector_ostream *__hidden);
  char *v47;
  _QWORD *v48;
  char *v50;
  void (**v51)(llvm::raw_svector_ostream *__hidden);
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  int v58;
  char **v59;
  void *v60[2];
  void *v61[2];
  __int128 v62;
  void *__p[2];
  __int128 v64;
  int v65;
  char *v66;
  __int128 v67;
  _QWORD v68[8];

  v68[5] = *MEMORY[0x1E0C80C00];
  v66 = (char *)v68;
  v67 = xmmword_181233150;
  v64 = 0u;
  v62 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v60 = 0u;
  *(_OWORD *)v61 = 0u;
  v65 = 1;
  v52 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 1;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v51 = off_1E0E22B88;
  v59 = &v66;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v51, 0, 0, 0);
  v6 = (char *)v61[1];
  v7 = (char *)v62;
  while (v6 != v7)
  {
    v8 = *(const char **)v6;
    v9 = *((_QWORD *)v6 + 1);
    v6 += 16;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v51, v8, v9);
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)&v51, (const char *)v60[0], (char *)v60[1] - (char *)v60[0]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v51);
  v10 = (char *)__p[0];
  if (__p[0])
  {
    v11 = __p[1];
    v12 = __p[0];
    if (__p[1] != __p[0])
    {
      v13 = (char *)__p[1];
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 3);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(v11 - 2) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = __p[0];
    }
    __p[1] = v10;
    operator delete(v12);
  }
  if (v61[1])
  {
    *(void **)&v62 = v61[1];
    operator delete(v61[1]);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  v16 = *(char **)a1;
  v17 = *(char **)(a1 + 8);
  if ((unint64_t)v17 >= *(_QWORD *)(a1 + 16))
  {
    v18 = std::vector<std::vector<char>>::__emplace_back_slow_path<>((char **)a1);
  }
  else
  {
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    v18 = v17 + 24;
    *((_QWORD *)v17 + 2) = 0;
  }
  *(_QWORD *)(a1 + 8) = v18;
  v19 = (_BYTE *)*((_QWORD *)v18 - 3);
  v20 = v67;
  v21 = v67 + a3;
  if (*((_QWORD *)v18 - 1) - (_QWORD)v19 < (unint64_t)v67 + a3)
  {
    v50 = v16;
    if (v21 < 0)
      abort();
    v22 = (_BYTE *)*((_QWORD *)v18 - 2);
    v23 = operator new(v67 + a3);
    v24 = v22 - v19;
    v25 = &v23[v22 - v19];
    v26 = v25;
    if (v22 == v19)
      goto LABEL_38;
    if (v24 < 8)
    {
      v27 = &v23[v22 - v19];
      goto LABEL_35;
    }
    v27 = &v23[v22 - v19];
    if ((unint64_t)(v19 - v23) >= 0x20)
    {
      if (v24 < 0x20)
      {
        v28 = 0;
        goto LABEL_30;
      }
      v28 = v24 & 0xFFFFFFFFFFFFFFE0;
      v29 = (__int128 *)(v22 - 16);
      v30 = &v23[v22 - 16 - v19];
      v31 = v24 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v32 = *v29;
        *(v30 - 1) = *(v29 - 1);
        *v30 = v32;
        v30 -= 2;
        v29 -= 2;
        v31 -= 32;
      }
      while (v31);
      if (v24 == v28)
        goto LABEL_37;
      if ((v24 & 0x18) != 0)
      {
LABEL_30:
        v27 = &v25[-(v24 & 0xFFFFFFFFFFFFFFF8)];
        v33 = &v22[-v28 - 8];
        v34 = v33 - v19;
        v35 = v28 - (v24 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v36 = *(_QWORD *)v33;
          v33 -= 8;
          *(_QWORD *)&v23[v34] = v36;
          v34 -= 8;
          v35 += 8;
        }
        while (v35);
        v22 -= v24 & 0xFFFFFFFFFFFFFFF8;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_37;
        goto LABEL_35;
      }
      v27 = &v25[-v28];
      v22 -= v28;
    }
LABEL_35:
    v37 = v27 - 1;
    do
    {
      v38 = *--v22;
      *v37-- = v38;
    }
    while (v22 != v19);
LABEL_37:
    v26 = v23;
LABEL_38:
    *((_QWORD *)v18 - 3) = v26;
    *((_QWORD *)v18 - 2) = v25;
    *((_QWORD *)v18 - 1) = &v23[v21];
    v16 = v50;
    if (v19)
    {
      operator delete(v19);
      v20 = v67;
    }
  }
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)(v18 - 24), *((char **)v18 - 2), v66, &v66[v20], v20);
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)(v18 - 24), *((char **)v18 - 2), a2, &a2[a3], a3);
  v39 = (void *)(*((_QWORD *)v18 - 2) - *((_QWORD *)v18 - 3));
  v60[0] = *((void **)v18 - 3);
  v60[1] = v39;
  v61[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  v51 = 0;
  v40 = llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::LookupBucketFor<llvm::ArrayRef<char>>((uint64_t *)(a1 + 88), (uint64_t)v60, &v51);
  v41 = v51;
  if ((v40 & 1) == 0)
  {
    v48 = llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::InsertIntoBucketImpl<llvm::ArrayRef<char>>(a1 + 88, (uint64_t)v60, (uint64_t)v60, v51);
    *(_OWORD *)v48 = *(_OWORD *)v60;
    v48[2] = v61[0];
    v46 = (void (*)(llvm::raw_svector_ostream *__hidden))v48[2];
    v47 = v66;
    if (v66 == (char *)v68)
      return v46;
LABEL_46:
    free(v47);
    return v46;
  }
  v42 = *(_QWORD *)(a1 + 8);
  v45 = *(void **)(v42 - 24);
  v44 = v42 - 24;
  v43 = v45;
  if (v45)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 8) - 16) = v43;
    operator delete(v43);
  }
  *(_QWORD *)(a1 + 8) = v44;
  v46 = v41[2];
  v47 = v66;
  if (v66 != (char *)v68)
    goto LABEL_46;
  return v46;
}

char *std::vector<std::vector<char>>::__emplace_back_slow_path<>(char **a1)
{
  char *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;

  v2 = *a1;
  v1 = a1[1];
  v3 = 0xAAAAAAAAAAAAAAABLL * ((v1 - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - v2) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v2) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  v10 = v8 + 24;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v11 = v8;
      *((_QWORD *)v8 - 2) = 0;
      *((_QWORD *)v8 - 1) = 0;
      v12 = *(_OWORD *)(v1 - 24);
      v1 -= 24;
      *(_OWORD *)(v8 - 24) = v12;
      v8 -= 24;
      *((_QWORD *)v11 - 1) = *((_QWORD *)v1 + 2);
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      *((_QWORD *)v1 + 2) = 0;
    }
    while (v1 != v2);
    v1 = *a1;
    v13 = a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v13 != v1)
    {
      v14 = v13;
      do
      {
        v16 = (void *)*((_QWORD *)v14 - 3);
        v14 -= 24;
        v15 = v16;
        if (v16)
        {
          *((_QWORD *)v13 - 2) = v15;
          operator delete(v15);
        }
        v13 = v14;
      }
      while (v14 != v1);
    }
  }
  if (v1)
    operator delete(v1);
  return v10;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::LookupBucketFor<llvm::ArrayRef<char>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const void *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t result;
  int v18;
  const void *v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  const void *v23;
  BOOL v24;
  unsigned int v25;
  void *__s1;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v13 = 0;
    result = 0;
    goto LABEL_44;
  }
  v6 = *a1;
  v7 = v4 - 1;
  v8 = (v4 - 1) & llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a2, *(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  v9 = *(void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      v11 = 0;
      v22 = 1;
      v13 = v6 + 24 * v8;
      v23 = *(const void **)v13;
      if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_37;
      while (v23 != (const void *)-1)
      {
        if (v11)
          v24 = 0;
        else
          v24 = v23 == (const void *)-2;
        if (v24)
          v11 = v13;
        v25 = v8 + v22++;
        v8 = v25 & v7;
        v13 = v6 + 24 * (v25 & v7);
        v23 = *(const void **)v13;
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_37:
          if (v10 == *(_QWORD *)(v13 + 8) && !memcmp(__s1, v23, v10))
            goto LABEL_43;
        }
      }
      goto LABEL_40;
    }
    v11 = 0;
    v18 = 1;
    v13 = v6 + 24 * v8;
    v19 = *(const void **)v13;
    if (*(_QWORD *)v13 == -2)
      goto LABEL_21;
LABEL_18:
    if (v19 != (const void *)-1
      && (v10 != *(_QWORD *)(v13 + 8) || memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v19, v10)))
    {
LABEL_21:
      while (v19 != (const void *)-1)
      {
        if (v11)
          v20 = 0;
        else
          v20 = v19 == (const void *)-2;
        if (v20)
          v11 = v13;
        v21 = v8 + v18++;
        v8 = v21 & v7;
        v13 = v6 + 24 * (v21 & v7);
        v19 = *(const void **)v13;
        if (*(_QWORD *)v13 != -2)
          goto LABEL_18;
      }
      goto LABEL_40;
    }
LABEL_43:
    result = 1;
    goto LABEL_44;
  }
  v11 = 0;
  v12 = 1;
  v13 = v6 + 24 * v8;
  v14 = *(const void **)v13;
  if (*(_QWORD *)v13 == -1)
    goto LABEL_7;
LABEL_4:
  if (v14 == (const void *)-2 || v10 == *(_QWORD *)(v13 + 8) && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v14, v10))
    goto LABEL_43;
LABEL_7:
  while (v14 != (const void *)-1)
  {
    if (v11)
      v15 = 0;
    else
      v15 = v14 == (const void *)-2;
    if (v15)
      v11 = v13;
    v16 = v8 + v12++;
    v8 = v16 & v7;
    v13 = v6 + 24 * (v16 & v7);
    v14 = *(const void **)v13;
    if (*(_QWORD *)v13 != -1)
      goto LABEL_4;
  }
LABEL_40:
  result = 0;
  if (v11)
    v13 = v11;
LABEL_44:
  *a3 = v13;
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<char const>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  _QWORD *v70;

  v2 = a2;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v70 = a1;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v67 = v66;
    v2 = a2;
    a1 = v70;
    if (v67)
    {
      v68 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v68 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v68;
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = a2;
      a1 = v70;
    }
  }
  v5 = v4[19];
  v6 = v2 - (_QWORD)a1;
  if ((unint64_t)(v2 - (_QWORD)a1) <= 0x40)
    return llvm::hashing::detail::hash_short((llvm::hashing::detail *)a1, v6, v5);
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  v9 = __ROR8__(v5 ^ 0xB492B66FBE98F273, 49);
  v10 = v5 ^ (v5 >> 47);
  v11 = v5 ^ (((0x9DDFEA08EB382D69 * (v10 ^ (0xB492B66FBE98F273 * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                          * (v10 ^ (0xB492B66FBE98F273
                                                                                                  * v5)));
  v12 = a1[1];
  v13 = a1[6];
  v14 = a1[7];
  v15 = v9 + v5 + v12;
  v16 = a1[5];
  v17 = v16 + v9 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v5 - 0x4B6D499041670D8DLL * v5, 42);
  v18 = v10 - 0x622015F714C7D297 * (v8 ^ (v8 >> 47));
  v19 = *a1 - 0x6D8ED9027DD26057 * v5;
  v20 = a1[2];
  v21 = a1[3];
  v22 = v19 + v12 + v20;
  v23 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v11) ^ ((0x9DDFEA08EB382D69 * v11) >> 47));
  v24 = __ROR8__(v18, 33);
  v25 = (0xB492B66FBE98F273 * __ROR8__(v15, 37)) ^ v23;
  v26 = __ROR8__(v22, 44) + v19 + __ROR8__(v25 + v10 + v19 + v21, 21);
  v27 = 0xB492B66FBE98F273 * v24;
  v28 = v22 + v21;
  v29 = v23 + a1[4] - 0x4B6D499041670D8DLL * v24;
  v30 = __ROR8__(v16 + v13 + v29, 44) + v29 + __ROR8__(v17 + v20 + v14 + v29, 21);
  v31 = v16 + v13 + v29 + v14;
  v32 = (v6 & 0xFFFFFFFFFFFFFFC0) - 64;
  if ((v6 & 0xFFFFFFFFFFFFFFC0) == 0x40)
  {
    v33 = v25;
  }
  else
  {
    v34 = a1 + 15;
    do
    {
      v35 = *(v34 - 6);
      v36 = __ROR8__(v17 + v28 + v27 + v35, 37);
      v38 = *(v34 - 2);
      v37 = *(v34 - 1);
      v17 = v38 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v17 + v26 + v37, 42);
      v39 = v25 + v31;
      v40 = *(v34 - 7) - 0x4B6D499041670D8DLL * v26;
      v41 = *(v34 - 4);
      v42 = *(v34 - 5);
      v43 = v40 + v35 + v42;
      v33 = (0xB492B66FBE98F273 * v36) ^ v30;
      v27 = 0xB492B66FBE98F273 * __ROR8__(v39, 33);
      v26 = __ROR8__(v43, 44) + v40 + __ROR8__(v33 + v31 + v40 + v41, 21);
      v28 = v43 + v41;
      v44 = v27 + v30 + *(v34 - 3);
      v45 = *v34;
      v34 += 8;
      v46 = __ROR8__(v17 + v42 + v44 + v45, 21);
      v47 = v38 + v37 + v44;
      v30 = v46 + v44 + __ROR8__(v47, 44);
      v31 = v47 + v45;
      v25 = v33;
      v32 -= 64;
    }
    while (v32);
  }
  if ((v6 & 0x3F) != 0)
  {
    v48 = *(_QWORD *)(v2 - 56);
    v49 = *(_QWORD *)(v2 - 16);
    v50 = *(_QWORD *)(v2 - 8);
    v51 = v33 + v31;
    v52 = (0xB492B66FBE98F273 * __ROR8__(v17 + v28 + v27 + v48, 37)) ^ v30;
    v54 = *(_QWORD *)(v2 - 32);
    v53 = *(_QWORD *)(v2 - 24);
    v17 = v53 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v17 + v26 + v49, 42);
    v55 = v52 + v31;
    v56 = *(_QWORD *)(v2 - 64) - 0x4B6D499041670D8DLL * v26;
    v59 = v2 - 48;
    v57 = *(_QWORD *)(v2 - 48);
    v58 = *(_QWORD *)(v59 + 8);
    v60 = v56 + v48 + v57;
    v27 = 0xB492B66FBE98F273 * __ROR8__(v51, 33);
    v26 = __ROR8__(v60, 44) + v56 + __ROR8__(v55 + v56 + v58, 21);
    v28 = v60 + v58;
    v61 = v27 + v30 + v54;
    v62 = v53 + v49 + v61;
    v30 = __ROR8__(v17 + v57 + v61 + v50, 21) + v61 + __ROR8__(v62, 44);
    v31 = v62 + v50;
    v33 = v52;
  }
  v63 = 0x9DDFEA08EB382D69
      * (v30 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v30)));
  v64 = v27 - 0x4B6D499041670D8DLL * (v6 ^ (v6 >> 47)) - 0x622015F714C7D297 * (v63 ^ (v63 >> 47));
  v65 = 0x9DDFEA08EB382D69
      * ((v33
        - 0x4B6D499041670D8DLL * (v17 ^ (v17 >> 47))
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v31 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v31)))) ^ ((0x9DDFEA08EB382D69 * (v31 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v31)))) >> 47))) ^ v64);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v64 ^ (v65 >> 47) ^ v65)) ^ ((0x9DDFEA08EB382D69 * (v64 ^ (v65 >> 47) ^ v65)) >> 47));
}

unint64_t llvm::hashing::detail::hash_short(llvm::hashing::detail *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  if (a2 - 4 > 4)
  {
    if (a2 - 9 > 7)
    {
      if (a2 - 17 > 0xF)
      {
        if (a2 < 0x21)
        {
          if (a2)
          {
            v32 = (0x9AE16A3B2F90404FLL
                 * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ a3;
            return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
          }
          else
          {
            return a3 ^ 0x9AE16A3B2F90404FLL;
          }
        }
        else
        {
          v12 = (char *)this + a2;
          v13 = *(_QWORD *)((char *)this + a2 - 16);
          v14 = *(_QWORD *)((char *)this + a2 - 8);
          v15 = *(_QWORD *)this - 0x3C5A37A36834CED9 * (v13 + a2);
          v17 = *((_QWORD *)this + 2);
          v16 = *((_QWORD *)this + 3);
          v18 = __ROR8__(v15 + v16, 52);
          v19 = v15 + *((_QWORD *)this + 1);
          v20 = __ROR8__(v19, 7);
          v21 = v19 + v17;
          v22 = v20 + __ROR8__(*(_QWORD *)this - 0x3C5A37A36834CED9 * (v13 + a2), 37) + v18;
          v23 = *(_QWORD *)((char *)this + a2 - 32) + v17;
          v24 = __ROR8__(v23 + v14, 52);
          v25 = v22 + __ROR8__(v21, 31);
          v26 = __ROR8__(v23, 37);
          v27 = *((_QWORD *)v12 - 3) + v23;
          v28 = __ROR8__(v27, 7);
          v29 = v27 + v13;
          v30 = __ROR8__(v29, 31);
          v31 = ((0xC3A5C85C97CB3127
                * ((0xC3A5C85C97CB3127 * (v29 + v14 + v25) - 0x651E95C4D06FBFB1
                                                             * (v21 + v16 + v26 + v24 + v28 + v30)) ^ ((0xC3A5C85C97CB3127 * (v29 + v14 + v25) - 0x651E95C4D06FBFB1 * (v21 + v16 + v26 + v24 + v28 + v30)) >> 47))) ^ a3)
              + v25;
          return 0x9AE16A3B2F90404FLL * (v31 ^ (v31 >> 47));
        }
      }
      else
      {
        v8 = *((_QWORD *)this + 1);
        v9 = 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)this + a2 - 8);
        v10 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)this - v8, 43)
            - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)this + a2 - 16)
            + __ROR8__(v9 ^ a3, 30);
        v11 = a3 + a2 + __ROR8__(v8 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * *(_QWORD *)this - v9;
        return 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69
               * (v11 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)))) ^ ((0x9DDFEA08EB382D69 * (v11 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)))) >> 47));
      }
    }
    else
    {
      v6 = *(_QWORD *)((char *)this + a2 - 8);
      v7 = __ROR8__(v6 + a2, a2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ a3 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                    * (*(_QWORD *)this ^ a3 ^ v7)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ a3 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ a3 ^ v7)))) >> 47))) ^ v6;
    }
  }
  else
  {
    v3 = *(unsigned int *)((char *)this + a2 - 4) ^ a3;
    v4 = 0x9DDFEA08EB382D69 * (v3 ^ (a2 + 8 * *(unsigned int *)this));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  }
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::InsertIntoBucketImpl<llvm::ArrayRef<char>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::LookupBucketFor<llvm::ArrayRef<char>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_181234BE0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_181234BE0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = (uint64_t)v4;
          do
          {
            if (*(_QWORD *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v27 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::LookupBucketFor<llvm::ArrayRef<char>>((uint64_t *)a1, v21, &v27);
              v22 = v27;
              *v27 = *(_OWORD *)v21;
              *((_QWORD *)v22 + 2) = *(_QWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_181234BE0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_25:
      v26 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181234BE0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v26);
      return result;
    }
    v23 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v23 & 0x1FFFFFFFFFFFFFFELL));
    v24 = v23 & 0x1FFFFFFFFFFFFFFELL;
    v25 = result;
    do
    {
      *v25 = xmmword_181234BE0;
      *(_OWORD *)((char *)v25 + 24) = xmmword_181234BE0;
      v25 += 3;
      v24 -= 2;
    }
    while (v24);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_25;
  }
  return result;
}

void *mlir::OpInterface<mlir::BytecodeOpInterface,mlir::detail::BytecodeOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  void *result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = (void *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
          v31 = 75;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::BytecodeOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
          v31 = 75;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::bytecode::detail::IRNumberingState::getNumber(mlir::bytecode::detail::IRNumberingState *this, mlir::Operation *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  mlir::Operation *v11;
  mlir::Operation *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  mlir::Operation *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v6 = *((_QWORD *)this + 3);
  v4 = (char *)this + 24;
  v5 = v6;
  v7 = *((_DWORD *)v4 + 4);
  if (!v7)
    goto LABEL_21;
  v8 = v7 - 1;
  v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v10 = v5 + 16 * v9;
  v11 = *(mlir::Operation **)v10;
  if (*(mlir::Operation **)v10 == a2)
    return **(unsigned int **)(v10 + 8);
  v14 = 0;
  v15 = 1;
  while (v11 != (mlir::Operation *)-4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v11 == (mlir::Operation *)-8192;
    if (v16)
      v14 = v10;
    v17 = v9 + v15++;
    v9 = v17 & v8;
    v10 = v5 + 16 * (v17 & v8);
    v11 = *(mlir::Operation **)v10;
    if (*(mlir::Operation **)v10 == a2)
      return **(unsigned int **)(v10 + 8);
  }
  if (v14)
    v10 = v14;
  v18 = *((_DWORD *)this + 8);
  if (4 * v18 + 4 < 3 * v7)
  {
    if (v7 + ~v18 - *((_DWORD *)this + 9) > v7 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_21:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v7);
  v19 = *((_QWORD *)this + 3);
  v20 = *((_DWORD *)this + 10) - 1;
  v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
  v10 = v19 + 16 * v21;
  v22 = *(mlir::Operation **)v10;
  if (*(mlir::Operation **)v10 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 8);
    if (a2 == (mlir::Operation *)-4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v23 = 0;
  v24 = 1;
  while (v22 != (mlir::Operation *)-4096)
  {
    if (v23)
      v25 = 0;
    else
      v25 = v22 == (mlir::Operation *)-8192;
    if (v25)
      v23 = v10;
    v26 = v21 + v24++;
    v21 = v26 & v20;
    v10 = v19 + 16 * (v26 & v20);
    v22 = *(mlir::Operation **)v10;
    if (*(mlir::Operation **)v10 == a2)
      goto LABEL_23;
  }
  if (v23)
    v10 = v23;
LABEL_6:
  v13 = *(mlir::Operation **)v10;
  ++*((_DWORD *)this + 8);
  if (v13 != (mlir::Operation *)-4096)
LABEL_7:
    --*((_DWORD *)this + 9);
LABEL_8:
  *(_QWORD *)v10 = a2;
  *(_QWORD *)(v10 + 8) = 0;
  return **(unsigned int **)(v10 + 8);
}

int *std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::BytecodeWriter::writeUseListOrders(`anonymous namespace'::EncodingEmitter &,unsigned char &,mlir::ValueRange)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int *v66;
  int *v67;
  unint64_t v68;
  int *v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int *v81;
  int *v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  int *v106;
  BOOL v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  BOOL v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v88 = *((_QWORD *)a2 - 1);
        v89 = *(_QWORD *)(v8 + 8);
        if (v88 > v89)
        {
          v90 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(a2 - 4);
          *(a2 - 4) = v90;
          *(_QWORD *)(v8 + 8) = v88;
          *((_QWORD *)a2 - 1) = v89;
        }
        return result;
      case 3:
        v91 = *(_QWORD *)(v8 + 24);
        v92 = *(_QWORD *)(v8 + 8);
        v93 = *((_QWORD *)a2 - 1);
        if (v91 <= v92)
        {
          if (v93 > v91)
          {
            v142 = *(_DWORD *)(v8 + 16);
            *(_DWORD *)(v8 + 16) = *(a2 - 4);
            *(a2 - 4) = v142;
            *(_QWORD *)(v8 + 24) = v93;
            *((_QWORD *)a2 - 1) = v91;
            v143 = *(_QWORD *)(v8 + 24);
            v144 = *(_QWORD *)(v8 + 8);
            if (v143 > v144)
            {
              v145 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v145;
              *(_QWORD *)(v8 + 8) = v143;
              *(_QWORD *)(v8 + 24) = v144;
            }
          }
        }
        else
        {
          v94 = *(_DWORD *)v8;
          if (v93 <= v91)
          {
            *(_DWORD *)v8 = *(_DWORD *)(v8 + 16);
            *(_DWORD *)(v8 + 16) = v94;
            *(_QWORD *)(v8 + 8) = v91;
            *(_QWORD *)(v8 + 24) = v92;
            v153 = *((_QWORD *)a2 - 1);
            if (v153 <= v92)
              return result;
            *(_DWORD *)(v8 + 16) = *(a2 - 4);
            *(a2 - 4) = v94;
            *(_QWORD *)(v8 + 24) = v153;
          }
          else
          {
            *(_DWORD *)v8 = *(a2 - 4);
            *(a2 - 4) = v94;
            *(_QWORD *)(v8 + 8) = v93;
          }
          *((_QWORD *)a2 - 1) = v92;
        }
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)v8, (int *)(v8 + 16), (int *)(v8 + 32), a2 - 4);
      case 5:
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)v8, (int *)(v8 + 16), (int *)(v8 + 32), (int *)(v8 + 48));
        v95 = *((_QWORD *)a2 - 1);
        v96 = *(_QWORD *)(v8 + 56);
        if (v95 > v96)
        {
          v97 = *(_DWORD *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = *(a2 - 4);
          *(a2 - 4) = v97;
          *(_QWORD *)(v8 + 56) = v95;
          *((_QWORD *)a2 - 1) = v96;
          v98 = *(_QWORD *)(v8 + 56);
          v99 = *(_QWORD *)(v8 + 40);
          if (v98 > v99)
          {
            v100 = *(_DWORD *)(v8 + 32);
            v101 = *(_DWORD *)(v8 + 48);
            *(_DWORD *)(v8 + 32) = v101;
            *(_DWORD *)(v8 + 48) = v100;
            *(_QWORD *)(v8 + 40) = v98;
            *(_QWORD *)(v8 + 56) = v99;
            v102 = *(_QWORD *)(v8 + 24);
            if (v98 > v102)
            {
              v103 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v101;
              *(_DWORD *)(v8 + 32) = v103;
              *(_QWORD *)(v8 + 24) = v98;
              *(_QWORD *)(v8 + 40) = v102;
              v104 = *(_QWORD *)(v8 + 8);
              if (v98 > v104)
              {
                v105 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v101;
                *(_DWORD *)(v8 + 16) = v105;
                *(_QWORD *)(v8 + 8) = v98;
                *(_QWORD *)(v8 + 24) = v104;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v106 = (int *)(v8 + 16);
          v108 = (int *)v8 == a2 || v106 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v108)
            {
              v109 = 0;
              v110 = (int *)v8;
              do
              {
                v112 = *((_QWORD *)v110 + 3);
                v113 = *((_QWORD *)v110 + 1);
                v110 = v106;
                if (v112 > v113)
                {
                  v114 = *v106;
                  v115 = v109;
                  do
                  {
                    v116 = v8 + v115;
                    *(_DWORD *)(v116 + 16) = *(_DWORD *)(v8 + v115);
                    *(_QWORD *)(v116 + 24) = *(_QWORD *)(v8 + v115 + 8);
                    if (!v115)
                    {
                      v111 = v8;
                      goto LABEL_121;
                    }
                    v115 -= 16;
                  }
                  while (v112 > *(_QWORD *)(v116 - 8));
                  v111 = v8 + v115 + 16;
LABEL_121:
                  *(_DWORD *)v111 = v114;
                  *(_QWORD *)(v111 + 8) = v112;
                }
                v106 = v110 + 4;
                v109 += 16;
              }
              while (v110 + 4 != a2);
            }
          }
          else if (!v108)
          {
            v146 = (unint64_t *)(v8 + 24);
            do
            {
              v147 = *(_QWORD *)(v7 + 24);
              v148 = *(_QWORD *)(v7 + 8);
              v7 = (uint64_t)v106;
              if (v147 > v148)
              {
                v149 = *(_QWORD *)v106;
                v150 = v146;
                do
                {
                  v151 = v150;
                  *((_DWORD *)v150 - 2) = *((_DWORD *)v150 - 6);
                  v152 = *(v150 - 2);
                  v150 -= 2;
                  *v151 = v152;
                }
                while (v147 > *(v151 - 4));
                *((_DWORD *)v150 - 2) = v149;
                *v150 = v147;
              }
              v106 = (int *)(v7 + 16);
              v146 += 2;
            }
            while ((int *)(v7 + 16) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((int *)v8 != a2)
          {
            v117 = (unint64_t)(v10 - 2) >> 1;
            v118 = v117;
            do
            {
              if (v117 >= v118)
              {
                v120 = (2 * v118) | 1;
                v121 = v8 + 16 * v120;
                if (2 * v118 + 2 < v10)
                {
                  v119 = *(_QWORD *)(v121 + 8) > *(_QWORD *)(v121 + 24);
                  v121 += 16 * v119;
                  if (v119)
                    v120 = 2 * v118 + 2;
                }
                v122 = v8 + 16 * v118;
                v123 = *(_QWORD *)(v122 + 8);
                if (*(_QWORD *)(v121 + 8) <= v123)
                {
                  v124 = *(_DWORD *)v122;
                  do
                  {
                    v125 = v122;
                    v122 = v121;
                    *(_DWORD *)v125 = *(_DWORD *)v121;
                    *(_QWORD *)(v125 + 8) = *(_QWORD *)(v121 + 8);
                    if (v117 < v120)
                      break;
                    v126 = (2 * v120) | 1;
                    v121 = v8 + 16 * v126;
                    v127 = 2 * v120 + 2;
                    if (v127 < v10)
                    {
                      v119 = *(_QWORD *)(v121 + 8) > *(_QWORD *)(v121 + 24);
                      v121 += 16 * v119;
                      if (v119)
                        v126 = v127;
                    }
                    result = *(int **)(v121 + 8);
                    v120 = v126;
                  }
                  while ((unint64_t)result <= v123);
                  *(_DWORD *)v122 = v124;
                  *(_QWORD *)(v122 + 8) = v123;
                }
              }
              v119 = v118-- <= 0;
            }
            while (!v119);
            v128 = (unint64_t)v9 >> 4;
            do
            {
              v129 = 0;
              v130 = *(_DWORD *)v8;
              v131 = *(_QWORD *)(v8 + 8);
              v132 = v8;
              do
              {
                v133 = v132 + 16 * v129 + 16;
                v134 = (2 * v129) | 1;
                v135 = 2 * v129 + 2;
                if (v135 < v128)
                {
                  v119 = *(_QWORD *)(v133 + 8) > *(_QWORD *)(v133 + 24);
                  v133 += 16 * v119;
                  if (v119)
                    v134 = v135;
                }
                *(_DWORD *)v132 = *(_DWORD *)v133;
                *(_QWORD *)(v132 + 8) = *(_QWORD *)(v133 + 8);
                v132 = v133;
                v129 = v134;
              }
              while (v134 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
              if ((int *)v133 == a2 - 4)
              {
                *(_DWORD *)v133 = v130;
                *(_QWORD *)(v133 + 8) = v131;
              }
              else
              {
                *(_DWORD *)v133 = *(a2 - 4);
                *(_QWORD *)(v133 + 8) = *((_QWORD *)a2 - 1);
                *(a2 - 4) = v130;
                *((_QWORD *)a2 - 1) = v131;
                v136 = v133 - v8 + 16;
                if (v136 >= 17)
                {
                  v137 = (((unint64_t)v136 >> 4) - 2) >> 1;
                  v138 = v8 + 16 * v137;
                  v139 = *(_QWORD *)(v133 + 8);
                  if (*(_QWORD *)(v138 + 8) > v139)
                  {
                    v140 = *(_DWORD *)v133;
                    do
                    {
                      v141 = v133;
                      v133 = v138;
                      *(_DWORD *)v141 = *(_DWORD *)v138;
                      *(_QWORD *)(v141 + 8) = *(_QWORD *)(v138 + 8);
                      if (!v137)
                        break;
                      v137 = (v137 - 1) >> 1;
                      v138 = v8 + 16 * v137;
                    }
                    while (*(_QWORD *)(v138 + 8) > v139);
                    *(_DWORD *)v133 = v140;
                    *(_QWORD *)(v133 + 8) = v139;
                  }
                }
              }
              a2 -= 4;
              v119 = v128-- <= 2;
            }
            while (!v119);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 16 * ((unint64_t)v10 >> 1);
        v13 = *((_QWORD *)a2 - 1);
        if ((unint64_t)v9 < 0x801)
        {
          v17 = *(_QWORD *)(v8 + 8);
          v18 = *(_QWORD *)(v12 + 8);
          if (v17 <= v18)
          {
            if (v13 > v17)
            {
              v24 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(a2 - 4);
              *(a2 - 4) = v24;
              *(_QWORD *)(v8 + 8) = v13;
              *((_QWORD *)a2 - 1) = v17;
              v25 = *(_QWORD *)(v8 + 8);
              v26 = *(_QWORD *)(v12 + 8);
              if (v25 > v26)
              {
                v27 = *(_DWORD *)v12;
                *(_DWORD *)v12 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v27;
                *(_QWORD *)(v12 + 8) = v25;
                *(_QWORD *)(v8 + 8) = v26;
                --a3;
                v28 = *(_QWORD *)v8;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_DWORD *)v12;
            if (v13 <= v17)
            {
              *(_DWORD *)v12 = *(_DWORD *)v8;
              *(_DWORD *)v8 = v19;
              *(_QWORD *)(v12 + 8) = v17;
              *(_QWORD *)(v8 + 8) = v18;
              v40 = *((_QWORD *)a2 - 1);
              if (v40 <= v18)
                goto LABEL_32;
              *(_DWORD *)v8 = *(a2 - 4);
              *(a2 - 4) = v19;
              *(_QWORD *)(v8 + 8) = v40;
            }
            else
            {
              *(_DWORD *)v12 = *(a2 - 4);
              *(a2 - 4) = v19;
              *(_QWORD *)(v12 + 8) = v13;
            }
            *((_QWORD *)a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          v28 = *(_QWORD *)v8;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v41 = *(_QWORD *)(v8 + 8);
          if (*(_QWORD *)(v8 - 8) > v41)
            goto LABEL_58;
          if (v41 <= *((_QWORD *)a2 - 1))
          {
            v79 = v8 + 16;
            do
            {
              v8 = v79;
              if (v79 >= (unint64_t)a2)
                break;
              v80 = *(_QWORD *)(v79 + 8);
              v79 += 16;
            }
            while (v41 <= v80);
          }
          else
          {
            v77 = v8;
            do
            {
              v8 = v77 + 16;
              v78 = *(_QWORD *)(v77 + 24);
              v77 += 16;
            }
            while (v41 <= v78);
          }
          v81 = a2;
          if (v8 < (unint64_t)a2)
          {
            v82 = a2;
            do
            {
              v81 = v82 - 4;
              v83 = *((_QWORD *)v82 - 1);
              v82 -= 4;
            }
            while (v41 > v83);
          }
          while (v8 < (unint64_t)v81)
          {
            v84 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *v81;
            *v81 = v84;
            v85 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *((_QWORD *)v81 + 1);
            *((_QWORD *)v81 + 1) = v85;
            do
            {
              v86 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v41 <= v86);
            do
            {
              v87 = *((_QWORD *)v81 - 1);
              v81 -= 4;
            }
            while (v41 > v87);
          }
          if (v8 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v28;
          *(_QWORD *)(v8 - 8) = v41;
          continue;
        }
        v14 = *(_QWORD *)(v12 + 8);
        v15 = *(_QWORD *)(v8 + 8);
        if (v14 <= v15)
        {
          if (v13 > v14)
          {
            v20 = *(_DWORD *)v12;
            *(_DWORD *)v12 = *(a2 - 4);
            *(a2 - 4) = v20;
            *(_QWORD *)(v12 + 8) = v13;
            *((_QWORD *)a2 - 1) = v14;
            v21 = *(_QWORD *)(v12 + 8);
            v22 = *(_QWORD *)(v8 + 8);
            if (v21 > v22)
            {
              v23 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(_DWORD *)v12;
              *(_DWORD *)v12 = v23;
              *(_QWORD *)(v8 + 8) = v21;
              *(_QWORD *)(v12 + 8) = v22;
            }
          }
        }
        else
        {
          v16 = *(_DWORD *)v8;
          if (v13 > v14)
          {
            *(_DWORD *)v8 = *(a2 - 4);
            *(a2 - 4) = v16;
            *(_QWORD *)(v8 + 8) = v13;
            goto LABEL_22;
          }
          *(_DWORD *)v8 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v16;
          *(_QWORD *)(v8 + 8) = v14;
          *(_QWORD *)(v12 + 8) = v15;
          v29 = *((_QWORD *)a2 - 1);
          if (v29 > v15)
          {
            *(_DWORD *)v12 = *(a2 - 4);
            *(a2 - 4) = v16;
            *(_QWORD *)(v12 + 8) = v29;
LABEL_22:
            *((_QWORD *)a2 - 1) = v15;
          }
        }
        v30 = v8 + 16 * v11;
        v31 = v30 - 16;
        v32 = *(_QWORD *)(v30 - 8);
        v33 = *(_QWORD *)(v8 + 24);
        v34 = *((_QWORD *)a2 - 3);
        if (v32 <= v33)
        {
          if (v34 > v32)
          {
            v36 = *(_DWORD *)v31;
            *(_DWORD *)v31 = *(a2 - 8);
            *(a2 - 8) = v36;
            *(_QWORD *)(v31 + 8) = v34;
            *((_QWORD *)a2 - 3) = v32;
            v37 = *(_QWORD *)(v31 + 8);
            v38 = *(_QWORD *)(v8 + 24);
            if (v37 > v38)
            {
              v39 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = *(_DWORD *)v31;
              *(_DWORD *)v31 = v39;
              *(_QWORD *)(v8 + 24) = v37;
              *(_QWORD *)(v31 + 8) = v38;
            }
          }
        }
        else
        {
          v35 = *(_DWORD *)(v8 + 16);
          if (v34 > v32)
          {
            *(_DWORD *)(v8 + 16) = *(a2 - 8);
            *(a2 - 8) = v35;
            *(_QWORD *)(v8 + 24) = v34;
            goto LABEL_36;
          }
          *(_DWORD *)(v8 + 16) = *(_DWORD *)v31;
          *(_DWORD *)v31 = v35;
          *(_QWORD *)(v8 + 24) = v32;
          *(_QWORD *)(v31 + 8) = v33;
          v42 = *((_QWORD *)a2 - 3);
          if (v42 > v33)
          {
            *(_DWORD *)v31 = *(a2 - 8);
            *(a2 - 8) = v35;
            *(_QWORD *)(v31 + 8) = v42;
LABEL_36:
            *((_QWORD *)a2 - 3) = v33;
          }
        }
        v43 = v8 + 16 * v11;
        v44 = v43 + 16;
        v45 = *(_QWORD *)(v43 + 24);
        v46 = *(_QWORD *)(v8 + 40);
        v47 = *((_QWORD *)a2 - 5);
        if (v45 <= v46)
        {
          if (v47 > v45)
          {
            v49 = *(_DWORD *)v44;
            *(_DWORD *)v44 = *(a2 - 12);
            *(a2 - 12) = v49;
            *(_QWORD *)(v44 + 8) = v47;
            *((_QWORD *)a2 - 5) = v45;
            v50 = *(_QWORD *)(v44 + 8);
            v51 = *(_QWORD *)(v8 + 40);
            if (v50 > v51)
            {
              v52 = *(_DWORD *)(v8 + 32);
              *(_DWORD *)(v8 + 32) = *(_DWORD *)v44;
              *(_DWORD *)v44 = v52;
              *(_QWORD *)(v8 + 40) = v50;
              *(_QWORD *)(v44 + 8) = v51;
            }
          }
        }
        else
        {
          v48 = *(_DWORD *)(v8 + 32);
          if (v47 > v45)
          {
            *(_DWORD *)(v8 + 32) = *(a2 - 12);
            *(a2 - 12) = v48;
            *(_QWORD *)(v8 + 40) = v47;
            goto LABEL_45;
          }
          *(_DWORD *)(v8 + 32) = *(_DWORD *)v44;
          *(_DWORD *)v44 = v48;
          *(_QWORD *)(v8 + 40) = v45;
          *(_QWORD *)(v44 + 8) = v46;
          v53 = *((_QWORD *)a2 - 5);
          if (v53 > v46)
          {
            *(_DWORD *)v44 = *(a2 - 12);
            *(a2 - 12) = v48;
            *(_QWORD *)(v44 + 8) = v53;
LABEL_45:
            *((_QWORD *)a2 - 5) = v46;
          }
        }
        v54 = *(_QWORD *)(v12 + 8);
        v55 = *(_QWORD *)(v31 + 8);
        v56 = *(_QWORD *)(v44 + 8);
        if (v54 <= v55)
        {
          v57 = *(_DWORD *)v12;
          if (v56 <= v54)
          {
            v55 = *(_QWORD *)(v12 + 8);
          }
          else
          {
            v58 = *(_DWORD *)v44;
            *(_DWORD *)v12 = *(_DWORD *)v44;
            *(_DWORD *)v44 = v57;
            *(_QWORD *)(v12 + 8) = v56;
            *(_QWORD *)(v44 + 8) = v54;
            if (v56 <= v55)
            {
              v55 = v56;
              v57 = v58;
            }
            else
            {
              v57 = *(_DWORD *)v31;
              *(_DWORD *)v31 = v58;
              *(_DWORD *)v12 = v57;
              *(_QWORD *)(v31 + 8) = v56;
              *(_QWORD *)(v12 + 8) = v55;
            }
          }
        }
        else
        {
          v57 = *(_DWORD *)v31;
          if (v56 <= v54)
          {
            *(_DWORD *)v31 = *(_DWORD *)v12;
            *(_DWORD *)v12 = v57;
            *(_QWORD *)(v31 + 8) = v54;
            *(_QWORD *)(v12 + 8) = v55;
            if (v56 > v55)
            {
              v59 = *(_DWORD *)v44;
              *(_DWORD *)v12 = *(_DWORD *)v44;
              *(_DWORD *)v44 = v57;
              *(_QWORD *)(v12 + 8) = v56;
              *(_QWORD *)(v44 + 8) = v55;
              v55 = v56;
              v57 = v59;
            }
          }
          else
          {
            *(_DWORD *)v31 = *(_DWORD *)v44;
            *(_DWORD *)v44 = v57;
            *(_QWORD *)(v31 + 8) = v56;
            *(_QWORD *)(v44 + 8) = v55;
            v57 = *(_DWORD *)v12;
            v55 = v54;
          }
        }
        v60 = *(_DWORD *)v8;
        *(_DWORD *)v8 = v57;
        *(_DWORD *)v12 = v60;
        v61 = v8 + 16 * v11;
        v62 = *(_QWORD *)(v8 + 8);
        *(_QWORD *)(v8 + 8) = v55;
        *(_QWORD *)(v61 + 8) = v62;
        --a3;
        v28 = *(_QWORD *)v8;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v41 = *(_QWORD *)(v8 + 8);
LABEL_58:
        v63 = 0;
        do
        {
          v64 = *(_QWORD *)(v8 + v63 + 24);
          v63 += 16;
        }
        while (v64 > v41);
        v65 = v8 + v63;
        v66 = a2;
        if (v63 == 16)
        {
          v69 = a2;
          while (v65 < (unint64_t)v69)
          {
            v67 = v69 - 4;
            v70 = *((_QWORD *)v69 - 1);
            v69 -= 4;
            if (v70 > v41)
              goto LABEL_66;
          }
          v67 = v69;
          v8 = v65;
        }
        else
        {
          do
          {
            v67 = v66 - 4;
            v68 = *((_QWORD *)v66 - 1);
            v66 -= 4;
          }
          while (v68 <= v41);
LABEL_66:
          v8 = v65;
          if (v65 < (unint64_t)v67)
          {
            v71 = (unint64_t)v67;
            do
            {
              v72 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(_DWORD *)v71;
              *(_DWORD *)v71 = v72;
              v73 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *(_QWORD *)(v71 + 8);
              *(_QWORD *)(v71 + 8) = v73;
              do
              {
                v74 = *(_QWORD *)(v8 + 24);
                v8 += 16;
              }
              while (v74 > v41);
              do
              {
                v75 = *(_QWORD *)(v71 - 8);
                v71 -= 16;
              }
              while (v75 <= v41);
            }
            while (v8 < v71);
          }
        }
        if (v8 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v28;
        *(_QWORD *)(v8 - 8) = v41;
        if (v65 < (unint64_t)v67)
        {
LABEL_77:
          a4 = 0;
          continue;
        }
        if (!(_DWORD)result)
        {
          if (v76)
            continue;
          goto LABEL_77;
        }
        a2 = (int *)(v8 - 16);
        if (!v76)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::BytecodeWriter::writeUseListOrders(`anonymous namespace'::EncodingEmitter &,unsigned char &,mlir::ValueRange)::$_2 &,std::pair<unsigned int,unsigned long long> *>(uint64_t a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  int *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 1);
      v7 = *(_QWORD *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(a2 - 4);
        *(a2 - 4) = v8;
        *(_QWORD *)(a1 + 8) = v6;
        *((_QWORD *)a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *((_QWORD *)a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v30 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = *(a2 - 4);
          *(a2 - 4) = v30;
          *(_QWORD *)(a1 + 24) = v11;
          *((_QWORD *)a2 - 1) = v9;
          v31 = *(_QWORD *)(a1 + 24);
          v32 = *(_QWORD *)(a1 + 8);
          if (v31 > v32)
          {
            v33 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v33;
            *(_QWORD *)(a1 + 8) = v31;
            *(_QWORD *)(a1 + 24) = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v12;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 24) = v10;
          v37 = *((_QWORD *)a2 - 1);
          if (v37 > v10)
          {
            *(_DWORD *)(a1 + 16) = *(a2 - 4);
            *(a2 - 4) = v12;
            *(_QWORD *)(a1 + 24) = v37;
            *((_QWORD *)a2 - 1) = v10;
          }
        }
        else
        {
          *(_DWORD *)a1 = *(a2 - 4);
          *(a2 - 4) = v12;
          *(_QWORD *)(a1 + 8) = v11;
          *((_QWORD *)a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a2 - 4);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (int *)(a1 + 48));
      v19 = *((_QWORD *)a2 - 1);
      v20 = *(_QWORD *)(a1 + 56);
      if (v19 <= v20)
        return 1;
      v21 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = *(a2 - 4);
      *(a2 - 4) = v21;
      *(_QWORD *)(a1 + 56) = v19;
      *((_QWORD *)a2 - 1) = v20;
      v22 = *(_QWORD *)(a1 + 56);
      v23 = *(_QWORD *)(a1 + 40);
      if (v22 <= v23)
        return 1;
      v24 = *(_DWORD *)(a1 + 32);
      v25 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 32) = v25;
      *(_DWORD *)(a1 + 48) = v24;
      *(_QWORD *)(a1 + 40) = v22;
      *(_QWORD *)(a1 + 56) = v23;
      v26 = *(_QWORD *)(a1 + 24);
      if (v22 <= v26)
        return 1;
      v27 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v25;
      *(_DWORD *)(a1 + 32) = v27;
      *(_QWORD *)(a1 + 24) = v22;
      *(_QWORD *)(a1 + 40) = v26;
      v28 = *(_QWORD *)(a1 + 8);
      if (v22 <= v28)
        return 1;
      v29 = *(_DWORD *)a1;
      *(_DWORD *)a1 = v25;
      *(_DWORD *)(a1 + 16) = v29;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 24) = v28;
      return 1;
    default:
      v13 = *(_QWORD *)(a1 + 8);
      v14 = (unint64_t *)(a1 + 24);
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 40);
      if (v15 > v13)
      {
        v17 = *(_DWORD *)a1;
        if (v16 <= v15)
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v17;
          *(_QWORD *)(a1 + 8) = v15;
          *(_QWORD *)(a1 + 24) = v13;
          if (v16 <= v13)
            goto LABEL_30;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v17;
          v18 = (unint64_t *)(a1 + 24);
        }
        else
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v17;
          v18 = (unint64_t *)(a1 + 8);
        }
        v14 = (unint64_t *)(a1 + 40);
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        v34 = *(_DWORD *)(a1 + 16);
        v35 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 16) = v35;
        *(_DWORD *)(a1 + 32) = v34;
        *(_QWORD *)(a1 + 24) = v16;
        *(_QWORD *)(a1 + 40) = v15;
        if (v16 > v13)
        {
          v36 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v35;
          *(_DWORD *)(a1 + 16) = v36;
          v18 = (unint64_t *)(a1 + 8);
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = (int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = (int *)(a1 + 32);
      while (1)
      {
        v42 = *((_QWORD *)v38 + 1);
        if (v42 > *((_QWORD *)v41 + 1))
          break;
LABEL_39:
        v41 = v38;
        v39 += 16;
        v38 += 4;
        if (v38 == a2)
          return 1;
      }
      v43 = *v38;
      v44 = v39;
      do
      {
        v45 = a1 + v44;
        *(_DWORD *)(v45 + 48) = *(_DWORD *)(a1 + v44 + 32);
        *(_QWORD *)(v45 + 56) = *(_QWORD *)(a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_DWORD *)a1 = v43;
          *(_QWORD *)(a1 + 8) = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 4 == a2;
        }
        v44 -= 16;
      }
      while (v42 > *(_QWORD *)(v45 + 24));
      v46 = a1 + v44;
      *(_DWORD *)(v46 + 48) = v43;
      *(_QWORD *)(v46 + 56) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 4 == a2;
  }
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,12u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,12u>>>,unsigned int,llvm::SmallVector<unsigned int,12u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,12u>>>::moveFromOldBuckets(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  unsigned int v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 72 * v6 - 72;
    if (v8 < 0x48)
    {
      v9 = *(_DWORD **)a1;
LABEL_7:
      v13 = &v7[18 * v6];
      do
      {
        *v9 = -1;
        v9 += 18;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x48 + 1;
    v9 = &v7[18 * (v10 & 0x7FFFFFFFFFFFFFELL)];
    v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    v12 = *(_DWORD **)a1;
    do
    {
      *v12 = -1;
      v12[18] = -1;
      v12 += 36;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        v15 = *(_DWORD *)(a1 + 16) - 1;
        v16 = v15 & (37 * v14);
        v17 = *(_QWORD *)a1 + 72 * v16;
        v18 = *(_DWORD *)v17;
        if (v14 != *(_DWORD *)v17)
        {
          v20 = 0;
          v21 = 1;
          while (v18 != -1)
          {
            if (v20)
              v22 = 0;
            else
              v22 = v18 == -2;
            if (v22)
              v20 = v17;
            v23 = v16 + v21++;
            v16 = v23 & v15;
            v17 = *(_QWORD *)a1 + 72 * (v23 & v15);
            v18 = *(_DWORD *)v17;
            if (v14 == *(_DWORD *)v17)
              goto LABEL_14;
          }
          if (v20)
            v17 = v20;
        }
LABEL_14:
        *(_DWORD *)v17 = v14;
        *(_QWORD *)(v17 + 8) = v17 + 24;
        *(_QWORD *)(v17 + 16) = 0xC00000000;
        if (v4[4])
          llvm::SmallVectorImpl<unsigned int>::operator=(v17 + 8, (uint64_t)(v4 + 2));
        ++*(_DWORD *)(a1 + 8);
        v19 = (int *)*((_QWORD *)v4 + 1);
        if (v19 != v4 + 6)
          free(v19);
      }
      v4 += 18;
    }
    while (v4 != a3);
  }
}

uint64_t `anonymous namespace'::BytecodeWriter::writeRegions(`anonymous namespace'::EncodingEmitter &,llvm::MutableArrayRef<mlir::Region>)::{lambda(mlir::Region&)#1}::operator()(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  mlir::Block *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int OperationCount;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  char *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  size_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  size_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  __int128 v88;
  char *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  unint64_t v95;
  __int128 v96;
  char *v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  unsigned int Number;
  char *v104;
  char v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  size_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  unint64_t v123;
  __int128 v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char v130;
  int v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t *v145;
  int v146;
  BOOL v147;
  unsigned int v148;
  unint64_t *v149;
  int v150;
  BOOL v151;
  unsigned int v152;
  uint64_t *v153;
  int v154;
  BOOL v155;
  unsigned int v156;
  char *v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  size_t v164;
  _BYTE *v165;
  char *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  _OWORD *v170;
  char *v171;
  unint64_t v172;
  __int128 v173;
  _QWORD *v174;
  char *v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  char v179;
  mlir::GenericProgramPoint *v180;
  uint64_t v181;
  char *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  size_t v187;
  _BYTE *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  _OWORD *v194;
  unint64_t v195;
  __int128 v196;
  char *v197;
  _QWORD *v198;
  unint64_t v199;
  uint64_t v200;
  char *v201;
  char v202;
  uint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  mlir::Block *v207;
  uint64_t v208;
  mlir::bytecode::detail::IRNumberingState *v209;
  uint64_t v210;
  char v211;
  uint64_t v212[3];

  v212[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if ((_QWORD *)*a2 == a2)
  {
    v16 = *(char **)(v2 + 8);
    v15 = *(_QWORD *)(v2 + 16);
    if ((unint64_t)v16 < v15)
    {
      *v16 = 1;
      *(_QWORD *)(v2 + 8) = v16 + 1;
      return 1;
    }
    v183 = *(char **)v2;
    v184 = (unint64_t)&v16[-*(_QWORD *)v2];
    v185 = v184 + 1;
    if ((uint64_t)(v184 + 1) < 0)
      goto LABEL_306;
    v186 = v15 - (_QWORD)v183;
    if (2 * v186 > v185)
      v185 = 2 * v186;
    if (v186 >= 0x3FFFFFFFFFFFFFFFLL)
      v187 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v187 = v185;
    if (v187)
      v188 = operator new(v187);
    else
      v188 = 0;
    v189 = &v188[v184];
    v190 = &v188[v187];
    v188[v184] = 1;
    v191 = (uint64_t)&v188[v184 + 1];
    if (v16 == v183)
    {
      *(_QWORD *)v2 = v189;
      *(_QWORD *)(v2 + 8) = v191;
      *(_QWORD *)(v2 + 16) = v190;
      if (!v16)
        goto LABEL_301;
      goto LABEL_300;
    }
    if (v184 < 8 || (unint64_t)(v183 - v188) < 0x20)
      goto LABEL_297;
    if (v184 >= 0x20)
    {
      v192 = v184 & 0xFFFFFFFFFFFFFFE0;
      v193 = v16 - 16;
      v194 = &v188[v16 - 16 - v183];
      v195 = v184 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v196 = *(_OWORD *)v193;
        *(v194 - 1) = *((_OWORD *)v193 - 1);
        *v194 = v196;
        v194 -= 2;
        v193 -= 32;
        v195 -= 32;
      }
      while (v195);
      if (v184 == v192)
      {
LABEL_299:
        v16 = *(char **)v2;
        *(_QWORD *)v2 = v188;
        *(_QWORD *)(v2 + 8) = v191;
        *(_QWORD *)(v2 + 16) = v190;
        if (!v16)
        {
LABEL_301:
          *(_QWORD *)(v2 + 8) = v191;
          return 1;
        }
LABEL_300:
        operator delete(v16);
        goto LABEL_301;
      }
      if ((v184 & 0x18) == 0)
      {
        v189 -= v192;
        v16 -= v192;
        goto LABEL_297;
      }
    }
    else
    {
      v192 = 0;
    }
    v189 -= v184 & 0xFFFFFFFFFFFFFFF8;
    v197 = &v16[-v192 - 8];
    v198 = &v188[v197 - v183];
    v199 = v192 - (v184 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v200 = *(_QWORD *)v197;
      v197 -= 8;
      *v198-- = v200;
      v199 += 8;
    }
    while (v199);
    v16 -= v184 & 0xFFFFFFFFFFFFFFF8;
    if (v184 == (v184 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_299;
LABEL_297:
    v201 = v189 - 1;
    do
    {
      v202 = *--v16;
      *v201-- = v202;
    }
    while (v16 != v183);
    goto LABEL_299;
  }
  v3 = a2;
  v4 = *a1;
  v212[0] = (uint64_t)a2;
  v5 = *(_DWORD *)(v4 + 960);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 944);
    v7 = v5 - 1;
    v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (uint64_t *)(v6 + 16 * v8);
    v10 = *v9;
    if ((_QWORD *)*v9 == a2)
      goto LABEL_17;
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (uint64_t *)(v6 + 16 * v8);
      v10 = *v9;
      if ((_QWORD *)*v9 == a2)
        goto LABEL_17;
    }
    if (v11)
      v17 = v11;
    else
      v17 = v9;
  }
  else
  {
    v17 = 0;
  }
  v9 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>,mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucket<mlir::Region * const&>(v4 + 944, v17, v212);
LABEL_17:
  v18 = HIDWORD(v9[1]);
  v19 = (_QWORD *)v3[1];
  if (v19 == v3)
    return 1;
  v209 = (mlir::bytecode::detail::IRNumberingState *)(v4 + 40);
  v203 = v4 + 112;
  v205 = v3;
  while (2)
  {
    if (v19)
      v20 = (mlir::Block *)(v19 - 1);
    else
      v20 = 0;
    v22 = *((_QWORD *)v20 + 6);
    v21 = *((_QWORD *)v20 + 7);
    OperationCount = mlir::bytecode::detail::IRNumberingState::getOperationCount(v209, v20);
    v208 = v22;
    v24 = v21 - v22;
    if (v21 == v22)
      goto LABEL_267;
    v206 = v19;
    v207 = v20;
    v25 = v24 >> 3;
    v26 = v22;
    v204 = v25;
    v210 = v22 + 8 * v25;
    do
    {
      v27 = *(_QWORD *)(*(_QWORD *)v26 + 32);
      v28 = *(_QWORD *)(*(_QWORD *)v26 + 8) & 0xFFFFFFFFFFFFFFF8;
      v29 = *(_QWORD *)(v4 + 112);
      v30 = *(_DWORD *)(v4 + 128);
      if (**(uint64_t **)(v4 + 984) < 4)
      {
        if (!v30)
          goto LABEL_189;
        v39 = v30 - 1;
        v40 = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
        v41 = (unint64_t *)(v29 + 16 * v40);
        v42 = *v41;
        if (*v41 == v28)
          goto LABEL_68;
        v43 = 0;
        v44 = 1;
        while (v42 != -4096)
        {
          if (v43)
            v45 = 0;
          else
            v45 = v42 == -8192;
          if (v45)
            v43 = v41;
          v46 = v40 + v44++;
          v40 = v46 & v39;
          v41 = (unint64_t *)(v29 + 16 * (v46 & v39));
          v42 = *v41;
          if (*v41 == v28)
            goto LABEL_68;
        }
        if (v43)
          v41 = v43;
        v136 = *(_DWORD *)(v4 + 120);
        if (4 * v136 + 4 < 3 * v30)
        {
          if (v30 + ~v136 - *(_DWORD *)(v4 + 124) > v30 >> 3)
            goto LABEL_64;
        }
        else
        {
LABEL_189:
          v30 *= 2;
        }
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v203, v30);
        v137 = *(_QWORD *)(v4 + 112);
        v138 = *(_DWORD *)(v4 + 128) - 1;
        v139 = v138 & ((v28 >> 4) ^ (v28 >> 9));
        v41 = (unint64_t *)(v137 + 16 * v139);
        v140 = *v41;
        if (*v41 == v28)
        {
          v52 = v28;
          goto LABEL_65;
        }
        v149 = 0;
        v150 = 1;
        while (v140 != -4096)
        {
          if (v149)
            v151 = 0;
          else
            v151 = v140 == -8192;
          if (v151)
            v149 = v41;
          v152 = v139 + v150++;
          v139 = v152 & v138;
          v41 = (unint64_t *)(v137 + 16 * (v152 & v138));
          v140 = *v41;
          v52 = v28;
          if (*v41 == v28)
            goto LABEL_65;
        }
        if (v149)
          v41 = v149;
LABEL_64:
        v52 = *v41;
LABEL_65:
        ++*(_DWORD *)(v4 + 120);
        if (v52 != -4096)
          --*(_DWORD *)(v4 + 124);
        *v41 = v28;
        v41[1] = 0;
LABEL_68:
        v53 = *(unsigned int *)(v41[1] + 8);
        if (v53 > 0x7F)
        {
          v57 = *(_DWORD *)(v4 + 56);
          if (!v57)
            goto LABEL_142;
          goto LABEL_73;
        }
        v54 = (2 * v53) | 1;
        v56 = *(char **)(v2 + 8);
        v55 = *(_QWORD *)(v2 + 16);
        if ((unint64_t)v56 < v55)
        {
          *v56 = v54;
          *(_QWORD *)(v2 + 8) = v56 + 1;
          v57 = *(_DWORD *)(v4 + 56);
          if (!v57)
            goto LABEL_142;
          goto LABEL_73;
        }
        v75 = *(char **)v2;
        v76 = (unint64_t)&v56[-*(_QWORD *)v2];
        v77 = v76 + 1;
        if ((uint64_t)(v76 + 1) < 0)
          goto LABEL_306;
        v78 = v55 - (_QWORD)v75;
        if (2 * v78 > v77)
          v77 = 2 * v78;
        if (v78 >= 0x3FFFFFFFFFFFFFFFLL)
          v79 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v79 = v77;
        if (v79)
        {
          v80 = (char *)operator new(v79);
          v81 = &v80[v76];
          v80[v76] = v54;
          v82 = (uint64_t)&v80[v76 + 1];
          if (v56 == v75)
          {
LABEL_139:
            *(_QWORD *)v2 = v81;
            *(_QWORD *)(v2 + 8) = v82;
            *(_QWORD *)(v2 + 16) = &v80[v79];
            if (v56)
              operator delete(v56);
            *(_QWORD *)(v2 + 8) = v82;
            v57 = *(_DWORD *)(v4 + 56);
            if (!v57)
            {
LABEL_142:
              v61 = 0;
              v106 = *(_DWORD *)(v4 + 48);
              if (4 * v106 + 4 < 3 * v57)
                goto LABEL_143;
              goto LABEL_195;
            }
LABEL_73:
            v58 = *(_QWORD *)(v4 + 40);
            v59 = v57 - 1;
            v60 = (v57 - 1) & ((v27 >> 4) ^ (v27 >> 9));
            v61 = (uint64_t *)(v58 + 16 * v60);
            v62 = *v61;
            if (*v61 == v27)
              goto LABEL_148;
            v63 = 0;
            v64 = 1;
            while (v62 != -4096)
            {
              if (v63)
                v65 = 0;
              else
                v65 = v62 == -8192;
              if (v65)
                v63 = v61;
              v66 = v60 + v64++;
              v60 = v66 & v59;
              v61 = (uint64_t *)(v58 + 16 * (v66 & v59));
              v62 = *v61;
              if (*v61 == v27)
                goto LABEL_148;
            }
            if (v63)
              v61 = v63;
            v106 = *(_DWORD *)(v4 + 48);
            if (4 * v106 + 4 < 3 * v57)
            {
LABEL_143:
              if (v57 + ~v106 - *(_DWORD *)(v4 + 52) > v57 >> 3)
                goto LABEL_144;
              goto LABEL_196;
            }
LABEL_195:
            v57 *= 2;
LABEL_196:
            llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v209, v57);
            v141 = *(_QWORD *)(v4 + 40);
            v142 = *(_DWORD *)(v4 + 56) - 1;
            v143 = v142 & ((v27 >> 4) ^ (v27 >> 9));
            v61 = (uint64_t *)(v141 + 16 * v143);
            v144 = *v61;
            if (*v61 == v27)
            {
              v107 = v27;
              goto LABEL_145;
            }
            v153 = 0;
            v154 = 1;
            while (v144 != -4096)
            {
              if (v153)
                v155 = 0;
              else
                v155 = v144 == -8192;
              if (v155)
                v153 = v61;
              v156 = v143 + v154++;
              v143 = v156 & v142;
              v61 = (uint64_t *)(v141 + 16 * (v156 & v142));
              v144 = *v61;
              if (*v61 == v27)
              {
                v107 = v27;
                goto LABEL_145;
              }
            }
            if (v153)
              v61 = v153;
LABEL_144:
            v107 = *v61;
LABEL_145:
            ++*(_DWORD *)(v4 + 48);
            if (v107 != -4096)
              --*(_DWORD *)(v4 + 52);
            *v61 = v27;
            v61[1] = 0;
LABEL_148:
            v108 = *(unsigned int *)(v61[1] + 8);
            if (v108 > 0x7F)
            {
              goto LABEL_26;
            }
            v109 = (2 * v108) | 1;
            v111 = *(char **)(v2 + 8);
            v110 = *(_QWORD *)(v2 + 16);
            if ((unint64_t)v111 < v110)
            {
              *v111 = v109;
              *(_QWORD *)(v2 + 8) = v111 + 1;
              goto LABEL_26;
            }
            v112 = *(char **)v2;
            v113 = (unint64_t)&v111[-*(_QWORD *)v2];
            v114 = v113 + 1;
            if ((uint64_t)(v113 + 1) < 0)
              goto LABEL_306;
            v115 = v110 - (_QWORD)v112;
            if (2 * v115 > v114)
              v114 = 2 * v115;
            if (v115 >= 0x3FFFFFFFFFFFFFFFLL)
              v116 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v116 = v114;
            if (v116)
            {
              v117 = (char *)operator new(v116);
              v118 = &v117[v113];
              v117[v113] = v109;
              v119 = (uint64_t)&v117[v113 + 1];
              if (v111 == v112)
                goto LABEL_177;
            }
            else
            {
              v117 = 0;
              v118 = &v111[-*(_QWORD *)v2];
              *(_BYTE *)v113 = v109;
              v119 = v113 + 1;
              if (v111 == v112)
              {
LABEL_177:
                *(_QWORD *)v2 = v118;
                *(_QWORD *)(v2 + 8) = v119;
                *(_QWORD *)(v2 + 16) = &v117[v116];
                if (v111)
                  operator delete(v111);
                *(_QWORD *)(v2 + 8) = v119;
                goto LABEL_26;
              }
            }
            if (v113 >= 8 && (unint64_t)(v112 - v117) >= 0x20)
            {
              if (v113 < 0x20)
              {
                v120 = 0;
                goto LABEL_169;
              }
              v120 = v113 & 0xFFFFFFFFFFFFFFE0;
              v121 = &v117[v113 - 16];
              v122 = v111 - 16;
              v123 = v113 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v124 = *(_OWORD *)v122;
                *((_OWORD *)v121 - 1) = *((_OWORD *)v122 - 1);
                *(_OWORD *)v121 = v124;
                v121 -= 32;
                v122 -= 32;
                v123 -= 32;
              }
              while (v123);
              if (v113 == v120)
                goto LABEL_176;
              if ((v113 & 0x18) != 0)
              {
LABEL_169:
                v118 -= v113 & 0xFFFFFFFFFFFFFFF8;
                v125 = &v117[&v111[-v120] - v112 - 8];
                v126 = &v111[-v120 - 8];
                v127 = v120 - (v113 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v128 = *(_QWORD *)v126;
                  v126 -= 8;
                  *(_QWORD *)v125 = v128;
                  v125 -= 8;
                  v127 += 8;
                }
                while (v127);
                v111 -= v113 & 0xFFFFFFFFFFFFFFF8;
                if (v113 == (v113 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_176;
                goto LABEL_174;
              }
              v118 -= v120;
              v111 -= v120;
            }
LABEL_174:
            v129 = v118 - 1;
            do
            {
              v130 = *--v111;
              *v129-- = v130;
            }
            while (v111 != v112);
LABEL_176:
            v111 = *(char **)v2;
            v118 = v117;
            goto LABEL_177;
          }
        }
        else
        {
          v80 = 0;
          v81 = &v56[-*(_QWORD *)v2];
          *(_BYTE *)v76 = v54;
          v82 = v76 + 1;
          if (v56 == v75)
            goto LABEL_139;
        }
        if (v76 >= 8 && (unint64_t)(v75 - v80) >= 0x20)
        {
          if (v76 < 0x20)
          {
            v84 = 0;
            goto LABEL_123;
          }
          v84 = v76 & 0xFFFFFFFFFFFFFFE0;
          v93 = &v80[v76 - 16];
          v94 = v56 - 16;
          v95 = v76 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v96 = *(_OWORD *)v94;
            *((_OWORD *)v93 - 1) = *((_OWORD *)v94 - 1);
            *(_OWORD *)v93 = v96;
            v93 -= 32;
            v94 -= 32;
            v95 -= 32;
          }
          while (v95);
          if (v76 == v84)
            goto LABEL_138;
          if ((v76 & 0x18) != 0)
          {
LABEL_123:
            v81 -= v76 & 0xFFFFFFFFFFFFFFF8;
            v97 = &v80[&v56[-v84] - v75 - 8];
            v98 = &v56[-v84 - 8];
            v99 = v84 - (v76 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v100 = *(_QWORD *)v98;
              v98 -= 8;
              *(_QWORD *)v97 = v100;
              v97 -= 8;
              v99 += 8;
            }
            while (v99);
            v56 -= v76 & 0xFFFFFFFFFFFFFFF8;
            if (v76 == (v76 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_138;
            goto LABEL_136;
          }
          v81 -= v84;
          v56 -= v84;
        }
LABEL_136:
        v104 = v81 - 1;
        do
        {
          v105 = *--v56;
          *v104-- = v105;
        }
        while (v56 != v75);
LABEL_138:
        v56 = *(char **)v2;
        v81 = v80;
        goto LABEL_139;
      }
      if (!v30)
        goto LABEL_183;
      v31 = v30 - 1;
      v32 = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
      v33 = (unint64_t *)(v29 + 16 * v32);
      v34 = *v33;
      if (*v33 == v28)
        goto LABEL_56;
      v35 = 0;
      v36 = 1;
      while (v34 != -4096)
      {
        if (v35)
          v37 = 0;
        else
          v37 = v34 == -8192;
        if (v37)
          v35 = v33;
        v38 = v32 + v36++;
        v32 = v38 & v31;
        v33 = (unint64_t *)(v29 + 16 * (v38 & v31));
        v34 = *v33;
        if (*v33 == v28)
          goto LABEL_56;
      }
      if (v35)
        v33 = v35;
      v131 = *(_DWORD *)(v4 + 120);
      if (4 * v131 + 4 < 3 * v30)
      {
        if (v30 + ~v131 - *(_DWORD *)(v4 + 124) > v30 >> 3)
          goto LABEL_52;
      }
      else
      {
LABEL_183:
        v30 *= 2;
      }
      llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v203, v30);
      v132 = *(_QWORD *)(v4 + 112);
      v133 = *(_DWORD *)(v4 + 128) - 1;
      v134 = v133 & ((v28 >> 4) ^ (v28 >> 9));
      v33 = (unint64_t *)(v132 + 16 * v134);
      v135 = *v33;
      if (*v33 == v28)
      {
        v47 = v28;
        goto LABEL_53;
      }
      v145 = 0;
      v146 = 1;
      while (v135 != -4096)
      {
        if (v145)
          v147 = 0;
        else
          v147 = v135 == -8192;
        if (v147)
          v145 = v33;
        v148 = v134 + v146++;
        v134 = v148 & v133;
        v33 = (unint64_t *)(v132 + 16 * (v148 & v133));
        v135 = *v33;
        v47 = v28;
        if (*v33 == v28)
          goto LABEL_53;
      }
      if (v145)
        v33 = v145;
LABEL_52:
      v47 = *v33;
LABEL_53:
      ++*(_DWORD *)(v4 + 120);
      if (v47 != -4096)
        --*(_DWORD *)(v4 + 124);
      *v33 = v28;
      v33[1] = 0;
LABEL_56:
      v48 = (*(_QWORD *)(*(_QWORD *)v27 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id) | (2 * *(unsigned int *)(v33[1] + 8));
      if (v48 > 0x7F)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)v27 + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
          goto LABEL_134;
        goto LABEL_26;
      }
      v49 = (2 * v48) | 1;
      v51 = *(char **)(v2 + 8);
      v50 = *(_QWORD *)(v2 + 16);
      if ((unint64_t)v51 < v50)
      {
        *v51 = v49;
        *(_QWORD *)(v2 + 8) = v51 + 1;
        if (*(_UNKNOWN **)(*(_QWORD *)v27 + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
          goto LABEL_134;
        goto LABEL_26;
      }
      v67 = *(char **)v2;
      v68 = (unint64_t)&v51[-*(_QWORD *)v2];
      v69 = v68 + 1;
      if ((uint64_t)(v68 + 1) < 0)
        goto LABEL_306;
      v70 = v50 - (_QWORD)v67;
      if (2 * v70 > v69)
        v69 = 2 * v70;
      if (v70 >= 0x3FFFFFFFFFFFFFFFLL)
        v71 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v71 = v69;
      if (!v71)
      {
        v72 = 0;
        v73 = &v51[-*(_QWORD *)v2];
        *(_BYTE *)v68 = v49;
        v74 = v68 + 1;
        if (v51 == v67)
          goto LABEL_131;
LABEL_102:
        if (v68 >= 8 && (unint64_t)(v67 - v72) >= 0x20)
        {
          if (v68 < 0x20)
          {
            v83 = 0;
            goto LABEL_115;
          }
          v83 = v68 & 0xFFFFFFFFFFFFFFE0;
          v85 = &v72[v68 - 16];
          v86 = v51 - 16;
          v87 = v68 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v88 = *(_OWORD *)v86;
            *((_OWORD *)v85 - 1) = *((_OWORD *)v86 - 1);
            *(_OWORD *)v85 = v88;
            v85 -= 32;
            v86 -= 32;
            v87 -= 32;
          }
          while (v87);
          if (v68 == v83)
            goto LABEL_130;
          if ((v68 & 0x18) != 0)
          {
LABEL_115:
            v73 -= v68 & 0xFFFFFFFFFFFFFFF8;
            v89 = &v72[&v51[-v83] - v67 - 8];
            v90 = &v51[-v83 - 8];
            v91 = v83 - (v68 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v92 = *(_QWORD *)v90;
              v90 -= 8;
              *(_QWORD *)v89 = v92;
              v89 -= 8;
              v91 += 8;
            }
            while (v91);
            v51 -= v68 & 0xFFFFFFFFFFFFFFF8;
            if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_130;
            goto LABEL_128;
          }
          v73 -= v83;
          v51 -= v83;
        }
LABEL_128:
        v101 = v73 - 1;
        do
        {
          v102 = *--v51;
          *v101-- = v102;
        }
        while (v51 != v67);
LABEL_130:
        v51 = *(char **)v2;
        v73 = v72;
        goto LABEL_131;
      }
      v72 = (char *)operator new(v71);
      v73 = &v72[v68];
      v72[v68] = v49;
      v74 = (uint64_t)&v72[v68 + 1];
      if (v51 != v67)
        goto LABEL_102;
LABEL_131:
      *(_QWORD *)v2 = v73;
      *(_QWORD *)(v2 + 8) = v74;
      *(_QWORD *)(v2 + 16) = &v72[v71];
      if (v51)
        operator delete(v51);
      *(_QWORD *)(v2 + 8) = v74;
      if (*(_UNKNOWN **)(*(_QWORD *)v27 + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
      {
LABEL_134:
        Number = mlir::bytecode::detail::IRNumberingState::getNumber((uint64_t)v209, v27);
      }
LABEL_26:
      v26 += 8;
    }
    while (v26 != v210);
    v3 = v205;
    v19 = v206;
    v20 = v207;
    if (**(uint64_t **)(v4 + 984) > 2)
    {
      v158 = *(char **)v2;
      v157 = *(char **)(v2 + 8);
      v211 = 0;
      v159 = *(_QWORD *)(v2 + 16);
      if ((unint64_t)v157 < v159)
      {
        *v157 = 0;
        v160 = (uint64_t)(v157 + 1);
        goto LABEL_266;
      }
      v161 = v157 - v158;
      v162 = v157 - v158 + 1;
      if (v162 >= 0)
      {
        v163 = v159 - (_QWORD)v158;
        if (2 * v163 > v162)
          v162 = 2 * v163;
        if (v163 >= 0x3FFFFFFFFFFFFFFFLL)
          v164 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v164 = v162;
        if (v164)
        {
          v165 = operator new(v164);
          v166 = &v165[v161];
          v165[v161] = 0;
          v160 = (uint64_t)&v165[v161 + 1];
          if (v157 != v158)
            goto LABEL_245;
LABEL_248:
          v168 = v157;
          *(_QWORD *)v2 = v166;
          *(_QWORD *)(v2 + 8) = v160;
          *(_QWORD *)(v2 + 16) = &v165[v164];
          if (!v157)
          {
LABEL_266:
            *(_QWORD *)(v2 + 8) = v160;
            mlir::ValueRange::ValueRange((unint64_t *)v212, v208, v204);
          }
LABEL_265:
          operator delete(v168);
          goto LABEL_266;
        }
        v165 = 0;
        v166 = (char *)(v157 - v158);
        *(_BYTE *)v161 = 0;
        v160 = v161 + 1;
        if (v157 == v158)
          goto LABEL_248;
LABEL_245:
        if (v161 < 8)
        {
          v167 = v157;
          goto LABEL_262;
        }
        v167 = v157;
        if ((unint64_t)(v158 - v165) < 0x20)
          goto LABEL_262;
        if (v161 >= 0x20)
        {
          v169 = v161 & 0xFFFFFFFFFFFFFFE0;
          v170 = &v165[v161 - 16];
          v171 = v157 - 16;
          v172 = v161 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v173 = *(_OWORD *)v171;
            *(v170 - 1) = *((_OWORD *)v171 - 1);
            *v170 = v173;
            v170 -= 2;
            v171 -= 32;
            v172 -= 32;
          }
          while (v172);
          if (v161 != v169)
          {
            if ((v161 & 0x18) == 0)
            {
              v166 -= v169;
              v167 = &v157[-v169];
              goto LABEL_262;
            }
            goto LABEL_257;
          }
        }
        else
        {
          v169 = 0;
LABEL_257:
          v167 = &v157[-(v161 & 0xFFFFFFFFFFFFFFF8)];
          v166 -= v161 & 0xFFFFFFFFFFFFFFF8;
          v174 = &v165[&v157[-v169] - v158 - 8];
          v175 = &v157[-v169 - 8];
          v176 = v169 - (v161 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v177 = *(_QWORD *)v175;
            v175 -= 8;
            *v174-- = v177;
            v176 += 8;
          }
          while (v176);
          if (v161 != (v161 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_262:
            v178 = v166 - 1;
            do
            {
              v179 = *--v167;
              *v178-- = v179;
            }
            while (v167 != v158);
          }
        }
        v168 = *(char **)v2;
        *(_QWORD *)v2 = v165;
        *(_QWORD *)(v2 + 8) = v160;
        *(_QWORD *)(v2 + 16) = &v165[v164];
        if (!v168)
          goto LABEL_266;
        goto LABEL_265;
      }
LABEL_306:
      abort();
    }
LABEL_267:
    v180 = (mlir::GenericProgramPoint *)*((_QWORD *)v20 + 5);
    if (v180 == (mlir::Block *)((char *)v20 + 32))
    {
LABEL_19:
      v19 = (_QWORD *)v19[1];
      if (v19 == v3)
        return 1;
      continue;
    }
    break;
  }
  while (1)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v180);
      return 0;
    v180 = (mlir::GenericProgramPoint *)*((_QWORD *)v180 + 1);
    if (v180 == (mlir::Block *)((char *)v20 + 32))
      goto LABEL_19;
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>,mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucket<mlir::Region * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v16 & v10));
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

_QWORD *llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v23 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = *(_DWORD *)(a1 + 16) - 1;
          v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          v22 = (_QWORD *)(*(_QWORD *)a1 + 16 * v25);
          v26 = *v22;
          if (v23 != *v22)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v22;
              v30 = v25 + v28++;
              v25 = v30 & v24;
              v22 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v30 & v24));
              v26 = *v22;
              if (v23 == *v22)
                goto LABEL_24;
            }
            if (v27)
              v22 = v27;
          }
LABEL_24:
          *v22 = v23;
          v22[1] = *((_QWORD *)v16 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = result + 2;
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4096;
      *v19 = -4096;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[2 * v17];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t mlir::bytecode::detail::IRNumberingState::getOperationCount(mlir::bytecode::detail::IRNumberingState *this, mlir::Block *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  mlir::Block *v9;
  mlir::Block *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  mlir::Block *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;

  v4 = *((_DWORD *)this + 224);
  if (!v4)
    goto LABEL_21;
  v5 = *((_QWORD *)this + 110);
  v6 = v4 - 1;
  v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = v5 + 16 * v7;
  v9 = *(mlir::Block **)v8;
  if (*(mlir::Block **)v8 == a2)
    return *(unsigned int *)(v8 + 8);
  v12 = 0;
  v13 = 1;
  while (v9 != (mlir::Block *)-4096)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v9 == (mlir::Block *)-8192;
    if (v14)
      v12 = v8;
    v15 = v7 + v13++;
    v7 = v15 & v6;
    v8 = v5 + 16 * (v15 & v6);
    v9 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2)
      return *(unsigned int *)(v8 + 8);
  }
  if (v12)
    v8 = v12;
  v16 = *((_DWORD *)this + 222);
  if (4 * v16 + 4 < 3 * v4)
  {
    if (v4 + ~v16 - *((_DWORD *)this + 223) > v4 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_21:
    v4 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 880, v4);
  v17 = *((_QWORD *)this + 110);
  v18 = *((_DWORD *)this + 224) - 1;
  v19 = v18 & ((a2 >> 4) ^ (a2 >> 9));
  v8 = v17 + 16 * v19;
  v20 = *(mlir::Block **)v8;
  if (*(mlir::Block **)v8 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 222);
    if (a2 == (mlir::Block *)-4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != (mlir::Block *)-4096)
  {
    if (v21)
      v23 = 0;
    else
      v23 = v20 == (mlir::Block *)-8192;
    if (v23)
      v21 = v8;
    v24 = v19 + v22++;
    v19 = v24 & v18;
    v8 = v17 + 16 * (v24 & v18);
    v20 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2)
      goto LABEL_23;
  }
  if (v21)
    v8 = v21;
LABEL_6:
  v11 = *(mlir::Block **)v8;
  ++*((_DWORD *)this + 222);
  if (v11 != (mlir::Block *)-4096)
LABEL_7:
    --*((_DWORD *)this + 223);
LABEL_8:
  *(_QWORD *)v8 = a2;
  *(_DWORD *)(v8 + 8) = 0;
  return 0;
}

void `anonymous namespace'::BytecodeWriter::writeResourceSection(mlir::Operation *,`anonymous namespace'::EncodingEmitter &)::$_1::operator()(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char **v13;
  unsigned int HashValue;
  uint64_t v15;
  uint64_t v16;
  char **v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  size_t v25;
  char *v26;
  unint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  unint64_t v30;
  __int128 v31;
  _QWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t ***)(a1 + 8);
  v5 = *((unsigned int *)v4 + 2);
  if ((_DWORD)v5)
  {
    v6 = *v4;
    v7 = (uint64_t)&(*v4)[4 * v5];
    v38 = v3;
    while (1)
    {
      v9 = *v6;
      v10 = v6[1];
      v11 = *((_DWORD *)v6 + 4);
      v12 = v6[3];
      v13 = *(char ***)a1;
      HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue((_QWORD *)*v6, v10);
      v15 = *(unsigned int *)(v3 + 32);
      *(_QWORD *)&v39 = v9;
      *((_QWORD *)&v39 + 1) = __PAIR64__(HashValue, v10);
      v40 = v15;
      v16 = llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>(v3, &v39, &v40);
      v17 = *(char ***)a1;
      v19 = *(_BYTE **)(*(_QWORD *)a1 + 8);
      v18 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      if ((unint64_t)v19 >= v18)
        break;
      *v19 = v11;
      v8 = (uint64_t)(v19 + 1);
LABEL_4:
      v17[1] = (char *)v8;
      v6 += 4;
      if (v6 == (uint64_t *)v7)
        return;
    }
    v20 = *v17;
    v21 = v19 - *v17;
    v22 = v21 + 1;
    if ((uint64_t)(v21 + 1) < 0)
      abort();
    v23 = v18 - (_QWORD)v20;
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
      v24 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      v25 = v24;
      v24 = (size_t)operator new(v24);
      v26 = (char *)(v24 + v21);
      *(_BYTE *)(v24 + v21) = v11;
      v8 = v24 + v21 + 1;
      if (v19 == v20)
      {
LABEL_32:
        *v17 = v26;
        v17[1] = (char *)v8;
        v17[2] = (char *)(v24 + v25);
        v3 = v38;
        if (v19)
          operator delete(v19);
        goto LABEL_4;
      }
    }
    else
    {
      v25 = 0;
      v26 = (char *)(v19 - *v17);
      *(_BYTE *)v21 = v11;
      v8 = v21 + 1;
      if (v19 == v20)
        goto LABEL_32;
    }
    if (v21 >= 8 && (unint64_t)&v20[-v24] >= 0x20)
    {
      if (v21 < 0x20)
      {
        v27 = 0;
        goto LABEL_24;
      }
      v27 = v21 & 0xFFFFFFFFFFFFFFE0;
      v28 = (_OWORD *)(v24 + v21 - 16);
      v29 = (__int128 *)(v19 - 16);
      v30 = v21 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v31 = *v29;
        *(v28 - 1) = *(v29 - 1);
        *v28 = v31;
        v28 -= 2;
        v29 -= 2;
        v30 -= 32;
      }
      while (v30);
      if (v21 == v27)
        goto LABEL_31;
      if ((v21 & 0x18) != 0)
      {
LABEL_24:
        v26 -= v21 & 0xFFFFFFFFFFFFFFF8;
        v32 = (_QWORD *)(v24 + &v19[-v27] - v20 - 8);
        v33 = (uint64_t *)&v19[-v27 - 8];
        v34 = v27 - (v21 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v35 = *v33--;
          *v32-- = v35;
          v34 += 8;
        }
        while (v34);
        v19 -= v21 & 0xFFFFFFFFFFFFFFF8;
        if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_31;
        goto LABEL_29;
      }
      v26 -= v27;
      v19 -= v27;
    }
LABEL_29:
    v36 = v26 - 1;
    do
    {
      v37 = *--v19;
      *v36-- = v37;
    }
    while (v19 != v20);
LABEL_31:
    v19 = *v17;
    v26 = (char *)v24;
    goto LABEL_32;
  }
}

void llvm::function_ref<void ()(llvm::StringRef,mlir::AsmResourceEntryKind)>::callback_fn<`anonymous namespace'::BytecodeWriter::writeResourceSection(mlir::Operation *,`anonymous namespace'::EncodingEmitter &)::$_0>(_QWORD **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  _OWORD *v15;
  __int128 v16;
  char *v17;
  _QWORD v18[2];
  int v19;
  uint64_t v20;

  v5 = (uint64_t)a1[1];
  v6 = (*a1)[9] + (*a1)[1] - **a1;
  v7 = v6 - *a1[2];
  v8 = *(unsigned int *)(v5 + 8);
  if (v8 >= *(_DWORD *)(v5 + 12))
  {
    v18[0] = a2;
    v18[1] = a3;
    v19 = a4;
    v20 = v7;
    v11 = v8 + 1;
    v12 = *(_QWORD *)v5 + 32 * v8 > (unint64_t)v18;
    if (*(_QWORD *)v5 <= (unint64_t)v18 && v12)
    {
      v17 = (char *)v18 - *(_QWORD *)v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v11, 32);
      v13 = *(_QWORD *)v5;
      v14 = &v17[*(_QWORD *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v11, 32);
      v13 = *(_QWORD *)v5;
      v14 = (char *)v18;
    }
    v15 = (_OWORD *)(v13 + 32 * *(unsigned int *)(v5 + 8));
    v16 = *((_OWORD *)v14 + 1);
    *v15 = *(_OWORD *)v14;
    v15[1] = v16;
    v10 = *(_DWORD *)(v5 + 8) + 1;
  }
  else
  {
    v9 = *(_QWORD *)v5 + 32 * v8;
    *(_QWORD *)v9 = a2;
    *(_QWORD *)(v9 + 8) = a3;
    *(_DWORD *)(v9 + 16) = a4;
    *(_QWORD *)(v9 + 24) = v7;
    v10 = v8 + 1;
  }
  *(_DWORD *)(v5 + 8) = v10;
  *a1[2] = v6;
}

void `anonymous namespace'::ResourceBuilder::~ResourceBuilder(_anonymous_namespace_::ResourceBuilder *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::ResourceBuilder::buildBool(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;

  if (!*(_BYTE *)(a1 + 40))
  {
    v8 = *(_QWORD **)(a1 + 8);
    v10 = (_BYTE *)v8[1];
    v9 = v8[2];
    if ((unint64_t)v10 < v9)
    {
      *v10 = a4;
      v11 = (uint64_t)(v10 + 1);
LABEL_32:
      v8[1] = v11;
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 24))(*(_QWORD *)(a1 + 32), a2, a3, 1);
    }
    v12 = (_BYTE *)*v8;
    v13 = (unint64_t)&v10[-*v8];
    v14 = v13 + 1;
    if ((uint64_t)(v13 + 1) < 0)
      abort();
    v15 = v9 - (_QWORD)v12;
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = operator new(v16);
      v18 = &v17[v13];
      v19 = &v17[v16];
      v17[v13] = a4;
      v11 = (uint64_t)&v17[v13 + 1];
      if (v10 != v12)
      {
LABEL_12:
        if (v13 < 8 || (unint64_t)(v12 - v17) < 0x20)
          goto LABEL_28;
        if (v13 >= 0x20)
        {
          v20 = v13 & 0xFFFFFFFFFFFFFFE0;
          v21 = (__int128 *)(v10 - 16);
          v22 = &v17[v10 - 16 - v12];
          v23 = v13 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v24 = *v21;
            *(v22 - 1) = *(v21 - 1);
            *v22 = v24;
            v22 -= 2;
            v21 -= 2;
            v23 -= 32;
          }
          while (v23);
          if (v13 == v20)
          {
LABEL_30:
            v10 = (_BYTE *)*v8;
            *v8 = v17;
            v8[1] = v11;
            v8[2] = v19;
            if (!v10)
              goto LABEL_32;
LABEL_31:
            operator delete(v10);
            goto LABEL_32;
          }
          if ((v13 & 0x18) == 0)
          {
            v18 -= v20;
            v10 -= v20;
            goto LABEL_28;
          }
        }
        else
        {
          v20 = 0;
        }
        v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
        v25 = &v10[-v20 - 8];
        v26 = &v17[v25 - v12];
        v27 = v20 - (v13 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v28 = *(_QWORD *)v25;
          v25 -= 8;
          *v26-- = v28;
          v27 += 8;
        }
        while (v27);
        v10 -= v13 & 0xFFFFFFFFFFFFFFF8;
        if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_30;
LABEL_28:
        v29 = v18 - 1;
        do
        {
          v30 = *--v10;
          *v29-- = v30;
        }
        while (v10 != v12);
        goto LABEL_30;
      }
    }
    else
    {
      v17 = 0;
      v18 = &v10[-*v8];
      v19 = 0;
      *(_BYTE *)v13 = a4;
      v11 = v13 + 1;
      if (v10 != v12)
        goto LABEL_12;
    }
    *v8 = v18;
    v8[1] = v11;
    v8[2] = v19;
    if (!v10)
      goto LABEL_32;
    goto LABEL_31;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 24))(*(_QWORD *)(a1 + 32), a2, a3, 1);
}

uint64_t `anonymous namespace'::ResourceBuilder::buildString(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  unsigned int v8;
  char **v10;
  uint64_t v11;
  unsigned int HashValue;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;

  if (!*(_BYTE *)(a1 + 40))
  {
    v8 = a5;
    v10 = *(char ***)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(a4, a5);
    v13 = *(unsigned int *)(v11 + 32);
    *(_QWORD *)&v16 = a4;
    *((_QWORD *)&v16 + 1) = __PAIR64__(HashValue, v8);
    v17 = v13;
    v14 = llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>(v11, &v16, &v17);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 24))(*(_QWORD *)(a1 + 32), a2, a3, 2);
}

uint64_t `anonymous namespace'::ResourceBuilder::buildBlob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t v12;
  _QWORD *v13;
  char *v14;

  if (!*(_BYTE *)(a1 + 40))
  {
    v12 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)v12 != *(_QWORD *)(v12 + 8))
    {
      v13 = *(_QWORD **)(v12 + 56);
      if ((unint64_t)v13 >= *(_QWORD *)(v12 + 64))
      {
        v14 = std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>((char **)(v12 + 48), v12);
      }
      else
      {
        *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        *(_OWORD *)v13 = *(_OWORD *)v12;
        v13[2] = *(_QWORD *)(v12 + 16);
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        v14 = (char *)(v13 + 3);
      }
      *(_QWORD *)(v12 + 56) = v14;
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(a1 + 24))(*(_QWORD *)(a1 + 32), a2, a3, 0);
}

void mlir::bytecode::detail::IRNumberingState::~IRNumberingState(llvm **this)
{
  llvm::deallocate_buffer(this[113], (void *)(16 * *((unsigned int *)this + 230)));
}

void sub_180326AE4()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 880), (void *)(16 * *(unsigned int *)(v0 + 896)));
}

void sub_180326AF8()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 856), (void *)(16 * *(unsigned int *)(v0 + 872)));
}

void sub_180326B0C()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 832), (void *)(16 * *(unsigned int *)(v0 + 848)));
}

void sub_180326B20()
{
  uint64_t v0;
  int v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (*(_DWORD *)(v0 + 808))
    llvm::deallocate_buffer(**(llvm ***)(v0 + 800), *(void **)(*(_QWORD *)(v0 + 800) + 8));
  *(_DWORD *)(v0 + 808) = 0;
  v1 = *(_DWORD *)(v0 + 760);
  if (v1)
  {
    *(_QWORD *)(v0 + 816) = 0;
    v2 = *(uint64_t **)(v0 + 752);
    v3 = *v2;
    *(_QWORD *)(v0 + 736) = *v2;
    *(_QWORD *)(v0 + 744) = v3 + 4096;
    if (v1 != 1)
    {
      v4 = (((unint64_t)v2 - *(_QWORD *)(v0 + 752) + 8) >> 10) & 0x1FFFFFF;
      if (v4 >= 0x1E)
        LOBYTE(v4) = 30;
      llvm::deallocate_buffer((llvm *)v2[1], (void *)(4096 << v4));
    }
    *(_DWORD *)(v0 + 760) = 1;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 736);
  llvm::SpecificBumpPtrAllocator<mlir::bytecode::detail::DialectResourceNumbering>::DestroyAll(v0 + 640);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 640);
  if (*(_DWORD *)(v0 + 616))
    llvm::deallocate_buffer(**(llvm ***)(v0 + 608), *(void **)(*(_QWORD *)(v0 + 608) + 8));
  *(_DWORD *)(v0 + 616) = 0;
  v5 = *(_DWORD *)(v0 + 568);
  if (v5)
  {
    *(_QWORD *)(v0 + 624) = 0;
    v6 = *(uint64_t **)(v0 + 560);
    v7 = *v6;
    *(_QWORD *)(v0 + 544) = *v6;
    *(_QWORD *)(v0 + 552) = v7 + 4096;
    if (v5 != 1)
    {
      v8 = (((unint64_t)v6 - *(_QWORD *)(v0 + 560) + 8) >> 10) & 0x1FFFFFF;
      if (v8 >= 0x1E)
        LOBYTE(v8) = 30;
      llvm::deallocate_buffer((llvm *)v6[1], (void *)(4096 << v8));
    }
    *(_DWORD *)(v0 + 568) = 1;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 544);
  if (*(_DWORD *)(v0 + 520))
    llvm::deallocate_buffer(**(llvm ***)(v0 + 512), *(void **)(*(_QWORD *)(v0 + 512) + 8));
  *(_DWORD *)(v0 + 520) = 0;
  v9 = *(_DWORD *)(v0 + 472);
  if (v9)
  {
    *(_QWORD *)(v0 + 528) = 0;
    v10 = *(_QWORD *)(v0 + 464);
    v11 = *(_QWORD *)v10 + 4096;
    *(_QWORD *)(v0 + 448) = *(_QWORD *)v10;
    *(_QWORD *)(v0 + 456) = v11;
    if (v9 != 1)
    {
      v12 = ((unint64_t)(v10 + 8 - *(_QWORD *)(v0 + 464)) >> 10) & 0x1FFFFFF;
      if (v12 >= 0x1E)
        LOBYTE(v12) = 30;
      llvm::deallocate_buffer(*(llvm **)(v10 + 8), (void *)(4096 << v12));
    }
    *(_DWORD *)(v0 + 472) = 1;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 448);
  llvm::SpecificBumpPtrAllocator<mlir::bytecode::detail::DialectNumbering>::DestroyAll(v0 + 352);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 352);
  if (*(_DWORD *)(v0 + 328))
    llvm::deallocate_buffer(**(llvm ***)(v0 + 320), *(void **)(*(_QWORD *)(v0 + 320) + 8));
  *(_DWORD *)(v0 + 328) = 0;
  v13 = *(_DWORD *)(v0 + 280);
  if (v13)
  {
    *(_QWORD *)(v0 + 336) = 0;
    v14 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)v14 + 4096;
    *(_QWORD *)(v0 + 256) = *(_QWORD *)v14;
    *(_QWORD *)(v0 + 264) = v15;
    if (v13 != 1)
    {
      v16 = ((unint64_t)(v14 + 8 - *(_QWORD *)(v0 + 272)) >> 10) & 0x1FFFFFF;
      if (v16 >= 0x1E)
        LOBYTE(v16) = 30;
      llvm::deallocate_buffer(*(llvm **)(v14 + 8), (void *)(4096 << v16));
    }
    *(_DWORD *)(v0 + 280) = 1;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 256);
  llvm::deallocate_buffer(*(llvm **)(v0 + 232), (void *)(32 * *(unsigned int *)(v0 + 248)));
}

void sub_180326E04()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *(void **)(v0 + 208);
  if (v1)
  {
    *(_QWORD *)(v0 + 216) = v1;
    operator delete(v1);
  }
  v2 = *(void **)(v0 + 184);
  if (v2)
  {
    *(_QWORD *)(v0 + 192) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(v0 + 160);
  if (v3)
  {
    *(_QWORD *)(v0 + 168) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v0 + 144);
  if (v4 != (void *)(v0 + 160))
    free(v4);
  llvm::deallocate_buffer(*(llvm **)(v0 + 120), (void *)(24 * *(unsigned int *)(v0 + 136)));
}

void sub_180326E60()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 96), (void *)(16 * *(unsigned int *)(v0 + 112)));
}

void sub_180326E74()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 72), (void *)(16 * *(unsigned int *)(v0 + 88)));
}

void sub_180326E88()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 48), (void *)(16 * *(unsigned int *)(v0 + 64)));
}

void sub_180326E9C()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 24), (void *)(16 * *(unsigned int *)(v0 + 40)));
}

void sub_180326EB0()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)v0, (void *)(16 * *(unsigned int *)(v0 + 16)));
}

uint64_t sub_180326EC4()
{
  uint64_t v0;

  return v0;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (*(_DWORD *)(a1 + 24))
    llvm::deallocate_buffer(**(llvm ***)(a1 + 16), (void *)0x1000);
  v2 = *(_QWORD *)(a1 + 64);
  if (*(_DWORD *)(a1 + 72))
    llvm::deallocate_buffer(*(llvm **)v2, *(void **)(v2 + 8));
  if (v2 != a1 + 80)
    free(*(void **)(a1 + 64));
  v3 = *(void **)(a1 + 16);
  if (v3 != (void *)(a1 + 32))
    free(v3);
  return a1;
}

void llvm::SpecificBumpPtrAllocator<mlir::bytecode::detail::DialectResourceNumbering>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t j;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; i <= v8; i += 32)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v10 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD **)(a1 + 64);
    v12 = &v11[2 * v10];
    do
    {
      v13 = *v11 + v11[1];
      for (j = ((*v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; j <= v13; j += 32)
      {
        if (*(char *)(j - 9) < 0)
          operator delete(*(void **)(j - 32));
      }
      v11 += 2;
    }
    while (v11 != v12);
    if (*(_DWORD *)(a1 + 72))
      llvm::deallocate_buffer(**(llvm ***)(a1 + 64), *(void **)(*(_QWORD *)(a1 + 64) + 8));
  }
  *(_DWORD *)(a1 + 72) = 0;
  v15 = *(_DWORD *)(a1 + 24);
  if (v15)
  {
    *(_QWORD *)(a1 + 80) = 0;
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)v16 + 4096;
    *(_QWORD *)a1 = *(_QWORD *)v16;
    *(_QWORD *)(a1 + 8) = v17;
    if (v15 != 1)
    {
      v18 = ((unint64_t)(v16 + 8 - *(_QWORD *)(a1 + 16)) >> 10) & 0x1FFFFFF;
      if (v18 >= 0x1E)
        LOBYTE(v18) = 30;
      llvm::deallocate_buffer(*(llvm **)(v16 + 8), (void *)(4096 << v18));
    }
    *(_DWORD *)(a1 + 24) = 1;
  }
}

uint64_t llvm::SpecificBumpPtrAllocator<mlir::bytecode::detail::DialectNumbering>::DestroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  llvm **v9;
  llvm **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  llvm **v15;
  llvm **v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = *(unsigned int *)(result + 24);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(result + 16);
    v3 = &v2[v1];
    do
    {
      v4 = *(_QWORD *)(result + 16);
      v5 = *v2;
      if (*v2 == *(_QWORD *)(v4 + 8 * *(unsigned int *)(result + 24) - 8))
      {
        v7 = *(_QWORD *)result;
      }
      else
      {
        v6 = (((unint64_t)v2 - v4) >> 10) & 0x1FFFFFF;
        if (v6 >= 0x1E)
          LOBYTE(v6) = 30;
        v7 = v5 + (4096 << v6);
      }
      v8 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
      v9 = (llvm **)(v8 + 120);
      if (v8 + 120 <= v7)
      {
        v10 = *(llvm ***)(v8 + 104);
        if (v9 != v10)
          free(v10);
        llvm::deallocate_buffer(*(v9 - 5), (void *)(24 * *((unsigned int *)v9 - 6)));
      }
      ++v2;
    }
    while (v2 != v3);
  }
  v11 = *(unsigned int *)(result + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(result + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = (*v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      v15 = (llvm **)(v14 + 120);
      if (v14 + 120 <= *v12 + v12[1])
      {
        v16 = *(llvm ***)(v14 + 104);
        if (v15 != v16)
          free(v16);
        llvm::deallocate_buffer(*(v15 - 5), (void *)(24 * *((unsigned int *)v15 - 6)));
      }
      v12 += 2;
    }
    while (v12 != v13);
    if (*(_DWORD *)(result + 72))
      llvm::deallocate_buffer(**(llvm ***)(result + 64), *(void **)(*(_QWORD *)(result + 64) + 8));
  }
  *(_DWORD *)(result + 72) = 0;
  v17 = *(_DWORD *)(result + 24);
  if (v17)
  {
    *(_QWORD *)(result + 80) = 0;
    v18 = *(_QWORD *)(result + 16);
    v19 = *(_QWORD *)v18 + 4096;
    *(_QWORD *)result = *(_QWORD *)v18;
    *(_QWORD *)(result + 8) = v19;
    if (v17 != 1)
    {
      v20 = ((unint64_t)(v18 + 8 - *(_QWORD *)(result + 16)) >> 10) & 0x1FFFFFF;
      if (v20 >= 0x1E)
        LOBYTE(v20) = 30;
      llvm::deallocate_buffer(*(llvm **)(v18 + 8), (void *)(4096 << v20));
    }
    *(_DWORD *)(result + 24) = 1;
  }
  return result;
}

void mlir::BytecodeWriterConfig::Impl::~Impl(mlir::BytecodeWriterConfig::Impl *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm *v19;
  uint64_t v21;
  uint64_t v22;

  v2 = (char *)*((_QWORD *)this + 23);
  v3 = *((unsigned int *)this + 48);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v4 -= 8;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 23);
  }
  if (v2 != (char *)this + 200)
    free(v2);
  v7 = (char *)*((_QWORD *)this + 15);
  v8 = *((unsigned int *)this + 32);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = v7 - 8;
    do
    {
      v11 = *(_QWORD *)&v10[v9];
      *(_QWORD *)&v10[v9] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v9 -= 8;
    }
    while (v9);
    v7 = (char *)*((_QWORD *)this + 15);
  }
  if (v7 != (char *)this + 136)
    free(v7);
  v12 = (char *)*((_QWORD *)this + 7);
  v13 = *((unsigned int *)this + 16);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = v12 - 8;
    do
    {
      v16 = *(_QWORD *)&v15[v14];
      *(_QWORD *)&v15[v14] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v14 -= 8;
    }
    while (v14);
    v12 = (char *)*((_QWORD *)this + 7);
  }
  if (v12 != (char *)this + 72)
    free(v12);
  if (*((_DWORD *)this + 7))
  {
    v17 = *((unsigned int *)this + 6);
    if ((_DWORD)v17)
    {
      v18 = 0;
      do
      {
        v19 = *(llvm **)(*((_QWORD *)this + 2) + v18);
        if (v19 != (llvm *)-8 && v19 != 0)
        {
          v22 = *(_QWORD *)v19;
          v21 = *((_QWORD *)v19 + 1);
          *((_QWORD *)v19 + 1) = 0;
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          llvm::deallocate_buffer(v19, (void *)(v22 + 17));
        }
        v18 += 8;
      }
      while (8 * v17 != v18);
    }
  }
  free(*((void **)this + 2));
}

mlir::bytecode::detail::IRNumberingState *mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::bytecode::detail::IRNumberingState *this, mlir::Operation *a2, const mlir::BytecodeWriterConfig *a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t *v14;
  char *v15;
  uint64_t v16;
  mlir::Region *v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t *v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  const std::nothrow_t *v65;
  unint64_t v66;
  char *v67;
  BOOL v68;
  char *v69;
  char *v70;
  unint64_t v71;
  char *v72;
  const std::nothrow_t *v73;
  unint64_t v74;
  char *v75;
  mlir::Operation *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  const std::nothrow_t *v80;
  unint64_t v81;
  char *v82;
  __n128 v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  const std::nothrow_t *v90;
  uint64_t v91;
  int64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  const std::nothrow_t *v109;
  uint64_t v110;
  int64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  const std::nothrow_t *v128;
  uint64_t v129;
  int64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  mlir::Operation *v162;
  __int128 v163;
  mlir::GenericProgramPoint *v164;
  _QWORD v165[3];
  __int128 v166;
  mlir::GenericProgramPoint *v167;
  char v168;
  void *v169;
  uint64_t v170;
  _QWORD v171[18];

  v171[16] = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (char *)this + 24;
  *((_DWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 18) = (char *)this + 160;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 62) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 34) = (char *)this + 288;
  *((_QWORD *)this + 35) = 0x400000000;
  *((_QWORD *)this + 40) = (char *)this + 336;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = (char *)this + 384;
  *((_QWORD *)this + 47) = 0x400000000;
  *((_QWORD *)this + 52) = (char *)this + 432;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = (char *)this + 480;
  *((_QWORD *)this + 59) = 0x400000000;
  *((_QWORD *)this + 64) = (char *)this + 528;
  *((_QWORD *)this + 69) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_QWORD *)this + 70) = (char *)this + 576;
  *((_QWORD *)this + 71) = 0x400000000;
  *((_QWORD *)this + 76) = (char *)this + 624;
  *((_QWORD *)this + 81) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_QWORD *)this + 82) = (char *)this + 672;
  *((_QWORD *)this + 83) = 0x400000000;
  *((_QWORD *)this + 88) = (char *)this + 720;
  *((_QWORD *)this + 93) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((_QWORD *)this + 94) = (char *)this + 768;
  *((_QWORD *)this + 95) = 0x400000000;
  *((_QWORD *)this + 100) = (char *)this + 816;
  *((_DWORD *)this + 218) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_DWORD *)this + 224) = 0;
  *((_OWORD *)this + 55) = 0u;
  *((_DWORD *)this + 230) = 0;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_DWORD *)this + 232) = 0;
  *(_OWORD *)((char *)this + 836) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((_QWORD *)this + 117) = a3;
  LODWORD(v166) = 0;
  v169 = v171;
  v170 = 0x200000000;
  *(_QWORD *)&v163 = &v169;
  *((_QWORD *)&v163 + 1) = this;
  v164 = (mlir::GenericProgramPoint *)&v166;
  mlir::detail::walk((uint64_t)a2, (void (*)(uint64_t, uint64_t, int *))llvm::function_ref<void ()(mlir::Operation *,mlir::WalkStage const&)>::callback_fn<mlir::bytecode::detail::IRNumberingState::computeGlobalNumberingState(mlir::Operation *)::$_0>, (uint64_t)&v163);
  if (v169 != v171)
    free(v169);
  mlir::bytecode::detail::IRNumberingState::number(this, a2);
  v169 = v171;
  v170 = 0x800000000;
  v162 = a2;
  v6 = *((unsigned int *)a2 + 11);
  v7 = v6 & 0x7FFFFF;
  if ((v6 & 0x7FFFFF) == 0)
    goto LABEL_64;
  v8 = (((unint64_t)a2 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *((unsigned int *)a2 + 10);
  if (mlir::bytecode::detail::IRNumberingState::isIsolatedFromAbove(this, v162))
    v9 = 0;
  else
    v9 = *((_DWORD *)this + 232);
  v10 = v170;
  v11 = 24 * v7;
  v12 = v8;
  do
  {
    while (v10 < HIDWORD(v170))
    {
      v13 = (char *)v169 + 16 * v10;
      *(_QWORD *)v13 = v12;
      *((_DWORD *)v13 + 2) = v9;
      LODWORD(v170) = ++v10;
      v12 += 24;
      v8 += 24;
      v11 -= 24;
      if (!v11)
        goto LABEL_12;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v10 + 1, 16);
    v14 = (unint64_t *)((char *)v169 + 16 * v170);
    *v14 = v8;
    v14[1] = v9;
    v10 = v170 + 1;
    LODWORD(v170) = v170 + 1;
    v12 += 24;
    v8 += 24;
    v11 -= 24;
  }
  while (v11);
LABEL_12:
  if (!v10)
    goto LABEL_64;
  while (2)
  {
    v15 = (char *)v169 + 16 * v10;
    v17 = (mlir::Region *)*((_QWORD *)v15 - 2);
    v16 = *((_QWORD *)v15 - 1);
    LODWORD(v170) = v10 - 1;
    *((_DWORD *)this + 232) = v16;
    mlir::bytecode::detail::IRNumberingState::number(this, v17);
    mlir::Region::OpIterator::OpIterator(&v166, v17, 0);
    mlir::Region::OpIterator::OpIterator(v165, v17, 1);
    v18 = v167;
    v164 = v167;
    v163 = v166;
    v19 = (mlir::GenericProgramPoint *)v165[2];
    while (v18 != v19)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v18);
      v21 = *(unsigned int *)(v20 + 44);
      if ((v21 & 0x7FFFFF) == 0)
        goto LABEL_16;
      v22 = v20;
      v23 = *(unsigned int *)(v20 + 40);
      v24 = *((_DWORD *)this + 10);
      if (!v24)
        goto LABEL_48;
      v25 = *((_QWORD *)this + 3);
      v26 = v24 - 1;
      v27 = (v24 - 1) & ((v20 >> 4) ^ (v20 >> 9));
      v28 = (_QWORD *)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 != v20)
      {
        v30 = 0;
        v31 = 1;
        while (v29 != -4096)
        {
          if (v30)
            v32 = 0;
          else
            v32 = v29 == -8192;
          if (v32)
            v30 = v28;
          v33 = v27 + v31++;
          v27 = v33 & v26;
          v28 = (_QWORD *)(v25 + 16 * (v33 & v26));
          v29 = *v28;
          if (*v28 == v20)
            goto LABEL_35;
        }
        if (v30)
          v28 = v30;
        v43 = *((_DWORD *)this + 8);
        if (4 * v43 + 4 < 3 * v24)
        {
          if (v24 + ~v43 - *((_DWORD *)this + 9) <= v24 >> 3)
            goto LABEL_49;
        }
        else
        {
LABEL_48:
          v24 *= 2;
LABEL_49:
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v5, v24);
          v44 = *((_QWORD *)this + 3);
          v45 = *((_DWORD *)this + 10) - 1;
          v46 = v45 & ((v22 >> 4) ^ (v22 >> 9));
          v28 = (_QWORD *)(v44 + 16 * v46);
          v47 = *v28;
          if (*v28 == v22)
          {
LABEL_50:
            ++*((_DWORD *)this + 8);
            if (v22 == -4096)
              goto LABEL_34;
LABEL_33:
            --*((_DWORD *)this + 9);
LABEL_34:
            *v28 = v22;
            v28[1] = 0;
            goto LABEL_35;
          }
          v48 = 0;
          v49 = 1;
          while (v47 != -4096)
          {
            if (v48)
              v50 = 0;
            else
              v50 = v47 == -8192;
            if (v50)
              v48 = v28;
            v51 = v46 + v49++;
            v46 = v51 & v45;
            v28 = (_QWORD *)(v44 + 16 * (v51 & v45));
            v47 = *v28;
            if (*v28 == v22)
              goto LABEL_50;
          }
          if (v48)
            v28 = v48;
        }
        v34 = *v28;
        ++*((_DWORD *)this + 8);
        if (v34 != -4096)
          goto LABEL_33;
        goto LABEL_34;
      }
LABEL_35:
      v35 = v28[1];
      if (*(_BYTE *)(v35 + 5) && *(_BYTE *)(v35 + 4))
        v36 = 0;
      else
        v36 = *((unsigned int *)this + 232);
      v37 = ((v22 + 16 * ((v21 >> 23) & 1) + ((v21 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v23;
      v38 = v170;
      v39 = 24 * (v21 & 0x7FFFFF);
      v40 = v37;
      do
      {
        while (v38 < HIDWORD(v170))
        {
          v41 = (char *)v169 + 16 * v38;
          *(_QWORD *)v41 = v37;
          *((_DWORD *)v41 + 2) = v36;
          LODWORD(v170) = ++v38;
          v37 += 24;
          v40 += 24;
          v39 -= 24;
          if (!v39)
            goto LABEL_16;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v38 + 1, 16);
        v42 = (unint64_t *)((char *)v169 + 16 * v170);
        *v42 = v40;
        v42[1] = v36;
        v38 = v170 + 1;
        LODWORD(v170) = v170 + 1;
        v37 += 24;
        v40 += 24;
        v39 -= 24;
      }
      while (v39);
LABEL_16:
      mlir::Region::OpIterator::operator++((uint64_t *)&v166);
      v18 = v167;
    }
    v10 = v170;
    if ((_DWORD)v170)
      continue;
    break;
  }
LABEL_64:
  v52 = *((_DWORD *)this + 38);
  if (v52)
  {
    v53 = *((_QWORD *)this + 18);
    v54 = 24 * v52 - 24;
    if (v54 < 0x18)
    {
      LODWORD(v55) = 0;
      v56 = *((_QWORD *)this + 18);
      goto LABEL_70;
    }
    v57 = 0;
    v58 = v54 / 0x18 + 1;
    v55 = v58 & 0x1FFFFFFFFFFFFFFELL;
    v56 = v53 + 24 * (v58 & 0x1FFFFFFFFFFFFFFELL);
    v59 = (uint64_t *)(v53 + 40);
    do
    {
      v60 = *(v59 - 3);
      v61 = *v59;
      v59 += 6;
      *(_DWORD *)(v60 + 16) = v57;
      *(_DWORD *)(v61 + 16) = v57 + 1;
      v57 += 2;
    }
    while (v55 != v57);
    if (v58 != v55)
    {
LABEL_70:
      v62 = v53 + 24 * v52;
      do
      {
        *(_DWORD *)(*(_QWORD *)(v56 + 16) + 16) = v55;
        LODWORD(v55) = v55 + 1;
        v56 += 24;
      }
      while (v56 != v62);
    }
  }
  v64 = (char *)*((_QWORD *)this + 20);
  v63 = (char *)*((_QWORD *)this + 21);
  if (v63 - v64 < 1025)
  {
LABEL_76:
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(v64, v63, (v63 - v64) >> 3, 0, 0);
    v70 = (char *)*((_QWORD *)this + 23);
    v69 = (char *)*((_QWORD *)this + 24);
    v71 = (v69 - v70) >> 3;
    if (v69 - v70 >= 1025)
      goto LABEL_79;
LABEL_82:
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(v70, v69, v71, 0, 0);
    v76 = v162;
    v78 = (char *)*((_QWORD *)this + 26);
    v77 = (char *)*((_QWORD *)this + 27);
    v79 = (v77 - v78) >> 3;
    if (v77 - v78 < 1025)
      goto LABEL_88;
LABEL_83:
    v80 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v81 = v79;
    while (1)
    {
      v82 = (char *)operator new(8 * v81, v80);
      if (v82)
        break;
      v68 = v81 > 1;
      v81 >>= 1;
      if (!v68)
      {
        v83 = std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(v78, v77, v79, 0, 0);
        goto LABEL_91;
      }
    }
    v87 = v82;
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(v78, v77, v79, v82, v81);
    operator delete(v87);
LABEL_91:
    v76 = v162;
    v85 = (char *)*((_QWORD *)this + 20);
    v86 = *((_QWORD *)this + 21) - (_QWORD)v85;
    if (v86)
      goto LABEL_92;
    goto LABEL_109;
  }
  v65 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v66 = (v63 - v64) >> 3;
  while (1)
  {
    v67 = (char *)operator new(8 * v66, v65);
    if (v67)
      break;
    v68 = v66 > 1;
    v66 >>= 1;
    if (!v68)
      goto LABEL_76;
  }
  v72 = v67;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(v64, v63, (v63 - v64) >> 3, v67, v66);
  operator delete(v72);
  v70 = (char *)*((_QWORD *)this + 23);
  v69 = (char *)*((_QWORD *)this + 24);
  v71 = (v69 - v70) >> 3;
  if (v69 - v70 < 1025)
    goto LABEL_82;
LABEL_79:
  v73 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v74 = v71;
  while (1)
  {
    v75 = (char *)operator new(8 * v74, v73);
    if (v75)
      break;
    v68 = v74 > 1;
    v74 >>= 1;
    if (!v68)
      goto LABEL_82;
  }
  v84 = v75;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(v70, v69, v71, v75, v74);
  operator delete(v84);
  v76 = v162;
  v78 = (char *)*((_QWORD *)this + 26);
  v77 = (char *)*((_QWORD *)this + 27);
  v79 = (v77 - v78) >> 3;
  if (v77 - v78 >= 1025)
    goto LABEL_83;
LABEL_88:
  v83 = std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(v78, v77, v79, 0, 0);
  v85 = (char *)*((_QWORD *)this + 20);
  v86 = *((_QWORD *)this + 21) - (_QWORD)v85;
  if (!v86)
    goto LABEL_109;
LABEL_92:
  v88 = 0;
  v156 = v86;
  v89 = v86 >> 3;
  LODWORD(v166) = 0;
  v90 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v91 = 1;
  v153 = v86 >> 3;
  v159 = v85;
  do
  {
    v88 = (1 << (7 * v91)) - v88;
    if (v89 >= v88)
      v92 = v88;
    else
      v92 = v89;
    *(_QWORD *)&v163 = &v168;
    *((_QWORD *)&v163 + 1) = &v166;
    v93 = v92;
    if (v92 < 129)
    {
LABEL_99:
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v85, &v85[8 * v92], (uint64_t)&v163, v92, 0, 0);
    }
    else
    {
      while (1)
      {
        v94 = (char *)operator new(8 * v93, v90);
        if (v94)
          break;
        v68 = v93 > 1;
        v93 >>= 1;
        if (!v68)
          goto LABEL_99;
      }
      v95 = v94;
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v85, &v85[8 * v92], (uint64_t)&v163, v92, v94, v93);
      operator delete(v95);
    }
    LODWORD(v166) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v85[8 * v92 - 8] + 16) + 16);
    v89 -= v92;
    if (!v89)
      break;
    ++v91;
    v85 += 8 * v92;
  }
  while (v91 != 9);
  if ((unint64_t)(v156 - 8) < 8)
  {
    LODWORD(v96) = 0;
    v97 = v159;
    v76 = v162;
    v98 = v159;
    goto LABEL_108;
  }
  v99 = 0;
  v100 = ((unint64_t)(v156 - 8) >> 3) + 1;
  v96 = v100 & 0x3FFFFFFFFFFFFFFELL;
  v97 = v159;
  v98 = &v159[8 * (v100 & 0x3FFFFFFFFFFFFFFELL)];
  do
  {
    v101 = &v159[8 * v99];
    v103 = *(_QWORD *)v101;
    v102 = *((_QWORD *)v101 + 1);
    *(_DWORD *)(v103 + 8) = v99;
    *(_DWORD *)(v102 + 8) = v99 + 1;
    v99 += 2;
  }
  while (v96 != v99);
  v76 = v162;
  if (v100 != v96)
  {
    do
    {
LABEL_108:
      v104 = *(_QWORD *)v98;
      v98 += 8;
      *(_DWORD *)(v104 + 8) = v96;
      LODWORD(v96) = v96 + 1;
    }
    while (v98 != &v97[8 * v153]);
  }
LABEL_109:
  v105 = (char *)*((_QWORD *)this + 23);
  v106 = *((_QWORD *)this + 24) - (_QWORD)v105;
  if (v106)
  {
    v107 = 0;
    v157 = *((_QWORD *)this + 24) - (_QWORD)v105;
    v108 = v106 >> 3;
    LODWORD(v166) = 0;
    v109 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v110 = 1;
    v154 = v106 >> 3;
    v160 = v105;
    do
    {
      v107 = (1 << (7 * v110)) - v107;
      if (v108 >= v107)
        v111 = v107;
      else
        v111 = v108;
      *(_QWORD *)&v163 = &v168;
      *((_QWORD *)&v163 + 1) = &v166;
      v112 = v111;
      if (v111 < 129)
      {
LABEL_117:
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v105, &v105[8 * v111], (uint64_t)&v163, v111, 0, 0);
      }
      else
      {
        while (1)
        {
          v113 = (char *)operator new(8 * v112, v109);
          if (v113)
            break;
          v68 = v112 > 1;
          v112 >>= 1;
          if (!v68)
            goto LABEL_117;
        }
        v114 = v113;
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v105, &v105[8 * v111], (uint64_t)&v163, v111, v113, v112);
        operator delete(v114);
      }
      LODWORD(v166) = *(_DWORD *)(**(_QWORD **)&v105[8 * v111 - 8] + 16);
      v108 -= v111;
      if (!v108)
        break;
      ++v110;
      v105 += 8 * v111;
    }
    while (v110 != 9);
    if ((unint64_t)(v157 - 8) < 8)
    {
      LODWORD(v115) = 0;
      v116 = v160;
      v76 = v162;
      v117 = v160;
      goto LABEL_126;
    }
    v118 = 0;
    v119 = ((unint64_t)(v157 - 8) >> 3) + 1;
    v115 = v119 & 0x3FFFFFFFFFFFFFFELL;
    v116 = v160;
    v117 = &v160[8 * (v119 & 0x3FFFFFFFFFFFFFFELL)];
    do
    {
      v120 = &v160[8 * v118];
      v122 = *(_QWORD *)v120;
      v121 = *((_QWORD *)v120 + 1);
      *(_DWORD *)(v122 + 16) = v118;
      *(_DWORD *)(v121 + 16) = v118 + 1;
      v118 += 2;
    }
    while (v115 != v118);
    v76 = v162;
    if (v119 != v115)
    {
      do
      {
LABEL_126:
        v123 = *(_QWORD *)v117;
        v117 += 8;
        *(_DWORD *)(v123 + 16) = v115;
        LODWORD(v115) = v115 + 1;
      }
      while (v117 != &v116[8 * v154]);
    }
  }
  v124 = (char *)*((_QWORD *)this + 26);
  v125 = *((_QWORD *)this + 27) - (_QWORD)v124;
  if (v125)
  {
    v126 = 0;
    v158 = *((_QWORD *)this + 27) - (_QWORD)v124;
    v127 = v125 >> 3;
    LODWORD(v166) = 0;
    v128 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v129 = 1;
    v155 = v125 >> 3;
    v161 = v124;
    do
    {
      v126 = (1 << (7 * v129)) - v126;
      if (v127 >= v126)
        v130 = v126;
      else
        v130 = v127;
      *(_QWORD *)&v163 = &v168;
      *((_QWORD *)&v163 + 1) = &v166;
      v131 = v130;
      if (v130 < 129)
      {
LABEL_135:
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v124, &v124[8 * v130], (uint64_t)&v163, v130, 0, 0);
      }
      else
      {
        while (1)
        {
          v132 = (char *)operator new(8 * v131, v128);
          if (v132)
            break;
          v68 = v131 > 1;
          v131 >>= 1;
          if (!v68)
            goto LABEL_135;
        }
        v133 = v132;
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v124, &v124[8 * v130], (uint64_t)&v163, v130, v132, v131);
        operator delete(v133);
      }
      LODWORD(v166) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v124[8 * v130 - 8] + 16) + 16);
      v127 -= v130;
      if (!v127)
        break;
      ++v129;
      v124 += 8 * v130;
    }
    while (v129 != 9);
    if ((unint64_t)(v158 - 8) < 8)
    {
      LODWORD(v134) = 0;
      v135 = v161;
      v76 = v162;
      v136 = v161;
      goto LABEL_144;
    }
    v137 = 0;
    v138 = ((unint64_t)(v158 - 8) >> 3) + 1;
    v134 = v138 & 0x3FFFFFFFFFFFFFFELL;
    v135 = v161;
    v136 = &v161[8 * (v138 & 0x3FFFFFFFFFFFFFFELL)];
    do
    {
      v139 = &v161[8 * v137];
      v141 = *(_QWORD *)v139;
      v140 = *((_QWORD *)v139 + 1);
      *(_DWORD *)(v141 + 8) = v137;
      *(_DWORD *)(v140 + 8) = v137 + 1;
      v137 += 2;
    }
    while (v134 != v137);
    v76 = v162;
    if (v138 != v134)
    {
      do
      {
LABEL_144:
        v142 = *(_QWORD *)v136;
        v136 += 8;
        *(_DWORD *)(v142 + 8) = v134;
        LODWORD(v134) = v134 + 1;
      }
      while (v136 != &v135[8 * v155]);
    }
  }
  LODWORD(v166) = 0;
  v143 = *((_DWORD *)this + 38);
  if (v143)
  {
    v144 = *((_QWORD *)this + 18);
    v145 = v144 + 24 * v143;
    do
    {
      v146 = *(_QWORD *)(v144 + 16);
      v147 = *(_QWORD *)(v146 + 32);
      if (v147)
      {
        *(_QWORD *)&v163 = off_1E0E19570;
        *((_QWORD *)&v163 + 1) = v146;
        v164 = (mlir::GenericProgramPoint *)&v166;
        (*(void (**)(uint64_t, mlir::Operation *, uint64_t, __int128 *, __n128))(*(_QWORD *)v147 + 56))(v147, v76, v146 + 40, &v163, v83);
        v148 = *(unsigned int *)(v146 + 112);
        if ((_DWORD)v148)
        {
          v149 = v166;
          v150 = 24 * v148;
          v151 = *(_QWORD *)(v146 + 104) + 16;
          do
          {
            if (*(_BYTE *)(*(_QWORD *)v151 + 28))
            {
              *(_DWORD *)(*(_QWORD *)v151 + 24) = v149++;
              LODWORD(v166) = v149;
            }
            v151 += 24;
            v150 -= 24;
          }
          while (v150);
        }
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v163);
      }
      v144 += 24;
    }
    while (v144 != v145);
  }
  if (v169 != v171)
    free(v169);
  return this;
}

void mlir::bytecode::detail::IRNumberingState::number(mlir::bytecode::detail::IRNumberingState *this, mlir::Operation *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t i;
  int v7;
  _QWORD *v8;
  void *InterfaceFor;
  _QWORD *DialectVersionMap;
  uint64_t **v11;
  _QWORD *v12[3];
  unint64_t v13[2];
  uint64_t **AttrDictionary;

  mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, *((_QWORD *)a2 + 6));
  v4 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v4)
    v5 = (char *)a2 - 16;
  else
    v5 = 0;
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v13[0] = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, i);
      v7 = *((_DWORD *)this + 232);
      *((_DWORD *)this + 232) = v7 + 1;
      v12[0] = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)this + 107, v13, v12) & 1) == 0)
      {
        v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this + 856, (uint64_t)v13, v13, v12[0]);
        *v8 = v13[0];
        *((_DWORD *)v8 + 2) = v7;
      }
      mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, (uint64_t **)(*(_QWORD *)(v13[0] + 8) & 0xFFFFFFFFFFFFFFF8));
    }
  }
  AttrDictionary = (uint64_t **)*((_QWORD *)a2 + 7);
  if (mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*((mlir::BytecodeWriterConfig **)this + 117)) < 5)
    AttrDictionary = (uint64_t **)mlir::Operation::getAttrDictionary(a2);
  if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&AttrDictionary))
    mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, AttrDictionary);
  if (mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*((mlir::BytecodeWriterConfig **)this + 117)) >= 5
    && HIBYTE(*((_DWORD *)a2 + 11)))
  {
    if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v11 = (uint64_t **)*((_QWORD *)a2 + 2 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1) + 8);
      if (v11)
        mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, v11);
    }
    else
    {
      InterfaceFor = mlir::OpInterface<mlir::BytecodeOpInterface,mlir::detail::BytecodeOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
      v13[0] = (unint64_t)a2;
      v13[1] = (unint64_t)InterfaceFor;
      DialectVersionMap = (_QWORD *)mlir::BytecodeWriterConfig::getDialectVersionMap(*((mlir::BytecodeWriterConfig **)this
                                                                                     + 117));
      v12[0] = &unk_1E0E4ED00;
      v12[1] = this;
      v12[2] = DialectVersionMap;
      mlir::BranchOpInterface::getSuccessorBlockArgument((mlir::BranchOpInterface *)v13, (uint64_t)v12);
    }
  }
  mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, *((uint64_t ***)a2 + 3));
}

void mlir::bytecode::detail::IRNumberingState::number(mlir::bytecode::detail::IRNumberingState *this, mlir::Region *a2)
{
  int v4;
  mlir::Region *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  mlir::Block **v9;
  mlir::Block *v10;
  mlir::Block *v11;
  unsigned int v12;
  mlir::Block *v13;
  mlir::Block **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  mlir::Block **v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  mlir::Block *v23;
  mlir::Block **v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  mlir::Region **v32;
  mlir::Region *v33;
  mlir::Region **v34;
  int v35;
  mlir::Region *v36;
  int v37;
  mlir::Region **v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  mlir::Region *v45;
  mlir::Region **v46;
  int v47;
  BOOL v48;
  unsigned int v49;

  if (*(mlir::Region **)a2 == a2)
    return;
  v4 = *((_DWORD *)this + 232);
  v5 = (mlir::Region *)*((_QWORD *)a2 + 1);
  if (v5 == a2)
  {
    v6 = 0;
    v28 = *((_DWORD *)this + 232);
    v29 = *((_DWORD *)this + 230);
    if (!v29)
      goto LABEL_48;
LABEL_45:
    v30 = *((_QWORD *)this + 113);
    v31 = (v29 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v32 = (mlir::Region **)(v30 + 16 * v31);
    v33 = *v32;
    if (*v32 == a2)
      return;
    v38 = 0;
    v39 = 1;
    while (v33 != (mlir::Region *)-4096)
    {
      if (v38)
        v40 = 0;
      else
        v40 = v33 == (mlir::Region *)-8192;
      if (v40)
        v38 = v32;
      v41 = v31 + v39++;
      v31 = v41 & (v29 - 1);
      v32 = (mlir::Region **)(v30 + 16 * v31);
      v33 = *v32;
      if (*v32 == a2)
        return;
    }
    if (v38)
      v34 = v38;
    else
      v34 = v32;
    v35 = *((_DWORD *)this + 228);
    if (4 * v35 + 4 < 3 * v29)
      goto LABEL_49;
LABEL_66:
    v29 *= 2;
    goto LABEL_67;
  }
  v6 = 0;
  do
  {
    if (v5)
      v11 = (mlir::Region *)((char *)v5 - 8);
    else
      v11 = 0;
    v12 = *((_DWORD *)this + 212);
    if (!v12)
      goto LABEL_28;
    v7 = *((_QWORD *)this + 104);
    v8 = (v12 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    v9 = (mlir::Block **)(v7 + 16 * v8);
    v10 = *v9;
    if (v11 == *v9)
      goto LABEL_5;
    v14 = 0;
    v15 = 1;
    while (v10 != (mlir::Block *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v10 == (mlir::Block *)-8192;
      if (v16)
        v14 = v9;
      v17 = v8 + v15++;
      v8 = v17 & (v12 - 1);
      v9 = (mlir::Block **)(v7 + 16 * v8);
      v10 = *v9;
      if (v11 == *v9)
        goto LABEL_5;
    }
    v18 = v14 ? v14 : v9;
    v19 = *((_DWORD *)this + 210);
    if (4 * v19 + 4 < 3 * v12)
    {
      if (v12 + ~v19 - *((_DWORD *)this + 211) > v12 >> 3)
        goto LABEL_12;
    }
    else
    {
LABEL_28:
      v12 *= 2;
    }
    llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 832, v12);
    v20 = *((_QWORD *)this + 104);
    v21 = *((_DWORD *)this + 212) - 1;
    v22 = v21 & ((v11 >> 4) ^ (v11 >> 9));
    v18 = (mlir::Block **)(v20 + 16 * v22);
    v23 = *v18;
    if (v11 == *v18)
    {
LABEL_30:
      ++*((_DWORD *)this + 210);
      if (v11 == (mlir::Block *)-4096)
        goto LABEL_14;
LABEL_13:
      --*((_DWORD *)this + 211);
      goto LABEL_14;
    }
    v24 = 0;
    v25 = 1;
    while (v23 != (mlir::Block *)-4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v23 == (mlir::Block *)-8192;
      if (v26)
        v24 = v18;
      v27 = v22 + v25++;
      v22 = v27 & v21;
      v18 = (mlir::Block **)(v20 + 16 * (v27 & v21));
      v23 = *v18;
      if (v11 == *v18)
        goto LABEL_30;
    }
    if (v24)
      v18 = v24;
LABEL_12:
    v13 = *v18;
    ++*((_DWORD *)this + 210);
    if (v13 != (mlir::Block *)-4096)
      goto LABEL_13;
LABEL_14:
    *v18 = v11;
    *((_DWORD *)v18 + 2) = v6;
LABEL_5:
    mlir::bytecode::detail::IRNumberingState::number(this, v11);
    ++v6;
    v5 = (mlir::Region *)*((_QWORD *)v5 + 1);
  }
  while (v5 != a2);
  v28 = *((_DWORD *)this + 232);
  v29 = *((_DWORD *)this + 230);
  if (v29)
    goto LABEL_45;
LABEL_48:
  v34 = 0;
  v35 = *((_DWORD *)this + 228);
  if (4 * v35 + 4 >= 3 * v29)
    goto LABEL_66;
LABEL_49:
  if (v29 + ~v35 - *((_DWORD *)this + 229) > v29 >> 3)
    goto LABEL_50;
LABEL_67:
  llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow((uint64_t)this + 904, v29);
  v42 = *((_QWORD *)this + 113);
  v43 = *((_DWORD *)this + 230) - 1;
  v44 = v43 & ((a2 >> 4) ^ (a2 >> 9));
  v34 = (mlir::Region **)(v42 + 16 * v44);
  v45 = *v34;
  if (*v34 == a2)
  {
LABEL_68:
    v37 = v28 - v4;
    ++*((_DWORD *)this + 228);
    if (a2 == (mlir::Region *)-4096)
      goto LABEL_52;
LABEL_51:
    --*((_DWORD *)this + 229);
    goto LABEL_52;
  }
  v46 = 0;
  v47 = 1;
  while (v45 != (mlir::Region *)-4096)
  {
    if (v46)
      v48 = 0;
    else
      v48 = v45 == (mlir::Region *)-8192;
    if (v48)
      v46 = v34;
    v49 = v44 + v47++;
    v44 = v49 & v43;
    v34 = (mlir::Region **)(v42 + 16 * (v49 & v43));
    v45 = *v34;
    if (*v34 == a2)
      goto LABEL_68;
  }
  if (v46)
    v34 = v46;
LABEL_50:
  v36 = *v34;
  v37 = v28 - v4;
  ++*((_DWORD *)this + 228);
  if (v36 != (mlir::Region *)-4096)
    goto LABEL_51;
LABEL_52:
  *v34 = a2;
  *((_DWORD *)v34 + 2) = v6;
  *((_DWORD *)v34 + 3) = v37;
}

void mlir::bytecode::detail::IRNumberingState::number(uint64_t a1, uint64_t **a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t **v11;
  unsigned int v12;
  uint64_t v13;
  char *buffer;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  mlir::Dialect **v38;
  mlir::Dialect *v39;
  BOOL v40;
  mlir::Dialect ***v41;
  uint64_t AttributeWriterCallbacks;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t DialectVersionMap;
  uint64_t Context;
  uint64_t DialectResources;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t AttrData;
  mlir::detail::AsmStateImpl *v55;
  mlir::detail::AsmStateImpl *v56;
  uint64_t v57;
  mlir::detail::AsmStateImpl *v58;
  mlir::detail::AsmStateImpl *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t ***v62;
  int v63;
  BOOL v64;
  int v65;
  uint64_t ***v66;
  int v67;
  int v68;
  unsigned int v69;
  uint64_t **v70;
  uint64_t ***v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  void (**v75)(llvm::raw_null_ostream *__hidden);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int v82;
  mlir::detail::AsmStateImpl *v83[2];
  char v84;
  mlir::Dialect ***v85;

  v85 = (mlir::Dialect ***)a2;
  v4 = *(_DWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_81;
  v5 = *(_QWORD *)a1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (uint64_t ***)(*(_QWORD *)a1 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_3:
    ++*(_DWORD *)(*(_QWORD *)(v5 + 16 * v6 + 8) + 12);
    return;
  }
  v62 = 0;
  v63 = 1;
  while (v8 != (uint64_t **)-4096)
  {
    if (v62)
      v64 = 0;
    else
      v64 = v8 == (uint64_t **)-8192;
    if (v64)
      v62 = v7;
    v65 = v6 + v63++;
    v6 = v65 & (v4 - 1);
    v7 = (uint64_t ***)(v5 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_3;
  }
  v66 = v62 ? v62 : v7;
  v67 = *(_DWORD *)(a1 + 8);
  if (4 * v67 + 4 < 3 * v4)
  {
    if (v4 + ~v67 - *(_DWORD *)(a1 + 12) > v4 >> 3)
    {
LABEL_6:
      v9 = *v66;
      goto LABEL_7;
    }
  }
  else
  {
LABEL_81:
    v4 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1, v4);
  v68 = *(_DWORD *)(a1 + 16) - 1;
  v69 = v68 & ((a2 >> 4) ^ (a2 >> 9));
  v66 = (uint64_t ***)(*(_QWORD *)a1 + 16 * v69);
  v70 = *v66;
  if (*v66 != a2)
  {
    v71 = 0;
    v72 = 1;
    while (v70 != (uint64_t **)-4096)
    {
      if (v71)
        v73 = 0;
      else
        v73 = v70 == (uint64_t **)-8192;
      if (v73)
        v71 = v66;
      v74 = v69 + v72++;
      v69 = v74 & v68;
      v66 = (uint64_t ***)(*(_QWORD *)a1 + 16 * v69);
      v70 = *v66;
      v9 = a2;
      if (*v66 == a2)
        goto LABEL_7;
    }
    if (v71)
      v66 = v71;
    goto LABEL_6;
  }
  v9 = a2;
LABEL_7:
  ++*(_DWORD *)(a1 + 8);
  if (v9 != (uint64_t **)-4096)
    --*(_DWORD *)(a1 + 12);
  *v66 = a2;
  v66[1] = 0;
  *(_QWORD *)(a1 + 336) += 24;
  v10 = *(_QWORD *)(a1 + 256);
  if (v10 && ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 24 <= *(_QWORD *)(a1 + 264) - v10)
  {
    v11 = (uint64_t **)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 280) >> 7;
    if (v12 >= 0x1E)
      LOBYTE(v12) = 30;
    v13 = 4096 << v12;
    buffer = (char *)llvm::allocate_buffer(4096 << v12, (std::align_val_t)8uLL);
    v15 = *(unsigned int *)(a1 + 280);
    if (v15 >= *(_DWORD *)(a1 + 284))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 272, (void *)(a1 + 288), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a1 + 280);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v15) = buffer;
    ++*(_DWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 264) = &buffer[v13];
    v11 = (uint64_t **)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)(a1 + 256) = v11 + 3;
  *v11 = (uint64_t *)((unint64_t)v85 & 0xFFFFFFFFFFFFFFFBLL);
  v11[1] = (uint64_t *)0x100000000;
  v11[2] = 0;
  v66[1] = v11;
  v17 = *(char **)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 176);
  if ((unint64_t)v17 < v16)
  {
    *(_QWORD *)v17 = v11;
    v18 = (uint64_t)(v17 + 8);
    goto LABEL_39;
  }
  v19 = *(char **)(a1 + 160);
  v20 = (v17 - v19) >> 3;
  v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 61)
    abort();
  v22 = v16 - (_QWORD)v19;
  if (v22 >> 2 > v21)
    v21 = v22 >> 2;
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
    v23 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v23 = v21;
  if (v23)
  {
    if (v23 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v24 = (char *)operator new(8 * v23);
    v25 = &v24[8 * v20];
    v26 = &v24[8 * v23];
    *(_QWORD *)v25 = v11;
    v18 = (uint64_t)(v25 + 8);
    v27 = (char *)(v17 - v19);
    if (v17 == v19)
      goto LABEL_37;
    goto LABEL_30;
  }
  v24 = 0;
  v25 = (char *)(8 * v20);
  v26 = 0;
  *(_QWORD *)(8 * v20) = v11;
  v18 = 8 * v20 + 8;
  v27 = (char *)(v17 - v19);
  if (v17 != v19)
  {
LABEL_30:
    v28 = (unint64_t)(v27 - 8);
    if (v28 < 0x58)
      goto LABEL_100;
    if ((unint64_t)(v19 - v24) < 0x20)
      goto LABEL_100;
    v29 = (v28 >> 3) + 1;
    v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v17[-v30];
    v25 -= v30;
    v32 = &v24[8 * v20 - 16];
    v33 = v17 - 16;
    v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v35 = *(_OWORD *)v33;
      *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
      *(_OWORD *)v32 = v35;
      v32 -= 32;
      v33 -= 32;
      v34 -= 4;
    }
    while (v34);
    v17 = v31;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        v36 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v25 - 1) = v36;
        v25 -= 8;
      }
      while (v17 != v19);
    }
    v17 = *(char **)(a1 + 160);
  }
LABEL_37:
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = v18;
  *(_QWORD *)(a1 + 176) = v26;
  if (v17)
    operator delete(v17);
LABEL_39:
  *(_QWORD *)(a1 + 168) = v18;
  v37 = (uint64_t *)v85;
  v38 = *v85;
  v39 = (*v85)[17];
  v40 = v39 == (mlir::Dialect *)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  if (v39 == (mlir::Dialect *)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id)
    v41 = v85;
  else
    v41 = 0;
  v75 = (void (**)(llvm::raw_null_ostream *__hidden))v41;
  if (v40)
  {
    v83[0] = (mlir::detail::AsmStateImpl *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v75);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v83);
    v56 = v55;
    v57 = a1;
    v58 = (mlir::detail::AsmStateImpl *)AttrData;
    v59 = v56;
LABEL_57:
    mlir::bytecode::detail::IRNumberingState::numberDialect(v57, (uint64_t)v58, (uint64_t)v59);
    v11[2] = v60;
    return;
  }
  v11[2] = (uint64_t *)mlir::bytecode::detail::IRNumberingState::numberDialect((mlir::bytecode::detail::IRNumberingState *)a1, *v38);
  if ((mlir::AbstractAttribute::hasTrait<mlir::AttributeTrait::IsMutable>(*v37) & 1) != 0)
  {
LABEL_50:
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v85);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v75);
    mlir::AsmState::AsmState(v83, Context, &v75, 0, 0);
    LODWORD(v76) = 0;
    v80 = 0;
    v81 = 0;
    v82 = 1;
    v78 = 0;
    v79 = 0;
    v77 = 0;
    v75 = off_1E0E229B8;
    mlir::Attribute::print((uint64_t ***)&v85, (llvm::raw_ostream *)&v75, (mlir::AsmState *)v83, 0);
    DialectResources = mlir::AsmState::getDialectResources((mlir::AsmState *)v83);
    if (*(_DWORD *)(DialectResources + 8))
    {
      v51 = *(unsigned int *)(DialectResources + 16);
      if ((_DWORD)v51)
      {
        v52 = 48 * v51;
        v53 = *(_QWORD *)DialectResources;
        while ((*(_QWORD *)v53 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v53 += 48;
          v52 -= 48;
          if (!v52)
            goto LABEL_55;
        }
      }
      else
      {
        v53 = *(_QWORD *)DialectResources;
      }
      v61 = *(_QWORD *)DialectResources + 48 * v51;
LABEL_61:
      if (v53 != v61)
      {
        mlir::bytecode::detail::IRNumberingState::number(a1, *(mlir::Dialect **)v53, *(uint64_t **)(v53 + 32), *(unsigned int *)(v53 + 40));
        while (1)
        {
          v53 += 48;
          if (v53 == v61)
            break;
          if ((*(_QWORD *)v53 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_61;
        }
      }
    }
LABEL_55:
    llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v75);
    mlir::AsmState::~AsmState(v83);
    return;
  }
  AttributeWriterCallbacks = mlir::BytecodeWriterConfig::getAttributeWriterCallbacks(*(mlir::BytecodeWriterConfig **)(a1 + 936));
  if (!v43)
  {
LABEL_48:
    v47 = v11[2][3];
    if (v47)
    {
      DialectVersionMap = mlir::BytecodeWriterConfig::getDialectVersionMap(*(mlir::BytecodeWriterConfig **)(a1 + 936));
      v75 = (void (**)(llvm::raw_null_ostream *__hidden))&unk_1E0E4ED00;
      v76 = a1;
      v77 = DialectVersionMap;
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t *, void (***)(llvm::raw_null_ostream *__hidden)))(*(_QWORD *)v47 + 32))(v47, v37, &v75))
      {
        return;
      }
    }
    goto LABEL_50;
  }
  v44 = (_QWORD *)AttributeWriterCallbacks;
  v45 = 8 * v43;
  while (1)
  {
    v46 = mlir::BytecodeWriterConfig::getDialectVersionMap(*(mlir::BytecodeWriterConfig **)(a1 + 936));
    v75 = (void (**)(llvm::raw_null_ostream *__hidden))&unk_1E0E4ED00;
    v76 = a1;
    v77 = v46;
    LOBYTE(v83[0]) = 0;
    v84 = 0;
    if ((*(unsigned __int8 (**)(_QWORD, uint64_t *, mlir::detail::AsmStateImpl **, void (***)(llvm::raw_null_ostream *__hidden)))(*(_QWORD *)*v44 + 16))(*v44, v37, v83, &v75))
    {
      break;
    }
    ++v44;
    v45 -= 8;
    if (!v45)
      goto LABEL_48;
  }
  if (v84)
  {
    v58 = v83[0];
    v59 = v83[1];
    v57 = a1;
    goto LABEL_57;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t **v13;
  unsigned int v14;
  uint64_t v15;
  char *buffer;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  mlir::Dialect **v40;
  mlir::Dialect *v41;
  BOOL v42;
  mlir::Dialect ***v43;
  uint64_t TypeWriterCallbacks;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t DialectVersionMap;
  uint64_t Context;
  uint64_t DialectResources;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t AttrData;
  mlir::detail::AsmStateImpl *v57;
  mlir::detail::AsmStateImpl *v58;
  uint64_t v59;
  mlir::detail::AsmStateImpl *v60;
  mlir::detail::AsmStateImpl *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t ***v64;
  int v65;
  BOOL v66;
  int v67;
  uint64_t ***v68;
  int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t **v73;
  uint64_t ***v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  void (**v78)(llvm::raw_null_ostream *__hidden);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  mlir::detail::AsmStateImpl *v86[2];
  char v87;
  mlir::Dialect ***v88;

  v88 = (mlir::Dialect ***)a2;
  v6 = *(_QWORD *)(a1 + 72);
  v4 = a1 + 72;
  v5 = v6;
  v7 = *(_DWORD *)(v4 + 16);
  if (!v7)
    goto LABEL_81;
  v8 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v9 = (uint64_t ***)(v5 + 16 * v8);
  v10 = *v9;
  if (*v9 == a2)
  {
LABEL_3:
    ++*(_DWORD *)(*(_QWORD *)(v5 + 16 * v8 + 8) + 12);
    return;
  }
  v64 = 0;
  v65 = 1;
  while (v10 != (uint64_t **)-4096)
  {
    if (v64)
      v66 = 0;
    else
      v66 = v10 == (uint64_t **)-8192;
    if (v66)
      v64 = v9;
    v67 = v8 + v65++;
    v8 = v67 & (v7 - 1);
    v9 = (uint64_t ***)(v5 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_3;
  }
  v68 = v64 ? v64 : v9;
  v69 = *(_DWORD *)(a1 + 80);
  if (4 * v69 + 4 < 3 * v7)
  {
    if (v7 + ~v69 - *(_DWORD *)(a1 + 84) > v7 >> 3)
    {
LABEL_6:
      v11 = *v68;
      goto LABEL_7;
    }
  }
  else
  {
LABEL_81:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  v70 = *(_QWORD *)(a1 + 72);
  v71 = *(_DWORD *)(a1 + 88) - 1;
  v72 = v71 & ((a2 >> 4) ^ (a2 >> 9));
  v68 = (uint64_t ***)(v70 + 16 * v72);
  v73 = *v68;
  if (*v68 != a2)
  {
    v74 = 0;
    v75 = 1;
    while (v73 != (uint64_t **)-4096)
    {
      if (v74)
        v76 = 0;
      else
        v76 = v73 == (uint64_t **)-8192;
      if (v76)
        v74 = v68;
      v77 = v72 + v75++;
      v72 = v77 & v71;
      v68 = (uint64_t ***)(v70 + 16 * v72);
      v73 = *v68;
      v11 = a2;
      if (*v68 == a2)
        goto LABEL_7;
    }
    if (v74)
      v68 = v74;
    goto LABEL_6;
  }
  v11 = a2;
LABEL_7:
  ++*(_DWORD *)(a1 + 80);
  if (v11 != (uint64_t **)-4096)
    --*(_DWORD *)(a1 + 84);
  *v68 = a2;
  v68[1] = 0;
  *(_QWORD *)(a1 + 816) += 24;
  v12 = *(_QWORD *)(a1 + 736);
  if (v12 && ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) - v12 + 24 <= *(_QWORD *)(a1 + 744) - v12)
  {
    v13 = (uint64_t **)((v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 760) >> 7;
    if (v14 >= 0x1E)
      LOBYTE(v14) = 30;
    v15 = 4096 << v14;
    buffer = (char *)llvm::allocate_buffer(4096 << v14, (std::align_val_t)8uLL);
    v17 = *(unsigned int *)(a1 + 760);
    if (v17 >= *(_DWORD *)(a1 + 764))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 752, (void *)(a1 + 768), v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(a1 + 760);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 752) + 8 * v17) = buffer;
    ++*(_DWORD *)(a1 + 760);
    *(_QWORD *)(a1 + 744) = &buffer[v15];
    v13 = (uint64_t **)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)(a1 + 736) = v13 + 3;
  *v13 = (uint64_t *)((unint64_t)v88 | 4);
  v13[1] = (uint64_t *)0x100000000;
  v13[2] = 0;
  v68[1] = v13;
  v19 = *(char **)(a1 + 216);
  v18 = *(_QWORD *)(a1 + 224);
  if ((unint64_t)v19 < v18)
  {
    *(_QWORD *)v19 = v13;
    v20 = (uint64_t)(v19 + 8);
    goto LABEL_39;
  }
  v21 = *(char **)(a1 + 208);
  v22 = (v19 - v21) >> 3;
  v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 61)
    abort();
  v24 = v18 - (_QWORD)v21;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v26 = (char *)operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *(_QWORD *)v27 = v13;
    v20 = (uint64_t)(v27 + 8);
    v29 = (char *)(v19 - v21);
    if (v19 == v21)
      goto LABEL_37;
    goto LABEL_30;
  }
  v26 = 0;
  v27 = (char *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = v13;
  v20 = 8 * v22 + 8;
  v29 = (char *)(v19 - v21);
  if (v19 != v21)
  {
LABEL_30:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_100;
    if ((unint64_t)(v21 - v26) < 0x20)
      goto LABEL_100;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v19[-v32];
    v27 -= v32;
    v34 = &v26[8 * v22 - 16];
    v35 = v19 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *((_OWORD *)v34 - 1) = *((_OWORD *)v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v19 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        v38 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v27 - 1) = v38;
        v27 -= 8;
      }
      while (v19 != v21);
    }
    v19 = *(char **)(a1 + 208);
  }
LABEL_37:
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)(a1 + 216) = v20;
  *(_QWORD *)(a1 + 224) = v28;
  if (v19)
    operator delete(v19);
LABEL_39:
  *(_QWORD *)(a1 + 216) = v20;
  v39 = (uint64_t *)v88;
  v40 = *v88;
  v41 = (*v88)[17];
  v42 = v41 == (mlir::Dialect *)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id;
  if (v41 == (mlir::Dialect *)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id)
    v43 = v88;
  else
    v43 = 0;
  v78 = (void (**)(llvm::raw_null_ostream *__hidden))v43;
  if (v42)
  {
    v86[0] = (mlir::detail::AsmStateImpl *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v78);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v86);
    v58 = v57;
    v59 = a1;
    v60 = (mlir::detail::AsmStateImpl *)AttrData;
    v61 = v58;
LABEL_57:
    mlir::bytecode::detail::IRNumberingState::numberDialect(v59, (uint64_t)v60, (uint64_t)v61);
    v13[2] = v62;
    return;
  }
  v13[2] = (uint64_t *)mlir::bytecode::detail::IRNumberingState::numberDialect((mlir::bytecode::detail::IRNumberingState *)a1, *v40);
  if ((mlir::AbstractType::hasTrait<mlir::TypeTrait::IsMutable>(*v39) & 1) != 0)
  {
LABEL_50:
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v88);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v78);
    mlir::AsmState::AsmState(v86, Context, &v78, 0, 0);
    LODWORD(v79) = 0;
    v83 = 0;
    v84 = 0;
    v85 = 1;
    v81 = 0;
    v82 = 0;
    v80 = 0;
    v78 = off_1E0E229B8;
    mlir::Type::print((uint64_t ***)&v88, (llvm::raw_ostream *)&v78, (mlir::AsmState *)v86);
    DialectResources = mlir::AsmState::getDialectResources((mlir::AsmState *)v86);
    if (*(_DWORD *)(DialectResources + 8))
    {
      v53 = *(unsigned int *)(DialectResources + 16);
      if ((_DWORD)v53)
      {
        v54 = 48 * v53;
        v55 = *(_QWORD *)DialectResources;
        while ((*(_QWORD *)v55 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v55 += 48;
          v54 -= 48;
          if (!v54)
            goto LABEL_55;
        }
      }
      else
      {
        v55 = *(_QWORD *)DialectResources;
      }
      v63 = *(_QWORD *)DialectResources + 48 * v53;
LABEL_61:
      if (v55 != v63)
      {
        mlir::bytecode::detail::IRNumberingState::number(a1, *(mlir::Dialect **)v55, *(uint64_t **)(v55 + 32), *(unsigned int *)(v55 + 40));
        while (1)
        {
          v55 += 48;
          if (v55 == v63)
            break;
          if ((*(_QWORD *)v55 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_61;
        }
      }
    }
LABEL_55:
    llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v78);
    mlir::AsmState::~AsmState(v86);
    return;
  }
  TypeWriterCallbacks = mlir::BytecodeWriterConfig::getTypeWriterCallbacks(*(mlir::BytecodeWriterConfig **)(a1 + 936));
  if (!v45)
  {
LABEL_48:
    v49 = v13[2][3];
    if (v49)
    {
      DialectVersionMap = mlir::BytecodeWriterConfig::getDialectVersionMap(*(mlir::BytecodeWriterConfig **)(a1 + 936));
      v78 = (void (**)(llvm::raw_null_ostream *__hidden))&unk_1E0E4ED00;
      v79 = a1;
      v80 = DialectVersionMap;
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t *, void (***)(llvm::raw_null_ostream *__hidden)))(*(_QWORD *)v49 + 40))(v49, v39, &v78))
      {
        return;
      }
    }
    goto LABEL_50;
  }
  v46 = (_QWORD *)TypeWriterCallbacks;
  v47 = 8 * v45;
  while (1)
  {
    v48 = mlir::BytecodeWriterConfig::getDialectVersionMap(*(mlir::BytecodeWriterConfig **)(a1 + 936));
    v78 = (void (**)(llvm::raw_null_ostream *__hidden))&unk_1E0E4ED00;
    v79 = a1;
    v80 = v48;
    LOBYTE(v86[0]) = 0;
    v87 = 0;
    if ((*(unsigned __int8 (**)(_QWORD, uint64_t *, mlir::detail::AsmStateImpl **, void (***)(llvm::raw_null_ostream *__hidden)))(*(_QWORD *)*v46 + 16))(*v46, v39, v86, &v78))
    {
      break;
    }
    ++v46;
    v47 -= 8;
    if (!v47)
      goto LABEL_48;
  }
  if (v87)
  {
    v60 = v86[0];
    v61 = v86[1];
    v59 = a1;
    goto LABEL_57;
  }
}

double mlir::bytecode::detail::IRNumberingState::numberDialect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  double result;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char *v14;
  __int128 v15;

  *(_QWORD *)&v15 = a2;
  *((_QWORD *)&v15 + 1) = a3;
  v4 = (_QWORD *)llvm::MapVector<llvm::StringRef,mlir::bytecode::detail::DialectNumbering *,llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::StringRef,mlir::bytecode::detail::DialectNumbering *>,0u>>::operator[](a1 + 120, &v15);
  if (!*v4)
  {
    *(_QWORD *)(a1 + 432) += 120;
    v6 = *(_QWORD *)(a1 + 352);
    if (v6)
      v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 120 > *(_QWORD *)(a1 + 360) - v6;
    else
      v7 = 1;
    if (v7)
    {
      v8 = *(_DWORD *)(a1 + 376) >> 7;
      if (v8 >= 0x1E)
        LOBYTE(v8) = 30;
      v9 = 4096 << v8;
      buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
      v11 = *(unsigned int *)(a1 + 376);
      if (v11 >= *(_DWORD *)(a1 + 380))
      {
        v14 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 368, (void *)(a1 + 384), v11 + 1, 8);
        buffer = v14;
        LODWORD(v11) = *(_DWORD *)(a1 + 376);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v11) = buffer;
      ++*(_DWORD *)(a1 + 376);
      *(_QWORD *)(a1 + 360) = &buffer[v9];
      v12 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v12 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)(a1 + 352) = v12 + 120;
    v13 = *(_DWORD *)(a1 + 152) - 1;
    *(_OWORD *)v12 = v15;
    *(_DWORD *)(v12 + 16) = v13;
    result = 0.0;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_DWORD *)(v12 + 56) = 0;
    *(_QWORD *)(v12 + 80) = 0;
    *(_QWORD *)(v12 + 64) = v12 + 80;
    *(_QWORD *)(v12 + 72) = 0;
    *(_QWORD *)(v12 + 88) = 0;
    *(_DWORD *)(v12 + 96) = 0;
    *(_QWORD *)(v12 + 104) = v12 + 120;
    *(_QWORD *)(v12 + 112) = 0;
    *v4 = v12;
  }
  return result;
}

mlir::Dialect *mlir::bytecode::detail::IRNumberingState::numberDialect(mlir::bytecode::detail::IRNumberingState *this, mlir::Dialect *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  mlir::Dialect **v9;
  mlir::Dialect *v10;
  mlir::Dialect **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  mlir::Dialect *v15;
  mlir::Dialect *result;
  mlir::Dialect *v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  mlir::Dialect *v24;
  mlir::Dialect **v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v6 = *((_QWORD *)this + 12);
  v4 = (char *)this + 96;
  v5 = v6;
  v7 = *((_DWORD *)v4 + 4);
  if (!v7)
    goto LABEL_26;
  v8 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v9 = (mlir::Dialect **)(v5 + 16 * v8);
  v10 = *v9;
  if (*v9 == a2)
    goto LABEL_17;
  v11 = 0;
  v12 = 1;
  while (v10 != (mlir::Dialect *)-4096)
  {
    if (v11)
      v13 = 0;
    else
      v13 = v10 == (mlir::Dialect *)-8192;
    if (v13)
      v11 = v9;
    v14 = v8 + v12++;
    v8 = v14 & (v7 - 1);
    v9 = (mlir::Dialect **)(v5 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_17;
  }
  if (v11)
    v9 = v11;
  v20 = *((_DWORD *)this + 26);
  if (4 * v20 + 4 < 3 * v7)
  {
    if (v7 + ~v20 - *((_DWORD *)this + 27) > v7 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_26:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v7);
  v21 = *((_QWORD *)this + 12);
  v22 = *((_DWORD *)this + 28) - 1;
  v23 = v22 & ((a2 >> 4) ^ (a2 >> 9));
  v9 = (mlir::Dialect **)(v21 + 16 * v23);
  v24 = *v9;
  if (*v9 == a2)
  {
LABEL_28:
    ++*((_DWORD *)this + 26);
    if (a2 == (mlir::Dialect *)-4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v25 = 0;
  v26 = 1;
  while (v24 != (mlir::Dialect *)-4096)
  {
    if (v25)
      v27 = 0;
    else
      v27 = v24 == (mlir::Dialect *)-8192;
    if (v27)
      v25 = v9;
    v28 = v23 + v26++;
    v23 = v28 & v22;
    v9 = (mlir::Dialect **)(v21 + 16 * v23);
    v24 = *v9;
    if (*v9 == a2)
      goto LABEL_28;
  }
  if (v25)
    v9 = v25;
LABEL_14:
  v15 = *v9;
  ++*((_DWORD *)this + 26);
  if (v15 != (mlir::Dialect *)-4096)
LABEL_15:
    --*((_DWORD *)this + 27);
LABEL_16:
  *v9 = a2;
  v9[1] = 0;
LABEL_17:
  result = v9[1];
  if (!result)
  {
    mlir::bytecode::detail::IRNumberingState::numberDialect((uint64_t)this, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
    v9[1] = v17;
    v18 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>((uint64_t)a2);
    if (v18)
      v18 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>((uint64_t)a2);
    *((_QWORD *)v9[1] + 3) = v18;
    v19 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2);
    if (v19)
      v19 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2);
    *((_QWORD *)v9[1] + 4) = v19;
    return v9[1];
  }
  return result;
}

uint64_t mlir::bytecode::detail::IRNumberingState::number(uint64_t a1, mlir::Dialect *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  char *buffer;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  int v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;

  result = (uint64_t)mlir::bytecode::detail::IRNumberingState::numberDialect((mlir::bytecode::detail::IRNumberingState *)a1, a2);
  if (a4)
  {
    v8 = result;
    v9 = &a3[3 * a4];
    v10 = result + 40;
    v11 = result + 80;
    while (1)
    {
      result = llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert(v10, a3);
      if (!(_DWORD)result)
        return result;
      *(_QWORD *)(a1 + 720) += 32;
      v16 = *(_QWORD *)(a1 + 640);
      if (v16)
        v17 = ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) - v16 + 32 > *(_QWORD *)(a1 + 648) - v16;
      else
        v17 = 1;
      if (v17)
      {
        v18 = *(_DWORD *)(a1 + 664) >> 7;
        if (v18 >= 0x1E)
          LOBYTE(v18) = 30;
        v19 = 4096 << v18;
        buffer = (char *)llvm::allocate_buffer(4096 << v18, (std::align_val_t)8uLL);
        v21 = *(unsigned int *)(a1 + 664);
        if (v21 >= *(unsigned int *)(a1 + 668))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 656, (void *)(a1 + 672), v21 + 1, 8);
          v21 = *(unsigned int *)(a1 + 664);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + 8 * v21) = buffer;
        ++*(_DWORD *)(a1 + 664);
        *(_QWORD *)(a1 + 648) = &buffer[v19];
        v22 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        v22 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(_QWORD *)(a1 + 640) = v22 + 32;
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t *))(**(_QWORD **)(v8 + 32) + 40))(&v45, *(_QWORD *)(v8 + 32), a3);
      v23 = v45;
      *(_QWORD *)(v22 + 16) = v46;
      *(_OWORD *)v22 = v23;
      v46 = 0;
      v45 = 0uLL;
      *(_DWORD *)(v22 + 24) = 0;
      *(_BYTE *)(v22 + 28) = 1;
      v25 = *(_QWORD *)v22;
      v24 = *(_QWORD *)(v22 + 8);
      if (*(char *)(v22 + 23) >= 0)
      {
        v25 = v22;
        v24 = *(unsigned __int8 *)(v22 + 23);
      }
      *(_QWORD *)&v43 = v25;
      *((_QWORD *)&v43 + 1) = v24;
      v44 = v22;
      result = llvm::MapVector<llvm::StringRef,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::StringRef,mlir::bytecode::detail::DialectResourceNumbering *>,0u>>::try_emplace<mlir::bytecode::detail::DialectResourceNumbering *>(v11, &v43, (uint64_t *)&v44);
      v26 = *(_DWORD *)(a1 + 248);
      if (!v26)
        goto LABEL_38;
      v12 = *(_QWORD *)(a1 + 232);
      v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v26 - 1);
      v14 = (uint64_t *)(v12 + 32 * v13);
      v15 = *v14;
      if (*a3 != *v14)
        break;
LABEL_4:
      a3 += 3;
      if (a3 == v9)
        return result;
    }
    v29 = 0;
    v30 = 1;
    while (v15 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v15 == -8192;
      if (v31)
        v29 = v14;
      v32 = v13 + v30++;
      v13 = v32 & (v26 - 1);
      v14 = (uint64_t *)(v12 + 32 * v13);
      v15 = *v14;
      if (*a3 == *v14)
        goto LABEL_4;
    }
    if (v29)
      v33 = v29;
    else
      v33 = v14;
    v34 = *(_DWORD *)(a1 + 240);
    if (4 * v34 + 4 < 3 * v26)
    {
      if (v26 + ~v34 - *(_DWORD *)(a1 + 244) > v26 >> 3)
        goto LABEL_21;
    }
    else
    {
LABEL_38:
      v26 *= 2;
    }
    result = (uint64_t)llvm::DenseMap<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>::grow(a1 + 232, v26);
    v35 = *(_QWORD *)(a1 + 232);
    v27 = *a3;
    v36 = *(_DWORD *)(a1 + 248) - 1;
    v37 = ((*a3 >> 4) ^ (*a3 >> 9)) & v36;
    v33 = (uint64_t *)(v35 + 32 * v37);
    v38 = *v33;
    if (*a3 == *v33)
      goto LABEL_22;
    v39 = 0;
    v40 = 1;
    while (v38 != -4096)
    {
      if (v39)
        v41 = 0;
      else
        v41 = v38 == -8192;
      if (v41)
        v39 = v33;
      v42 = v37 + v40++;
      v37 = v42 & v36;
      v33 = (uint64_t *)(v35 + 32 * v37);
      v38 = *v33;
      if (v27 == *v33)
        goto LABEL_22;
    }
    if (v39)
      v33 = v39;
LABEL_21:
    v27 = *v33;
LABEL_22:
    ++*(_DWORD *)(a1 + 240);
    if (v27 != -4096)
      --*(_DWORD *)(a1 + 244);
    v28 = a3[2];
    *(_OWORD *)v33 = *(_OWORD *)a3;
    v33[2] = v28;
    v33[3] = v22;
    goto LABEL_4;
  }
  return result;
}

void mlir::bytecode::detail::IRNumberingState::number(mlir::bytecode::detail::IRNumberingState *this, mlir::Block *a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  mlir::Block *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  mlir::Block *v18;
  mlir::GenericProgramPoint *v19;
  mlir::GenericProgramPoint *i;
  mlir::Operation *v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  mlir::Block *v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unint64_t v31;
  _QWORD *v32;

  v4 = (unint64_t *)*((_QWORD *)a2 + 6);
  v5 = *((_QWORD *)a2 + 7) - (_QWORD)v4;
  if (v5)
  {
    v6 = 8 * (v5 >> 3);
    do
    {
      v31 = *v4;
      v32 = 0;
      v7 = *((_DWORD *)this + 232);
      *((_DWORD *)this + 232) = v7 + 1;
      if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)this + 107, &v31, &v32) & 1) == 0)
      {
        v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this + 856, (uint64_t)&v31, &v31, v32);
        *v8 = v31;
        *((_DWORD *)v8 + 2) = v7;
      }
      mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, *(uint64_t ***)(v31 + 32));
      mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, (uint64_t **)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF8));
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
  v9 = *((_DWORD *)this + 224);
  if (!v9)
    goto LABEL_28;
  v10 = *((_QWORD *)this + 110);
  v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v12 = v10 + 16 * v11;
  v13 = *(mlir::Block **)v12;
  if (*(mlir::Block **)v12 == a2)
    goto LABEL_22;
  v14 = 0;
  v15 = 1;
  while (v13 != (mlir::Block *)-4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v13 == (mlir::Block *)-8192;
    if (v16)
      v14 = v12;
    v17 = v11 + v15++;
    v11 = v17 & (v9 - 1);
    v12 = v10 + 16 * v11;
    v13 = *(mlir::Block **)v12;
    if (*(mlir::Block **)v12 == a2)
      goto LABEL_22;
  }
  if (v14)
    v12 = v14;
  v22 = *((_DWORD *)this + 222);
  if (4 * v22 + 4 < 3 * v9)
  {
    if (v9 + ~v22 - *((_DWORD *)this + 223) > v9 >> 3)
      goto LABEL_19;
  }
  else
  {
LABEL_28:
    v9 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 880, v9);
  v23 = *((_QWORD *)this + 110);
  v24 = *((_DWORD *)this + 224) - 1;
  v25 = v24 & ((a2 >> 4) ^ (a2 >> 9));
  v12 = v23 + 16 * v25;
  v26 = *(mlir::Block **)v12;
  if (*(mlir::Block **)v12 == a2)
  {
LABEL_30:
    ++*((_DWORD *)this + 222);
    if (a2 == (mlir::Block *)-4096)
      goto LABEL_21;
    goto LABEL_20;
  }
  v27 = 0;
  v28 = 1;
  while (v26 != (mlir::Block *)-4096)
  {
    if (v27)
      v29 = 0;
    else
      v29 = v26 == (mlir::Block *)-8192;
    if (v29)
      v27 = v12;
    v30 = v25 + v28++;
    v25 = v30 & v24;
    v12 = v23 + 16 * v25;
    v26 = *(mlir::Block **)v12;
    if (*(mlir::Block **)v12 == a2)
      goto LABEL_30;
  }
  if (v27)
    v12 = v27;
LABEL_19:
  v18 = *(mlir::Block **)v12;
  ++*((_DWORD *)this + 222);
  if (v18 != (mlir::Block *)-4096)
LABEL_20:
    --*((_DWORD *)this + 223);
LABEL_21:
  *(_QWORD *)v12 = a2;
  *(_DWORD *)(v12 + 8) = 0;
LABEL_22:
  v19 = (mlir::Block *)((char *)a2 + 32);
  for (i = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 5); i != v19; i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(i);
    mlir::bytecode::detail::IRNumberingState::number(this, v21);
    ++*(_DWORD *)(v12 + 8);
  }
}

uint64_t llvm::MapVector<llvm::StringRef,mlir::bytecode::detail::DialectNumbering *,llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::StringRef,mlir::bytecode::detail::DialectNumbering *>,0u>>::operator[](uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;

  v18 = *a2;
  v19 = 0;
  *(_QWORD *)&v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)&v18, &v16))
  {
    v4 = *(_DWORD *)(v16 + 16);
  }
  else
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)&v18, (uint64_t)&v18, (_QWORD *)v16);
    *(_OWORD *)v5 = v18;
    *((_DWORD *)v5 + 4) = v19;
    v6 = a1 + 24;
    v7 = *(_QWORD *)(a1 + 24);
    v16 = *a2;
    v17 = 0;
    v8 = *(unsigned int *)(a1 + 32);
    v9 = (char *)&v16;
    if (v8 >= *(_DWORD *)(a1 + 36))
    {
      v13 = v8 + 1;
      v14 = v7 + 24 * v8 > (unint64_t)&v16;
      if (v7 <= (unint64_t)&v16 && v14)
      {
        v15 = (char *)&v16 - v7;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 40), v13, 24);
        v7 = *(_QWORD *)(a1 + 24);
        v9 = &v15[v7];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 40), v13, 24);
        v7 = *(_QWORD *)(a1 + 24);
        v9 = (char *)&v16;
      }
    }
    v10 = v7 + 24 * *(unsigned int *)(a1 + 32);
    v11 = *(_OWORD *)v9;
    *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
    *(_OWORD *)v10 = v11;
    v4 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v4 + 1;
    *((_DWORD *)v5 + 4) = v4;
  }
  return *(_QWORD *)(a1 + 24) + 24 * v4 + 16;
}

void mlir::bytecode::detail::IRNumberingState::number(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  mlir::Dialect *Values;
  mlir::Dialect *v18;
  uint64_t v19;
  uint64_t DialectNamespace;
  uint64_t v21;
  mlir::Dialect *v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  char *buffer;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;

  v60 = a2;
  v6 = *(_QWORD *)(a1 + 48);
  v4 = a1 + 48;
  v5 = v6;
  v7 = *(_DWORD *)(v4 + 16);
  if (!v7)
    goto LABEL_59;
  v8 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v9 = (_QWORD *)(v5 + 16 * v8);
  v10 = *v9;
  if (*v9 == a2)
    goto LABEL_18;
  v11 = 0;
  v12 = 1;
  while (v10 != -4096)
  {
    if (v11)
      v13 = 0;
    else
      v13 = v10 == -8192;
    if (v13)
      v11 = v9;
    v14 = v8 + v12++;
    v8 = v14 & (v7 - 1);
    v9 = (_QWORD *)(v5 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_18;
  }
  if (v11)
    v9 = v11;
  v50 = *(_DWORD *)(a1 + 56);
  if (4 * v50 + 4 < 3 * v7)
  {
    if (v7 + ~v50 - *(_DWORD *)(a1 + 60) > v7 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_59:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  v51 = *(_QWORD *)(a1 + 48);
  v52 = *(_DWORD *)(a1 + 64) - 1;
  v53 = ((a2 >> 4) ^ (a2 >> 9)) & v52;
  v9 = (_QWORD *)(v51 + 16 * v53);
  v54 = *v9;
  if (*v9 == a2)
  {
    v15 = a2;
    goto LABEL_15;
  }
  v56 = 0;
  v57 = 1;
  while (v54 != -4096)
  {
    if (v56)
      v58 = 0;
    else
      v58 = v54 == -8192;
    if (v58)
      v56 = v9;
    v59 = v53 + v57++;
    v53 = v59 & v52;
    v9 = (_QWORD *)(v51 + 16 * v53);
    v54 = *v9;
    v15 = a2;
    if (*v9 == a2)
      goto LABEL_15;
  }
  if (v56)
    v9 = v56;
LABEL_14:
  v15 = *v9;
LABEL_15:
  ++*(_DWORD *)(a1 + 56);
  if (v15 != -4096)
    --*(_DWORD *)(a1 + 60);
  *v9 = a2;
  v9[1] = 0;
LABEL_18:
  v16 = v9[1];
  if (v16)
  {
    ++*(_DWORD *)(v16 + 20);
    return;
  }
  if (*(_UNKNOWN **)(v60 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
  {
    Values = *(mlir::Dialect **)(v60 + 24);
    if (Values)
      goto LABEL_22;
LABEL_25:
    DialectNamespace = mlir::OperationName::getDialectNamespace((mlir::OperationName *)&v60);
    mlir::bytecode::detail::IRNumberingState::numberDialect(a1, DialectNamespace, v21);
    v18 = v22;
    *(_QWORD *)(a1 + 624) += 24;
    v19 = *(_QWORD *)(a1 + 544);
    if (!v19)
      goto LABEL_28;
    goto LABEL_26;
  }
  v61 = *(_QWORD *)(v60 + 8);
  Values = (mlir::Dialect *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v61);
  if (!Values)
    goto LABEL_25;
LABEL_22:
  v18 = mlir::bytecode::detail::IRNumberingState::numberDialect((mlir::bytecode::detail::IRNumberingState *)a1, Values);
  *(_QWORD *)(a1 + 624) += 24;
  v19 = *(_QWORD *)(a1 + 544);
  if (!v19)
    goto LABEL_28;
LABEL_26:
  if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8) - v19 + 24 <= *(_QWORD *)(a1 + 552) - v19)
  {
    v23 = (_QWORD *)((v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_33;
  }
LABEL_28:
  v24 = *(_DWORD *)(a1 + 568) >> 7;
  if (v24 >= 0x1E)
    LOBYTE(v24) = 30;
  v25 = 4096 << v24;
  buffer = (char *)llvm::allocate_buffer(4096 << v24, (std::align_val_t)8uLL);
  v27 = *(unsigned int *)(a1 + 568);
  if (v27 >= *(_DWORD *)(a1 + 572))
  {
    v55 = buffer;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 560, (void *)(a1 + 576), v27 + 1, 8);
    buffer = v55;
    LODWORD(v27) = *(_DWORD *)(a1 + 568);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v27) = buffer;
  ++*(_DWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 552) = &buffer[v25];
  v23 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
LABEL_33:
  *(_QWORD *)(a1 + 544) = v23 + 3;
  v28 = v60;
  *v23 = v18;
  v23[1] = v28;
  v23[2] = 0x100000000;
  v9[1] = v23;
  v30 = *(char **)(a1 + 192);
  v29 = *(_QWORD *)(a1 + 200);
  if ((unint64_t)v30 >= v29)
  {
    v32 = *(char **)(a1 + 184);
    v33 = (v30 - v32) >> 3;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61)
      abort();
    v35 = v29 - (_QWORD)v32;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v37 = (char *)operator new(8 * v36);
      v38 = &v37[8 * v33];
      v39 = &v37[8 * v36];
      *(_QWORD *)v38 = v9[1];
      v31 = (uint64_t)(v38 + 8);
      v40 = (char *)(v30 - v32);
      if (v30 == v32)
        goto LABEL_53;
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v33);
      v39 = 0;
      *(_QWORD *)(8 * v33) = v23;
      v31 = 8 * v33 + 8;
      v40 = (char *)(v30 - v32);
      if (v30 == v32)
      {
LABEL_53:
        *(_QWORD *)(a1 + 184) = v38;
        *(_QWORD *)(a1 + 192) = v31;
        *(_QWORD *)(a1 + 200) = v39;
        if (v30)
          operator delete(v30);
        goto LABEL_55;
      }
    }
    v41 = (unint64_t)(v40 - 8);
    if (v41 < 0x58)
      goto LABEL_78;
    if ((unint64_t)(v32 - v37) < 0x20)
      goto LABEL_78;
    v42 = (v41 >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v44 = &v30[-v43];
    v38 -= v43;
    v45 = &v37[8 * v33 - 16];
    v46 = v30 - 16;
    v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *(_OWORD *)v46;
      *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
      *(_OWORD *)v45 = v48;
      v45 -= 32;
      v46 -= 32;
      v47 -= 4;
    }
    while (v47);
    v30 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_78:
      do
      {
        v49 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *((_QWORD *)v38 - 1) = v49;
        v38 -= 8;
      }
      while (v30 != v32);
    }
    v30 = *(char **)(a1 + 184);
    goto LABEL_53;
  }
  *(_QWORD *)v30 = v23;
  v31 = (uint64_t)(v30 + 8);
LABEL_55:
  *(_QWORD *)(a1 + 192) = v31;
}

uint64_t llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  char *v23;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & v5;
    v7 = (_QWORD *)(*(_QWORD *)a1 + 24 * v6);
    v8 = *v7;
    if (*a2 == *v7)
      return 0;
    v16 = 0;
    v17 = 1;
    while (v8 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v8 == -8192;
      if (v18)
        v16 = v7;
      v19 = v6 + v17++;
      v6 = v19 & v5;
      v7 = (_QWORD *)(*(_QWORD *)a1 + 24 * v6);
      v8 = *v7;
      if (*a2 == *v7)
        return 0;
    }
    if (v16)
      v10 = v16;
    else
      v10 = v7;
  }
  else
  {
    v10 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>,mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::InsertIntoBucket<mlir::AsmDialectResourceHandle const&,llvm::detail::DenseSetEmpty&>(a1, v10, v2);
  v11 = a1 + 24;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(unsigned int *)(a1 + 32);
  if (v13 >= *(_DWORD *)(a1 + 36))
  {
    v20 = v13 + 1;
    v21 = v12 + 24 * v13;
    if (v12 <= (unint64_t)v2 && v21 > (unint64_t)v2)
    {
      v23 = (char *)v2 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v20, 24);
      v12 = *(_QWORD *)(a1 + 24);
      v2 = (uint64_t *)&v23[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v20, 24);
      v12 = *(_QWORD *)(a1 + 24);
    }
  }
  v14 = v12 + 24 * *(unsigned int *)(a1 + 32);
  v15 = *(_OWORD *)v2;
  *(_QWORD *)(v14 + 16) = v2[2];
  *(_OWORD *)v14 = v15;
  ++*(_DWORD *)(a1 + 32);
  return 1;
}

void mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::writeAttribute(uint64_t a1, uint64_t **a2)
{
  mlir::bytecode::detail::IRNumberingState::number(*(_QWORD *)(a1 + 8), a2);
}

void mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::writeOptionalAttribute(uint64_t a1, uint64_t **a2)
{
  if (a2)
    mlir::bytecode::detail::IRNumberingState::number(*(_QWORD *)(a1 + 8), a2);
}

void mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::writeType(uint64_t a1, uint64_t **a2)
{
  mlir::bytecode::detail::IRNumberingState::number(*(_QWORD *)(a1 + 8), a2);
}

uint64_t mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::writeResourceHandle(uint64_t a1, uint64_t a2)
{
  return mlir::bytecode::detail::IRNumberingState::number(*(_QWORD *)(a1 + 8), *(mlir::Dialect **)(a2 + 16), (uint64_t *)a2, 1);
}

uint64_t mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::getBytecodeVersion(mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter *this)
{
  return mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*(mlir::BytecodeWriterConfig **)(*((_QWORD *)this + 1)
                                                                                              + 936));
}

uint64_t mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::getDialectVersion(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v4;
  int Key;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)v4, a2, a3);
  if (Key == -1)
    v6 = *(unsigned int *)(v4 + 8);
  else
    v6 = Key;
  v7 = *(_QWORD *)v4 + 8 * v6;
  if (v7 == **(_QWORD **)(a1 + 16) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 8))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)v7 + 8);
}

void `anonymous namespace'::NumberingResourceBuilder::~NumberingResourceBuilder(_anonymous_namespace_::NumberingResourceBuilder *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::NumberingResourceBuilder::buildBool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;

  v12[0] = a2;
  v12[1] = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v13 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v4 + 80), (uint64_t)v12, &v13);
  v6 = *(_QWORD *)(v4 + 104);
  v7 = (unsigned int *)(v13 + 16);
  if ((result & (v13 != *(_QWORD *)(v4 + 80) + 24 * *(unsigned int *)(v4 + 96))) == 0)
    v7 = (unsigned int *)(v4 + 112);
  v8 = *v7;
  if (v6 + 24 * v8 != *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104)
                       + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 112))
  {
    v9 = *(_DWORD **)(a1 + 16);
    v10 = (*v9)++;
    v11 = *(_QWORD *)(v6 + 24 * v8 + 16);
    *(_DWORD *)(v11 + 24) = v10;
    *(_BYTE *)(v11 + 28) = 0;
  }
  return result;
}

uint64_t `anonymous namespace'::NumberingResourceBuilder::buildString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;

  v12[0] = a2;
  v12[1] = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v13 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v4 + 80), (uint64_t)v12, &v13);
  v6 = *(_QWORD *)(v4 + 104);
  v7 = (unsigned int *)(v13 + 16);
  if ((result & (v13 != *(_QWORD *)(v4 + 80) + 24 * *(unsigned int *)(v4 + 96))) == 0)
    v7 = (unsigned int *)(v4 + 112);
  v8 = *v7;
  if (v6 + 24 * v8 != *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104)
                       + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 112))
  {
    v9 = *(_DWORD **)(a1 + 16);
    v10 = (*v9)++;
    v11 = *(_QWORD *)(v6 + 24 * v8 + 16);
    *(_DWORD *)(v11 + 24) = v10;
    *(_BYTE *)(v11 + 28) = 0;
  }
  return result;
}

uint64_t `anonymous namespace'::NumberingResourceBuilder::buildBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;

  v12[0] = a2;
  v12[1] = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v13 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v4 + 80), (uint64_t)v12, &v13);
  v6 = *(_QWORD *)(v4 + 104);
  v7 = (unsigned int *)(v13 + 16);
  if ((result & (v13 != *(_QWORD *)(v4 + 80) + 24 * *(unsigned int *)(v4 + 96))) == 0)
    v7 = (unsigned int *)(v4 + 112);
  v8 = *v7;
  if (v6 + 24 * v8 != *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104)
                       + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 112))
  {
    v9 = *(_DWORD **)(a1 + 16);
    v10 = (*v9)++;
    v11 = *(_QWORD *)(v6 + 24 * v8 + 16);
    *(_DWORD *)(v11 + 24) = v10;
    *(_BYTE *)(v11 + 28) = 0;
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  __n128 result;
  char *v24;
  char *v25;
  char *v26;
  __n128 *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  __n128 *v40;
  char v41;
  char *v42;
  uint64_t v43;
  __n128 *v44;
  __n128 v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  __n128 *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 *v55;
  __n128 v56;

  if (a3 >= 2)
  {
    v6 = (__n128 *)a1;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)a1;
      if (*(_DWORD *)(v7 + 12) > *(_DWORD *)(*(_QWORD *)a1 + 12))
      {
        *(_QWORD *)a1 = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
      return result;
    }
    if ((uint64_t)a3 > 128)
    {
      v20 = a3 >> 1;
      v21 = &a1[8 * (a3 >> 1)];
      v22 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(a1, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(&v6->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(v6, (__n128 *)((char *)v6 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5).n128_u64[0];
        return result;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(a1, v21, v22, a4);
      v24 = &a4[8 * v20];
      result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(&v6->n128_i8[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24).n128_u64[0];
      v25 = v24;
      v26 = a4;
      v27 = v6;
      v28 = &a4[8 * a3];
      do
      {
        if (v25 == v28)
        {
          if (v26 == v24)
            return result;
          v47 = &a4[8 * v20] - v26 - 8;
          if (v47 >= 0x38 && (unint64_t)((char *)v6 - v26) >= 0x20)
          {
            v51 = 0;
            v52 = (v47 >> 3) + 1;
            v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            v48 = &v26[v53];
            v49 = (__n128 *)((char *)v27 + v53);
            v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v55 = &v27[v51];
              result = *(__n128 *)&v26[v51 * 16];
              v56 = *(__n128 *)&v26[v51 * 16 + 16];
              *v55 = result;
              v55[1] = v56;
              v51 += 2;
              v54 -= 4;
            }
            while (v54);
            if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v48 = v26;
            v49 = v27;
          }
          do
          {
            v50 = *(_QWORD *)v48;
            v48 += 8;
            v49->n128_u64[0] = v50;
            v49 = (__n128 *)((char *)v49 + 8);
          }
          while (v48 != v24);
          return result;
        }
        v29 = v25;
        v30 = *(_QWORD *)v25;
        v31 = *(_QWORD *)v26;
        v32 = *(_DWORD *)(v30 + 12);
        v33 = *(_DWORD *)(*(_QWORD *)v26 + 12);
        if (v32 > v33)
          v31 = v30;
        v26 += 8 * (v32 <= v33);
        v25 = &v29[8 * (v32 > v33)];
        v27->n128_u64[0] = v31;
        v27 = (__n128 *)((char *)v27 + 8);
        v6 = (__n128 *)((char *)v6 + 8);
      }
      while (v26 != v24);
      if (v25 != v28)
      {
        v34 = -8;
        if (v32 <= v33)
          v34 = 0;
        v35 = &a4[8 * a3] - v29 + v34 - 8;
        if (v35 < 0x78 || (unint64_t)((char *)v6 - &v29[8 * (v32 > v33)]) < 0x20)
          goto LABEL_48;
        v36 = 0;
        v37 = (v35 >> 3) + 1;
        v38 = v32 > v33;
        v39 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v25 += v39;
        v40 = (__n128 *)((char *)v27 + v39);
        v41 = v38 ? 1 : 2;
        v42 = &v29[8 * (v41 & 1)];
        v43 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = &v27[v36];
          result = *(__n128 *)&v42[v36 * 16];
          v45 = *(__n128 *)&v42[v36 * 16 + 16];
          *v44 = result;
          v44[1] = v45;
          v36 += 2;
          v43 -= 4;
        }
        while (v43);
        v27 = v40;
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v46 = *(_QWORD *)v25;
            v25 += 8;
            v27->n128_u64[0] = v46;
            v27 = (__n128 *)((char *)v27 + 8);
          }
          while (v25 != v28);
        }
      }
    }
    else if (a1 != a2)
    {
      v10 = a1 + 8;
      if (a1 + 8 != a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v14 = *(_QWORD *)v12;
          v12 = v10;
          v15 = *(_QWORD *)v10;
          v16 = *(_DWORD *)(v15 + 12);
          if (v16 > *(_DWORD *)(v14 + 12))
          {
            v17 = v11;
            do
            {
              *(_QWORD *)&a1[v17 + 8] = v14;
              if (!v17)
              {
                v13 = a1;
                goto LABEL_10;
              }
              v14 = *(_QWORD *)&a1[v17 - 8];
              v17 -= 8;
            }
            while (v16 > *(_DWORD *)(v14 + 12));
            v13 = &a1[v17 + 8];
LABEL_10:
            *(_QWORD *)v13 = v15;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 result;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;

  if (a3)
  {
    v4 = a4;
    v6 = a1;
    if (a3 == 1)
    {
LABEL_8:
      *(_QWORD *)v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *((_QWORD *)a2 - 1);
      v9 = *(_DWORD *)(v8 + 12);
      v10 = *(_DWORD *)(*(_QWORD *)a1 + 12);
      if (v9 <= v10)
        v8 = *(_QWORD *)a1;
      *(_QWORD *)a4 = v8;
      v4 = a4 + 8;
      if (v9 <= v10)
        v6 = a2 - 8;
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v21 = a3 >> 1;
      v22 = 8 * (a3 >> 1);
      v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(a1, &a1[v22], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(&v6[v22], a2, a3 - v21, &v4[v22], a3 - v21);
      v25 = v4;
      v26 = v6;
      v27 = &v6[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23)
            return result;
          v45 = &v6[8 * v21] - v26 - 8;
          if (v45 >= 0x38 && (unint64_t)(v25 - v26) >= 0x20)
          {
            v49 = 0;
            v50 = (v45 >> 3) + 1;
            v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            v46 = &v4[v51];
            v47 = &v26[v51];
            v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v53 = &v4[v49];
              result = *(__n128 *)&v26[v49];
              v54 = *(_OWORD *)&v26[v49 + 16];
              *(__n128 *)v53 = result;
              *((_OWORD *)v53 + 1) = v54;
              v49 += 32;
              v52 -= 4;
            }
            while (v52);
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v46 = v4;
            v47 = v26;
          }
          do
          {
            v48 = *(_QWORD *)v47;
            v47 += 8;
            *(_QWORD *)v46 = v48;
            v46 += 8;
          }
          while (v47 != v23);
          return result;
        }
        v28 = v27;
        v29 = *(_QWORD *)v27;
        v30 = *(_QWORD *)v26;
        v31 = *(_DWORD *)(v29 + 12);
        v32 = *(_DWORD *)(*(_QWORD *)v26 + 12);
        if (v31 > v32)
          v30 = v29;
        v27 = &v28[8 * (v31 > v32)];
        v26 += 8 * (v31 <= v32);
        *(_QWORD *)v4 = v30;
        v4 += 8;
        v25 += 8;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        v33 = -8;
        if (v31 <= v32)
          v33 = 0;
        v34 = a2 - v28 + v33 - 8;
        if (v34 < 0x68)
          goto LABEL_49;
        if ((unint64_t)(v25 - &v28[8 * (v31 > v32)]) < 0x20)
          goto LABEL_49;
        v35 = 0;
        v36 = (v34 >> 3) + 1;
        v37 = v31 > v32;
        v38 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = &v4[v38];
        v27 += v38;
        v40 = &v28[8 * v37];
        v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = &v4[v35];
          result = *(__n128 *)&v40[v35];
          v43 = *(_OWORD *)&v40[v35 + 16];
          *(__n128 *)v42 = result;
          *((_OWORD *)v42 + 1) = v43;
          v35 += 32;
          v41 -= 4;
        }
        while (v41);
        v4 = v39;
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_49:
          do
          {
            v44 = *(_QWORD *)v27;
            v27 += 8;
            *(_QWORD *)v4 = v44;
            v4 += 8;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 8;
      *(_QWORD *)a4 = *(_QWORD *)a1;
      if (a1 + 8 != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = (uint64_t *)a4;
        do
        {
          while (1)
          {
            v16 = *v14++;
            v15 = v16;
            if (*(_DWORD *)(*(_QWORD *)v11 + 12) > *(_DWORD *)(v16 + 12))
              break;
            *v14 = *(_QWORD *)v11;
            v11 += 8;
            v12 += 8;
            v13 = (char *)v14;
            if (v11 == a2)
              return result;
          }
          *((_QWORD *)v13 + 1) = v15;
          v17 = a4;
          if (v13 != a4)
          {
            v18 = v12;
            while (1)
            {
              v17 = &a4[v18];
              v19 = *(_QWORD *)&a4[v18 - 8];
              if (*(_DWORD *)(*(_QWORD *)v11 + 12) <= *(_DWORD *)(v19 + 12))
                break;
              *(_QWORD *)v17 = v19;
              v18 -= 8;
              if (!v18)
              {
                v17 = a4;
                break;
              }
            }
          }
          v20 = *(_QWORD *)v11;
          v11 += 8;
          *(_QWORD *)v17 = v20;
          v12 += 8;
          v13 = (char *)v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(__n128 *a1, __n128 *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  __n128 *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  __n128 *v39;
  unint64_t v40;
  __n128 *v41;
  size_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  unint64_t v51;
  unint64_t v52;
  __n128 *v53;
  __n128 *v54;
  __n128 *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  char *v61;
  char *v62;
  __n128 result;
  __n128 *v64;
  __n128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  __n128 *v74;
  uint64_t v75;
  uint64_t v76;
  __n128 *v77;
  __n128 *v78;
  uint64_t v79;
  __n128 v80;
  unint64_t v81;
  char *v82;
  __n128 *v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  __n128 *v87;
  uint64_t v88;
  __n128 v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  char v94;
  _BOOL4 v95;
  unsigned int v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;

  if (!a5)
    return result;
  v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4)
      return result;
    v13 = 0;
    v14 = -a4;
    while (1)
    {
      v15 = a1->n128_i64[v13 / 8];
      if (*(_DWORD *)(a2->n128_u64[0] + 12) > *(_DWORD *)(v15 + 12))
        break;
      v13 += 8;
      if (__CFADD__(v14++, 1))
        return result;
    }
    v17 = (__n128 *)((char *)a1 + v13);
    if (-v14 >= v8)
    {
      if (v14 == -1)
      {
        a1->n128_u64[v13 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v15;
        return result;
      }
      if (v14 <= 0)
        v35 = -v14;
      else
        v35 = 1 - v14;
      v27 = v35 >> 1;
      v21 = (__n128 *)((char *)a1 + 8 * (v35 >> 1) + v13);
      v20 = a2;
      if (a2 != (__n128 *)a3)
      {
        v36 = (a3 - (char *)a2) >> 3;
        v20 = a2;
        do
        {
          v37 = v36 >> 1;
          v38 = &v20->n128_u64[v36 >> 1];
          v40 = *v38;
          v39 = (__n128 *)(v38 + 1);
          v36 += ~(v36 >> 1);
          if (*(_DWORD *)(v40 + 12) > *(_DWORD *)(v21->n128_u64[0] + 12))
            v20 = v39;
          else
            v36 = v37;
        }
        while (v36);
      }
      v19 = ((char *)v20 - (char *)a2) >> 3;
      if (v21 != a2)
      {
LABEL_22:
        v28 = (char *)v20 - (char *)a2;
        if (v20 == a2)
        {
          a2 = v21;
        }
        else
        {
          v29 = (__n128 *)&v21->n128_i8[8];
          v114 = v19;
          if (&v21->n128_i8[8] == (__int8 *)a2)
          {
            v110 = v21->n128_u64[0];
            v112 = a6;
            v41 = a2;
            v42 = (char *)v20 - (char *)a2;
            v43 = a3;
            v44 = v27;
            memmove(v21, v41, v42);
            v17 = (__n128 *)((char *)a1 + v13);
            v19 = v114;
            v27 = v44;
            a3 = v43;
            a6 = v112;
            a2 = (__n128 *)((char *)v21 + v28);
            *(unint64_t *)((char *)v21->n128_u64 + v28) = v110;
          }
          else
          {
            v30 = v27;
            v31 = (__n128 *)&a2->n128_i8[8];
            if (&a2->n128_i8[8] == (__int8 *)v20)
            {
              v45 = v20[-1].n128_i64[1];
              a2 = (__n128 *)&v21->n128_i8[8];
              if (&v20[-1].n128_i8[8] != (__int8 *)v21)
              {
                v113 = a6;
                v46 = a3;
                v111 = v20[-1].n128_i64[1];
                memmove(&v21->n128_i8[8], v21, &v20[-1].n128_i8[8] - (__int8 *)v21);
                v45 = v111;
                a6 = v113;
                v17 = (__n128 *)((char *)a1 + v13);
                a3 = v46;
              }
              v21->n128_u64[0] = v45;
              v27 = v30;
              v19 = v114;
            }
            else
            {
              v32 = ((char *)a2 - (char *)v21) >> 3;
              if (v32 == v28 >> 3)
              {
                do
                {
                  v33 = v29[-1].n128_i64[1];
                  v29[-1].n128_u64[1] = v31[-1].n128_u64[1];
                  v31[-1].n128_u64[1] = v33;
                  if (v29 == a2)
                    break;
                  v29 = (__n128 *)((char *)v29 + 8);
                  v34 = v31 == v20;
                  v31 = (__n128 *)((char *)v31 + 8);
                }
                while (!v34);
              }
              else
              {
                v47 = v28 >> 3;
                v48 = ((char *)a2 - (char *)v21) >> 3;
                do
                {
                  v49 = v48;
                  v48 = v47;
                  v47 = v49 % v47;
                }
                while (v47);
                if (v48)
                {
                  v50 = (__n128 *)((char *)v21 + 8 * v48);
                  do
                  {
                    v52 = v50[-1].n128_u64[1];
                    v50 = (__n128 *)((char *)v50 - 8);
                    v51 = v52;
                    v53 = (__n128 *)((char *)v50 + 8 * v32);
                    v54 = v50;
                    do
                    {
                      v55 = v53;
                      v54->n128_u64[0] = v53->n128_u64[0];
                      v56 = ((char *)v20 - (char *)v53) >> 3;
                      v57 = __OFSUB__(v32, v56);
                      v58 = v32 - v56;
                      v94 = (v58 < 0) ^ v57;
                      v53 = (__n128 *)((char *)v21 + 8 * v58);
                      if (v94)
                        v53 = (__n128 *)((char *)v55 + 8 * v32);
                      v54 = v55;
                    }
                    while (v53 != v50);
                    v55->n128_u64[0] = v51;
                  }
                  while (v50 != v21);
                }
                a2 = (__n128 *)((char *)v21 + 8 * (v28 >> 3));
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v8 >= 0)
        v18 = v8;
      else
        v18 = v8 + 1;
      v19 = v18 >> 1;
      v20 = (__n128 *)((char *)a2 + 8 * (v18 >> 1));
      v21 = a2;
      if ((char *)a2 - (char *)a1 != v13)
      {
        v22 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 3;
        v21 = (__n128 *)((char *)a1 + v13);
        do
        {
          v23 = v22 >> 1;
          v24 = &v21->n128_i64[v22 >> 1];
          v26 = *v24;
          v25 = (__n128 *)(v24 + 1);
          v22 += ~(v22 >> 1);
          if (*(_DWORD *)(v20->n128_u64[0] + 12) > *(_DWORD *)(v26 + 12))
            v22 = v23;
          else
            v21 = v25;
        }
        while (v22);
      }
      v27 = (uint64_t)((char *)v21 - (char *)a1 - v13) >> 3;
      if (v21 != a2)
        goto LABEL_22;
    }
    a2 = v20;
LABEL_57:
    a4 = -(v27 + v14);
    v59 = v8 - v19;
    if (v27 + v19 >= v8 - (v27 + v19) - v14)
    {
      v64 = a2;
      v65 = v20;
      v66 = v27;
      v67 = v19;
      v68 = v8 - v19;
      v69 = a6;
      a1 = v17;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(a2, v65, a3, -(v27 + v14), v68, a6, a7);
      a6 = v69;
      a2 = v21;
      v70 = v67;
      a4 = v66;
      a3 = (char *)v64;
      v8 = v70;
      if (!v70)
        return result;
    }
    else
    {
      v60 = &a1->n128_u64[v13 / 8];
      v61 = a6;
      v62 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(v60, v21, a2, v27, v19, a6, a7);
      a3 = v62;
      a6 = v61;
      a1 = a2;
      a2 = v20;
      v8 = v59;
      if (!v59)
        return result;
    }
  }
  if (a4 <= v8)
  {
    if (a1 != a2)
    {
      v81 = (char *)a2 - (char *)a1 - 8;
      v82 = a6;
      v83 = a1;
      if (v81 < 0x18)
        goto LABEL_109;
      v82 = a6;
      v83 = a1;
      if ((unint64_t)(a6 - (char *)a1) < 0x20)
        goto LABEL_109;
      v84 = (v81 >> 3) + 1;
      v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
      v82 = &a6[v85];
      v83 = (__n128 *)((char *)a1 + v85);
      v86 = a1 + 1;
      v87 = (__n128 *)(a6 + 16);
      v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v86[-1];
        v89 = *v86;
        v87[-1] = result;
        *v87 = v89;
        v86 += 2;
        v87 += 2;
        v88 -= 4;
      }
      while (v88);
      if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_109:
        do
        {
          v90 = v83->n128_u64[0];
          v83 = (__n128 *)((char *)v83 + 8);
          *(_QWORD *)v82 = v90;
          v82 += 8;
        }
        while (v83 != a2);
      }
      if (v82 != a6)
      {
        while (a2 != (__n128 *)a3)
        {
          v91 = a2->n128_u64[0];
          v92 = *(_DWORD *)(a2->n128_u64[0] + 12);
          v93 = *(_DWORD *)(*(_QWORD *)a6 + 12);
          v94 = v92 > v93;
          v95 = v92 <= v93;
          if (v94)
            v96 = 1;
          else
            v96 = 0;
          if (!v94)
            v91 = *(_QWORD *)a6;
          a2 = (__n128 *)((char *)a2 + 8 * v96);
          a6 += 8 * v95;
          a1->n128_u64[0] = v91;
          a1 = (__n128 *)((char *)a1 + 8);
          if (a6 == v82)
            return result;
        }
        memmove(a1, a6, v82 - a6);
      }
    }
    return result;
  }
  v71 = a3 - (char *)a2;
  if (a3 == (char *)a2)
    return result;
  v72 = v71 - 8;
  if ((unint64_t)(v71 - 8) < 0x18)
  {
    v73 = a6;
    v74 = a2;
    do
    {
LABEL_89:
      v97 = v74->n128_u64[0];
      v74 = (__n128 *)((char *)v74 + 8);
      *(_QWORD *)v73 = v97;
      v73 += 8;
    }
    while (v74 != (__n128 *)a3);
    goto LABEL_90;
  }
  v73 = a6;
  v74 = a2;
  if ((unint64_t)(a6 - (char *)a2) < 0x20)
    goto LABEL_89;
  v75 = (v72 >> 3) + 1;
  v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
  v73 = &a6[v76];
  v74 = (__n128 *)((char *)a2 + v76);
  v77 = a2 + 1;
  v78 = (__n128 *)(a6 + 16);
  v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = v77[-1];
    v80 = *v77;
    v78[-1] = result;
    *v78 = v80;
    v77 += 2;
    v78 += 2;
    v79 -= 4;
  }
  while (v79);
  if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_89;
LABEL_90:
  if (v73 != a6)
  {
    v98 = a3;
    while (a2 != a1)
    {
      v99 = a2[-1].n128_i64[1];
      if (*(_DWORD *)(*((_QWORD *)v73 - 1) + 12) > *(_DWORD *)(v99 + 12))
      {
        a2 = (__n128 *)((char *)a2 - 8);
      }
      else
      {
        v99 = *((_QWORD *)v73 - 1);
        v73 -= 8;
      }
      *((_QWORD *)a3 - 1) = v99;
      a3 -= 8;
      v98 -= 8;
      if (v73 == a6)
        return result;
    }
    v100 = v73 - a6 - 8;
    if (v100 < 0x58 || (unint64_t)(v73 - v98) < 0x20)
    {
      v101 = v73;
      v102 = a3;
      goto LABEL_101;
    }
    v105 = 0;
    v106 = (v100 >> 3) + 1;
    v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
    v101 = &v73[-v107];
    v102 = &a3[-v107];
    v108 = v106 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = *(__n128 *)&v73[v105 - 16];
      v109 = &a3[v105];
      *((_OWORD *)v109 - 2) = *(_OWORD *)&v73[v105 - 32];
      *((__n128 *)v109 - 1) = result;
      v105 -= 32;
      v108 -= 4;
    }
    while (v108);
    if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_101:
      v103 = v102 - 8;
      do
      {
        v104 = *((_QWORD *)v101 - 1);
        v101 -= 8;
        *(_QWORD *)v103 = v104;
        v103 -= 8;
      }
      while (v101 != a6);
    }
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  __n128 result;
  char *v24;
  char *v25;
  char *v26;
  __n128 *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  __n128 *v40;
  char v41;
  char *v42;
  uint64_t v43;
  __n128 *v44;
  __n128 v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  __n128 *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 *v55;
  __n128 v56;

  if (a3 >= 2)
  {
    v6 = (__n128 *)a1;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)a1;
      if (*(_DWORD *)(v7 + 20) > *(_DWORD *)(*(_QWORD *)a1 + 20))
      {
        *(_QWORD *)a1 = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
      return result;
    }
    if ((uint64_t)a3 > 128)
    {
      v20 = a3 >> 1;
      v21 = &a1[8 * (a3 >> 1)];
      v22 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(a1, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(&v6->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(v6, (__n128 *)((char *)v6 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5).n128_u64[0];
        return result;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(a1, v21, v22, a4);
      v24 = &a4[8 * v20];
      result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(&v6->n128_i8[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24).n128_u64[0];
      v25 = v24;
      v26 = a4;
      v27 = v6;
      v28 = &a4[8 * a3];
      do
      {
        if (v25 == v28)
        {
          if (v26 == v24)
            return result;
          v47 = &a4[8 * v20] - v26 - 8;
          if (v47 >= 0x38 && (unint64_t)((char *)v6 - v26) >= 0x20)
          {
            v51 = 0;
            v52 = (v47 >> 3) + 1;
            v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            v48 = &v26[v53];
            v49 = (__n128 *)((char *)v27 + v53);
            v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v55 = &v27[v51];
              result = *(__n128 *)&v26[v51 * 16];
              v56 = *(__n128 *)&v26[v51 * 16 + 16];
              *v55 = result;
              v55[1] = v56;
              v51 += 2;
              v54 -= 4;
            }
            while (v54);
            if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v48 = v26;
            v49 = v27;
          }
          do
          {
            v50 = *(_QWORD *)v48;
            v48 += 8;
            v49->n128_u64[0] = v50;
            v49 = (__n128 *)((char *)v49 + 8);
          }
          while (v48 != v24);
          return result;
        }
        v29 = v25;
        v30 = *(_QWORD *)v25;
        v31 = *(_QWORD *)v26;
        v32 = *(_DWORD *)(v30 + 20);
        v33 = *(_DWORD *)(*(_QWORD *)v26 + 20);
        if (v32 > v33)
          v31 = v30;
        v26 += 8 * (v32 <= v33);
        v25 = &v29[8 * (v32 > v33)];
        v27->n128_u64[0] = v31;
        v27 = (__n128 *)((char *)v27 + 8);
        v6 = (__n128 *)((char *)v6 + 8);
      }
      while (v26 != v24);
      if (v25 != v28)
      {
        v34 = -8;
        if (v32 <= v33)
          v34 = 0;
        v35 = &a4[8 * a3] - v29 + v34 - 8;
        if (v35 < 0x78 || (unint64_t)((char *)v6 - &v29[8 * (v32 > v33)]) < 0x20)
          goto LABEL_48;
        v36 = 0;
        v37 = (v35 >> 3) + 1;
        v38 = v32 > v33;
        v39 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v25 += v39;
        v40 = (__n128 *)((char *)v27 + v39);
        v41 = v38 ? 1 : 2;
        v42 = &v29[8 * (v41 & 1)];
        v43 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = &v27[v36];
          result = *(__n128 *)&v42[v36 * 16];
          v45 = *(__n128 *)&v42[v36 * 16 + 16];
          *v44 = result;
          v44[1] = v45;
          v36 += 2;
          v43 -= 4;
        }
        while (v43);
        v27 = v40;
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v46 = *(_QWORD *)v25;
            v25 += 8;
            v27->n128_u64[0] = v46;
            v27 = (__n128 *)((char *)v27 + 8);
          }
          while (v25 != v28);
        }
      }
    }
    else if (a1 != a2)
    {
      v10 = a1 + 8;
      if (a1 + 8 != a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v14 = *(_QWORD *)v12;
          v12 = v10;
          v15 = *(_QWORD *)v10;
          v16 = *(_DWORD *)(v15 + 20);
          if (v16 > *(_DWORD *)(v14 + 20))
          {
            v17 = v11;
            do
            {
              *(_QWORD *)&a1[v17 + 8] = v14;
              if (!v17)
              {
                v13 = a1;
                goto LABEL_10;
              }
              v14 = *(_QWORD *)&a1[v17 - 8];
              v17 -= 8;
            }
            while (v16 > *(_DWORD *)(v14 + 20));
            v13 = &a1[v17 + 8];
LABEL_10:
            *(_QWORD *)v13 = v15;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 result;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;

  if (a3)
  {
    v4 = a4;
    v6 = a1;
    if (a3 == 1)
    {
LABEL_8:
      *(_QWORD *)v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *((_QWORD *)a2 - 1);
      v9 = *(_DWORD *)(v8 + 20);
      v10 = *(_DWORD *)(*(_QWORD *)a1 + 20);
      if (v9 <= v10)
        v8 = *(_QWORD *)a1;
      *(_QWORD *)a4 = v8;
      v4 = a4 + 8;
      if (v9 <= v10)
        v6 = a2 - 8;
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v21 = a3 >> 1;
      v22 = 8 * (a3 >> 1);
      v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(a1, &a1[v22], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(&v6[v22], a2, a3 - v21, &v4[v22], a3 - v21);
      v25 = v4;
      v26 = v6;
      v27 = &v6[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23)
            return result;
          v45 = &v6[8 * v21] - v26 - 8;
          if (v45 >= 0x38 && (unint64_t)(v25 - v26) >= 0x20)
          {
            v49 = 0;
            v50 = (v45 >> 3) + 1;
            v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            v46 = &v4[v51];
            v47 = &v26[v51];
            v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v53 = &v4[v49];
              result = *(__n128 *)&v26[v49];
              v54 = *(_OWORD *)&v26[v49 + 16];
              *(__n128 *)v53 = result;
              *((_OWORD *)v53 + 1) = v54;
              v49 += 32;
              v52 -= 4;
            }
            while (v52);
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v46 = v4;
            v47 = v26;
          }
          do
          {
            v48 = *(_QWORD *)v47;
            v47 += 8;
            *(_QWORD *)v46 = v48;
            v46 += 8;
          }
          while (v47 != v23);
          return result;
        }
        v28 = v27;
        v29 = *(_QWORD *)v27;
        v30 = *(_QWORD *)v26;
        v31 = *(_DWORD *)(v29 + 20);
        v32 = *(_DWORD *)(*(_QWORD *)v26 + 20);
        if (v31 > v32)
          v30 = v29;
        v27 = &v28[8 * (v31 > v32)];
        v26 += 8 * (v31 <= v32);
        *(_QWORD *)v4 = v30;
        v4 += 8;
        v25 += 8;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        v33 = -8;
        if (v31 <= v32)
          v33 = 0;
        v34 = a2 - v28 + v33 - 8;
        if (v34 < 0x68)
          goto LABEL_49;
        if ((unint64_t)(v25 - &v28[8 * (v31 > v32)]) < 0x20)
          goto LABEL_49;
        v35 = 0;
        v36 = (v34 >> 3) + 1;
        v37 = v31 > v32;
        v38 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = &v4[v38];
        v27 += v38;
        v40 = &v28[8 * v37];
        v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = &v4[v35];
          result = *(__n128 *)&v40[v35];
          v43 = *(_OWORD *)&v40[v35 + 16];
          *(__n128 *)v42 = result;
          *((_OWORD *)v42 + 1) = v43;
          v35 += 32;
          v41 -= 4;
        }
        while (v41);
        v4 = v39;
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_49:
          do
          {
            v44 = *(_QWORD *)v27;
            v27 += 8;
            *(_QWORD *)v4 = v44;
            v4 += 8;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 8;
      *(_QWORD *)a4 = *(_QWORD *)a1;
      if (a1 + 8 != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = (uint64_t *)a4;
        do
        {
          while (1)
          {
            v16 = *v14++;
            v15 = v16;
            if (*(_DWORD *)(*(_QWORD *)v11 + 20) > *(_DWORD *)(v16 + 20))
              break;
            *v14 = *(_QWORD *)v11;
            v11 += 8;
            v12 += 8;
            v13 = (char *)v14;
            if (v11 == a2)
              return result;
          }
          *((_QWORD *)v13 + 1) = v15;
          v17 = a4;
          if (v13 != a4)
          {
            v18 = v12;
            while (1)
            {
              v17 = &a4[v18];
              v19 = *(_QWORD *)&a4[v18 - 8];
              if (*(_DWORD *)(*(_QWORD *)v11 + 20) <= *(_DWORD *)(v19 + 20))
                break;
              *(_QWORD *)v17 = v19;
              v18 -= 8;
              if (!v18)
              {
                v17 = a4;
                break;
              }
            }
          }
          v20 = *(_QWORD *)v11;
          v11 += 8;
          *(_QWORD *)v17 = v20;
          v12 += 8;
          v13 = (char *)v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(__n128 *a1, __n128 *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  __n128 *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  __n128 *v39;
  unint64_t v40;
  __n128 *v41;
  size_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  unint64_t v51;
  unint64_t v52;
  __n128 *v53;
  __n128 *v54;
  __n128 *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  char *v61;
  char *v62;
  __n128 result;
  __n128 *v64;
  __n128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  __n128 *v74;
  uint64_t v75;
  uint64_t v76;
  __n128 *v77;
  __n128 *v78;
  uint64_t v79;
  __n128 v80;
  unint64_t v81;
  char *v82;
  __n128 *v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  __n128 *v87;
  uint64_t v88;
  __n128 v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  char v94;
  _BOOL4 v95;
  unsigned int v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;

  if (!a5)
    return result;
  v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4)
      return result;
    v13 = 0;
    v14 = -a4;
    while (1)
    {
      v15 = a1->n128_i64[v13 / 8];
      if (*(_DWORD *)(a2->n128_u64[0] + 20) > *(_DWORD *)(v15 + 20))
        break;
      v13 += 8;
      if (__CFADD__(v14++, 1))
        return result;
    }
    v17 = (__n128 *)((char *)a1 + v13);
    if (-v14 >= v8)
    {
      if (v14 == -1)
      {
        a1->n128_u64[v13 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v15;
        return result;
      }
      if (v14 <= 0)
        v35 = -v14;
      else
        v35 = 1 - v14;
      v27 = v35 >> 1;
      v21 = (__n128 *)((char *)a1 + 8 * (v35 >> 1) + v13);
      v20 = a2;
      if (a2 != (__n128 *)a3)
      {
        v36 = (a3 - (char *)a2) >> 3;
        v20 = a2;
        do
        {
          v37 = v36 >> 1;
          v38 = &v20->n128_u64[v36 >> 1];
          v40 = *v38;
          v39 = (__n128 *)(v38 + 1);
          v36 += ~(v36 >> 1);
          if (*(_DWORD *)(v40 + 20) > *(_DWORD *)(v21->n128_u64[0] + 20))
            v20 = v39;
          else
            v36 = v37;
        }
        while (v36);
      }
      v19 = ((char *)v20 - (char *)a2) >> 3;
      if (v21 != a2)
      {
LABEL_22:
        v28 = (char *)v20 - (char *)a2;
        if (v20 == a2)
        {
          a2 = v21;
        }
        else
        {
          v29 = (__n128 *)&v21->n128_i8[8];
          v114 = v19;
          if (&v21->n128_i8[8] == (__int8 *)a2)
          {
            v110 = v21->n128_u64[0];
            v112 = a6;
            v41 = a2;
            v42 = (char *)v20 - (char *)a2;
            v43 = a3;
            v44 = v27;
            memmove(v21, v41, v42);
            v17 = (__n128 *)((char *)a1 + v13);
            v19 = v114;
            v27 = v44;
            a3 = v43;
            a6 = v112;
            a2 = (__n128 *)((char *)v21 + v28);
            *(unint64_t *)((char *)v21->n128_u64 + v28) = v110;
          }
          else
          {
            v30 = v27;
            v31 = (__n128 *)&a2->n128_i8[8];
            if (&a2->n128_i8[8] == (__int8 *)v20)
            {
              v45 = v20[-1].n128_i64[1];
              a2 = (__n128 *)&v21->n128_i8[8];
              if (&v20[-1].n128_i8[8] != (__int8 *)v21)
              {
                v113 = a6;
                v46 = a3;
                v111 = v20[-1].n128_i64[1];
                memmove(&v21->n128_i8[8], v21, &v20[-1].n128_i8[8] - (__int8 *)v21);
                v45 = v111;
                a6 = v113;
                v17 = (__n128 *)((char *)a1 + v13);
                a3 = v46;
              }
              v21->n128_u64[0] = v45;
              v27 = v30;
              v19 = v114;
            }
            else
            {
              v32 = ((char *)a2 - (char *)v21) >> 3;
              if (v32 == v28 >> 3)
              {
                do
                {
                  v33 = v29[-1].n128_i64[1];
                  v29[-1].n128_u64[1] = v31[-1].n128_u64[1];
                  v31[-1].n128_u64[1] = v33;
                  if (v29 == a2)
                    break;
                  v29 = (__n128 *)((char *)v29 + 8);
                  v34 = v31 == v20;
                  v31 = (__n128 *)((char *)v31 + 8);
                }
                while (!v34);
              }
              else
              {
                v47 = v28 >> 3;
                v48 = ((char *)a2 - (char *)v21) >> 3;
                do
                {
                  v49 = v48;
                  v48 = v47;
                  v47 = v49 % v47;
                }
                while (v47);
                if (v48)
                {
                  v50 = (__n128 *)((char *)v21 + 8 * v48);
                  do
                  {
                    v52 = v50[-1].n128_u64[1];
                    v50 = (__n128 *)((char *)v50 - 8);
                    v51 = v52;
                    v53 = (__n128 *)((char *)v50 + 8 * v32);
                    v54 = v50;
                    do
                    {
                      v55 = v53;
                      v54->n128_u64[0] = v53->n128_u64[0];
                      v56 = ((char *)v20 - (char *)v53) >> 3;
                      v57 = __OFSUB__(v32, v56);
                      v58 = v32 - v56;
                      v94 = (v58 < 0) ^ v57;
                      v53 = (__n128 *)((char *)v21 + 8 * v58);
                      if (v94)
                        v53 = (__n128 *)((char *)v55 + 8 * v32);
                      v54 = v55;
                    }
                    while (v53 != v50);
                    v55->n128_u64[0] = v51;
                  }
                  while (v50 != v21);
                }
                a2 = (__n128 *)((char *)v21 + 8 * (v28 >> 3));
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v8 >= 0)
        v18 = v8;
      else
        v18 = v8 + 1;
      v19 = v18 >> 1;
      v20 = (__n128 *)((char *)a2 + 8 * (v18 >> 1));
      v21 = a2;
      if ((char *)a2 - (char *)a1 != v13)
      {
        v22 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 3;
        v21 = (__n128 *)((char *)a1 + v13);
        do
        {
          v23 = v22 >> 1;
          v24 = &v21->n128_i64[v22 >> 1];
          v26 = *v24;
          v25 = (__n128 *)(v24 + 1);
          v22 += ~(v22 >> 1);
          if (*(_DWORD *)(v20->n128_u64[0] + 20) > *(_DWORD *)(v26 + 20))
            v22 = v23;
          else
            v21 = v25;
        }
        while (v22);
      }
      v27 = (uint64_t)((char *)v21 - (char *)a1 - v13) >> 3;
      if (v21 != a2)
        goto LABEL_22;
    }
    a2 = v20;
LABEL_57:
    a4 = -(v27 + v14);
    v59 = v8 - v19;
    if (v27 + v19 >= v8 - (v27 + v19) - v14)
    {
      v64 = a2;
      v65 = v20;
      v66 = v27;
      v67 = v19;
      v68 = v8 - v19;
      v69 = a6;
      a1 = v17;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(a2, v65, a3, -(v27 + v14), v68, a6, a7);
      a6 = v69;
      a2 = v21;
      v70 = v67;
      a4 = v66;
      a3 = (char *)v64;
      v8 = v70;
      if (!v70)
        return result;
    }
    else
    {
      v60 = &a1->n128_u64[v13 / 8];
      v61 = a6;
      v62 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(v60, v21, a2, v27, v19, a6, a7);
      a3 = v62;
      a6 = v61;
      a1 = a2;
      a2 = v20;
      v8 = v59;
      if (!v59)
        return result;
    }
  }
  if (a4 <= v8)
  {
    if (a1 != a2)
    {
      v81 = (char *)a2 - (char *)a1 - 8;
      v82 = a6;
      v83 = a1;
      if (v81 < 0x18)
        goto LABEL_109;
      v82 = a6;
      v83 = a1;
      if ((unint64_t)(a6 - (char *)a1) < 0x20)
        goto LABEL_109;
      v84 = (v81 >> 3) + 1;
      v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
      v82 = &a6[v85];
      v83 = (__n128 *)((char *)a1 + v85);
      v86 = a1 + 1;
      v87 = (__n128 *)(a6 + 16);
      v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v86[-1];
        v89 = *v86;
        v87[-1] = result;
        *v87 = v89;
        v86 += 2;
        v87 += 2;
        v88 -= 4;
      }
      while (v88);
      if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_109:
        do
        {
          v90 = v83->n128_u64[0];
          v83 = (__n128 *)((char *)v83 + 8);
          *(_QWORD *)v82 = v90;
          v82 += 8;
        }
        while (v83 != a2);
      }
      if (v82 != a6)
      {
        while (a2 != (__n128 *)a3)
        {
          v91 = a2->n128_u64[0];
          v92 = *(_DWORD *)(a2->n128_u64[0] + 20);
          v93 = *(_DWORD *)(*(_QWORD *)a6 + 20);
          v94 = v92 > v93;
          v95 = v92 <= v93;
          if (v94)
            v96 = 1;
          else
            v96 = 0;
          if (!v94)
            v91 = *(_QWORD *)a6;
          a2 = (__n128 *)((char *)a2 + 8 * v96);
          a6 += 8 * v95;
          a1->n128_u64[0] = v91;
          a1 = (__n128 *)((char *)a1 + 8);
          if (a6 == v82)
            return result;
        }
        memmove(a1, a6, v82 - a6);
      }
    }
    return result;
  }
  v71 = a3 - (char *)a2;
  if (a3 == (char *)a2)
    return result;
  v72 = v71 - 8;
  if ((unint64_t)(v71 - 8) < 0x18)
  {
    v73 = a6;
    v74 = a2;
    do
    {
LABEL_89:
      v97 = v74->n128_u64[0];
      v74 = (__n128 *)((char *)v74 + 8);
      *(_QWORD *)v73 = v97;
      v73 += 8;
    }
    while (v74 != (__n128 *)a3);
    goto LABEL_90;
  }
  v73 = a6;
  v74 = a2;
  if ((unint64_t)(a6 - (char *)a2) < 0x20)
    goto LABEL_89;
  v75 = (v72 >> 3) + 1;
  v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
  v73 = &a6[v76];
  v74 = (__n128 *)((char *)a2 + v76);
  v77 = a2 + 1;
  v78 = (__n128 *)(a6 + 16);
  v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = v77[-1];
    v80 = *v77;
    v78[-1] = result;
    *v78 = v80;
    v77 += 2;
    v78 += 2;
    v79 -= 4;
  }
  while (v79);
  if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_89;
LABEL_90:
  if (v73 != a6)
  {
    v98 = a3;
    while (a2 != a1)
    {
      v99 = a2[-1].n128_i64[1];
      if (*(_DWORD *)(*((_QWORD *)v73 - 1) + 20) > *(_DWORD *)(v99 + 20))
      {
        a2 = (__n128 *)((char *)a2 - 8);
      }
      else
      {
        v99 = *((_QWORD *)v73 - 1);
        v73 -= 8;
      }
      *((_QWORD *)a3 - 1) = v99;
      a3 -= 8;
      v98 -= 8;
      if (v73 == a6)
        return result;
    }
    v100 = v73 - a6 - 8;
    if (v100 < 0x58 || (unint64_t)(v73 - v98) < 0x20)
    {
      v101 = v73;
      v102 = a3;
      goto LABEL_101;
    }
    v105 = 0;
    v106 = (v100 >> 3) + 1;
    v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
    v101 = &v73[-v107];
    v102 = &a3[-v107];
    v108 = v106 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = *(__n128 *)&v73[v105 - 16];
      v109 = &a3[v105];
      *((_OWORD *)v109 - 2) = *(_OWORD *)&v73[v105 - 32];
      *((__n128 *)v109 - 1) = result;
      v105 -= 32;
      v108 -= 4;
    }
    while (v108);
    if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_101:
      v103 = v102 - 8;
      do
      {
        v104 = *((_QWORD *)v101 - 1);
        v101 -= 8;
        *(_QWORD *)v103 = v104;
        v103 -= 8;
      }
      while (v101 != a6);
    }
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  __n128 result;
  char *v24;
  char *v25;
  char *v26;
  __n128 *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  __n128 *v40;
  char v41;
  char *v42;
  uint64_t v43;
  __n128 *v44;
  __n128 v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  __n128 *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 *v55;
  __n128 v56;

  if (a3 >= 2)
  {
    v6 = (__n128 *)a1;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)a1;
      if (*(_DWORD *)(v7 + 12) > *(_DWORD *)(*(_QWORD *)a1 + 12))
      {
        *(_QWORD *)a1 = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
      return result;
    }
    if ((uint64_t)a3 > 128)
    {
      v20 = a3 >> 1;
      v21 = &a1[8 * (a3 >> 1)];
      v22 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(a1, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(&v6->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(v6, (__n128 *)((char *)v6 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5).n128_u64[0];
        return result;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(a1, v21, v22, a4);
      v24 = &a4[8 * v20];
      result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(&v6->n128_i8[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24).n128_u64[0];
      v25 = v24;
      v26 = a4;
      v27 = v6;
      v28 = &a4[8 * a3];
      do
      {
        if (v25 == v28)
        {
          if (v26 == v24)
            return result;
          v47 = &a4[8 * v20] - v26 - 8;
          if (v47 >= 0x38 && (unint64_t)((char *)v6 - v26) >= 0x20)
          {
            v51 = 0;
            v52 = (v47 >> 3) + 1;
            v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            v48 = &v26[v53];
            v49 = (__n128 *)((char *)v27 + v53);
            v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v55 = &v27[v51];
              result = *(__n128 *)&v26[v51 * 16];
              v56 = *(__n128 *)&v26[v51 * 16 + 16];
              *v55 = result;
              v55[1] = v56;
              v51 += 2;
              v54 -= 4;
            }
            while (v54);
            if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v48 = v26;
            v49 = v27;
          }
          do
          {
            v50 = *(_QWORD *)v48;
            v48 += 8;
            v49->n128_u64[0] = v50;
            v49 = (__n128 *)((char *)v49 + 8);
          }
          while (v48 != v24);
          return result;
        }
        v29 = v25;
        v30 = *(_QWORD *)v25;
        v31 = *(_QWORD *)v26;
        v32 = *(_DWORD *)(v30 + 12);
        v33 = *(_DWORD *)(*(_QWORD *)v26 + 12);
        if (v32 > v33)
          v31 = v30;
        v26 += 8 * (v32 <= v33);
        v25 = &v29[8 * (v32 > v33)];
        v27->n128_u64[0] = v31;
        v27 = (__n128 *)((char *)v27 + 8);
        v6 = (__n128 *)((char *)v6 + 8);
      }
      while (v26 != v24);
      if (v25 != v28)
      {
        v34 = -8;
        if (v32 <= v33)
          v34 = 0;
        v35 = &a4[8 * a3] - v29 + v34 - 8;
        if (v35 < 0x78 || (unint64_t)((char *)v6 - &v29[8 * (v32 > v33)]) < 0x20)
          goto LABEL_48;
        v36 = 0;
        v37 = (v35 >> 3) + 1;
        v38 = v32 > v33;
        v39 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v25 += v39;
        v40 = (__n128 *)((char *)v27 + v39);
        v41 = v38 ? 1 : 2;
        v42 = &v29[8 * (v41 & 1)];
        v43 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = &v27[v36];
          result = *(__n128 *)&v42[v36 * 16];
          v45 = *(__n128 *)&v42[v36 * 16 + 16];
          *v44 = result;
          v44[1] = v45;
          v36 += 2;
          v43 -= 4;
        }
        while (v43);
        v27 = v40;
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v46 = *(_QWORD *)v25;
            v25 += 8;
            v27->n128_u64[0] = v46;
            v27 = (__n128 *)((char *)v27 + 8);
          }
          while (v25 != v28);
        }
      }
    }
    else if (a1 != a2)
    {
      v10 = a1 + 8;
      if (a1 + 8 != a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v14 = *(_QWORD *)v12;
          v12 = v10;
          v15 = *(_QWORD *)v10;
          v16 = *(_DWORD *)(v15 + 12);
          if (v16 > *(_DWORD *)(v14 + 12))
          {
            v17 = v11;
            do
            {
              *(_QWORD *)&a1[v17 + 8] = v14;
              if (!v17)
              {
                v13 = a1;
                goto LABEL_10;
              }
              v14 = *(_QWORD *)&a1[v17 - 8];
              v17 -= 8;
            }
            while (v16 > *(_DWORD *)(v14 + 12));
            v13 = &a1[v17 + 8];
LABEL_10:
            *(_QWORD *)v13 = v15;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 result;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;

  if (a3)
  {
    v4 = a4;
    v6 = a1;
    if (a3 == 1)
    {
LABEL_8:
      *(_QWORD *)v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *((_QWORD *)a2 - 1);
      v9 = *(_DWORD *)(v8 + 12);
      v10 = *(_DWORD *)(*(_QWORD *)a1 + 12);
      if (v9 <= v10)
        v8 = *(_QWORD *)a1;
      *(_QWORD *)a4 = v8;
      v4 = a4 + 8;
      if (v9 <= v10)
        v6 = a2 - 8;
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v21 = a3 >> 1;
      v22 = 8 * (a3 >> 1);
      v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(a1, &a1[v22], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(&v6[v22], a2, a3 - v21, &v4[v22], a3 - v21);
      v25 = v4;
      v26 = v6;
      v27 = &v6[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23)
            return result;
          v45 = &v6[8 * v21] - v26 - 8;
          if (v45 >= 0x38 && (unint64_t)(v25 - v26) >= 0x20)
          {
            v49 = 0;
            v50 = (v45 >> 3) + 1;
            v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            v46 = &v4[v51];
            v47 = &v26[v51];
            v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v53 = &v4[v49];
              result = *(__n128 *)&v26[v49];
              v54 = *(_OWORD *)&v26[v49 + 16];
              *(__n128 *)v53 = result;
              *((_OWORD *)v53 + 1) = v54;
              v49 += 32;
              v52 -= 4;
            }
            while (v52);
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v46 = v4;
            v47 = v26;
          }
          do
          {
            v48 = *(_QWORD *)v47;
            v47 += 8;
            *(_QWORD *)v46 = v48;
            v46 += 8;
          }
          while (v47 != v23);
          return result;
        }
        v28 = v27;
        v29 = *(_QWORD *)v27;
        v30 = *(_QWORD *)v26;
        v31 = *(_DWORD *)(v29 + 12);
        v32 = *(_DWORD *)(*(_QWORD *)v26 + 12);
        if (v31 > v32)
          v30 = v29;
        v27 = &v28[8 * (v31 > v32)];
        v26 += 8 * (v31 <= v32);
        *(_QWORD *)v4 = v30;
        v4 += 8;
        v25 += 8;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        v33 = -8;
        if (v31 <= v32)
          v33 = 0;
        v34 = a2 - v28 + v33 - 8;
        if (v34 < 0x68)
          goto LABEL_49;
        if ((unint64_t)(v25 - &v28[8 * (v31 > v32)]) < 0x20)
          goto LABEL_49;
        v35 = 0;
        v36 = (v34 >> 3) + 1;
        v37 = v31 > v32;
        v38 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = &v4[v38];
        v27 += v38;
        v40 = &v28[8 * v37];
        v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = &v4[v35];
          result = *(__n128 *)&v40[v35];
          v43 = *(_OWORD *)&v40[v35 + 16];
          *(__n128 *)v42 = result;
          *((_OWORD *)v42 + 1) = v43;
          v35 += 32;
          v41 -= 4;
        }
        while (v41);
        v4 = v39;
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_49:
          do
          {
            v44 = *(_QWORD *)v27;
            v27 += 8;
            *(_QWORD *)v4 = v44;
            v4 += 8;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 8;
      *(_QWORD *)a4 = *(_QWORD *)a1;
      if (a1 + 8 != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = (uint64_t *)a4;
        do
        {
          while (1)
          {
            v16 = *v14++;
            v15 = v16;
            if (*(_DWORD *)(*(_QWORD *)v11 + 12) > *(_DWORD *)(v16 + 12))
              break;
            *v14 = *(_QWORD *)v11;
            v11 += 8;
            v12 += 8;
            v13 = (char *)v14;
            if (v11 == a2)
              return result;
          }
          *((_QWORD *)v13 + 1) = v15;
          v17 = a4;
          if (v13 != a4)
          {
            v18 = v12;
            while (1)
            {
              v17 = &a4[v18];
              v19 = *(_QWORD *)&a4[v18 - 8];
              if (*(_DWORD *)(*(_QWORD *)v11 + 12) <= *(_DWORD *)(v19 + 12))
                break;
              *(_QWORD *)v17 = v19;
              v18 -= 8;
              if (!v18)
              {
                v17 = a4;
                break;
              }
            }
          }
          v20 = *(_QWORD *)v11;
          v11 += 8;
          *(_QWORD *)v17 = v20;
          v12 += 8;
          v13 = (char *)v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

void _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;

  if (a4 < 2)
    return;
  v8 = a1;
  if (a4 == 2)
  {
    v9 = *((_QWORD *)a2 - 1);
    v10 = *(_QWORD *)a1;
    v11 = **(_DWORD **)(a3 + 8);
    v12 = *(_DWORD *)(*(_QWORD *)(v9 + 16) + 16);
    v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
    if (v12 == v11)
    {
      if (v13 == v11)
        return;
    }
    else if (v13 == v11 || v13 <= v12)
    {
      return;
    }
    *(_QWORD *)a1 = v9;
    *((_QWORD *)a2 - 1) = v10;
    return;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2)
      return;
    v15 = a1 + 8;
    if (a1 + 8 == a2)
      return;
    v16 = 0;
    v17 = a1;
LABEL_13:
    v19 = v17;
    v17 = v15;
    v20 = *((_QWORD *)v19 + 1);
    v21 = **(_DWORD **)(a3 + 8);
    v22 = *(_DWORD *)(*(_QWORD *)(v20 + 16) + 16);
    v23 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 16) + 16);
    if (v22 == v21)
    {
      if (v23 == v21)
        goto LABEL_12;
    }
    else if (v23 == v21 || v23 <= v22)
    {
      goto LABEL_12;
    }
    *((_QWORD *)v19 + 1) = *(_QWORD *)v19;
    v18 = a1;
    if (v19 == a1)
      goto LABEL_11;
    v25 = v16;
    while (1)
    {
      v26 = *(_QWORD *)&a1[v25 - 8];
      v27 = **(_DWORD **)(a3 + 8);
      v28 = *(_DWORD *)(*(_QWORD *)(v20 + 16) + 16);
      v29 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
      if (v28 == v27)
      {
        if (v29 == v27)
        {
          v18 = &a1[v25];
LABEL_11:
          *(_QWORD *)v18 = v20;
LABEL_12:
          v15 = v17 + 8;
          v16 += 8;
          if (v17 + 8 == a2)
            return;
          goto LABEL_13;
        }
      }
      else if (v29 == v27 || v29 <= v28)
      {
        v18 = v19;
        goto LABEL_11;
      }
      v19 -= 8;
      *(_QWORD *)&a1[v25] = v26;
      v25 -= 8;
      if (!v25)
      {
        v18 = a1;
        goto LABEL_11;
      }
    }
  }
  v34 = a4 >> 1;
  v35 = &a1[8 * (a4 >> 1)];
  v36 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, v35, a3, v36, a5, a6);
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
    _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v8, &v8[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
    return;
  }
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(a1, v35, a3, v36, a5);
  v37 = &a5[8 * v34];
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v37);
  v38 = v8;
  v39 = v37;
  v40 = a5;
  v41 = &a5[8 * a4];
  do
  {
    while (1)
    {
      if (v39 == v41)
      {
        if (v40 == v37)
          return;
        v50 = &a5[8 * v34] - v40 - 8;
        if (v50 >= 0x38 && (unint64_t)(v38 - v40) >= 0x20)
        {
          v60 = 0;
          v61 = (v50 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v51 = &v8[v62];
          v52 = &v40[v62];
          v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v64 = &v8[v60];
            v65 = *(_OWORD *)&v40[v60 + 16];
            *(_OWORD *)v64 = *(_OWORD *)&v40[v60];
            *((_OWORD *)v64 + 1) = v65;
            v60 += 32;
            v63 -= 4;
          }
          while (v63);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            return;
        }
        else
        {
          v51 = v8;
          v52 = v40;
        }
        do
        {
          v53 = *(_QWORD *)v52;
          v52 += 8;
          *(_QWORD *)v51 = v53;
          v51 += 8;
        }
        while (v52 != v37);
        return;
      }
      v42 = **(_DWORD **)(a3 + 8);
      v43 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v39 + 16) + 16);
      v44 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v40 + 16) + 16);
      if (v43 != v42)
        break;
      if (v44 == v42)
        goto LABEL_51;
LABEL_42:
      *(_QWORD *)v8 = *(_QWORD *)v39;
      v8 += 8;
      v39 += 8;
      v38 += 8;
      if (v40 == v37)
        goto LABEL_52;
    }
    if (v44 != v42 && v44 > v43)
      goto LABEL_42;
LABEL_51:
    *(_QWORD *)v8 = *(_QWORD *)v40;
    v8 += 8;
    v40 += 8;
    v38 += 8;
  }
  while (v40 != v37);
LABEL_52:
  if (v39 == v41)
    return;
  v46 = &a5[8 * a4] - v39 - 8;
  if (v46 < 0x48 || (unint64_t)(v38 - v39) < 0x20)
  {
    v47 = v8;
    v48 = v39;
    do
    {
LABEL_56:
      v49 = *(_QWORD *)v48;
      v48 += 8;
      *(_QWORD *)v47 = v49;
      v47 += 8;
    }
    while (v48 != v41);
    return;
  }
  v54 = 0;
  v55 = (v46 >> 3) + 1;
  v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
  v47 = &v8[v56];
  v48 = &v39[v56];
  v57 = v55 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v58 = &v8[v54];
    v59 = *(_OWORD *)&v39[v54 + 16];
    *(_OWORD *)v58 = *(_OWORD *)&v39[v54];
    *((_OWORD *)v58 + 1) = v59;
    v54 += 32;
    v57 -= 4;
  }
  while (v57);
  if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_56;
}

__n128 _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5)
{
  char *v5;
  char *v7;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  __n128 result;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;

  if (!a4)
    return result;
  v5 = a5;
  v7 = a1;
  if (a4 == 1)
  {
LABEL_36:
    *(_QWORD *)v5 = *(_QWORD *)v7;
    return result;
  }
  if (a4 == 2)
  {
    v10 = *((_QWORD *)a2 - 1);
    v11 = **(_DWORD **)(a3 + 8);
    v12 = *(_DWORD *)(*(_QWORD *)(v10 + 16) + 16);
    v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
    if (v12 == v11)
    {
      if (v13 != v11)
        goto LABEL_35;
    }
    else if (v13 != v11 && v13 > v12)
    {
      goto LABEL_35;
    }
    v10 = *(_QWORD *)a1;
    v7 = a2 - 8;
LABEL_35:
    *(_QWORD *)a5 = v10;
    v5 = a5 + 8;
    goto LABEL_36;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2)
      return result;
    v14 = a1 + 8;
    *(_QWORD *)a5 = *(_QWORD *)a1;
    if (a1 + 8 == a2)
      return result;
    v15 = 0;
    v16 = a5;
    v17 = (uint64_t *)a5;
LABEL_13:
    while (2)
    {
      v21 = *v17++;
      v20 = v21;
      v22 = **(_DWORD **)(a3 + 8);
      v23 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 16) + 16);
      v24 = *(_DWORD *)(*(_QWORD *)(v21 + 16) + 16);
      if (v23 == v22)
      {
        if (v24 != v22)
        {
LABEL_15:
          *((_QWORD *)v16 + 1) = v20;
          v18 = a5;
          if (v16 == a5)
            goto LABEL_12;
          v25 = v15;
          while (1)
          {
            v26 = *(_QWORD *)&a5[v25 - 8];
            v27 = **(_DWORD **)(a3 + 8);
            v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 16) + 16);
            v29 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
            if (v28 == v27)
            {
              if (v29 == v27)
              {
                v18 = &a5[v25];
LABEL_12:
                v19 = *(_QWORD *)v14;
                v14 += 8;
                *(_QWORD *)v18 = v19;
                v15 += 8;
                v16 = (char *)v17;
                if (v14 == a2)
                  return result;
                goto LABEL_13;
              }
            }
            else if (v29 == v27 || v29 <= v28)
            {
              v18 = v16;
              goto LABEL_12;
            }
            v16 -= 8;
            *(_QWORD *)&a5[v25] = v26;
            v25 -= 8;
            if (!v25)
            {
              v18 = a5;
              goto LABEL_12;
            }
          }
        }
      }
      else if (v24 != v22 && v24 > v23)
      {
        goto LABEL_15;
      }
      *v17 = *(_QWORD *)v14;
      v14 += 8;
      v15 += 8;
      v16 = (char *)v17;
      if (v14 == a2)
        return result;
      continue;
    }
  }
  v32 = a4 >> 1;
  v33 = 8 * (a4 >> 1);
  v34 = &a1[v33];
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, &a1[v33], a3, a4 >> 1, a5, a4 >> 1);
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v7[v33], a2, a3, a4 - v32, &v5[v33], a4 - v32);
  v36 = v5;
  v37 = v7;
  v38 = &v7[v33];
  do
  {
    while (1)
    {
      if (v38 == a2)
      {
        if (v37 == v34)
          return result;
        v47 = &v7[8 * v32] - v37 - 8;
        if (v47 >= 0x38 && (unint64_t)(v36 - v37) >= 0x20)
        {
          v57 = 0;
          v58 = (v47 >> 3) + 1;
          v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          v48 = &v5[v59];
          v49 = &v37[v59];
          v60 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = &v5[v57];
            result = *(__n128 *)&v37[v57];
            v62 = *(_OWORD *)&v37[v57 + 16];
            *(__n128 *)v61 = result;
            *((_OWORD *)v61 + 1) = v62;
            v57 += 32;
            v60 -= 4;
          }
          while (v60);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v48 = v5;
          v49 = v37;
        }
        do
        {
          v50 = *(_QWORD *)v49;
          v49 += 8;
          *(_QWORD *)v48 = v50;
          v48 += 8;
        }
        while (v49 != v34);
        return result;
      }
      v39 = **(_DWORD **)(a3 + 8);
      v40 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v38 + 16) + 16);
      v41 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v37 + 16) + 16);
      if (v40 != v39)
        break;
      if (v41 == v39)
        goto LABEL_48;
LABEL_39:
      *(_QWORD *)v5 = *(_QWORD *)v38;
      v5 += 8;
      v38 += 8;
      v36 += 8;
      if (v37 == v34)
        goto LABEL_49;
    }
    if (v41 != v39 && v41 > v40)
      goto LABEL_39;
LABEL_48:
    *(_QWORD *)v5 = *(_QWORD *)v37;
    v5 += 8;
    v37 += 8;
    v36 += 8;
  }
  while (v37 != v34);
LABEL_49:
  if (v38 == a2)
    return result;
  v43 = a2 - v38 - 8;
  if (v43 < 0x48 || (unint64_t)(v36 - v38) < 0x20)
  {
    v44 = v5;
    v45 = v38;
    do
    {
LABEL_53:
      v46 = *(_QWORD *)v45;
      v45 += 8;
      *(_QWORD *)v44 = v46;
      v44 += 8;
    }
    while (v45 != a2);
    return result;
  }
  v51 = 0;
  v52 = (v43 >> 3) + 1;
  v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
  v44 = &v5[v53];
  v45 = &v38[v53];
  v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v55 = &v5[v51];
    result = *(__n128 *)&v38[v51];
    v56 = *(_OWORD *)&v38[v51 + 16];
    *(__n128 *)v55 = result;
    *((_OWORD *)v55 + 1) = v56;
    v51 += 32;
    v54 -= 4;
  }
  while (v54);
  if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_53;
  return result;
}

char *_ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unsigned int v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  _BOOL4 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  _OWORD *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  char *i;
  uint64_t v100;
  char *v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  _OWORD *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;

  if (!a6)
    return result;
  v8 = a6;
  while (2)
  {
    if (v8 <= a8 || a5 <= a8)
    {
      if (a5 > v8)
      {
        if (a2 == a3)
          return result;
        v89 = a3 - a2 - 8;
        v90 = a7;
        v91 = a2;
        if (v89 < 0x18)
          goto LABEL_145;
        v90 = a7;
        v91 = a2;
        if ((unint64_t)(a7 - a2) < 0x20)
          goto LABEL_145;
        v92 = (v89 >> 3) + 1;
        v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
        v90 = &a7[v93];
        v91 = &a2[v93];
        v94 = (__int128 *)(a2 + 16);
        v95 = a7 + 16;
        v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v97 = *v94;
          *(v95 - 1) = *(v94 - 1);
          *v95 = v97;
          v94 += 2;
          v95 += 2;
          v96 -= 4;
        }
        while (v96);
        if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_145:
          do
          {
            v98 = *(_QWORD *)v91;
            v91 += 8;
            *(_QWORD *)v90 = v98;
            v90 += 8;
          }
          while (v91 != a3);
        }
        if (v90 == a7)
          return result;
        for (i = a3; ; i -= 8)
        {
          if (a2 == result)
          {
            v120 = v90 - a7 - 8;
            if (v120 < 0x58 || (unint64_t)(v90 - i) < 0x20)
            {
              v121 = v90;
              v122 = a3;
              goto LABEL_136;
            }
            v125 = 0;
            v126 = (v120 >> 3) + 1;
            v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
            v121 = &v90[-v127];
            v122 = &a3[-v127];
            v128 = v126 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v129 = *(_OWORD *)&v90[v125 - 16];
              v130 = &a3[v125];
              *((_OWORD *)v130 - 2) = *(_OWORD *)&v90[v125 - 32];
              *((_OWORD *)v130 - 1) = v129;
              v125 -= 32;
              v128 -= 4;
            }
            while (v128);
            if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_136:
              v123 = v122 - 8;
              do
              {
                v124 = *((_QWORD *)v121 - 1);
                v121 -= 8;
                *(_QWORD *)v123 = v124;
                v123 -= 8;
              }
              while (v121 != a7);
            }
            return result;
          }
          v101 = a2 - 8;
          v100 = *((_QWORD *)a2 - 1);
          v102 = **(_DWORD **)(a4 + 8);
          v103 = *(_DWORD *)(*(_QWORD *)(v100 + 16) + 16);
          v104 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v90 - 1) + 16) + 16);
          if (v104 == v102)
          {
            if (v103 != v102)
              goto LABEL_101;
          }
          else if (v103 != v102 && v103 > v104)
          {
            goto LABEL_101;
          }
          v100 = *((_QWORD *)v90 - 1);
          v101 = a2;
          v90 -= 8;
LABEL_101:
          *((_QWORD *)a3 - 1) = v100;
          a3 -= 8;
          a2 = v101;
          if (v90 == a7)
            return result;
        }
      }
      if (result == a2)
        return result;
      v106 = a2 - result - 8;
      v107 = a7;
      v108 = result;
      if (v106 < 0x18)
        goto LABEL_146;
      v107 = a7;
      v108 = result;
      if ((unint64_t)(a7 - result) < 0x20)
        goto LABEL_146;
      v109 = (v106 >> 3) + 1;
      v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
      v107 = &a7[v110];
      v108 = &result[v110];
      v111 = (__int128 *)(result + 16);
      v112 = a7 + 16;
      v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v114 = *v111;
        *(v112 - 1) = *(v111 - 1);
        *v112 = v114;
        v111 += 2;
        v112 += 2;
        v113 -= 4;
      }
      while (v113);
      if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_146:
        do
        {
          v115 = *(_QWORD *)v108;
          v108 += 8;
          *(_QWORD *)v107 = v115;
          v107 += 8;
        }
        while (v108 != a2);
      }
      if (v107 == a7)
        return result;
      while (1)
      {
        while (1)
        {
          if (a2 == a3)
            return (char *)memmove(result, a7, v107 - a7);
          v116 = **(_DWORD **)(a4 + 8);
          v117 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 16);
          v118 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a7 + 16) + 16);
          if (v117 == v116)
            break;
          if (v118 == v116 || v118 <= v117)
            goto LABEL_130;
LABEL_121:
          *(_QWORD *)result = *(_QWORD *)a2;
          result += 8;
          a2 += 8;
          if (a7 == v107)
            return result;
        }
        if (v118 != v116)
          goto LABEL_121;
LABEL_130:
        *(_QWORD *)result = *(_QWORD *)a7;
        result += 8;
        a7 += 8;
        if (a7 == v107)
          return result;
      }
    }
    if (!a5)
      return result;
    v11 = 0;
    v12 = 0;
    v13 = **(_DWORD **)(a4 + 8);
    v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 16);
    while (1)
    {
      v16 = *(_QWORD *)&result[8 * v12];
      v17 = *(_DWORD *)(*(_QWORD *)(v16 + 16) + 16);
      if (v14 != v13)
        break;
      if (v17 != v13)
        goto LABEL_14;
LABEL_11:
      ++v12;
      v11 -= 8;
      if (a5 == v12)
        return result;
    }
    v15 = v17 != v13 && v17 > v14;
    if (!v15)
      goto LABEL_11;
LABEL_14:
    v18 = a5 - v12;
    v19 = &result[-v11];
    if (a5 - v12 >= v8)
    {
      if (a5 - 1 != v12)
      {
        if (v18 >= 0)
          v34 = a5 - v12;
        else
          v34 = v18 + 1;
        v35 = v34 >> 1;
        v36 = &result[8 * (v34 >> 1)];
        if (a3 == a2)
        {
          v22 = a3;
        }
        else
        {
          v37 = (a3 - a2) >> 3;
          v38 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v36[8 * v12] + 16) + 16);
          v22 = a2;
          if (v38 == v13)
          {
            do
            {
              v39 = v37 >> 1;
              v40 = (uint64_t *)&v22[8 * (v37 >> 1)];
              v42 = *v40;
              v41 = (char *)(v40 + 1);
              v43 = *(_DWORD *)(*(_QWORD *)(v42 + 16) + 16);
              v44 = v43 != v13 || v38 == v43;
              v37 += ~v39;
              if (v44)
                v37 = v39;
              else
                v22 = v41;
            }
            while (v37);
          }
          else
          {
            do
            {
              v45 = v37 >> 1;
              v46 = (uint64_t *)&v22[8 * (v37 >> 1)];
              v48 = *v46;
              v47 = (char *)(v46 + 1);
              v49 = *(_DWORD *)(*(_QWORD *)(v48 + 16) + 16);
              v51 = v49 == v13 || v38 > v49;
              v37 += ~v45;
              if (v51)
                v22 = v47;
              else
                v37 = v45;
            }
            while (v37);
          }
        }
        v25 = &v36[-v11];
        v21 = (v22 - a2) >> 3;
        v52 = v22;
        if (&v36[-v11] != a2)
          goto LABEL_60;
        goto LABEL_85;
      }
      *(_QWORD *)&result[8 * v12] = *(_QWORD *)a2;
      *(_QWORD *)a2 = v16;
    }
    else
    {
      if (v8 >= 0)
        v20 = v8;
      else
        v20 = v8 + 1;
      v21 = v20 >> 1;
      v22 = &a2[8 * (v20 >> 1)];
      if (v19 == a2)
      {
        v25 = a2;
      }
      else
      {
        v23 = (uint64_t)(a2 - result + v11) >> 3;
        v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 16) + 16);
        v25 = v19;
        if (v24 == v13)
        {
          do
          {
            v26 = v23 >> 1;
            v27 = (uint64_t *)&v25[8 * (v23 >> 1)];
            v29 = *v27;
            v28 = (char *)(v27 + 1);
            v23 += ~(v23 >> 1);
            if (*(_DWORD *)(*(_QWORD *)(v29 + 16) + 16) == v13)
              v25 = v28;
            else
              v23 = v26;
          }
          while (v23);
        }
        else
        {
          do
          {
            v30 = v23 >> 1;
            v31 = (uint64_t *)&v25[8 * (v23 >> 1)];
            v33 = *v31;
            v32 = (char *)(v31 + 1);
            v23 += ~(v23 >> 1);
            if (*(_DWORD *)(*(_QWORD *)(v33 + 16) + 16) != v13 && *(_DWORD *)(*(_QWORD *)(v33 + 16) + 16) > v24)
              v23 = v30;
            else
              v25 = v32;
          }
          while (v23);
        }
      }
      v35 = (v25 - v19) >> 3;
      v52 = v22;
      if (v25 == a2)
        goto LABEL_85;
LABEL_60:
      v52 = v25;
      if (a2 != v22)
      {
        if (v25 + 8 == a2)
        {
          v131 = *(_QWORD *)v25;
          v133 = v19;
          v60 = v22 - a2;
          v135 = a4;
          v137 = a7;
          v61 = a3;
          v62 = a8;
          memmove(v25, a2, v22 - a2);
          v19 = v133;
          a4 = v135;
          a8 = v62;
          a3 = v61;
          a7 = v137;
          v52 = &v25[v60];
          *(_QWORD *)v52 = v131;
        }
        else if (a2 + 8 == v22)
        {
          v63 = *((_QWORD *)v22 - 1);
          v52 = v25 + 8;
          if (v22 - 8 != v25)
          {
            v136 = a4;
            v138 = a7;
            v64 = a3;
            v65 = a8;
            v132 = *((_QWORD *)v22 - 1);
            v134 = v19;
            memmove(v25 + 8, v25, v22 - 8 - v25);
            v63 = v132;
            v19 = v134;
            a8 = v65;
            a4 = v136;
            a7 = v138;
            a3 = v64;
          }
          *(_QWORD *)v25 = v63;
        }
        else
        {
          v53 = (a2 - v25) >> 3;
          v54 = (v22 - a2) >> 3;
          if (v53 == v54)
          {
            v55 = 0;
            do
            {
              v56 = *(_QWORD *)&v25[v55];
              *(_QWORD *)&v25[v55] = *(_QWORD *)&a2[v55];
              v57 = (uint64_t)&v25[v55 + 8];
              *(_QWORD *)&a2[v55] = v56;
              v58 = (uint64_t)&a2[v55 + 8];
              v55 += 8;
            }
            while ((char *)v57 != a2 && v58 != (_QWORD)v22);
            v52 = a2;
          }
          else
          {
            v66 = (v22 - a2) >> 3;
            v67 = (a2 - v25) >> 3;
            do
            {
              v68 = v67;
              v67 = v66;
              v66 = v68 % v66;
            }
            while (v66);
            if (v67)
            {
              v69 = &v25[8 * v67];
              do
              {
                v71 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                v70 = v71;
                v72 = &v69[8 * v53];
                v73 = v69;
                do
                {
                  v74 = v73;
                  v73 = v72;
                  *(_QWORD *)v74 = *(_QWORD *)v72;
                  v75 = (v22 - v72) >> 3;
                  v76 = __OFSUB__(v53, v75);
                  v77 = v53 - v75;
                  v15 = (v77 < 0) ^ v76;
                  v72 = &v25[8 * v77];
                  if (v15)
                    v72 = &v73[8 * v53];
                }
                while (v72 != v69);
                *(_QWORD *)v73 = v70;
              }
              while (v69 != v25);
            }
            v52 = &v25[8 * v54];
          }
        }
      }
LABEL_85:
      v78 = a5 - v35 - v12;
      v79 = v8 - v21;
      if (v35 + v21 < v8 + a5 - (v35 + v21) - v12)
      {
        v80 = a3;
        v81 = a4;
        v82 = a7;
        v83 = a8;
        _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v19, v25, v52);
        a8 = v83;
        a4 = v81;
        a3 = v80;
        a7 = v82;
        result = v52;
        a5 = v78;
        v8 = v79;
        a2 = v22;
        if (!v79)
          return result;
        continue;
      }
      v84 = v22;
      v85 = a4;
      v86 = v19;
      v87 = a7;
      v88 = a8;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v52, v84, a3);
      result = v86;
      a8 = v88;
      a4 = v85;
      a7 = v87;
      a3 = v52;
      a5 = v35;
      v8 = v21;
      a2 = v25;
      if (v21)
        continue;
    }
    return result;
  }
}

void _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;

  if (a4 < 2)
    return;
  v8 = a1;
  if (a4 == 2)
  {
    v9 = *((_QWORD *)a2 - 1);
    v10 = *(_QWORD *)a1;
    v11 = **(_DWORD **)(a3 + 8);
    v12 = *(_DWORD *)(*(_QWORD *)v9 + 16);
    v13 = *(_DWORD *)(**(_QWORD **)a1 + 16);
    if (v12 == v11)
    {
      if (v13 == v11)
        return;
    }
    else if (v13 == v11 || v13 <= v12)
    {
      return;
    }
    *(_QWORD *)a1 = v9;
    *((_QWORD *)a2 - 1) = v10;
    return;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2)
      return;
    v15 = a1 + 8;
    if (a1 + 8 == a2)
      return;
    v16 = 0;
    v17 = a1;
LABEL_13:
    v19 = v17;
    v17 = v15;
    v20 = *((_QWORD *)v19 + 1);
    v21 = **(_DWORD **)(a3 + 8);
    v22 = *(_DWORD *)(*(_QWORD *)v20 + 16);
    v23 = *(_DWORD *)(**(_QWORD **)v19 + 16);
    if (v22 == v21)
    {
      if (v23 == v21)
        goto LABEL_12;
    }
    else if (v23 == v21 || v23 <= v22)
    {
      goto LABEL_12;
    }
    *((_QWORD *)v19 + 1) = *(_QWORD *)v19;
    v18 = a1;
    if (v19 == a1)
      goto LABEL_11;
    v25 = v16;
    while (1)
    {
      v26 = *(_QWORD *)&a1[v25 - 8];
      v27 = **(_DWORD **)(a3 + 8);
      v28 = *(_DWORD *)(*(_QWORD *)v20 + 16);
      v29 = *(_DWORD *)(*(_QWORD *)v26 + 16);
      if (v28 == v27)
      {
        if (v29 == v27)
        {
          v18 = &a1[v25];
LABEL_11:
          *(_QWORD *)v18 = v20;
LABEL_12:
          v15 = v17 + 8;
          v16 += 8;
          if (v17 + 8 == a2)
            return;
          goto LABEL_13;
        }
      }
      else if (v29 == v27 || v29 <= v28)
      {
        v18 = v19;
        goto LABEL_11;
      }
      v19 -= 8;
      *(_QWORD *)&a1[v25] = v26;
      v25 -= 8;
      if (!v25)
      {
        v18 = a1;
        goto LABEL_11;
      }
    }
  }
  v34 = a4 >> 1;
  v35 = &a1[8 * (a4 >> 1)];
  v36 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, v35, a3, v36, a5, a6);
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
    _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v8, &v8[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
    return;
  }
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(a1, v35, a3, v36, a5);
  v37 = &a5[8 * v34];
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v37);
  v38 = v8;
  v39 = v37;
  v40 = a5;
  v41 = &a5[8 * a4];
  do
  {
    while (1)
    {
      if (v39 == v41)
      {
        if (v40 == v37)
          return;
        v50 = &a5[8 * v34] - v40 - 8;
        if (v50 >= 0x38 && (unint64_t)(v38 - v40) >= 0x20)
        {
          v60 = 0;
          v61 = (v50 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v51 = &v8[v62];
          v52 = &v40[v62];
          v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v64 = &v8[v60];
            v65 = *(_OWORD *)&v40[v60 + 16];
            *(_OWORD *)v64 = *(_OWORD *)&v40[v60];
            *((_OWORD *)v64 + 1) = v65;
            v60 += 32;
            v63 -= 4;
          }
          while (v63);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            return;
        }
        else
        {
          v51 = v8;
          v52 = v40;
        }
        do
        {
          v53 = *(_QWORD *)v52;
          v52 += 8;
          *(_QWORD *)v51 = v53;
          v51 += 8;
        }
        while (v52 != v37);
        return;
      }
      v42 = **(_DWORD **)(a3 + 8);
      v43 = *(_DWORD *)(**(_QWORD **)v39 + 16);
      v44 = *(_DWORD *)(**(_QWORD **)v40 + 16);
      if (v43 != v42)
        break;
      if (v44 == v42)
        goto LABEL_51;
LABEL_42:
      *(_QWORD *)v8 = *(_QWORD *)v39;
      v8 += 8;
      v39 += 8;
      v38 += 8;
      if (v40 == v37)
        goto LABEL_52;
    }
    if (v44 != v42 && v44 > v43)
      goto LABEL_42;
LABEL_51:
    *(_QWORD *)v8 = *(_QWORD *)v40;
    v8 += 8;
    v40 += 8;
    v38 += 8;
  }
  while (v40 != v37);
LABEL_52:
  if (v39 == v41)
    return;
  v46 = &a5[8 * a4] - v39 - 8;
  if (v46 < 0x48 || (unint64_t)(v38 - v39) < 0x20)
  {
    v47 = v8;
    v48 = v39;
    do
    {
LABEL_56:
      v49 = *(_QWORD *)v48;
      v48 += 8;
      *(_QWORD *)v47 = v49;
      v47 += 8;
    }
    while (v48 != v41);
    return;
  }
  v54 = 0;
  v55 = (v46 >> 3) + 1;
  v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
  v47 = &v8[v56];
  v48 = &v39[v56];
  v57 = v55 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v58 = &v8[v54];
    v59 = *(_OWORD *)&v39[v54 + 16];
    *(_OWORD *)v58 = *(_OWORD *)&v39[v54];
    *((_OWORD *)v58 + 1) = v59;
    v54 += 32;
    v57 -= 4;
  }
  while (v57);
  if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_56;
}

__n128 _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5)
{
  char *v5;
  char *v7;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  __n128 result;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;

  if (!a4)
    return result;
  v5 = a5;
  v7 = a1;
  if (a4 == 1)
  {
LABEL_36:
    *(_QWORD *)v5 = *(_QWORD *)v7;
    return result;
  }
  if (a4 == 2)
  {
    v10 = *((_QWORD *)a2 - 1);
    v11 = **(_DWORD **)(a3 + 8);
    v12 = *(_DWORD *)(*(_QWORD *)v10 + 16);
    v13 = *(_DWORD *)(**(_QWORD **)a1 + 16);
    if (v12 == v11)
    {
      if (v13 != v11)
        goto LABEL_35;
    }
    else if (v13 != v11 && v13 > v12)
    {
      goto LABEL_35;
    }
    v10 = *(_QWORD *)a1;
    v7 = a2 - 8;
LABEL_35:
    *(_QWORD *)a5 = v10;
    v5 = a5 + 8;
    goto LABEL_36;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2)
      return result;
    v14 = a1 + 8;
    *(_QWORD *)a5 = *(_QWORD *)a1;
    if (a1 + 8 == a2)
      return result;
    v15 = 0;
    v16 = a5;
    v17 = (uint64_t *)a5;
LABEL_13:
    while (2)
    {
      v21 = *v17++;
      v20 = v21;
      v22 = **(_DWORD **)(a3 + 8);
      v23 = *(_DWORD *)(**(_QWORD **)v14 + 16);
      v24 = *(_DWORD *)(*(_QWORD *)v21 + 16);
      if (v23 == v22)
      {
        if (v24 != v22)
        {
LABEL_15:
          *((_QWORD *)v16 + 1) = v20;
          v18 = a5;
          if (v16 == a5)
            goto LABEL_12;
          v25 = v15;
          while (1)
          {
            v26 = *(_QWORD *)&a5[v25 - 8];
            v27 = **(_DWORD **)(a3 + 8);
            v28 = *(_DWORD *)(**(_QWORD **)v14 + 16);
            v29 = *(_DWORD *)(*(_QWORD *)v26 + 16);
            if (v28 == v27)
            {
              if (v29 == v27)
              {
                v18 = &a5[v25];
LABEL_12:
                v19 = *(_QWORD *)v14;
                v14 += 8;
                *(_QWORD *)v18 = v19;
                v15 += 8;
                v16 = (char *)v17;
                if (v14 == a2)
                  return result;
                goto LABEL_13;
              }
            }
            else if (v29 == v27 || v29 <= v28)
            {
              v18 = v16;
              goto LABEL_12;
            }
            v16 -= 8;
            *(_QWORD *)&a5[v25] = v26;
            v25 -= 8;
            if (!v25)
            {
              v18 = a5;
              goto LABEL_12;
            }
          }
        }
      }
      else if (v24 != v22 && v24 > v23)
      {
        goto LABEL_15;
      }
      *v17 = *(_QWORD *)v14;
      v14 += 8;
      v15 += 8;
      v16 = (char *)v17;
      if (v14 == a2)
        return result;
      continue;
    }
  }
  v32 = a4 >> 1;
  v33 = 8 * (a4 >> 1);
  v34 = &a1[v33];
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, &a1[v33], a3, a4 >> 1, a5, a4 >> 1);
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v7[v33], a2, a3, a4 - v32, &v5[v33], a4 - v32);
  v36 = v5;
  v37 = v7;
  v38 = &v7[v33];
  do
  {
    while (1)
    {
      if (v38 == a2)
      {
        if (v37 == v34)
          return result;
        v47 = &v7[8 * v32] - v37 - 8;
        if (v47 >= 0x38 && (unint64_t)(v36 - v37) >= 0x20)
        {
          v57 = 0;
          v58 = (v47 >> 3) + 1;
          v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          v48 = &v5[v59];
          v49 = &v37[v59];
          v60 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = &v5[v57];
            result = *(__n128 *)&v37[v57];
            v62 = *(_OWORD *)&v37[v57 + 16];
            *(__n128 *)v61 = result;
            *((_OWORD *)v61 + 1) = v62;
            v57 += 32;
            v60 -= 4;
          }
          while (v60);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v48 = v5;
          v49 = v37;
        }
        do
        {
          v50 = *(_QWORD *)v49;
          v49 += 8;
          *(_QWORD *)v48 = v50;
          v48 += 8;
        }
        while (v49 != v34);
        return result;
      }
      v39 = **(_DWORD **)(a3 + 8);
      v40 = *(_DWORD *)(**(_QWORD **)v38 + 16);
      v41 = *(_DWORD *)(**(_QWORD **)v37 + 16);
      if (v40 != v39)
        break;
      if (v41 == v39)
        goto LABEL_48;
LABEL_39:
      *(_QWORD *)v5 = *(_QWORD *)v38;
      v5 += 8;
      v38 += 8;
      v36 += 8;
      if (v37 == v34)
        goto LABEL_49;
    }
    if (v41 != v39 && v41 > v40)
      goto LABEL_39;
LABEL_48:
    *(_QWORD *)v5 = *(_QWORD *)v37;
    v5 += 8;
    v37 += 8;
    v36 += 8;
  }
  while (v37 != v34);
LABEL_49:
  if (v38 == a2)
    return result;
  v43 = a2 - v38 - 8;
  if (v43 < 0x48 || (unint64_t)(v36 - v38) < 0x20)
  {
    v44 = v5;
    v45 = v38;
    do
    {
LABEL_53:
      v46 = *(_QWORD *)v45;
      v45 += 8;
      *(_QWORD *)v44 = v46;
      v44 += 8;
    }
    while (v45 != a2);
    return result;
  }
  v51 = 0;
  v52 = (v43 >> 3) + 1;
  v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
  v44 = &v5[v53];
  v45 = &v38[v53];
  v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v55 = &v5[v51];
    result = *(__n128 *)&v38[v51];
    v56 = *(_OWORD *)&v38[v51 + 16];
    *(__n128 *)v55 = result;
    *((_OWORD *)v55 + 1) = v56;
    v51 += 32;
    v54 -= 4;
  }
  while (v54);
  if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_53;
  return result;
}

char *_ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unsigned int v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  _BOOL4 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  _OWORD *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  char *i;
  uint64_t v100;
  char *v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  _OWORD *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;

  if (!a6)
    return result;
  v8 = a6;
  while (2)
  {
    if (v8 <= a8 || a5 <= a8)
    {
      if (a5 > v8)
      {
        if (a2 == a3)
          return result;
        v89 = a3 - a2 - 8;
        v90 = a7;
        v91 = a2;
        if (v89 < 0x18)
          goto LABEL_145;
        v90 = a7;
        v91 = a2;
        if ((unint64_t)(a7 - a2) < 0x20)
          goto LABEL_145;
        v92 = (v89 >> 3) + 1;
        v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
        v90 = &a7[v93];
        v91 = &a2[v93];
        v94 = (__int128 *)(a2 + 16);
        v95 = a7 + 16;
        v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v97 = *v94;
          *(v95 - 1) = *(v94 - 1);
          *v95 = v97;
          v94 += 2;
          v95 += 2;
          v96 -= 4;
        }
        while (v96);
        if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_145:
          do
          {
            v98 = *(_QWORD *)v91;
            v91 += 8;
            *(_QWORD *)v90 = v98;
            v90 += 8;
          }
          while (v91 != a3);
        }
        if (v90 == a7)
          return result;
        for (i = a3; ; i -= 8)
        {
          if (a2 == result)
          {
            v120 = v90 - a7 - 8;
            if (v120 < 0x58 || (unint64_t)(v90 - i) < 0x20)
            {
              v121 = v90;
              v122 = a3;
              goto LABEL_136;
            }
            v125 = 0;
            v126 = (v120 >> 3) + 1;
            v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
            v121 = &v90[-v127];
            v122 = &a3[-v127];
            v128 = v126 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v129 = *(_OWORD *)&v90[v125 - 16];
              v130 = &a3[v125];
              *((_OWORD *)v130 - 2) = *(_OWORD *)&v90[v125 - 32];
              *((_OWORD *)v130 - 1) = v129;
              v125 -= 32;
              v128 -= 4;
            }
            while (v128);
            if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_136:
              v123 = v122 - 8;
              do
              {
                v124 = *((_QWORD *)v121 - 1);
                v121 -= 8;
                *(_QWORD *)v123 = v124;
                v123 -= 8;
              }
              while (v121 != a7);
            }
            return result;
          }
          v101 = a2 - 8;
          v100 = *((_QWORD *)a2 - 1);
          v102 = **(_DWORD **)(a4 + 8);
          v103 = *(_DWORD *)(*(_QWORD *)v100 + 16);
          v104 = *(_DWORD *)(**((_QWORD **)v90 - 1) + 16);
          if (v104 == v102)
          {
            if (v103 != v102)
              goto LABEL_101;
          }
          else if (v103 != v102 && v103 > v104)
          {
            goto LABEL_101;
          }
          v100 = *((_QWORD *)v90 - 1);
          v101 = a2;
          v90 -= 8;
LABEL_101:
          *((_QWORD *)a3 - 1) = v100;
          a3 -= 8;
          a2 = v101;
          if (v90 == a7)
            return result;
        }
      }
      if (result == a2)
        return result;
      v106 = a2 - result - 8;
      v107 = a7;
      v108 = result;
      if (v106 < 0x18)
        goto LABEL_146;
      v107 = a7;
      v108 = result;
      if ((unint64_t)(a7 - result) < 0x20)
        goto LABEL_146;
      v109 = (v106 >> 3) + 1;
      v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
      v107 = &a7[v110];
      v108 = &result[v110];
      v111 = (__int128 *)(result + 16);
      v112 = a7 + 16;
      v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v114 = *v111;
        *(v112 - 1) = *(v111 - 1);
        *v112 = v114;
        v111 += 2;
        v112 += 2;
        v113 -= 4;
      }
      while (v113);
      if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_146:
        do
        {
          v115 = *(_QWORD *)v108;
          v108 += 8;
          *(_QWORD *)v107 = v115;
          v107 += 8;
        }
        while (v108 != a2);
      }
      if (v107 == a7)
        return result;
      while (1)
      {
        while (1)
        {
          if (a2 == a3)
            return (char *)memmove(result, a7, v107 - a7);
          v116 = **(_DWORD **)(a4 + 8);
          v117 = *(_DWORD *)(**(_QWORD **)a2 + 16);
          v118 = *(_DWORD *)(**(_QWORD **)a7 + 16);
          if (v117 == v116)
            break;
          if (v118 == v116 || v118 <= v117)
            goto LABEL_130;
LABEL_121:
          *(_QWORD *)result = *(_QWORD *)a2;
          result += 8;
          a2 += 8;
          if (a7 == v107)
            return result;
        }
        if (v118 != v116)
          goto LABEL_121;
LABEL_130:
        *(_QWORD *)result = *(_QWORD *)a7;
        result += 8;
        a7 += 8;
        if (a7 == v107)
          return result;
      }
    }
    if (!a5)
      return result;
    v11 = 0;
    v12 = 0;
    v13 = **(_DWORD **)(a4 + 8);
    v14 = *(_DWORD *)(**(_QWORD **)a2 + 16);
    while (1)
    {
      v16 = *(_QWORD *)&result[8 * v12];
      v17 = *(_DWORD *)(*(_QWORD *)v16 + 16);
      if (v14 != v13)
        break;
      if (v17 != v13)
        goto LABEL_14;
LABEL_11:
      ++v12;
      v11 -= 8;
      if (a5 == v12)
        return result;
    }
    v15 = v17 != v13 && v17 > v14;
    if (!v15)
      goto LABEL_11;
LABEL_14:
    v18 = a5 - v12;
    v19 = &result[-v11];
    if (a5 - v12 >= v8)
    {
      if (a5 - 1 != v12)
      {
        if (v18 >= 0)
          v34 = a5 - v12;
        else
          v34 = v18 + 1;
        v35 = v34 >> 1;
        v36 = &result[8 * (v34 >> 1)];
        if (a3 == a2)
        {
          v22 = a3;
        }
        else
        {
          v37 = (a3 - a2) >> 3;
          v38 = *(_DWORD *)(**(_QWORD **)&v36[8 * v12] + 16);
          v22 = a2;
          if (v38 == v13)
          {
            do
            {
              v39 = v37 >> 1;
              v40 = (uint64_t *)&v22[8 * (v37 >> 1)];
              v42 = *v40;
              v41 = (char *)(v40 + 1);
              v43 = *(_DWORD *)(*(_QWORD *)v42 + 16);
              v44 = v43 != v13 || v38 == v43;
              v37 += ~v39;
              if (v44)
                v37 = v39;
              else
                v22 = v41;
            }
            while (v37);
          }
          else
          {
            do
            {
              v45 = v37 >> 1;
              v46 = (uint64_t *)&v22[8 * (v37 >> 1)];
              v48 = *v46;
              v47 = (char *)(v46 + 1);
              v49 = *(_DWORD *)(*(_QWORD *)v48 + 16);
              v51 = v49 == v13 || v38 > v49;
              v37 += ~v45;
              if (v51)
                v22 = v47;
              else
                v37 = v45;
            }
            while (v37);
          }
        }
        v25 = &v36[-v11];
        v21 = (v22 - a2) >> 3;
        v52 = v22;
        if (&v36[-v11] != a2)
          goto LABEL_60;
        goto LABEL_85;
      }
      *(_QWORD *)&result[8 * v12] = *(_QWORD *)a2;
      *(_QWORD *)a2 = v16;
    }
    else
    {
      if (v8 >= 0)
        v20 = v8;
      else
        v20 = v8 + 1;
      v21 = v20 >> 1;
      v22 = &a2[8 * (v20 >> 1)];
      if (v19 == a2)
      {
        v25 = a2;
      }
      else
      {
        v23 = (uint64_t)(a2 - result + v11) >> 3;
        v24 = *(_DWORD *)(**(_QWORD **)v22 + 16);
        v25 = v19;
        if (v24 == v13)
        {
          do
          {
            v26 = v23 >> 1;
            v27 = (uint64_t *)&v25[8 * (v23 >> 1)];
            v29 = *v27;
            v28 = (char *)(v27 + 1);
            v23 += ~(v23 >> 1);
            if (*(_DWORD *)(*(_QWORD *)v29 + 16) == v13)
              v25 = v28;
            else
              v23 = v26;
          }
          while (v23);
        }
        else
        {
          do
          {
            v30 = v23 >> 1;
            v31 = (uint64_t *)&v25[8 * (v23 >> 1)];
            v33 = *v31;
            v32 = (char *)(v31 + 1);
            v23 += ~(v23 >> 1);
            if (*(_DWORD *)(*(_QWORD *)v33 + 16) != v13 && *(_DWORD *)(*(_QWORD *)v33 + 16) > v24)
              v23 = v30;
            else
              v25 = v32;
          }
          while (v23);
        }
      }
      v35 = (v25 - v19) >> 3;
      v52 = v22;
      if (v25 == a2)
        goto LABEL_85;
LABEL_60:
      v52 = v25;
      if (a2 != v22)
      {
        if (v25 + 8 == a2)
        {
          v131 = *(_QWORD *)v25;
          v133 = v19;
          v60 = v22 - a2;
          v135 = a4;
          v137 = a7;
          v61 = a3;
          v62 = a8;
          memmove(v25, a2, v22 - a2);
          v19 = v133;
          a4 = v135;
          a8 = v62;
          a3 = v61;
          a7 = v137;
          v52 = &v25[v60];
          *(_QWORD *)v52 = v131;
        }
        else if (a2 + 8 == v22)
        {
          v63 = *((_QWORD *)v22 - 1);
          v52 = v25 + 8;
          if (v22 - 8 != v25)
          {
            v136 = a4;
            v138 = a7;
            v64 = a3;
            v65 = a8;
            v132 = *((_QWORD *)v22 - 1);
            v134 = v19;
            memmove(v25 + 8, v25, v22 - 8 - v25);
            v63 = v132;
            v19 = v134;
            a8 = v65;
            a4 = v136;
            a7 = v138;
            a3 = v64;
          }
          *(_QWORD *)v25 = v63;
        }
        else
        {
          v53 = (a2 - v25) >> 3;
          v54 = (v22 - a2) >> 3;
          if (v53 == v54)
          {
            v55 = 0;
            do
            {
              v56 = *(_QWORD *)&v25[v55];
              *(_QWORD *)&v25[v55] = *(_QWORD *)&a2[v55];
              v57 = (uint64_t)&v25[v55 + 8];
              *(_QWORD *)&a2[v55] = v56;
              v58 = (uint64_t)&a2[v55 + 8];
              v55 += 8;
            }
            while ((char *)v57 != a2 && v58 != (_QWORD)v22);
            v52 = a2;
          }
          else
          {
            v66 = (v22 - a2) >> 3;
            v67 = (a2 - v25) >> 3;
            do
            {
              v68 = v67;
              v67 = v66;
              v66 = v68 % v66;
            }
            while (v66);
            if (v67)
            {
              v69 = &v25[8 * v67];
              do
              {
                v71 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                v70 = v71;
                v72 = &v69[8 * v53];
                v73 = v69;
                do
                {
                  v74 = v73;
                  v73 = v72;
                  *(_QWORD *)v74 = *(_QWORD *)v72;
                  v75 = (v22 - v72) >> 3;
                  v76 = __OFSUB__(v53, v75);
                  v77 = v53 - v75;
                  v15 = (v77 < 0) ^ v76;
                  v72 = &v25[8 * v77];
                  if (v15)
                    v72 = &v73[8 * v53];
                }
                while (v72 != v69);
                *(_QWORD *)v73 = v70;
              }
              while (v69 != v25);
            }
            v52 = &v25[8 * v54];
          }
        }
      }
LABEL_85:
      v78 = a5 - v35 - v12;
      v79 = v8 - v21;
      if (v35 + v21 < v8 + a5 - (v35 + v21) - v12)
      {
        v80 = a3;
        v81 = a4;
        v82 = a7;
        v83 = a8;
        _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v19, v25, v52);
        a8 = v83;
        a4 = v81;
        a3 = v80;
        a7 = v82;
        result = v52;
        a5 = v78;
        v8 = v79;
        a2 = v22;
        if (!v79)
          return result;
        continue;
      }
      v84 = v22;
      v85 = a4;
      v86 = v19;
      v87 = a7;
      v88 = a8;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v52, v84, a3);
      result = v86;
      a8 = v88;
      a4 = v85;
      a7 = v87;
      a3 = v52;
      a5 = v35;
      v8 = v21;
      a2 = v25;
      if (v21)
        continue;
    }
    return result;
  }
}

void _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;

  if (a4 < 2)
    return;
  v8 = a1;
  if (a4 == 2)
  {
    v9 = *((_QWORD *)a2 - 1);
    v10 = *(_QWORD *)a1;
    v11 = **(_DWORD **)(a3 + 8);
    v12 = *(_DWORD *)(*(_QWORD *)(v9 + 16) + 16);
    v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
    if (v12 == v11)
    {
      if (v13 == v11)
        return;
    }
    else if (v13 == v11 || v13 <= v12)
    {
      return;
    }
    *(_QWORD *)a1 = v9;
    *((_QWORD *)a2 - 1) = v10;
    return;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2)
      return;
    v15 = a1 + 8;
    if (a1 + 8 == a2)
      return;
    v16 = 0;
    v17 = a1;
LABEL_13:
    v19 = v17;
    v17 = v15;
    v20 = *((_QWORD *)v19 + 1);
    v21 = **(_DWORD **)(a3 + 8);
    v22 = *(_DWORD *)(*(_QWORD *)(v20 + 16) + 16);
    v23 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 16) + 16);
    if (v22 == v21)
    {
      if (v23 == v21)
        goto LABEL_12;
    }
    else if (v23 == v21 || v23 <= v22)
    {
      goto LABEL_12;
    }
    *((_QWORD *)v19 + 1) = *(_QWORD *)v19;
    v18 = a1;
    if (v19 == a1)
      goto LABEL_11;
    v25 = v16;
    while (1)
    {
      v26 = *(_QWORD *)&a1[v25 - 8];
      v27 = **(_DWORD **)(a3 + 8);
      v28 = *(_DWORD *)(*(_QWORD *)(v20 + 16) + 16);
      v29 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
      if (v28 == v27)
      {
        if (v29 == v27)
        {
          v18 = &a1[v25];
LABEL_11:
          *(_QWORD *)v18 = v20;
LABEL_12:
          v15 = v17 + 8;
          v16 += 8;
          if (v17 + 8 == a2)
            return;
          goto LABEL_13;
        }
      }
      else if (v29 == v27 || v29 <= v28)
      {
        v18 = v19;
        goto LABEL_11;
      }
      v19 -= 8;
      *(_QWORD *)&a1[v25] = v26;
      v25 -= 8;
      if (!v25)
      {
        v18 = a1;
        goto LABEL_11;
      }
    }
  }
  v34 = a4 >> 1;
  v35 = &a1[8 * (a4 >> 1)];
  v36 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, v35, a3, v36, a5, a6);
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
    _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v8, &v8[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
    return;
  }
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(a1, v35, a3, v36, a5);
  v37 = &a5[8 * v34];
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v37);
  v38 = v8;
  v39 = v37;
  v40 = a5;
  v41 = &a5[8 * a4];
  do
  {
    while (1)
    {
      if (v39 == v41)
      {
        if (v40 == v37)
          return;
        v50 = &a5[8 * v34] - v40 - 8;
        if (v50 >= 0x38 && (unint64_t)(v38 - v40) >= 0x20)
        {
          v60 = 0;
          v61 = (v50 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v51 = &v8[v62];
          v52 = &v40[v62];
          v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v64 = &v8[v60];
            v65 = *(_OWORD *)&v40[v60 + 16];
            *(_OWORD *)v64 = *(_OWORD *)&v40[v60];
            *((_OWORD *)v64 + 1) = v65;
            v60 += 32;
            v63 -= 4;
          }
          while (v63);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            return;
        }
        else
        {
          v51 = v8;
          v52 = v40;
        }
        do
        {
          v53 = *(_QWORD *)v52;
          v52 += 8;
          *(_QWORD *)v51 = v53;
          v51 += 8;
        }
        while (v52 != v37);
        return;
      }
      v42 = **(_DWORD **)(a3 + 8);
      v43 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v39 + 16) + 16);
      v44 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v40 + 16) + 16);
      if (v43 != v42)
        break;
      if (v44 == v42)
        goto LABEL_51;
LABEL_42:
      *(_QWORD *)v8 = *(_QWORD *)v39;
      v8 += 8;
      v39 += 8;
      v38 += 8;
      if (v40 == v37)
        goto LABEL_52;
    }
    if (v44 != v42 && v44 > v43)
      goto LABEL_42;
LABEL_51:
    *(_QWORD *)v8 = *(_QWORD *)v40;
    v8 += 8;
    v40 += 8;
    v38 += 8;
  }
  while (v40 != v37);
LABEL_52:
  if (v39 == v41)
    return;
  v46 = &a5[8 * a4] - v39 - 8;
  if (v46 < 0x48 || (unint64_t)(v38 - v39) < 0x20)
  {
    v47 = v8;
    v48 = v39;
    do
    {
LABEL_56:
      v49 = *(_QWORD *)v48;
      v48 += 8;
      *(_QWORD *)v47 = v49;
      v47 += 8;
    }
    while (v48 != v41);
    return;
  }
  v54 = 0;
  v55 = (v46 >> 3) + 1;
  v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
  v47 = &v8[v56];
  v48 = &v39[v56];
  v57 = v55 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v58 = &v8[v54];
    v59 = *(_OWORD *)&v39[v54 + 16];
    *(_OWORD *)v58 = *(_OWORD *)&v39[v54];
    *((_OWORD *)v58 + 1) = v59;
    v54 += 32;
    v57 -= 4;
  }
  while (v57);
  if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_56;
}

__n128 _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5)
{
  char *v5;
  char *v7;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  __n128 result;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;

  if (!a4)
    return result;
  v5 = a5;
  v7 = a1;
  if (a4 == 1)
  {
LABEL_36:
    *(_QWORD *)v5 = *(_QWORD *)v7;
    return result;
  }
  if (a4 == 2)
  {
    v10 = *((_QWORD *)a2 - 1);
    v11 = **(_DWORD **)(a3 + 8);
    v12 = *(_DWORD *)(*(_QWORD *)(v10 + 16) + 16);
    v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
    if (v12 == v11)
    {
      if (v13 != v11)
        goto LABEL_35;
    }
    else if (v13 != v11 && v13 > v12)
    {
      goto LABEL_35;
    }
    v10 = *(_QWORD *)a1;
    v7 = a2 - 8;
LABEL_35:
    *(_QWORD *)a5 = v10;
    v5 = a5 + 8;
    goto LABEL_36;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2)
      return result;
    v14 = a1 + 8;
    *(_QWORD *)a5 = *(_QWORD *)a1;
    if (a1 + 8 == a2)
      return result;
    v15 = 0;
    v16 = a5;
    v17 = (uint64_t *)a5;
LABEL_13:
    while (2)
    {
      v21 = *v17++;
      v20 = v21;
      v22 = **(_DWORD **)(a3 + 8);
      v23 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 16) + 16);
      v24 = *(_DWORD *)(*(_QWORD *)(v21 + 16) + 16);
      if (v23 == v22)
      {
        if (v24 != v22)
        {
LABEL_15:
          *((_QWORD *)v16 + 1) = v20;
          v18 = a5;
          if (v16 == a5)
            goto LABEL_12;
          v25 = v15;
          while (1)
          {
            v26 = *(_QWORD *)&a5[v25 - 8];
            v27 = **(_DWORD **)(a3 + 8);
            v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 16) + 16);
            v29 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
            if (v28 == v27)
            {
              if (v29 == v27)
              {
                v18 = &a5[v25];
LABEL_12:
                v19 = *(_QWORD *)v14;
                v14 += 8;
                *(_QWORD *)v18 = v19;
                v15 += 8;
                v16 = (char *)v17;
                if (v14 == a2)
                  return result;
                goto LABEL_13;
              }
            }
            else if (v29 == v27 || v29 <= v28)
            {
              v18 = v16;
              goto LABEL_12;
            }
            v16 -= 8;
            *(_QWORD *)&a5[v25] = v26;
            v25 -= 8;
            if (!v25)
            {
              v18 = a5;
              goto LABEL_12;
            }
          }
        }
      }
      else if (v24 != v22 && v24 > v23)
      {
        goto LABEL_15;
      }
      *v17 = *(_QWORD *)v14;
      v14 += 8;
      v15 += 8;
      v16 = (char *)v17;
      if (v14 == a2)
        return result;
      continue;
    }
  }
  v32 = a4 >> 1;
  v33 = 8 * (a4 >> 1);
  v34 = &a1[v33];
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, &a1[v33], a3, a4 >> 1, a5, a4 >> 1);
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v7[v33], a2, a3, a4 - v32, &v5[v33], a4 - v32);
  v36 = v5;
  v37 = v7;
  v38 = &v7[v33];
  do
  {
    while (1)
    {
      if (v38 == a2)
      {
        if (v37 == v34)
          return result;
        v47 = &v7[8 * v32] - v37 - 8;
        if (v47 >= 0x38 && (unint64_t)(v36 - v37) >= 0x20)
        {
          v57 = 0;
          v58 = (v47 >> 3) + 1;
          v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          v48 = &v5[v59];
          v49 = &v37[v59];
          v60 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = &v5[v57];
            result = *(__n128 *)&v37[v57];
            v62 = *(_OWORD *)&v37[v57 + 16];
            *(__n128 *)v61 = result;
            *((_OWORD *)v61 + 1) = v62;
            v57 += 32;
            v60 -= 4;
          }
          while (v60);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v48 = v5;
          v49 = v37;
        }
        do
        {
          v50 = *(_QWORD *)v49;
          v49 += 8;
          *(_QWORD *)v48 = v50;
          v48 += 8;
        }
        while (v49 != v34);
        return result;
      }
      v39 = **(_DWORD **)(a3 + 8);
      v40 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v38 + 16) + 16);
      v41 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v37 + 16) + 16);
      if (v40 != v39)
        break;
      if (v41 == v39)
        goto LABEL_48;
LABEL_39:
      *(_QWORD *)v5 = *(_QWORD *)v38;
      v5 += 8;
      v38 += 8;
      v36 += 8;
      if (v37 == v34)
        goto LABEL_49;
    }
    if (v41 != v39 && v41 > v40)
      goto LABEL_39;
LABEL_48:
    *(_QWORD *)v5 = *(_QWORD *)v37;
    v5 += 8;
    v37 += 8;
    v36 += 8;
  }
  while (v37 != v34);
LABEL_49:
  if (v38 == a2)
    return result;
  v43 = a2 - v38 - 8;
  if (v43 < 0x48 || (unint64_t)(v36 - v38) < 0x20)
  {
    v44 = v5;
    v45 = v38;
    do
    {
LABEL_53:
      v46 = *(_QWORD *)v45;
      v45 += 8;
      *(_QWORD *)v44 = v46;
      v44 += 8;
    }
    while (v45 != a2);
    return result;
  }
  v51 = 0;
  v52 = (v43 >> 3) + 1;
  v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
  v44 = &v5[v53];
  v45 = &v38[v53];
  v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v55 = &v5[v51];
    result = *(__n128 *)&v38[v51];
    v56 = *(_OWORD *)&v38[v51 + 16];
    *(__n128 *)v55 = result;
    *((_OWORD *)v55 + 1) = v56;
    v51 += 32;
    v54 -= 4;
  }
  while (v54);
  if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_53;
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *,mlir::WalkStage const&)>::callback_fn<mlir::bytecode::detail::IRNumberingState::computeGlobalNumberingState(mlir::Operation *)::$_0>(uint64_t **a1, uint64_t a2, _DWORD *a3)
{
  int v4;
  int v5;
  uint64_t *v8;
  unsigned int v9;
  mlir::Block *v10;
  unint64_t Parent;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mlir::Block *ParentRegion;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char *buffer;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  char *v63;
  _QWORD v64[2];
  char v65;

  v4 = a3[1];
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x7FFFFF) == 0 || v4 != *a3)
  {
    if (v4)
      return;
    v8 = a1[1];
    v9 = *((_DWORD *)*a1 + 2);
    if (v9 && *(_BYTE *)(**a1 + 24 * v9 - 8))
    {
      v10 = *(mlir::Block **)(a2 + 16);
      if (v10)
      {
        Parent = mlir::Block::getParent(v10);
        v5 = *(_DWORD *)(a2 + 44);
      }
      else
      {
        Parent = 0;
      }
      if ((v5 & 0x800000) != 0)
      {
        v14 = *(unsigned int *)(a2 + 68);
        if ((_DWORD)v14)
        {
          v15 = 0;
          v16 = *(_QWORD *)(a2 + 72);
          do
          {
            v64[0] = *(_QWORD *)(v16 + 32 * v15 + 24);
            ParentRegion = mlir::Value::getParentRegion((mlir::Value *)v64);
            if (ParentRegion != (mlir::Block *)Parent)
            {
              v18 = **a1;
              v19 = 24 * *((unsigned int *)*a1 + 2);
              v20 = v18 + v19;
              while (v19)
              {
                v21 = *(_QWORD *)(v18 + v19 - 24);
                v22 = *(unsigned __int8 *)(v18 + v19 - 8);
                v19 -= 24;
                if (v22)
                  v23 = v21 == *((_QWORD *)ParentRegion + 2);
                else
                  v23 = 1;
                if (v23)
                {
                  v18 += v19 + 24;
                  break;
                }
              }
              while (v20 != v18)
              {
                *(_BYTE *)(v20 - 8) = *(_BYTE *)(v18 - 8);
                *(_WORD *)(*(_QWORD *)(v20 - 16) + 4) = 256;
                v20 -= 24;
              }
            }
            ++v15;
          }
          while (v15 != v14);
        }
      }
    }
    v8[66] += 8;
    v24 = v8[56];
    if (v24 && ((v24 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v24 + 8 <= v8[57] - v24)
    {
      v25 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    else
    {
      v26 = *((_DWORD *)v8 + 118) >> 7;
      if (v26 >= 0x1E)
        LOBYTE(v26) = 30;
      v27 = 4096 << v26;
      buffer = (char *)llvm::allocate_buffer(4096 << v26, (std::align_val_t)8uLL);
      v29 = *((unsigned int *)v8 + 118);
      if (v29 >= *((_DWORD *)v8 + 119))
      {
        v58 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 58), v8 + 60, v29 + 1, 8);
        buffer = v58;
        LODWORD(v29) = *((_DWORD *)v8 + 118);
      }
      *(_QWORD *)(v8[58] + 8 * v29) = buffer;
      ++*((_DWORD *)v8 + 118);
      v8[57] = (uint64_t)&buffer[v27];
      v25 = (unint64_t)(buffer + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    v8[56] = v25 + 8;
    v30 = a1[2];
    v31 = (*(_DWORD *)v30)++;
    *(_DWORD *)v25 = v31;
    *(_WORD *)(v25 + 4) = 0;
    if (mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>((_QWORD *)(a2 + 48)))
      *(_WORD *)(v25 + 4) = 257;
    v32 = v8[3];
    v33 = *((_DWORD *)v8 + 10);
    if (!v33)
      goto LABEL_68;
    v34 = (v33 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v35 = (_QWORD *)(v32 + 16 * v34);
    v36 = *v35;
    if (*v35 == a2)
      goto LABEL_55;
    v37 = 0;
    v38 = 1;
    while (v36 != -4096)
    {
      if (v37)
        v39 = 0;
      else
        v39 = v36 == -8192;
      if (v39)
        v37 = v35;
      v40 = v34 + v38++;
      v34 = v40 & (v33 - 1);
      v35 = (_QWORD *)(v32 + 16 * v34);
      v36 = *v35;
      if (*v35 == a2)
        goto LABEL_55;
    }
    v52 = v37 ? v37 : v35;
    v53 = *((_DWORD *)v8 + 8);
    if (4 * v53 + 4 < 3 * v33)
    {
      if (v33 + ~v53 - *((_DWORD *)v8 + 9) > v33 >> 3)
        goto LABEL_52;
    }
    else
    {
LABEL_68:
      v33 *= 2;
    }
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)(v8 + 3), v33);
    v54 = v8[3];
    v55 = *((_DWORD *)v8 + 10) - 1;
    v56 = v55 & ((a2 >> 4) ^ (a2 >> 9));
    v52 = (_QWORD *)(v54 + 16 * v56);
    v57 = *v52;
    if (*v52 == a2)
    {
LABEL_70:
      ++*((_DWORD *)v8 + 8);
      if (a2 == -4096)
        goto LABEL_54;
      goto LABEL_53;
    }
    v59 = 0;
    v60 = 1;
    while (v57 != -4096)
    {
      if (v59)
        v61 = 0;
      else
        v61 = v57 == -8192;
      if (v61)
        v59 = v52;
      v62 = v56 + v60++;
      v56 = v62 & v55;
      v52 = (_QWORD *)(v54 + 16 * (v62 & v55));
      v57 = *v52;
      if (*v52 == a2)
        goto LABEL_70;
    }
    if (v59)
      v52 = v59;
LABEL_52:
    v41 = *v52;
    ++*((_DWORD *)v8 + 8);
    if (v41 == -4096)
    {
LABEL_54:
      *v52 = a2;
      v52[1] = v25;
LABEL_55:
      if ((*(_DWORD *)(a2 + 44) & 0x7FFFFF) != 0)
      {
        v42 = *a1;
        v43 = *(_BYTE *)(v25 + 5) ^ 1;
        v44 = *((unsigned int *)v42 + 2);
        if (v44 >= *((_DWORD *)v42 + 3))
        {
          v64[0] = a2;
          v64[1] = v25;
          v65 = v43;
          v46 = v44 + 1;
          v47 = *v42 + 24 * (unint64_t)v44 > (unint64_t)v64;
          if (*v42 <= (unint64_t)v64 && v47)
          {
            v63 = (char *)v64 - *v42;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, v42 + 2, v46, 24);
            v48 = *v42;
            v49 = &v63[*v42];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, v42 + 2, v46, 24);
            v48 = *v42;
            v49 = (char *)v64;
          }
          v50 = v48 + 24 * *((unsigned int *)v42 + 2);
          v51 = *(_OWORD *)v49;
          *(_QWORD *)(v50 + 16) = *((_QWORD *)v49 + 2);
          *(_OWORD *)v50 = v51;
        }
        else
        {
          v45 = *v42 + 24 * v44;
          *(_QWORD *)v45 = a2;
          *(_QWORD *)(v45 + 8) = v25;
          *(_BYTE *)(v45 + 16) = v43;
        }
        ++*((_DWORD *)v42 + 2);
      }
      return;
    }
LABEL_53:
    --*((_DWORD *)v8 + 9);
    goto LABEL_54;
  }
  v12 = *((_DWORD *)*a1 + 2);
  v13 = *(_QWORD *)(**a1 + 24 * v12 - 16);
  *((_DWORD *)*a1 + 2) = v12 - 1;
  if (!*(_BYTE *)(v13 + 5))
    *(_WORD *)(v13 + 4) = 257;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>(_QWORD *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      v15 = 91;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v2[201]);
}

uint64_t mlir::AbstractAttribute::hasTrait<mlir::AttributeTrait::IsMutable>(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v17;
  unint64_t v18;

  v1 = a1;
  if ((v2 & 1) == 0)
  {
    v1 = a1;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::StorageUserTrait::IsMutable<Empty>]";
      v18 = 98;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v1 = a1;
    }
  }
  v4 = (_QWORD *)(v1 + 72);
  v5 = v3[270];
  v6 = *(_QWORD *)(v1 + 96);
  if ((v6 & 2) == 0)
    v4 = (_QWORD *)*v4;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v6 & 0xFFFFFFFFFFFFFFF8))(v4, v5);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_181234BE0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_181234BE0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = (uint64_t)v4;
          do
          {
            if (*(_QWORD *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v27 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v21, &v27);
              v22 = v27;
              *v27 = *(_OWORD *)v21;
              *((_DWORD *)v22 + 4) = *(_DWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_181234BE0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_25:
      v26 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181234BE0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v26);
      return result;
    }
    v23 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v23 & 0x1FFFFFFFFFFFFFFELL));
    v24 = v23 & 0x1FFFFFFFFFFFFFFELL;
    v25 = result;
    do
    {
      *v25 = xmmword_181234BE0;
      *(_OWORD *)((char *)v25 + 24) = xmmword_181234BE0;
      v25 += 3;
      v24 -= 2;
    }
    while (v24);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_25;
  }
  return result;
}

uint64_t mlir::AbstractType::hasTrait<mlir::TypeTrait::IsMutable>(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  void **p_vtable;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v17;
  unint64_t v18;

  v1 = a1;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v2 & 1) == 0)
  {
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v1 = a1;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::StorageUserTrait::IsMutable<Empty>]";
      v18 = 98;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v1 = a1;
    }
  }
  v4 = (_QWORD *)(v1 + 72);
  v5 = p_vtable[405];
  v6 = *(_QWORD *)(v1 + 96);
  if ((v6 & 2) == 0)
    v4 = (_QWORD *)*v4;
  return (*(uint64_t (**)(_QWORD *, void *))(v6 & 0xFFFFFFFFFFFFFFF8))(v4, v5);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>,mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::InsertIntoBucket<mlir::AsmDialectResourceHandle const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::grow(a1, v7);
  v8 = *a3;
  v11 = *(_DWORD *)(a1 + 16) - 1;
  v12 = ((*a3 >> 4) ^ (*a3 >> 9)) & v11;
  a2 = (_QWORD *)(*(_QWORD *)a1 + 24 * v12);
  v13 = *a2;
  if (*a3 != *a2)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = a2;
      v17 = v12 + v15++;
      v12 = v17 & v11;
      a2 = (_QWORD *)(*(_QWORD *)a1 + 24 * (v17 & v11));
      v13 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v14)
      a2 = v14;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  v9 = *(_OWORD *)a3;
  a2[2] = a3[2];
  *(_OWORD *)a2 = v9;
  return a2;
}

int64x2_t *llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  unsigned int v10;
  unint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  int64x2_t *v19;
  uint64_t *v20;
  llvm *v21;
  unint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  int64x2_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  BOOL v35;
  unsigned int v36;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x48)
    {
      v16 = v11 / 0x18 + 1;
      v12 = &result->i64[3 * (v16 & 0x1FFFFFFFFFFFFFFCLL)];
      v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v18 = v16 & 0x1FFFFFFFFFFFFFFCLL;
      v19 = result;
      do
      {
        *v19 = v17;
        v19[1] = (int64x2_t)xmmword_181235240;
        v19[4] = (int64x2_t)xmmword_181235240;
        v19[5] = (int64x2_t)xmmword_181235230;
        v19[2] = (int64x2_t)xmmword_181235230;
        v19[3] = v17;
        v19 += 6;
        v18 -= 4;
      }
      while (v18);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v21 = v4;
          do
          {
            v29 = *(_QWORD *)v21;
            if ((*(_QWORD *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v30 = *(_DWORD *)(a1 + 16) - 1;
              v31 = v30 & ((v29 >> 4) ^ (v29 >> 9));
              v27 = (_QWORD *)(*(_QWORD *)a1 + 24 * v31);
              v32 = *v27;
              if (v29 != *v27)
              {
                v33 = 0;
                v34 = 1;
                while (v32 != -4096)
                {
                  if (v33)
                    v35 = 0;
                  else
                    v35 = v32 == -8192;
                  if (v35)
                    v33 = v27;
                  v36 = v31 + v34++;
                  v31 = v36 & v30;
                  v27 = (_QWORD *)(*(_QWORD *)a1 + 24 * (v36 & v30));
                  v32 = *v27;
                  if (v29 == *v27)
                    goto LABEL_26;
                }
                if (v33)
                  v27 = v33;
              }
LABEL_26:
              v28 = *(_OWORD *)v21;
              v27[2] = *((_QWORD *)v21 + 2);
              *(_OWORD *)v27 = v28;
              ++*(_DWORD *)(a1 + 8);
            }
            v21 = (llvm *)((char *)v21 + 24);
          }
          while (v21 != (llvm *)((char *)v4 + 24 * v3));
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = (uint64_t *)result;
    }
    v20 = &result->i64[3 * v10];
    do
    {
      *v12 = -4096;
      v12[1] = -4096;
      v12[2] = 0;
      v12 += 3;
    }
    while (v12 != v20);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x48)
    {
      v15 = (uint64_t *)result;
LABEL_21:
      v26 = &result->i64[3 * v13];
      do
      {
        *v15 = -4096;
        v15[1] = -4096;
        v15[2] = 0;
        v15 += 3;
      }
      while (v15 != v26);
      return result;
    }
    v22 = v14 / 0x18 + 1;
    v15 = &result->i64[3 * (v22 & 0x1FFFFFFFFFFFFFFCLL)];
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v22 & 0x1FFFFFFFFFFFFFFCLL;
    v25 = result;
    do
    {
      *v25 = v23;
      v25[1] = (int64x2_t)xmmword_181235240;
      v25[4] = (int64x2_t)xmmword_181235240;
      v25[5] = (int64x2_t)xmmword_181235230;
      v25[2] = (int64x2_t)xmmword_181235230;
      v25[3] = v23;
      v25 += 6;
      v24 -= 4;
    }
    while (v24);
    if (v22 != (v22 & 0x1FFFFFFFFFFFFFFCLL))
      goto LABEL_21;
  }
  return result;
}

uint64_t llvm::MapVector<llvm::StringRef,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::StringRef,mlir::bytecode::detail::DialectResourceNumbering *>,0u>>::try_emplace<mlir::bytecode::detail::DialectResourceNumbering *>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;

  v20 = *a2;
  LODWORD(v21) = 0;
  v19 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)&v20, &v19) & 1) != 0)return *(_QWORD *)(a1 + 24) + 24 * *((unsigned int *)v19 + 4);
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)&v20, (uint64_t)&v20, v19);
  *(_OWORD *)v7 = v20;
  *((_DWORD *)v7 + 4) = v21;
  v8 = (_QWORD *)(a1 + 24);
  v9 = *(unsigned int *)(a1 + 32);
  *((_DWORD *)v7 + 4) = v9;
  if (v9 >= *(_DWORD *)(a1 + 36))
  {
    v20 = *a2;
    v21 = *a3;
    v12 = v9 + 1;
    v13 = *v8 + 24 * (unint64_t)v9 > (unint64_t)&v20;
    if (*v8 <= (unint64_t)&v20 && v13)
    {
      v18 = (char *)&v20 - *v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v12, 24);
      v14 = *(_QWORD *)(a1 + 24);
      v15 = &v18[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v12, 24);
      v14 = *(_QWORD *)(a1 + 24);
      v15 = (char *)&v20;
    }
    v16 = v14 + 24 * *(unsigned int *)(a1 + 32);
    v17 = *(_OWORD *)v15;
    *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 + 2);
    *(_OWORD *)v16 = v17;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24) + 24 * v9;
    *(_OWORD *)v10 = *a2;
    *(_QWORD *)(v10 + 16) = *a3;
  }
  v11 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v11;
  return *v8 + 24 * v11 - 24;
}

uint64_t mlir::OpInterface<mlir::CastOpInterface,mlir::detail::CastOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
          v31 = 71;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::CastOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
          v31 = 71;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::CastOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v23 = 71;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[137];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void mlir::OperationState::addAttribute(mlir::Attribute *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::StringAttr *Context;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12[2];

  Context = (mlir::StringAttr *)mlir::Attribute::getContext(a1);
  v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  v9 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v10);
  mlir::NamedAttribute::NamedAttribute(v12, v9, a4);
  mlir::NamedAttrList::push_back((uint64_t)a1 + 112, v12[0], v12[1]);
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;

  if ((v0 & 1) != 0
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Write>(void)::instance;
  }
  if ((v2 & 1) == 0
  {
    v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Write]";
    v11 = 76;
    v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
    if (v11 >= v3)
      v4 = v3;
    else
      v4 = v11;
    v5 = &v10[v4];
    v6 = v11 - v4;
    if (v11 - v4 >= 0x12)
      v7 = 18;
    else
      v7 = v11 - v4;
    v8 = v6 - v7;
    if (v8 >= v8 - 1)
      v9 = v8 - 1;
    else
      v9 = v8;
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Write>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Write>(void)::instance;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  _QWORD *v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::detail::DenseArrayAttrImpl<int>::classof(v39))
    v5 = v4;
  else
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::DenseArrayAttrImpl<int32_t>]";
  v41 = 91;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = (void *)*--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

uint64_t mlir::DialectBytecodeWriter::writeSparseArray<int>(uint64_t a1, int *a2, uint64_t a3)
{
  int *v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2;
  if ((_DWORD)a3)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      if (a2[v8])
      {
        v7 = v8;
        ++v6;
      }
      ++v8;
    }
    while (a3 != v8);
    if (v7 > 0x100)
      goto LABEL_15;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  if (v6 > a3 >> 1)
  {
LABEL_15:
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, 2 * a3);
    if (a3)
    {
      v14 = 4 * a3;
      do
      {
        v15 = *v4++;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v15);
        v14 -= 4;
      }
      while (v14);
    }
    return result;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, (2 * v6) | 1);
  if (v6)
  {
    v10 = v7 + 1;
    v11 = 32 - __clz(v7);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v11);
    v12 = 0;
    do
    {
      v13 = v4[v12];
      if (v13)
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, (v13 << v11) | v12);
      ++v12;
    }
    while (v10 != v12);
  }
  return result;
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;

  if ((v0 & 1) != 0
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Read>(void)::instance;
  }
  if ((v2 & 1) == 0
  {
    v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Read]";
    v11 = 75;
    v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
    if (v11 >= v3)
      v4 = v3;
    else
      v4 = v11;
    v5 = &v10[v4];
    v6 = v11 - v4;
    if (v11 - v4 >= 0x12)
      v7 = 18;
    else
      v7 = v11 - v4;
    v8 = v6 - v7;
    if (v8 >= v8 - 1)
      v9 = v8 - 1;
    else
      v9 = v8;
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Read,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Read>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Read,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Read>(void)::instance;
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Allocate,mlir::MemoryEffects::Effect>::get()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;

  if ((v0 & 1) != 0
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Allocate>(void)::instance;
  }
  if ((v2 & 1) == 0
  {
    v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Allocate]";
    v11 = 79;
    v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
    if (v11 >= v3)
      v4 = v3;
    else
      v4 = v11;
    v5 = &v10[v4];
    v6 = v11 - v4;
    if (v11 - v4 >= 0x12)
      v7 = 18;
    else
      v7 = v11 - v4;
    v8 = v6 - v7;
    if (v8 >= v8 - 1)
      v9 = v8 - 1;
    else
      v9 = v8;
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Allocate>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Allocate>(void)::instance;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  const char *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  BOOL v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  char v44[32];
  __int16 v45;
  int v46;
  const char *v47;
  uint64_t v48;
  _QWORD v49[3];
  void *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[96];
  void *v54;
  _QWORD *v55;
  void *__p;
  _QWORD **v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v6 = (const char *)*((unsigned int *)a2 + 2);
  v7 = (const char *)*(unsigned int *)(a3 + 8);
  if ((_DWORD)v6 == (_DWORD)v7)
  {
    if ((_DWORD)v6)
    {
      v9 = *a2;
      v10 = *(_QWORD **)a3;
      v11 = 32 * (_QWORD)v6;
      while ((*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, *v10, a5))
      {
        v9 += 32;
        ++v10;
        v11 -= 32;
        if (!v11)
          return 1;
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v45 = 257;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(v49, a1, a4, v44);
    if (v49[0])
    {
      v46 = 5;
      v47 = v6;
      v13 = &v46;
      v14 = (char *)v50;
      if (v51 >= v52)
      {
        v36 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          v41 = (char *)&v46 - (_BYTE *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          v14 = (char *)v50;
          v13 = (int *)((char *)v50 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          v13 = &v46;
          v14 = (char *)v50;
        }
      }
      v15 = &v14[24 * v51];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v15 = v16;
      v17 = ++v51;
      if (v49[0])
      {
        v46 = 3;
        v47 = " operands present, but expected ";
        v48 = 32;
        v18 = &v46;
        v19 = (char *)v50;
        if (v17 >= v52)
        {
          v37 = v17 + 1;
          v38 = (char *)v50 + 24 * v17 > (char *)&v46;
          if (v50 <= &v46 && v38)
          {
            v42 = (char *)&v46 - (_BYTE *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            v19 = (char *)v50;
            v18 = (int *)((char *)v50 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            v18 = &v46;
            v19 = (char *)v50;
          }
        }
        v20 = &v19[24 * v51];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
        *(_OWORD *)v20 = v21;
        v22 = ++v51;
        if (v49[0])
        {
          v46 = 5;
          v47 = v7;
          v23 = &v46;
          v24 = (char *)v50;
          if (v22 >= v52)
          {
            v39 = v22 + 1;
            v40 = (char *)v50 + 24 * v22 > (char *)&v46;
            if (v50 <= &v46 && v40)
            {
              v43 = (char *)&v46 - (_BYTE *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              v24 = (char *)v50;
              v23 = (int *)((char *)v50 + v43);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              v23 = &v46;
              v24 = (char *)v50;
            }
          }
          v25 = &v24[24 * v51];
          v26 = *(_OWORD *)v23;
          *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
          *(_OWORD *)v25 = v26;
          ++v51;
        }
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    if (v58)
    {
      v27 = (_QWORD **)__p;
      if (__p)
      {
        v28 = v57;
        v29 = __p;
        if (v57 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v57 = v27;
        operator delete(v29);
      }
      v30 = v54;
      if (v54)
      {
        v31 = v55;
        v32 = v54;
        if (v55 != v54)
        {
          do
          {
            v34 = (void *)*--v31;
            v33 = v34;
            *v31 = 0;
            if (v34)
              operator delete[](v33);
          }
          while (v31 != v30);
          v32 = v54;
        }
        v55 = v30;
        operator delete(v32);
      }
      if (v50 != v53)
        free(v50);
    }
  }
  return v12;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(a1, &v39))
    return 0;
  v4 = v39;
  if (!v39)
    return 1;
  v5 = *(void **)(*(_QWORD *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    v4 = 0;
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v6 = &v40;
    v7 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v7 = (char *)v46;
        v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v6 = &v40;
        v7 = (char *)v46;
      }
    }
    v8 = &v7[24 * v47];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::UnitAttr]";
  v41 = 64;
  v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10)
      v11 = v10;
    else
      v11 = v41;
    v12 = 18;
    if (v41 - v11 < 0x12)
      v12 = v41 - v11;
    v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1)
      --v13;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v11 + v12);
    v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v14 = &v40;
      v15 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v15 = (char *)v46;
          v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v14 = &v40;
          v15 = (char *)v46;
        }
      }
      v16 = &v15[24 * v47];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v47;
      if (v44)
      {
        v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v19 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v19 = (char *)v46;
            v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v18 = &v40;
            v19 = (char *)v46;
          }
        }
        v20 = &v19[24 * v47];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v47;
      }
    }
  }
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v53;
      v25 = __p;
      if (v53 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v53 = v23;
      operator delete(v25);
    }
    v26 = v50;
    if (v50)
    {
      v27 = v51;
      v28 = v50;
      if (v51 != v50)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v50;
      }
      v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49)
      free(v46);
  }
  return v22;
}

uint64_t mlir::AsmParser::parseType<mlir::FunctionType>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD **v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v18))
    return 0;
  v5 = v18;
  if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v16 = "invalid kind of type specified";
  v17 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v19, a1, v4, &v16);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  if (v26)
  {
    v8 = (_QWORD **)__p;
    if (__p)
    {
      v9 = v25;
      v10 = __p;
      if (v25 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v25 = v8;
      operator delete(v10);
    }
    v11 = v22;
    if (v22)
    {
      v12 = v23;
      v13 = v22;
      if (v23 != v22)
      {
        do
        {
          v15 = (void *)*--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            operator delete[](v14);
        }
        while (v12 != v11);
        v13 = v22;
      }
      v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21)
      free(v20);
  }
  return v6;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::detail::concat_range<mlir::OpAsmParser::UnresolvedOperand const,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &>,llvm::ArrayRef<mlir::Type> &>(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  const char *v14;
  const char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  int *v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int *v39;
  char *v40;
  char *v41;
  __int128 v42;
  _QWORD **v43;
  _QWORD **v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  void *v50;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  BOOL v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  _QWORD v60[4];
  __int16 v61;
  int v62;
  const char *v63;
  uint64_t v64;
  _QWORD v65[3];
  void *v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE v69[96];
  void *v70;
  _QWORD *v71;
  void *__p;
  _QWORD **v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v6 = a2[1];
  v8 = **a2;
  v7 = (*a2)[1];
  v10 = *v6;
  v9 = v6[1];
  v65[0] = v8;
  v60[0] = v10;
  v11 = v7 == 0;
  v12 = v9 == 0;
  v13 = (v7 | v9) == 0;
  if (!(v7 | v9))
  {
    v14 = (const char *)a3[1];
    if (v14)
    {
      v15 = 0;
LABEL_31:
      v61 = 257;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(v65, a1, a4, v60);
      if (v65[0])
      {
        v62 = 5;
        v63 = v15;
        v29 = &v62;
        v30 = (char *)v66;
        if (v67 >= v68)
        {
          v52 = v67 + 1;
          if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
          {
            v57 = (char *)&v62 - (_BYTE *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v52, 24);
            v30 = (char *)v66;
            v29 = (int *)((char *)v66 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v52, 24);
            v29 = &v62;
            v30 = (char *)v66;
          }
        }
        v31 = &v30[24 * v67];
        v32 = *(_OWORD *)v29;
        *((_QWORD *)v31 + 2) = *((_QWORD *)v29 + 2);
        *(_OWORD *)v31 = v32;
        v33 = ++v67;
        if (v65[0])
        {
          v62 = 3;
          v63 = " operands present, but expected ";
          v64 = 32;
          v34 = &v62;
          v35 = (char *)v66;
          if (v33 >= v68)
          {
            v53 = v33 + 1;
            v54 = (char *)v66 + 24 * v33 > (char *)&v62;
            if (v66 <= &v62 && v54)
            {
              v58 = (char *)&v62 - (_BYTE *)v66;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
              v35 = (char *)v66;
              v34 = (int *)((char *)v66 + v58);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
              v34 = &v62;
              v35 = (char *)v66;
            }
          }
          v36 = &v35[24 * v67];
          v37 = *(_OWORD *)v34;
          *((_QWORD *)v36 + 2) = *((_QWORD *)v34 + 2);
          *(_OWORD *)v36 = v37;
          v38 = ++v67;
          if (v65[0])
          {
            v62 = 5;
            v63 = v14;
            v39 = &v62;
            v40 = (char *)v66;
            if (v38 >= v68)
            {
              v55 = v38 + 1;
              v56 = (char *)v66 + 24 * v38 > (char *)&v62;
              if (v66 <= &v62 && v56)
              {
                v59 = (char *)&v62 - (_BYTE *)v66;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
                v40 = (char *)v66;
                v39 = (int *)((char *)v66 + v59);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
                v39 = &v62;
                v40 = (char *)v66;
              }
            }
            v41 = &v40[24 * v67];
            v42 = *(_OWORD *)v39;
            *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
            *(_OWORD *)v41 = v42;
            ++v67;
          }
        }
      }
      v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
      if (v65[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
      if (v74)
      {
        v43 = (_QWORD **)__p;
        if (__p)
        {
          v44 = v73;
          v45 = __p;
          if (v73 != __p)
          {
            do
              v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
            while (v44 != v43);
            v45 = __p;
          }
          v73 = v43;
          operator delete(v45);
        }
        v46 = v70;
        if (v70)
        {
          v47 = v71;
          v48 = v70;
          if (v71 != v70)
          {
            do
            {
              v50 = (void *)*--v47;
              v49 = v50;
              *v47 = 0;
              if (v50)
                operator delete[](v49);
            }
            while (v47 != v46);
            v48 = v70;
          }
          v71 = v46;
          operator delete(v48);
        }
        if (v66 != v69)
          free(v66);
      }
      return v28;
    }
    return 1;
  }
  v15 = 0;
  v17 = v10;
  v18 = v8;
  v19 = v8 + 32 * v7;
  v20 = v10 + 32 * v9;
  while (1)
  {
    if (v18 != v19)
    {
      v21 = v65;
LABEL_9:
      *v21 = v18 + 32;
      v18 = v65[0];
      v22 = v60[0];
      goto LABEL_10;
    }
    v22 = v10 + 32 * v9;
    v18 = v19;
    if (v17 != v20)
    {
      v21 = v60;
      v18 = v17;
      goto LABEL_9;
    }
LABEL_10:
    ++v15;
    v17 = v22;
    if (v18 == v19)
    {
      v17 = v22;
      if (v22 == v20)
        break;
    }
  }
  v14 = (const char *)a3[1];
  if (v14 != v15)
    goto LABEL_31;
  if (v13)
    return 1;
  v23 = (_QWORD *)*a3;
  while (1)
  {
    v24 = v12 ? 0 : v10;
    v25 = (v8 == 0) | v11 ? v24 : v8;
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v25, *v23, a5))break;
    if (v11)
      v26 = v10;
    else
      v26 = v8;
    v27 = v26 + 32;
    if (v11)
      v10 = v27;
    else
      v8 = v27;
    ++v23;
    v12 = v10 == v20;
    v11 = v8 == v19;
    if (v8 == v19 && v10 == v20)
      return 1;
  }
  return 0;
}

llvm::raw_ostream *mlir::AsmPrinter::printFunctionalType<mlir::ValueTypeRange<mlir::OperandRange>,mlir::ValueTypeRange<mlir::ResultRange>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  _BYTE *v9;
  _QWORD v11[2];

  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v7 = v6;
  v8 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v8 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 40);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v8 + 1;
    *v8 = 40;
  }
  v11[0] = ", ";
  v11[1] = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(*a2, a2[1], a2[2], a2[3], a1, a1, (uint64_t)v11);
  v9 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 41);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v9 + 1;
    *v9 = 41;
  }
  return mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>(a1, a3);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties]";
        v15 = 119;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[293];
    return a1[32];
  }
  return result;
}

void mlir::bufferization::ToMemrefOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  mlir::MLIRContext *v9;
  uint64_t UnitAttr;
  uint64_t v11;
  uint64_t v12;

  v12 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v12, 1);
  if (a5)
  {
    UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>((_QWORD *)a2) = UnitAttr;
  }
  v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v11) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x10uLL);
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties]";
        v15 = 119;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[295];
    return a1[32];
  }
  return result;
}

void mlir::bufferization::ToTensorOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  mlir::MLIRContext *v9;
  uint64_t UnitAttr;
  uint64_t v11;
  mlir::MLIRContext *Context;
  unsigned int v13;
  uint64_t v14;
  uint64_t TensorTypeFromMemRefType;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  void *__src;
  uint64_t v24;
  _BYTE v25[16];
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v20 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  if (a4)
  {
    UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>((_QWORD *)a2) = UnitAttr;
  }
  if (a5)
  {
    v11 = mlir::Builder::getUnitAttr(a1, v9);
    *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>((_QWORD *)a2)
              + 8) = v11;
  }
  __src = v25;
  v24 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v22, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v21, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v26 = v22;
  if ((_DWORD)v24 != 1)
  {
    if (!(_DWORD)v24)
    {
      if (HIDWORD(v24))
      {
        v13 = 0;
LABEL_10:
        bzero((char *)__src + 8 * v13, 8 - 8 * v13);
        goto LABEL_11;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v25, 1uLL, 8);
      v13 = v24;
      if ((_DWORD)v24 != 1)
        goto LABEL_10;
    }
LABEL_11:
    LODWORD(v24) = 1;
  }
  v14 = mlir::ValueRange::dereference_iterator(&v26, 0);
  TensorTypeFromMemRefType = mlir::memref::getTensorTypeFromMemRefType(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)__src = TensorTypeFromMemRefType;
  v16 = __src;
  v17 = v24;
  v18 = *(unsigned int *)(a2 + 72);
  v19 = v18 + v24;
  if (v19 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19, 8);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v17)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v18), v16, 8 * v17);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v18 + v17;
  if (__src != v25)
    free(__src);
}

uint64_t mlir::DialectBytecodeReader::readSparseArray<int>(uint64_t a1, _DWORD *a2, const char *a3)
{
  unint64_t v6;
  unint64_t v7;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  int *v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  int *v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  int *v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  int *v63;
  char *v64;
  char *v65;
  __int128 v66;
  _QWORD **v67;
  _QWORD **v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v75;
  unint64_t v76;
  unint64_t v77;
  BOOL v78;
  unint64_t v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  BOOL v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  int64_t v93;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD v99[4];
  __int16 v100;
  unint64_t v101;
  int v102;
  const char *v103;
  uint64_t v104;
  _QWORD v105[3];
  void *v106;
  unsigned int v107;
  unsigned int v108;
  _BYTE v109[96];
  void *v110;
  _QWORD *v111;
  void *__p;
  _QWORD **v113;
  char v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v101 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 72))(a1, &v101))
    return 0;
  v6 = v101;
  v7 = v101 >> 1;
  v101 >>= 1;
  if (v6 < 2)
    return 1;
  if ((v6 & 1) != 0)
  {
    v98 = 0;
    if ((*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 72))(a1, &v98))
    {
      if (v98 >= 9)
      {
        v99[0] = "reading sparse array with indexing above 8 bits: ";
        v100 = 259;
        (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(v105, a1, v99);
        if (v105[0])
        {
          v102 = 5;
          v103 = (const char *)v98;
          v36 = &v102;
          v37 = (char *)v106;
          if (v107 >= v108)
          {
            v76 = v107 + 1;
            if (v106 <= &v102 && (char *)v106 + 24 * v107 > (char *)&v102)
            {
              v90 = (char *)&v102 - (_BYTE *)v106;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v76, 24);
              v37 = (char *)v106;
              v36 = (int *)((char *)v106 + v90);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v76, 24);
              v36 = &v102;
              v37 = (char *)v106;
            }
          }
          v38 = &v37[24 * v107];
          v39 = *(_OWORD *)v36;
          *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
          *(_OWORD *)v38 = v39;
          ++v107;
          if (v105[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v105);
        }
        if (!v114)
          return 0;
        v40 = (_QWORD **)__p;
        if (__p)
        {
          v41 = v113;
          v42 = __p;
          if (v113 != __p)
          {
            do
              v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
            while (v41 != v40);
            v42 = __p;
          }
          v113 = v40;
          operator delete(v42);
        }
        v31 = v110;
        if (!v110)
          goto LABEL_78;
        v43 = v111;
        v33 = v110;
        if (v111 == v110)
          goto LABEL_77;
        do
        {
          v45 = (void *)*--v43;
          v44 = v45;
          *v43 = 0;
          if (v45)
            operator delete[](v44);
        }
        while (v43 != v31);
        goto LABEL_76;
      }
      v46 = v101;
      if (!(_DWORD)v101)
        return 1;
      while (1)
      {
        v97 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 72))(a1, &v97))
          break;
        v47 = v97 & ~(-1 << v98);
        if (v47 >= (unint64_t)a3)
        {
          v99[0] = "reading a sparse array found index ";
          v100 = 259;
          (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(v105, a1, v99);
          if (v105[0])
          {
            v102 = 5;
            v103 = (const char *)v47;
            v48 = &v102;
            v49 = (char *)v106;
            if (v107 >= v108)
            {
              v81 = v107 + 1;
              if (v106 <= &v102 && (char *)v106 + 24 * v107 > (char *)&v102)
              {
                v93 = (char *)&v102 - (_BYTE *)v106;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v81, 24);
                v49 = (char *)v106;
                v48 = (int *)((char *)v106 + v93);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v81, 24);
                v48 = &v102;
                v49 = (char *)v106;
              }
            }
            v50 = &v49[24 * v107];
            v51 = *(_OWORD *)v48;
            *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
            *(_OWORD *)v50 = v51;
            v52 = ++v107;
            if (v105[0])
            {
              v102 = 3;
              v103 = " but only ";
              v104 = 10;
              v53 = &v102;
              v54 = (char *)v106;
              if (v52 >= v108)
              {
                v82 = v52 + 1;
                v83 = (char *)v106 + 24 * v52 > (char *)&v102;
                if (v106 <= &v102 && v83)
                {
                  v94 = (char *)&v102 - (_BYTE *)v106;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v82, 24);
                  v54 = (char *)v106;
                  v53 = (int *)((char *)v106 + v94);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v82, 24);
                  v53 = &v102;
                  v54 = (char *)v106;
                }
              }
              v55 = &v54[24 * v107];
              v56 = *(_OWORD *)v53;
              *((_QWORD *)v55 + 2) = *((_QWORD *)v53 + 2);
              *(_OWORD *)v55 = v56;
              v57 = ++v107;
              if (v105[0])
              {
                v102 = 5;
                v103 = a3;
                v58 = &v102;
                v59 = (char *)v106;
                if (v57 >= v108)
                {
                  v84 = v57 + 1;
                  v85 = (char *)v106 + 24 * v57 > (char *)&v102;
                  if (v106 <= &v102 && v85)
                  {
                    v95 = (char *)&v102 - (_BYTE *)v106;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v84, 24);
                    v59 = (char *)v106;
                    v58 = (int *)((char *)v106 + v95);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v84, 24);
                    v58 = &v102;
                    v59 = (char *)v106;
                  }
                }
                v60 = &v59[24 * v107];
                v61 = *(_OWORD *)v58;
                *((_QWORD *)v60 + 2) = *((_QWORD *)v58 + 2);
                *(_OWORD *)v60 = v61;
                v62 = ++v107;
                if (v105[0])
                {
                  v102 = 3;
                  v103 = " storage available.";
                  v104 = 19;
                  v63 = &v102;
                  v64 = (char *)v106;
                  if (v62 >= v108)
                  {
                    v86 = v62 + 1;
                    v87 = (char *)v106 + 24 * v62 > (char *)&v102;
                    if (v106 <= &v102 && v87)
                    {
                      v96 = (char *)&v102 - (_BYTE *)v106;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v86, 24);
                      v64 = (char *)v106;
                      v63 = (int *)((char *)v106 + v96);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v86, 24);
                      v63 = &v102;
                      v64 = (char *)v106;
                    }
                  }
                  v65 = &v64[24 * v107];
                  v66 = *(_OWORD *)v63;
                  *((_QWORD *)v65 + 2) = *((_QWORD *)v63 + 2);
                  *(_OWORD *)v65 = v66;
                  ++v107;
                  if (v105[0])
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v105);
                }
              }
            }
          }
          if (!v114)
            return 0;
          v67 = (_QWORD **)__p;
          if (__p)
          {
            v68 = v113;
            v69 = __p;
            if (v113 != __p)
            {
              do
                v68 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v68 - 1);
              while (v68 != v67);
              v69 = __p;
            }
            v113 = v67;
            operator delete(v69);
          }
          v31 = v110;
          if (!v110)
            goto LABEL_78;
          v70 = v111;
          v33 = v110;
          if (v111 == v110)
            goto LABEL_77;
          do
          {
            v72 = (void *)*--v70;
            v71 = v72;
            *v70 = 0;
            if (v72)
              operator delete[](v71);
          }
          while (v70 != v31);
          goto LABEL_76;
        }
        a2[v47] = v97 >> v98;
        if (!--v46)
          return 1;
      }
    }
  }
  else
  {
    if (v7 <= (unint64_t)a3)
    {
      while (1)
      {
        v105[0] = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 72))(a1, v105))
          break;
        *a2++ = v105[0];
        if (!--v7)
          return 1;
      }
      return 0;
    }
    v99[0] = "trying to read an array of ";
    v100 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(v105, a1, v99);
    if (v105[0])
    {
      v102 = 5;
      v103 = (const char *)v101;
      v9 = &v102;
      v10 = (char *)v106;
      if (v107 >= v108)
      {
        v73 = v107 + 1;
        if (v106 <= &v102 && (char *)v106 + 24 * v107 > (char *)&v102)
        {
          v88 = (char *)&v102 - (_BYTE *)v106;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v73, 24);
          v10 = (char *)v106;
          v9 = (int *)((char *)v106 + v88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v73, 24);
          v9 = &v102;
          v10 = (char *)v106;
        }
      }
      v11 = &v10[24 * v107];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v11 = v12;
      v13 = ++v107;
      if (v105[0])
      {
        v102 = 3;
        v103 = " but only ";
        v104 = 10;
        v14 = &v102;
        v15 = (char *)v106;
        if (v13 >= v108)
        {
          v74 = v13 + 1;
          v75 = (char *)v106 + 24 * v13 > (char *)&v102;
          if (v106 <= &v102 && v75)
          {
            v89 = (char *)&v102 - (_BYTE *)v106;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v74, 24);
            v15 = (char *)v106;
            v14 = (int *)((char *)v106 + v89);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v74, 24);
            v14 = &v102;
            v15 = (char *)v106;
          }
        }
        v16 = &v15[24 * v107];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        v18 = ++v107;
        if (v105[0])
        {
          v102 = 5;
          v103 = a3;
          v19 = &v102;
          v20 = (char *)v106;
          if (v18 >= v108)
          {
            v77 = v18 + 1;
            v78 = (char *)v106 + 24 * v18 > (char *)&v102;
            if (v106 <= &v102 && v78)
            {
              v91 = (char *)&v102 - (_BYTE *)v106;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v77, 24);
              v20 = (char *)v106;
              v19 = (int *)((char *)v106 + v91);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v77, 24);
              v19 = &v102;
              v20 = (char *)v106;
            }
          }
          v21 = &v20[24 * v107];
          v22 = *(_OWORD *)v19;
          *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v21 = v22;
          v23 = ++v107;
          if (v105[0])
          {
            v102 = 3;
            v103 = " storage available.";
            v104 = 19;
            v24 = &v102;
            v25 = (char *)v106;
            if (v23 >= v108)
            {
              v79 = v23 + 1;
              v80 = (char *)v106 + 24 * v23 > (char *)&v102;
              if (v106 <= &v102 && v80)
              {
                v92 = (char *)&v102 - (_BYTE *)v106;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v79, 24);
                v25 = (char *)v106;
                v24 = (int *)((char *)v106 + v92);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v79, 24);
                v24 = &v102;
                v25 = (char *)v106;
              }
            }
            v26 = &v25[24 * v107];
            v27 = *(_OWORD *)v24;
            *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
            *(_OWORD *)v26 = v27;
            ++v107;
            if (v105[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v105);
          }
        }
      }
    }
    if (v114)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v113;
        v30 = __p;
        if (v113 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v113 = v28;
        operator delete(v30);
      }
      v31 = v110;
      if (!v110)
        goto LABEL_78;
      v32 = v111;
      v33 = v110;
      if (v111 == v110)
      {
LABEL_77:
        v111 = v31;
        operator delete(v33);
LABEL_78:
        if (v106 != v109)
          free(v106);
        return 0;
      }
      do
      {
        v35 = (void *)*--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          operator delete[](v34);
      }
      while (v32 != v31);
LABEL_76:
      v33 = v110;
      goto LABEL_77;
    }
  }
  return 0;
}

const char *mlir::SideEffects::DefaultResource::getName(mlir::SideEffects::DefaultResource *this)
{
  return "<Default>";
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::DimOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::DimOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::DimOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::AsmParser::parseType<mlir::TensorType>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v20))
    return 0;
  v5 = v20;
  v6 = *(void **)(*(_QWORD *)v20 + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v6 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v5 = 0;
  }
  *a2 = v5;
  if (v5)
    return 1;
  v18 = "invalid kind of type specified";
  v19 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v21, a1, v4, &v18);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  if (v28)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v27;
      v12 = __p;
      if (v27 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v27 = v10;
      operator delete(v12);
    }
    v13 = v24;
    if (v24)
    {
      v14 = v25;
      v15 = v24;
      if (v25 != v24)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v24;
      }
      v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23)
      free(v22);
  }
  return v8;
}

uint64_t mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
          v31 = 79;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::MemoryEffectOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
          v31 = 79;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemoryEffectOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v23 = 79;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[159];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpFoldResult,6u>>::append(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;

  v3 = a3;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v6 + a2;
  if (v7 > *(unsigned int *)(a1 + 12))
  {
    v14 = *(_QWORD *)a1 + (v6 << 6);
    if (*(_QWORD *)a1 <= a3 && v14 > a3)
    {
      v16 = a3 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpFoldResult,6u>,false>::grow(a1, v7);
      v3 = *(_QWORD *)a1 + v16;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpFoldResult,6u>,false>::grow(a1, v7);
    }
  }
  v8 = *(unsigned int *)(a1 + 8);
  if (a2)
  {
    v9 = (_QWORD *)(*(_QWORD *)a1 + (v8 << 6));
    v10 = a2;
    while (1)
    {
      v12 = v9 + 2;
      *v9 = v9 + 2;
      v9[1] = 0x600000000;
      if (v9 == (_QWORD *)v3)
        goto LABEL_7;
      v13 = *(unsigned int *)(v3 + 8);
      if (!*(_DWORD *)(v3 + 8))
        goto LABEL_7;
      if (v13 < 7)
      {
        v11 = *(unsigned int *)(v3 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v9 + 2, *(unsigned int *)(v3 + 8), 8);
        v11 = *(unsigned int *)(v3 + 8);
        if (!(_DWORD)v11)
          goto LABEL_6;
        v12 = (void *)*v9;
      }
      memcpy(v12, *(const void **)v3, 8 * v11);
LABEL_6:
      *((_DWORD *)v9 + 2) = v13;
LABEL_7:
      v9 += 8;
      if (!--v10)
      {
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        break;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v8 + a2;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpFoldResult,6u>,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 64, &v14);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = v7 << 6;
    v9 = v4;
    do
    {
      *v9 = v9 + 2;
      v9[1] = 0x600000000;
      if (v6[2])
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v9, (uint64_t)v6);
      v9 += 8;
      v6 += 16;
      v8 -= 64;
    }
    while (v8);
    v6 = *(_DWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        v12 = *(char **)((char *)v6 + v11 - 64);
        if ((char *)v6 + v11 - 48 != v12)
          free(v12);
        v11 -= 64;
      }
      while (v11);
      v6 = *(_DWORD **)a1;
    }
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::DimOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::DimOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::DimOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::DimOp,mlir::Value &,mlir::detail::TypedValue<mlir::IndexType>>(mlir::IndexType **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.dim", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"tensor.dim";
    v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::tensor::DimOp::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::DimOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::ExtractOp,mlir::detail::TypedValue<mlir::TensorType>,mlir::OperandRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  mlir::GenericProgramPoint *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.extract", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"tensor.extract";
    v18[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  mlir::tensor::ExtractOp::build((uint64_t)a1, (uint64_t)v21, v11, v20[0], v20[1]);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

uint64_t **llvm::find_if<llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> &,std::optional<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>> mlir::MemoryEffectOpInterface::getEffectOnValue<mlir::MemoryEffects::Allocate>(mlir::Value)::{lambda(llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> & &)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t **result;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  __guard *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  _QWORD *v25;
  uint64_t **v26;
  const char *v27;
  unint64_t v28;

  result = *(uint64_t ***)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = &result[5 * v4];
    v6 = 40 * v4;
    while (1)
    {
      v8 = **result;
      if ((v9 & 1) == 0)
      {
        v26 = result;
        v24 = v5;
        v25 = a2;
        v22 = **result;
        v23 = v6;
        v8 = v22;
        v6 = v23;
        v5 = v24;
        a2 = v25;
        v13 = v12;
        result = v26;
        if (v13)
        {
          v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Allocate]";
          v28 = 79;
          v14 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
          if (v28 >= v14)
            v15 = v14;
          else
            v15 = v28;
          v16 = &v27[v15];
          v17 = v28 - v15;
          v18 = 18;
          if (v17 < 0x12)
            v18 = v17;
          v19 = (uint64_t)&v16[v18];
          v20 = v17 - v18;
          if (v20 >= v20 - 1)
            v21 = v20 - 1;
          else
            v21 = v20;
          mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v19, v21);
          v8 = v22;
          v6 = v23;
          v5 = v24;
          a2 = v25;
          result = v26;
        }
      }
      if (v8 == v7[289])
      {
        v10 = (unint64_t)result[2];
        v11 = v10 <= 7 ? 0 : v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
        if (*a2 == v11)
          break;
      }
      result += 5;
      v6 -= 40;
      if (!v6)
        return v5;
    }
  }
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine(llvm::hashing::detail::hash_combine_recursive_helper *this, uint64_t a2, char *__src, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  llvm::hashing::detail::hash_combine_recursive_helper *v12;
  unint64_t v13;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  llvm::hashing::detail::hash_combine_recursive_helper *v20;
  char v21;
  char v22;
  llvm::hashing::detail::hash_combine_recursive_helper *v23;
  llvm::hashing::detail::hash_combine_recursive_helper *v24;
  llvm::hashing::detail::hash_combine_recursive_helper *v25;
  char *v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  __int128 *v30;
  char *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;

  if (!a2)
    return llvm::hashing::detail::hash_short(this, __src - (char *)this, *((_QWORD *)this + 15));
  if (this != (llvm::hashing::detail::hash_combine_recursive_helper *)__src && __src != a4)
  {
    if ((char *)this + 1 != __src)
    {
      if (__src + 1 == a4)
      {
        v17 = *(a4 - 1);
        if (a4 - 1 != (char *)this)
          memmove((char *)this + 1, this, a4 - 1 - (char *)this);
        *(_BYTE *)this = v17;
        goto LABEL_42;
      }
      v7 = __src - (char *)this;
      v8 = a4 - __src;
      if (__src - (char *)this != a4 - __src)
      {
        v18 = __src - (char *)this;
        do
        {
          v19 = v18;
          v18 = v8;
          v8 = v19 % v8;
        }
        while (v8);
        if (v18)
        {
          v20 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v18);
          do
          {
            v22 = *((_BYTE *)v20 - 1);
            v20 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v20 - 1);
            v21 = v22;
            v23 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v20 + v7);
            v24 = v20;
            do
            {
              v25 = v24;
              v24 = v23;
              *(_BYTE *)v25 = *(_BYTE *)v23;
              v26 = (char *)(a4 - (char *)v23);
              v27 = __OFSUB__(v7, v26);
              v29 = v7 - (_QWORD)v26;
              v28 = (v29 < 0) ^ v27;
              v23 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v29);
              if (v28)
                v23 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v24 + v7);
            }
            while (v23 != v20);
            *(_BYTE *)v24 = v21;
          }
          while (v20 != this);
        }
        goto LABEL_42;
      }
      v9 = &a4[~(unint64_t)__src];
      if (v9 >= &__src[~(unint64_t)this])
        v9 = &__src[~(unint64_t)this];
      v10 = (unint64_t)(v9 + 1);
      v11 = __src;
      v12 = this;
      if (v10 < 8)
        goto LABEL_38;
      if (&__src[v10] > (char *)this)
      {
        v11 = __src;
        v12 = this;
        if ((char *)this + v10 > __src)
          goto LABEL_38;
      }
      if (v10 >= 0x20)
      {
        v13 = v10 & 0xFFFFFFFFFFFFFFE0;
        v30 = (__int128 *)((char *)this + 16);
        v31 = __src + 16;
        v32 = v10 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v33 = *(v30 - 1);
          v34 = *v30;
          v35 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *v30 = v35;
          *((_OWORD *)v31 - 1) = v33;
          *(_OWORD *)v31 = v34;
          v30 += 2;
          v31 += 32;
          v32 -= 32;
        }
        while (v32);
        if (v10 == v13)
          goto LABEL_42;
        if ((v10 & 0x18) == 0)
        {
          v12 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v13);
          v11 = &__src[v13];
          goto LABEL_38;
        }
      }
      else
      {
        v13 = 0;
      }
      v11 = &__src[v10 & 0xFFFFFFFFFFFFFFF8];
      v12 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + (v10 & 0xFFFFFFFFFFFFFFF8));
      v36 = (uint64_t *)((char *)this + v13);
      v37 = &__src[v13];
      v38 = v13 - (v10 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v39 = *v36;
        *v36++ = *(_QWORD *)v37;
        *(_QWORD *)v37 = v39;
        v37 += 8;
        v38 += 8;
      }
      while (v38);
      if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_42;
LABEL_38:
      v40 = v11 + 1;
      v41 = (char *)v12 + 1;
      do
      {
        v42 = *(v41 - 1);
        *(v41 - 1) = *(v40 - 1);
        *(v40 - 1) = v42;
        if (v41 == __src)
          break;
        ++v41;
      }
      while (v40++ != a4);
      goto LABEL_42;
    }
    v15 = *(_BYTE *)this;
    v16 = a4 - __src;
    memmove(this, __src, a4 - __src);
    *((_BYTE *)this + v16) = v15;
  }
LABEL_42:
  v44 = *((_QWORD *)this + 9);
  v45 = *((_QWORD *)this + 11);
  v46 = *((_QWORD *)this + 1);
  v47 = *((_QWORD *)this + 12);
  v48 = *((_QWORD *)this + 13);
  v50 = *((_QWORD *)this + 6);
  v49 = *((_QWORD *)this + 7);
  v51 = *((_QWORD *)this + 14);
  v52 = v51 ^ (0xB492B66FBE98F273 * __ROR8__(v44 + *((_QWORD *)this + 8) + v45 + v46, 37));
  v53 = v45 - 0x4B6D499041670D8DLL * __ROR8__(v47 + v44 + v50, 42);
  v54 = v48 + *((_QWORD *)this + 10);
  v55 = *(_QWORD *)this - 0x4B6D499041670D8DLL * v47;
  v56 = v55 + v48;
  v58 = *((_QWORD *)this + 2);
  v57 = *((_QWORD *)this + 3);
  v59 = v55 + v46 + v58;
  v60 = *((_QWORD *)this + 5);
  v61 = v53 + v60;
  v62 = __ROR8__(v54, 33);
  v63 = __ROR8__(v56 + v57 + v52, 21) + v55 + __ROR8__(v59, 44);
  v64 = v59 + v57;
  v65 = v58 + v61;
  v66 = *((_QWORD *)this + 4) + v51 - 0x4B6D499041670D8DLL * v62;
  v67 = v60 + v50 + v66;
  v68 = __ROR8__(v66 + v49 + v65, 21) + v66 + __ROR8__(v67, 44);
  *((_QWORD *)this + 11) = v64;
  *((_QWORD *)this + 12) = v63;
  *((_QWORD *)this + 13) = v67 + v49;
  *((_QWORD *)this + 14) = v68;
  *((_QWORD *)this + 9) = v61;
  *((_QWORD *)this + 10) = v52;
  *((_QWORD *)this + 8) = 0xB492B66FBE98F273 * v62;
  v69 = v52
      - 0x4B6D499041670D8DLL * (v61 ^ (v61 >> 47))
      - 0x622015F714C7D297
      * ((0x9DDFEA08EB382D69
        * ((v67 + v49) ^ ((0x9DDFEA08EB382D69 * ((v67 + v49) ^ v64)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                               * ((v67 + v49) ^ v64)))) ^ ((0x9DDFEA08EB382D69 * ((v67 + v49) ^ ((0x9DDFEA08EB382D69 * ((v67 + v49) ^ v64)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v67 + v49) ^ v64)))) >> 47));
  v70 = 0x9DDFEA08EB382D69
      * (v68 ^ ((0x9DDFEA08EB382D69 * (v68 ^ v63)) >> 47) ^ (0x9DDFEA08EB382D69 * (v68 ^ v63)));
  v71 = 0xB492B66FBE98F273
      * (v62 + ((__src - (char *)this + a2) ^ ((unint64_t)(__src - (char *)this + a2) >> 47)))
      - 0x622015F714C7D297 * (v70 ^ (v70 >> 47));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v71 ^ ((0x9DDFEA08EB382D69 * (v71 ^ v69)) >> 47) ^ (0x9DDFEA08EB382D69 * (v71 ^ v69)))) ^ ((0x9DDFEA08EB382D69 * (v71 ^ ((0x9DDFEA08EB382D69 * (v71 ^ v69)) >> 47) ^ (0x9DDFEA08EB382D69 * (v71 ^ v69)))) >> 47));
}

uint64_t mlir::AsmParser::parseType<mlir::BaseMemRefType>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v20))
    return 0;
  v5 = v20;
  v6 = *(void **)(*(_QWORD *)v20 + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id
    && v6 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v5 = 0;
  }
  *a2 = v5;
  if (v5)
    return 1;
  v18 = "invalid kind of type specified";
  v19 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v21, a1, v4, &v18);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  if (v28)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v27;
      v12 = __p;
      if (v27 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v27 = v10;
      operator delete(v12);
    }
    v13 = v24;
    if (v24)
    {
      v14 = v25;
      v15 = v24;
      if (v25 != v24)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v24;
      }
      v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23)
      free(v22);
  }
  return v8;
}

uint64_t llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t *i;
  uint64_t v15;
  llvm::raw_ostream *v16;
  const char *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  const char *v24;
  unint64_t v25;
  void *v26;

  v13 = result;
  if (result != a3 || a2 != a4)
  {
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a5 + 32))(a5, *(_QWORD *)(*(_QWORD *)(result + 32 * a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v13 != a3 || a2 + 1 != a4)
    {
      if (v13 != a3)
      {
        for (i = (uint64_t *)(v13 + 32 * a2 + 56); ; i += 4)
        {
          v16 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
          v17 = *(const char **)a7;
          v18 = *(_QWORD *)(a7 + 8);
          v19 = (void *)*((_QWORD *)v16 + 4);
          if (v18 > *((_QWORD *)v16 + 3) - (_QWORD)v19)
          {
            llvm::raw_ostream::write(v16, v17, *(_QWORD *)(a7 + 8));
          }
          else if (v18)
          {
            memcpy(v19, v17, *(_QWORD *)(a7 + 8));
            *((_QWORD *)v16 + 4) += v18;
          }
          v15 = *i;
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a5 + 32))(a5, *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      v20 = ~a2 + a4;
      v21 = (uint64_t *)(v13 + 32 * a2 + 56);
      do
      {
        v23 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
        v24 = *(const char **)a7;
        v25 = *(_QWORD *)(a7 + 8);
        v26 = (void *)*((_QWORD *)v23 + 4);
        if (v25 > *((_QWORD *)v23 + 3) - (_QWORD)v26)
        {
          llvm::raw_ostream::write(v23, v24, *(_QWORD *)(a7 + 8));
        }
        else if (v25)
        {
          memcpy(v26, v24, *(_QWORD *)(a7 + 8));
          *((_QWORD *)v23 + 4) += v25;
        }
        v22 = *v21;
        v21 += 4;
        result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a5 + 32))(a5, *(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

llvm::raw_ostream *mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>(uint64_t a1, uint64_t *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  llvm::raw_ostream *result;
  _BYTE *v13;
  const char *v14;
  uint64_t v15;

  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v5 = v4;
  v6 = (_DWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 <= 3uLL)
  {
    v5 = llvm::raw_ostream::write(v4, " -> ", 4uLL);
    v7 = *a2;
    v8 = a2[1];
    v10 = a2[2];
    v9 = a2[3];
    if (*a2 != v10)
      goto LABEL_8;
LABEL_5:
    if (v8 == v9)
      goto LABEL_6;
    goto LABEL_8;
  }
  *v6 = 540945696;
  *((_QWORD *)v4 + 4) += 4;
  v7 = *a2;
  v8 = a2[1];
  v10 = a2[2];
  v9 = a2[3];
  if (*a2 == v10)
    goto LABEL_5;
LABEL_8:
  if (v7 == v10
    && v8 + 1 == v9
    && *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v8) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    v14 = ", ";
    v15 = 2;
    return (llvm::raw_ostream *)llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(*a2, a2[1], a2[2], a2[3], a1, a1, (uint64_t)&v14);
  }
LABEL_6:
  v11 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5, 40);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v11 + 1;
    *v11 = 40;
  }
  v14 = ", ";
  v15 = 2;
  result = (llvm::raw_ostream *)llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(*a2, a2[1], a2[2], a2[3], a1, a1, (uint64_t)&v14);
  v13 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v5 + 3))
    return llvm::raw_ostream::write(v5, 41);
  *((_QWORD *)v5 + 4) = v13 + 1;
  *v13 = 41;
  return result;
}

uint64_t llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t NextResultAtOffset;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  const char *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  const char *v23;
  unint64_t v24;
  void *v25;

  v13 = this;
  if (this != a3 || a2 != a4)
  {
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(this, a2);
    this = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a5 + 32))(a5, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    v15 = a2 + 1;
    if (v13 != a3 || v15 != a4)
    {
      if (v13 != a3)
      {
        while (1)
        {
          v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
          v18 = *(const char **)a7;
          v19 = *(_QWORD *)(a7 + 8);
          v20 = (void *)*((_QWORD *)v17 + 4);
          if (v19 > *((_QWORD *)v17 + 3) - (_QWORD)v20)
          {
            llvm::raw_ostream::write(v17, v18, *(_QWORD *)(a7 + 8));
          }
          else if (v19)
          {
            memcpy(v20, v18, *(_QWORD *)(a7 + 8));
            *((_QWORD *)v17 + 4) += v19;
          }
          v16 = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, v15);
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a5 + 32))(a5, *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8);
          ++v15;
        }
      }
      do
      {
        v22 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
        v23 = *(const char **)a7;
        v24 = *(_QWORD *)(a7 + 8);
        v25 = (void *)*((_QWORD *)v22 + 4);
        if (v24 > *((_QWORD *)v22 + 3) - (_QWORD)v25)
        {
          llvm::raw_ostream::write(v22, v23, *(_QWORD *)(a7 + 8));
        }
        else if (v24)
        {
          memcpy(v25, v23, *(_QWORD *)(a7 + 8));
          *((_QWORD *)v22 + 4) += v24;
        }
        v21 = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, v15);
        this = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a5 + 32))(a5, *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
        ++v15;
      }
      while (a4 != v15);
    }
  }
  return this;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t mlir::InFlightDiagnostic::operator<<<unsigned long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v11;
  BOOL v12;
  char *v13;
  int v14;
  uint64_t v15;

  if (*(_QWORD *)a1)
  {
    v3 = a1 + 24;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *a2;
    v14 = 5;
    v15 = v5;
    v6 = *(unsigned int *)(a1 + 32);
    v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      v11 = v6 + 1;
      v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        v4 = *(_QWORD *)(a1 + 24);
        v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        v4 = *(_QWORD *)(a1 + 24);
        v7 = &v14;
      }
    }
    v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    v9 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  v5 = *(void **)(*(_QWORD *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v4 = 0;
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v6 = &v40;
    v7 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v7 = (char *)v46;
        v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v6 = &v40;
        v7 = (char *)v46;
      }
    }
    v8 = &v7[24 * v47];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::IntegerAttr]";
  v41 = 67;
  v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10)
      v11 = v10;
    else
      v11 = v41;
    v12 = 18;
    if (v41 - v11 < 0x12)
      v12 = v41 - v11;
    v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1)
      --v13;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v11 + v12);
    v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v14 = &v40;
      v15 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v15 = (char *)v46;
          v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v14 = &v40;
          v15 = (char *)v46;
        }
      }
      v16 = &v15[24 * v47];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v47;
      if (v44)
      {
        v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v19 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v19 = (char *)v46;
            v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v18 = &v40;
            v19 = (char *)v46;
          }
        }
        v20 = &v19[24 * v47];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v47;
      }
    }
  }
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v53;
      v25 = __p;
      if (v53 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v53 = v23;
      operator delete(v25);
    }
    v26 = v50;
    if (v50)
    {
      v27 = v51;
      v28 = v50;
      if (v51 != v50)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v50;
      }
      v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49)
      free(v46);
  }
  return v22;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(a1, &v39))
    return 0;
  v4 = v39;
  if (!v39)
    return 1;
  v5 = *(void **)(*(_QWORD *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v4 = 0;
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v6 = &v40;
    v7 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v7 = (char *)v46;
        v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v6 = &v40;
        v7 = (char *)v46;
      }
    }
    v8 = &v7[24 * v47];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::IntegerAttr]";
  v41 = 67;
  v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10)
      v11 = v10;
    else
      v11 = v41;
    v12 = 18;
    if (v41 - v11 < 0x12)
      v12 = v41 - v11;
    v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1)
      --v13;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v11 + v12);
    v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v14 = &v40;
      v15 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v15 = (char *)v46;
          v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v14 = &v40;
          v15 = (char *)v46;
        }
      }
      v16 = &v15[24 * v47];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v47;
      if (v44)
      {
        v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v19 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v19 = (char *)v46;
            v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v18 = &v40;
            v19 = (char *)v46;
          }
        }
        v20 = &v19[24 * v47];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v47;
      }
    }
  }
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v53;
      v25 = __p;
      if (v53 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v53 = v23;
      operator delete(v25);
    }
    v26 = v50;
    if (v50)
    {
      v27 = v51;
      v28 = v50;
      if (v51 != v50)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v50;
      }
      v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49)
      free(v46);
  }
  return v22;
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  if ((v4 & 1) == 0)
  {
    v11 = a2;
    v12 = a1;
    a2 = v11;
    a1 = v12;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a2 = v11;
      a1 = v12;
    }
  }
  v5 = *a1;
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v15[0] = v5;
  v13 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v13, (_QWORD *)v15 + 1, (unint64_t)v16, *a2);
  v14 = v13;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v14, v6, (unint64_t)v16, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v15, v14, v7, (char *)v16);
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  v5 = *(void **)(*(_QWORD *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
    v4 = 0;
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v6 = &v40;
    v7 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v7 = (char *)v46;
        v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v6 = &v40;
        v7 = (char *)v46;
      }
    }
    v8 = &v7[24 * v47];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::AffineMapAttr]";
  v41 = 69;
  v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10)
      v11 = v10;
    else
      v11 = v41;
    v12 = 18;
    if (v41 - v11 < 0x12)
      v12 = v41 - v11;
    v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1)
      --v13;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v11 + v12);
    v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v14 = &v40;
      v15 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v15 = (char *)v46;
          v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v14 = &v40;
          v15 = (char *)v46;
        }
      }
      v16 = &v15[24 * v47];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v47;
      if (v44)
      {
        v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v19 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v19 = (char *)v46;
            v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v18 = &v40;
            v19 = (char *)v46;
          }
        }
        v20 = &v19[24 * v47];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v47;
      }
    }
  }
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v53;
      v25 = __p;
      if (v53 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v53 = v23;
      operator delete(v25);
    }
    v26 = v50;
    if (v50)
    {
      v27 = v51;
      v28 = v50;
      if (v51 != v50)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v50;
      }
      v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49)
      free(v46);
  }
  return v22;
}

uint64_t mlir::AsmParser::parseOptionalInteger<long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  const char *v25;
  __int16 v26;
  void *v27;
  unsigned int v28;
  void *__p;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  _QWORD **v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v28 = 1;
  v27 = 0;
  v5 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 352))(a1, &v27);
  if (v5 < 0x100u || v5 == 0)
  {
    v7 = v5;
    v8 = HIBYTE(v5);
    if (v28 < 0x41)
      return v7 | (v8 << 8);
    goto LABEL_46;
  }
  llvm::APInt::sextOrTrunc((char *)&v27, 0x40u, (uint64_t)&__p);
  v9 = v30;
  if (v30 >= 0x41)
  {
    v12 = v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
    v13 = __p;
    if (v12 <= 0x40)
    {
      *a2 = *(_QWORD *)__p;
    }
    else
    {
      v10 = -1;
      *a2 = -1;
      if (!v13)
      {
        v11 = v28;
        v30 = v28;
        if (v28 > 0x40)
          goto LABEL_20;
        goto LABEL_14;
      }
    }
    operator delete[](v13);
    v10 = *a2;
    v11 = v28;
    v30 = v28;
    if (v28 > 0x40)
      goto LABEL_20;
LABEL_14:
    if (v11)
      v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    else
      v14 = 0;
    __p = (void *)(v14 & v10);
LABEL_21:
    if (__p == v27)
      goto LABEL_22;
    goto LABEL_27;
  }
  v10 = (uint64_t)__p;
  *a2 = (uint64_t)__p;
  v11 = v28;
  v30 = v28;
  if (v28 <= 0x40)
    goto LABEL_14;
LABEL_20:
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, v10, 0);
  if (v30 <= 0x40)
    goto LABEL_21;
  v15 = llvm::APInt::equalSlowCase((const void **)&__p, (const void **)&v27);
  if (__p)
    operator delete[](__p);
  if (v15)
  {
LABEL_22:
    v7 = 1;
    v8 = 1;
    if (v28 < 0x41)
      return v7 | (v8 << 8);
    goto LABEL_46;
  }
LABEL_27:
  v25 = "integer value too large";
  v26 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&__p, a1, v4, &v25);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  if (v37)
  {
    v16 = (_QWORD **)v35;
    if (v35)
    {
      v17 = v36;
      v18 = v35;
      if (v36 != v35)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = v35;
      }
      v36 = v16;
      operator delete(v18);
    }
    v19 = v33;
    if (v33)
    {
      v20 = v34;
      v21 = v33;
      if (v34 != v33)
      {
        do
        {
          v23 = (void *)*--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            operator delete[](v22);
        }
        while (v20 != v19);
        v21 = v33;
      }
      v34 = v19;
      operator delete(v21);
    }
    if (v31 != &v32)
      free(v31);
  }
  v7 = 0;
  v8 = 1;
  if (v28 >= 0x41)
  {
LABEL_46:
    if (v27)
      operator delete[](v27);
  }
  return v7 | (v8 << 8);
}

char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(_QWORD *a1, uint64_t *a2, _QWORD *__dst, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return (char *)(__dst + 1);
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v20 = 0xB492B66FBE98F273 * __ROR8__(v14 + a1[10], 33);
      v21 = *a1 - 0x4B6D499041670D8DLL * v13;
      v22 = v21 + v14;
      v24 = a1[2];
      v23 = a1[3];
      v25 = a1[5];
      v26 = v19 + v25;
      v27 = a1[4] + v17 + v20;
      v28 = v21 + v12 + v24;
      v29 = v25 + v16 + v27;
      a1[12] = __ROR8__(v22 + v23 + v18, 21) + v21 + __ROR8__(v28, 44);
      a1[13] = v29 + v15;
      a1[14] = __ROR8__(v27 + v15 + v24 + v26, 21) + v27 + __ROR8__(v29, 44);
      a1[10] = v18;
      a1[11] = v28 + v23;
      a1[8] = v20;
      a1[9] = v26;
      *a2 = v9 + 64;
      v30 = 8 - v8;
      v31 = (char *)a1 + 8 - v8;
      if ((unint64_t)v31 > a4)
        return (char *)a1;
      goto LABEL_7;
    }
    v32 = a1[15];
    v33 = __ROR8__(v32 ^ 0xB492B66FBE98F273, 49);
    v34 = v32 ^ (v32 >> 47);
    v35 = a1[1];
    v36 = v35 + v32 + v33;
    v37 = a1[6];
    v38 = a1[7];
    v39 = a1[5];
    v40 = v39 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v32 - 0x4B6D499041670D8DLL * v32, 42);
    v41 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v42 = 0x9DDFEA08EB382D69
        * (v32 ^ (((0x9DDFEA08EB382D69 * (v34 ^ (0xB492B66FBE98F273 * v32))) ^ v32) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v34 ^ (0xB492B66FBE98F273 * v32))));
    v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    v44 = 0xB492B66FBE98F273 * __ROR8__(v34 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 33);
    v45 = *a1 - 0x6D8ED9027DD26057 * v32;
    v47 = a1[2];
    v46 = a1[3];
    v48 = v45 + v35 + v47;
    v49 = v43 ^ (0xB492B66FBE98F273 * __ROR8__(v36, 37));
    v50 = v44 + a1[4] + v43;
    a1[8] = v44;
    a1[9] = v40;
    a1[10] = v49;
    a1[11] = v48 + v46;
    a1[12] = __ROR8__(v48, 44) + v45 + __ROR8__(v45 + v34 + v46 + v49, 21);
    a1[13] = v39 + v37 + v50 + v38;
    a1[14] = __ROR8__(v39 + v37 + v50, 44) + v50 + __ROR8__(v40 + v47 + v38 + v50, 21);
    *a2 = 64;
    v30 = 8 - v8;
    v31 = (char *)a1 + 8 - v8;
    if ((unint64_t)v31 <= a4)
    {
LABEL_7:
      memcpy(a1, (char *)&__src + v8, v30);
      return v31;
    }
  }
  return (char *)a1;
}

char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(_QWORD *a1, uint64_t *a2, _DWORD *__dst, unint64_t a4, int a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return (char *)(__dst + 1);
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v20 = 0xB492B66FBE98F273 * __ROR8__(v14 + a1[10], 33);
      v21 = *a1 - 0x4B6D499041670D8DLL * v13;
      v22 = v21 + v14;
      v24 = a1[2];
      v23 = a1[3];
      v25 = a1[5];
      v26 = v19 + v25;
      v27 = a1[4] + v17 + v20;
      v28 = v21 + v12 + v24;
      v29 = v25 + v16 + v27;
      a1[12] = __ROR8__(v22 + v23 + v18, 21) + v21 + __ROR8__(v28, 44);
      a1[13] = v29 + v15;
      a1[14] = __ROR8__(v27 + v15 + v24 + v26, 21) + v27 + __ROR8__(v29, 44);
      a1[10] = v18;
      a1[11] = v28 + v23;
      a1[8] = v20;
      a1[9] = v26;
      *a2 = v9 + 64;
      v30 = 4 - v8;
      v31 = (char *)a1 + 4 - v8;
      if ((unint64_t)v31 > a4)
        return (char *)a1;
      goto LABEL_7;
    }
    v32 = a1[15];
    v33 = __ROR8__(v32 ^ 0xB492B66FBE98F273, 49);
    v34 = v32 ^ (v32 >> 47);
    v35 = a1[1];
    v36 = v35 + v32 + v33;
    v37 = a1[6];
    v38 = a1[7];
    v39 = a1[5];
    v40 = v39 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v32 - 0x4B6D499041670D8DLL * v32, 42);
    v41 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v42 = 0x9DDFEA08EB382D69
        * (v32 ^ (((0x9DDFEA08EB382D69 * (v34 ^ (0xB492B66FBE98F273 * v32))) ^ v32) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v34 ^ (0xB492B66FBE98F273 * v32))));
    v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    v44 = 0xB492B66FBE98F273 * __ROR8__(v34 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 33);
    v45 = *a1 - 0x6D8ED9027DD26057 * v32;
    v47 = a1[2];
    v46 = a1[3];
    v48 = v45 + v35 + v47;
    v49 = v43 ^ (0xB492B66FBE98F273 * __ROR8__(v36, 37));
    v50 = v44 + a1[4] + v43;
    a1[8] = v44;
    a1[9] = v40;
    a1[10] = v49;
    a1[11] = v48 + v46;
    a1[12] = __ROR8__(v48, 44) + v45 + __ROR8__(v45 + v34 + v46 + v49, 21);
    a1[13] = v39 + v37 + v50 + v38;
    a1[14] = __ROR8__(v39 + v37 + v50, 44) + v50 + __ROR8__(v40 + v47 + v38 + v50, 21);
    *a2 = 64;
    v30 = 4 - v8;
    v31 = (char *)a1 + 4 - v8;
    if ((unint64_t)v31 <= a4)
    {
LABEL_7:
      memcpy(a1, (char *)&__src + v8, v30);
      return v31;
    }
  }
  return (char *)a1;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(uint64_t *__sz, uint64_t a2, char a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  char *buffer;
  uint64_t v20;

  v5 = __sz + 10;
  __sz[10] += a2;
  v6 = (1 << a3) - 1;
  v7 = *__sz;
  v8 = -(1 << a3);
  v9 = ((v6 + *__sz) & v8) - *__sz;
  if (*__sz)
    v10 = v9 + a2 > (unint64_t)(__sz[1] - *__sz);
  else
    v10 = 1;
  if (v10)
  {
    v11 = a2 + (1 << a3);
    v12 = v11 - 1;
    if ((unint64_t)(v11 - 1) <= 0x1000)
    {
      v17 = *((_DWORD *)__sz + 6) >> 7;
      if (v17 >= 0x1E)
        LOBYTE(v17) = 30;
      v18 = 4096 << v17;
      buffer = (char *)llvm::allocate_buffer(4096 << v17, (std::align_val_t)8uLL);
      v20 = *((unsigned int *)__sz + 6);
      if (v20 >= *((_DWORD *)__sz + 7))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(__sz + 2), __sz + 4, v20 + 1, 8);
        LODWORD(v20) = *((_DWORD *)__sz + 6);
      }
      *(_QWORD *)(__sz[2] + 8 * v20) = buffer;
      ++*((_DWORD *)__sz + 6);
      result = (unint64_t)&buffer[v6] & v8;
      *__sz = result + a2;
      __sz[1] = (uint64_t)&buffer[v18];
    }
    else
    {
      v13 = llvm::allocate_buffer(v11 - 1, (std::align_val_t)8uLL);
      v14 = *((unsigned int *)__sz + 18);
      if (v14 >= *((_DWORD *)__sz + 19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(__sz + 8), v5, v14 + 1, 16);
        LODWORD(v14) = *((_DWORD *)__sz + 18);
      }
      v15 = (_QWORD *)(__sz[8] + 16 * v14);
      *v15 = v13;
      v15[1] = v12;
      ++*((_DWORD *)__sz + 18);
      return ((unint64_t)v13 + v6) & v8;
    }
  }
  else
  {
    result = v7 + v9;
    *__sz = v7 + v9 + a2;
  }
  return result;
}

uint64_t mlir::InFlightDiagnostic::append<char const*&>(uint64_t a1, const char **a2)
{
  const char *v3;
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  const char *v16;
  size_t v17;

  if (*(_QWORD *)a1)
  {
    v3 = *a2;
    if (*a2)
      v4 = strlen(*a2);
    else
      v4 = 0;
    v15 = 3;
    v16 = v3;
    v17 = v4;
    v5 = *(unsigned int *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = &v15;
    if (v5 >= *(_DWORD *)(a1 + 36))
    {
      v11 = a1 + 24;
      v12 = v5 + 1;
      v13 = v6 + 24 * v5 > (unint64_t)&v15;
      if (v6 <= (unint64_t)&v15 && v13)
      {
        v14 = (char *)&v15 - v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v12, 24);
        v6 = *(_QWORD *)(a1 + 24);
        v7 = (int *)&v14[v6];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v12, 24);
        v6 = *(_QWORD *)(a1 + 24);
        v7 = &v15;
      }
    }
    v8 = v6 + 24 * *(unsigned int *)(a1 + 32);
    v9 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

BOOL mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BOOL8 result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t NextResultAtOffset;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a2[1];
  if (v3 - v2 != a2[3] - v4)
    return 0;
  v5 = *a1;
  v6 = *a2;
  v7 = *a1 == a1[2];
  if (v3 == v2 && *a1 == a1[2])
    return 1;
  v9 = *(_QWORD *)(*(_QWORD *)(v5 + 32 * v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(*a2, a2[1]) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v7)
  {
    if (v9 == v10)
    {
      v17 = v4 + 1;
      v18 = (uint64_t *)(v5 + 32 * v2 + 56);
      do
      {
        v19 = *v18;
        v18 += 4;
        v20 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, v17++);
      }
      while (v20 == (*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
    }
    return 0;
  }
  if (v9 != v10)
    return 0;
  v11 = v4 + 1;
  v12 = (uint64_t *)(v5 + 32 * v2 + 56);
  v13 = ~v2 + v3;
  do
  {
    result = v13 == 0;
    if (!v13)
      break;
    v14 = *v12;
    v12 += 4;
    v15 = *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
    v16 = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, v11);
    result = 0;
    ++v11;
    --v13;
  }
  while (v15 == (*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
  return result;
}

uint64_t mlir::OpAsmDialectInterface::getAlias()
{
  return 0;
}

{
  return 0;
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __guard v151;
  __guard v152;
  __guard v153;
  __guard v154;
  __guard v155;
  __guard v156;
  __guard v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      v186 = 109;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[305];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v186 = 82;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = p_vtable[486];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[504];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[158];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v186 = 90;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v29[152] == (_QWORD)a1;
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  void **p_vtable;
  void *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **v20;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  const char *v162;
  unint64_t v163;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v163 = 83;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v153;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v163 = 81;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[211];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v163 = 104;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = p_vtable[501];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v163 = 86;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v163 = 82;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[192];
  v20 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v163 = 95;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[486];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v163 = 99;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[504];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v163 = 93;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v26[158] == (_QWORD)a1;
}

uint64_t mlir::AsmParser::parseType<mlir::MemRefType>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD **v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v18))
    return 0;
  v5 = v18;
  if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v16 = "invalid kind of type specified";
  v17 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v19, a1, v4, &v16);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  if (v26)
  {
    v8 = (_QWORD **)__p;
    if (__p)
    {
      v9 = v25;
      v10 = __p;
      if (v25 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v25 = v8;
      operator delete(v10);
    }
    v11 = v22;
    if (v22)
    {
      v12 = v23;
      v13 = v22;
      if (v23 != v22)
      {
        do
        {
          v15 = (void *)*--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            operator delete[](v14);
        }
        while (v12 != v11);
        v13 = v22;
      }
      v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21)
      free(v20);
  }
  return v6;
}

uint64_t mlir::AsmParser::parseType<mlir::RankedTensorType>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD **v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v18))
    return 0;
  v5 = v18;
  if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v16 = "invalid kind of type specified";
  v17 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v19, a1, v4, &v16);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  if (v26)
  {
    v8 = (_QWORD **)__p;
    if (__p)
    {
      v9 = v25;
      v10 = __p;
      if (v25 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v25 = v8;
      operator delete(v10);
    }
    v11 = v22;
    if (v22)
    {
      v12 = v23;
      v13 = v22;
      if (v23 != v22)
      {
        do
        {
          v15 = (void *)*--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            operator delete[](v14);
        }
        while (v12 != v11);
        v13 = v22;
      }
      v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21)
      free(v20);
  }
  return v6;
}

uint64_t llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v20, a3))
    return 0;
  v7 = v20;
  if (*(_UNKNOWN **)(*(_QWORD *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v7 = 0;
  *a2 = v7;
  if (v7)
    return 1;
  v18 = "invalid kind of attribute specified";
  v19 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v21, a1, v6, &v18);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  if (v28)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v27;
      v12 = __p;
      if (v27 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v27 = v10;
      operator delete(v12);
    }
    v13 = v24;
    if (v24)
    {
      v14 = v25;
      v15 = v24;
      if (v25 != v24)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v24;
      }
      v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23)
      free(v22);
  }
  return v8;
}

uint64_t mlir::CallOpInterface::resolveCallable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::Operation *v5;
  unint64_t v7;

  v4 = (**(uint64_t (***)(void))(a1 + 8))();
  v5 = (mlir::Operation *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = v4 & 0xFFFFFFFFFFFFFFF8 & (v4 << 61 >> 63);
  if (v7)
    return mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (a2)
    return mlir::SymbolTableCollection::lookupNearestSymbolFrom(a2, *(mlir::SymbolTable **)a1, (uint64_t)v5);
  return mlir::SymbolTable::lookupNearestSymbolFrom(*(mlir::SymbolTable **)a1, v5);
}

uint64_t mlir::CallOpInterface::getArgOperands(mlir::CallOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 16))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::CallableOpInterface::getArgAttrsAttr(mlir::CallableOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 24))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::CallableOpInterface::getResAttrsAttr(mlir::CallableOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 32))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

unint64_t mlir::complex::ConstantOp::fold(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::complex::ConstantOp::getAsmResultNames(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "cst", 3);
}

BOOL mlir::complex::ConstantOp::isBuildableWith(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    v2 = a1;
  else
    v2 = 0;
  v21 = v2;
  if (!v2)
    return 0;
  v3 = *(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id ? a2 : 0;
  v20 = v3;
  if (!v3)
    return 0;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
  if (v4 != 2)
    return 0;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v20);
  v6 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
  v7 = *(_QWORD *)v6;
  v8 = *(void **)(**(_QWORD **)v6 + 136);
  if (v8 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    v7 = 0;
  v19 = v7;
  if (v8 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    v9 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
    v10 = *(_QWORD *)v9;
    v11 = *(void **)(**(_QWORD **)v9 + 136);
    if (v11 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      v10 = 0;
    v19 = v10;
    if (v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      v12 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21) + 8);
      v13 = *(void **)(*(_QWORD *)v12 + 136);
      if (v13 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v12 = 0;
      v18 = v12;
      if (v13 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        v14 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
        if (v14 == Value)
          return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18) == v14;
      }
    }
    return 0;
  }
  v16 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21) + 8);
  v17 = *(void **)(*(_QWORD *)v16 + 136);
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    v16 = 0;
  v18 = v16;
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19) != Value)
  {
    return 0;
  }
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18) == Value;
}

uint64_t mlir::complex::ConstantOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  int *v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  void *v48;
  _QWORD **v49;
  _QWORD **v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  _QWORD **v55;
  _QWORD **v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  const void **v81[4];
  __int16 v82;
  uint64_t v83;
  int v84;
  const char *v85;
  uint64_t v86;
  _QWORD v87[3];
  void *v88;
  unsigned int v89;
  unsigned int v90;
  _BYTE v91[96];
  void *v92;
  _QWORD *v93;
  void *__p;
  _QWORD **v95;
  char v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v83 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
  if (v2 == 2)
  {
    v87[0] = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v87);
    v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
    v5 = *(_QWORD *)v4;
    if (*(_UNKNOWN **)(**(_QWORD **)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
      v5 = 0;
    v80 = v5;
    v6 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83) + 8);
    if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
      v6 = 0;
    v79 = v6;
    if (v80 && v6)
    {
      if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80)
        && Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79))
      {
        return 1;
      }
      v82 = 257;
      mlir::OpState::emitOpError(this, v81, (uint64_t)v87);
      if (v87[0])
      {
        v84 = 3;
        v85 = "requires attribute's element types (";
        v86 = 36;
        v7 = &v84;
        v8 = (char *)v88;
        if (v89 >= v90)
        {
          v62 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            v72 = (char *)&v84 - (_BYTE *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v62, 24);
            v8 = (char *)v88;
            v7 = (int *)((char *)v88 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v62, 24);
            v7 = &v84;
            v8 = (char *)v88;
          }
        }
        v9 = &v8[24 * v89];
        v10 = *(_OWORD *)v7;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
        *(_OWORD *)v9 = v10;
        ++v89;
      }
      v11 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
      if (v87[0])
      {
        v12 = &v84;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, v11);
        v13 = (char *)v88;
        if (v89 >= v90)
        {
          v63 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            v73 = (char *)&v84 - (_BYTE *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v63, 24);
            v13 = (char *)v88;
            v12 = (int *)((char *)v88 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v63, 24);
            v12 = &v84;
            v13 = (char *)v88;
          }
        }
        v14 = &v13[24 * v89];
        v15 = *(_OWORD *)v12;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
        *(_OWORD *)v14 = v15;
        v16 = ++v89;
        if (v87[0])
        {
          v84 = 3;
          v85 = ", ";
          v86 = 2;
          v17 = &v84;
          v18 = (char *)v88;
          if (v16 >= v90)
          {
            v65 = v16 + 1;
            v66 = (char *)v88 + 24 * v16 > (char *)&v84;
            if (v88 <= &v84 && v66)
            {
              v75 = (char *)&v84 - (_BYTE *)v88;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v65, 24);
              v18 = (char *)v88;
              v17 = (int *)((char *)v88 + v75);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v65, 24);
              v17 = &v84;
              v18 = (char *)v88;
            }
          }
          v19 = &v18[24 * v89];
          v20 = *(_OWORD *)v17;
          *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
          *(_OWORD *)v19 = v20;
          ++v89;
        }
      }
      v21 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79);
      if (v87[0])
      {
        v22 = &v84;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, v21);
        v23 = (char *)v88;
        if (v89 >= v90)
        {
          v64 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            v74 = (char *)&v84 - (_BYTE *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v64, 24);
            v23 = (char *)v88;
            v22 = (int *)((char *)v88 + v74);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v64, 24);
            v22 = &v84;
            v23 = (char *)v88;
          }
        }
        v24 = &v23[24 * v89];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v24 = v25;
        v26 = ++v89;
        if (v87[0])
        {
          v84 = 3;
          v85 = ") to match the element type of the op's return type (";
          v86 = 53;
          v27 = &v84;
          v28 = (char *)v88;
          if (v26 >= v90)
          {
            v67 = v26 + 1;
            v68 = (char *)v88 + 24 * v26 > (char *)&v84;
            if (v88 <= &v84 && v68)
            {
              v76 = (char *)&v84 - (_BYTE *)v88;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v67, 24);
              v28 = (char *)v88;
              v27 = (int *)((char *)v88 + v76);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v67, 24);
              v27 = &v84;
              v28 = (char *)v88;
            }
          }
          v29 = &v28[24 * v89];
          v30 = *(_OWORD *)v27;
          *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
          *(_OWORD *)v29 = v30;
          ++v89;
          if (v87[0])
          {
            v31 = &v84;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, Value);
            v32 = (char *)v88;
            if (v89 >= v90)
            {
              v69 = v89 + 1;
              if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
              {
                v77 = (char *)&v84 - (_BYTE *)v88;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v69, 24);
                v32 = (char *)v88;
                v31 = (int *)((char *)v88 + v77);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v69, 24);
                v31 = &v84;
                v32 = (char *)v88;
              }
            }
            v33 = &v32[24 * v89];
            v34 = *(_OWORD *)v31;
            *((_QWORD *)v33 + 2) = *((_QWORD *)v31 + 2);
            *(_OWORD *)v33 = v34;
            v35 = ++v89;
            if (v87[0])
            {
              v84 = 3;
              v85 = ")";
              v86 = 1;
              v36 = &v84;
              v37 = (char *)v88;
              if (v35 >= v90)
              {
                v70 = v35 + 1;
                v71 = (char *)v88 + 24 * v35 > (char *)&v84;
                if (v88 <= &v84 && v71)
                {
                  v78 = (char *)&v84 - (_BYTE *)v88;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v70, 24);
                  v37 = (char *)v88;
                  v36 = (int *)((char *)v88 + v78);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v70, 24);
                  v36 = &v84;
                  v37 = (char *)v88;
                }
              }
              v38 = &v37[24 * v89];
              v39 = *(_OWORD *)v36;
              *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
              *(_OWORD *)v38 = v39;
              ++v89;
            }
          }
        }
      }
      v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v87);
      if (v87[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
      if (v96)
      {
        v41 = (_QWORD **)__p;
        if (__p)
        {
          v42 = v95;
          v43 = __p;
          if (v95 != __p)
          {
            do
              v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            v43 = __p;
          }
          v95 = v41;
          operator delete(v43);
        }
        v44 = v92;
        if (!v92)
          goto LABEL_71;
        v45 = v93;
        v46 = v92;
        if (v93 == v92)
        {
LABEL_70:
          v93 = v44;
          operator delete(v46);
LABEL_71:
          if (v88 != v91)
            free(v88);
          return v40;
        }
        do
        {
          v48 = (void *)*--v45;
          v47 = v48;
          *v45 = 0;
          if (v48)
            operator delete[](v47);
        }
        while (v45 != v44);
LABEL_69:
        v46 = v92;
        goto LABEL_70;
      }
    }
    else
    {
      v81[0] = (const void **)"requires attribute's elements to be float attributes";
      v82 = 259;
      mlir::OpState::emitOpError(this, v81, (uint64_t)v87);
      v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v87);
      if (v87[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
      if (v96)
      {
        v55 = (_QWORD **)__p;
        if (__p)
        {
          v56 = v95;
          v57 = __p;
          if (v95 != __p)
          {
            do
              v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
            while (v56 != v55);
            v57 = __p;
          }
          v95 = v55;
          operator delete(v57);
        }
        v44 = v92;
        if (!v92)
          goto LABEL_71;
        v58 = v93;
        v46 = v92;
        if (v93 == v92)
          goto LABEL_70;
        do
        {
          v60 = (void *)*--v58;
          v59 = v60;
          *v58 = 0;
          if (v60)
            operator delete[](v59);
        }
        while (v58 != v44);
        goto LABEL_69;
      }
    }
  }
  else
  {
    v81[0] = (const void **)"requires 'value' to be a complex constant, represented as array of two values";
    v82 = 259;
    mlir::OpState::emitOpError(this, v81, (uint64_t)v87);
    v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v87);
    if (v87[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
    if (v96)
    {
      v49 = (_QWORD **)__p;
      if (__p)
      {
        v50 = v95;
        v51 = __p;
        if (v95 != __p)
        {
          do
            v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          v51 = __p;
        }
        v95 = v49;
        operator delete(v51);
      }
      v44 = v92;
      if (!v92)
        goto LABEL_71;
      v52 = v93;
      v46 = v92;
      if (v93 == v92)
        goto LABEL_70;
      do
      {
        v54 = (void *)*--v52;
        v53 = v54;
        *v52 = 0;
        if (v54)
          operator delete[](v53);
      }
      while (v52 != v44);
      goto LABEL_69;
    }
  }
  return v40;
}

uint64_t mlir::complex::BitcastOp::fold(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  v2 = *(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = v1 | 4;
  if (v2 == (*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8))
    return v3;
  else
    return 0;
}

uint64_t mlir::complex::BitcastOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  BOOL isIntOrFloat;
  unint64_t v13;
  void *v14;
  const void **v15;
  void *v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  const void **v23;
  int IntOrFloatBitWidth;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  const void **v38[4];
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v42[3];
  void *v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v1 = *this;
  v41 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v40 = *(v1 - 1) & 0xFFFFFFFFFFFFFFF8;
  if (v41 == v40)
    return 1;
  if (!mlir::Type::isIntOrFloat((mlir::Type *)&v41)
    && *(_UNKNOWN **)(*(_QWORD *)v41 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v38[0] = (const void **)"operand must be int/float/complex";
    v39 = 259;
    mlir::OpState::emitOpError(this, v38, (uint64_t)v42);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    if (v49)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v48;
        v6 = __p;
        if (v48 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v48 = v4;
        operator delete(v6);
      }
      v7 = v45;
      if (!v45)
        goto LABEL_74;
      v8 = v46;
      v9 = v45;
      if (v46 == v45)
      {
LABEL_73:
        v46 = v7;
        operator delete(v9);
LABEL_74:
        if (v43 != &v44)
          free(v43);
        return v3;
      }
      do
      {
        v11 = (void *)*--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          operator delete[](v10);
      }
      while (v8 != v7);
LABEL_72:
      v9 = v45;
      goto LABEL_73;
    }
    return v3;
  }
  isIntOrFloat = mlir::Type::isIntOrFloat((mlir::Type *)&v40);
  v13 = v40;
  v14 = *(void **)(*(_QWORD *)v40 + 136);
  if (isIntOrFloat)
  {
    v15 = (const void **)v41;
    v16 = *(void **)(*(_QWORD *)v41 + 136);
    if ((v16 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) != (v14 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id))
    {
      if (v14 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        goto LABEL_39;
      goto LABEL_38;
    }
LABEL_44:
    v38[0] = (const void **)"requires input or output is a complex type";
    v39 = 259;
    mlir::OpState::emitOpError(this, v38, (uint64_t)v42);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    if (v49)
    {
      v25 = (_QWORD **)__p;
      if (__p)
      {
        v26 = v48;
        v27 = __p;
        if (v48 != __p)
        {
          do
            v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          v27 = __p;
        }
        v48 = v25;
        operator delete(v27);
      }
      v7 = v45;
      if (!v45)
        goto LABEL_74;
      v28 = v46;
      v9 = v45;
      if (v46 == v45)
        goto LABEL_73;
      do
      {
        v30 = (void *)*--v28;
        v29 = v30;
        *v28 = 0;
        if (v30)
          operator delete[](v29);
      }
      while (v28 != v7);
      goto LABEL_72;
    }
    return v3;
  }
  if (v14 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v38[0] = (const void **)"result must be int/float/complex";
    v39 = 259;
    mlir::OpState::emitOpError(this, v38, (uint64_t)v42);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    if (v49)
    {
      v17 = (_QWORD **)__p;
      if (__p)
      {
        v18 = v48;
        v19 = __p;
        if (v48 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v48 = v17;
        operator delete(v19);
      }
      v7 = v45;
      if (!v45)
        goto LABEL_74;
      v20 = v46;
      v9 = v45;
      if (v46 == v45)
        goto LABEL_73;
      do
      {
        v22 = (void *)*--v20;
        v21 = v22;
        *v20 = 0;
        if (v22)
          operator delete[](v21);
      }
      while (v20 != v7);
      goto LABEL_72;
    }
    return v3;
  }
  v15 = (const void **)v41;
  if (*(_UNKNOWN **)(*(_QWORD *)v41 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    goto LABEL_44;
LABEL_38:
  v40 = (unint64_t)v15;
  v41 = v13;
  v16 = *(void **)(*(_QWORD *)v13 + 136);
  v15 = (const void **)v13;
LABEL_39:
  if (v16 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v23 = v15;
  else
    v23 = 0;
  v38[0] = v23;
  v42[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v38);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v42);
  if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v40) == 2 * IntOrFloatBitWidth)
    return 1;
  v38[0] = (const void **)"casting bitwidths do not match";
  v39 = 259;
  mlir::OpState::emitOpError(this, v38, (uint64_t)v42);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
  if (v42[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
  if (v49)
  {
    v31 = (_QWORD **)__p;
    if (__p)
    {
      v32 = v48;
      v33 = __p;
      if (v48 != __p)
      {
        do
          v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        v33 = __p;
      }
      v48 = v31;
      operator delete(v33);
    }
    v7 = v45;
    if (!v45)
      goto LABEL_74;
    v34 = v46;
    v9 = v45;
    if (v46 == v45)
      goto LABEL_73;
    do
    {
      v36 = (void *)*--v34;
      v35 = v36;
      *v34 = 0;
      if (v36)
        operator delete[](v35);
    }
    while (v34 != v7);
    goto LABEL_72;
  }
  return v3;
}

void mlir::complex::BitcastOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  mlir::RewritePatternSet::addImpl<ArithBitcast,mlir::MLIRContext *&>(a1, 0, 0, &v3);
  mlir::RewritePatternSet::addImpl<MergeComplexBitcast,mlir::MLIRContext *&>(a1, 0, 0, &v3);
  mlir::RewritePatternSet::addImpl<MergeArithBitcast,mlir::MLIRContext *&>(a1, 0, 0, &v3);
}

uint64_t mlir::complex::CreateOp::fold(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v5);
  if (result)
  {
    v3 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ReOp,void>::id)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56);
      result = mlir::Value::getDefiningOp((mlir::Value *)&v5);
      if (result)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ImOp,void>::id)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 24);
          if (v4 == *(_QWORD *)(*(_QWORD *)(result + 72) + 24))
            return v4 | 4;
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t mlir::complex::ImOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = **(_QWORD **)(a2 + 48);
  if (v3)
  {
    v4 = *(void **)(*(_QWORD *)v3 + 136);
    if (v4 != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      v3 = 0;
    v8 = v3;
    if (v4 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
      if (v5 == 2)
        return *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8) + 8) & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  else
  {
    v8 = 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::CreateOp,void>::id)
      return *(_QWORD *)(*(_QWORD *)(result + 72) + 56) | 4;
    else
      return 0;
  }
  return result;
}

void mlir::complex::ImOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"complex.im", 10, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_1E0E15FA8;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldComponentNeg<mlir::complex::ImOp, 1>]";
  v39 = 113;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::complex::ReOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = **(_QWORD **)(a2 + 48);
  if (v3)
  {
    v4 = *(void **)(*(_QWORD *)v3 + 136);
    if (v4 != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      v3 = 0;
    v8 = v3;
    if (v4 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
      if (v5 == 2)
        return *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8) & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  else
  {
    v8 = 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::CreateOp,void>::id)
      return *(_QWORD *)(*(_QWORD *)(result + 72) + 24) | 4;
    else
      return 0;
  }
  return result;
}

void mlir::complex::ReOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"complex.re", 10, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_1E0E16000;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldComponentNeg<mlir::complex::ReOp, 0>]";
  v39 = 113;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::complex::AddOp::fold(uint64_t *a1)
{
  uint64_t DefiningOp;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  llvm::APFloatBase *Value;
  void *v10;
  void *v11;
  uint64_t *v12;
  _BYTE *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[8];
  _QWORD v19[3];
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  v20 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (!DefiningOp)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 56);
    v5 = mlir::Value::getDefiningOp((mlir::Value *)&v20);
    if (v5)
      goto LABEL_5;
LABEL_9:
    v6 = *a1;
    goto LABEL_10;
  }
  v3 = *a1;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::SubOp,void>::id)
  {
    v4 = *(_QWORD *)(DefiningOp + 72);
    if (*(_QWORD *)(*(_QWORD *)(v3 + 72) + 56) == *(_QWORD *)(v4 + 56))
      goto LABEL_7;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 56);
  v5 = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (!v5)
    goto LABEL_9;
LABEL_5:
  v6 = *a1;
  if (*(_UNKNOWN **)(*(_QWORD *)(v5 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::SubOp,void>::id
    || (v4 = *(_QWORD *)(v5 + 72), *(_QWORD *)(*(_QWORD *)(v6 + 72) + 24) != *(_QWORD *)(v4 + 56)))
  {
LABEL_10:
    v20 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 56);
    result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
    if (!result)
      return result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id)
      return 0;
    v17 = *(_QWORD *)(result + 16 * (((unint64_t)*(unsigned int *)(result + 44) >> 23) & 1) + 64);
    v16 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v17);
    Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&v16, (uint64_t)&v20);
    v10 = (void *)v21[0];
    v11 = llvm::APFloatBase::PPCDoubleDouble(Value);
    v12 = (uint64_t *)v21[1];
    if (v11 != v10)
      v12 = &v20;
    if ((*((_BYTE *)v12 + 28) & 7) == 3)
    {
      v15 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v17) + 8);
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v15, (uint64_t)v18);
      v13 = (_BYTE *)v19[1];
      if (v11 != (void *)v19[0])
        v13 = v18;
      v14 = (v13[28] & 7) == 3;
      if (v11 != (void *)v19[0])
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
        if (v11 == (void *)v21[0])
          goto LABEL_20;
LABEL_23:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v21);
        if (!v14)
          return 0;
        goto LABEL_24;
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
      if (v11 != (void *)v21[0])
        goto LABEL_23;
    }
    else
    {
      v14 = 0;
      if (v11 != v10)
        goto LABEL_23;
    }
LABEL_20:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v21);
    if (!v14)
      return 0;
LABEL_24:
    v7 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
    return v7 | 4;
  }
LABEL_7:
  v7 = *(_QWORD *)(v4 + 24);
  return v7 | 4;
}

uint64_t mlir::complex::SubOp::fold(uint64_t *a1)
{
  uint64_t DefiningOp;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  llvm::APFloatBase *Value;
  void *v8;
  void *v9;
  uint64_t *v10;
  _BYTE *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  _QWORD v17[3];
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v18 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (!DefiningOp)
  {
    v3 = *a1;
    goto LABEL_6;
  }
  v3 = *a1;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::AddOp,void>::id
    || (v4 = *(_QWORD *)(DefiningOp + 72), *(_QWORD *)(*(_QWORD *)(v3 + 72) + 56) != *(_QWORD *)(v4 + 56)))
  {
LABEL_6:
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 56);
    result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
    if (!result)
      return result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id)
      return 0;
    v15 = *(_QWORD *)(result + 16 * (((unint64_t)*(unsigned int *)(result + 44) >> 23) & 1) + 64);
    v14 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
    Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&v14, (uint64_t)&v18);
    v8 = (void *)v19[0];
    v9 = llvm::APFloatBase::PPCDoubleDouble(Value);
    v10 = (uint64_t *)v19[1];
    if (v9 != v8)
      v10 = &v18;
    if ((*((_BYTE *)v10 + 28) & 7) == 3)
    {
      v13 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15) + 8);
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v13, (uint64_t)v16);
      v11 = (_BYTE *)v17[1];
      if (v9 != (void *)v17[0])
        v11 = v16;
      v12 = (v11[28] & 7) == 3;
      if (v9 != (void *)v17[0])
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
        if (v9 == (void *)v19[0])
          goto LABEL_16;
LABEL_19:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
        if (!v12)
          return 0;
        goto LABEL_20;
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
      if (v9 != (void *)v19[0])
        goto LABEL_19;
    }
    else
    {
      v12 = 0;
      if (v9 != v8)
        goto LABEL_19;
    }
LABEL_16:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
    if (!v12)
      return 0;
LABEL_20:
    v5 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
    return v5 | 4;
  }
  v5 = *(_QWORD *)(v4 + 24);
  return v5 | 4;
}

uint64_t mlir::complex::NegOp::fold(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::NegOp,void>::id)
      return *(_QWORD *)(*(_QWORD *)(result + 72) + 24) | 4;
    else
      return 0;
  }
  return result;
}

uint64_t mlir::complex::LogOp::fold(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ExpOp,void>::id)
      return *(_QWORD *)(*(_QWORD *)(result + 72) + 24) | 4;
    else
      return 0;
  }
  return result;
}

uint64_t mlir::complex::ExpOp::fold(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::LogOp,void>::id)
      return *(_QWORD *)(*(_QWORD *)(result + 72) + 24) | 4;
    else
      return 0;
  }
  return result;
}

uint64_t mlir::complex::ConjOp::fold(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ConjOp,void>::id)
      return *(_QWORD *)(*(_QWORD *)(result + 72) + 24) | 4;
    else
      return 0;
  }
  return result;
}

uint64_t mlir::complex::MulOp::fold(uint64_t a1)
{
  uint64_t DefiningOp;
  uint64_t v3;
  llvm::APFloatBase *Value;
  void *v6;
  void *v7;
  uint64_t *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
  if (DefiningOp
    && *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id)
  {
    v12 = *(_QWORD *)(DefiningOp + 16 * (((unint64_t)*(unsigned int *)(DefiningOp + 44) >> 23) & 1) + 64);
    v15 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12);
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v15, (uint64_t)&v17);
    v13 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12) + 8);
    Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&v13, (uint64_t)&v15);
    v6 = (void *)v16[0];
    v7 = llvm::APFloatBase::PPCDoubleDouble(Value);
    v8 = (uint64_t *)v16[1];
    if (v7 != v6)
      v8 = &v15;
    if ((*((_BYTE *)v8 + 28) & 7) != 3)
      goto LABEL_18;
    if (v7 == (void *)v18[0])
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v14, (uint64_t)v7, 1);
      if (v7 != (void *)v18[0])
      {
LABEL_10:
        llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v18, (const llvm::detail::IEEEFloat *)v14);
        v10 = v9;
        if (v7 != (void *)v14[0])
          goto LABEL_11;
        goto LABEL_17;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v14, v18[0], (llvm::APInt *)1);
      if (v7 != (void *)v18[0])
        goto LABEL_10;
    }
    llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v18, (const llvm::detail::DoubleAPFloat *)v14);
    v10 = v11;
    if (v7 != (void *)v14[0])
    {
LABEL_11:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v14);
      if (v10 == 1)
        goto LABEL_12;
      goto LABEL_18;
    }
LABEL_17:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v14);
    if (v10 == 1)
    {
LABEL_12:
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) | 4;
      if (v7 == (void *)v16[0])
        goto LABEL_13;
      goto LABEL_19;
    }
LABEL_18:
    v3 = 0;
    if (v7 == (void *)v16[0])
    {
LABEL_13:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
      if (v7 == (void *)v18[0])
      {
LABEL_14:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v18);
        return v3;
      }
LABEL_20:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v18);
      return v3;
    }
LABEL_19:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
    if (v7 == (void *)v18[0])
      goto LABEL_14;
    goto LABEL_20;
  }
  return 0;
}

BOOL mlir::complex::AbsOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::AbsOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[311];
    return a1[32];
  }
  return result;
}

uint64_t mlir::complex::AbsOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned int v12;
  unint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v15[0] = a4;
  v15[1] = a5;
  v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        v12 = 0;
LABEL_6:
        bzero((void *)(*(_QWORD *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1)
        goto LABEL_6;
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  v14 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  **(_QWORD **)a11 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  return 1;
}

uint64_t mlir::complex::AbsOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t Value;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  const void **v18;
  __int16 v19;
  _QWORD v20[3];
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *__p;
  _QWORD **v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v20[0] = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v20)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  v20[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v20);
  if (*((_DWORD *)*this + 9))
    v7 = (uint64_t)(*this - 2);
  else
    v7 = 0;
  if (Value == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v18 = (const void **)"failed to verify that complex element type matches result type";
  v19 = 259;
  mlir::OpState::emitOpError(this, &v18, (uint64_t)v20);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
  if (v20[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
  if (v27)
  {
    v9 = (_QWORD **)__p;
    if (__p)
    {
      v10 = v26;
      v11 = __p;
      if (v26 != __p)
      {
        do
          v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        v11 = __p;
      }
      v26 = v9;
      operator delete(v11);
    }
    v12 = v23;
    if (v23)
    {
      v13 = v24;
      v14 = v23;
      if (v24 != v23)
      {
        do
        {
          v16 = (void *)*--v13;
          v15 = v16;
          *v13 = 0;
          if (v16)
            operator delete[](v15);
        }
        while (v13 != v12);
        v14 = v23;
      }
      v24 = v12;
      operator delete(v14);
    }
    if (v21 != &v22)
      free(v21);
  }
  return v8;
}

uint64_t mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  BOOL v53;
  unint64_t v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  const void **v59[4];
  __int16 v60;
  int v61;
  const char *v62;
  uint64_t v63;
  _QWORD v64[3];
  void *v65;
  unsigned int v66;
  unsigned int v67;
  _BYTE v68[96];
  void *v69;
  _QWORD *v70;
  void *__p;
  _QWORD **v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    goto LABEL_2;
  v64[0] = a2;
  v37 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v64) + 136);
  v38 = v37 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v39 = v38 || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v40 = v39 || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v41 = v40 || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v42 = v41 || v37 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v43 = v42 || v37 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v44 = v43 || v37 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v45 = v44 || v37 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  if (v45 || v37 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
    return 1;
  if (v37 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v37 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
LABEL_2:
  v60 = 261;
  v59[0] = a3;
  v59[1] = a4;
  mlir::Operation::emitOpError(a1, v59, (uint64_t)v64);
  if (v64[0])
  {
    v61 = 3;
    v62 = " #";
    v63 = 2;
    v10 = &v61;
    v11 = (char *)v65;
    if (v66 >= v67)
    {
      v49 = v66 + 1;
      if (v65 <= &v61 && (char *)v65 + 24 * v66 > (char *)&v61)
      {
        v55 = (char *)&v61 - (_BYTE *)v65;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v49, 24);
        v11 = (char *)v65;
        v10 = (int *)((char *)v65 + v55);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v49, 24);
        v10 = &v61;
        v11 = (char *)v65;
      }
    }
    v12 = &v11[24 * v66];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    v14 = ++v66;
    if (v64[0])
    {
      v61 = 5;
      v62 = (const char *)a5;
      v15 = &v61;
      v16 = (char *)v65;
      if (v14 >= v67)
      {
        v50 = v14 + 1;
        v51 = (char *)v65 + 24 * v14 > (char *)&v61;
        if (v65 <= &v61 && v51)
        {
          v56 = (char *)&v61 - (_BYTE *)v65;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v50, 24);
          v16 = (char *)v65;
          v15 = (int *)((char *)v65 + v56);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v50, 24);
          v15 = &v61;
          v16 = (char *)v65;
        }
      }
      v17 = &v16[24 * v66];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v17 = v18;
      v19 = ++v66;
      if (v64[0])
      {
        v61 = 3;
        v62 = " must be complex type with floating-point elements, but got ";
        v63 = 60;
        v20 = &v61;
        v21 = (char *)v65;
        if (v19 >= v67)
        {
          v52 = v19 + 1;
          v53 = (char *)v65 + 24 * v19 > (char *)&v61;
          if (v65 <= &v61 && v53)
          {
            v57 = (char *)&v61 - (_BYTE *)v65;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
            v21 = (char *)v65;
            v20 = (int *)((char *)v65 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
            v20 = &v61;
            v21 = (char *)v65;
          }
        }
        v22 = &v21[24 * v66];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
        *(_OWORD *)v22 = v23;
        ++v66;
        if (v64[0])
        {
          v24 = &v61;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v61, a2);
          v25 = (char *)v65;
          if (v66 >= v67)
          {
            v54 = v66 + 1;
            if (v65 <= &v61 && (char *)v65 + 24 * v66 > (char *)&v61)
            {
              v58 = (char *)&v61 - (_BYTE *)v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              v25 = (char *)v65;
              v24 = (int *)((char *)v65 + v58);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              v24 = &v61;
              v25 = (char *)v65;
            }
          }
          v26 = &v25[24 * v66];
          v27 = *(_OWORD *)v24;
          *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
          *(_OWORD *)v26 = v27;
          ++v66;
        }
      }
    }
  }
  v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v64);
  if (v64[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v64);
  if (v73)
  {
    v29 = (_QWORD **)__p;
    if (__p)
    {
      v30 = v72;
      v31 = __p;
      if (v72 != __p)
      {
        do
          v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        v31 = __p;
      }
      v72 = v29;
      operator delete(v31);
    }
    v32 = v69;
    if (v69)
    {
      v33 = v70;
      v34 = v69;
      if (v70 != v69)
      {
        do
        {
          v36 = (void *)*--v33;
          v35 = v36;
          *v33 = 0;
          if (v36)
            operator delete[](v35);
        }
        while (v33 != v32);
        v34 = v69;
      }
      v70 = v32;
      operator delete(v34);
    }
    if (v65 != v68)
      free(v65);
  }
  return v28;
}

uint64_t mlir::complex::__mlir_ods_local_type_constraint_ComplexOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  void *v5;
  uint64_t v10;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  const void **v50[4];
  __int16 v51;
  int v52;
  const char *v53;
  uint64_t v54;
  _QWORD v55[3];
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(*(_QWORD *)a2 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  v10 = 1;
  if (v5 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v51 = 261;
    v50[0] = a3;
    v50[1] = a4;
    mlir::Operation::emitOpError(a1, v50, (uint64_t)v55);
    if (v55[0])
    {
      v52 = 3;
      v53 = " #";
      v54 = 2;
      v14 = &v52;
      v15 = (char *)v56;
      if (v57 >= v58)
      {
        v40 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          v46 = (char *)&v52 - (_BYTE *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          v15 = (char *)v56;
          v14 = (int *)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          v14 = &v52;
          v15 = (char *)v56;
        }
      }
      v16 = &v15[24 * v57];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      v18 = ++v57;
      if (v55[0])
      {
        v52 = 5;
        v53 = (const char *)a5;
        v19 = &v52;
        v20 = (char *)v56;
        if (v18 >= v58)
        {
          v41 = v18 + 1;
          v42 = (char *)v56 + 24 * v18 > (char *)&v52;
          if (v56 <= &v52 && v42)
          {
            v47 = (char *)&v52 - (_BYTE *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            v20 = (char *)v56;
            v19 = (int *)((char *)v56 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            v19 = &v52;
            v20 = (char *)v56;
          }
        }
        v21 = &v20[24 * v57];
        v22 = *(_OWORD *)v19;
        *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
        *(_OWORD *)v21 = v22;
        v23 = ++v57;
        if (v55[0])
        {
          v52 = 3;
          v53 = " must be floating-point, but got ";
          v54 = 33;
          v24 = &v52;
          v25 = (char *)v56;
          if (v23 >= v58)
          {
            v43 = v23 + 1;
            v44 = (char *)v56 + 24 * v23 > (char *)&v52;
            if (v56 <= &v52 && v44)
            {
              v48 = (char *)&v52 - (_BYTE *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              v25 = (char *)v56;
              v24 = (int *)((char *)v56 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              v24 = &v52;
              v25 = (char *)v56;
            }
          }
          v26 = &v25[24 * v57];
          v27 = *(_OWORD *)v24;
          *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
          *(_OWORD *)v26 = v27;
          ++v57;
          if (v55[0])
          {
            v28 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, a2);
            v29 = (char *)v56;
            if (v57 >= v58)
            {
              v45 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                v49 = (char *)&v52 - (_BYTE *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                v29 = (char *)v56;
                v28 = (int *)((char *)v56 + v49);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                v28 = &v52;
                v29 = (char *)v56;
              }
            }
            v30 = &v29[24 * v57];
            v31 = *(_OWORD *)v28;
            *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
            *(_OWORD *)v30 = v31;
            ++v57;
          }
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (v64)
    {
      v32 = (_QWORD **)__p;
      if (__p)
      {
        v33 = v63;
        v34 = __p;
        if (v63 != __p)
        {
          do
            v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          v34 = __p;
        }
        v63 = v32;
        operator delete(v34);
      }
      v35 = v60;
      if (v60)
      {
        v36 = v61;
        v37 = v60;
        if (v61 != v60)
        {
          do
          {
            v39 = (void *)*--v36;
            v38 = v39;
            *v36 = 0;
            if (v39)
              operator delete[](v38);
          }
          while (v36 != v35);
          v37 = v60;
        }
        v61 = v35;
        operator delete(v37);
      }
      if (v56 != v59)
        free(v56);
    }
  }
  return v10;
}

BOOL mlir::complex::AbsOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19[2];
  _QWORD __src[24];
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  memset(v22, 0, 24);
  v19[0] = (uint64_t)v22;
  v19[1] = 1;
  v17[1] = 1;
  v18 = 0;
  v21 = 0;
  v17[0] = &v21;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v22, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v18, 0))return 0;
  if (v18)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(a2);
    *v5 = v18;
  }
LABEL_6:
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v6 = a2[1];
  __src[0] = a1;
  __src[1] = v14;
  __src[2] = a2;
  v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AbsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, __src))
    return 0;
  v21 = __src[0];
  v16 = __src[0];
  if (*(_UNKNOWN **)(*(_QWORD *)__src[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    && ((v13 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src) + 136),
         v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
  {
    v14[0] = v21;
    __src[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v19, v17, v4, (uint64_t)(a2 + 2)) != 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v15 = 257;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(__src, a1, v8, v14);
    v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'complex' must be complex type with floating-point elements, but got ");
    v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v16);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
  }
  return v11;
}

void mlir::complex::AbsOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  mlir::MLIRContext *Context;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t v15;
  mlir::Operation *v16;
  mlir::ArrayAttr *p_AttrDictionary;
  unsigned int v18;
  _QWORD *v19;
  uint64_t Value;
  uint64_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  unint64_t AttrDictionary;
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v6)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
    if (v6 != mlir::arith::FastMathFlagsAttr::get(Context, 0))
    {
      v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v9 = (_BYTE *)*((_QWORD *)v8 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
      {
        llvm::raw_ostream::write(v8, 32);
      }
      else
      {
        *((_QWORD *)v8 + 4) = v9 + 1;
        *v9 = 32;
      }
      v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v11 = (_QWORD *)*((_QWORD *)v10 + 4);
      if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 7uLL)
      {
        *v11 = 0x6874616D74736166;
        *((_QWORD *)v10 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v10, "fastmath", 8uLL);
      }
      v29 = (void *)*((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
      if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 104))(a2))
      {
        v12 = (_QWORD *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v13 = (*(uint64_t (**)(_QWORD *))(*v12 + 80))(v12) + v12[4] - v12[2];
        mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v29, a2);
        if (v13 == (*(uint64_t (**)(_QWORD *))(*v12 + 80))(v12) + v12[4] - v12[2])
          (*(void (**)(mlir::OpAsmPrinter *, void *))(*(_QWORD *)a2 + 40))(a2, v29);
      }
    }
  }
  v29 = v31;
  v31[0] = "fastmath";
  v31[1] = 8;
  v30 = 0x200000001;
  v14 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  v15 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v15 && v15 == mlir::arith::FastMathFlagsAttr::get(v14, 0))
  {
    v18 = v30;
    if (v30 >= HIDWORD(v30))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v30 + 1, 16);
      v18 = v30;
    }
    v19 = (char *)v29 + 16 * v18;
    *v19 = "fastmath";
    v19[1] = 8;
    LODWORD(v30) = v30 + 1;
    v16 = *this;
    if (!*((_BYTE *)*this + 47))
      goto LABEL_18;
  }
  else
  {
    v16 = *this;
    if (!*((_BYTE *)*this + 47))
    {
LABEL_18:
      p_AttrDictionary = (mlir::Operation *)((char *)v16 + 56);
      goto LABEL_23;
    }
  }
  AttrDictionary = mlir::Operation::getAttrDictionary(v16);
  p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_23:
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v21, v29, v30);
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 32);
  }
  else
  {
    *((_QWORD *)v22 + 4) = v23 + 1;
    *v23 = 32;
  }
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if (*((_BYTE **)v24 + 3) == v25)
  {
    llvm::raw_ostream::write(v24, ":", 1uLL);
  }
  else
  {
    *v25 = 58;
    ++*((_QWORD *)v24 + 4);
  }
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((_QWORD *)v26 + 4) = v27 + 1;
    *v27 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v29 != v31)
    free(v29);
}

uint64_t mlir::complex::detail::AddOpGenericAdaptorBase::AddOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.add", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::AddOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AddOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AddOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::AddOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::AddOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[313];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::AddOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t *v7;

  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v4 = (uint64_t)(*this - 2);
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::complex::AddOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AddOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

BOOL mlir::complex::AngleOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::AngleOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[315];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::AngleOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19[2];
  _QWORD __src[24];
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  memset(v22, 0, 24);
  v19[0] = (uint64_t)v22;
  v19[1] = 1;
  v17[1] = 1;
  v18 = 0;
  v21 = 0;
  v17[0] = &v21;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v22, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v18, 0))return 0;
  if (v18)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(a2);
    *v5 = v18;
  }
LABEL_6:
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v6 = a2[1];
  __src[0] = a1;
  __src[1] = v14;
  __src[2] = a2;
  v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AngleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, __src))
    return 0;
  v21 = __src[0];
  v16 = __src[0];
  if (*(_UNKNOWN **)(*(_QWORD *)__src[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    && ((v13 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src) + 136),
         v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
  {
    v14[0] = v21;
    __src[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v19, v17, v4, (uint64_t)(a2 + 2)) != 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v15 = 257;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(__src, a1, v8, v14);
    v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'complex' must be complex type with floating-point elements, but got ");
    v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v16);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
  }
  return v11;
}

BOOL mlir::complex::Atan2Op::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[317];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::Atan2Op::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Atan2Op::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::complex::detail::BitcastOpGenericAdaptorBase::BitcastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.bitcast", 15, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::complex::BitcastOp::verifyInvariantsImpl(mlir::complex::BitcastOp *this)
{
  uint64_t v1;

  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v1 = *(_QWORD *)this - 16;
  else
    v1 = 0;
  mlir::detail::OpResultImpl::getNextResultAtOffset(v1, 0);
  return 1;
}

BOOL mlir::complex::BitcastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 504))(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::ConjOpGenericAdaptorBase::ConjOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.conj", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::ConjOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::ConjOpGenericAdaptorBase::Properties]";
        v15 = 109;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[319];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::ConjOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t *v7;

  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v4 = (uint64_t)(*this - 2);
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::complex::ConjOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ConjOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.constant", 16, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::complex::ConstantOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD **v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v26 = &v56;
      v27 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v27 = (char *)v60;
          v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v26 = &v56;
          v27 = (char *)v60;
        }
      }
      v28 = &v27[24 * v61];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v67;
      v32 = __p;
      if (v67 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v67 = v30;
      operator delete(v32);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v33 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "value", 5uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for value in DictionaryAttr to set Properties.";
      v58 = 65;
      v36 = &v56;
      v37 = (char *)v60;
      if (v61 >= v62)
      {
        v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v53 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v37 = (char *)v60;
          v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v36 = &v56;
          v37 = (char *)v60;
        }
      }
      v38 = &v37[24 * v61];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v67;
      v42 = __p;
      if (v67 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v67 = v40;
      operator delete(v42);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v43 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 50;
    v10 = &v56;
    v11 = (char *)v60;
    if (v61 >= v62)
    {
      v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v52 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v11 = (char *)v60;
        v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v10 = &v56;
        v11 = (char *)v60;
      }
    }
    v12 = &v11[24 * v61];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v61;
    if (v59[0])
    {
      v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v15 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v15 = (char *)v60;
          v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v14 = &v56;
          v15 = (char *)v60;
        }
      }
      v16 = &v15[24 * v61];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v67;
      v20 = __p;
      if (v67 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v67 = v18;
      operator delete(v20);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v22 = v65;
    v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
LABEL_57:
    v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

_QWORD *mlir::complex::ConstantOp::setInherentAttr(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (a3 == 5 && *(_DWORD *)a2 == 1970037110 && *(_BYTE *)(a2 + 4) == 101)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
        v5 = a4;
      else
        v5 = 0;
      *result = v5;
    }
    else
    {
      *result = 0;
    }
  }
  return result;
}

BOOL mlir::complex::ConstantOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;

  v6 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v6, (const void **)"value", (const char *)5, a3, a4);
}

uint64_t mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v7;
  char *v8;
  char *v9;
  __int128 v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  const void **v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[96];
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD **v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    return 1;
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    v30 = "attribute '";
    v31 = 11;
    v7 = &v29;
    v8 = (char *)v35;
    if (v36 >= v37)
    {
      v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        v27 = (char *)&v29 - (_BYTE *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v8 = (char *)v35;
        v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v7 = &v29;
        v8 = (char *)v35;
      }
    }
    v9 = &v8[24 * v36];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = v7[2];
    *(_OWORD *)v9 = v10;
    ++v36;
    if (v33)
    {
      v32 = 261;
      v29 = a2;
      v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        v30 = "' failed to satisfy constraint: array attribute";
        v31 = 47;
        v11 = &v29;
        v12 = (char *)v35;
        if (v36 >= v37)
        {
          v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            v28 = (char *)&v29 - (_BYTE *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v12 = (char *)v35;
            v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v11 = &v29;
            v12 = (char *)v35;
          }
        }
        v13 = &v12[24 * v36];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = v11[2];
        *(_OWORD *)v13 = v14;
        ++v36;
      }
    }
  }
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  if (v43)
  {
    v16 = (_QWORD **)__p;
    if (__p)
    {
      v17 = v42;
      v18 = __p;
      if (v42 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v42 = v16;
      operator delete(v18);
    }
    v19 = v39;
    if (v39)
    {
      v20 = v40;
      v21 = v39;
      if (v40 != v39)
      {
        do
        {
          v23 = (void *)*--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            operator delete[](v22);
        }
        while (v20 != v19);
        v21 = v39;
      }
      v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38)
      free(v35);
  }
  return v15;
}

BOOL mlir::complex::ConstantOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties]";
        v15 = 113;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[321];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  v5 = *(void **)(*(_QWORD *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    v4 = 0;
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v6 = &v40;
    v7 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v7 = (char *)v46;
        v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v6 = &v40;
        v7 = (char *)v46;
      }
    }
    v8 = &v7[24 * v47];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::ArrayAttr]";
  v41 = 65;
  v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10)
      v11 = v10;
    else
      v11 = v41;
    v12 = 18;
    if (v41 - v11 < 0x12)
      v12 = v41 - v11;
    v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1)
      --v13;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v11 + v12);
    v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v14 = &v40;
      v15 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v15 = (char *)v46;
          v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v14 = &v40;
          v15 = (char *)v46;
        }
      }
      v16 = &v15[24 * v47];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v47;
      if (v44)
      {
        v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v19 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v19 = (char *)v46;
            v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v18 = &v40;
            v19 = (char *)v46;
          }
        }
        v20 = &v19[24 * v47];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v47;
      }
    }
  }
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v53;
      v25 = __p;
      if (v53 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v53 = v23;
      operator delete(v25);
    }
    v26 = v50;
    if (v50)
    {
      v27 = v51;
      v28 = v50;
      if (v51 != v50)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v50;
      }
      v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49)
      free(v46);
  }
  return v22;
}

void mlir::complex::ConstantOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>((_QWORD *)a2) = a4;
  v6 = *(unsigned int *)(a2 + 72);
  if (v6 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v6) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::complex::ConstantOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  const void **v16;
  __int16 v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v3, (const void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18))
    {
      if (*((_DWORD *)*this + 9))
        v4 = (uint64_t)(*this - 2);
      else
        v4 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v16 = (const void **)"requires attribute 'value'";
    v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    if (v25)
    {
      v7 = (_QWORD **)__p;
      if (__p)
      {
        v8 = v24;
        v9 = __p;
        if (v24 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v24 = v7;
        operator delete(v9);
      }
      v10 = v21;
      if (v21)
      {
        v11 = v22;
        v12 = v21;
        if (v22 != v21)
        {
          do
          {
            v14 = (void *)*--v11;
            v13 = v14;
            *v11 = 0;
            if (v14)
              operator delete[](v13);
          }
          while (v11 != v10);
          v12 = v21;
        }
        v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20)
        free(v19);
    }
  }
  return v6;
}

uint64_t mlir::complex::ConstantOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::NoneType **v4;
  mlir::MLIRContext *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v15 = 0;
  v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v15, v6))
    return 0;
  if (v15)
  {
    v7 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v7 = v15;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v8 = *(_QWORD *)(a2 + 8);
  v13[0] = a1;
  v13[1] = &v14;
  v13[2] = a2;
  v9 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v8 + 96));
  if (v9)
  {
    if (!mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v9, (const void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ConstantOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v13))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v13[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v13))
    return 0;
  v10 = v13[0];
  v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v11) = v10;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::complex::ConstantOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  v19 = v21;
  v21[0] = "value";
  v21[1] = 5;
  v20 = 0x200000001;
  v6 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v9, v19, v20);
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    *v13 = 58;
    ++*((_QWORD *)v12 + 4);
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v16 = (uint64_t)*this - 16;
  else
    v16 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v19 != v21)
    free(v19);
}

BOOL mlir::complex::CosOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::CosOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::CosOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::CosOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::CosOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[323];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::CosOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::CosOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::CreateOpGenericAdaptorBase::CreateOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.create", 14, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::complex::CreateOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t *v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t Value;
  uint64_t *v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  const void **v35[4];
  __int16 v36;
  _QWORD v37[3];
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD **v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  v4 = *this;
  if ((*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)((*this)[9] + 56)
                                                                                              + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v14 = *((_DWORD *)v4 + 9);
    v15 = v4 - 2;
    if (v14)
      v16 = (uint64_t)v15;
    else
      v16 = 0;
    v37[0] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v37);
    v18 = *this;
    if (Value == (*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v25 = *((_DWORD *)v18 + 9);
      v26 = v18 - 2;
      if (v25)
        v27 = (uint64_t)v26;
      else
        v27 = 0;
      v37[0] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v37) == (*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8))
        return 1;
      v35[0] = (const void **)"failed to verify that complex element type matches imaginary operand type";
      v36 = 259;
      mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
      v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
      if (v37[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
      if (v44)
      {
        v28 = (_QWORD **)__p;
        if (__p)
        {
          v29 = v43;
          v30 = __p;
          if (v43 != __p)
          {
            do
              v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
            while (v29 != v28);
            v30 = __p;
          }
          v43 = v28;
          operator delete(v30);
        }
        v9 = v40;
        if (!v40)
          goto LABEL_61;
        v31 = v41;
        v11 = v40;
        if (v41 == v40)
          goto LABEL_60;
        do
        {
          v33 = (void *)*--v31;
          v32 = v33;
          *v31 = 0;
          if (v33)
            operator delete[](v32);
        }
        while (v31 != v9);
        goto LABEL_59;
      }
    }
    else
    {
      v35[0] = (const void **)"failed to verify that complex element type matches real operand type";
      v36 = 259;
      mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
      v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
      if (v37[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
      if (v44)
      {
        v19 = (_QWORD **)__p;
        if (__p)
        {
          v20 = v43;
          v21 = __p;
          if (v43 != __p)
          {
            do
              v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
            while (v20 != v19);
            v21 = __p;
          }
          v43 = v19;
          operator delete(v21);
        }
        v9 = v40;
        if (!v40)
          goto LABEL_61;
        v22 = v41;
        v11 = v40;
        if (v41 == v40)
          goto LABEL_60;
        do
        {
          v24 = (void *)*--v22;
          v23 = v24;
          *v22 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v22 != v9);
        goto LABEL_59;
      }
    }
  }
  else
  {
    v35[0] = (const void **)"failed to verify that all of {real, imaginary} have same type";
    v36 = 259;
    mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    if (v44)
    {
      v6 = (_QWORD **)__p;
      if (__p)
      {
        v7 = v43;
        v8 = __p;
        if (v43 != __p)
        {
          do
            v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          v8 = __p;
        }
        v43 = v6;
        operator delete(v8);
      }
      v9 = v40;
      if (!v40)
        goto LABEL_61;
      v10 = v41;
      v11 = v40;
      if (v41 == v40)
      {
LABEL_60:
        v41 = v9;
        operator delete(v11);
LABEL_61:
        if (v38 != &v39)
          free(v38);
        return v5;
      }
      do
      {
        v13 = (void *)*--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          operator delete[](v12);
      }
      while (v10 != v9);
LABEL_59:
      v11 = v40;
      goto LABEL_60;
    }
  }
  return v5;
}

BOOL mlir::complex::CreateOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t Value;
  uint64_t v10;
  uint64_t v11;
  _WORD v13[20];
  uint64_t v14;
  _QWORD v15[24];
  uint64_t __src;
  _QWORD v17[4];
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  memset(v18, 0, 24);
  memset(v17, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v18, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v15[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v15))
    return 0;
  __src = v15[0];
  v14 = v15[0];
  if (*(_UNKNOWN **)(*(_QWORD *)v15[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v8 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v15) + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v8 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      mlir::OperationState::addTypes(a2, &__src, 1);
      v15[0] = __src;
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v15);
      v10 = a2 + 16;
      if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v18, Value, v10))
      {
        v15[0] = __src;
        v11 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v15);
        return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17, v11, v10) != 0;
      }
      return 0;
    }
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13[16] = 257;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _WORD *))(*(_QWORD *)a1 + 24))(v15, a1, v4, v13);
  v5 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v15, "'complex' must be complex type with floating-point elements, but got ");
  v6 = mlir::InFlightDiagnostic::append<mlir::Type &>(v5, &v14);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v6);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v15);
  return v7;
}

BOOL mlir::complex::DivOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::DivOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::DivOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::DivOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::DivOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[325];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::DivOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::DivOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::complex::EqualOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v12;
  unsigned int v13;
  uint64_t v15;

  v12 = *(_DWORD *)(a11 + 8);
  if (v12 != 1)
  {
    if (!v12)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        v13 = 0;
LABEL_6:
        bzero((void *)(*(_QWORD *)a11 + 8 * v13), 8 - 8 * v13);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      v13 = *(_DWORD *)(a11 + 8);
      if (v13 != 1)
        goto LABEL_6;
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  v15 = a1;
  **(_QWORD **)a11 = mlir::Builder::getIntegerType((mlir::Builder *)&v15, 1u);
  return 1;
}

uint64_t mlir::complex::EqualOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  const void **v14;
  __int16 v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *__p;
  _QWORD **v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  if ((*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)((*this)[9] + 56)
                                                                                              + 8) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v14 = (const void **)"failed to verify that all of {lhs, rhs} have same type";
  v15 = 259;
  mlir::OpState::emitOpError(this, &v14, (uint64_t)v16);
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
  if (v16[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
  if (v23)
  {
    v5 = (_QWORD **)__p;
    if (__p)
    {
      v6 = v22;
      v7 = __p;
      if (v22 != __p)
      {
        do
          v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        v7 = __p;
      }
      v22 = v5;
      operator delete(v7);
    }
    v8 = v19;
    if (v19)
    {
      v9 = v20;
      v10 = v19;
      if (v20 != v19)
      {
        do
        {
          v12 = (void *)*--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            operator delete[](v11);
        }
        while (v9 != v8);
        v10 = v19;
      }
      v20 = v8;
      operator delete(v10);
    }
    if (v17 != &v18)
      free(v17);
  }
  return v4;
}

uint64_t mlir::complex::__mlir_ods_local_type_constraint_ComplexOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  const void **v47[4];
  __int16 v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  _QWORD v53[3];
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE v57[96];
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v9 = 1;
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&v49, 1))
  {
    v48 = 261;
    v47[0] = a3;
    v47[1] = a4;
    mlir::Operation::emitOpError(a1, v47, (uint64_t)v53);
    if (v53[0])
    {
      v50 = 3;
      v51 = " #";
      v52 = 2;
      v10 = &v50;
      v11 = (char *)v54;
      if (v55 >= v56)
      {
        v37 = v55 + 1;
        if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
        {
          v43 = (char *)&v50 - (_BYTE *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
          v11 = (char *)v54;
          v10 = (int *)((char *)v54 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
          v10 = &v50;
          v11 = (char *)v54;
        }
      }
      v12 = &v11[24 * v55];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      v14 = ++v55;
      if (v53[0])
      {
        v50 = 5;
        v51 = (const char *)a5;
        v15 = &v50;
        v16 = (char *)v54;
        if (v14 >= v56)
        {
          v38 = v14 + 1;
          v39 = (char *)v54 + 24 * v14 > (char *)&v50;
          if (v54 <= &v50 && v39)
          {
            v44 = (char *)&v50 - (_BYTE *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
            v16 = (char *)v54;
            v15 = (int *)((char *)v54 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
            v15 = &v50;
            v16 = (char *)v54;
          }
        }
        v17 = &v16[24 * v55];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v17 = v18;
        v19 = ++v55;
        if (v53[0])
        {
          v50 = 3;
          v51 = " must be 1-bit signless integer, but got ";
          v52 = 41;
          v20 = &v50;
          v21 = (char *)v54;
          if (v19 >= v56)
          {
            v40 = v19 + 1;
            v41 = (char *)v54 + 24 * v19 > (char *)&v50;
            if (v54 <= &v50 && v41)
            {
              v45 = (char *)&v50 - (_BYTE *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
              v21 = (char *)v54;
              v20 = (int *)((char *)v54 + v45);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
              v20 = &v50;
              v21 = (char *)v54;
            }
          }
          v22 = &v21[24 * v55];
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          ++v55;
          if (v53[0])
          {
            v24 = &v50;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, v49);
            v25 = (char *)v54;
            if (v55 >= v56)
            {
              v42 = v55 + 1;
              if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
              {
                v46 = (char *)&v50 - (_BYTE *)v54;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
                v25 = (char *)v54;
                v24 = (int *)((char *)v54 + v46);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
                v24 = &v50;
                v25 = (char *)v54;
              }
            }
            v26 = &v25[24 * v55];
            v27 = *(_OWORD *)v24;
            *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
            *(_OWORD *)v26 = v27;
            ++v55;
          }
        }
      }
    }
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (v62)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v61;
        v30 = __p;
        if (v61 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v61 = v28;
        operator delete(v30);
      }
      v31 = v58;
      if (v58)
      {
        v32 = v59;
        v33 = v58;
        if (v59 != v58)
        {
          do
          {
            v35 = (void *)*--v32;
            v34 = v35;
            *v32 = 0;
            if (v35)
              operator delete[](v34);
          }
          while (v32 != v31);
          v33 = v58;
        }
        v59 = v31;
        operator delete(v33);
      }
      if (v54 != v57)
        free(v54);
    }
  }
  return v9;
}

BOOL mlir::complex::EqualOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::Builder *v5;
  uint64_t v6;
  uint64_t __src;
  _QWORD v9[2];
  uint64_t v10[2];
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  memset(v13, 0, 24);
  v10[0] = (uint64_t)v13;
  v10[1] = 1;
  memset(v12, 0, 24);
  v11 = 0;
  v9[0] = &v11;
  v9[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (__src = 0, mlir::AsmParser::parseType<mlir::ComplexType>(a1, &__src))
    && (v11 = __src,
        v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1),
        __src = mlir::Builder::getIntegerType(v5, 1u),
        mlir::OperationState::addTypes(a2, &__src, 1),
        v6 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v10, v9, v4, v6)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v12, *(_QWORD *)v9[0], v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::complex::detail::ExpOpGenericAdaptorBase::ExpOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.exp", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::ExpOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::ExpOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[327];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::ExpOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ExpOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::Expm1Op::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[329];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::Expm1Op::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Expm1Op::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::ImOpGenericAdaptorBase::ImOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.im", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::ImOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ImOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ImOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::ImOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::ImOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[331];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::ImOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19[2];
  _QWORD __src[24];
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  memset(v22, 0, 24);
  v19[0] = (uint64_t)v22;
  v19[1] = 1;
  v17[1] = 1;
  v18 = 0;
  v21 = 0;
  v17[0] = &v21;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v22, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v18, 0))return 0;
  if (v18)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(a2);
    *v5 = v18;
  }
LABEL_6:
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v6 = a2[1];
  __src[0] = a1;
  __src[1] = v14;
  __src[2] = a2;
  v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ImOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, __src))
    return 0;
  v21 = __src[0];
  v16 = __src[0];
  if (*(_UNKNOWN **)(*(_QWORD *)__src[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    && ((v13 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src) + 136),
         v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
  {
    v14[0] = v21;
    __src[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v19, v17, v4, (uint64_t)(a2 + 2)) != 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v15 = 257;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(__src, a1, v8, v14);
    v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'complex' must be complex type with floating-point elements, but got ");
    v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v16);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
  }
  return v11;
}

BOOL mlir::complex::Log1pOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[333];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::Log1pOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Log1pOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::LogOpGenericAdaptorBase::LogOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.log", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::LogOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::LogOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::LogOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::LogOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::LogOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[335];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::LogOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::LogOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::MulOpGenericAdaptorBase::MulOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.mul", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::MulOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::MulOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::MulOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::MulOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::MulOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[337];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::MulOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::MulOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::complex::detail::NegOpGenericAdaptorBase::NegOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.neg", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::NegOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::NegOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::NegOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::NegOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::NegOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::NegOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::NegOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::NegOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::NegOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[339];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::NegOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::NegOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::NegOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::NotEqualOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::Builder *v5;
  uint64_t v6;
  uint64_t __src;
  _QWORD v9[2];
  uint64_t v10[2];
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  memset(v13, 0, 24);
  v10[0] = (uint64_t)v13;
  v10[1] = 1;
  memset(v12, 0, 24);
  v11 = 0;
  v9[0] = &v11;
  v9[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (__src = 0, mlir::AsmParser::parseType<mlir::ComplexType>(a1, &__src))
    && (v11 = __src,
        v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1),
        __src = mlir::Builder::getIntegerType(v5, 1u),
        mlir::OperationState::addTypes(a2, &__src, 1),
        v6 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v10, v9, v4, v6)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v12, *(_QWORD *)v9[0], v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::complex::PowOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::PowOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::PowOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::PowOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::PowOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::PowOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::PowOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::PowOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::PowOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[341];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::PowOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::PowOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::PowOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::complex::detail::ReOpGenericAdaptorBase::ReOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.re", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::ReOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ReOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ReOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ReOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ReOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ReOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ReOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::ReOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::ReOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[343];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::ReOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19[2];
  _QWORD __src[24];
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  memset(v22, 0, 24);
  v19[0] = (uint64_t)v22;
  v19[1] = 1;
  v17[1] = 1;
  v18 = 0;
  v21 = 0;
  v17[0] = &v21;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v22, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v18, 0))return 0;
  if (v18)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ReOpGenericAdaptorBase::Properties>(a2);
    *v5 = v18;
  }
LABEL_6:
  v14[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v6 = a2[1];
  __src[0] = a1;
  __src[1] = v14;
  __src[2] = a2;
  v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ReOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, __src))
    return 0;
  v21 = __src[0];
  v16 = __src[0];
  if (*(_UNKNOWN **)(*(_QWORD *)__src[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    && ((v13 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src) + 136),
         v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
  {
    v14[0] = v21;
    __src[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v19, v17, v4, (uint64_t)(a2 + 2)) != 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v15 = 257;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(__src, a1, v8, v14);
    v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'complex' must be complex type with floating-point elements, but got ");
    v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v16);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
  }
  return v11;
}

BOOL mlir::complex::RsqrtOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[345];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::RsqrtOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::RsqrtOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::RsqrtOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::SignOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SignOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::SignOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SignOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SignOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SignOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SignOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::SignOpGenericAdaptorBase::Properties]";
        v15 = 109;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::SignOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[347];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::SignOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SignOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SignOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::SinOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SinOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::SinOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::SinOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::SinOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[349];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::SinOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SinOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SinOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::SqrtOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties]";
        v15 = 109;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[351];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::SqrtOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SqrtOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SqrtOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::SubOpGenericAdaptorBase::SubOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "complex.sub", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::SubOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SubOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::SubOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SubOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SubOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::SubOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::SubOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::SubOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::SubOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[353];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::SubOp::parse(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD __src[3];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0;
    if (v10)
    {
      v4 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::SubOpGenericAdaptorBase::Properties>(a2);
      *v4 = v10;
    }
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::SubOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

BOOL mlir::complex::TanOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::TanOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::TanOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::TanOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::TanOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[355];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::TanOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::TanOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::complex::TanhOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::TanhOpGenericAdaptorBase::Properties]";
        v15 = 109;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[357];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::TanhOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "fastmath", 8))
    goto LABEL_6;
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0;
  if (v14)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::TanhOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v5 = v14;
  }
LABEL_6:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v7 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::TanhOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11))
    return 0;
  v8 = v11[0];
  v16 = v11[0];
  v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    v8 = v16;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void mlir::RewritePatternSet::addImpl<ArithBitcast,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  void *__p;
  const char *v26;
  unint64_t v27;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v26, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"complex.bitcast", 15, (__int16)v26, v9, 0, 0);
  *v8 = &unk_1E0E13068;
  __p = v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v26 = "StringRef llvm::getTypeName() [DesiredTypeName = ArithBitcast]";
    v27 = 62;
    v18 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
    if (v27 >= v18)
      v19 = v18;
    else
      v19 = v27;
    v20 = &v26[v19];
    v21 = v27 - v19;
    if (v27 - v19 >= 0x12)
      v22 = 18;
    else
      v22 = v27 - v19;
    v23 = &v20[v22];
    v24 = v21 - v22;
    if (v24 >= v24 - 1)
      --v24;
    v8[8] = v23;
    v8[9] = v24;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&__p);
    v15 = __p;
    a1[2] = v14;
    __p = 0;
    if (v15)
    {
      v16 = (_QWORD *)v15[10];
      if (v16 != v15 + 12)
        free(v16);
      v17 = (_QWORD *)v15[4];
      if (v17 != v15 + 6)
        free(v17);
      operator delete(v15);
    }
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<MergeComplexBitcast,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  void *__p;
  const char *v26;
  unint64_t v27;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v26, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"complex.bitcast", 15, (__int16)v26, v9, 0, 0);
  *v8 = &unk_1E0E13660;
  __p = v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v26 = "StringRef llvm::getTypeName() [DesiredTypeName = MergeComplexBitcast]";
    v27 = 69;
    v18 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
    if (v27 >= v18)
      v19 = v18;
    else
      v19 = v27;
    v20 = &v26[v19];
    v21 = v27 - v19;
    if (v27 - v19 >= 0x12)
      v22 = 18;
    else
      v22 = v27 - v19;
    v23 = &v20[v22];
    v24 = v21 - v22;
    if (v24 >= v24 - 1)
      --v24;
    v8[8] = v23;
    v8[9] = v24;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&__p);
    v15 = __p;
    a1[2] = v14;
    __p = 0;
    if (v15)
    {
      v16 = (_QWORD *)v15[10];
      if (v16 != v15 + 12)
        free(v16);
      v17 = (_QWORD *)v15[4];
      if (v17 != v15 + 6)
        free(v17);
      operator delete(v15);
    }
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<MergeArithBitcast,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  void *__p;
  const char *v26;
  unint64_t v27;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v26, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"arith.bitcast", 13, (__int16)v26, v9, 0, 0);
  *v8 = &unk_1E0E133C0;
  __p = v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v26 = "StringRef llvm::getTypeName() [DesiredTypeName = MergeArithBitcast]";
    v27 = 67;
    v18 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
    if (v27 >= v18)
      v19 = v18;
    else
      v19 = v27;
    v20 = &v26[v19];
    v21 = v27 - v19;
    if (v27 - v19 >= 0x12)
      v22 = 18;
    else
      v22 = v27 - v19;
    v23 = &v20[v22];
    v24 = v21 - v22;
    if (v24 >= v24 - 1)
      --v24;
    v8[8] = v23;
    v8[9] = v24;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&__p);
    v15 = __p;
    a1[2] = v14;
    __p = 0;
    if (v15)
    {
      v16 = (_QWORD *)v15[10];
      if (v16 != v15 + 12)
        free(v16);
      v17 = (_QWORD *)v15[4];
      if (v17 != v15 + 6)
        free(v17);
      operator delete(v15);
    }
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void ArithBitcast::~ArithBitcast(ArithBitcast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::BitcastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::BitcastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::BitcastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t ArithBitcast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  mlir::GenericProgramPoint *v6;
  uint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v9 = v3;
  v6 = mlir::OpBuilder::create<mlir::arith::BitcastOp,mlir::Type,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v9, &v8);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v6);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::BitcastOp,mlir::Type,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.bitcast", (const unsigned __int8 *)0xD, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"arith.bitcast";
    v17[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::BitcastOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void MergeComplexBitcast::~MergeComplexBitcast(MergeComplexBitcast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t MergeComplexBitcast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v8;
  unint64_t v9;

  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v9);
  if (result
    && *(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::BitcastOp,void>::id)
  {
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v9);
  if (!result)
    return result;
  if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::BitcastOp,void>::id)
  {
LABEL_7:
    v6 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
    v8 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
    v9 = v6;
    v7 = mlir::OpBuilder::create<mlir::complex::BitcastOp,mlir::Type,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v9, &v8);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v7);
    return 1;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::complex::BitcastOp,mlir::Type,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[8];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[29];

  v25[28] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"complex.bitcast", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"complex.bitcast";
    v19[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    v12 = v23;
  }
  *(_QWORD *)(v22 + 8 * v12) = v11;
  ++v23;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::BitcastOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void MergeArithBitcast::~MergeArithBitcast(MergeArithBitcast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::BitcastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::BitcastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::BitcastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t MergeArithBitcast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v8;
  unint64_t v9;

  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v9);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::BitcastOp,void>::id)
    {
      v6 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
      v8 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
      v9 = v6;
      v7 = mlir::OpBuilder::create<mlir::complex::BitcastOp,mlir::Type,mlir::Value>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v9, &v8);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v7);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *`anonymous namespace'::FoldComponentNeg<mlir::complex::ImOp,1>::~FoldComponentNeg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::FoldComponentNeg<mlir::complex::ImOp,1>::~FoldComponentNeg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ImOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ImOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ImOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::FoldComponentNeg<mlir::complex::ImOp,1>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t Value;
  mlir::GenericProgramPoint *v8;
  unint64_t v9;
  uint64_t v10;

  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v10);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::NegOp,void>::id)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
      result = mlir::Value::getDefiningOp((mlir::Value *)&v10);
      if (result)
      {
        v6 = result;
        if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::CreateOp,void>::id)
        {
          v9 = *(_QWORD *)(result - 8) & 0xFFFFFFFFFFFFFFF8;
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v9);
          v9 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 56);
          v10 = Value;
          v8 = mlir::OpBuilder::create<mlir::arith::NegFOp,mlir::Type &,mlir::Value>(a3 + 1, *(_QWORD *)(a2 + 24), &v10, (uint64_t *)&v9);
          (*((void (**)(mlir::MLIRContext **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v8);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::NegFOp,mlir::Type &,mlir::Value>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.negf", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"arith.negf";
    v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::NegFOp::build(a1, (uint64_t)v19, *a3, *a4, 0);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *`anonymous namespace'::FoldComponentNeg<mlir::complex::ReOp,0>::~FoldComponentNeg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::FoldComponentNeg<mlir::complex::ReOp,0>::~FoldComponentNeg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ReOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ReOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::complex::ReOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::FoldComponentNeg<mlir::complex::ReOp,0>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t Value;
  mlir::GenericProgramPoint *v8;
  unint64_t v9;
  uint64_t v10;

  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v10);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::NegOp,void>::id)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
      result = mlir::Value::getDefiningOp((mlir::Value *)&v10);
      if (result)
      {
        v6 = result;
        if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::CreateOp,void>::id)
        {
          v9 = *(_QWORD *)(result - 8) & 0xFFFFFFFFFFFFFFF8;
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v9);
          v9 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 24);
          v10 = Value;
          v8 = mlir::OpBuilder::create<mlir::arith::NegFOp,mlir::Type &,mlir::Value>(a3 + 1, *(_QWORD *)(a2 + 24), &v10, (uint64_t *)&v9);
          (*((void (**)(mlir::MLIRContext **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v8);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AbsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

uint64_t mlir::AsmParser::parseType<mlir::ComplexType>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD **v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v18))
    return 0;
  v5 = v18;
  if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v16 = "invalid kind of type specified";
  v17 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v19, a1, v4, &v16);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  if (v26)
  {
    v8 = (_QWORD **)__p;
    if (__p)
    {
      v9 = v25;
      v10 = __p;
      if (v25 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v25 = v8;
      operator delete(v10);
    }
    v11 = v22;
    if (v22)
    {
      v12 = v23;
      v13 = v22;
      if (v23 != v22)
      {
        do
        {
          v15 = (void *)*--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            operator delete[](v14);
        }
        while (v12 != v11);
        v13 = v22;
      }
      v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21)
      free(v20);
  }
  return v6;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AddOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AddOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AddOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AngleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Atan2Op::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ConjOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v20, a3))
    return 0;
  v7 = v20;
  if (*(_UNKNOWN **)(*(_QWORD *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    v7 = 0;
  *a2 = v7;
  if (v7)
    return 1;
  v18 = "invalid kind of attribute specified";
  v19 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v21, a1, v6, &v18);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  if (v28)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v27;
      v12 = __p;
      if (v27 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v27 = v10;
      operator delete(v12);
    }
    v13 = v24;
    if (v24)
    {
      v14 = v25;
      v15 = v24;
      if (v25 != v24)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v24;
      }
      v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23)
      free(v22);
  }
  return v8;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ConstantOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::CosOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::CosOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::CosOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::CosOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::DivOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::DivOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::DivOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::DivOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ExpOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Expm1OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Expm1Op::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ImOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ImOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ImOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ImOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Log1pOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Log1pOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::LogOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::LogOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::LogOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::LogOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::MulOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::MulOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::MulOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::MulOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

