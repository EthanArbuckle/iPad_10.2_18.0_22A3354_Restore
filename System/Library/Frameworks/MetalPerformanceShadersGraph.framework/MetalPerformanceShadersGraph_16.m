_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)2>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)2>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t DefiningOp;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  void *v43;
  unint64_t v44;
  unsigned int IndexFromDim;
  char v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  mlir::Builder *v71;
  uint64_t v72;
  uint64_t IntegerType;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *ArgAttrsAttr;
  mlir::AffineMap *v144;
  mlir::AffineMap *v145;
  uint64_t ElementTypeOrSelf;
  unsigned int *v147;
  mlir::GenericProgramPoint *v148;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[2];
  unsigned int *v158;
  _QWORD v159[2];
  void *RankPromotionTypeForANE;
  uint64_t v161;
  _OWORD v162[2];
  void *v163;
  uint64_t v164;
  _BYTE v165[16];
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172[3];

  v172[1] = *MEMORY[0x1E0C80C00];
  v158 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v7;
  v161 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  RankPromotionTypeForANE = v7;
  v161 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  v157[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v157[1] = v19;
  v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v21 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v21;
  v161 = v20;
  if ((_DWORD)v20)
  {
    v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    v22 = v161;
  }
  else
  {
    v22 = 0;
  }
  if (HIDWORD(v20) + (_DWORD)v20 == v22
    || (RankPromotionTypeForANE = v21,
        v161 = 0,
        (v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0)) == 0))
  {
    v27 = 0;
  }
  else
  {
    v163 = v23;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v163);
    if (!DefiningOp)
      return 0;
    v25 = DefiningOp;
    v26 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), v26))
      return 0;
    RankPromotionTypeForANE = v162;
    v161 = 0x100000000;
    mlir::Operation::fold(v25, 0, 0, (uint64_t)&RankPromotionTypeForANE);
    v27 = (uint64_t *)(*(_QWORD *)RankPromotionTypeForANE & 0xFFFFFFFFFFFFFFF8);
    v28 = mlir::DenseIntElementsAttr::classof((uint64_t)v27) & (v27 != 0);
    if (!v28)
      v27 = 0;
    if (RankPromotionTypeForANE != v162)
      free(RankPromotionTypeForANE);
    if ((v28 & 1) == 0)
      return 0;
  }
  v169 = &v171;
  v170 = 0x100000000;
  v30 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v158) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v30)
    goto LABEL_36;
  v31 = *v30;
  v32 = mlir::TypeID::get<mlir::ShapedType>();
  v33 = *(unsigned int *)(v31 + 16);
  if (!(_DWORD)v33)
    goto LABEL_36;
  v34 = *(_QWORD **)(v31 + 8);
  v35 = &v34[2 * v33];
  do
  {
    v36 = v33 >> 1;
    v37 = &v34[2 * (v33 >> 1)];
    v39 = *v37;
    v38 = v37 + 2;
    v33 += ~(v33 >> 1);
    if (v39 < v32)
      v34 = v38;
    else
      v33 = v36;
  }
  while (v33);
  if (v34 != v35 && *v34 == v32)
    v40 = v34[1];
  else
LABEL_36:
    v40 = 0;
  RankPromotionTypeForANE = v30;
  v161 = v40;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (!mlir::getPositivePromotedAxes(v27, v41, (uint64_t)&v169, 0, 0))
  {
    v29 = 0;
LABEL_123:
    if (v169 != &v171)
      free(v169);
    return v29;
  }
  v42 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v43 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v43;
  v161 = v42;
  if (v42)
    v43 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v42);
  RankPromotionTypeForANE = v43;
  v161 = 0;
  v155 = 0;
  v156 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157);
  IndexFromDim = mlir::anec::getIndexFromDim(3, v44);
  if (v46)
  {
    v47 = IndexFromDim;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157);
    v49 = mlir::anec::getIndexFromDim(3, v48);
    if (v50)
    {
      v51 = v49;
      v52 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157) + 8 * v47);
      v53 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157) + 8 * v51);
      v54 = (char *)v169;
      v55 = v170;
      v166 = &v168;
      v167 = 0x100000000;
      if (v170 < 2)
      {
        v56 = 0;
        if (!(_DWORD)v170)
        {
          v151 = &v168;
          goto LABEL_57;
        }
        v58 = 0;
        v57 = &v168;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v166, &v168, v170, 8);
        v56 = v167;
        v57 = v166;
        v58 = v167;
      }
      v59 = &v57[v58];
      v60 = (v55 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v151 = v57;
      if (v60 >= 7)
      {
        v62 = &v57[v58];
        v61 = v54;
        if ((unint64_t)((char *)v62 - v54) >= 0x20)
        {
          v63 = v60 + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = (uint64_t *)((char *)v59 + v64);
          v61 = &v54[v64];
          v65 = (__int128 *)(v54 + 16);
          v66 = v62 + 2;
          v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *v65;
            *(v66 - 1) = *(v65 - 1);
            *v66 = v68;
            v65 += 2;
            v66 += 2;
            v67 -= 4;
          }
          while (v67);
          if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            v70 = (v56 + v55);
            LODWORD(v167) = v56 + v55;
            v163 = v165;
            memset_pattern16(v165, &unk_181233190, 0x10uLL);
            v164 = 0x200000002;
            RankPromotionTypeForANE = v162;
            memset(v162, 0, sizeof(v162));
            v161 = 0x400000004;
            v71 = (mlir::Builder *)(a4 + 8);
            v72 = *((_QWORD *)v158 + 3);
            v159[0] = v70;
            IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
            v74 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v159, 1, IntegerType, 0);
            v75 = v74;
            if (v74)
            {
              v76 = a4;
              v77 = *v74;
              v78 = mlir::TypeID::get<mlir::ShapedType>();
              v79 = *(unsigned int *)(v77 + 16);
              if ((_DWORD)v79)
              {
                v80 = *(_QWORD **)(v77 + 8);
                v81 = &v80[2 * v79];
                do
                {
                  v82 = v79 >> 1;
                  v83 = &v80[2 * (v79 >> 1)];
                  v85 = *v83;
                  v84 = v83 + 2;
                  v79 += ~(v79 >> 1);
                  if (v85 < v78)
                    v80 = v84;
                  else
                    v79 = v82;
                }
                while (v79);
                a4 = v76;
                if (v80 != v81)
                {
                  v86 = v151;
                  if (*v80 == v78)
                    v87 = v80[1];
                  else
                    v87 = 0;
LABEL_73:
                  v154 = mlir::DenseElementsAttr::getFromRawBuffer(v75, v87, v86, 8 * v70, 8, 1, 0);
                  v159[0] = v52;
                  v159[1] = v53;
                  v172[0] = 2;
                  v88 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v89 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v88, 0);
                  v90 = v89;
                  if (!v89)
                    goto LABEL_82;
                  v91 = *v89;
                  v92 = mlir::TypeID::get<mlir::ShapedType>();
                  v93 = *(unsigned int *)(v91 + 16);
                  if (!(_DWORD)v93)
                    goto LABEL_82;
                  v94 = *(_QWORD **)(v91 + 8);
                  v95 = &v94[2 * v93];
                  do
                  {
                    v96 = v93 >> 1;
                    v97 = &v94[2 * (v93 >> 1)];
                    v99 = *v97;
                    v98 = v97 + 2;
                    v93 += ~(v93 >> 1);
                    if (v99 < v92)
                      v94 = v98;
                    else
                      v93 = v96;
                  }
                  while (v93);
                  if (v94 != v95 && *v94 == v92)
                    v100 = v94[1];
                  else
LABEL_82:
                    v100 = 0;
                  v153 = mlir::DenseElementsAttr::getFromRawBuffer(v90, v100, v159, 16, 8, 1, 0);
                  v101 = v163;
                  v102 = v164;
                  v172[0] = v164;
                  v103 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v104 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v103, 0);
                  v105 = v104;
                  if (!v104)
                    goto LABEL_92;
                  v106 = *v104;
                  v107 = mlir::TypeID::get<mlir::ShapedType>();
                  v108 = *(unsigned int *)(v106 + 16);
                  if (!(_DWORD)v108)
                    goto LABEL_92;
                  v109 = *(_QWORD **)(v106 + 8);
                  v110 = &v109[2 * v108];
                  do
                  {
                    v111 = v108 >> 1;
                    v112 = &v109[2 * (v108 >> 1)];
                    v114 = *v112;
                    v113 = v112 + 2;
                    v108 += ~(v108 >> 1);
                    if (v114 < v107)
                      v109 = v113;
                    else
                      v108 = v111;
                  }
                  while (v108);
                  if (v109 != v110 && *v109 == v107)
                    v115 = v109[1];
                  else
LABEL_92:
                    v115 = 0;
                  v152 = mlir::DenseElementsAttr::getFromRawBuffer(v105, v115, v101, 8 * v102, 8, 1, 0);
                  v116 = RankPromotionTypeForANE;
                  v117 = v161;
                  v172[0] = v161;
                  v118 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v119 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v118, 0);
                  v120 = v119;
                  if (!v119)
                    goto LABEL_102;
                  v121 = *v119;
                  v122 = mlir::TypeID::get<mlir::ShapedType>();
                  v123 = *(unsigned int *)(v121 + 16);
                  if (!(_DWORD)v123)
                    goto LABEL_102;
                  v124 = *(_QWORD **)(v121 + 8);
                  v125 = &v124[2 * v123];
                  do
                  {
                    v126 = v123 >> 1;
                    v127 = &v124[2 * (v123 >> 1)];
                    v129 = *v127;
                    v128 = v127 + 2;
                    v123 += ~(v123 >> 1);
                    if (v129 < v122)
                      v124 = v128;
                    else
                      v123 = v126;
                  }
                  while (v123);
                  if (v124 != v125 && *v124 == v122)
                    v130 = v124[1];
                  else
LABEL_102:
                    v130 = 0;
                  v172[0] = mlir::DenseElementsAttr::getFromRawBuffer(v120, v130, v116, 8 * v117, 8, 1, 0);
                  v156 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v71, v72, &v156, &v154, &v155, &v153, &v152, v172)- 16;
                  if (RankPromotionTypeForANE != v162)
                    free(RankPromotionTypeForANE);
                  if (v163 != v165)
                    free(v163);
                  if (v166 != &v168)
                    free(v166);
                  v131 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v158) + 8) & 0xFFFFFFFFFFFFFFF8);
                  if (!v131)
                    goto LABEL_118;
                  v132 = *v131;
                  v133 = mlir::TypeID::get<mlir::ShapedType>();
                  v134 = *(unsigned int *)(v132 + 16);
                  if (!(_DWORD)v134)
                    goto LABEL_118;
                  v135 = *(_QWORD **)(v132 + 8);
                  v136 = &v135[2 * v134];
                  do
                  {
                    v137 = v134 >> 1;
                    v138 = &v135[2 * (v134 >> 1)];
                    v140 = *v138;
                    v139 = v138 + 2;
                    v134 += ~(v134 >> 1);
                    if (v140 < v133)
                      v135 = v139;
                    else
                      v134 = v137;
                  }
                  while (v134);
                  if (v135 != v136 && *v135 == v133)
                    v141 = v135[1];
                  else
LABEL_118:
                    v141 = 0;
                  RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v131, v141);
                  v161 = v142;
                  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
                  v145 = v144;
                  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v156);
                  v163 = (void *)mlir::MemRefType::get(ArgAttrsAttr, v145, ElementTypeOrSelf, 0, 0, 0);
                  v147 = v158;
                  if (v163 == (void *)(*(_QWORD *)(v156 + 8) & 0xFFFFFFFFFFFFFFF8))
                  {
                    mlir::ConversionPatternRewriter::replaceOp(a4, v158, (uint64_t)&v156, 1);
                  }
                  else
                  {
                    v148 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>(v71, *((_QWORD *)v158 + 3), (uint64_t *)&v163, &v156);
                    (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, v147, v148);
                  }
                  v29 = 1;
                  goto LABEL_123;
                }
                v87 = 0;
              }
              else
              {
                v87 = 0;
                a4 = v76;
              }
              v86 = v151;
              goto LABEL_73;
            }
            v87 = 0;
            v86 = v151;
            goto LABEL_73;
          }
        }
      }
      else
      {
        v61 = v54;
      }
      do
      {
        v69 = *(_QWORD *)v61;
        v61 += 8;
        *v59++ = v69;
      }
      while (v61 != &v54[8 * v55]);
      goto LABEL_57;
    }
  }
  v150 = std::__throw_bad_optional_access[abi:nn180100]();
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)3>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)3>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)3>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t DefiningOp;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  void *v43;
  unint64_t v44;
  unsigned int IndexFromDim;
  char v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  mlir::Builder *v71;
  uint64_t v72;
  uint64_t IntegerType;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *ArgAttrsAttr;
  mlir::AffineMap *v144;
  mlir::AffineMap *v145;
  uint64_t ElementTypeOrSelf;
  unsigned int *v147;
  mlir::GenericProgramPoint *v148;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[2];
  unsigned int *v158;
  _QWORD v159[2];
  void *RankPromotionTypeForANE;
  uint64_t v161;
  _OWORD v162[2];
  void *v163;
  uint64_t v164;
  _BYTE v165[16];
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172[3];

  v172[1] = *MEMORY[0x1E0C80C00];
  v158 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v7;
  v161 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  RankPromotionTypeForANE = v7;
  v161 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  v157[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v157[1] = v19;
  v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v21 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v21;
  v161 = v20;
  if ((_DWORD)v20)
  {
    v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    v22 = v161;
  }
  else
  {
    v22 = 0;
  }
  if (HIDWORD(v20) + (_DWORD)v20 == v22
    || (RankPromotionTypeForANE = v21,
        v161 = 0,
        (v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0)) == 0))
  {
    v27 = 0;
  }
  else
  {
    v163 = v23;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v163);
    if (!DefiningOp)
      return 0;
    v25 = DefiningOp;
    v26 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), v26))
      return 0;
    RankPromotionTypeForANE = v162;
    v161 = 0x100000000;
    mlir::Operation::fold(v25, 0, 0, (uint64_t)&RankPromotionTypeForANE);
    v27 = (uint64_t *)(*(_QWORD *)RankPromotionTypeForANE & 0xFFFFFFFFFFFFFFF8);
    v28 = mlir::DenseIntElementsAttr::classof((uint64_t)v27) & (v27 != 0);
    if (!v28)
      v27 = 0;
    if (RankPromotionTypeForANE != v162)
      free(RankPromotionTypeForANE);
    if ((v28 & 1) == 0)
      return 0;
  }
  v169 = &v171;
  v170 = 0x100000000;
  v30 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v158) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v30)
    goto LABEL_36;
  v31 = *v30;
  v32 = mlir::TypeID::get<mlir::ShapedType>();
  v33 = *(unsigned int *)(v31 + 16);
  if (!(_DWORD)v33)
    goto LABEL_36;
  v34 = *(_QWORD **)(v31 + 8);
  v35 = &v34[2 * v33];
  do
  {
    v36 = v33 >> 1;
    v37 = &v34[2 * (v33 >> 1)];
    v39 = *v37;
    v38 = v37 + 2;
    v33 += ~(v33 >> 1);
    if (v39 < v32)
      v34 = v38;
    else
      v33 = v36;
  }
  while (v33);
  if (v34 != v35 && *v34 == v32)
    v40 = v34[1];
  else
LABEL_36:
    v40 = 0;
  RankPromotionTypeForANE = v30;
  v161 = v40;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (!mlir::getPositivePromotedAxes(v27, v41, (uint64_t)&v169, 0, 0))
  {
    v29 = 0;
LABEL_123:
    if (v169 != &v171)
      free(v169);
    return v29;
  }
  v42 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v43 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v43;
  v161 = v42;
  if (v42)
    v43 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v42);
  RankPromotionTypeForANE = v43;
  v161 = 0;
  v155 = 0;
  v156 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157);
  IndexFromDim = mlir::anec::getIndexFromDim(3, v44);
  if (v46)
  {
    v47 = IndexFromDim;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157);
    v49 = mlir::anec::getIndexFromDim(3, v48);
    if (v50)
    {
      v51 = v49;
      v52 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157) + 8 * v47);
      v53 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157) + 8 * v51);
      v54 = (char *)v169;
      v55 = v170;
      v166 = &v168;
      v167 = 0x100000000;
      if (v170 < 2)
      {
        v56 = 0;
        if (!(_DWORD)v170)
        {
          v151 = &v168;
          goto LABEL_57;
        }
        v58 = 0;
        v57 = &v168;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v166, &v168, v170, 8);
        v56 = v167;
        v57 = v166;
        v58 = v167;
      }
      v59 = &v57[v58];
      v60 = (v55 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v151 = v57;
      if (v60 >= 7)
      {
        v62 = &v57[v58];
        v61 = v54;
        if ((unint64_t)((char *)v62 - v54) >= 0x20)
        {
          v63 = v60 + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = (uint64_t *)((char *)v59 + v64);
          v61 = &v54[v64];
          v65 = (__int128 *)(v54 + 16);
          v66 = v62 + 2;
          v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *v65;
            *(v66 - 1) = *(v65 - 1);
            *v66 = v68;
            v65 += 2;
            v66 += 2;
            v67 -= 4;
          }
          while (v67);
          if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            v70 = (v56 + v55);
            LODWORD(v167) = v56 + v55;
            v163 = v165;
            memset_pattern16(v165, &unk_181233190, 0x10uLL);
            v164 = 0x200000002;
            RankPromotionTypeForANE = v162;
            memset(v162, 0, sizeof(v162));
            v161 = 0x400000004;
            v71 = (mlir::Builder *)(a4 + 8);
            v72 = *((_QWORD *)v158 + 3);
            v159[0] = v70;
            IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
            v74 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v159, 1, IntegerType, 0);
            v75 = v74;
            if (v74)
            {
              v76 = a4;
              v77 = *v74;
              v78 = mlir::TypeID::get<mlir::ShapedType>();
              v79 = *(unsigned int *)(v77 + 16);
              if ((_DWORD)v79)
              {
                v80 = *(_QWORD **)(v77 + 8);
                v81 = &v80[2 * v79];
                do
                {
                  v82 = v79 >> 1;
                  v83 = &v80[2 * (v79 >> 1)];
                  v85 = *v83;
                  v84 = v83 + 2;
                  v79 += ~(v79 >> 1);
                  if (v85 < v78)
                    v80 = v84;
                  else
                    v79 = v82;
                }
                while (v79);
                a4 = v76;
                if (v80 != v81)
                {
                  v86 = v151;
                  if (*v80 == v78)
                    v87 = v80[1];
                  else
                    v87 = 0;
LABEL_73:
                  v154 = mlir::DenseElementsAttr::getFromRawBuffer(v75, v87, v86, 8 * v70, 8, 1, 0);
                  v159[0] = v52;
                  v159[1] = v53;
                  v172[0] = 2;
                  v88 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v89 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v88, 0);
                  v90 = v89;
                  if (!v89)
                    goto LABEL_82;
                  v91 = *v89;
                  v92 = mlir::TypeID::get<mlir::ShapedType>();
                  v93 = *(unsigned int *)(v91 + 16);
                  if (!(_DWORD)v93)
                    goto LABEL_82;
                  v94 = *(_QWORD **)(v91 + 8);
                  v95 = &v94[2 * v93];
                  do
                  {
                    v96 = v93 >> 1;
                    v97 = &v94[2 * (v93 >> 1)];
                    v99 = *v97;
                    v98 = v97 + 2;
                    v93 += ~(v93 >> 1);
                    if (v99 < v92)
                      v94 = v98;
                    else
                      v93 = v96;
                  }
                  while (v93);
                  if (v94 != v95 && *v94 == v92)
                    v100 = v94[1];
                  else
LABEL_82:
                    v100 = 0;
                  v153 = mlir::DenseElementsAttr::getFromRawBuffer(v90, v100, v159, 16, 8, 1, 0);
                  v101 = v163;
                  v102 = v164;
                  v172[0] = v164;
                  v103 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v104 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v103, 0);
                  v105 = v104;
                  if (!v104)
                    goto LABEL_92;
                  v106 = *v104;
                  v107 = mlir::TypeID::get<mlir::ShapedType>();
                  v108 = *(unsigned int *)(v106 + 16);
                  if (!(_DWORD)v108)
                    goto LABEL_92;
                  v109 = *(_QWORD **)(v106 + 8);
                  v110 = &v109[2 * v108];
                  do
                  {
                    v111 = v108 >> 1;
                    v112 = &v109[2 * (v108 >> 1)];
                    v114 = *v112;
                    v113 = v112 + 2;
                    v108 += ~(v108 >> 1);
                    if (v114 < v107)
                      v109 = v113;
                    else
                      v108 = v111;
                  }
                  while (v108);
                  if (v109 != v110 && *v109 == v107)
                    v115 = v109[1];
                  else
LABEL_92:
                    v115 = 0;
                  v152 = mlir::DenseElementsAttr::getFromRawBuffer(v105, v115, v101, 8 * v102, 8, 1, 0);
                  v116 = RankPromotionTypeForANE;
                  v117 = v161;
                  v172[0] = v161;
                  v118 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v119 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v118, 0);
                  v120 = v119;
                  if (!v119)
                    goto LABEL_102;
                  v121 = *v119;
                  v122 = mlir::TypeID::get<mlir::ShapedType>();
                  v123 = *(unsigned int *)(v121 + 16);
                  if (!(_DWORD)v123)
                    goto LABEL_102;
                  v124 = *(_QWORD **)(v121 + 8);
                  v125 = &v124[2 * v123];
                  do
                  {
                    v126 = v123 >> 1;
                    v127 = &v124[2 * (v123 >> 1)];
                    v129 = *v127;
                    v128 = v127 + 2;
                    v123 += ~(v123 >> 1);
                    if (v129 < v122)
                      v124 = v128;
                    else
                      v123 = v126;
                  }
                  while (v123);
                  if (v124 != v125 && *v124 == v122)
                    v130 = v124[1];
                  else
LABEL_102:
                    v130 = 0;
                  v172[0] = mlir::DenseElementsAttr::getFromRawBuffer(v120, v130, v116, 8 * v117, 8, 1, 0);
                  v156 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v71, v72, &v156, &v154, &v155, &v153, &v152, v172)- 16;
                  if (RankPromotionTypeForANE != v162)
                    free(RankPromotionTypeForANE);
                  if (v163 != v165)
                    free(v163);
                  if (v166 != &v168)
                    free(v166);
                  v131 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v158) + 8) & 0xFFFFFFFFFFFFFFF8);
                  if (!v131)
                    goto LABEL_118;
                  v132 = *v131;
                  v133 = mlir::TypeID::get<mlir::ShapedType>();
                  v134 = *(unsigned int *)(v132 + 16);
                  if (!(_DWORD)v134)
                    goto LABEL_118;
                  v135 = *(_QWORD **)(v132 + 8);
                  v136 = &v135[2 * v134];
                  do
                  {
                    v137 = v134 >> 1;
                    v138 = &v135[2 * (v134 >> 1)];
                    v140 = *v138;
                    v139 = v138 + 2;
                    v134 += ~(v134 >> 1);
                    if (v140 < v133)
                      v135 = v139;
                    else
                      v134 = v137;
                  }
                  while (v134);
                  if (v135 != v136 && *v135 == v133)
                    v141 = v135[1];
                  else
LABEL_118:
                    v141 = 0;
                  RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v131, v141);
                  v161 = v142;
                  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
                  v145 = v144;
                  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v156);
                  v163 = (void *)mlir::MemRefType::get(ArgAttrsAttr, v145, ElementTypeOrSelf, 0, 0, 0);
                  v147 = v158;
                  if (v163 == (void *)(*(_QWORD *)(v156 + 8) & 0xFFFFFFFFFFFFFFF8))
                  {
                    mlir::ConversionPatternRewriter::replaceOp(a4, v158, (uint64_t)&v156, 1);
                  }
                  else
                  {
                    v148 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>(v71, *((_QWORD *)v158 + 3), (uint64_t *)&v163, &v156);
                    (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, v147, v148);
                  }
                  v29 = 1;
                  goto LABEL_123;
                }
                v87 = 0;
              }
              else
              {
                v87 = 0;
                a4 = v76;
              }
              v86 = v151;
              goto LABEL_73;
            }
            v87 = 0;
            v86 = v151;
            goto LABEL_73;
          }
        }
      }
      else
      {
        v61 = v54;
      }
      do
      {
        v69 = *(_QWORD *)v61;
        v61 += 8;
        *v59++ = v69;
      }
      while (v61 != &v54[8 * v55]);
      goto LABEL_57;
    }
  }
  v150 = std::__throw_bad_optional_access[abi:nn180100]();
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)4>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)4>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)4>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t DefiningOp;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *ArgAttrsAttr;
  mlir::AffineMap *v56;
  mlir::AffineMap *v57;
  uint64_t ElementTypeOrSelf;
  unsigned int *v59;
  mlir::GenericProgramPoint *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t RankPromotionTypeForANE;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[2];

  v70[1] = *MEMORY[0x1E0C80C00];
  v65 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  v68 = v7;
  v69 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&v68, ODSOperandIndexAndLength);
  v68 = v7;
  v69 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v20 = (void *)*((_QWORD *)this + 6);
  v68 = v20;
  v69 = v19;
  if ((_DWORD)v19)
  {
    v20 = (void *)mlir::ValueRange::offset_base(&v68, v19);
    v21 = v69;
  }
  else
  {
    v21 = 0;
  }
  if (HIDWORD(v19) + (_DWORD)v19 == v21
    || (v68 = v20, v69 = 0, (v22 = mlir::ValueRange::dereference_iterator(&v68, 0)) == 0))
  {
    v26 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v22;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
    if (!DefiningOp)
      return 0;
    v24 = DefiningOp;
    v25 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 48) + 32))(*(_QWORD *)(v24 + 48), v25))
      return 0;
    v68 = v70;
    v69 = 0x100000000;
    mlir::Operation::fold(v24, 0, 0, (uint64_t)&v68);
    v26 = (uint64_t *)(*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8);
    v27 = mlir::DenseIntElementsAttr::classof((uint64_t)v26) & (v26 != 0);
    if (!v27)
      v26 = 0;
    if (v68 != v70)
      free(v68);
    if ((v27 & 1) == 0)
      return 0;
  }
  v68 = v70;
  v69 = 0x100000000;
  v29 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v29)
    goto LABEL_36;
  v30 = *v29;
  v31 = mlir::TypeID::get<mlir::ShapedType>();
  v32 = *(unsigned int *)(v30 + 16);
  if (!(_DWORD)v32)
    goto LABEL_36;
  v33 = *(_QWORD **)(v30 + 8);
  v34 = &v33[2 * v32];
  do
  {
    v35 = v32 >> 1;
    v36 = &v33[2 * (v32 >> 1)];
    v38 = *v36;
    v37 = v36 + 2;
    v32 += ~(v32 >> 1);
    if (v38 < v31)
      v33 = v37;
    else
      v32 = v35;
  }
  while (v32);
  if (v33 != v34 && *v33 == v31)
    v39 = v33[1];
  else
LABEL_36:
    v39 = 0;
  RankPromotionTypeForANE = (uint64_t)v29;
  v67 = v39;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v26, v40, (uint64_t)&v68, 0, 0))
  {
    v41 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    v42 = *((_QWORD *)this + 6);
    RankPromotionTypeForANE = v42;
    v67 = v41;
    if (v41)
      v42 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v41);
    RankPromotionTypeForANE = v42;
    v67 = 0;
    v63 = 0;
    v64 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v64 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((_QWORD *)v65 + 3), &v64, (unsigned int *)v68, &v63)- 16;
    v43 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v43)
      goto LABEL_49;
    v44 = *v43;
    v45 = mlir::TypeID::get<mlir::ShapedType>();
    v46 = *(unsigned int *)(v44 + 16);
    if (!(_DWORD)v46)
      goto LABEL_49;
    v47 = *(_QWORD **)(v44 + 8);
    v48 = &v47[2 * v46];
    do
    {
      v49 = v46 >> 1;
      v50 = &v47[2 * (v46 >> 1)];
      v52 = *v50;
      v51 = v50 + 2;
      v46 += ~(v46 >> 1);
      if (v52 < v45)
        v47 = v51;
      else
        v46 = v49;
    }
    while (v46);
    if (v47 != v48 && *v47 == v45)
      v53 = v47[1];
    else
LABEL_49:
      v53 = 0;
    RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v43, v53);
    v67 = v54;
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    v57 = v56;
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v64);
    v62 = mlir::MemRefType::get(ArgAttrsAttr, v57, ElementTypeOrSelf, 0, 0, 0);
    v59 = v65;
    if (v62 == (*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v65, (uint64_t)&v64, 1);
    }
    else
    {
      v60 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((_QWORD *)v65 + 3), &v62, &v64);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, v59, v60);
    }
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
  if (v68 != v70)
    free(v68);
  return v28;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.global_arg_min_max", (const unsigned __int8 *)0x17, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.global_arg_min_max";
    v19[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::GlobalArgMinMax::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GlobalArgMinMax,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)5>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)5>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)5>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t DefiningOp;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *ArgAttrsAttr;
  mlir::AffineMap *v56;
  mlir::AffineMap *v57;
  uint64_t ElementTypeOrSelf;
  unsigned int *v59;
  mlir::GenericProgramPoint *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t RankPromotionTypeForANE;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[2];

  v70[1] = *MEMORY[0x1E0C80C00];
  v65 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  v68 = v7;
  v69 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&v68, ODSOperandIndexAndLength);
  v68 = v7;
  v69 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v20 = (void *)*((_QWORD *)this + 6);
  v68 = v20;
  v69 = v19;
  if ((_DWORD)v19)
  {
    v20 = (void *)mlir::ValueRange::offset_base(&v68, v19);
    v21 = v69;
  }
  else
  {
    v21 = 0;
  }
  if (HIDWORD(v19) + (_DWORD)v19 == v21
    || (v68 = v20, v69 = 0, (v22 = mlir::ValueRange::dereference_iterator(&v68, 0)) == 0))
  {
    v26 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v22;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
    if (!DefiningOp)
      return 0;
    v24 = DefiningOp;
    v25 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 48) + 32))(*(_QWORD *)(v24 + 48), v25))
      return 0;
    v68 = v70;
    v69 = 0x100000000;
    mlir::Operation::fold(v24, 0, 0, (uint64_t)&v68);
    v26 = (uint64_t *)(*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8);
    v27 = mlir::DenseIntElementsAttr::classof((uint64_t)v26) & (v26 != 0);
    if (!v27)
      v26 = 0;
    if (v68 != v70)
      free(v68);
    if ((v27 & 1) == 0)
      return 0;
  }
  v68 = v70;
  v69 = 0x100000000;
  v29 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v29)
    goto LABEL_36;
  v30 = *v29;
  v31 = mlir::TypeID::get<mlir::ShapedType>();
  v32 = *(unsigned int *)(v30 + 16);
  if (!(_DWORD)v32)
    goto LABEL_36;
  v33 = *(_QWORD **)(v30 + 8);
  v34 = &v33[2 * v32];
  do
  {
    v35 = v32 >> 1;
    v36 = &v33[2 * (v32 >> 1)];
    v38 = *v36;
    v37 = v36 + 2;
    v32 += ~(v32 >> 1);
    if (v38 < v31)
      v33 = v37;
    else
      v32 = v35;
  }
  while (v32);
  if (v33 != v34 && *v33 == v31)
    v39 = v33[1];
  else
LABEL_36:
    v39 = 0;
  RankPromotionTypeForANE = (uint64_t)v29;
  v67 = v39;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v26, v40, (uint64_t)&v68, 0, 0))
  {
    v41 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    v42 = *((_QWORD *)this + 6);
    RankPromotionTypeForANE = v42;
    v67 = v41;
    if (v41)
      v42 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v41);
    RankPromotionTypeForANE = v42;
    v67 = 0;
    v63 = 0;
    v64 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v64 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((_QWORD *)v65 + 3), &v64, (unsigned int *)v68, &v63)- 16;
    v43 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v43)
      goto LABEL_49;
    v44 = *v43;
    v45 = mlir::TypeID::get<mlir::ShapedType>();
    v46 = *(unsigned int *)(v44 + 16);
    if (!(_DWORD)v46)
      goto LABEL_49;
    v47 = *(_QWORD **)(v44 + 8);
    v48 = &v47[2 * v46];
    do
    {
      v49 = v46 >> 1;
      v50 = &v47[2 * (v46 >> 1)];
      v52 = *v50;
      v51 = v50 + 2;
      v46 += ~(v46 >> 1);
      if (v52 < v45)
        v47 = v51;
      else
        v46 = v49;
    }
    while (v46);
    if (v47 != v48 && *v47 == v45)
      v53 = v47[1];
    else
LABEL_49:
      v53 = 0;
    RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v43, v53);
    v67 = v54;
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    v57 = v56;
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v64);
    v62 = mlir::MemRefType::get(ArgAttrsAttr, v57, ElementTypeOrSelf, 0, 0, 0);
    v59 = v65;
    if (v62 == (*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v65, (uint64_t)&v64, 1);
    }
    else
    {
      v60 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((_QWORD *)v65 + 3), &v62, &v64);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, v59, v60);
    }
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
  if (v68 != v70)
    free(v68);
  return v28;
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)6>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)6>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)6>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t DefiningOp;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *ArgAttrsAttr;
  mlir::AffineMap *v56;
  mlir::AffineMap *v57;
  uint64_t ElementTypeOrSelf;
  unsigned int *v59;
  mlir::GenericProgramPoint *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t RankPromotionTypeForANE;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[2];

  v70[1] = *MEMORY[0x1E0C80C00];
  v65 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  v68 = v7;
  v69 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&v68, ODSOperandIndexAndLength);
  v68 = v7;
  v69 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v20 = (void *)*((_QWORD *)this + 6);
  v68 = v20;
  v69 = v19;
  if ((_DWORD)v19)
  {
    v20 = (void *)mlir::ValueRange::offset_base(&v68, v19);
    v21 = v69;
  }
  else
  {
    v21 = 0;
  }
  if (HIDWORD(v19) + (_DWORD)v19 == v21
    || (v68 = v20, v69 = 0, (v22 = mlir::ValueRange::dereference_iterator(&v68, 0)) == 0))
  {
    v26 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v22;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
    if (!DefiningOp)
      return 0;
    v24 = DefiningOp;
    v25 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 48) + 32))(*(_QWORD *)(v24 + 48), v25))
      return 0;
    v68 = v70;
    v69 = 0x100000000;
    mlir::Operation::fold(v24, 0, 0, (uint64_t)&v68);
    v26 = (uint64_t *)(*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8);
    v27 = mlir::DenseIntElementsAttr::classof((uint64_t)v26) & (v26 != 0);
    if (!v27)
      v26 = 0;
    if (v68 != v70)
      free(v68);
    if ((v27 & 1) == 0)
      return 0;
  }
  v68 = v70;
  v69 = 0x100000000;
  v29 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v29)
    goto LABEL_36;
  v30 = *v29;
  v31 = mlir::TypeID::get<mlir::ShapedType>();
  v32 = *(unsigned int *)(v30 + 16);
  if (!(_DWORD)v32)
    goto LABEL_36;
  v33 = *(_QWORD **)(v30 + 8);
  v34 = &v33[2 * v32];
  do
  {
    v35 = v32 >> 1;
    v36 = &v33[2 * (v32 >> 1)];
    v38 = *v36;
    v37 = v36 + 2;
    v32 += ~(v32 >> 1);
    if (v38 < v31)
      v33 = v37;
    else
      v32 = v35;
  }
  while (v32);
  if (v33 != v34 && *v33 == v31)
    v39 = v33[1];
  else
LABEL_36:
    v39 = 0;
  RankPromotionTypeForANE = (uint64_t)v29;
  v67 = v39;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v26, v40, (uint64_t)&v68, 0, 0))
  {
    v41 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    v42 = *((_QWORD *)this + 6);
    RankPromotionTypeForANE = v42;
    v67 = v41;
    if (v41)
      v42 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v41);
    RankPromotionTypeForANE = v42;
    v67 = 0;
    v63 = 0;
    v64 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v64 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((_QWORD *)v65 + 3), &v64, (unsigned int *)v68, &v63)- 16;
    v43 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v43)
      goto LABEL_49;
    v44 = *v43;
    v45 = mlir::TypeID::get<mlir::ShapedType>();
    v46 = *(unsigned int *)(v44 + 16);
    if (!(_DWORD)v46)
      goto LABEL_49;
    v47 = *(_QWORD **)(v44 + 8);
    v48 = &v47[2 * v46];
    do
    {
      v49 = v46 >> 1;
      v50 = &v47[2 * (v46 >> 1)];
      v52 = *v50;
      v51 = v50 + 2;
      v46 += ~(v46 >> 1);
      if (v52 < v45)
        v47 = v51;
      else
        v46 = v49;
    }
    while (v46);
    if (v47 != v48 && *v47 == v45)
      v53 = v47[1];
    else
LABEL_49:
      v53 = 0;
    RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v43, v53);
    v67 = v54;
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    v57 = v56;
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v64);
    v62 = mlir::MemRefType::get(ArgAttrsAttr, v57, ElementTypeOrSelf, 0, 0, 0);
    v59 = v65;
    if (v62 == (*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v65, (uint64_t)&v64, 1);
    }
    else
    {
      v60 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((_QWORD *)v65 + 3), &v62, &v64);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, v59, v60);
    }
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
  if (v68 != v70)
    free(v68);
  return v28;
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)0>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)0>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionArgMaxOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionArgMaxOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[48];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::ReductionArgMaxOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionArgMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[48];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::ReductionArgMaxOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReductionArgMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD *v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[4];
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 48);
  v9 = *(_QWORD *)(a3 + 56);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v28;
      v29 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v34, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v33 = 259;
    v30[0] = v32;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionArgMaxOp &>(mlir::mps::ReductionArgMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v33 = 259;
  v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionArgMaxOp &>(mlir::mps::ReductionArgMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t DefiningOp;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  void *v43;
  unint64_t v44;
  unsigned int IndexFromDim;
  char v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  mlir::Builder *v71;
  uint64_t v72;
  uint64_t IntegerType;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *ArgAttrsAttr;
  mlir::AffineMap *v144;
  mlir::AffineMap *v145;
  uint64_t ElementTypeOrSelf;
  uint64_t v147;
  const void ****v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[2];
  unsigned int *v158;
  _QWORD v159[2];
  void *RankPromotionTypeForANE;
  uint64_t v161;
  _OWORD v162[2];
  void *v163;
  uint64_t v164;
  _BYTE v165[16];
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172[3];

  v172[1] = *MEMORY[0x1E0C80C00];
  v158 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v7;
  v161 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  RankPromotionTypeForANE = v7;
  v161 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  v157[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v157[1] = v19;
  v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v21 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v21;
  v161 = v20;
  if ((_DWORD)v20)
  {
    v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    v22 = v161;
  }
  else
  {
    v22 = 0;
  }
  if (HIDWORD(v20) + (_DWORD)v20 == v22
    || (RankPromotionTypeForANE = v21,
        v161 = 0,
        (v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0)) == 0))
  {
    v27 = 0;
  }
  else
  {
    v163 = v23;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v163);
    if (!DefiningOp)
      return 0;
    v25 = DefiningOp;
    v26 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), v26))
      return 0;
    RankPromotionTypeForANE = v162;
    v161 = 0x100000000;
    mlir::Operation::fold(v25, 0, 0, (uint64_t)&RankPromotionTypeForANE);
    v27 = (uint64_t *)(*(_QWORD *)RankPromotionTypeForANE & 0xFFFFFFFFFFFFFFF8);
    v28 = mlir::DenseIntElementsAttr::classof((uint64_t)v27) & (v27 != 0);
    if (!v28)
      v27 = 0;
    if (RankPromotionTypeForANE != v162)
      free(RankPromotionTypeForANE);
    if ((v28 & 1) == 0)
      return 0;
  }
  v169 = (char *)&v171;
  v170 = 0x100000000;
  v30 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v158) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v30)
    goto LABEL_36;
  v31 = *v30;
  v32 = mlir::TypeID::get<mlir::ShapedType>();
  v33 = *(unsigned int *)(v31 + 16);
  if (!(_DWORD)v33)
    goto LABEL_36;
  v34 = *(_QWORD **)(v31 + 8);
  v35 = &v34[2 * v33];
  do
  {
    v36 = v33 >> 1;
    v37 = &v34[2 * (v33 >> 1)];
    v39 = *v37;
    v38 = v37 + 2;
    v33 += ~(v33 >> 1);
    if (v39 < v32)
      v34 = v38;
    else
      v33 = v36;
  }
  while (v33);
  if (v34 != v35 && *v34 == v32)
    v40 = v34[1];
  else
LABEL_36:
    v40 = 0;
  RankPromotionTypeForANE = v30;
  v161 = v40;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (!mlir::getPositivePromotedAxes(v27, v41, (uint64_t)&v169, 0, 0))
    goto LABEL_119;
  v42 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v43 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v43;
  v161 = v42;
  if (v42)
    v43 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v42);
  RankPromotionTypeForANE = v43;
  v161 = 0;
  v155 = 1;
  v156 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157);
  IndexFromDim = mlir::anec::getIndexFromDim(3, v44);
  if (v46)
  {
    v47 = IndexFromDim;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157);
    v49 = mlir::anec::getIndexFromDim(3, v48);
    if (v50)
    {
      v51 = v49;
      v52 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157) + 8 * v47);
      v53 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157) + 8 * v51);
      v54 = v169;
      v55 = v170;
      v166 = &v168;
      v167 = 0x100000000;
      if (v170 < 2)
      {
        v56 = 0;
        if (!(_DWORD)v170)
        {
          v151 = &v168;
          goto LABEL_56;
        }
        v58 = 0;
        v57 = &v168;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v166, &v168, v170, 8);
        v56 = v167;
        v57 = v166;
        v58 = v167;
      }
      v59 = &v57[v58];
      v60 = (v55 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v151 = v57;
      if (v60 >= 7)
      {
        v62 = &v57[v58];
        v61 = v54;
        if ((unint64_t)((char *)v62 - v54) >= 0x20)
        {
          v63 = v60 + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = (uint64_t *)((char *)v59 + v64);
          v61 = &v54[v64];
          v65 = (__int128 *)(v54 + 16);
          v66 = v62 + 2;
          v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *v65;
            *(v66 - 1) = *(v65 - 1);
            *v66 = v68;
            v65 += 2;
            v66 += 2;
            v67 -= 4;
          }
          while (v67);
          if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_56:
            v70 = (v56 + v55);
            LODWORD(v167) = v56 + v55;
            v163 = v165;
            memset_pattern16(v165, &unk_181233190, 0x10uLL);
            v164 = 0x200000002;
            RankPromotionTypeForANE = v162;
            memset(v162, 0, sizeof(v162));
            v161 = 0x400000004;
            v71 = (mlir::Builder *)(a4 + 8);
            v72 = *((_QWORD *)v158 + 3);
            v159[0] = v70;
            IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
            v74 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v159, 1, IntegerType, 0);
            v75 = v74;
            if (v74)
            {
              v76 = a4;
              v77 = *v74;
              v78 = mlir::TypeID::get<mlir::ShapedType>();
              v79 = *(unsigned int *)(v77 + 16);
              if ((_DWORD)v79)
              {
                v80 = *(_QWORD **)(v77 + 8);
                v81 = &v80[2 * v79];
                do
                {
                  v82 = v79 >> 1;
                  v83 = &v80[2 * (v79 >> 1)];
                  v85 = *v83;
                  v84 = v83 + 2;
                  v79 += ~(v79 >> 1);
                  if (v85 < v78)
                    v80 = v84;
                  else
                    v79 = v82;
                }
                while (v79);
                a4 = v76;
                if (v80 != v81)
                {
                  v86 = v151;
                  if (*v80 == v78)
                    v87 = v80[1];
                  else
                    v87 = 0;
                  goto LABEL_72;
                }
                v87 = 0;
              }
              else
              {
                v87 = 0;
                a4 = v76;
              }
              v86 = v151;
            }
            else
            {
              v87 = 0;
              v86 = v151;
            }
LABEL_72:
            v154 = mlir::DenseElementsAttr::getFromRawBuffer(v75, v87, v86, 8 * v70, 8, 1, 0);
            v159[0] = v52;
            v159[1] = v53;
            v172[0] = 2;
            v88 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
            v89 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v88, 0);
            v90 = v89;
            if (!v89)
              goto LABEL_81;
            v91 = *v89;
            v92 = mlir::TypeID::get<mlir::ShapedType>();
            v93 = *(unsigned int *)(v91 + 16);
            if (!(_DWORD)v93)
              goto LABEL_81;
            v94 = *(_QWORD **)(v91 + 8);
            v95 = &v94[2 * v93];
            do
            {
              v96 = v93 >> 1;
              v97 = &v94[2 * (v93 >> 1)];
              v99 = *v97;
              v98 = v97 + 2;
              v93 += ~(v93 >> 1);
              if (v99 < v92)
                v94 = v98;
              else
                v93 = v96;
            }
            while (v93);
            if (v94 != v95 && *v94 == v92)
              v100 = v94[1];
            else
LABEL_81:
              v100 = 0;
            v153 = mlir::DenseElementsAttr::getFromRawBuffer(v90, v100, v159, 16, 8, 1, 0);
            v101 = v163;
            v102 = v164;
            v172[0] = v164;
            v103 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
            v104 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v103, 0);
            v105 = v104;
            if (!v104)
              goto LABEL_91;
            v106 = *v104;
            v107 = mlir::TypeID::get<mlir::ShapedType>();
            v108 = *(unsigned int *)(v106 + 16);
            if (!(_DWORD)v108)
              goto LABEL_91;
            v109 = *(_QWORD **)(v106 + 8);
            v110 = &v109[2 * v108];
            do
            {
              v111 = v108 >> 1;
              v112 = &v109[2 * (v108 >> 1)];
              v114 = *v112;
              v113 = v112 + 2;
              v108 += ~(v108 >> 1);
              if (v114 < v107)
                v109 = v113;
              else
                v108 = v111;
            }
            while (v108);
            if (v109 != v110 && *v109 == v107)
              v115 = v109[1];
            else
LABEL_91:
              v115 = 0;
            v152 = mlir::DenseElementsAttr::getFromRawBuffer(v105, v115, v101, 8 * v102, 8, 1, 0);
            v116 = RankPromotionTypeForANE;
            v117 = v161;
            v172[0] = v161;
            v118 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
            v119 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v118, 0);
            v120 = v119;
            if (!v119)
              goto LABEL_101;
            v121 = *v119;
            v122 = mlir::TypeID::get<mlir::ShapedType>();
            v123 = *(unsigned int *)(v121 + 16);
            if (!(_DWORD)v123)
              goto LABEL_101;
            v124 = *(_QWORD **)(v121 + 8);
            v125 = &v124[2 * v123];
            do
            {
              v126 = v123 >> 1;
              v127 = &v124[2 * (v123 >> 1)];
              v129 = *v127;
              v128 = v127 + 2;
              v123 += ~(v123 >> 1);
              if (v129 < v122)
                v124 = v128;
              else
                v123 = v126;
            }
            while (v123);
            if (v124 != v125 && *v124 == v122)
              v130 = v124[1];
            else
LABEL_101:
              v130 = 0;
            v172[0] = mlir::DenseElementsAttr::getFromRawBuffer(v120, v130, v116, 8 * v117, 8, 1, 0);
            v156 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v71, v72, &v156, &v154, &v155, &v153, &v152, v172)- 16;
            if (RankPromotionTypeForANE != v162)
              free(RankPromotionTypeForANE);
            if (v163 != v165)
              free(v163);
            if (v166 != &v168)
              free(v166);
            v131 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v158) + 8) & 0xFFFFFFFFFFFFFFF8);
            if (!v131)
              goto LABEL_117;
            v132 = *v131;
            v133 = mlir::TypeID::get<mlir::ShapedType>();
            v134 = *(unsigned int *)(v132 + 16);
            if (!(_DWORD)v134)
              goto LABEL_117;
            v135 = *(_QWORD **)(v132 + 8);
            v136 = &v135[2 * v134];
            do
            {
              v137 = v134 >> 1;
              v138 = &v135[2 * (v134 >> 1)];
              v140 = *v138;
              v139 = v138 + 2;
              v134 += ~(v134 >> 1);
              if (v140 < v133)
                v135 = v139;
              else
                v134 = v137;
            }
            while (v134);
            if (v135 != v136 && *v135 == v133)
              v141 = v135[1];
            else
LABEL_117:
              v141 = 0;
            RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v131, v141);
            v161 = v142;
            ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
            v145 = v144;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v156);
            v147 = mlir::MemRefType::get(ArgAttrsAttr, v145, ElementTypeOrSelf, 0, 0, 0);
            if (v147 == (*(_QWORD *)(v156 + 8) & 0xFFFFFFFFFFFFFFF8))
            {
              v29 = 1;
              mlir::ConversionPatternRewriter::replaceOp(a4, v158, (uint64_t)&v156, 1);
LABEL_121:
              if (v169 != (char *)&v171)
                free(v169);
              return v29;
            }
LABEL_119:
            v29 = 0;
            goto LABEL_121;
          }
        }
      }
      else
      {
        v61 = v54;
      }
      do
      {
        v69 = *(_QWORD *)v61;
        v61 += 8;
        *v59++ = v69;
      }
      while (v61 != &v54[8 * v55]);
      goto LABEL_56;
    }
  }
  v149 = (const void ****)std::__throw_bad_optional_access[abi:nn180100]();
  return llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionArgMaxOp &>(mlir::mps::ReductionArgMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(v149, v150);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionArgMaxOp &>(mlir::mps::ReductionArgMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)1>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)1>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t DefiningOp;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  void *v43;
  unint64_t v44;
  unsigned int IndexFromDim;
  char v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  mlir::Builder *v71;
  uint64_t v72;
  uint64_t IntegerType;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *ArgAttrsAttr;
  mlir::AffineMap *v144;
  mlir::AffineMap *v145;
  uint64_t ElementTypeOrSelf;
  uint64_t v147;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[2];
  unsigned int *v157;
  _QWORD v158[2];
  void *RankPromotionTypeForANE;
  uint64_t v160;
  _OWORD v161[2];
  void *v162;
  uint64_t v163;
  _BYTE v164[16];
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171[3];

  v171[1] = *MEMORY[0x1E0C80C00];
  v157 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v7;
  v160 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  RankPromotionTypeForANE = v7;
  v160 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  v156[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v156[1] = v19;
  v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v21 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v21;
  v160 = v20;
  if ((_DWORD)v20)
  {
    v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    v22 = v160;
  }
  else
  {
    v22 = 0;
  }
  if (HIDWORD(v20) + (_DWORD)v20 == v22
    || (RankPromotionTypeForANE = v21,
        v160 = 0,
        (v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0)) == 0))
  {
    v27 = 0;
  }
  else
  {
    v162 = v23;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v162);
    if (!DefiningOp)
      return 0;
    v25 = DefiningOp;
    v26 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), v26))
      return 0;
    RankPromotionTypeForANE = v161;
    v160 = 0x100000000;
    mlir::Operation::fold(v25, 0, 0, (uint64_t)&RankPromotionTypeForANE);
    v27 = (uint64_t *)(*(_QWORD *)RankPromotionTypeForANE & 0xFFFFFFFFFFFFFFF8);
    v28 = mlir::DenseIntElementsAttr::classof((uint64_t)v27) & (v27 != 0);
    if (!v28)
      v27 = 0;
    if (RankPromotionTypeForANE != v161)
      free(RankPromotionTypeForANE);
    if ((v28 & 1) == 0)
      return 0;
  }
  v168 = (char *)&v170;
  v169 = 0x100000000;
  v30 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v157) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v30)
    goto LABEL_36;
  v31 = *v30;
  v32 = mlir::TypeID::get<mlir::ShapedType>();
  v33 = *(unsigned int *)(v31 + 16);
  if (!(_DWORD)v33)
    goto LABEL_36;
  v34 = *(_QWORD **)(v31 + 8);
  v35 = &v34[2 * v33];
  do
  {
    v36 = v33 >> 1;
    v37 = &v34[2 * (v33 >> 1)];
    v39 = *v37;
    v38 = v37 + 2;
    v33 += ~(v33 >> 1);
    if (v39 < v32)
      v34 = v38;
    else
      v33 = v36;
  }
  while (v33);
  if (v34 != v35 && *v34 == v32)
    v40 = v34[1];
  else
LABEL_36:
    v40 = 0;
  RankPromotionTypeForANE = v30;
  v160 = v40;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (!mlir::getPositivePromotedAxes(v27, v41, (uint64_t)&v168, 0, 0))
    goto LABEL_119;
  v42 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v43 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v43;
  v160 = v42;
  if (v42)
    v43 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v42);
  RankPromotionTypeForANE = v43;
  v160 = 0;
  v154 = 1;
  v155 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v156);
  IndexFromDim = mlir::anec::getIndexFromDim(3, v44);
  if (v46)
  {
    v47 = IndexFromDim;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v156);
    v49 = mlir::anec::getIndexFromDim(3, v48);
    if (v50)
    {
      v51 = v49;
      v52 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v156) + 8 * v47);
      v53 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v156) + 8 * v51);
      v54 = v168;
      v55 = v169;
      v165 = &v167;
      v166 = 0x100000000;
      if (v169 < 2)
      {
        v56 = 0;
        if (!(_DWORD)v169)
        {
          v150 = &v167;
          goto LABEL_56;
        }
        v58 = 0;
        v57 = &v167;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v165, &v167, v169, 8);
        v56 = v166;
        v57 = v165;
        v58 = v166;
      }
      v59 = &v57[v58];
      v60 = (v55 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v150 = v57;
      if (v60 >= 7)
      {
        v62 = &v57[v58];
        v61 = v54;
        if ((unint64_t)((char *)v62 - v54) >= 0x20)
        {
          v63 = v60 + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = (uint64_t *)((char *)v59 + v64);
          v61 = &v54[v64];
          v65 = (__int128 *)(v54 + 16);
          v66 = v62 + 2;
          v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *v65;
            *(v66 - 1) = *(v65 - 1);
            *v66 = v68;
            v65 += 2;
            v66 += 2;
            v67 -= 4;
          }
          while (v67);
          if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_56:
            v70 = (v56 + v55);
            LODWORD(v166) = v56 + v55;
            v162 = v164;
            memset_pattern16(v164, &unk_181233190, 0x10uLL);
            v163 = 0x200000002;
            RankPromotionTypeForANE = v161;
            memset(v161, 0, sizeof(v161));
            v160 = 0x400000004;
            v71 = (mlir::Builder *)(a4 + 8);
            v72 = *((_QWORD *)v157 + 3);
            v158[0] = v70;
            IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
            v74 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v158, 1, IntegerType, 0);
            v75 = v74;
            if (v74)
            {
              v76 = a4;
              v77 = *v74;
              v78 = mlir::TypeID::get<mlir::ShapedType>();
              v79 = *(unsigned int *)(v77 + 16);
              if ((_DWORD)v79)
              {
                v80 = *(_QWORD **)(v77 + 8);
                v81 = &v80[2 * v79];
                do
                {
                  v82 = v79 >> 1;
                  v83 = &v80[2 * (v79 >> 1)];
                  v85 = *v83;
                  v84 = v83 + 2;
                  v79 += ~(v79 >> 1);
                  if (v85 < v78)
                    v80 = v84;
                  else
                    v79 = v82;
                }
                while (v79);
                a4 = v76;
                if (v80 != v81)
                {
                  v86 = v150;
                  if (*v80 == v78)
                    v87 = v80[1];
                  else
                    v87 = 0;
                  goto LABEL_72;
                }
                v87 = 0;
              }
              else
              {
                v87 = 0;
                a4 = v76;
              }
              v86 = v150;
            }
            else
            {
              v87 = 0;
              v86 = v150;
            }
LABEL_72:
            v153 = mlir::DenseElementsAttr::getFromRawBuffer(v75, v87, v86, 8 * v70, 8, 1, 0);
            v158[0] = v52;
            v158[1] = v53;
            v171[0] = 2;
            v88 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
            v89 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v171, 1, v88, 0);
            v90 = v89;
            if (!v89)
              goto LABEL_81;
            v91 = *v89;
            v92 = mlir::TypeID::get<mlir::ShapedType>();
            v93 = *(unsigned int *)(v91 + 16);
            if (!(_DWORD)v93)
              goto LABEL_81;
            v94 = *(_QWORD **)(v91 + 8);
            v95 = &v94[2 * v93];
            do
            {
              v96 = v93 >> 1;
              v97 = &v94[2 * (v93 >> 1)];
              v99 = *v97;
              v98 = v97 + 2;
              v93 += ~(v93 >> 1);
              if (v99 < v92)
                v94 = v98;
              else
                v93 = v96;
            }
            while (v93);
            if (v94 != v95 && *v94 == v92)
              v100 = v94[1];
            else
LABEL_81:
              v100 = 0;
            v152 = mlir::DenseElementsAttr::getFromRawBuffer(v90, v100, v158, 16, 8, 1, 0);
            v101 = v162;
            v102 = v163;
            v171[0] = v163;
            v103 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
            v104 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v171, 1, v103, 0);
            v105 = v104;
            if (!v104)
              goto LABEL_91;
            v106 = *v104;
            v107 = mlir::TypeID::get<mlir::ShapedType>();
            v108 = *(unsigned int *)(v106 + 16);
            if (!(_DWORD)v108)
              goto LABEL_91;
            v109 = *(_QWORD **)(v106 + 8);
            v110 = &v109[2 * v108];
            do
            {
              v111 = v108 >> 1;
              v112 = &v109[2 * (v108 >> 1)];
              v114 = *v112;
              v113 = v112 + 2;
              v108 += ~(v108 >> 1);
              if (v114 < v107)
                v109 = v113;
              else
                v108 = v111;
            }
            while (v108);
            if (v109 != v110 && *v109 == v107)
              v115 = v109[1];
            else
LABEL_91:
              v115 = 0;
            v151 = mlir::DenseElementsAttr::getFromRawBuffer(v105, v115, v101, 8 * v102, 8, 1, 0);
            v116 = RankPromotionTypeForANE;
            v117 = v160;
            v171[0] = v160;
            v118 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
            v119 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v171, 1, v118, 0);
            v120 = v119;
            if (!v119)
              goto LABEL_101;
            v121 = *v119;
            v122 = mlir::TypeID::get<mlir::ShapedType>();
            v123 = *(unsigned int *)(v121 + 16);
            if (!(_DWORD)v123)
              goto LABEL_101;
            v124 = *(_QWORD **)(v121 + 8);
            v125 = &v124[2 * v123];
            do
            {
              v126 = v123 >> 1;
              v127 = &v124[2 * (v123 >> 1)];
              v129 = *v127;
              v128 = v127 + 2;
              v123 += ~(v123 >> 1);
              if (v129 < v122)
                v124 = v128;
              else
                v123 = v126;
            }
            while (v123);
            if (v124 != v125 && *v124 == v122)
              v130 = v124[1];
            else
LABEL_101:
              v130 = 0;
            v171[0] = mlir::DenseElementsAttr::getFromRawBuffer(v120, v130, v116, 8 * v117, 8, 1, 0);
            v155 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v71, v72, &v155, &v153, &v154, &v152, &v151, v171)- 16;
            if (RankPromotionTypeForANE != v161)
              free(RankPromotionTypeForANE);
            if (v162 != v164)
              free(v162);
            if (v165 != &v167)
              free(v165);
            v131 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v157) + 8) & 0xFFFFFFFFFFFFFFF8);
            if (!v131)
              goto LABEL_117;
            v132 = *v131;
            v133 = mlir::TypeID::get<mlir::ShapedType>();
            v134 = *(unsigned int *)(v132 + 16);
            if (!(_DWORD)v134)
              goto LABEL_117;
            v135 = *(_QWORD **)(v132 + 8);
            v136 = &v135[2 * v134];
            do
            {
              v137 = v134 >> 1;
              v138 = &v135[2 * (v134 >> 1)];
              v140 = *v138;
              v139 = v138 + 2;
              v134 += ~(v134 >> 1);
              if (v140 < v133)
                v135 = v139;
              else
                v134 = v137;
            }
            while (v134);
            if (v135 != v136 && *v135 == v133)
              v141 = v135[1];
            else
LABEL_117:
              v141 = 0;
            RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v131, v141);
            v160 = v142;
            ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
            v145 = v144;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v155);
            v147 = mlir::MemRefType::get(ArgAttrsAttr, v145, ElementTypeOrSelf, 0, 0, 0);
            if (v147 == (*(_QWORD *)(v155 + 8) & 0xFFFFFFFFFFFFFFF8))
            {
              v29 = 1;
              mlir::ConversionPatternRewriter::replaceOp(a4, v157, (uint64_t)&v155, 1);
LABEL_121:
              if (v168 != (char *)&v170)
                free(v168);
              return v29;
            }
LABEL_119:
            v29 = 0;
            goto LABEL_121;
          }
        }
      }
      else
      {
        v61 = v54;
      }
      do
      {
        v69 = *(_QWORD *)v61;
        v61 += 8;
        *v59++ = v69;
      }
      while (v61 != &v54[8 * v55]);
      goto LABEL_56;
    }
  }
  v149 = std::__throw_bad_optional_access[abi:nn180100]();
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)2>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)2>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t DefiningOp;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  void *v43;
  unint64_t v44;
  unsigned int IndexFromDim;
  char v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  mlir::Builder *v71;
  uint64_t v72;
  uint64_t IntegerType;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *ArgAttrsAttr;
  mlir::AffineMap *v144;
  mlir::AffineMap *v145;
  uint64_t ElementTypeOrSelf;
  unsigned int *v147;
  mlir::GenericProgramPoint *v148;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[2];
  unsigned int *v158;
  _QWORD v159[2];
  void *RankPromotionTypeForANE;
  uint64_t v161;
  _OWORD v162[2];
  void *v163;
  uint64_t v164;
  _BYTE v165[16];
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172[3];

  v172[1] = *MEMORY[0x1E0C80C00];
  v158 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v7;
  v161 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  RankPromotionTypeForANE = v7;
  v161 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  v157[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v157[1] = v19;
  v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v21 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v21;
  v161 = v20;
  if ((_DWORD)v20)
  {
    v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    v22 = v161;
  }
  else
  {
    v22 = 0;
  }
  if (HIDWORD(v20) + (_DWORD)v20 == v22
    || (RankPromotionTypeForANE = v21,
        v161 = 0,
        (v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0)) == 0))
  {
    v27 = 0;
  }
  else
  {
    v163 = v23;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v163);
    if (!DefiningOp)
      return 0;
    v25 = DefiningOp;
    v26 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), v26))
      return 0;
    RankPromotionTypeForANE = v162;
    v161 = 0x100000000;
    mlir::Operation::fold(v25, 0, 0, (uint64_t)&RankPromotionTypeForANE);
    v27 = (uint64_t *)(*(_QWORD *)RankPromotionTypeForANE & 0xFFFFFFFFFFFFFFF8);
    v28 = mlir::DenseIntElementsAttr::classof((uint64_t)v27) & (v27 != 0);
    if (!v28)
      v27 = 0;
    if (RankPromotionTypeForANE != v162)
      free(RankPromotionTypeForANE);
    if ((v28 & 1) == 0)
      return 0;
  }
  v169 = &v171;
  v170 = 0x100000000;
  v30 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v158) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v30)
    goto LABEL_36;
  v31 = *v30;
  v32 = mlir::TypeID::get<mlir::ShapedType>();
  v33 = *(unsigned int *)(v31 + 16);
  if (!(_DWORD)v33)
    goto LABEL_36;
  v34 = *(_QWORD **)(v31 + 8);
  v35 = &v34[2 * v33];
  do
  {
    v36 = v33 >> 1;
    v37 = &v34[2 * (v33 >> 1)];
    v39 = *v37;
    v38 = v37 + 2;
    v33 += ~(v33 >> 1);
    if (v39 < v32)
      v34 = v38;
    else
      v33 = v36;
  }
  while (v33);
  if (v34 != v35 && *v34 == v32)
    v40 = v34[1];
  else
LABEL_36:
    v40 = 0;
  RankPromotionTypeForANE = v30;
  v161 = v40;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (!mlir::getPositivePromotedAxes(v27, v41, (uint64_t)&v169, 0, 0))
  {
    v29 = 0;
LABEL_123:
    if (v169 != &v171)
      free(v169);
    return v29;
  }
  v42 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v43 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v43;
  v161 = v42;
  if (v42)
    v43 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v42);
  RankPromotionTypeForANE = v43;
  v161 = 0;
  v155 = 1;
  v156 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157);
  IndexFromDim = mlir::anec::getIndexFromDim(3, v44);
  if (v46)
  {
    v47 = IndexFromDim;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157);
    v49 = mlir::anec::getIndexFromDim(3, v48);
    if (v50)
    {
      v51 = v49;
      v52 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157) + 8 * v47);
      v53 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157) + 8 * v51);
      v54 = (char *)v169;
      v55 = v170;
      v166 = &v168;
      v167 = 0x100000000;
      if (v170 < 2)
      {
        v56 = 0;
        if (!(_DWORD)v170)
        {
          v151 = &v168;
          goto LABEL_57;
        }
        v58 = 0;
        v57 = &v168;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v166, &v168, v170, 8);
        v56 = v167;
        v57 = v166;
        v58 = v167;
      }
      v59 = &v57[v58];
      v60 = (v55 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v151 = v57;
      if (v60 >= 7)
      {
        v62 = &v57[v58];
        v61 = v54;
        if ((unint64_t)((char *)v62 - v54) >= 0x20)
        {
          v63 = v60 + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = (uint64_t *)((char *)v59 + v64);
          v61 = &v54[v64];
          v65 = (__int128 *)(v54 + 16);
          v66 = v62 + 2;
          v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *v65;
            *(v66 - 1) = *(v65 - 1);
            *v66 = v68;
            v65 += 2;
            v66 += 2;
            v67 -= 4;
          }
          while (v67);
          if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            v70 = (v56 + v55);
            LODWORD(v167) = v56 + v55;
            v163 = v165;
            memset_pattern16(v165, &unk_181233190, 0x10uLL);
            v164 = 0x200000002;
            RankPromotionTypeForANE = v162;
            memset(v162, 0, sizeof(v162));
            v161 = 0x400000004;
            v71 = (mlir::Builder *)(a4 + 8);
            v72 = *((_QWORD *)v158 + 3);
            v159[0] = v70;
            IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
            v74 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v159, 1, IntegerType, 0);
            v75 = v74;
            if (v74)
            {
              v76 = a4;
              v77 = *v74;
              v78 = mlir::TypeID::get<mlir::ShapedType>();
              v79 = *(unsigned int *)(v77 + 16);
              if ((_DWORD)v79)
              {
                v80 = *(_QWORD **)(v77 + 8);
                v81 = &v80[2 * v79];
                do
                {
                  v82 = v79 >> 1;
                  v83 = &v80[2 * (v79 >> 1)];
                  v85 = *v83;
                  v84 = v83 + 2;
                  v79 += ~(v79 >> 1);
                  if (v85 < v78)
                    v80 = v84;
                  else
                    v79 = v82;
                }
                while (v79);
                a4 = v76;
                if (v80 != v81)
                {
                  v86 = v151;
                  if (*v80 == v78)
                    v87 = v80[1];
                  else
                    v87 = 0;
LABEL_73:
                  v154 = mlir::DenseElementsAttr::getFromRawBuffer(v75, v87, v86, 8 * v70, 8, 1, 0);
                  v159[0] = v52;
                  v159[1] = v53;
                  v172[0] = 2;
                  v88 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v89 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v88, 0);
                  v90 = v89;
                  if (!v89)
                    goto LABEL_82;
                  v91 = *v89;
                  v92 = mlir::TypeID::get<mlir::ShapedType>();
                  v93 = *(unsigned int *)(v91 + 16);
                  if (!(_DWORD)v93)
                    goto LABEL_82;
                  v94 = *(_QWORD **)(v91 + 8);
                  v95 = &v94[2 * v93];
                  do
                  {
                    v96 = v93 >> 1;
                    v97 = &v94[2 * (v93 >> 1)];
                    v99 = *v97;
                    v98 = v97 + 2;
                    v93 += ~(v93 >> 1);
                    if (v99 < v92)
                      v94 = v98;
                    else
                      v93 = v96;
                  }
                  while (v93);
                  if (v94 != v95 && *v94 == v92)
                    v100 = v94[1];
                  else
LABEL_82:
                    v100 = 0;
                  v153 = mlir::DenseElementsAttr::getFromRawBuffer(v90, v100, v159, 16, 8, 1, 0);
                  v101 = v163;
                  v102 = v164;
                  v172[0] = v164;
                  v103 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v104 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v103, 0);
                  v105 = v104;
                  if (!v104)
                    goto LABEL_92;
                  v106 = *v104;
                  v107 = mlir::TypeID::get<mlir::ShapedType>();
                  v108 = *(unsigned int *)(v106 + 16);
                  if (!(_DWORD)v108)
                    goto LABEL_92;
                  v109 = *(_QWORD **)(v106 + 8);
                  v110 = &v109[2 * v108];
                  do
                  {
                    v111 = v108 >> 1;
                    v112 = &v109[2 * (v108 >> 1)];
                    v114 = *v112;
                    v113 = v112 + 2;
                    v108 += ~(v108 >> 1);
                    if (v114 < v107)
                      v109 = v113;
                    else
                      v108 = v111;
                  }
                  while (v108);
                  if (v109 != v110 && *v109 == v107)
                    v115 = v109[1];
                  else
LABEL_92:
                    v115 = 0;
                  v152 = mlir::DenseElementsAttr::getFromRawBuffer(v105, v115, v101, 8 * v102, 8, 1, 0);
                  v116 = RankPromotionTypeForANE;
                  v117 = v161;
                  v172[0] = v161;
                  v118 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v119 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v118, 0);
                  v120 = v119;
                  if (!v119)
                    goto LABEL_102;
                  v121 = *v119;
                  v122 = mlir::TypeID::get<mlir::ShapedType>();
                  v123 = *(unsigned int *)(v121 + 16);
                  if (!(_DWORD)v123)
                    goto LABEL_102;
                  v124 = *(_QWORD **)(v121 + 8);
                  v125 = &v124[2 * v123];
                  do
                  {
                    v126 = v123 >> 1;
                    v127 = &v124[2 * (v123 >> 1)];
                    v129 = *v127;
                    v128 = v127 + 2;
                    v123 += ~(v123 >> 1);
                    if (v129 < v122)
                      v124 = v128;
                    else
                      v123 = v126;
                  }
                  while (v123);
                  if (v124 != v125 && *v124 == v122)
                    v130 = v124[1];
                  else
LABEL_102:
                    v130 = 0;
                  v172[0] = mlir::DenseElementsAttr::getFromRawBuffer(v120, v130, v116, 8 * v117, 8, 1, 0);
                  v156 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v71, v72, &v156, &v154, &v155, &v153, &v152, v172)- 16;
                  if (RankPromotionTypeForANE != v162)
                    free(RankPromotionTypeForANE);
                  if (v163 != v165)
                    free(v163);
                  if (v166 != &v168)
                    free(v166);
                  v131 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v158) + 8) & 0xFFFFFFFFFFFFFFF8);
                  if (!v131)
                    goto LABEL_118;
                  v132 = *v131;
                  v133 = mlir::TypeID::get<mlir::ShapedType>();
                  v134 = *(unsigned int *)(v132 + 16);
                  if (!(_DWORD)v134)
                    goto LABEL_118;
                  v135 = *(_QWORD **)(v132 + 8);
                  v136 = &v135[2 * v134];
                  do
                  {
                    v137 = v134 >> 1;
                    v138 = &v135[2 * (v134 >> 1)];
                    v140 = *v138;
                    v139 = v138 + 2;
                    v134 += ~(v134 >> 1);
                    if (v140 < v133)
                      v135 = v139;
                    else
                      v134 = v137;
                  }
                  while (v134);
                  if (v135 != v136 && *v135 == v133)
                    v141 = v135[1];
                  else
LABEL_118:
                    v141 = 0;
                  RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v131, v141);
                  v161 = v142;
                  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
                  v145 = v144;
                  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v156);
                  v163 = (void *)mlir::MemRefType::get(ArgAttrsAttr, v145, ElementTypeOrSelf, 0, 0, 0);
                  v147 = v158;
                  if (v163 == (void *)(*(_QWORD *)(v156 + 8) & 0xFFFFFFFFFFFFFFF8))
                  {
                    mlir::ConversionPatternRewriter::replaceOp(a4, v158, (uint64_t)&v156, 1);
                  }
                  else
                  {
                    v148 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>(v71, *((_QWORD *)v158 + 3), (uint64_t *)&v163, &v156);
                    (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, v147, v148);
                  }
                  v29 = 1;
                  goto LABEL_123;
                }
                v87 = 0;
              }
              else
              {
                v87 = 0;
                a4 = v76;
              }
              v86 = v151;
              goto LABEL_73;
            }
            v87 = 0;
            v86 = v151;
            goto LABEL_73;
          }
        }
      }
      else
      {
        v61 = v54;
      }
      do
      {
        v69 = *(_QWORD *)v61;
        v61 += 8;
        *v59++ = v69;
      }
      while (v61 != &v54[8 * v55]);
      goto LABEL_57;
    }
  }
  v150 = std::__throw_bad_optional_access[abi:nn180100]();
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)3>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)3>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)3>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t DefiningOp;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  void *v43;
  unint64_t v44;
  unsigned int IndexFromDim;
  char v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  mlir::Builder *v71;
  uint64_t v72;
  uint64_t IntegerType;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *ArgAttrsAttr;
  mlir::AffineMap *v144;
  mlir::AffineMap *v145;
  uint64_t ElementTypeOrSelf;
  unsigned int *v147;
  mlir::GenericProgramPoint *v148;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[2];
  unsigned int *v158;
  _QWORD v159[2];
  void *RankPromotionTypeForANE;
  uint64_t v161;
  _OWORD v162[2];
  void *v163;
  uint64_t v164;
  _BYTE v165[16];
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172[3];

  v172[1] = *MEMORY[0x1E0C80C00];
  v158 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v7;
  v161 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  RankPromotionTypeForANE = v7;
  v161 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  v157[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v157[1] = v19;
  v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v21 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v21;
  v161 = v20;
  if ((_DWORD)v20)
  {
    v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    v22 = v161;
  }
  else
  {
    v22 = 0;
  }
  if (HIDWORD(v20) + (_DWORD)v20 == v22
    || (RankPromotionTypeForANE = v21,
        v161 = 0,
        (v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0)) == 0))
  {
    v27 = 0;
  }
  else
  {
    v163 = v23;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v163);
    if (!DefiningOp)
      return 0;
    v25 = DefiningOp;
    v26 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), v26))
      return 0;
    RankPromotionTypeForANE = v162;
    v161 = 0x100000000;
    mlir::Operation::fold(v25, 0, 0, (uint64_t)&RankPromotionTypeForANE);
    v27 = (uint64_t *)(*(_QWORD *)RankPromotionTypeForANE & 0xFFFFFFFFFFFFFFF8);
    v28 = mlir::DenseIntElementsAttr::classof((uint64_t)v27) & (v27 != 0);
    if (!v28)
      v27 = 0;
    if (RankPromotionTypeForANE != v162)
      free(RankPromotionTypeForANE);
    if ((v28 & 1) == 0)
      return 0;
  }
  v169 = &v171;
  v170 = 0x100000000;
  v30 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v158) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v30)
    goto LABEL_36;
  v31 = *v30;
  v32 = mlir::TypeID::get<mlir::ShapedType>();
  v33 = *(unsigned int *)(v31 + 16);
  if (!(_DWORD)v33)
    goto LABEL_36;
  v34 = *(_QWORD **)(v31 + 8);
  v35 = &v34[2 * v33];
  do
  {
    v36 = v33 >> 1;
    v37 = &v34[2 * (v33 >> 1)];
    v39 = *v37;
    v38 = v37 + 2;
    v33 += ~(v33 >> 1);
    if (v39 < v32)
      v34 = v38;
    else
      v33 = v36;
  }
  while (v33);
  if (v34 != v35 && *v34 == v32)
    v40 = v34[1];
  else
LABEL_36:
    v40 = 0;
  RankPromotionTypeForANE = v30;
  v161 = v40;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (!mlir::getPositivePromotedAxes(v27, v41, (uint64_t)&v169, 0, 0))
  {
    v29 = 0;
LABEL_123:
    if (v169 != &v171)
      free(v169);
    return v29;
  }
  v42 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v43 = (void *)*((_QWORD *)this + 6);
  RankPromotionTypeForANE = v43;
  v161 = v42;
  if (v42)
    v43 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v42);
  RankPromotionTypeForANE = v43;
  v161 = 0;
  v155 = 1;
  v156 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157);
  IndexFromDim = mlir::anec::getIndexFromDim(3, v44);
  if (v46)
  {
    v47 = IndexFromDim;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157);
    v49 = mlir::anec::getIndexFromDim(3, v48);
    if (v50)
    {
      v51 = v49;
      v52 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157) + 8 * v47);
      v53 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v157) + 8 * v51);
      v54 = (char *)v169;
      v55 = v170;
      v166 = &v168;
      v167 = 0x100000000;
      if (v170 < 2)
      {
        v56 = 0;
        if (!(_DWORD)v170)
        {
          v151 = &v168;
          goto LABEL_57;
        }
        v58 = 0;
        v57 = &v168;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v166, &v168, v170, 8);
        v56 = v167;
        v57 = v166;
        v58 = v167;
      }
      v59 = &v57[v58];
      v60 = (v55 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v151 = v57;
      if (v60 >= 7)
      {
        v62 = &v57[v58];
        v61 = v54;
        if ((unint64_t)((char *)v62 - v54) >= 0x20)
        {
          v63 = v60 + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = (uint64_t *)((char *)v59 + v64);
          v61 = &v54[v64];
          v65 = (__int128 *)(v54 + 16);
          v66 = v62 + 2;
          v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *v65;
            *(v66 - 1) = *(v65 - 1);
            *v66 = v68;
            v65 += 2;
            v66 += 2;
            v67 -= 4;
          }
          while (v67);
          if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            v70 = (v56 + v55);
            LODWORD(v167) = v56 + v55;
            v163 = v165;
            memset_pattern16(v165, &unk_181233190, 0x10uLL);
            v164 = 0x200000002;
            RankPromotionTypeForANE = v162;
            memset(v162, 0, sizeof(v162));
            v161 = 0x400000004;
            v71 = (mlir::Builder *)(a4 + 8);
            v72 = *((_QWORD *)v158 + 3);
            v159[0] = v70;
            IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
            v74 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v159, 1, IntegerType, 0);
            v75 = v74;
            if (v74)
            {
              v76 = a4;
              v77 = *v74;
              v78 = mlir::TypeID::get<mlir::ShapedType>();
              v79 = *(unsigned int *)(v77 + 16);
              if ((_DWORD)v79)
              {
                v80 = *(_QWORD **)(v77 + 8);
                v81 = &v80[2 * v79];
                do
                {
                  v82 = v79 >> 1;
                  v83 = &v80[2 * (v79 >> 1)];
                  v85 = *v83;
                  v84 = v83 + 2;
                  v79 += ~(v79 >> 1);
                  if (v85 < v78)
                    v80 = v84;
                  else
                    v79 = v82;
                }
                while (v79);
                a4 = v76;
                if (v80 != v81)
                {
                  v86 = v151;
                  if (*v80 == v78)
                    v87 = v80[1];
                  else
                    v87 = 0;
LABEL_73:
                  v154 = mlir::DenseElementsAttr::getFromRawBuffer(v75, v87, v86, 8 * v70, 8, 1, 0);
                  v159[0] = v52;
                  v159[1] = v53;
                  v172[0] = 2;
                  v88 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v89 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v88, 0);
                  v90 = v89;
                  if (!v89)
                    goto LABEL_82;
                  v91 = *v89;
                  v92 = mlir::TypeID::get<mlir::ShapedType>();
                  v93 = *(unsigned int *)(v91 + 16);
                  if (!(_DWORD)v93)
                    goto LABEL_82;
                  v94 = *(_QWORD **)(v91 + 8);
                  v95 = &v94[2 * v93];
                  do
                  {
                    v96 = v93 >> 1;
                    v97 = &v94[2 * (v93 >> 1)];
                    v99 = *v97;
                    v98 = v97 + 2;
                    v93 += ~(v93 >> 1);
                    if (v99 < v92)
                      v94 = v98;
                    else
                      v93 = v96;
                  }
                  while (v93);
                  if (v94 != v95 && *v94 == v92)
                    v100 = v94[1];
                  else
LABEL_82:
                    v100 = 0;
                  v153 = mlir::DenseElementsAttr::getFromRawBuffer(v90, v100, v159, 16, 8, 1, 0);
                  v101 = v163;
                  v102 = v164;
                  v172[0] = v164;
                  v103 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v104 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v103, 0);
                  v105 = v104;
                  if (!v104)
                    goto LABEL_92;
                  v106 = *v104;
                  v107 = mlir::TypeID::get<mlir::ShapedType>();
                  v108 = *(unsigned int *)(v106 + 16);
                  if (!(_DWORD)v108)
                    goto LABEL_92;
                  v109 = *(_QWORD **)(v106 + 8);
                  v110 = &v109[2 * v108];
                  do
                  {
                    v111 = v108 >> 1;
                    v112 = &v109[2 * (v108 >> 1)];
                    v114 = *v112;
                    v113 = v112 + 2;
                    v108 += ~(v108 >> 1);
                    if (v114 < v107)
                      v109 = v113;
                    else
                      v108 = v111;
                  }
                  while (v108);
                  if (v109 != v110 && *v109 == v107)
                    v115 = v109[1];
                  else
LABEL_92:
                    v115 = 0;
                  v152 = mlir::DenseElementsAttr::getFromRawBuffer(v105, v115, v101, 8 * v102, 8, 1, 0);
                  v116 = RankPromotionTypeForANE;
                  v117 = v161;
                  v172[0] = v161;
                  v118 = mlir::Builder::getIntegerType(v71, 0x40u, 0);
                  v119 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v172, 1, v118, 0);
                  v120 = v119;
                  if (!v119)
                    goto LABEL_102;
                  v121 = *v119;
                  v122 = mlir::TypeID::get<mlir::ShapedType>();
                  v123 = *(unsigned int *)(v121 + 16);
                  if (!(_DWORD)v123)
                    goto LABEL_102;
                  v124 = *(_QWORD **)(v121 + 8);
                  v125 = &v124[2 * v123];
                  do
                  {
                    v126 = v123 >> 1;
                    v127 = &v124[2 * (v123 >> 1)];
                    v129 = *v127;
                    v128 = v127 + 2;
                    v123 += ~(v123 >> 1);
                    if (v129 < v122)
                      v124 = v128;
                    else
                      v123 = v126;
                  }
                  while (v123);
                  if (v124 != v125 && *v124 == v122)
                    v130 = v124[1];
                  else
LABEL_102:
                    v130 = 0;
                  v172[0] = mlir::DenseElementsAttr::getFromRawBuffer(v120, v130, v116, 8 * v117, 8, 1, 0);
                  v156 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v71, v72, &v156, &v154, &v155, &v153, &v152, v172)- 16;
                  if (RankPromotionTypeForANE != v162)
                    free(RankPromotionTypeForANE);
                  if (v163 != v165)
                    free(v163);
                  if (v166 != &v168)
                    free(v166);
                  v131 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v158) + 8) & 0xFFFFFFFFFFFFFFF8);
                  if (!v131)
                    goto LABEL_118;
                  v132 = *v131;
                  v133 = mlir::TypeID::get<mlir::ShapedType>();
                  v134 = *(unsigned int *)(v132 + 16);
                  if (!(_DWORD)v134)
                    goto LABEL_118;
                  v135 = *(_QWORD **)(v132 + 8);
                  v136 = &v135[2 * v134];
                  do
                  {
                    v137 = v134 >> 1;
                    v138 = &v135[2 * (v134 >> 1)];
                    v140 = *v138;
                    v139 = v138 + 2;
                    v134 += ~(v134 >> 1);
                    if (v140 < v133)
                      v135 = v139;
                    else
                      v134 = v137;
                  }
                  while (v134);
                  if (v135 != v136 && *v135 == v133)
                    v141 = v135[1];
                  else
LABEL_118:
                    v141 = 0;
                  RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v131, v141);
                  v161 = v142;
                  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
                  v145 = v144;
                  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v156);
                  v163 = (void *)mlir::MemRefType::get(ArgAttrsAttr, v145, ElementTypeOrSelf, 0, 0, 0);
                  v147 = v158;
                  if (v163 == (void *)(*(_QWORD *)(v156 + 8) & 0xFFFFFFFFFFFFFFF8))
                  {
                    mlir::ConversionPatternRewriter::replaceOp(a4, v158, (uint64_t)&v156, 1);
                  }
                  else
                  {
                    v148 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>(v71, *((_QWORD *)v158 + 3), (uint64_t *)&v163, &v156);
                    (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, v147, v148);
                  }
                  v29 = 1;
                  goto LABEL_123;
                }
                v87 = 0;
              }
              else
              {
                v87 = 0;
                a4 = v76;
              }
              v86 = v151;
              goto LABEL_73;
            }
            v87 = 0;
            v86 = v151;
            goto LABEL_73;
          }
        }
      }
      else
      {
        v61 = v54;
      }
      do
      {
        v69 = *(_QWORD *)v61;
        v61 += 8;
        *v59++ = v69;
      }
      while (v61 != &v54[8 * v55]);
      goto LABEL_57;
    }
  }
  v150 = std::__throw_bad_optional_access[abi:nn180100]();
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)4>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)4>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)4>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t DefiningOp;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *ArgAttrsAttr;
  mlir::AffineMap *v56;
  mlir::AffineMap *v57;
  uint64_t ElementTypeOrSelf;
  unsigned int *v59;
  mlir::GenericProgramPoint *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t RankPromotionTypeForANE;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[2];

  v70[1] = *MEMORY[0x1E0C80C00];
  v65 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  v68 = v7;
  v69 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&v68, ODSOperandIndexAndLength);
  v68 = v7;
  v69 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v20 = (void *)*((_QWORD *)this + 6);
  v68 = v20;
  v69 = v19;
  if ((_DWORD)v19)
  {
    v20 = (void *)mlir::ValueRange::offset_base(&v68, v19);
    v21 = v69;
  }
  else
  {
    v21 = 0;
  }
  if (HIDWORD(v19) + (_DWORD)v19 == v21
    || (v68 = v20, v69 = 0, (v22 = mlir::ValueRange::dereference_iterator(&v68, 0)) == 0))
  {
    v26 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v22;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
    if (!DefiningOp)
      return 0;
    v24 = DefiningOp;
    v25 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 48) + 32))(*(_QWORD *)(v24 + 48), v25))
      return 0;
    v68 = v70;
    v69 = 0x100000000;
    mlir::Operation::fold(v24, 0, 0, (uint64_t)&v68);
    v26 = (uint64_t *)(*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8);
    v27 = mlir::DenseIntElementsAttr::classof((uint64_t)v26) & (v26 != 0);
    if (!v27)
      v26 = 0;
    if (v68 != v70)
      free(v68);
    if ((v27 & 1) == 0)
      return 0;
  }
  v68 = v70;
  v69 = 0x100000000;
  v29 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v29)
    goto LABEL_36;
  v30 = *v29;
  v31 = mlir::TypeID::get<mlir::ShapedType>();
  v32 = *(unsigned int *)(v30 + 16);
  if (!(_DWORD)v32)
    goto LABEL_36;
  v33 = *(_QWORD **)(v30 + 8);
  v34 = &v33[2 * v32];
  do
  {
    v35 = v32 >> 1;
    v36 = &v33[2 * (v32 >> 1)];
    v38 = *v36;
    v37 = v36 + 2;
    v32 += ~(v32 >> 1);
    if (v38 < v31)
      v33 = v37;
    else
      v32 = v35;
  }
  while (v32);
  if (v33 != v34 && *v33 == v31)
    v39 = v33[1];
  else
LABEL_36:
    v39 = 0;
  RankPromotionTypeForANE = (uint64_t)v29;
  v67 = v39;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v26, v40, (uint64_t)&v68, 0, 0))
  {
    v41 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    v42 = *((_QWORD *)this + 6);
    RankPromotionTypeForANE = v42;
    v67 = v41;
    if (v41)
      v42 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v41);
    RankPromotionTypeForANE = v42;
    v67 = 0;
    v63 = 1;
    v64 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v64 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((_QWORD *)v65 + 3), &v64, (unsigned int *)v68, &v63)- 16;
    v43 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v43)
      goto LABEL_49;
    v44 = *v43;
    v45 = mlir::TypeID::get<mlir::ShapedType>();
    v46 = *(unsigned int *)(v44 + 16);
    if (!(_DWORD)v46)
      goto LABEL_49;
    v47 = *(_QWORD **)(v44 + 8);
    v48 = &v47[2 * v46];
    do
    {
      v49 = v46 >> 1;
      v50 = &v47[2 * (v46 >> 1)];
      v52 = *v50;
      v51 = v50 + 2;
      v46 += ~(v46 >> 1);
      if (v52 < v45)
        v47 = v51;
      else
        v46 = v49;
    }
    while (v46);
    if (v47 != v48 && *v47 == v45)
      v53 = v47[1];
    else
LABEL_49:
      v53 = 0;
    RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v43, v53);
    v67 = v54;
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    v57 = v56;
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v64);
    v62 = mlir::MemRefType::get(ArgAttrsAttr, v57, ElementTypeOrSelf, 0, 0, 0);
    v59 = v65;
    if (v62 == (*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v65, (uint64_t)&v64, 1);
    }
    else
    {
      v60 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((_QWORD *)v65 + 3), &v62, &v64);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, v59, v60);
    }
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
  if (v68 != v70)
    free(v68);
  return v28;
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)5>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)5>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)5>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t DefiningOp;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *ArgAttrsAttr;
  mlir::AffineMap *v56;
  mlir::AffineMap *v57;
  uint64_t ElementTypeOrSelf;
  unsigned int *v59;
  mlir::GenericProgramPoint *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t RankPromotionTypeForANE;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[2];

  v70[1] = *MEMORY[0x1E0C80C00];
  v65 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  v68 = v7;
  v69 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&v68, ODSOperandIndexAndLength);
  v68 = v7;
  v69 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v20 = (void *)*((_QWORD *)this + 6);
  v68 = v20;
  v69 = v19;
  if ((_DWORD)v19)
  {
    v20 = (void *)mlir::ValueRange::offset_base(&v68, v19);
    v21 = v69;
  }
  else
  {
    v21 = 0;
  }
  if (HIDWORD(v19) + (_DWORD)v19 == v21
    || (v68 = v20, v69 = 0, (v22 = mlir::ValueRange::dereference_iterator(&v68, 0)) == 0))
  {
    v26 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v22;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
    if (!DefiningOp)
      return 0;
    v24 = DefiningOp;
    v25 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 48) + 32))(*(_QWORD *)(v24 + 48), v25))
      return 0;
    v68 = v70;
    v69 = 0x100000000;
    mlir::Operation::fold(v24, 0, 0, (uint64_t)&v68);
    v26 = (uint64_t *)(*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8);
    v27 = mlir::DenseIntElementsAttr::classof((uint64_t)v26) & (v26 != 0);
    if (!v27)
      v26 = 0;
    if (v68 != v70)
      free(v68);
    if ((v27 & 1) == 0)
      return 0;
  }
  v68 = v70;
  v69 = 0x100000000;
  v29 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v29)
    goto LABEL_36;
  v30 = *v29;
  v31 = mlir::TypeID::get<mlir::ShapedType>();
  v32 = *(unsigned int *)(v30 + 16);
  if (!(_DWORD)v32)
    goto LABEL_36;
  v33 = *(_QWORD **)(v30 + 8);
  v34 = &v33[2 * v32];
  do
  {
    v35 = v32 >> 1;
    v36 = &v33[2 * (v32 >> 1)];
    v38 = *v36;
    v37 = v36 + 2;
    v32 += ~(v32 >> 1);
    if (v38 < v31)
      v33 = v37;
    else
      v32 = v35;
  }
  while (v32);
  if (v33 != v34 && *v33 == v31)
    v39 = v33[1];
  else
LABEL_36:
    v39 = 0;
  RankPromotionTypeForANE = (uint64_t)v29;
  v67 = v39;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v26, v40, (uint64_t)&v68, 0, 0))
  {
    v41 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    v42 = *((_QWORD *)this + 6);
    RankPromotionTypeForANE = v42;
    v67 = v41;
    if (v41)
      v42 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v41);
    RankPromotionTypeForANE = v42;
    v67 = 0;
    v63 = 1;
    v64 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v64 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((_QWORD *)v65 + 3), &v64, (unsigned int *)v68, &v63)- 16;
    v43 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v43)
      goto LABEL_49;
    v44 = *v43;
    v45 = mlir::TypeID::get<mlir::ShapedType>();
    v46 = *(unsigned int *)(v44 + 16);
    if (!(_DWORD)v46)
      goto LABEL_49;
    v47 = *(_QWORD **)(v44 + 8);
    v48 = &v47[2 * v46];
    do
    {
      v49 = v46 >> 1;
      v50 = &v47[2 * (v46 >> 1)];
      v52 = *v50;
      v51 = v50 + 2;
      v46 += ~(v46 >> 1);
      if (v52 < v45)
        v47 = v51;
      else
        v46 = v49;
    }
    while (v46);
    if (v47 != v48 && *v47 == v45)
      v53 = v47[1];
    else
LABEL_49:
      v53 = 0;
    RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v43, v53);
    v67 = v54;
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    v57 = v56;
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v64);
    v62 = mlir::MemRefType::get(ArgAttrsAttr, v57, ElementTypeOrSelf, 0, 0, 0);
    v59 = v65;
    if (v62 == (*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v65, (uint64_t)&v64, 1);
    }
    else
    {
      v60 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((_QWORD *)v65 + 3), &v62, &v64);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, v59, v60);
    }
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
  if (v68 != v70)
    free(v68);
  return v28;
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)6>::~ConvertReductionArg(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)6>::~ConvertReductionArg(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)6>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t DefiningOp;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *ArgAttrsAttr;
  mlir::AffineMap *v56;
  mlir::AffineMap *v57;
  uint64_t ElementTypeOrSelf;
  unsigned int *v59;
  mlir::GenericProgramPoint *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t RankPromotionTypeForANE;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[2];

  v70[1] = *MEMORY[0x1E0C80C00];
  v65 = a2;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  v7 = (void *)*((_QWORD *)this + 6);
  v68 = v7;
  v69 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v7 = (void *)mlir::ValueRange::offset_base(&v68, ODSOperandIndexAndLength);
  v68 = v7;
  v69 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_12;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  v20 = (void *)*((_QWORD *)this + 6);
  v68 = v20;
  v69 = v19;
  if ((_DWORD)v19)
  {
    v20 = (void *)mlir::ValueRange::offset_base(&v68, v19);
    v21 = v69;
  }
  else
  {
    v21 = 0;
  }
  if (HIDWORD(v19) + (_DWORD)v19 == v21
    || (v68 = v20, v69 = 0, (v22 = mlir::ValueRange::dereference_iterator(&v68, 0)) == 0))
  {
    v26 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v22;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
    if (!DefiningOp)
      return 0;
    v24 = DefiningOp;
    v25 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 48) + 32))(*(_QWORD *)(v24 + 48), v25))
      return 0;
    v68 = v70;
    v69 = 0x100000000;
    mlir::Operation::fold(v24, 0, 0, (uint64_t)&v68);
    v26 = (uint64_t *)(*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8);
    v27 = mlir::DenseIntElementsAttr::classof((uint64_t)v26) & (v26 != 0);
    if (!v27)
      v26 = 0;
    if (v68 != v70)
      free(v68);
    if ((v27 & 1) == 0)
      return 0;
  }
  v68 = v70;
  v69 = 0x100000000;
  v29 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v29)
    goto LABEL_36;
  v30 = *v29;
  v31 = mlir::TypeID::get<mlir::ShapedType>();
  v32 = *(unsigned int *)(v30 + 16);
  if (!(_DWORD)v32)
    goto LABEL_36;
  v33 = *(_QWORD **)(v30 + 8);
  v34 = &v33[2 * v32];
  do
  {
    v35 = v32 >> 1;
    v36 = &v33[2 * (v32 >> 1)];
    v38 = *v36;
    v37 = v36 + 2;
    v32 += ~(v32 >> 1);
    if (v38 < v31)
      v33 = v37;
    else
      v32 = v35;
  }
  while (v32);
  if (v33 != v34 && *v33 == v31)
    v39 = v33[1];
  else
LABEL_36:
    v39 = 0;
  RankPromotionTypeForANE = (uint64_t)v29;
  v67 = v39;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v26, v40, (uint64_t)&v68, 0, 0))
  {
    v41 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    v42 = *((_QWORD *)this + 6);
    RankPromotionTypeForANE = v42;
    v67 = v41;
    if (v41)
      v42 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v41);
    RankPromotionTypeForANE = v42;
    v67 = 0;
    v63 = 1;
    v64 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v64 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((_QWORD *)v65 + 3), &v64, (unsigned int *)v68, &v63)- 16;
    v43 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v43)
      goto LABEL_49;
    v44 = *v43;
    v45 = mlir::TypeID::get<mlir::ShapedType>();
    v46 = *(unsigned int *)(v44 + 16);
    if (!(_DWORD)v46)
      goto LABEL_49;
    v47 = *(_QWORD **)(v44 + 8);
    v48 = &v47[2 * v46];
    do
    {
      v49 = v46 >> 1;
      v50 = &v47[2 * (v46 >> 1)];
      v52 = *v50;
      v51 = v50 + 2;
      v46 += ~(v46 >> 1);
      if (v52 < v45)
        v47 = v51;
      else
        v46 = v49;
    }
    while (v46);
    if (v47 != v48 && *v47 == v45)
      v53 = v47[1];
    else
LABEL_49:
      v53 = 0;
    RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v43, v53);
    v67 = v54;
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    v57 = v56;
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v64);
    v62 = mlir::MemRefType::get(ArgAttrsAttr, v57, ElementTypeOrSelf, 0, 0, 0);
    v59 = v65;
    if (v62 == (*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v65, (uint64_t)&v64, 1);
    }
    else
    {
      v60 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((_QWORD *)v65 + 3), &v62, &v64);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, v59, v60);
    }
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
  if (v68 != v70)
    free(v68);
  return v28;
}

void mlir::`anonymous namespace'::ConvertSignBit::~ConvertSignBit(mlir::_anonymous_namespace_::ConvertSignBit *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SignbitOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SignbitOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SignbitOpGenericAdaptorBase::SignbitOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SignbitOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SignbitOpGenericAdaptorBase::SignbitOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::SignbitOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SignbitOp &>(mlir::mps::SignbitOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SignbitOp &>(mlir::mps::SignbitOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

void mlir::`anonymous namespace'::ConvertSignBit::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, mlir::scf::detail::IfOpGenericAdaptorBase *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v9;
  uint64_t Result;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  uint64_t v14;
  pthread_rwlock_t *v15[67];
  mlir::GenericProgramPoint *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v15, *(const mlir::TypeConverter **)(a1 + 96));
  v7 = *(_QWORD *)(a2 + 24);
  ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(a3, 0);
  v9 = *((_QWORD *)a3 + 5);
  v16 = (mlir::GenericProgramPoint *)v9;
  v17 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v9 = mlir::ValueRange::offset_base(&v16, ODSOperandIndexAndLength);
  v16 = (mlir::GenericProgramPoint *)v9;
  v17 = 0;
  v13 = mlir::ValueRange::dereference_iterator(&v16, 0);
  v16 = mlir::OpBuilder::create<mlir::anec::ElementwiseLessThanZero,mlir::Value &>(a4 + 1, v7, &v13);
  Result = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v14);
  v13 = mlir::TypeConverter::convertType((uint64_t)v15, (void *)(*(_QWORD *)(Result + 8) & 0xFFFFFFFFFFFFFFF8));
  v11 = v14;
  v12 = mlir::OpBuilder::create<mlir::anec::Cast,mlir::Type &,mlir::anec::ElementwiseNotEqualZero &>((mlir::OpBuilder *)(a4 + 1), *(_QWORD *)(v14 + 24), &v13, &v16);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, v11, v12);
  mlir::TypeConverter::~TypeConverter(v15);
}

uint64_t sub_1807C0BE8()
{
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SignbitOp &>(mlir::mps::SignbitOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void mlir::`anonymous namespace'::ConvertTile::~ConvertTile(mlir::_anonymous_namespace_::ConvertTile *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::OpConversionPattern<mlir::mps::TileOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::TileOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::TileOpGenericAdaptorBase::TileOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::TileOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::TileOpGenericAdaptorBase::TileOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::TileOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::TileOp &>(mlir::mps::TileOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::TileOp &>(mlir::mps::TileOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertTile::matchAndRewriteWithStaticShapes(int a1, uint64_t a2, mlir::scf::detail::IfOpGenericAdaptorBase *this, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _OWORD *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t IntegerType;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  mlir::GenericProgramPoint *v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[40];
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v34 = v36;
  v35 = 0x500000000;
  ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u);
  v8 = *((_QWORD *)this + 5);
  v37 = v8;
  v38 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v8 = mlir::ValueRange::offset_base(&v37, ODSOperandIndexAndLength);
  v37 = v8;
  v38 = 0;
  v9 = mlir::ValueRange::dereference_iterator(&v37, 0);
  if (mlir::matchConstantWithIntVector<unsigned long long>(v9, (uint64_t)&v34))
  {
    switch((int)v35)
    {
      case 0:
        LODWORD(v35) = 0;
        if (HIDWORD(v35) > 3)
        {
          v10 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, 4uLL, 8);
          v10 = v35;
        }
        v14 = (char *)v34 + 8 * v10;
        *v14 = xmmword_181246590;
        v14[1] = unk_1812465A0;
        LODWORD(v35) = v35 + 4;
        break;
      case 1:
        v12 = (char *)v34;
        v13 = 3;
        goto LABEL_12;
      case 2:
        llvm::SmallVectorImpl<long long>::insert((uint64_t)&v34, (uint64_t)v34 + 8, 1uLL, 1uLL);
        v12 = (char *)v34;
        goto LABEL_11;
      case 3:
        v12 = (char *)v34 + 16;
LABEL_11:
        v13 = 1;
LABEL_12:
        llvm::SmallVectorImpl<long long>::insert((uint64_t)&v34, (uint64_t)v12, v13, 1uLL);
        break;
      default:
        break;
    }
    v15 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0);
    v16 = *((_QWORD *)this + 5);
    v37 = v16;
    v38 = v15;
    if (v15)
      v16 = mlir::ValueRange::offset_base(&v37, v15);
    v37 = v16;
    v38 = 0;
    v37 = mlir::ValueRange::dereference_iterator(&v37, 0);
    v33 = v35;
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
    v18 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v33, 1, IntegerType, 0);
    v19 = v18;
    if (!v18)
      goto LABEL_26;
    v20 = *v18;
    v21 = mlir::TypeID::get<mlir::ShapedType>();
    v22 = *(unsigned int *)(v20 + 16);
    if (!(_DWORD)v22)
      goto LABEL_26;
    v23 = *(_QWORD **)(v20 + 8);
    v24 = &v23[2 * v22];
    do
    {
      v25 = v22 >> 1;
      v26 = &v23[2 * (v22 >> 1)];
      v28 = *v26;
      v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21)
        v23 = v27;
      else
        v22 = v25;
    }
    while (v22);
    if (v23 != v24 && *v23 == v21)
      v29 = v23[1];
    else
LABEL_26:
      v29 = 0;
    v11 = 1;
    v32 = mlir::DenseElementsAttr::getFromRawBuffer(v19, v29, v34, 8 * v35, 8, 1, 0);
    v30 = mlir::OpBuilder::create<mlir::anec::Tile,mlir::Value,mlir::DenseIntElementsAttr>((mlir::UnknownLoc **)(a4 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v37, &v32);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, a2, v30);
  }
  else
  {
    v11 = 0;
  }
  if (v34 != v36)
    free(v34);
  return v11;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Tile,mlir::Value,mlir::DenseIntElementsAttr>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.tile", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.tile";
    v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Tile::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Tile,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::`anonymous namespace'::RegionReturnTypeConversion::~RegionReturnTypeConversion(mlir::_anonymous_namespace_::RegionReturnTypeConversion *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::OpConversionPattern<mlir::anec::RegionReturn>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::anec::RegionReturn>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::anec::detail::RegionReturnGenericAdaptorBase::RegionReturnGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::anec::RegionReturn>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::anec::detail::RegionReturnGenericAdaptorBase::RegionReturnGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::RegionReturnTypeConversion::matchAndRewrite(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a4 + 72))(a4);
  mlir::Operation::setOperands(a2, *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48));
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a4 + 80))(a4, a2);
  return 1;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LeakyReluOp,mlir::anec::LeakyRelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = off_1E0E29750;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_1807C17D4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::LeakyReluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LeakyReluOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::LeakyReluOpGenericAdaptorBase::LeakyReluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LeakyReluOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::LeakyReluOpGenericAdaptorBase::LeakyReluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::LeakyReluOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LeakyReluOp &>(mlir::mps::LeakyReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LeakyReluOp &>(mlir::mps::LeakyReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LeakyReluOp,mlir::anec::LeakyRelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::LeakyRelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LeakyReluOp &>(mlir::mps::LeakyReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LeakyReluOp,mlir::anec::LeakyRelu>::matchAndRewriteWithStaticShapes(mlir::mps::LeakyReluOp,mlir::mps::LeakyReluOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::LeakyRelu,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.leaky_relu", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.leaky_relu";
    v21[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::LeakyRelu,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ClampOp,mlir::anec::ClampedRelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = off_1E0E29DE0;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_1807C23CC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::ClampOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ClampOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ClampOpGenericAdaptorBase::ClampOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ClampOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ClampOpGenericAdaptorBase::ClampOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ClampOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ClampOp &>(mlir::mps::ClampOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ClampOp &>(mlir::mps::ClampOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ClampOp,mlir::anec::ClampedRelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::ClampedRelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ClampOp &>(mlir::mps::ClampOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ClampOp,mlir::anec::ClampedRelu>::matchAndRewriteWithStaticShapes(mlir::mps::ClampOp,mlir::mps::ClampOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ClampedRelu,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.clamped_relu", (const unsigned __int8 *)0x11, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.clamped_relu";
    v21[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ClampedRelu,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::NReluOp,mlir::anec::NRelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = off_1E0E29F30;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_1807C2FC4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::NReluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::NReluOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::NReluOpGenericAdaptorBase::NReluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::NReluOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::NReluOpGenericAdaptorBase::NReluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::NReluOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NReluOp &>(mlir::mps::NReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NReluOp &>(mlir::mps::NReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::NReluOp,mlir::anec::NRelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::NRelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NReluOp &>(mlir::mps::NReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::NReluOp,mlir::anec::NRelu>::matchAndRewriteWithStaticShapes(mlir::mps::NReluOp,mlir::mps::NReluOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::NRelu,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.n_relu", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.n_relu";
    v21[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::NRelu,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::PReluOp,mlir::anec::LeakyRelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = off_1E0E29FA0;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_1807C3BBC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::PReluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PReluOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::PReluOpGenericAdaptorBase::PReluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PReluOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::PReluOpGenericAdaptorBase::PReluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::PReluOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PReluOp &>(mlir::mps::PReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PReluOp &>(mlir::mps::PReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::PReluOp,mlir::anec::LeakyRelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::LeakyRelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PReluOp &>(mlir::mps::PReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::PReluOp,mlir::anec::LeakyRelu>::matchAndRewriteWithStaticShapes(mlir::mps::PReluOp,mlir::mps::PReluOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::Relu6Op,mlir::anec::NRelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = off_1E0E2A010;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_1807C4668()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::Relu6Op>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Relu6Op>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Relu6OpGenericAdaptorBase::Relu6OpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Relu6Op>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Relu6OpGenericAdaptorBase::Relu6OpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Relu6Op>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Relu6Op &>(mlir::mps::Relu6Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Relu6Op &>(mlir::mps::Relu6Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::Relu6Op,mlir::anec::NRelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::NRelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Relu6Op &>(mlir::mps::Relu6Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::Relu6Op,mlir::anec::NRelu>::matchAndRewriteWithStaticShapes(mlir::mps::Relu6Op,mlir::mps::Relu6OpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalOp,mlir::anec::Invert>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = off_1E0E297C0;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_1807C5114()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReciprocalOpGenericAdaptorBase::ReciprocalOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReciprocalOpGenericAdaptorBase::ReciprocalOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReciprocalOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalOp &>(mlir::mps::ReciprocalOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalOp &>(mlir::mps::ReciprocalOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalOp,mlir::anec::Invert>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Invert,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalOp &>(mlir::mps::ReciprocalOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalOp,mlir::anec::Invert>::matchAndRewriteWithStaticShapes(mlir::mps::ReciprocalOp,mlir::mps::ReciprocalOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Invert,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.invert", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.invert";
    v21[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalSquareRootOp,mlir::anec::Rsqrt>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = off_1E0DFAC78;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_1807C5D0C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalSquareRootOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalSquareRootOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReciprocalSquareRootOpGenericAdaptorBase::ReciprocalSquareRootOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalSquareRootOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReciprocalSquareRootOpGenericAdaptorBase::ReciprocalSquareRootOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReciprocalSquareRootOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalSquareRootOp &>(mlir::mps::ReciprocalSquareRootOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalSquareRootOp &>(mlir::mps::ReciprocalSquareRootOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalSquareRootOp,mlir::anec::Rsqrt>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Rsqrt,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalSquareRootOp &>(mlir::mps::ReciprocalSquareRootOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalSquareRootOp,mlir::anec::Rsqrt>::matchAndRewriteWithStaticShapes(mlir::mps::ReciprocalSquareRootOp,mlir::mps::ReciprocalSquareRootOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Rsqrt,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.r_sqrt", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.r_sqrt";
    v21[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Rsqrt,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LogarithmBase2Op,mlir::anec::Log2>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = off_1E0E29910;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_1807C6904()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::LogarithmBase2Op>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LogarithmBase2Op>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::LogarithmBase2OpGenericAdaptorBase::LogarithmBase2OpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LogarithmBase2Op>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::LogarithmBase2OpGenericAdaptorBase::LogarithmBase2OpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::LogarithmBase2Op>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LogarithmBase2Op &>(mlir::mps::LogarithmBase2Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LogarithmBase2Op &>(mlir::mps::LogarithmBase2Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LogarithmBase2Op,mlir::anec::Log2>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Log2,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LogarithmBase2Op &>(mlir::mps::LogarithmBase2Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LogarithmBase2Op,mlir::anec::Log2>::matchAndRewriteWithStaticShapes(mlir::mps::LogarithmBase2Op,mlir::mps::LogarithmBase2OpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Log2,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.log2", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.log2";
    v21[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Log2,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::EluOp,mlir::anec::Elu>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = off_1E0E299F0;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_1807C74FC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::EluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::EluOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::EluOpGenericAdaptorBase::EluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::EluOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::EluOpGenericAdaptorBase::EluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::EluOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::EluOp &>(mlir::mps::EluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::EluOp &>(mlir::mps::EluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::EluOp,mlir::anec::Elu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Elu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::EluOp &>(mlir::mps::EluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::EluOp,mlir::anec::Elu>::matchAndRewriteWithStaticShapes(mlir::mps::EluOp,mlir::mps::EluOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Elu,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.elu", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.elu";
    v21[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Elu,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

_QWORD *mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::~ConvertQuantizationOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::~ConvertQuantizationOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::DequantizeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD *v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[4];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 56);
  v9 = *(_QWORD *)(a3 + 64);
  v36 = v8;
  v37 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v28;
      v35 = *(_QWORD *)(a3 + 64);
      v29 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v34, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v36 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v37 = v23;
      if (v36)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v36);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v33 = 259;
    v30[0] = v32;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DequantizeOp &>(mlir::mps::DequantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v36, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v37;
    if (v36 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v33 = 259;
  v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DequantizeOp &>(mlir::mps::DequantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(int, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *ArgAttrsAttr;
  mlir::AffineMap *v29;
  mlir::AffineMap *v30;
  uint64_t ElementTypeOrSelf;
  unint64_t BiasScaleOp;
  char v33;
  unint64_t v34;
  char v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v57;
  uint64_t v58;
  unint64_t matched;
  float v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  llvm::APFloatBase *v67;
  void *v68;
  mlir::GenericProgramPoint *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(int, uint64_t);
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81[2];
  uint64_t v82;
  unint64_t v83[2];
  _OWORD v84[3];
  __int128 v85;
  unsigned int v86[2];
  __int128 v87;
  uint64_t RankPromotionTypeForANE;
  uint64_t v89[3];
  uint64_t v90[4];

  v90[3] = *MEMORY[0x1E0C80C00];
  v78 = a2;
  v87 = *(_OWORD *)(a3 + 56);
  v7 = mlir::ValueRange::dereference_iterator(&v87, 0);
  v77 = v7;
  v8 = mlir::ValueRange::dereference_iterator(&v87, 1);
  v9 = mlir::ValueRange::dereference_iterator(&v87, 2);
  if (mlir::mps::DequantizeOp::hasNDParams((mlir::mps::DequantizeOp *)&v78))
  {
    v10 = *(_QWORD *)(a4 + 16);
    if (v10)
    {
      v11 = v78;
      if (mlir::RewriterBase::Listener::classof(v10))
      {
        v12 = *(_QWORD *)(v11 + 24);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(_QWORD *)v10 + 64))(v10, v12, v13, &RankPromotionTypeForANE);
      }
    }
    return 0;
  }
  v14 = mlir::ValueRange::dereference_iterator(&v87, 3);
  if (!mlir::isConstantFPZero(v14))
  {
    v10 = *(_QWORD *)(a4 + 16);
    if (v10)
    {
      v38 = v78;
      if (mlir::RewriterBase::Listener::classof(v10))
      {
        v12 = *(_QWORD *)(v38 + 24);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(_QWORD *)v10 + 64))(v10, v12, v13, &RankPromotionTypeForANE);
      }
    }
    return 0;
  }
  if (!*(_BYTE *)(a1 + 104))
  {
    v40 = *(_OWORD *)(a3 + 48);
    v84[2] = *(_OWORD *)(a3 + 32);
    v85 = v40;
    *(_QWORD *)v86 = *(_QWORD *)(a3 + 64);
    v41 = *(_OWORD *)(a3 + 16);
    v84[0] = *(_OWORD *)a3;
    v84[1] = v41;
    v82 = v78;
    v42 = *(_QWORD *)(a1 + 96);
    v43 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v82);
    v44 = (uint64_t *)mlir::TypeConverter::convertType(v42, (void *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8));
    v45 = (uint64_t)v44;
    if (!v44)
      goto LABEL_35;
    v46 = *v44;
    v47 = mlir::TypeID::get<mlir::ShapedType>();
    v48 = *(unsigned int *)(v46 + 16);
    if (!(_DWORD)v48)
      goto LABEL_35;
    v49 = *(_QWORD **)(v46 + 8);
    v50 = &v49[2 * v48];
    do
    {
      v51 = v48 >> 1;
      v52 = &v49[2 * (v48 >> 1)];
      v54 = *v52;
      v53 = v52 + 2;
      v48 += ~(v48 >> 1);
      if (v54 < v47)
        v49 = v53;
      else
        v48 = v51;
    }
    while (v48);
    if (v49 != v50 && *v49 == v47)
      v55 = v49[1];
    else
LABEL_35:
      v55 = 0;
    v81[0] = v45;
    v81[1] = v55;
    ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v84, 1u);
    v57 = *((_QWORD *)&v85 + 1);
    RankPromotionTypeForANE = *((_QWORD *)&v85 + 1);
    v89[0] = ODSOperandIndexAndLength;
    if (ODSOperandIndexAndLength)
      v57 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
    RankPromotionTypeForANE = v57;
    v89[0] = 0;
    v58 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    matched = mlir::matchSplatConstantWithFloatValue<float>(v58);
    if ((matched & 0xFF00000000) != 0)
    {
      v60 = *(float *)&matched;
      v61 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v84, 2u);
      v62 = *((_QWORD *)&v85 + 1);
      RankPromotionTypeForANE = *((_QWORD *)&v85 + 1);
      v89[0] = v61;
      if (v61)
        v62 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v61);
      RankPromotionTypeForANE = v62;
      v89[0] = 0;
      v63 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
      v80 = mlir::matchSplatConstantWithIntValue<int>(v63);
      if ((v80 & 0xFF00000000) != 0)
      {
        v64 = *(_QWORD *)(v82 + 24);
        v65 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v84, 0);
        v66 = *((_QWORD *)&v85 + 1);
        RankPromotionTypeForANE = *((_QWORD *)&v85 + 1);
        v89[0] = v65;
        if (v65)
          v66 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v65);
        RankPromotionTypeForANE = v66;
        v89[0] = 0;
        v79 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
        v67 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v90, v60);
        v68 = llvm::APFloatBase::IEEEsingle(v67);
        llvm::APFloat::Storage::Storage(v89, v90, v68);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v90);
        v69 = mlir::OpBuilder::create<mlir::anec::DeQuant,mlir::ShapedType &,mlir::Value,llvm::APFloat,int &>((mlir::Float32Type **)(a4 + 8), v64, v81, &v79, (uint64_t)&RankPromotionTypeForANE, (int *)&v80);
        v70 = (uint64_t)v69 - 16;
        v71 = (void *)v89[0];
        if (llvm::APFloatBase::PPCDoubleDouble(v69) == v71)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v89);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v89);
        v76 = (unsigned int *)v82;
        v90[0] = v70;
        LOBYTE(v70) = 1;
        mlir::ValueRange::ValueRange((unint64_t *)&RankPromotionTypeForANE, (uint64_t)v90, 1uLL);
        mlir::ConversionPatternRewriter::replaceOp(a4, v76, RankPromotionTypeForANE, v89[0]);
LABEL_57:
        if ((_BYTE)v70)
          return 1;
        goto LABEL_7;
      }
      v70 = *(_QWORD *)(a4 + 16);
      if (!v70)
        goto LABEL_57;
      v75 = v82;
      if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      {
        v73 = *(_QWORD *)(v75 + 24);
        goto LABEL_52;
      }
    }
    else
    {
      v70 = *(_QWORD *)(a4 + 16);
      if (!v70)
        goto LABEL_57;
      v72 = v82;
      if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      {
        v73 = *(_QWORD *)(v72 + 24);
LABEL_52:
        LOBYTE(v70) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(_QWORD *)v70 + 64))(v70, v73, v74, &RankPromotionTypeForANE);
        goto LABEL_57;
      }
    }
    LOBYTE(v70) = 0;
    goto LABEL_57;
  }
LABEL_7:
  v15 = *(_QWORD *)(v78 + 24);
  v16 = (uint64_t *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_16;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_16;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_16:
    v26 = 0;
  RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v16, v26);
  v89[0] = v27;
  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  v30 = v29;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
  v90[0] = mlir::MemRefType::get(ArgAttrsAttr, v30, ElementTypeOrSelf, 0, 0, 0);
  v77 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), v15, v90, &v77)- 16;
  if (!v33)
    return 0;
  if (!v35)
    return 0;
  v36 = (unsigned int *)v78;
  RankPromotionTypeForANE = v34;
  v37 = 1;
  mlir::ValueRange::ValueRange(v83, (uint64_t)&RankPromotionTypeForANE, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, v36, v83[0], v83[1]);
  return v37;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DequantizeOp &>(mlir::mps::DequantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

unint64_t mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::createBiasScaleOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int Axis;
  unint64_t v46;
  uint64_t *ArgAttrsAttr;
  uint64_t v48;
  uint64_t NumElements;
  uint64_t FunctionType;
  mlir::MLIRContext *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t IndexFromDim;
  uint64_t DefiningOp;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  mlir::GenericProgramPoint *GOCConstant;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  mlir::AffineMap *v73;
  uint64_t OperandRange;
  void *v75;
  mlir::AffineMap *v76;
  mlir::AffineMap *v77;
  uint64_t v78;
  mlir::OpBuilder *v79;
  void *v80;
  mlir::AffineMap *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[2];
  _QWORD *v87;
  uint64_t v88;
  _QWORD v89[2];
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  void *p_GOC;
  unsigned int v94;
  uint64_t v95;
  void *GOC;
  uint64_t v97;
  _BYTE v98[16];
  __int16 v99;
  void *v100[2];
  _QWORD v101[2];

  v8 = (_QWORD *)a4;
  v9 = a3;
  v101[1] = *MEMORY[0x1E0C80C00];
  v91 = a3;
  v92 = a2;
  v90 = (_QWORD *)a4;
  v12 = (uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v12)
    goto LABEL_10;
  v13 = *v12;
  v14 = mlir::TypeID::get<mlir::ShapedType>();
  v15 = *(unsigned int *)(v13 + 16);
  if (!(_DWORD)v15)
    goto LABEL_10;
  v16 = *(_QWORD **)(v13 + 8);
  v17 = &v16[2 * v15];
  do
  {
    v18 = v15 >> 1;
    v19 = &v16[2 * (v15 >> 1)];
    v21 = *v19;
    v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14)
      v16 = v20;
    else
      v15 = v18;
  }
  while (v15);
  if (v16 != v17 && *v16 == v14)
    v22 = v16[1];
  else
LABEL_10:
    v22 = 0;
  v89[0] = v12;
  v89[1] = v22;
  v23 = (_QWORD *)(v8[1] & 0xFFFFFFFFFFFFFFF8);
  if (v23)
  {
    v24 = *v23;
    v25 = mlir::TypeID::get<mlir::ShapedType>();
    v26 = *(unsigned int *)(v24 + 16);
    if (!(_DWORD)v26)
      goto LABEL_20;
    v27 = *(_QWORD **)(v24 + 8);
    v28 = &v27[2 * v26];
    do
    {
      v29 = v26 >> 1;
      v30 = &v27[2 * (v26 >> 1)];
      v32 = *v30;
      v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25)
        v27 = v31;
      else
        v26 = v29;
    }
    while (v26);
    if (v27 != v28 && *v27 == v25)
    {
      v66 = v27[1];
      v87 = v23;
      v88 = v66;
      if (v12)
      {
LABEL_21:
        v33 = (_QWORD *)mlir::TypeConverter::convertType(*(_QWORD *)(a1 + 96), v12);
        v34 = v33;
        if (!v33)
          goto LABEL_30;
        v35 = *v33;
        v36 = mlir::TypeID::get<mlir::ShapedType>();
        v37 = *(unsigned int *)(v35 + 16);
        if (!(_DWORD)v37)
          goto LABEL_30;
        v38 = *(_QWORD **)(v35 + 8);
        v39 = &v38[2 * v37];
        do
        {
          v40 = v37 >> 1;
          v41 = &v38[2 * (v37 >> 1)];
          v43 = *v41;
          v42 = v41 + 2;
          v37 += ~(v37 >> 1);
          if (v43 < v36)
            v38 = v42;
          else
            v37 = v40;
        }
        while (v37);
        if (v38 != v39 && *v38 == v36)
          v44 = v38[1];
        else
LABEL_30:
          v44 = 0;
        v86[0] = v34;
        v86[1] = v44;
        v100[0] = v101;
        v100[1] = (void *)0x100000000;
        if ((mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&v92) & 0xFF00000000) != 0)
          Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&v92);
        else
          Axis = 0;
        GOC = (void *)Axis;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
        if (mlir::getPositivePromotedAxes((uint64_t *)&GOC, 1, v46, (uint64_t)v100, 0, 0))
        {
          ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v87);
          NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v48);
          FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v92);
          v51 = *(mlir::MLIRContext **)(v92 + 24);
          {
            v52 = v9 & 0xFFFFFFFFFFFFFF00;
            goto LABEL_76;
          }
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
          IndexFromDim = mlir::anec::getIndexFromDim(1, v53);
          if (NumElements == 1 || *(_QWORD *)v100[0] == IndexFromDim)
          {
            GOC = v8;
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&GOC);
            if (DefiningOp)
            {
              v56 = DefiningOp;
              v57 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v56 + 48) + 32))(*(_QWORD *)(v56 + 48), v57))
              {
                if (a5)
                  v58 = (uint64_t)v90;
                else
                  v58 = 0;
                if (a5)
                  v59 = 0;
                else
                  v59 = (uint64_t)v90;
                v60 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&GOC);
LABEL_72:
                LOBYTE(v9) = v60;
                v52 = v60 & 0xFFFFFFFFFFFFFF00;
                goto LABEL_76;
              }
            }
            if (NumElements == 1)
            {
LABEL_68:
              v79 = (mlir::OpBuilder *)(a6 + 8);
              v80 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
              p_GOC = (void *)mlir::MemRefType::get(v80, v81, FunctionType, 0, 0, 0);
              if (a5)
                GOC = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::MemRefType,mlir::Value &,mlir::Value &>(v79, (uint64_t)v51, (uint64_t *)&p_GOC, &v91, (uint64_t *)&v90);
              else
                GOC = mlir::OpBuilder::create<mlir::anec::ElementwiseSub,mlir::MemRefType,mlir::Value &,mlir::Value &>(v79, (uint64_t)v51, (uint64_t *)&p_GOC, &v91, (uint64_t *)&v90);
              v60 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&GOC);
              goto LABEL_72;
            }
            v8 = v90;
          }
          GOC = v98;
          v97 = 0xC00000000;
          v85 = 0;
          {
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
            v84 = 1;
            llvm::SmallVector<long long,6u>::SmallVector((uint64_t)&p_GOC, v68, (unint64_t *)&v84);
            v69 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v87);
            v71 = mlir::ShapedType::getNumElements(v69, v70);
            v72 = p_GOC;
            *((_QWORD *)p_GOC + *(_QWORD *)v100[0]) = v71;
            v73 = (mlir::AffineMap *)v94;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v87);
            v84 = mlir::MemRefType::get(v72, v73, OperandRange, 0, 0, 0);
            v75 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
            v77 = v76;
            v78 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v87);
            v83 = mlir::MemRefType::get(v75, v77, v78, 0, 0, 0);
            v90 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, &v84, (uint64_t *)&v90)- 16);
            v90 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::Broadcast,mlir::MemRefType &,mlir::Value &>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, &v83, (uint64_t *)&v90)- 16);
            if (p_GOC != &v95)
              free(p_GOC);
            goto LABEL_66;
          }
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
          if (v65)
          {
            v90 = (_QWORD *)((char *)GOCConstant - 16);
LABEL_66:
            if (GOC != v98)
              free(GOC);
            goto LABEL_68;
          }
          if (GOC != v98)
            free(GOC);
        }
        else
        {
          GOC = "failed: could not extract positive promoted axes";
          v99 = 259;
          v61 = v92;
          p_GOC = &GOC;
          v62 = *(_QWORD *)(a6 + 16);
          if (v62 && mlir::RewriterBase::Listener::classof(v62))
            (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v62 + 64))(v62, *(_QWORD *)(v61 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DequantizeOp &>(mlir::mps::DequantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &p_GOC);
        }
        LOBYTE(v9) = 0;
        v52 = 0;
LABEL_76:
        if (v100[0] != v101)
          free(v100[0]);
        return v52 & 0xFFFFFFFFFFFFFF00 | v9;
      }
    }
    else
    {
LABEL_20:
      v87 = v23;
      v88 = 0;
      if (v12)
        goto LABEL_21;
    }
  }
  GOC = "failed: quantization inputs must be static";
  v99 = 259;
  p_GOC = &GOC;
  v67 = *(_QWORD *)(a6 + 16);
  if (v67 && mlir::RewriterBase::Listener::classof(v67))
    (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v67 + 64))(v67, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DequantizeOp &>(mlir::mps::DequantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &p_GOC);
  LOBYTE(v9) = 0;
  v52 = 0;
  return v52 & 0xFFFFFFFFFFFFFF00 | v9;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::matchAndRewriteWithStaticShapes(mlir::mps::DequantizeOp,mlir::mps::DequantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: groups / block / batch quantization not supported on ANEC");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::matchAndRewriteWithStaticShapes(mlir::mps::DequantizeOp,mlir::mps::DequantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ANEC doesn't support min operand for Dequantize");
}

unint64_t mlir::matchSplatConstantWithIntValue<int>(uint64_t a1)
{
  uint64_t DefiningOp;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t SplatInt;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14[2];
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v13 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
  if (!DefiningOp)
    goto LABEL_10;
  v2 = DefiningOp;
  v3 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 32))(*(_QWORD *)(v2 + 48), v3))
    goto LABEL_10;
  v14[0] = v15;
  v14[1] = (void *)0x100000000;
  mlir::Operation::fold(v2, 0, 0, (uint64_t)v14);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v14[0] & 0xFFFFFFFFFFFFFFF8));
  v6 = v5 ? v4 : 0;
  if (v14[0] != v15)
    free(v14[0]);
  if (v5)
  {
    SplatInt = mlir::getSplatIntValue<int>((uint64_t)v5, v6);
    v8 = SplatInt & 0xFFFFFF0000000000;
    v9 = SplatInt & 0xFF00000000;
    v10 = SplatInt & 0xFFFFFF00;
    v11 = SplatInt;
  }
  else
  {
LABEL_10:
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v10 = 0;
  }
  return v9 | v8 | v11 | v10;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::DeQuant,mlir::ShapedType &,mlir::Value,llvm::APFloat,int &>(mlir::Float32Type **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  llvm::APFloatBase *v19;
  void *v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  char v29[8];
  _QWORD v30[3];
  _QWORD v31[39];

  v31[38] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.dequant", (const unsigned __int8 *)0xC, Context);
  if (!v14)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"anec.dequant";
    v27[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v18 = *(void **)(a5 + 8);
  v17 = (_QWORD *)(a5 + 8);
  v20 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v20 == v18)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v30, v17);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v30, (uint64_t)v17);
  mlir::anec::DeQuant::build(a1, (uint64_t)v31, v15, v16, (uint64_t)v29, *a6);
  if (v20 == (void *)v30[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v30);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v30);
  v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::DeQuant,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::convertToQuantizationUnit(mlir::mps::DequantizeOp,mlir::mps::DequantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ANEC only support scalar constant scale value");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::convertToQuantizationUnit(mlir::mps::DequantizeOp,mlir::mps::DequantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ANEC only support zeroPoint constant scale value");
}

BOOL mlir::`anonymous namespace'::`anonymous namespace'::isZeroConstant(void *a1)
{
  uint64_t DefiningOp;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v9;
  void *v10;
  void *v11;
  llvm::APFloatBase *v12;
  char v13;
  _BOOL8 v14;
  unint64_t v16;
  unint64_t v17;
  void *__p;
  unsigned int v19;
  __int128 v20;
  void *v21[2];
  _OWORD v22[4];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  __p = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!DefiningOp)
    return 0;
  v2 = DefiningOp;
  v3 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 32))(*(_QWORD *)(v2 + 48), v3))
    return 0;
  v21[0] = v22;
  v21[1] = (void *)0x100000000;
  mlir::Operation::fold(v2, 0, 0, (uint64_t)v21);
  v4 = (*(_QWORD *)v21[0] & 0xFFFFFFFFFFFFFFF8) == 0
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21[0] & 0xFFFFFFFFFFFFFFF8) + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id;
  if (!v4)
    v17 = *(_QWORD *)v21[0] & 0xFFFFFFFFFFFFFFF8;
  if (v21[0] != v22)
    free(v21[0]);
  if (v4 || !mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v17))
    return 0;
  v5 = v17;
  if (mlir::DenseIntElementsAttr::classof(v17))
    v6 = v5;
  else
    v6 = 0;
  v16 = v6;
  if (!v6)
  {
    v9 = v17;
    if (mlir::DenseFPElementsAttr::classof(v17))
      v10 = (void *)v9;
    else
      v10 = 0;
    __p = v10;
    if (v10)
    {
      mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&__p, (uint64_t)v21);
      v11 = v21[1];
      if (llvm::APFloatBase::PPCDoubleDouble(v12) == v11)
      {
        v13 = *(_BYTE *)(*(_QWORD *)&v22[0] + 28);
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v21[1]);
      }
      else
      {
        v13 = BYTE12(v22[0]);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v21[1]);
      }
      return (v13 & 7) == 3;
    }
    return 0;
  }
  mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)&v16, (uint64_t)v21);
  v20 = v22[0];
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v21, (llvm::APInt *)&__p);
  v7 = v19;
  if (v19 <= 0x40)
    return __p == 0;
  v14 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) == v7;
  if (__p)
    operator delete[](__p);
  return v14;
}

uint64_t llvm::SmallVector<long long,6u>::SmallVector(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int64x2_t v9;
  int64x2_t *v10;
  unint64_t v11;

  v5 = (unint64_t *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 12) = 6;
  v6 = *a3;
  if (a2 < 7)
  {
    if (a2)
    {
      *v5 = v6;
      if (a2 != 1)
      {
        *(_QWORD *)(a1 + 24) = v6;
        if (a2 != 2)
        {
          *(_QWORD *)(a1 + 32) = v6;
          if (a2 != 3)
          {
            *(_QWORD *)(a1 + 40) = v6;
            if (a2 != 4)
            {
              *(_QWORD *)(a1 + 48) = v6;
              if (a2 != 5)
                *(_QWORD *)(a1 + 56) = v6;
            }
          }
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v5, a2, 8);
    v7 = (unint64_t *)(*(_QWORD *)a1 + 8 * (a2 & 0xFFFFFFFFFFFFFFFCLL));
    v8 = a2 & 3;
    v9 = vdupq_n_s64(v6);
    v10 = (int64x2_t *)(*(_QWORD *)a1 + 16);
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v10[-1] = v9;
      *v10 = v9;
      v10 += 2;
      v11 -= 4;
    }
    while (v11);
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != a2)
    {
      do
      {
        *v7++ = v6;
        --v8;
      }
      while (v8);
    }
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::MemRefType,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.mult", (const unsigned __int8 *)9, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.mult";
    v19[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::ElementwiseAdd::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ElementwiseSub,mlir::MemRefType,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.sub", (const unsigned __int8 *)8, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.sub";
    v19[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::ElementwiseAdd::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseSub,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::~ConvertQuantizationOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::~ConvertQuantizationOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::QuantizeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::QuantizeOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[56];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::QuantizeOpGenericAdaptorBase::QuantizeOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::QuantizeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[56];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::QuantizeOpGenericAdaptorBase::QuantizeOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::QuantizeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD *v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[4];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 56);
  v9 = *(_QWORD *)(a3 + 64);
  v36 = v8;
  v37 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v28;
      v35 = *(_QWORD *)(a3 + 64);
      v29 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v34, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v36 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v37 = v23;
      if (v36)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v36);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v33 = 259;
    v30[0] = v32;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::QuantizeOp &>(mlir::mps::QuantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v36, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v37;
    if (v36 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v33 = 259;
  v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::QuantizeOp &>(mlir::mps::QuantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *ArgAttrsAttr;
  mlir::AffineMap *v25;
  mlir::AffineMap *v26;
  uint64_t ElementTypeOrSelf;
  unint64_t BiasScaleOp;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v50;
  uint64_t v51;
  unint64_t matched;
  float v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  llvm::APFloatBase *v60;
  void *v61;
  mlir::GenericProgramPoint *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(int, uint64_t);
  uint64_t v69;
  unsigned int *v70;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75[2];
  uint64_t v76;
  unint64_t v77[2];
  _OWORD v78[3];
  __int128 v79;
  unsigned int v80[2];
  __int128 v81;
  uint64_t RankPromotionTypeForANE;
  uint64_t v83[3];
  uint64_t v84[5];

  v84[3] = *MEMORY[0x1E0C80C00];
  v81 = *(_OWORD *)(a3 + 56);
  v8 = mlir::ValueRange::dereference_iterator(&v81, 0);
  v72 = v8;
  v9 = mlir::ValueRange::dereference_iterator(&v81, 1);
  v10 = mlir::ValueRange::dereference_iterator(&v81, 2);
  if (!*(_BYTE *)(a1 + 104))
  {
    v33 = *(_OWORD *)(a3 + 48);
    v78[2] = *(_OWORD *)(a3 + 32);
    v79 = v33;
    *(_QWORD *)v80 = *(_QWORD *)(a3 + 64);
    v34 = *(_OWORD *)(a3 + 16);
    v78[0] = *(_OWORD *)a3;
    v78[1] = v34;
    v76 = a2;
    v35 = *(_QWORD *)(a1 + 96);
    v36 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v76);
    v37 = (uint64_t *)mlir::TypeConverter::convertType(v35, (void *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8));
    v38 = (uint64_t)v37;
    if (!v37)
      goto LABEL_25;
    v39 = *v37;
    v40 = mlir::TypeID::get<mlir::ShapedType>();
    v41 = *(unsigned int *)(v39 + 16);
    if (!(_DWORD)v41)
      goto LABEL_25;
    v42 = *(_QWORD **)(v39 + 8);
    v43 = &v42[2 * v41];
    do
    {
      v44 = v41 >> 1;
      v45 = &v42[2 * (v41 >> 1)];
      v47 = *v45;
      v46 = v45 + 2;
      v41 += ~(v41 >> 1);
      if (v47 < v40)
        v42 = v46;
      else
        v41 = v44;
    }
    while (v41);
    if (v42 != v43 && *v42 == v40)
      v48 = v42[1];
    else
LABEL_25:
      v48 = 0;
    v75[0] = v38;
    v75[1] = v48;
    ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v78, 1u);
    v50 = *((_QWORD *)&v79 + 1);
    RankPromotionTypeForANE = *((_QWORD *)&v79 + 1);
    v83[0] = ODSOperandIndexAndLength;
    if (ODSOperandIndexAndLength)
      v50 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
    RankPromotionTypeForANE = v50;
    v83[0] = 0;
    v51 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    matched = mlir::matchSplatConstantWithFloatValue<float>(v51);
    if ((matched & 0xFF00000000) != 0)
    {
      v53 = *(float *)&matched;
      v54 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v78, 2u);
      v55 = *((_QWORD *)&v79 + 1);
      RankPromotionTypeForANE = *((_QWORD *)&v79 + 1);
      v83[0] = v54;
      if (v54)
        v55 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v54);
      RankPromotionTypeForANE = v55;
      v83[0] = 0;
      v56 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
      v74 = mlir::matchSplatConstantWithIntValue<int>(v56);
      if ((v74 & 0xFF00000000) != 0)
      {
        v57 = *(_QWORD *)(v76 + 24);
        v58 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v78, 0);
        v59 = *((_QWORD *)&v79 + 1);
        RankPromotionTypeForANE = *((_QWORD *)&v79 + 1);
        v83[0] = v58;
        if (v58)
          v59 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v58);
        RankPromotionTypeForANE = v59;
        v83[0] = 0;
        v73 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
        v60 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v84, v53);
        v61 = llvm::APFloatBase::IEEEsingle(v60);
        llvm::APFloat::Storage::Storage(v83, v84, v61);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v84);
        v62 = mlir::OpBuilder::create<mlir::anec::Quant,mlir::ShapedType &,mlir::Value,llvm::APFloat,int &>((mlir::Float32Type **)(a4 + 8), v57, v75, &v73, (uint64_t)&RankPromotionTypeForANE, (int *)&v74);
        v63 = (uint64_t)v62 - 16;
        v64 = (void *)v83[0];
        if (llvm::APFloatBase::PPCDoubleDouble(v62) == v64)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v83);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v83);
        v70 = (unsigned int *)v76;
        v84[0] = v63;
        mlir::ValueRange::ValueRange((unint64_t *)&RankPromotionTypeForANE, (uint64_t)v84, 1uLL);
        mlir::ConversionPatternRewriter::replaceOp(a4, v70, RankPromotionTypeForANE, v83[0]);
        return 1;
      }
      v65 = *(_QWORD *)(a4 + 16);
      if (!v65)
        goto LABEL_2;
      v69 = v76;
      if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
        goto LABEL_2;
      v67 = *(_QWORD *)(v69 + 24);
    }
    else
    {
      v65 = *(_QWORD *)(a4 + 16);
      if (!v65)
        goto LABEL_2;
      v66 = v76;
      if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
        goto LABEL_2;
      v67 = *(_QWORD *)(v66 + 24);
    }
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(_QWORD *)v65 + 64))(v65, v67, v68, &RankPromotionTypeForANE))goto LABEL_2;
    return 1;
  }
LABEL_2:
  v11 = *(_QWORD *)(a2 + 24);
  v12 = (uint64_t *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v12)
    goto LABEL_11;
  v13 = *v12;
  v14 = mlir::TypeID::get<mlir::ShapedType>();
  v15 = *(unsigned int *)(v13 + 16);
  if (!(_DWORD)v15)
    goto LABEL_11;
  v16 = *(_QWORD **)(v13 + 8);
  v17 = &v16[2 * v15];
  do
  {
    v18 = v15 >> 1;
    v19 = &v16[2 * (v15 >> 1)];
    v21 = *v19;
    v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14)
      v16 = v20;
    else
      v15 = v18;
  }
  while (v15);
  if (v16 != v17 && *v16 == v14)
    v22 = v16[1];
  else
LABEL_11:
    v22 = 0;
  RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v12, v22);
  v83[0] = v23;
  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  v26 = v25;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v8);
  v84[0] = mlir::MemRefType::get(ArgAttrsAttr, v26, ElementTypeOrSelf, 0, 0, 0);
  v72 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), v11, v84, &v72)- 16;
  if (!v29)
    return 0;
  if (!v31)
    return 0;
  RankPromotionTypeForANE = v30;
  v32 = 1;
  mlir::ValueRange::ValueRange(v77, (uint64_t)&RankPromotionTypeForANE, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, v77[0], v77[1]);
  return v32;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::QuantizeOp &>(mlir::mps::QuantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

unint64_t mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::createBiasScaleOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int Axis;
  unint64_t v46;
  uint64_t *ArgAttrsAttr;
  uint64_t v48;
  uint64_t NumElements;
  uint64_t FunctionType;
  mlir::MLIRContext *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t IndexFromDim;
  uint64_t DefiningOp;
  mlir::MLIRContext *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char GOCConstantValue;
  unint64_t v67;
  mlir::GenericProgramPoint *GOCConstant;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  mlir::AffineMap *v74;
  uint64_t OperandRange;
  void *v76;
  mlir::AffineMap *v77;
  mlir::AffineMap *v78;
  uint64_t v79;
  int v80;
  void *v81;
  mlir::AffineMap *v82;
  void *v83;
  mlir::AffineMap *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[2];
  _QWORD *v90;
  uint64_t v91;
  _QWORD v92[2];
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  void *p_GOC;
  unsigned int v97;
  uint64_t v98;
  void *GOC;
  uint64_t v100;
  _BYTE v101[16];
  __int16 v102;
  void *v103[2];
  _QWORD v104[3];

  v8 = (_QWORD *)a4;
  v9 = a3;
  v104[1] = *MEMORY[0x1E0C80C00];
  v94 = a3;
  v95 = a2;
  v93 = (_QWORD *)a4;
  v12 = (uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v12)
    goto LABEL_10;
  v13 = *v12;
  v14 = mlir::TypeID::get<mlir::ShapedType>();
  v15 = *(unsigned int *)(v13 + 16);
  if (!(_DWORD)v15)
    goto LABEL_10;
  v16 = *(_QWORD **)(v13 + 8);
  v17 = &v16[2 * v15];
  do
  {
    v18 = v15 >> 1;
    v19 = &v16[2 * (v15 >> 1)];
    v21 = *v19;
    v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14)
      v16 = v20;
    else
      v15 = v18;
  }
  while (v15);
  if (v16 != v17 && *v16 == v14)
    v22 = v16[1];
  else
LABEL_10:
    v22 = 0;
  v92[0] = v12;
  v92[1] = v22;
  v23 = (_QWORD *)(v8[1] & 0xFFFFFFFFFFFFFFF8);
  if (v23)
  {
    v24 = *v23;
    v25 = mlir::TypeID::get<mlir::ShapedType>();
    v26 = *(unsigned int *)(v24 + 16);
    if (!(_DWORD)v26)
      goto LABEL_20;
    v27 = *(_QWORD **)(v24 + 8);
    v28 = &v27[2 * v26];
    do
    {
      v29 = v26 >> 1;
      v30 = &v27[2 * (v26 >> 1)];
      v32 = *v30;
      v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25)
        v27 = v31;
      else
        v26 = v29;
    }
    while (v26);
    if (v27 != v28 && *v27 == v25)
    {
      v64 = v27[1];
      v90 = v23;
      v91 = v64;
      if (v12)
      {
LABEL_21:
        v33 = (_QWORD *)mlir::TypeConverter::convertType(*(_QWORD *)(a1 + 96), v12);
        v34 = v33;
        if (!v33)
          goto LABEL_30;
        v35 = *v33;
        v36 = mlir::TypeID::get<mlir::ShapedType>();
        v37 = *(unsigned int *)(v35 + 16);
        if (!(_DWORD)v37)
          goto LABEL_30;
        v38 = *(_QWORD **)(v35 + 8);
        v39 = &v38[2 * v37];
        do
        {
          v40 = v37 >> 1;
          v41 = &v38[2 * (v37 >> 1)];
          v43 = *v41;
          v42 = v41 + 2;
          v37 += ~(v37 >> 1);
          if (v43 < v36)
            v38 = v42;
          else
            v37 = v40;
        }
        while (v37);
        if (v38 != v39 && *v38 == v36)
          v44 = v38[1];
        else
LABEL_30:
          v44 = 0;
        v89[0] = v34;
        v89[1] = v44;
        v103[0] = v104;
        v103[1] = (void *)0x100000000;
        if ((mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&v95) & 0xFF00000000) != 0)
          Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&v95);
        else
          Axis = 0;
        GOC = (void *)Axis;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v92);
        if (!mlir::getPositivePromotedAxes((uint64_t *)&GOC, 1, v46, (uint64_t)v103, 0, 0))
        {
          GOC = "failed: could not extract positive promoted axes";
          v102 = 259;
          v62 = v95;
          p_GOC = &GOC;
          v63 = *(_QWORD *)(a6 + 16);
          if (v63 && mlir::RewriterBase::Listener::classof(v63))
            (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v63 + 64))(v63, *(_QWORD *)(v62 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::QuantizeOp &>(mlir::mps::QuantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &p_GOC);
          goto LABEL_77;
        }
        ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
        NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v48);
        FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v95);
        v51 = *(mlir::MLIRContext **)(v95 + 24);
        {
          v52 = v9 & 0xFFFFFFFFFFFFFF00;
          goto LABEL_80;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
        IndexFromDim = mlir::anec::getIndexFromDim(1, v53);
        if (NumElements == 1 || *(_QWORD *)v103[0] == IndexFromDim)
        {
          GOC = v8;
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&GOC);
          if (DefiningOp)
          {
            v57 = DefiningOp;
            v58 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v57 + 48) + 32))(*(_QWORD *)(v57 + 48), v58))
            {
              if (a5)
                v59 = (uint64_t)v93;
              else
                v59 = 0;
              if (a5)
                v60 = 0;
              else
                v60 = (uint64_t)v93;
              v61 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&GOC);
              goto LABEL_79;
            }
          }
          if (NumElements == 1)
          {
            if ((a5 & 1) == 0)
              goto LABEL_78;
            goto LABEL_75;
          }
          v8 = v93;
        }
        GOC = v101;
        v100 = 0xC00000000;
        v88 = 0;
        if (GOCConstantValue)
        {
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          if (!(_BYTE)v56)
          {
            v80 = 0;
LABEL_70:
            if (GOC != v101)
              free(GOC);
            if (v80)
            {
              if ((a5 & 1) == 0)
              {
LABEL_78:
                v83 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
                p_GOC = (void *)mlir::MemRefType::get(v83, v84, FunctionType, 0, 0, 0);
                GOC = mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,mlir::MemRefType,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, (uint64_t *)&p_GOC, &v94, (uint64_t *)&v93);
                v61 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&GOC);
                goto LABEL_79;
              }
              if (GOCConstantValue)
              {
LABEL_76:
                v81 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
                p_GOC = (void *)mlir::MemRefType::get(v81, v82, FunctionType, 0, 0, 0);
                GOC = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::MemRefType,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, (uint64_t *)&p_GOC, &v94, (uint64_t *)&v93);
                v61 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&GOC);
LABEL_79:
                LOBYTE(v9) = v61;
                v52 = v61 & 0xFFFFFFFFFFFFFF00;
LABEL_80:
                if (v103[0] != v104)
                  free(v103[0]);
                return v52 & 0xFFFFFFFFFFFFFF00 | v9;
              }
LABEL_75:
              GOC = mlir::Builder::getF16FloatAttr((mlir::Float16Type **)(a6 + 8), 0.0, v56);
              v93 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::Invert,mlir::Value &,mlir::FloatAttr &>((uint64_t *)(a6 + 8), (uint64_t)v51, (uint64_t *)&v93, (uint64_t *)&GOC)- 16);
              goto LABEL_76;
            }
LABEL_77:
            LOBYTE(v9) = 0;
            v52 = 0;
            goto LABEL_80;
          }
          v93 = (_QWORD *)((char *)GOCConstant - 16);
        }
        else
        {
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          v87 = 1;
          llvm::SmallVector<long long,6u>::SmallVector((uint64_t)&p_GOC, v69, (unint64_t *)&v87);
          v70 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
          v72 = mlir::ShapedType::getNumElements(v70, v71);
          v73 = p_GOC;
          *((_QWORD *)p_GOC + *(_QWORD *)v103[0]) = v72;
          v74 = (mlir::AffineMap *)v97;
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v90);
          v87 = mlir::MemRefType::get(v73, v74, OperandRange, 0, 0, 0);
          v76 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          v78 = v77;
          v79 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v90);
          v86 = mlir::MemRefType::get(v76, v78, v79, 0, 0, 0);
          v93 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, &v87, (uint64_t *)&v93)- 16);
          v93 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::Broadcast,mlir::MemRefType &,mlir::Value &>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, &v86, (uint64_t *)&v93)- 16);
          if (p_GOC != &v98)
            free(p_GOC);
        }
        v80 = 1;
        goto LABEL_70;
      }
    }
    else
    {
LABEL_20:
      v90 = v23;
      v91 = 0;
      if (v12)
        goto LABEL_21;
    }
  }
  GOC = "failed: quantization inputs must be static";
  v102 = 259;
  p_GOC = &GOC;
  v65 = *(_QWORD *)(a6 + 16);
  if (v65 && mlir::RewriterBase::Listener::classof(v65))
    (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v65 + 64))(v65, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::QuantizeOp &>(mlir::mps::QuantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &p_GOC);
  LOBYTE(v9) = 0;
  v52 = 0;
  return v52 & 0xFFFFFFFFFFFFFF00 | v9;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Quant,mlir::ShapedType &,mlir::Value,llvm::APFloat,int &>(mlir::Float32Type **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  llvm::APFloatBase *v19;
  void *v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  char v29[8];
  _QWORD v30[3];
  _QWORD v31[39];

  v31[38] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.quant", (const unsigned __int8 *)0xA, Context);
  if (!v14)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"anec.quant";
    v27[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v18 = *(void **)(a5 + 8);
  v17 = (_QWORD *)(a5 + 8);
  v20 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v20 == v18)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v30, v17);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v30, (uint64_t)v17);
  mlir::anec::DeQuant::build(a1, (uint64_t)v31, v15, v16, (uint64_t)v29, *a6);
  if (v20 == (void *)v30[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v30);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v30);
  v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Quant,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::convertToQuantizationUnit(mlir::mps::QuantizeOp,mlir::mps::QuantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ANEC only support scalar constant scale value");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::convertToQuantizationUnit(mlir::mps::QuantizeOp,mlir::mps::QuantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ANEC only support zeroPoint constant scale value");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,mlir::MemRefType,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.add", (const unsigned __int8 *)8, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.add";
    v19[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::ElementwiseAdd::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::~ConvertConv(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::~ConvertConv(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DDataGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DDataGradientOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Conv2DDataGradientOpGenericAdaptorBase::Conv2DDataGradientOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Conv2DDataGradientOpGenericAdaptorBase::Conv2DDataGradientOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Conv2DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _QWORD *v33;
  _QWORD v34[4];
  __int16 v35;
  _OWORD v36[7];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 96);
  v9 = *(_QWORD *)(a3 + 104);
  v37 = v8;
  v38 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 96);
      v29 = *(_OWORD *)(a3 + 64);
      v36[5] = *(_OWORD *)(a3 + 80);
      v36[6] = v28;
      v30 = *(_OWORD *)(a3 + 16);
      v36[0] = *(_OWORD *)a3;
      v36[1] = v30;
      v31 = *(_OWORD *)(a3 + 32);
      v36[3] = *(_OWORD *)(a3 + 48);
      v36[4] = v29;
      v36[2] = v31;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v36, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v38 = v23;
      if (v37)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v35 = 259;
    v32[0] = v34;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v38;
    if (v37 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v35 = 259;
  v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  uint64_t *InputAttributeNames;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(int, uint64_t);
  void *v67;
  uint64_t DefiningOp;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  _BOOL4 v74;
  BOOL v75;
  int v76;
  _BOOL4 isSignedInteger;
  uint64_t IntegerType;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  void *v89;
  mlir::AffineMap *v90;
  uint64_t v91;
  uint64_t OperandRange;
  uint64_t Loc;
  _OWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  unsigned int v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *Strides;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  unint64_t *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)(int, uint64_t);
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t *v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t *v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  BOOL v167;
  int v168;
  uint64_t *Rewriter;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t *v177;
  _QWORD *v178;
  unint64_t v179;
  uint64_t v180;
  int PaddingStyle;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  unint64_t v215;
  unint64_t *v216;
  _QWORD *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  void *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  unint64_t v236;
  unint64_t *v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  unint64_t v249;
  unint64_t *v250;
  _QWORD *v251;
  unint64_t v252;
  uint64_t v253;
  mlir::MLIRContext *v254;
  _QWORD *v255;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t *v263;
  _QWORD *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  unint64_t v275;
  unint64_t *v276;
  _QWORD *v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  __int128 v306;
  void *Groups;
  _QWORD *v308;
  uint64_t v309;
  _QWORD v310[2];
  _QWORD v311[2];
  _QWORD *v312;
  uint64_t v313;
  char v314;
  uint64_t v315;
  unint64_t v316[2];
  uint64_t F16FloatAttr;
  __int128 v318;
  void *ArgOperands;
  uint64_t v320;
  _BYTE v321[40];
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  uint64_t v331;
  _OWORD v332[3];
  void *__p;
  uint64_t v334;
  _OWORD v335[3];
  _QWORD *v336;
  uint64_t v337;
  _BYTE v338[16];
  _QWORD *v339;
  uint64_t v340;
  _BYTE v341[32];
  char *v342;
  unint64_t v343;
  _BYTE v344[32];
  __int128 v345;
  uint64_t v346;

  v346 = *MEMORY[0x1E0C80C00];
  v315 = a2;
  v345 = *(_OWORD *)(a3 + 96);
  v314 = 0;
  v7 = *(_QWORD *)(a2 + 24);
  v313 = mlir::ValueRange::dereference_iterator(&v345, 0);
  v312 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v345, 1);
  v8 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v315);
  v9 = (uint64_t *)(*(_QWORD *)(v313 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    goto LABEL_10;
  v10 = *v9;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *(unsigned int *)(v10 + 16);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = *(_QWORD **)(v10 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v311[0] = v9;
  v311[1] = v19;
  v20 = (uint64_t *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v20)
    goto LABEL_20;
  v21 = *v20;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_20;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_20:
    v30 = 0;
  v310[0] = v20;
  v310[1] = v30;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v310);
  v33 = v32;
  v34 = (_QWORD *)(v312[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v34)
    goto LABEL_30;
  v35 = *v34;
  v36 = mlir::TypeID::get<mlir::ShapedType>();
  v37 = *(unsigned int *)(v35 + 16);
  if (!(_DWORD)v37)
    goto LABEL_30;
  v38 = *(_QWORD **)(v35 + 8);
  v39 = &v38[2 * v37];
  do
  {
    v40 = v37 >> 1;
    v41 = &v38[2 * (v37 >> 1)];
    v43 = *v41;
    v42 = v41 + 2;
    v37 += ~(v37 >> 1);
    if (v43 < v36)
      v38 = v42;
    else
      v37 = v40;
  }
  while (v37);
  if (v38 != v39 && *v38 == v36)
    v44 = v38[1];
  else
LABEL_30:
    v44 = 0;
  v308 = v34;
  v309 = v44;
  *(_QWORD *)&v322 = v315;
  Groups = mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v322);
  v45 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v308);
  v46 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v308);
  v48 = (_BYTE *)(v46 + 8 * v47);
  v342 = v344;
  v343 = 0x400000000;
  v49 = v48 - v45;
  if ((unint64_t)(v48 - v45) < 0x21)
  {
    v50 = 0;
    if (v48 == v45)
      goto LABEL_36;
    goto LABEL_35;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v342, v344, v49 >> 3, 8);
  v50 = v343;
  if (v48 != v45)
  {
LABEL_35:
    memcpy(&v342[8 * v50], v45, v48 - v45);
    v50 = v343;
  }
LABEL_36:
  LODWORD(v343) = v50 + ((unint64_t)v49 >> 3);
  v339 = v341;
  v340 = 0x400000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v315);
  v52 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames)
    goto LABEL_45;
  v53 = *InputAttributeNames;
  v54 = mlir::TypeID::get<mlir::ElementsAttr>();
  v55 = *(unsigned int *)(v53 + 16);
  if (!(_DWORD)v55)
    goto LABEL_45;
  v56 = *(_QWORD **)(v53 + 8);
  v57 = &v56[2 * v55];
  do
  {
    v58 = v55 >> 1;
    v59 = &v56[2 * (v55 >> 1)];
    v61 = *v59;
    v60 = v59 + 2;
    v55 += ~(v55 >> 1);
    if (v61 < v54)
      v56 = v60;
    else
      v55 = v58;
  }
  while (v55);
  if (v56 != v57 && *v56 == v54)
    v62 = v56[1];
  else
LABEL_45:
    v62 = 0;
  mlir::getIntValues<unsigned long long>(v52, v62, (uint64_t)&v339, 1);
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v315))
  {
    v63 = *(_QWORD *)(a4 + 16);
    if (!v63)
      goto LABEL_110;
    v64 = v315;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_110;
    v65 = *(_QWORD *)(v64 + 24);
LABEL_109:
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), __int128 *))(*(_QWORD *)v63 + 64))(v63, v65, v66, &v322);
LABEL_110:
    v115 = 0;
    v116 = 0;
    goto LABEL_111;
  }
  if (mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v315) != 2
    && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v315) != 3)
  {
    v63 = *(_QWORD *)(a4 + 16);
    if (!v63)
      goto LABEL_110;
    v114 = v315;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_110;
    v65 = *(_QWORD *)(v114 + 24);
    goto LABEL_109;
  }
  v306 = 0uLL;
  v304 = 0;
  v305 = 0;
  v302 = 0;
  v303 = 0;
  v300 = 0;
  v301 = 0;
  v67 = *(void **)(*(_QWORD *)(v315 + 72) + 56);
  *(_QWORD *)&v322 = &v306;
  *((_QWORD *)&v322 + 1) = &v304;
  *(_QWORD *)&v323 = &v302;
  *((_QWORD *)&v323 + 1) = &v300;
  ArgOperands = v67;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!DefiningOp
    || (v330 = (void *)DefiningOp,
        *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
    || (*(_BYTE *)(DefiningOp + 46) & 0x80) == 0
    || *(_DWORD *)(DefiningOp + 68) != 4
    || (LOBYTE(v336) = 1,
        __p = &v336,
        v334 = (uint64_t)&v330,
        mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&v322, (uint64_t)&__p), !(_BYTE)v336))
  {
    v69 = *(_QWORD *)(*(_QWORD *)(v315 + 72) + 56);
    v334 = (uint64_t)&v304;
    *(_QWORD *)&v335[0] = &v302;
    *((_QWORD *)&v335[0] + 1) = &v300;
    *(_QWORD *)&v299 = v69;
    v70 = mlir::Value::getDefiningOp((mlir::Value *)&v299);
    if (!v70)
      goto LABEL_65;
    v336 = (_QWORD *)v70;
    if (*(_UNKNOWN **)(*(_QWORD *)(v70 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
      goto LABEL_65;
    if ((*(_BYTE *)(v70 + 46) & 0x80) == 0)
      goto LABEL_65;
    if (*(_DWORD *)(v70 + 68) != 4)
      goto LABEL_65;
    LOBYTE(v318) = 1;
    v330 = &v318;
    v331 = (uint64_t)&v336;
    mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&__p, (uint64_t)&v330);
    if (!(_BYTE)v318)
      goto LABEL_65;
  }
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v302);
  v320 = v71;
  v72 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  if (mlir::ShapedType::getNumElements(v72, v73) == 1 && mlir::ElementsAttr::getNumElements(v300, v301) == 1)
    v74 = (mlir::getSingleFloatValue<float>(v300, v301) & 0x7FFFFFFF) == 0;
  else
LABEL_65:
    v74 = 0;
  if (*(_BYTE *)(a1 + 104))
    v75 = 1;
  else
    v75 = (_QWORD)v306 == 0;
  v76 = !v75;
  v288 = v76;
  if (v75)
  {
    v286 = 0;
    v287 = 0;
  }
  else
  {
    v287 = mlir::convertElementsAttr(v304, v305, 1);
    *(_QWORD *)&v322 = mlir::getElementTypeOrSelf(v302);
    isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v322);
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 8u, isSignedInteger);
    __p = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v302);
    v334 = v79;
    LOBYTE(v322) = 0;
    LOBYTE(v323) = 0;
    v80 = mlir::ShapedType::cloneWith((uint64_t *)&__p, &v322, IntegerType);
    v286 = mlir::rewriteElementsAttr((uint64_t)v302, v303, v80, v81, 1);
  }
  v299 = 0uLL;
  __p = v312;
  v82 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!v82)
    goto LABEL_83;
  v83 = v82;
  v84 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v83 + 48) + 32))(*(_QWORD *)(v83 + 48), v84))
    goto LABEL_83;
  *(_QWORD *)&v322 = &v323;
  *((_QWORD *)&v322 + 1) = 0x100000000;
  mlir::Operation::fold(v83, 0, 0, (uint64_t)&v322);
  v85 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v322 & 0xFFFFFFFFFFFFFFF8));
  v87 = v85;
  if (v85)
  {
    *(_QWORD *)&v299 = v85;
    *((_QWORD *)&v299 + 1) = v86;
  }
  if ((__int128 *)v322 != &v323)
    free((void *)v322);
  if (!v87)
  {
LABEL_83:
    if (!v74 || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v315) == 3)
    {
      v63 = *(_QWORD *)(a4 + 16);
      if (!v63)
        goto LABEL_110;
      v88 = v315;
      if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
        goto LABEL_110;
      v65 = *(_QWORD *)(v88 + 24);
      goto LABEL_109;
    }
  }
  if (v288)
  {
    v299 = v306;
    v89 = v342;
    v90 = (mlir::AffineMap *)v343;
    *(_QWORD *)&v322 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v299);
    *((_QWORD *)&v322 + 1) = v91;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v322);
    __p = (void *)mlir::MemRefType::get(v89, v90, OperandRange, 0, 0, 0);
    v312 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 8), v7, (uint64_t *)&__p, (_QWORD **)&v299)- 16);
  }
  v284 = v7;
  if (mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v315) == 3)
  {
    Loc = mlir::Value::getLoc((mlir::Value *)&v312);
    v94 = operator new(0x40uLL);
    *(_QWORD *)&v335[0] = v94 + 4;
    *v94 = xmmword_1812464B0;
    v94[1] = xmmword_1812464C0;
    v94[2] = xmmword_1812464D0;
    v94[3] = xmmword_1812464E0;
    __p = v94;
    v334 = (uint64_t)(v94 + 4);
    *(_QWORD *)&v322 = &v323;
    *((_QWORD *)&v322 + 1) = 0x100000000;
    mlir::OpBuilder::createOrFold<mlir::anec::Transpose,mlir::Value &,std::vector<std::pair<unsigned long long,unsigned long long>>>((mlir::Builder *)(a4 + 8), (uint64_t)&v322, Loc, (uint64_t *)&v312, (uint64_t)&__p);
    v95 = *(_QWORD **)v322;
    if ((__int128 *)v322 != &v323)
      free((void *)v322);
    v312 = v95;
    if (__p)
    {
      v334 = (uint64_t)__p;
      operator delete(__p);
      v95 = v312;
    }
    v96 = (_QWORD *)(v95[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v96)
      goto LABEL_103;
    v97 = *v96;
    v98 = mlir::TypeID::get<mlir::ShapedType>();
    v99 = *(unsigned int *)(v97 + 16);
    if (!(_DWORD)v99)
      goto LABEL_103;
    v100 = *(_QWORD **)(v97 + 8);
    v101 = &v100[2 * v99];
    do
    {
      v102 = v99 >> 1;
      v103 = &v100[2 * (v99 >> 1)];
      v105 = *v103;
      v104 = v103 + 2;
      v99 += ~(v99 >> 1);
      if (v105 < v98)
        v100 = v104;
      else
        v99 = v102;
    }
    while (v99);
    if (v100 != v101 && *v100 == v98)
      v106 = v100[1];
    else
LABEL_103:
      v106 = 0;
    v308 = v96;
    v309 = v106;
    v107 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v308);
    v108 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v308);
    v110 = (_BYTE *)(v108 + 8 * v109);
    *(_QWORD *)&v322 = &v323;
    *((_QWORD *)&v322 + 1) = 0x400000000;
    v111 = v110 - v107;
    if ((unint64_t)(v110 - v107) < 0x21)
    {
      v112 = 0;
      v113 = (char *)&v323;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v322, &v323, v111 >> 3, 8);
      v112 = DWORD2(v322);
      v113 = (char *)v322;
    }
    if (v110 != v107)
    {
      memcpy(&v113[8 * v112], v107, v110 - v107);
      v112 = DWORD2(v322);
      v113 = (char *)v322;
    }
    v119 = v112 + ((unint64_t)v111 >> 3);
    DWORD2(v322) = v112 + ((unint64_t)v111 >> 3);
    if (v113 != (char *)&v323)
    {
      if (v342 != v344)
      {
        free(v342);
        v113 = (char *)v322;
        LODWORD(v119) = DWORD2(v322);
      }
      v342 = v113;
      v343 = __PAIR64__(HIDWORD(v322), v119);
      *(_QWORD *)&v322 = &v323;
      HIDWORD(v322) = 0;
      goto LABEL_141;
    }
    v120 = v343;
    if (v343 >= v119)
    {
      if ((_DWORD)v119)
        memmove(v342, &v323, 8 * v119);
      goto LABEL_140;
    }
    if (HIDWORD(v343) >= v119)
    {
      if ((_DWORD)v343)
      {
        memmove(v342, &v323, 8 * v343);
        goto LABEL_138;
      }
    }
    else
    {
      LODWORD(v343) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v342, v344, v119, 8);
    }
    v120 = 0;
LABEL_138:
    if (v120 != DWORD2(v322))
      memcpy(&v342[8 * v120], (const void *)(v322 + 8 * v120), 8 * DWORD2(v322) - 8 * v120);
LABEL_140:
    LODWORD(v343) = v119;
LABEL_141:
    DWORD2(v322) = 0;
    if ((__int128 *)v322 != &v323)
      free((void *)v322);
  }
  *(_QWORD *)&v322 = 3;
  v121 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  v122 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v322, 1, v121, 0);
  *(_QWORD *)&v322 = 6;
  v123 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  v285 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v322, 1, v123, 0);
  v336 = v338;
  v337 = 0x200000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v315);
  v125 = (uint64_t)Strides;
  if (Strides)
  {
    v126 = *Strides;
    v127 = mlir::TypeID::get<mlir::ElementsAttr>();
    v128 = *(unsigned int *)(v126 + 16);
    if (!(_DWORD)v128)
    {
      v135 = 0;
      goto LABEL_155;
    }
    v129 = *(_QWORD **)(v126 + 8);
    v130 = &v129[2 * v128];
    do
    {
      v131 = v128 >> 1;
      v132 = &v129[2 * (v128 >> 1)];
      v134 = *v132;
      v133 = v132 + 2;
      v128 += ~(v128 >> 1);
      if (v134 < v127)
        v129 = v133;
      else
        v128 = v131;
    }
    while (v128);
    if (v129 != v130 && *v129 == v127)
    {
      v135 = v129[1];
      goto LABEL_155;
    }
  }
  v135 = 0;
LABEL_155:
  mlir::getIntValues<unsigned long long>(v125, v135, (uint64_t)&v336, 1);
  v136 = v336;
  if (*v336 != 1 || v336[1] != 1)
  {
    v138 = *(_QWORD *)(a4 + 16);
    if (!v138)
      goto LABEL_163;
    v139 = v315;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_163;
    v140 = *(_QWORD *)(v139 + 24);
    goto LABEL_162;
  }
  v137 = 8 * v337 - 16;
  if ((_DWORD)v337 != 2)
    memmove(v336, v336 + 2, 8 * v337 - 16);
  LODWORD(v337) = (unint64_t)(&v136[v137] - (_BYTE *)v336) >> 3;
  *(_QWORD *)&v322 = 1;
  llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v336, (uint64_t)v336, (uint64_t *)&v322);
  if (v122)
  {
    v142 = *v122;
    v143 = mlir::TypeID::get<mlir::ShapedType>();
    v144 = *(unsigned int *)(v142 + 16);
    if (!(_DWORD)v144)
      goto LABEL_176;
    v145 = *(_QWORD **)(v142 + 8);
    v146 = &v145[2 * v144];
    do
    {
      v147 = v144 >> 1;
      v148 = &v145[2 * (v144 >> 1)];
      v150 = *v148;
      v149 = v148 + 2;
      v144 += ~(v144 >> 1);
      if (v150 < v143)
        v145 = v149;
      else
        v144 = v147;
    }
    while (v144);
    if (v145 != v146 && *v145 == v143)
      v151 = v145[1];
    else
LABEL_176:
      v151 = 0;
  }
  else
  {
    v151 = 0;
  }
  v298 = mlir::DenseElementsAttr::getFromRawBuffer(v122, v151, v336, 8 * v337, 8, 1, 0);
  v152 = v339;
  if (*v339 != 1 || v339[1] != 1)
  {
    v138 = *(_QWORD *)(a4 + 16);
    if (!v138)
      goto LABEL_163;
    v154 = v315;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_163;
    v140 = *(_QWORD *)(v154 + 24);
    goto LABEL_162;
  }
  v153 = 8 * v340 - 16;
  if ((_DWORD)v340 != 2)
    memmove(v339, v339 + 2, 8 * v340 - 16);
  LODWORD(v340) = (unint64_t)(&v152[v153] - (_BYTE *)v339) >> 3;
  *(_QWORD *)&v322 = 1;
  llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v339, (uint64_t)v339, (uint64_t *)&v322);
  if (!v122)
    goto LABEL_196;
  v155 = *v122;
  v156 = mlir::TypeID::get<mlir::ShapedType>();
  v157 = *(unsigned int *)(v155 + 16);
  if (!(_DWORD)v157)
    goto LABEL_196;
  v158 = *(_QWORD **)(v155 + 8);
  v159 = &v158[2 * v157];
  do
  {
    v160 = v157 >> 1;
    v161 = &v158[2 * (v157 >> 1)];
    v163 = *v161;
    v162 = v161 + 2;
    v157 += ~(v157 >> 1);
    if (v163 < v156)
      v158 = v162;
    else
      v157 = v160;
  }
  while (v157);
  if (v158 != v159 && *v158 == v156)
    v164 = v158[1];
  else
LABEL_196:
    v164 = 0;
  v296 = 0;
  v297 = mlir::DenseElementsAttr::getFromRawBuffer(v122, v164, v339, 8 * v340, 8, 1, 0);
  v166 = v339[1];
  v165 = v339[2];
  v167 = v166 > 1 || v165 > 1;
  v168 = v167;
  v282 = (*((_QWORD *)v342 + 2) - 1) * v166;
  v283 = (*((_QWORD *)v342 + 3) - 1) * v165;
  v294 = 0;
  v295 = 0;
  v293 = 0;
  Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v315);
  v170 = (uint64_t)Rewriter;
  if (!Rewriter)
    goto LABEL_212;
  v171 = *Rewriter;
  v172 = mlir::TypeID::get<mlir::ElementsAttr>();
  v173 = *(unsigned int *)(v171 + 16);
  if (!(_DWORD)v173)
    goto LABEL_212;
  v174 = *(_QWORD **)(v171 + 8);
  v175 = &v174[2 * v173];
  do
  {
    v176 = v173 >> 1;
    v177 = &v174[2 * (v173 >> 1)];
    v179 = *v177;
    v178 = v177 + 2;
    v173 += ~(v173 >> 1);
    if (v179 < v172)
      v174 = v178;
    else
      v173 = v176;
  }
  while (v173);
  if (v174 != v175 && *v174 == v172)
    v180 = v174[1];
  else
LABEL_212:
    v180 = 0;
  PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v315);
  {
    __p = v335;
    memset(v335, 0, sizeof(v335));
    v334 = 0x600000006;
    v330 = v332;
    memset(v332, 0, sizeof(v332));
    v331 = 0x600000006;
    if (v168)
    {
      v182 = *(_QWORD *)(a4 + 16);
      if (v182)
      {
        v183 = v315;
        if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      }
      v115 = 0;
      v116 = 0;
LABEL_322:
      if (v330 != v332)
        free(v330);
      if (__p != v335)
        free(__p);
      goto LABEL_164;
    }
    v185 = *(_QWORD *)(ArgAttrsAttr + 16);
    v186 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v311) + 16);
    v187 = v336[1];
    v188 = v296;
    v189 = *(_QWORD *)(ArgAttrsAttr + 24);
    v190 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v311) + 24);
    v191 = v336;
    v192 = v336[2];
    *(_QWORD *)&v322 = &v323;
    v323 = 0u;
    v325 = 0u;
    v193 = v192 - v192 * v190;
    *((_QWORD *)&v322 + 1) = 0x600000006;
    v324 = v282 - v188;
    v194 = v188 + v185 + v187 - v187 * v186 - v336[1];
    *((_QWORD *)&v324 + 1) = v194;
    *(_QWORD *)&v325 = v283 - v294;
    *((_QWORD *)&v325 + 1) = v294 + v189 + v193 - v336[2];
    v195 = v330;
    if ((uint64_t)(v282 - v188) > v282)
    {
      *((_QWORD *)v330 + 2) = -(uint64_t)v188;
      *(_QWORD *)&v324 = v282;
      v194 = *((_QWORD *)&v324 + 1);
    }
    v167 = v194 <= v282;
    v196 = v194 - v282;
    v197 = v285;
    if (!v167)
    {
      v195[3] = v196;
      *((_QWORD *)&v324 + 1) = v282;
    }
    if ((uint64_t)v325 > v283)
    {
      v195[4] = v325 - v283;
      *(_QWORD *)&v325 = v283;
    }
    if (*((uint64_t *)&v325 + 1) > v283)
    {
      v195[5] = *((_QWORD *)&v325 + 1) - v283;
      *((_QWORD *)&v325 + 1) = v283;
    }
    v198 = *v191 + v323 - 2 + *((_QWORD *)&v323 + 1);
    if (v198 >= 1)
    {
      *((_QWORD *)&v323 + 1) = 2 - (*v191 + v323);
      v195[1] += v198;
    }
    if (v282 + 2 >= 0)
      v199 = (v282 + 2) & 1;
    else
      v199 = -((v282 + 2) & 1);
    v200 = v199 + 2 * ~v282 + v191[1] + v324;
    v201 = v200 + *((_QWORD *)&v324 + 1);
    if (v200 + *((_QWORD *)&v324 + 1) >= 1)
    {
      *((_QWORD *)&v324 + 1) = -v200;
      v195[3] += v201;
    }
    v202 = v191[2];
    if (v283 + 2 >= 0)
      v203 = (v283 + 2) & 1;
    else
      v203 = -((v283 + 2) & 1);
    v204 = v203 + 2 * ~v283 + v202 + v325;
    v205 = v204 + *((_QWORD *)&v325 + 1);
    if (v204 + *((_QWORD *)&v325 + 1) >= 1)
    {
      *((_QWORD *)&v325 + 1) = -v204;
      v195[5] += v205;
    }
    v206 = __p;
    *(_QWORD *)__p = -(uint64_t)(v323 & ((uint64_t)v323 >> 63));
    *(_QWORD *)&v323 = v323 & ~((uint64_t)v323 >> 63);
    v206[1] = -(*((_QWORD *)&v323 + 1) & (*((uint64_t *)&v323 + 1) >> 63));
    *((_QWORD *)&v323 + 1) &= ~(*((uint64_t *)&v323 + 1) >> 63);
    v206[2] = -(uint64_t)(v324 & ((uint64_t)v324 >> 63));
    *(_QWORD *)&v324 = v324 & ~((uint64_t)v324 >> 63);
    v206[3] = -(*((_QWORD *)&v324 + 1) & (*((uint64_t *)&v324 + 1) >> 63));
    *((_QWORD *)&v324 + 1) &= ~(*((uint64_t *)&v324 + 1) >> 63);
    v206[4] = -(uint64_t)(v325 & ((uint64_t)v325 >> 63));
    *(_QWORD *)&v325 = v325 & ~((uint64_t)v325 >> 63);
    v206[5] = -(*((_QWORD *)&v325 + 1) & (*((uint64_t *)&v325 + 1) >> 63));
    v207 = v325;
    v208 = *((_QWORD *)&v325 + 1) & ~(*((uint64_t *)&v325 + 1) >> 63);
    *((_QWORD *)&v325 + 1) = v208;
    v209 = v324;
    v295 = *((_QWORD *)&v324 + 1);
    v296 = v324;
    v293 = v208;
    v294 = v325;
    if (v285)
    {
      v210 = *v285;
      v211 = mlir::TypeID::get<mlir::ShapedType>();
      v212 = *(unsigned int *)(v210 + 16);
      if ((_DWORD)v212)
      {
        v213 = *(_QWORD **)(v210 + 8);
        v214 = &v213[2 * v212];
        do
        {
          v215 = v212 >> 1;
          v216 = &v213[2 * (v212 >> 1)];
          v218 = *v216;
          v217 = v216 + 2;
          v212 += ~(v212 >> 1);
          if (v218 < v211)
            v213 = v217;
          else
            v212 = v215;
        }
        while (v212);
        v219 = v284;
        if (v213 != v214 && *v213 == v211)
          v220 = v213[1];
        else
          v220 = 0;
      }
      else
      {
        v220 = 0;
        v219 = v284;
      }
      v197 = v285;
    }
    else
    {
      v220 = 0;
      v219 = v284;
    }
    v322 = 0uLL;
    v323 = v209;
    *(_QWORD *)&v324 = v207;
    *((_QWORD *)&v324 + 1) = v208;
    v291 = 0;
    v292 = mlir::DenseElementsAttr::getFromRawBuffer(v197, v220, &v322, 48, 8, 1, 0);
    v221 = *(_QWORD *)(v315 + 24);
    if (v288)
    {
      v222 = (uint64_t *)(a4 + 8);
      v224 = v286;
      v223 = v287;
    }
    else
    {
      v223 = 0;
      v224 = 0;
      v222 = (uint64_t *)(a4 + 8);
    }
    *(_QWORD *)&v322 = v223;
    ArgOperands = v224;
    v290 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::detail::TypedValue<mlir::MemRefType>,mlir::detail::TypedValue<mlir::MemRefType>,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr&,mlir::anec::PaddingMode &,unsigned long long,BOOL,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(v222, v221, &v313, (uint64_t *)&v312, &v298, &v297, &v292, &v291, (uint64_t *)&Groups, &v314, (uint64_t *)&v322, (uint64_t *)&ArgOperands)- 16;
    if (!(_DWORD)v331)
    {
LABEL_295:
      v255 = __p;
      if (*((_QWORD *)__p + 2) || *((_QWORD *)__p + 3))
      {
        v256 = (uint64_t *)(*(_QWORD *)(v290 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v256)
          goto LABEL_306;
        v257 = *v256;
        v258 = mlir::TypeID::get<mlir::ShapedType>();
        v259 = *(unsigned int *)(v257 + 16);
        if (!(_DWORD)v259)
          goto LABEL_306;
        v260 = *(_QWORD **)(v257 + 8);
        v261 = &v260[2 * v259];
        do
        {
          v262 = v259 >> 1;
          v263 = &v260[2 * (v259 >> 1)];
          v265 = *v263;
          v264 = v263 + 2;
          v259 += ~(v259 >> 1);
          if (v265 < v258)
            v260 = v264;
          else
            v259 = v262;
        }
        while (v259);
        if (v260 != v261 && *v260 == v258)
          v266 = v260[1];
        else
LABEL_306:
          v266 = 0;
        *(_QWORD *)&v322 = v256;
        *((_QWORD *)&v322 + 1) = v266;
        v267 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v322) + 16);
        LODWORD(v318) = 2;
        v268 = *((_QWORD *)__p + 3);
        *(_QWORD *)&v322 = *((_QWORD *)__p + 2);
        ArgOperands = (void *)(v267 - (v322 + v268));
        v290 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v222, v219, &v290, (int *)&v318, (uint64_t *)&v322, (uint64_t *)&ArgOperands)- 16;
        v255 = __p;
      }
      if (v255[4] || v255[5])
      {
        v269 = (uint64_t *)(*(_QWORD *)(v290 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v269)
          goto LABEL_319;
        v270 = *v269;
        v271 = mlir::TypeID::get<mlir::ShapedType>();
        v272 = *(unsigned int *)(v270 + 16);
        if (!(_DWORD)v272)
          goto LABEL_319;
        v273 = *(_QWORD **)(v270 + 8);
        v274 = &v273[2 * v272];
        do
        {
          v275 = v272 >> 1;
          v276 = &v273[2 * (v272 >> 1)];
          v278 = *v276;
          v277 = v276 + 2;
          v272 += ~(v272 >> 1);
          if (v278 < v271)
            v273 = v277;
          else
            v272 = v275;
        }
        while (v272);
        if (v273 != v274 && *v273 == v271)
          v279 = v273[1];
        else
LABEL_319:
          v279 = 0;
        *(_QWORD *)&v322 = v269;
        *((_QWORD *)&v322 + 1) = v279;
        v280 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v322) + 24);
        LODWORD(v318) = 3;
        v281 = *((_QWORD *)__p + 5);
        *(_QWORD *)&v322 = *((_QWORD *)__p + 4);
        ArgOperands = (void *)(v280 - (v322 + v281));
        v290 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v222, v219, &v290, (int *)&v318, (uint64_t *)&v322, (uint64_t *)&ArgOperands)- 16;
      }
      v115 = mlir::Value::getDefiningOp((mlir::Value *)&v290);
      v116 = 1;
      goto LABEL_322;
    }
    v225 = v330;
    v226 = 8 * v331;
    v227 = (uint64_t *)v330;
    while (*v227 < 1)
    {
      ++v227;
      v226 -= 8;
      if (!v226)
        goto LABEL_295;
    }
    *(_QWORD *)&v322 = &v323;
    v323 = 0u;
    v324 = 0u;
    v325 = 0u;
    *((_QWORD *)&v322 + 1) = 0xA0000000ALL;
    ArgOperands = v321;
    memset_pattern16(v321, &unk_181246510, 0x28uLL);
    v320 = 0x500000005;
    *(int64x2_t *)&v321[24] = vdupq_n_s64(6uLL);
    v326 = v225[2];
    v327 = v225[3];
    v328 = v225[4];
    v329 = v225[5];
    v318 = xmmword_181233130;
    v228 = mlir::Builder::getIntegerType((mlir::Builder *)v222, 0x40u, 0);
    v229 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v318, 2, v228, 0);
    v230 = v229;
    if (!v229)
      goto LABEL_276;
    v231 = *v229;
    v232 = mlir::TypeID::get<mlir::ShapedType>();
    v233 = *(unsigned int *)(v231 + 16);
    if ((_DWORD)v233)
    {
      v234 = *(_QWORD **)(v231 + 8);
      v235 = &v234[2 * v233];
      do
      {
        v236 = v233 >> 1;
        v237 = &v234[2 * (v233 >> 1)];
        v239 = *v237;
        v238 = v237 + 2;
        v233 += ~(v233 >> 1);
        if (v239 < v232)
          v234 = v238;
        else
          v233 = v236;
      }
      while (v233);
      v222 = (uint64_t *)(a4 + 8);
      if (v234 == v235 || *v234 != v232)
      {
LABEL_276:
        v240 = 0;
        goto LABEL_279;
      }
      v240 = v234[1];
    }
    else
    {
      v240 = 0;
      v222 = (uint64_t *)(a4 + 8);
    }
LABEL_279:
    v289 = mlir::DenseElementsAttr::getFromRawBuffer(v230, v240, v322, 8 * DWORD2(v322), 8, 1, 0);
    F16FloatAttr = 5;
    v241 = mlir::Builder::getIntegerType((mlir::Builder *)v222, 0x40u, 0);
    v242 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&F16FloatAttr, 1, v241, 0);
    v243 = v242;
    if (v242)
    {
      v244 = *v242;
      v245 = mlir::TypeID::get<mlir::ShapedType>();
      v246 = *(unsigned int *)(v244 + 16);
      if (!(_DWORD)v246)
      {
        v253 = 0;
        v222 = (uint64_t *)(a4 + 8);
        goto LABEL_291;
      }
      v247 = *(_QWORD **)(v244 + 8);
      v248 = &v247[2 * v246];
      do
      {
        v249 = v246 >> 1;
        v250 = &v247[2 * (v246 >> 1)];
        v252 = *v250;
        v251 = v250 + 2;
        v246 += ~(v246 >> 1);
        if (v252 < v245)
          v247 = v251;
        else
          v246 = v249;
      }
      while (v246);
      v222 = (uint64_t *)(a4 + 8);
      if (v247 != v248 && *v247 == v245)
      {
        v253 = v247[1];
        goto LABEL_291;
      }
    }
    v253 = 0;
LABEL_291:
    *(_QWORD *)&v318 = mlir::DenseElementsAttr::getFromRawBuffer(v243, v253, ArgOperands, 8 * v320, 8, 1, 0);
    F16FloatAttr = (uint64_t)mlir::Builder::getF16FloatAttr((mlir::Float16Type **)v222, 0.0, v254);
    v290 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Padding,mlir::Value const&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &>((mlir::UnknownLoc **)v222, v219, &v290, (uint64_t *)&v318, &v289, &F16FloatAttr)- 16;
    if (ArgOperands != v321)
      free(ArgOperands);
    if ((__int128 *)v322 != &v323)
      free((void *)v322);
    goto LABEL_295;
  }
  v138 = *(_QWORD *)(a4 + 16);
  if (v138)
  {
    v184 = v315;
    if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
    {
      v140 = *(_QWORD *)(v184 + 24);
LABEL_162:
      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), __int128 *))(*(_QWORD *)v138 + 64))(v138, v140, v141, &v322);
    }
  }
LABEL_163:
  v115 = 0;
  v116 = 0;
LABEL_164:
  if (v336 != (_QWORD *)v338)
    free(v336);
LABEL_111:
  if (v339 != (_QWORD *)v341)
    free(v339);
  if (v342 != v344)
    free(v342);
  if (!v116)
    return 0;
  *(_QWORD *)&v322 = v115 - 16;
  v117 = 1;
  mlir::ValueRange::ValueRange(v316, (uint64_t)&v322, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, v316[0], v316[1]);
  return v117;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, int *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.input_view", (const unsigned __int8 *)0xF, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.input_view";
    v21[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::InputView::build(a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only dataLayout NCHW is supported for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported weightsLayout for Conv2D\n");
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>(uint64_t ***a1, uint64_t a2)
{
  uint64_t DefiningOp;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;
  uint64_t v16;

  v14[0] = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v14);
  v6 = DefiningOp;
  if (DefiningOp)
  {
    v16 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::QuantizeOp,void>::id
      && (*(_BYTE *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 3)
    {
      v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher> &,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher> & &)#1},0ul,1ul,2ul>((uint64_t)a1, (uint64_t)v14);
      v5 = v15 != 0;
    }
    else
    {
      v5 = 0;
    }
  }
  v7 = v5 && **(_BYTE **)a2 != 0;
  if (!v6)
    v7 = 0;
  **(_BYTE **)a2 = v7;
  v14[0] = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  v8 = mlir::Value::getDefiningOp((mlir::Value *)v14);
  if (v8)
    LOBYTE(v8) = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a1 + 1, v8);
  if (**(_BYTE **)a2)
    v9 = v8;
  else
    v9 = 0;
  **(_BYTE **)a2 = v9;
  v14[0] = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 88);
  v10 = mlir::Value::getDefiningOp((mlir::Value *)v14);
  if (v10)
    LOBYTE(v10) = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a1 + 2, v10);
  if (**(_BYTE **)a2)
    v11 = v10;
  else
    v11 = 0;
  **(_BYTE **)a2 = v11;
  v14[0] = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 120);
  result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  if (result)
    result = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a1 + 3, result);
  if (**(_BYTE **)a2)
    v13 = result;
  else
    v13 = 0;
  **(_BYTE **)a2 = v13;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher> &,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher> & &)#1},0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  uint64_t DefiningOp;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp)
  {
    v4 = DefiningOp;
    v5 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    LOBYTE(DefiningOp) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 48) + 32))(*(_QWORD *)(v4 + 48), v5);
  }
  if (**(_BYTE **)a2)
    v6 = DefiningOp;
  else
    v6 = 0;
  **(_BYTE **)a2 = v6;
  v15 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  v7 = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (v7)
  {
    v8 = v7;
    v9 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    LOBYTE(v7) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 48) + 32))(*(_QWORD *)(v8 + 48), v9);
  }
  if (**(_BYTE **)a2)
    v10 = v7;
  else
    v10 = 0;
  **(_BYTE **)a2 = v10;
  v15 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 88);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (result)
  {
    v12 = result;
    v13 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v12 + 48) + 32))(*(_QWORD *)(v12 + 48), v13);
  }
  if (**(_BYTE **)a2)
    v14 = result;
  else
    v14 = 0;
  **(_BYTE **)a2 = v14;
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "weight operand is not a constant!\n");
}

void mlir::OpBuilder::createOrFold<mlir::anec::Transpose,mlir::Value &,std::vector<std::pair<unsigned long long,unsigned long long>>>(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  const mlir::OperationState *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x1E0C80C00];
  v20 = a3;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.transpose", (const unsigned __int8 *)0xE, Context);
  if (!v12)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"anec.transpose";
    v23[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a3, v11);
  mlir::anec::Transpose::build(a1, (uint64_t)v25, *a4, *(uint64_t **)a5, (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4);
  v14 = (mlir::GenericProgramPoint *)mlir::Operation::create((mlir::Operation *)v25, v13);
  v15 = *((_QWORD *)a1 + 2);
  if (v15)
  {
    v16 = (uint64_t *)*((_QWORD *)a1 + 3);
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v15 + 32, (uint64_t)v14);
    mlir::GenericProgramPoint::~GenericProgramPoint(v14);
    v17 = *v16;
    *v18 = *v16;
    v18[1] = (uint64_t)v16;
    *(_QWORD *)(v17 + 8) = v18;
    *v16 = (uint64_t)v18;
    mlir::GenericProgramPoint::~GenericProgramPoint(v14);
  }
  if (mlir::OpBuilder::tryFold(a1, (uint64_t)v14, a2))
  {
    mlir::Operation::erase(v14);
  }
  else
  {
    v19 = *((_QWORD *)a1 + 1);
    if (v19)
      (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v19 + 16))(v19, v14);
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv dilation must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Dilation not supported for deconvolution");
}

_QWORD *mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::~ConvertConv(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::~ConvertConv(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Conv2DOpGenericAdaptorBase::Conv2DOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Conv2DOpGenericAdaptorBase::Conv2DOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Conv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _QWORD *v33;
  _QWORD v34[4];
  __int16 v35;
  _OWORD v36[7];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 96);
  v9 = *(_QWORD *)(a3 + 104);
  v37 = v8;
  v38 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 96);
      v29 = *(_OWORD *)(a3 + 64);
      v36[5] = *(_OWORD *)(a3 + 80);
      v36[6] = v28;
      v30 = *(_OWORD *)(a3 + 16);
      v36[0] = *(_OWORD *)a3;
      v36[1] = v30;
      v31 = *(_OWORD *)(a3 + 32);
      v36[3] = *(_OWORD *)(a3 + 48);
      v36[4] = v29;
      v36[2] = v31;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v36, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v38 = v23;
      if (v37)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v35 = 259;
    v32[0] = v34;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v38;
    if (v37 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v35 = 259;
  v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  uint64_t *InputAttributeNames;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(int, uint64_t);
  void *v56;
  uint64_t DefiningOp;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _BOOL4 v63;
  BOOL v64;
  int v65;
  _BOOL4 isSignedInteger;
  uint64_t IntegerType;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78;
  mlir::AffineMap *v79;
  uint64_t v80;
  uint64_t OperandRange;
  uint64_t Loc;
  _OWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  unsigned int v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *Strides;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(int, uint64_t);
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t *v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *Rewriter;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t *v164;
  _QWORD *v165;
  unint64_t v166;
  uint64_t v167;
  int PaddingStyle;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t *v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t *v197;
  _QWORD *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  unint64_t v209;
  unint64_t *v210;
  _QWORD *v211;
  unint64_t v212;
  uint64_t v213;
  mlir::MLIRContext *v214;
  _QWORD *v215;
  uint64_t *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  unint64_t v222;
  unint64_t *v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  unint64_t v235;
  unint64_t *v236;
  _QWORD *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t *v244;
  _QWORD *v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  void *Groups;
  _QWORD *v267;
  uint64_t v268;
  _QWORD v269[2];
  _QWORD *v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  unint64_t v274[2];
  uint64_t F16FloatAttr;
  __int128 v276;
  void *ArgOperands;
  uint64_t v278;
  _BYTE v279[40];
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  uint64_t v289;
  _OWORD v290[3];
  void *__p;
  uint64_t v292;
  _OWORD v293[3];
  _QWORD *v294;
  uint64_t v295;
  _BYTE v296[16];
  char *v297;
  uint64_t v298;
  _BYTE v299[32];
  char *v300;
  unint64_t v301;
  _BYTE v302[32];
  __int128 v303;
  uint64_t v304;

  v304 = *MEMORY[0x1E0C80C00];
  v273 = a2;
  v303 = *(_OWORD *)(a3 + 96);
  v272 = 0;
  v7 = *(_QWORD *)(a2 + 24);
  v271 = mlir::ValueRange::dereference_iterator(&v303, 0);
  v270 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v303, 1);
  v8 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v273);
  v9 = (uint64_t *)(*(_QWORD *)(v271 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    goto LABEL_10;
  v10 = *v9;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *(unsigned int *)(v10 + 16);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = *(_QWORD **)(v10 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v269[0] = v9;
  v269[1] = v19;
  if (*(_QWORD *)(v8 + 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v269);
  v22 = v21;
  v23 = (_QWORD *)(v270[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v23)
    goto LABEL_22;
  v24 = *v23;
  v25 = mlir::TypeID::get<mlir::ShapedType>();
  v26 = *(unsigned int *)(v24 + 16);
  if (!(_DWORD)v26)
    goto LABEL_22;
  v27 = *(_QWORD **)(v24 + 8);
  v28 = &v27[2 * v26];
  do
  {
    v29 = v26 >> 1;
    v30 = &v27[2 * (v26 >> 1)];
    v32 = *v30;
    v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25)
      v27 = v31;
    else
      v26 = v29;
  }
  while (v26);
  if (v27 != v28 && *v27 == v25)
    v33 = v27[1];
  else
LABEL_22:
    v33 = 0;
  v267 = v23;
  v268 = v33;
  *(_QWORD *)&v280 = v273;
  Groups = mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v280);
  v34 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v267);
  v35 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v267);
  v37 = (_BYTE *)(v35 + 8 * v36);
  v300 = v302;
  v301 = 0x400000000;
  v38 = v37 - v34;
  if ((unint64_t)(v37 - v34) < 0x21)
  {
    v39 = 0;
    if (v37 == v34)
      goto LABEL_28;
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v300, v302, v38 >> 3, 8);
  v39 = v301;
  if (v37 != v34)
  {
LABEL_27:
    memcpy(&v300[8 * v39], v34, v37 - v34);
    v39 = v301;
  }
LABEL_28:
  LODWORD(v301) = v39 + ((unint64_t)v38 >> 3);
  v297 = v299;
  v298 = 0x400000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v273);
  v41 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames)
    goto LABEL_37;
  v42 = *InputAttributeNames;
  v43 = mlir::TypeID::get<mlir::ElementsAttr>();
  v44 = *(unsigned int *)(v42 + 16);
  if (!(_DWORD)v44)
    goto LABEL_37;
  v45 = *(_QWORD **)(v42 + 8);
  v46 = &v45[2 * v44];
  do
  {
    v47 = v44 >> 1;
    v48 = &v45[2 * (v44 >> 1)];
    v50 = *v48;
    v49 = v48 + 2;
    v44 += ~(v44 >> 1);
    if (v50 < v43)
      v45 = v49;
    else
      v44 = v47;
  }
  while (v44);
  if (v45 != v46 && *v45 == v43)
    v51 = v45[1];
  else
LABEL_37:
    v51 = 0;
  mlir::getIntValues<unsigned long long>(v41, v51, (uint64_t)&v297, 1);
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v273))
  {
    v52 = *(_QWORD *)(a4 + 16);
    if (!v52)
      goto LABEL_102;
    v53 = v273;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_102;
    v54 = *(_QWORD *)(v53 + 24);
LABEL_101:
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), __int128 *))(*(_QWORD *)v52 + 64))(v52, v54, v55, &v280);
LABEL_102:
    v104 = 0;
    v105 = 0;
    goto LABEL_103;
  }
  if (mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v273) != 2
    && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v273) != 3)
  {
    v52 = *(_QWORD *)(a4 + 16);
    if (!v52)
      goto LABEL_102;
    v103 = v273;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_102;
    v54 = *(_QWORD *)(v103 + 24);
    goto LABEL_101;
  }
  v265 = 0uLL;
  v263 = 0;
  v264 = 0;
  v261 = 0;
  v262 = 0;
  v259 = 0;
  v260 = 0;
  v56 = *(void **)(*(_QWORD *)(v273 + 72) + 56);
  *(_QWORD *)&v280 = &v265;
  *((_QWORD *)&v280 + 1) = &v263;
  *(_QWORD *)&v281 = &v261;
  *((_QWORD *)&v281 + 1) = &v259;
  ArgOperands = v56;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!DefiningOp
    || (v288 = (void *)DefiningOp,
        *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
    || (*(_BYTE *)(DefiningOp + 46) & 0x80) == 0
    || *(_DWORD *)(DefiningOp + 68) != 4
    || (LOBYTE(v294) = 1,
        __p = &v294,
        v292 = (uint64_t)&v288,
        mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&v280, (uint64_t)&__p), !(_BYTE)v294))
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v273 + 72) + 56);
    v292 = (uint64_t)&v263;
    *(_QWORD *)&v293[0] = &v261;
    *((_QWORD *)&v293[0] + 1) = &v259;
    *(_QWORD *)&v258 = v58;
    v59 = mlir::Value::getDefiningOp((mlir::Value *)&v258);
    if (!v59)
      goto LABEL_57;
    v294 = (_QWORD *)v59;
    if (*(_UNKNOWN **)(*(_QWORD *)(v59 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
      goto LABEL_57;
    if ((*(_BYTE *)(v59 + 46) & 0x80) == 0)
      goto LABEL_57;
    if (*(_DWORD *)(v59 + 68) != 4)
      goto LABEL_57;
    LOBYTE(v276) = 1;
    v288 = &v276;
    v289 = (uint64_t)&v294;
    mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&__p, (uint64_t)&v288);
    if (!(_BYTE)v276)
      goto LABEL_57;
  }
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v261);
  v278 = v60;
  v61 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  if (mlir::ShapedType::getNumElements(v61, v62) == 1 && mlir::ElementsAttr::getNumElements(v259, v260) == 1)
    v63 = (mlir::getSingleFloatValue<float>(v259, v260) & 0x7FFFFFFF) == 0;
  else
LABEL_57:
    v63 = 0;
  if (*(_BYTE *)(a1 + 104))
    v64 = 1;
  else
    v64 = (_QWORD)v265 == 0;
  v65 = !v64;
  v247 = v65;
  if (v64)
  {
    v245 = 0;
    v246 = 0;
  }
  else
  {
    v246 = mlir::convertElementsAttr(v263, v264, 1);
    *(_QWORD *)&v280 = mlir::getElementTypeOrSelf(v261);
    isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v280);
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 8u, isSignedInteger);
    __p = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v261);
    v292 = v68;
    LOBYTE(v280) = 0;
    LOBYTE(v281) = 0;
    v69 = mlir::ShapedType::cloneWith((uint64_t *)&__p, &v280, IntegerType);
    v245 = mlir::rewriteElementsAttr((uint64_t)v261, v262, v69, v70, 1);
  }
  v258 = 0uLL;
  __p = v270;
  v71 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!v71)
    goto LABEL_75;
  v72 = v71;
  v73 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v72 + 48) + 32))(*(_QWORD *)(v72 + 48), v73))
    goto LABEL_75;
  *(_QWORD *)&v280 = &v281;
  *((_QWORD *)&v280 + 1) = 0x100000000;
  mlir::Operation::fold(v72, 0, 0, (uint64_t)&v280);
  v74 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v280 & 0xFFFFFFFFFFFFFFF8));
  v76 = v74;
  if (v74)
  {
    *(_QWORD *)&v258 = v74;
    *((_QWORD *)&v258 + 1) = v75;
  }
  if ((__int128 *)v280 != &v281)
    free((void *)v280);
  if (!v76)
  {
LABEL_75:
    if (!v63 || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v273) == 3)
    {
      v52 = *(_QWORD *)(a4 + 16);
      if (!v52)
        goto LABEL_102;
      v77 = v273;
      if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
        goto LABEL_102;
      v54 = *(_QWORD *)(v77 + 24);
      goto LABEL_101;
    }
  }
  if (v247)
  {
    v258 = v265;
    v78 = v300;
    v79 = (mlir::AffineMap *)v301;
    *(_QWORD *)&v280 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v258);
    *((_QWORD *)&v280 + 1) = v80;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v280);
    __p = (void *)mlir::MemRefType::get(v78, v79, OperandRange, 0, 0, 0);
    v270 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 8), v7, (uint64_t *)&__p, (_QWORD **)&v258)- 16);
  }
  v243 = v7;
  if (mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v273) == 3)
  {
    Loc = mlir::Value::getLoc((mlir::Value *)&v270);
    v83 = operator new(0x40uLL);
    *(_QWORD *)&v293[0] = v83 + 4;
    *v83 = xmmword_1812464B0;
    v83[1] = xmmword_1812464C0;
    v83[2] = xmmword_1812464D0;
    v83[3] = xmmword_1812464E0;
    __p = v83;
    v292 = (uint64_t)(v83 + 4);
    *(_QWORD *)&v280 = &v281;
    *((_QWORD *)&v280 + 1) = 0x100000000;
    mlir::OpBuilder::createOrFold<mlir::anec::Transpose,mlir::Value &,std::vector<std::pair<unsigned long long,unsigned long long>>>((mlir::Builder *)(a4 + 8), (uint64_t)&v280, Loc, (uint64_t *)&v270, (uint64_t)&__p);
    v84 = *(_QWORD **)v280;
    if ((__int128 *)v280 != &v281)
      free((void *)v280);
    v270 = v84;
    if (__p)
    {
      v292 = (uint64_t)__p;
      operator delete(__p);
      v84 = v270;
    }
    v85 = (_QWORD *)(v84[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v85)
      goto LABEL_95;
    v86 = *v85;
    v87 = mlir::TypeID::get<mlir::ShapedType>();
    v88 = *(unsigned int *)(v86 + 16);
    if (!(_DWORD)v88)
      goto LABEL_95;
    v89 = *(_QWORD **)(v86 + 8);
    v90 = &v89[2 * v88];
    do
    {
      v91 = v88 >> 1;
      v92 = &v89[2 * (v88 >> 1)];
      v94 = *v92;
      v93 = v92 + 2;
      v88 += ~(v88 >> 1);
      if (v94 < v87)
        v89 = v93;
      else
        v88 = v91;
    }
    while (v88);
    if (v89 != v90 && *v89 == v87)
      v95 = v89[1];
    else
LABEL_95:
      v95 = 0;
    v267 = v85;
    v268 = v95;
    v96 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v267);
    v97 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v267);
    v99 = (_BYTE *)(v97 + 8 * v98);
    *(_QWORD *)&v280 = &v281;
    *((_QWORD *)&v280 + 1) = 0x400000000;
    v100 = v99 - v96;
    if ((unint64_t)(v99 - v96) < 0x21)
    {
      v101 = 0;
      v102 = (char *)&v281;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v280, &v281, v100 >> 3, 8);
      v101 = DWORD2(v280);
      v102 = (char *)v280;
    }
    if (v99 != v96)
    {
      memcpy(&v102[8 * v101], v96, v99 - v96);
      v101 = DWORD2(v280);
      v102 = (char *)v280;
    }
    v108 = v101 + ((unint64_t)v100 >> 3);
    DWORD2(v280) = v101 + ((unint64_t)v100 >> 3);
    if (v102 != (char *)&v281)
    {
      if (v300 != v302)
      {
        free(v300);
        v102 = (char *)v280;
        LODWORD(v108) = DWORD2(v280);
      }
      v300 = v102;
      v301 = __PAIR64__(HIDWORD(v280), v108);
      *(_QWORD *)&v280 = &v281;
      HIDWORD(v280) = 0;
      goto LABEL_132;
    }
    v109 = v301;
    if (v301 >= v108)
    {
      if ((_DWORD)v108)
        memmove(v300, &v281, 8 * v108);
      goto LABEL_131;
    }
    if (HIDWORD(v301) >= v108)
    {
      if ((_DWORD)v301)
      {
        memmove(v300, &v281, 8 * v301);
        goto LABEL_129;
      }
    }
    else
    {
      LODWORD(v301) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v300, v302, v108, 8);
    }
    v109 = 0;
LABEL_129:
    if (v109 != DWORD2(v280))
      memcpy(&v300[8 * v109], (const void *)(v280 + 8 * v109), 8 * DWORD2(v280) - 8 * v109);
LABEL_131:
    LODWORD(v301) = v108;
LABEL_132:
    DWORD2(v280) = 0;
    if ((__int128 *)v280 != &v281)
      free((void *)v280);
  }
  *(_QWORD *)&v280 = 3;
  v110 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  v111 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v280, 1, v110, 0);
  *(_QWORD *)&v280 = 6;
  v244 = (uint64_t *)(a4 + 8);
  v112 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  v242 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v280, 1, v112, 0);
  v294 = v296;
  v295 = 0x200000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v273);
  v114 = (uint64_t)Strides;
  if (!Strides)
    goto LABEL_143;
  v115 = *Strides;
  v116 = mlir::TypeID::get<mlir::ElementsAttr>();
  v117 = *(unsigned int *)(v115 + 16);
  if (!(_DWORD)v117)
    goto LABEL_143;
  v118 = *(_QWORD **)(v115 + 8);
  v119 = &v118[2 * v117];
  do
  {
    v120 = v117 >> 1;
    v121 = &v118[2 * (v117 >> 1)];
    v123 = *v121;
    v122 = v121 + 2;
    v117 += ~(v117 >> 1);
    if (v123 < v116)
      v118 = v122;
    else
      v117 = v120;
  }
  while (v117);
  if (v118 != v119 && *v118 == v116)
    v124 = v118[1];
  else
LABEL_143:
    v124 = 0;
  mlir::getIntValues<unsigned long long>(v114, v124, (uint64_t)&v294, 1);
  v125 = v294;
  if (*v294 != 1 || v294[1] != 1)
  {
    v127 = *(_QWORD *)(a4 + 16);
    if (!v127)
      goto LABEL_152;
    v128 = v273;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_152;
    v129 = *(_QWORD *)(v128 + 24);
    goto LABEL_151;
  }
  v126 = 8 * v295 - 16;
  if ((_DWORD)v295 != 2)
    memmove(v294, v294 + 2, 8 * v295 - 16);
  LODWORD(v295) = (unint64_t)(&v125[v126] - (_BYTE *)v294) >> 3;
  *(_QWORD *)&v280 = 1;
  llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v294, (uint64_t)v294, (uint64_t *)&v280);
  if (v111)
  {
    v131 = *v111;
    v132 = mlir::TypeID::get<mlir::ShapedType>();
    v133 = *(unsigned int *)(v131 + 16);
    if (!(_DWORD)v133)
      goto LABEL_165;
    v134 = *(_QWORD **)(v131 + 8);
    v135 = &v134[2 * v133];
    do
    {
      v136 = v133 >> 1;
      v137 = &v134[2 * (v133 >> 1)];
      v139 = *v137;
      v138 = v137 + 2;
      v133 += ~(v133 >> 1);
      if (v139 < v132)
        v134 = v138;
      else
        v133 = v136;
    }
    while (v133);
    if (v134 != v135 && *v134 == v132)
      v140 = v134[1];
    else
LABEL_165:
      v140 = 0;
  }
  else
  {
    v140 = 0;
  }
  v257 = mlir::DenseElementsAttr::getFromRawBuffer(v111, v140, v294, 8 * v295, 8, 1, 0);
  v141 = v297;
  if (*(_QWORD *)v297 == 1 && *((_QWORD *)v297 + 1) == 1)
  {
    v142 = 8 * v298 - 16;
    if ((_DWORD)v298 != 2)
      memmove(v297, v297 + 16, 8 * v298 - 16);
    LODWORD(v298) = (unint64_t)(&v141[v142] - v297) >> 3;
    *(_QWORD *)&v280 = 1;
    llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v297, (uint64_t)v297, (uint64_t *)&v280);
    if (!v111)
      goto LABEL_186;
    v144 = *v111;
    v145 = mlir::TypeID::get<mlir::ShapedType>();
    v146 = *(unsigned int *)(v144 + 16);
    if (!(_DWORD)v146)
      goto LABEL_186;
    v147 = *(_QWORD **)(v144 + 8);
    v148 = &v147[2 * v146];
    do
    {
      v149 = v146 >> 1;
      v150 = &v147[2 * (v146 >> 1)];
      v152 = *v150;
      v151 = v150 + 2;
      v146 += ~(v146 >> 1);
      if (v152 < v145)
        v147 = v151;
      else
        v146 = v149;
    }
    while (v146);
    if (v147 != v148 && *v147 == v145)
      v153 = v147[1];
    else
LABEL_186:
      v153 = 0;
    v255 = 0;
    v256 = mlir::DenseElementsAttr::getFromRawBuffer(v111, v153, v297, 8 * v298, 8, 1, 0);
    v154 = (*((_QWORD *)v300 + 2) - 1) * *((_QWORD *)v297 + 1) + 1;
    v155 = (*((_QWORD *)v300 + 3) - 1) * *((_QWORD *)v297 + 2) + 1;
    v253 = 0;
    v254 = 0;
    v252 = 0;
    Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v273);
    v157 = (uint64_t)Rewriter;
    if (!Rewriter)
      goto LABEL_196;
    v158 = *Rewriter;
    v159 = mlir::TypeID::get<mlir::ElementsAttr>();
    v160 = *(unsigned int *)(v158 + 16);
    if (!(_DWORD)v160)
      goto LABEL_196;
    v161 = *(_QWORD **)(v158 + 8);
    v162 = &v161[2 * v160];
    do
    {
      v163 = v160 >> 1;
      v164 = &v161[2 * (v160 >> 1)];
      v166 = *v164;
      v165 = v164 + 2;
      v160 += ~(v160 >> 1);
      if (v166 < v159)
        v161 = v165;
      else
        v160 = v163;
    }
    while (v160);
    if (v161 != v162 && *v161 == v159)
      v167 = v161[1];
    else
LABEL_196:
      v167 = 0;
    PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v273);
    {
      __p = v293;
      memset(v293, 0, sizeof(v293));
      v292 = 0x600000006;
      v288 = v290;
      memset(v290, 0, sizeof(v290));
      v289 = 0x600000006;
      if (v242)
      {
        v169 = *v242;
        v170 = mlir::TypeID::get<mlir::ShapedType>();
        v171 = *(unsigned int *)(v169 + 16);
        v172 = v243;
        if (!(_DWORD)v171)
          goto LABEL_207;
        v173 = *(_QWORD **)(v169 + 8);
        v174 = &v173[2 * v171];
        do
        {
          v175 = v171 >> 1;
          v176 = &v173[2 * (v171 >> 1)];
          v178 = *v176;
          v177 = v176 + 2;
          v171 += ~(v171 >> 1);
          if (v178 < v170)
            v173 = v177;
          else
            v171 = v175;
        }
        while (v171);
        if (v173 != v174 && *v173 == v170)
          v179 = v173[1];
        else
LABEL_207:
          v179 = 0;
      }
      else
      {
        v179 = 0;
        v172 = v243;
      }
      v280 = 0uLL;
      *(_QWORD *)&v281 = v255;
      *((_QWORD *)&v281 + 1) = v254;
      *(_QWORD *)&v282 = v253;
      *((_QWORD *)&v282 + 1) = v252;
      v250 = 0;
      v251 = mlir::DenseElementsAttr::getFromRawBuffer(v242, v179, &v280, 48, 8, 1, 0);
      v182 = *(_QWORD *)(v273 + 24);
      if (v247)
      {
        v184 = v245;
        v183 = v246;
      }
      else
      {
        v183 = 0;
        v184 = 0;
      }
      *(_QWORD *)&v280 = v183;
      ArgOperands = v184;
      v249 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,unsigned long long &,BOOL const&,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(v244, v182, &v271, (uint64_t *)&v270, &v257, &v256, &v251, &v250, (uint64_t *)&Groups, &v272, (uint64_t *)&v280, (uint64_t *)&ArgOperands)- 16;
      if ((_DWORD)v289)
      {
        v185 = v288;
        v186 = 8 * v289;
        v187 = (uint64_t *)v288;
        while (*v187 < 1)
        {
          ++v187;
          v186 -= 8;
          if (!v186)
            goto LABEL_247;
        }
        *(_QWORD *)&v280 = &v281;
        v281 = 0u;
        v282 = 0u;
        v283 = 0u;
        *((_QWORD *)&v280 + 1) = 0xA0000000ALL;
        ArgOperands = v279;
        memset_pattern16(v279, &unk_181246510, 0x28uLL);
        v278 = 0x500000005;
        *(int64x2_t *)&v279[24] = vdupq_n_s64(6uLL);
        v284 = v185[2];
        v285 = v185[3];
        v286 = v185[4];
        v287 = v185[5];
        v276 = xmmword_181233130;
        v188 = mlir::Builder::getIntegerType((mlir::Builder *)v244, 0x40u, 0);
        v189 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v276, 2, v188, 0);
        v190 = v189;
        if (!v189)
          goto LABEL_231;
        v191 = *v189;
        v192 = mlir::TypeID::get<mlir::ShapedType>();
        v193 = *(unsigned int *)(v191 + 16);
        if (!(_DWORD)v193)
          goto LABEL_231;
        v194 = *(_QWORD **)(v191 + 8);
        v195 = &v194[2 * v193];
        do
        {
          v196 = v193 >> 1;
          v197 = &v194[2 * (v193 >> 1)];
          v199 = *v197;
          v198 = v197 + 2;
          v193 += ~(v193 >> 1);
          if (v199 < v192)
            v194 = v198;
          else
            v193 = v196;
        }
        while (v193);
        if (v194 != v195 && *v194 == v192)
          v200 = v194[1];
        else
LABEL_231:
          v200 = 0;
        v248 = mlir::DenseElementsAttr::getFromRawBuffer(v190, v200, v280, 8 * DWORD2(v280), 8, 1, 0);
        F16FloatAttr = 5;
        v201 = mlir::Builder::getIntegerType((mlir::Builder *)v244, 0x40u, 0);
        v202 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&F16FloatAttr, 1, v201, 0);
        v203 = v202;
        if (v202
          && (v204 = *v202,
              v205 = mlir::TypeID::get<mlir::ShapedType>(),
              v206 = *(unsigned int *)(v204 + 16),
              (_DWORD)v206))
        {
          v207 = *(_QWORD **)(v204 + 8);
          v208 = &v207[2 * v206];
          do
          {
            v209 = v206 >> 1;
            v210 = &v207[2 * (v206 >> 1)];
            v212 = *v210;
            v211 = v210 + 2;
            v206 += ~(v206 >> 1);
            if (v212 < v205)
              v207 = v211;
            else
              v206 = v209;
          }
          while (v206);
          v172 = v243;
          if (v207 != v208 && *v207 == v205)
            v213 = v207[1];
          else
            v213 = 0;
        }
        else
        {
          v213 = 0;
          v172 = v243;
        }
        *(_QWORD *)&v276 = mlir::DenseElementsAttr::getFromRawBuffer(v203, v213, ArgOperands, 8 * v278, 8, 1, 0);
        F16FloatAttr = (uint64_t)mlir::Builder::getF16FloatAttr((mlir::Float16Type **)v244, 0.0, v214);
        v249 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Padding,mlir::Value const&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &>((mlir::UnknownLoc **)v244, v172, &v249, (uint64_t *)&v276, &v248, &F16FloatAttr)- 16;
        if (ArgOperands != v279)
          free(ArgOperands);
        if ((__int128 *)v280 != &v281)
          free((void *)v280);
      }
LABEL_247:
      v215 = __p;
      if (*((_QWORD *)__p + 2) || *((_QWORD *)__p + 3))
      {
        v216 = (uint64_t *)(*(_QWORD *)(v249 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v216)
          goto LABEL_258;
        v217 = *v216;
        v218 = mlir::TypeID::get<mlir::ShapedType>();
        v219 = *(unsigned int *)(v217 + 16);
        if (!(_DWORD)v219)
          goto LABEL_258;
        v220 = *(_QWORD **)(v217 + 8);
        v221 = &v220[2 * v219];
        do
        {
          v222 = v219 >> 1;
          v223 = &v220[2 * (v219 >> 1)];
          v225 = *v223;
          v224 = v223 + 2;
          v219 += ~(v219 >> 1);
          if (v225 < v218)
            v220 = v224;
          else
            v219 = v222;
        }
        while (v219);
        if (v220 != v221 && *v220 == v218)
          v226 = v220[1];
        else
LABEL_258:
          v226 = 0;
        *(_QWORD *)&v280 = v216;
        *((_QWORD *)&v280 + 1) = v226;
        v227 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v280) + 16);
        LODWORD(v276) = 2;
        v228 = *((_QWORD *)__p + 3);
        *(_QWORD *)&v280 = *((_QWORD *)__p + 2);
        ArgOperands = (void *)(v227 - (v280 + v228));
        v249 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v244, v172, &v249, (int *)&v276, (uint64_t *)&v280, (uint64_t *)&ArgOperands)- 16;
        v215 = __p;
      }
      if (v215[4] || v215[5])
      {
        v229 = (uint64_t *)(*(_QWORD *)(v249 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v229)
          goto LABEL_271;
        v230 = *v229;
        v231 = mlir::TypeID::get<mlir::ShapedType>();
        v232 = *(unsigned int *)(v230 + 16);
        if (!(_DWORD)v232)
          goto LABEL_271;
        v233 = *(_QWORD **)(v230 + 8);
        v234 = &v233[2 * v232];
        do
        {
          v235 = v232 >> 1;
          v236 = &v233[2 * (v232 >> 1)];
          v238 = *v236;
          v237 = v236 + 2;
          v232 += ~(v232 >> 1);
          if (v238 < v231)
            v233 = v237;
          else
            v232 = v235;
        }
        while (v232);
        if (v233 != v234 && *v233 == v231)
          v239 = v233[1];
        else
LABEL_271:
          v239 = 0;
        *(_QWORD *)&v280 = v229;
        *((_QWORD *)&v280 + 1) = v239;
        v240 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v280) + 24);
        LODWORD(v276) = 3;
        v241 = *((_QWORD *)__p + 5);
        *(_QWORD *)&v280 = *((_QWORD *)__p + 4);
        ArgOperands = (void *)(v240 - (v280 + v241));
        v249 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v244, v172, &v249, (int *)&v276, (uint64_t *)&v280, (uint64_t *)&ArgOperands)- 16;
      }
      v104 = mlir::Value::getDefiningOp((mlir::Value *)&v249);
      if (v288 != v290)
        free(v288);
      if (__p != v293)
        free(__p);
      v105 = 1;
    }
    else
    {
      v180 = *(_QWORD *)(a4 + 16);
      if (v180)
      {
        v181 = v273;
        if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      }
      v104 = 0;
      v105 = 0;
    }
    goto LABEL_153;
  }
  v127 = *(_QWORD *)(a4 + 16);
  if (v127)
  {
    v143 = v273;
    if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
    {
      v129 = *(_QWORD *)(v143 + 24);
LABEL_151:
      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), __int128 *))(*(_QWORD *)v127 + 64))(v127, v129, v130, &v280);
    }
  }
LABEL_152:
  v104 = 0;
  v105 = 0;
LABEL_153:
  if (v294 != (_QWORD *)v296)
    free(v294);
LABEL_103:
  if (v297 != v299)
    free(v297);
  if (v300 != v302)
    free(v300);
  if (!v105)
    return 0;
  *(_QWORD *)&v280 = v104 - 16;
  v106 = 1;
  mlir::ValueRange::ValueRange(v274, (uint64_t)&v280, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, v274[0], v274[1]);
  return v106;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,unsigned long long &,BOOL const&,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, char *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t *Context;
  uint64_t v21;
  char v22;
  mlir::GenericProgramPoint *v23;
  mlir::GenericProgramPoint *v24;
  uint64_t v26;
  const char *v27;
  __int16 v28;
  uint64_t v29[4];
  __int16 v30;
  _QWORD v31[40];

  v31[38] = *MEMORY[0x1E0C80C00];
  v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  v21 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.convolution", (const unsigned __int8 *)0x10, Context);
  if (!v22)
  {
    v30 = 1283;
    v29[2] = (uint64_t)"anec.convolution";
    v29[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v21);
  mlir::anec::Convolution::build(a1, (uint64_t)v31, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11, *a12);
  v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((_QWORD *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id)
    v24 = v23;
  else
    v24 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v24;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only dataLayout NCHW is supported for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported weightsLayout for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "weight operand is not a constant!\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv dilation must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv2D\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::~ConvertConv(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::~ConvertConv(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DDataGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DDataGradientOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase::Conv3DDataGradientOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase::Conv3DDataGradientOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Conv3DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _QWORD *v33;
  _QWORD v34[4];
  __int16 v35;
  _OWORD v36[7];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 96);
  v9 = *(_QWORD *)(a3 + 104);
  v37 = v8;
  v38 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 96);
      v29 = *(_OWORD *)(a3 + 64);
      v36[5] = *(_OWORD *)(a3 + 80);
      v36[6] = v28;
      v30 = *(_OWORD *)(a3 + 16);
      v36[0] = *(_OWORD *)a3;
      v36[1] = v30;
      v31 = *(_OWORD *)(a3 + 32);
      v36[3] = *(_OWORD *)(a3 + 48);
      v36[4] = v29;
      v36[2] = v31;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v36, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v38 = v23;
      if (v37)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v35 = 259;
    v32[0] = v34;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DDataGradientOp &>(mlir::mps::Conv3DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v38;
    if (v37 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v35 = 259;
  v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DDataGradientOp &>(mlir::mps::Conv3DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, unint64_t *a10, unint64_t *a11, unint64_t *a12, unint64_t *a13, unint64_t *a14, unint64_t a15, unint64_t a16, unint64_t a17)
{
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t ArgAttrsAttr;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  uint64_t *InputAttributeNames;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  int StorageType;
  int v74;
  int WeightsLayout;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(int, uint64_t);
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  mlir::Builder *v91;
  uint64_t IntegerType;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *Strides;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(int, uint64_t);
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  BOOL v139;
  unint64_t v140;
  int v142;
  uint64_t v143;
  uint64_t *Rewriter;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  unint64_t v151;
  unint64_t *v152;
  _QWORD *v153;
  unint64_t v154;
  uint64_t v155;
  int PaddingStyle;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t *v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t DefiningOp;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  unint64_t v186;
  unint64_t *v187;
  _QWORD *v188;
  unint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  unsigned int v196;
  char *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  _QWORD *v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  unint64_t v238;
  unint64_t *v239;
  _QWORD *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __int128 *v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t *v255;
  _QWORD *v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  _QWORD *v265;
  _QWORD *v266;
  unint64_t v267;
  unint64_t *v268;
  _QWORD *v269;
  unint64_t v270;
  uint64_t v271;
  mlir::MLIRContext *v272;
  unint64_t v273;
  unsigned int IndexFromDim;
  char v275;
  unsigned int v276;
  unint64_t v277;
  unsigned int v278;
  char v279;
  unsigned int v280;
  unint64_t v281;
  unsigned int v282;
  char v283;
  unsigned int v284;
  _QWORD *v285;
  uint64_t *v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  unint64_t v292;
  unint64_t *v293;
  _QWORD *v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  unint64_t v305;
  unint64_t *v306;
  _QWORD *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  unint64_t v318;
  unint64_t *v319;
  _QWORD *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  unint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t *v353;
  _BOOL4 v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void *__p;
  uint64_t *__pa;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t Transpose;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  _QWORD v384[2];
  _QWORD v385[2];
  _QWORD *v386;
  uint64_t v387;
  unint64_t v388[2];
  uint64_t F16FloatAttr;
  __int128 v390;
  void *v391;
  uint64_t v392;
  _QWORD v393[3];
  int64x2_t v394;
  void *v395;
  uint64_t v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  void *v402[2];
  uint64_t v403;
  __int128 v404;
  __int128 v405;
  uint64_t v406;
  unint64_t v407[2];
  unint64_t v408[2];
  void *v409;
  uint64_t v410;
  _BYTE v411[48];
  void *v412;
  uint64_t v413;
  _BYTE v414[48];
  void *__dst;
  uint64_t v416;
  _BYTE v417[16];
  unint64_t *v418;
  uint64_t v419;
  _BYTE v420[40];
  char *v421;
  unint64_t v422;
  _BYTE v423[40];
  __int128 v424;
  uint64_t v425;

  v425 = *MEMORY[0x1E0C80C00];
  v387 = a2;
  v424 = *(_OWORD *)(a3 + 96);
  v367 = *(_QWORD *)(a2 + 24);
  v19 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v424, 0);
  v386 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v424, 1);
  v20 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v387);
  v21 = (uint64_t *)(v19[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v21)
    goto LABEL_10;
  v22 = *v21;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_10;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_10:
    v31 = 0;
  v385[0] = v21;
  v385[1] = v31;
  v32 = (uint64_t *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v32)
    goto LABEL_20;
  v33 = *v32;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_20;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_20:
    v42 = 0;
  v384[0] = v32;
  v384[1] = v42;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v384);
  v44 = (_QWORD *)(v386[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v44)
    goto LABEL_30;
  v45 = *v44;
  v46 = mlir::TypeID::get<mlir::ShapedType>();
  v47 = *(unsigned int *)(v45 + 16);
  if (!(_DWORD)v47)
    goto LABEL_30;
  v48 = *(_QWORD **)(v45 + 8);
  v49 = &v48[2 * v47];
  do
  {
    v50 = v47 >> 1;
    v51 = &v48[2 * (v47 >> 1)];
    v53 = *v51;
    v52 = v51 + 2;
    v47 += ~(v47 >> 1);
    if (v53 < v46)
      v48 = v52;
    else
      v47 = v50;
  }
  while (v47);
  if (v48 != v49 && *v48 == v46)
    v54 = v48[1];
  else
LABEL_30:
    v54 = 0;
  v382 = v44;
  v383 = v54;
  v381 = 1;
  v55 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v382);
  v56 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v382);
  v58 = (_BYTE *)(v56 + 8 * v57);
  v421 = v423;
  v422 = 0x500000000;
  v59 = v58 - v55;
  if ((unint64_t)(v58 - v55) < 0x29)
  {
    v60 = 0;
    if (v58 == v55)
      goto LABEL_36;
    goto LABEL_35;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v421, v423, v59 >> 3, 8);
  v60 = v422;
  if (v58 != v55)
  {
LABEL_35:
    memcpy(&v421[8 * v60], v55, v58 - v55);
    v60 = v422;
  }
LABEL_36:
  LODWORD(v422) = v60 + ((unint64_t)v59 >> 3);
  v418 = (unint64_t *)v420;
  v419 = 0x500000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v387);
  v62 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames)
    goto LABEL_45;
  v63 = *InputAttributeNames;
  v64 = mlir::TypeID::get<mlir::ElementsAttr>();
  v65 = *(unsigned int *)(v63 + 16);
  if (!(_DWORD)v65)
    goto LABEL_45;
  v66 = *(_QWORD **)(v63 + 8);
  v67 = &v66[2 * v65];
  do
  {
    v68 = v65 >> 1;
    v69 = &v66[2 * (v65 >> 1)];
    v71 = *v69;
    v70 = v69 + 2;
    v65 += ~(v65 >> 1);
    if (v71 < v64)
      v66 = v70;
    else
      v65 = v68;
  }
  while (v65);
  if (v66 != v67 && *v66 == v64)
    v72 = v66[1];
  else
LABEL_45:
    v72 = 0;
  mlir::getIntValues<unsigned long long>(v62, v72, (uint64_t)&v418, 1);
  StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v387);
  v74 = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v387);
  WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v387);
  v76 = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v387);
  if (StorageType == 7 || v74 == 8)
  {
    if (WeightsLayout != 10 && v76 != 9)
    {
      v77 = *(_QWORD *)(a4 + 16);
      if (!v77)
        goto LABEL_57;
      v81 = v387;
      if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
        goto LABEL_57;
      v79 = *(_QWORD *)(v81 + 24);
      goto LABEL_56;
    }
    if (StorageType == 7)
      v86 = 2;
    else
      v86 = 1;
    v87 = 2;
    if (StorageType == 7)
      v88 = 3;
    else
      v88 = 2;
    if (StorageType == 7)
      v89 = 4;
    else
      v89 = 3;
    v354 = v76 == 9;
    if (v76 == 9)
      v90 = 3;
    else
      v90 = 1;
    v357 = v90;
    if (v76 == 9)
      v87 = 4;
    v359 = v87;
    v347 = v86;
    v349 = v88;
    v364 = *(_QWORD *)(ArgAttrsAttr + 8 * v88);
    v365 = *(_QWORD *)(ArgAttrsAttr + 8 * v86);
    v351 = v89;
    __p = *(void **)(ArgAttrsAttr + 8 * v89);
    v395 = (void *)3;
    v366 = a4;
    v91 = (mlir::Builder *)(a4 + 8);
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
    v93 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v395, 1, IntegerType, 0);
    v395 = (void *)6;
    v352 = (uint64_t *)v91;
    v94 = mlir::Builder::getIntegerType(v91, 0x40u, 0);
    v353 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v395, 1, v94, 0);
    __dst = v417;
    v416 = 0x200000000;
    Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v387);
    v96 = (uint64_t)Strides;
    if (!Strides)
      goto LABEL_89;
    v97 = *Strides;
    v98 = mlir::TypeID::get<mlir::ElementsAttr>();
    v99 = *(unsigned int *)(v97 + 16);
    if (!(_DWORD)v99)
      goto LABEL_89;
    v100 = *(_QWORD **)(v97 + 8);
    v101 = &v100[2 * v99];
    do
    {
      v102 = v99 >> 1;
      v103 = &v100[2 * (v99 >> 1)];
      v105 = *v103;
      v104 = v103 + 2;
      v99 += ~(v99 >> 1);
      if (v105 < v98)
        v100 = v104;
      else
        v99 = v102;
    }
    while (v99);
    if (v100 != v101 && *v100 == v98)
      v106 = v100[1];
    else
LABEL_89:
      v106 = 0;
    mlir::getIntValues<unsigned long long>(v96, v106, (uint64_t)&__dst, 1);
    v107 = __dst;
    if (*(_QWORD *)__dst == 1 && *((_QWORD *)__dst + 1) == 1)
    {
      v108 = 8 * v416 - 16;
      if ((_DWORD)v416 != 2)
        memmove(__dst, (char *)__dst + 16, 8 * v416 - 16);
      LODWORD(v416) = (unint64_t)(&v107[v108] - (_BYTE *)__dst) >> 3;
      if (!v93)
        goto LABEL_115;
      v113 = *v93;
      v114 = mlir::TypeID::get<mlir::ShapedType>();
      v115 = *(unsigned int *)(v113 + 16);
      if (!(_DWORD)v115)
        goto LABEL_115;
      v116 = *(_QWORD **)(v113 + 8);
      v117 = &v116[2 * v115];
      do
      {
        v118 = v115 >> 1;
        v119 = &v116[2 * (v115 >> 1)];
        v121 = *v119;
        v120 = v119 + 2;
        v115 += ~(v115 >> 1);
        if (v121 < v114)
          v116 = v120;
        else
          v115 = v118;
      }
      while (v115);
      if (v116 != v117 && *v116 == v114)
        v122 = v116[1];
      else
LABEL_115:
        v122 = 0;
      v380 = mlir::DenseElementsAttr::getFromRawBuffer(v93, v122, __dst, 8 * v416, 8, 1, 0);
      v123 = v418;
      if (*v418 == 1 && v418[1] == 1)
      {
        v124 = 8 * v419 - 16;
        if ((_DWORD)v419 != 2)
          memmove(v418, v418 + 2, 8 * v419 - 16);
        v355 = 2 * v354;
        LODWORD(v419) = (unint64_t)((char *)v123 + v124 - (char *)v418) >> 3;
        if (v93)
        {
          v126 = *v93;
          v127 = mlir::TypeID::get<mlir::ShapedType>();
          v128 = *(unsigned int *)(v126 + 16);
          v129 = v357;
          if ((_DWORD)v128)
          {
            v130 = *(_QWORD **)(v126 + 8);
            v131 = &v130[2 * v128];
            do
            {
              v132 = v128 >> 1;
              v133 = &v130[2 * (v128 >> 1)];
              v135 = *v133;
              v134 = v133 + 2;
              v128 += ~(v128 >> 1);
              if (v135 < v127)
                v130 = v134;
              else
                v128 = v132;
            }
            while (v128);
            v136 = v359;
            if (v130 != v131 && *v130 == v127)
              v137 = v130[1];
            else
              v137 = 0;
          }
          else
          {
            v137 = 0;
            v136 = v359;
          }
        }
        else
        {
          v137 = 0;
          v129 = v357;
          v136 = v359;
        }
        v379 = mlir::DenseElementsAttr::getFromRawBuffer(v93, v137, v418, 8 * v419, 8, 1, 0);
        v138 = v418[1];
        v139 = *v418 > 1 || v138 > 1;
        v140 = v418[2];
        v142 = v139 || v140 > 1;
        v345 = v142;
        v342 = (*(_QWORD *)&v421[8 * v355] - 1) * *v418;
        v356 = v342 + 1;
        v343 = (*(_QWORD *)&v421[8 * v129] - 1) * v138;
        v143 = (*(_QWORD *)&v421[8 * v136] - 1) * v140;
        v358 = v343 + 1;
        v360 = v143 + 1;
        v377 = 0;
        v378 = 0;
        v375 = 0;
        v376 = 0;
        v373 = 0;
        v374 = 0;
        Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v387);
        v145 = (uint64_t)Rewriter;
        v344 = v143;
        if (!Rewriter)
          goto LABEL_157;
        v146 = *Rewriter;
        v147 = mlir::TypeID::get<mlir::ElementsAttr>();
        v148 = *(unsigned int *)(v146 + 16);
        if (!(_DWORD)v148)
          goto LABEL_157;
        v149 = *(_QWORD **)(v146 + 8);
        v150 = &v149[2 * v148];
        do
        {
          v151 = v148 >> 1;
          v152 = &v149[2 * (v148 >> 1)];
          v154 = *v152;
          v153 = v152 + 2;
          v148 += ~(v148 >> 1);
          if (v154 < v147)
            v149 = v153;
          else
            v148 = v151;
        }
        while (v148);
        if (v149 != v150 && *v149 == v147)
          v155 = v149[1];
        else
LABEL_157:
          v155 = 0;
        PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v387);
        {
          v412 = v414;
          memset(v414, 0, sizeof(v414));
          v413 = 0x600000006;
          v409 = v411;
          memset(v411, 0, sizeof(v411));
          v410 = 0x600000006;
          a4 = v366;
          if (!v353)
            goto LABEL_168;
          v157 = *v353;
          v158 = mlir::TypeID::get<mlir::ShapedType>();
          v159 = *(unsigned int *)(v157 + 16);
          if (!(_DWORD)v159)
            goto LABEL_168;
          v160 = *(_QWORD **)(v157 + 8);
          v161 = &v160[2 * v159];
          do
          {
            v162 = v159 >> 1;
            v163 = &v160[2 * (v159 >> 1)];
            v165 = *v163;
            v164 = v163 + 2;
            v159 += ~(v159 >> 1);
            if (v165 < v158)
              v160 = v164;
            else
              v159 = v162;
          }
          while (v159);
          if (v160 != v161 && *v160 == v158)
            v166 = v160[1];
          else
LABEL_168:
            v166 = 0;
          v341 = (uint64_t)v378;
          v395 = v378;
          v396 = v377;
          v339 = v376;
          *(_QWORD *)&v397 = v376;
          *((_QWORD *)&v397 + 1) = v375;
          v340 = v374;
          *(_QWORD *)&v398 = v374;
          *((_QWORD *)&v398 + 1) = v373;
          v371 = 0;
          v372 = mlir::DenseElementsAttr::getFromRawBuffer(v353, v166, &v395, 48, 8, 1, 0);
          v167 = (uint64_t *)operator new(0x28uLL);
          v168 = v167;
          if (StorageType == 7)
          {
            *(_OWORD *)v167 = xmmword_181246600;
            *((_OWORD *)v167 + 1) = unk_181246610;
            v169 = 4;
          }
          else
          {
            *(_OWORD *)v167 = xmmword_1812465B0;
            *((_OWORD *)v167 + 1) = unk_1812465C0;
            v169 = 3;
          }
          v167[4] = v169;
          v171 = v387;
          v395 = v19;
          mlir::ValueRange::ValueRange(v408, (uint64_t)&v395, 1uLL);
          __pa = v168;
          v395 = v386;
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v395);
          if (!DefiningOp
            || (v173 = DefiningOp,
                v174 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
                ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v173 + 48) + 32))(*(_QWORD *)(v173 + 48), v174) & 1) == 0))
          {
            v177 = *(_QWORD *)(v366 + 16);
            if (v177)
            {
              v178 = v387;
              if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(v366 + 16)))
            }
            v82 = 0;
            v83 = 0;
            goto LABEL_344;
          }
          v175 = (uint64_t *)operator new(0x28uLL);
          v176 = v175;
          if (WeightsLayout == 10)
          {
            v175[4] = 0;
            *(_OWORD *)v175 = xmmword_1812465D8;
            *((_OWORD *)v175 + 1) = unk_1812465E8;
          }
          else
          {
            *(_OWORD *)v175 = xmmword_181246628;
            *((_OWORD *)v175 + 1) = unk_181246638;
            v175[4] = 2;
          }
          v179 = v387;
          v395 = v386;
          mlir::ValueRange::ValueRange(v407, (uint64_t)&v395, 1uLL);
          v180 = (_QWORD *)(v386[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v180)
            goto LABEL_193;
          v181 = *v180;
          v182 = mlir::TypeID::get<mlir::ShapedType>();
          v183 = *(unsigned int *)(v181 + 16);
          if (!(_DWORD)v183)
            goto LABEL_193;
          v184 = *(_QWORD **)(v181 + 8);
          v185 = &v184[2 * v183];
          do
          {
            v186 = v183 >> 1;
            v187 = &v184[2 * (v183 >> 1)];
            v189 = *v187;
            v188 = v187 + 2;
            v183 += ~(v183 >> 1);
            if (v189 < v182)
              v184 = v188;
            else
              v183 = v186;
          }
          while (v183);
          if (v184 != v185 && *v184 == v182)
            v190 = v184[1];
          else
LABEL_193:
            v190 = 0;
          v382 = v180;
          v383 = v190;
          v191 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v382);
          v192 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v382);
          v194 = (_BYTE *)(v192 + 8 * v193);
          v395 = &v397;
          v396 = 0x500000000;
          v195 = v194 - v191;
          if ((unint64_t)(v194 - v191) < 0x29)
          {
            v196 = 0;
            v197 = (char *)&v397;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v395, &v397, v195 >> 3, 8);
            v196 = v396;
            v197 = (char *)v395;
          }
          if (v194 != v191)
          {
            memcpy(&v197[8 * v196], v191, v194 - v191);
            v196 = v396;
            v197 = (char *)v395;
          }
          v198 = v196 + ((unint64_t)v195 >> 3);
          LODWORD(v396) = v196 + ((unint64_t)v195 >> 3);
          if (v197 != (char *)&v397)
          {
            if (v421 != v423)
            {
              free(v421);
              v197 = (char *)v395;
              LODWORD(v198) = v396;
            }
            v421 = v197;
            v422 = __PAIR64__(HIDWORD(v396), v198);
            v395 = &v397;
            HIDWORD(v396) = 0;
LABEL_216:
            LODWORD(v396) = 0;
            a4 = v366;
            if (v395 != &v397)
              free(v395);
            v369 = 0;
            if (v345)
            {
              v200 = *(_QWORD *)(v366 + 16);
              if (v200)
              {
                v201 = v387;
                if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(v366 + 16)))
              }
              v82 = 0;
              v83 = 0;
LABEL_343:
              operator delete(v176);
LABEL_344:
              operator delete(__pa);
              if (v409 != v411)
                free(v409);
              if (v412 != v414)
                free(v412);
              goto LABEL_99;
            }
            v202 = 8 * v347;
            v346 = v176;
            v348 = *(_QWORD *)(ArgAttrsAttr + 8 * v347);
            v203 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385) + v202);
            v204 = *(_QWORD *)__dst;
            v205 = 8 * v349;
            v350 = *(_QWORD *)(ArgAttrsAttr + 8 * v349);
            v206 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385) + v205);
            v207 = *((_QWORD *)__dst + 1);
            v208 = *(_QWORD *)(ArgAttrsAttr + 8 * v351);
            v209 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385) + 8 * v351);
            v210 = __dst;
            v211 = *((_QWORD *)__dst + 2);
            v402[0] = &v403;
            v404 = 0u;
            v405 = 0u;
            v212 = v211 - v211 * v209;
            v402[1] = (void *)0x600000006;
            v406 = 0;
            v403 = v342 - v341;
            v213 = (char *)(v348 + v341 + v204 - v204 * v203 - *(_QWORD *)__dst);
            *(_QWORD *)&v404 = v213;
            *((_QWORD *)&v404 + 1) = v343 - v339;
            *(_QWORD *)&v405 = v350 + v339 + v207 - v207 * v206 - *((_QWORD *)__dst + 1);
            *((_QWORD *)&v405 + 1) = v344 - v340;
            v406 = v208 + v340 + v212 - *((_QWORD *)__dst + 2);
            v214 = v409;
            if (v342 - v341 >= v356)
            {
              *(_QWORD *)v409 = -v341;
              v403 = v342;
              v213 = (char *)v404;
            }
            if ((uint64_t)v213 >= v356)
            {
              v214[1] = &v213[-v342];
              *(_QWORD *)&v404 = v342;
            }
            if (*((uint64_t *)&v404 + 1) >= v358)
            {
              v214[2] = *((_QWORD *)&v404 + 1) - v343;
              *((_QWORD *)&v404 + 1) = v343;
            }
            if ((uint64_t)v405 >= v358)
            {
              v214[3] = v405 - v343;
              *(_QWORD *)&v405 = v343;
            }
            if (*((uint64_t *)&v405 + 1) >= v360)
            {
              v214[4] = *((_QWORD *)&v405 + 1) - v344;
              *((_QWORD *)&v405 + 1) = v344;
            }
            if (v406 >= v360)
            {
              v214[5] = v406 - v344;
              v406 = v344;
            }
            v215 = v409;
            if (v342 + 2 >= 0)
              v216 = (v342 + 2) & 1;
            else
              v216 = -((v342 + 2) & 1);
            v217 = v216 + 2 * ~v342 + v403 + *v210;
            v218 = v217 + v404;
            if (v217 + (uint64_t)v404 >= 1)
            {
              *(_QWORD *)&v404 = -v217;
              *((_QWORD *)v409 + 1) += v218;
            }
            if (v343 + 2 >= 0)
              v219 = (v343 + 2) & 1;
            else
              v219 = -((v343 + 2) & 1);
            v220 = v219 + 2 * ~v343 + *((_QWORD *)&v404 + 1) + v210[1];
            v221 = v220 + v405;
            if (v220 + (uint64_t)v405 >= 1)
            {
              *(_QWORD *)&v405 = -v220;
              v215[3] += v221;
            }
            v222 = v210[2];
            if (v344 + 2 >= 0)
              v223 = (v344 + 2) & 1;
            else
              v223 = -((v344 + 2) & 1);
            v224 = v223 + 2 * ~v344 + *((_QWORD *)&v405 + 1) + v222;
            v225 = v224 + v406;
            if (v224 + v406 >= 1)
            {
              v406 = -v224;
              v215[5] += v225;
            }
            v226 = v412;
            *(_QWORD *)v412 = -(v403 & (v403 >> 63));
            v403 &= ~(v403 >> 63);
            v226[1] = -(uint64_t)(v404 & ((uint64_t)v404 >> 63));
            *(_QWORD *)&v404 = v404 & ~((uint64_t)v404 >> 63);
            v226[2] = -(*((_QWORD *)&v404 + 1) & (*((uint64_t *)&v404 + 1) >> 63));
            *((_QWORD *)&v404 + 1) &= ~(*((uint64_t *)&v404 + 1) >> 63);
            v226[3] = -(uint64_t)(v405 & ((uint64_t)v405 >> 63));
            *(_QWORD *)&v405 = v405 & ~((uint64_t)v405 >> 63);
            v226[4] = -(*((_QWORD *)&v405 + 1) & (*((uint64_t *)&v405 + 1) >> 63));
            *((_QWORD *)&v405 + 1) &= ~(*((uint64_t *)&v405 + 1) >> 63);
            v226[5] = -(v406 & (v406 >> 63));
            v227 = *((_QWORD *)&v405 + 1);
            v228 = v406 & ~(v406 >> 63);
            v406 = v228;
            v229 = (void *)v403;
            v230 = v404;
            v377 = v404;
            v378 = (void *)v403;
            v231 = *((_QWORD *)&v404 + 1);
            v232 = v405;
            v375 = v405;
            v376 = *((_QWORD *)&v404 + 1);
            v373 = v228;
            v374 = *((_QWORD *)&v405 + 1);
            if (v353)
            {
              v361 = *((_QWORD *)&v405 + 1);
              v233 = *v353;
              v234 = mlir::TypeID::get<mlir::ShapedType>();
              v235 = *(unsigned int *)(v233 + 16);
              if ((_DWORD)v235)
              {
                v236 = *(_QWORD **)(v233 + 8);
                v237 = &v236[2 * v235];
                do
                {
                  v238 = v235 >> 1;
                  v239 = &v236[2 * (v235 >> 1)];
                  v241 = *v239;
                  v240 = v239 + 2;
                  v235 += ~(v235 >> 1);
                  if (v241 < v234)
                    v236 = v240;
                  else
                    v235 = v238;
                }
                while (v235);
                if (v236 != v237 && *v236 == v234)
                  v242 = v236[1];
                else
                  v242 = 0;
              }
              else
              {
                v242 = 0;
              }
              v227 = v361;
            }
            else
            {
              v242 = 0;
            }
            v395 = v229;
            v396 = v230;
            *(_QWORD *)&v397 = v231;
            *((_QWORD *)&v397 + 1) = v232;
            *(_QWORD *)&v398 = v227;
            *((_QWORD *)&v398 + 1) = v228;
            v371 = 0;
            v372 = mlir::DenseElementsAttr::getFromRawBuffer(v353, v242, &v395, 48, 8, 1, 0);
            v243 = *(_QWORD *)(v387 + 24);
            LOBYTE(v390) = 0;
            v395 = 0;
            v391 = 0;
            v369 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,unsigned long long &,BOOL,decltype(nullptr),decltype(nullptr)>(v352, v243, &Transpose, (uint64_t *)&v386, &v380, &v379, &v372, &v371, &v381, (char *)&v390)- 16);
            a4 = v366;
            v176 = v346;
            if ((_DWORD)v410)
            {
              v244 = 0;
              v245 = (__int128 *)v409;
              while (*(uint64_t *)((char *)v409 + v244) < 1)
              {
                v244 += 8;
                if (8 * v410 == v244)
                  goto LABEL_295;
              }
              v395 = &v397;
              v397 = 0u;
              v398 = 0u;
              v399 = 0u;
              v400 = 0u;
              v401 = 0u;
              v396 = 0xA0000000ALL;
              v391 = v393;
              memset_pattern16(v393, &unk_181246510, 0x28uLL);
              v392 = 0x500000005;
              v394 = vdupq_n_s64(6uLL);
              v393[1] = 6;
              v398 = *v245;
              v400 = v245[1];
              v401 = v245[2];
              if (v398 != 0)
              {
                v329 = *(_QWORD *)(v366 + 16);
                if (v329)
                {
                  v330 = v387;
                  if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(v366 + 16)))
                }
                if (v391 != v393)
                  free(v391);
                if (v395 != &v397)
                  free(v395);
                if (v402[0] != &v403)
                  free(v402[0]);
                v82 = 0;
                v83 = 0;
                goto LABEL_343;
              }
              v390 = xmmword_181233130;
              v246 = mlir::Builder::getIntegerType((mlir::Builder *)v352, 0x40u, 0);
              v247 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v390, 2, v246, 0);
              v248 = v247;
              if (!v247)
                goto LABEL_280;
              v249 = *v247;
              v250 = mlir::TypeID::get<mlir::ShapedType>();
              v251 = *(unsigned int *)(v249 + 16);
              if (!(_DWORD)v251)
                goto LABEL_280;
              v252 = *(_QWORD **)(v249 + 8);
              v253 = &v252[2 * v251];
              do
              {
                v254 = v251 >> 1;
                v255 = &v252[2 * (v251 >> 1)];
                v257 = *v255;
                v256 = v255 + 2;
                v251 += ~(v251 >> 1);
                if (v257 < v250)
                  v252 = v256;
                else
                  v251 = v254;
              }
              while (v251);
              if (v252 != v253 && *v252 == v250)
                v258 = v252[1];
              else
LABEL_280:
                v258 = 0;
              v368 = mlir::DenseElementsAttr::getFromRawBuffer(v248, v258, v395, 8 * v396, 8, 1, 0);
              F16FloatAttr = 5;
              v259 = mlir::Builder::getIntegerType((mlir::Builder *)v352, 0x40u, 0);
              v260 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&F16FloatAttr, 1, v259, 0);
              v261 = v260;
              if (!v260)
                goto LABEL_290;
              v262 = *v260;
              v263 = mlir::TypeID::get<mlir::ShapedType>();
              v264 = *(unsigned int *)(v262 + 16);
              if (!(_DWORD)v264)
                goto LABEL_290;
              v265 = *(_QWORD **)(v262 + 8);
              v266 = &v265[2 * v264];
              do
              {
                v267 = v264 >> 1;
                v268 = &v265[2 * (v264 >> 1)];
                v270 = *v268;
                v269 = v268 + 2;
                v264 += ~(v264 >> 1);
                if (v270 < v263)
                  v265 = v269;
                else
                  v264 = v267;
              }
              while (v264);
              if (v265 != v266 && *v265 == v263)
                v271 = v265[1];
              else
LABEL_290:
                v271 = 0;
              *(_QWORD *)&v390 = mlir::DenseElementsAttr::getFromRawBuffer(v261, v271, v391, 8 * v392, 8, 1, 0);
              F16FloatAttr = (uint64_t)mlir::Builder::getF16FloatAttr((mlir::Float16Type **)v352, 0.0, v272);
              v369 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::Padding,mlir::Value const&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &>((mlir::UnknownLoc **)v352, v367, (uint64_t *)&v369, (uint64_t *)&v390, &v368, &F16FloatAttr)- 16);
              if (v391 != v393)
                free(v391);
              if (v395 != &v397)
                free(v395);
            }
LABEL_295:
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385);
            IndexFromDim = mlir::anec::getIndexFromDim(2, v273);
            if (!v275
              || (v276 = IndexFromDim,
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385),
                  v278 = mlir::anec::getIndexFromDim(3, v277),
                  !v279)
              || (v280 = v278,
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385),
                  v282 = mlir::anec::getIndexFromDim(4, v281),
                  !v283))
            {
              v331 = std::__throw_bad_optional_access[abi:nn180100]();
            }
            v284 = v282;
            v285 = v412;
            if (*(_QWORD *)v412 || *((_QWORD *)v412 + 1))
            {
              v286 = (uint64_t *)(v369[1] & 0xFFFFFFFFFFFFFFF8);
              if (!v286)
                goto LABEL_309;
              v287 = *v286;
              v288 = mlir::TypeID::get<mlir::ShapedType>();
              v289 = *(unsigned int *)(v287 + 16);
              if (!(_DWORD)v289)
                goto LABEL_309;
              v290 = *(_QWORD **)(v287 + 8);
              v291 = &v290[2 * v289];
              do
              {
                v292 = v289 >> 1;
                v293 = &v290[2 * (v289 >> 1)];
                v295 = *v293;
                v294 = v293 + 2;
                v289 += ~(v289 >> 1);
                if (v295 < v288)
                  v290 = v294;
                else
                  v289 = v292;
              }
              while (v289);
              if (v290 != v291 && *v290 == v288)
                v296 = v290[1];
              else
LABEL_309:
                v296 = 0;
              v395 = v286;
              v396 = v296;
              v297 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v395)
                               + 8 * v276);
              LODWORD(v390) = 1;
              v298 = *((_QWORD *)v412 + 1);
              v395 = *(void **)v412;
              v391 = (void *)(v297 - ((_QWORD)v395 + v298));
              v369 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v352, v367, (uint64_t *)&v369, (int *)&v390, (uint64_t *)&v395, (uint64_t *)&v391)- 16);
              v285 = v412;
            }
            a4 = v366;
            if (v285[2] || v285[3])
            {
              v299 = (uint64_t *)(v369[1] & 0xFFFFFFFFFFFFFFF8);
              if (!v299)
                goto LABEL_322;
              v300 = *v299;
              v301 = mlir::TypeID::get<mlir::ShapedType>();
              v302 = *(unsigned int *)(v300 + 16);
              if (!(_DWORD)v302)
                goto LABEL_322;
              v303 = *(_QWORD **)(v300 + 8);
              v304 = &v303[2 * v302];
              do
              {
                v305 = v302 >> 1;
                v306 = &v303[2 * (v302 >> 1)];
                v308 = *v306;
                v307 = v306 + 2;
                v302 += ~(v302 >> 1);
                if (v308 < v301)
                  v303 = v307;
                else
                  v302 = v305;
              }
              while (v302);
              if (v303 != v304 && *v303 == v301)
                v309 = v303[1];
              else
LABEL_322:
                v309 = 0;
              v395 = v299;
              v396 = v309;
              v310 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v395)
                               + 8 * v280);
              LODWORD(v390) = 3;
              v311 = *((_QWORD *)v412 + 3);
              v395 = (void *)*((_QWORD *)v412 + 2);
              v391 = (void *)(v310 - ((_QWORD)v395 + v311));
              v369 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v352, v367, (uint64_t *)&v369, (int *)&v390, (uint64_t *)&v395, (uint64_t *)&v391)- 16);
              v285 = v412;
            }
            if (v285[4] || v285[5])
            {
              v312 = (uint64_t *)(v369[1] & 0xFFFFFFFFFFFFFFF8);
              if (!v312)
                goto LABEL_335;
              v313 = *v312;
              v314 = mlir::TypeID::get<mlir::ShapedType>();
              v315 = *(unsigned int *)(v313 + 16);
              if (!(_DWORD)v315)
                goto LABEL_335;
              v316 = *(_QWORD **)(v313 + 8);
              v317 = &v316[2 * v315];
              do
              {
                v318 = v315 >> 1;
                v319 = &v316[2 * (v315 >> 1)];
                v321 = *v319;
                v320 = v319 + 2;
                v315 += ~(v315 >> 1);
                if (v321 < v314)
                  v316 = v320;
                else
                  v315 = v318;
              }
              while (v315);
              if (v316 != v317 && *v316 == v314)
                v322 = v316[1];
              else
LABEL_335:
                v322 = 0;
              v395 = v312;
              v396 = v322;
              v323 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v395)
                               + 8 * v284);
              LODWORD(v390) = 4;
              v324 = *((_QWORD *)v412 + 5);
              v395 = (void *)*((_QWORD *)v412 + 4);
              v391 = (void *)(v323 - ((_QWORD)v395 + v324));
              v369 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v352, v367, (uint64_t *)&v369, (int *)&v390, (uint64_t *)&v395, (uint64_t *)&v391)- 16);
            }
            if (v402[0] != &v403)
              free(v402[0]);
            v325 = (uint64_t *)operator new(0x28uLL);
            v326 = v325;
            v176 = v346;
            if (StorageType == 7)
            {
              *(_OWORD *)v325 = xmmword_181246600;
              *((_OWORD *)v325 + 1) = unk_181246610;
              v327 = 4;
            }
            else
            {
              *(_OWORD *)v325 = xmmword_181246628;
              *((_OWORD *)v325 + 1) = unk_181246638;
              v327 = 2;
            }
            v325[4] = v327;
            v328 = v387;
            v391 = v369;
            v83 = 1;
            mlir::ValueRange::ValueRange((unint64_t *)&v395, (uint64_t)&v391, 1uLL);
            v82 = mlir::Value::getDefiningOp((mlir::Value *)v402);
            operator delete(v326);
            goto LABEL_343;
          }
          v199 = v422;
          if (v422 >= v198)
          {
            if ((_DWORD)v198)
              memmove(v421, &v397, 8 * v198);
            goto LABEL_215;
          }
          if (HIDWORD(v422) >= v198)
          {
            if ((_DWORD)v422)
            {
              memmove(v421, &v397, 8 * v422);
              goto LABEL_213;
            }
          }
          else
          {
            LODWORD(v422) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v421, v423, v198, 8);
          }
          v199 = 0;
LABEL_213:
          if (v199 != v396)
            memcpy(&v421[8 * v199], (char *)v395 + 8 * v199, 8 * v396 - 8 * v199);
LABEL_215:
          LODWORD(v422) = v198;
          goto LABEL_216;
        }
        a4 = v366;
        v109 = *(_QWORD *)(v366 + 16);
        if (!v109 || (v170 = v387, !mlir::RewriterBase::Listener::classof(*(_QWORD *)(v366 + 16))))
        {
LABEL_98:
          v82 = 0;
          v83 = 0;
LABEL_99:
          if (__dst != v417)
            free(__dst);
          goto LABEL_58;
        }
        v111 = *(_QWORD *)(v170 + 24);
      }
      else
      {
        a4 = v366;
        v109 = *(_QWORD *)(v366 + 16);
        if (!v109)
          goto LABEL_98;
        v125 = v387;
        if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(v366 + 16)))
          goto LABEL_98;
        v111 = *(_QWORD *)(v125 + 24);
      }
    }
    else
    {
      a4 = v366;
      v109 = *(_QWORD *)(v366 + 16);
      if (!v109)
        goto LABEL_98;
      v110 = v387;
      if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(v366 + 16)))
        goto LABEL_98;
      v111 = *(_QWORD *)(v110 + 24);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(_QWORD *)v109 + 64))(v109, v111, v112, &v395);
    goto LABEL_98;
  }
  v77 = *(_QWORD *)(a4 + 16);
  if (!v77)
    goto LABEL_57;
  v78 = v387;
  if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
    goto LABEL_57;
  v79 = *(_QWORD *)(v78 + 24);
LABEL_56:
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(_QWORD *)v77 + 64))(v77, v79, v80, &v395);
LABEL_57:
  v82 = 0;
  v83 = 0;
LABEL_58:
  if (v418 != (unint64_t *)v420)
    free(v418);
  if (v421 != v423)
    free(v421);
  if (!v83)
    return 0;
  v395 = (void *)(v82 - 16);
  v84 = 1;
  mlir::ValueRange::ValueRange(v388, (uint64_t)&v395, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, v388[0], v388[1]);
  return v84;
}

uint64_t mlir::`anonymous namespace'::getExplicitConv3DPadding(uint64_t a1, uint64_t a2, int a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, unint64_t *a10, unint64_t *a11, unint64_t *a12, unint64_t *a13, unint64_t *a14, unint64_t a15, unint64_t a16, unint64_t a17)
{
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v33;
  uint64_t v34;
  _QWORD v35[11];

  v35[10] = *MEMORY[0x1E0C80C00];
  v17 = 1;
  switch(a3)
  {
    case 0:
      v33 = v35;
      v34 = 0xA00000000;
      mlir::getIntValues<unsigned long long>(a1, a2, (uint64_t)&v33, 1);
      v28 = v33;
      v29 = (char *)v33 + 8 * v34;
      if (v33 == v29 - 48)
      {
LABEL_14:
        *a9 = *((_QWORD *)v29 - 6);
        *a10 = *((_QWORD *)v29 - 5);
        *a11 = *((_QWORD *)v29 - 4);
        *a12 = *((_QWORD *)v29 - 3);
        *a13 = *((_QWORD *)v29 - 2);
        *a14 = *((_QWORD *)v29 - 1);
        v17 = 1;
        if (v28 == v35)
          return v17;
        goto LABEL_18;
      }
      v30 = 8 * v34 - 48;
      v31 = v33;
      while (!*v31)
      {
        ++v31;
        v30 -= 8;
        if (!v30)
          goto LABEL_14;
      }
      v17 = 0;
      if (v33 != v35)
LABEL_18:
        free(v28);
      return v17;
    case 1:
      *a9 = 0;
      *a10 = 0;
      *a11 = 0;
      *a12 = 0;
      *a13 = 0;
      *a14 = 0;
      return v17;
    case 2:
    case 4:
      v18 = a4[1];
      v19 = a15 % *a4;
      if (!v19)
        v19 = *a4;
      v20 = (a6 - v19) & ~((uint64_t)(a6 - v19) >> 63);
      v21 = a16 % v18;
      if (!(a16 % v18))
        v21 = a4[1];
      v22 = (a7 - v21) & ~((uint64_t)(a7 - v21) >> 63);
      v23 = a4[2];
      if (a17 % v23)
        v23 = a17 % v23;
      v24 = (a8 - v23) & ~((uint64_t)(a8 - v23) >> 63);
      *a9 = v20 >> 1;
      *a10 = v20 - (v20 >> 1);
      *a11 = v22 >> 1;
      *a12 = v22 - (v22 >> 1);
      *a13 = v24 >> 1;
      *a14 = v24 - (v24 >> 1);
      if (a3 == 4)
      {
        v25 = *a9;
        *a9 = *a10;
        *a10 = v25;
        v26 = *a11;
        *a11 = *a12;
        *a12 = v26;
        v27 = *a13;
        *a13 = *a14;
        *a14 = v27;
      }
      return v17;
    default:
      return v17;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,unsigned long long &,BOOL,decltype(nullptr),decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, char *a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  _QWORD v29[40];

  v29[38] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.deconvolution", (const unsigned __int8 *)0x12, Context);
  if (!v20)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"anec.deconvolution";
    v27[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v19);
  mlir::anec::Deconvolution::build(a1, (uint64_t)v29, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, 0, 0);
  v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only dataLayout NCDHW & NDHWC are supported for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only weights dataLayout OIDHW & DHWIO are supported for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv dilation must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "weight operand is not a constant!\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Dilation not supported for deconvolution");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Depth dim not supported for ANEC padding");
}

_QWORD *mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::~ConvertConv(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::~ConvertConv(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Conv3DOpGenericAdaptorBase::Conv3DOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Conv3DOpGenericAdaptorBase::Conv3DOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Conv3DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _QWORD *v33;
  _QWORD v34[4];
  __int16 v35;
  _OWORD v36[7];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 96);
  v9 = *(_QWORD *)(a3 + 104);
  v37 = v8;
  v38 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 96);
      v29 = *(_OWORD *)(a3 + 64);
      v36[5] = *(_OWORD *)(a3 + 80);
      v36[6] = v28;
      v30 = *(_OWORD *)(a3 + 16);
      v36[0] = *(_OWORD *)a3;
      v36[1] = v30;
      v31 = *(_OWORD *)(a3 + 32);
      v36[3] = *(_OWORD *)(a3 + 48);
      v36[4] = v29;
      v36[2] = v31;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v36, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v38 = v23;
      if (v37)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v35 = 259;
    v32[0] = v34;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DOp &>(mlir::mps::Conv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v38;
    if (v37 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v35 = 259;
  v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DOp &>(mlir::mps::Conv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::matchAndRewriteWithStaticShapes(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t ArgAttrsAttr;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  uint64_t *InputAttributeNames;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  int StorageType;
  int v51;
  int WeightsLayout;
  int v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t (*v57)(int, uint64_t);
  unsigned int *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t IntegerType;
  uint64_t v69;
  uint64_t *Strides;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t (*v87)(int, uint64_t);
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t *v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *Rewriter;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  int PaddingStyle;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t *v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  unsigned int *v137;
  uint64_t v138;
  uint64_t DefiningOp;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  unsigned int *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  unint64_t v153;
  unint64_t *v154;
  _QWORD *v155;
  unint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  int v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  _BOOL4 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t *v182;
  unint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t Transpose;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD v201[2];
  _QWORD *v202;
  unsigned int *v203;
  unint64_t v204[2];
  char *v205;
  void *v206;
  uint64_t v207;
  _QWORD v208[5];
  unint64_t v209[2];
  unint64_t v210[2];
  void *v211;
  uint64_t v212;
  _BYTE v213[48];
  void *v214[2];
  _BYTE v215[48];
  void *__dst;
  uint64_t v217;
  _BYTE v218[16];
  _QWORD *v219;
  uint64_t v220;
  _BYTE v221[40];
  char *v222;
  unint64_t v223;
  _BYTE v224[40];
  __int128 v225;
  uint64_t v226;

  v226 = *MEMORY[0x1E0C80C00];
  v203 = a2;
  v225 = *(_OWORD *)(a3 + 96);
  v6 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v225, 0);
  v7 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v225, 1);
  v202 = v7;
  v8 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v203);
  v9 = (uint64_t *)(v6[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    goto LABEL_10;
  v10 = *v9;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *(unsigned int *)(v10 + 16);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = *(_QWORD **)(v10 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v201[0] = v9;
  v201[1] = v19;
  if (*(_QWORD *)(v8 + 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v201);
  v21 = (_QWORD *)(v7[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v21)
    goto LABEL_22;
  v22 = *v21;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_22;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_22:
    v31 = 0;
  v199 = v21;
  v200 = v31;
  v198 = 1;
  v32 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v199);
  v33 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v199);
  v35 = (_BYTE *)(v33 + 8 * v34);
  v222 = v224;
  v223 = 0x500000000;
  v36 = v35 - v32;
  if ((unint64_t)(v35 - v32) < 0x29)
  {
    v37 = 0;
    if (v35 == v32)
      goto LABEL_28;
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, v224, v36 >> 3, 8);
  v37 = v223;
  if (v35 != v32)
  {
LABEL_27:
    memcpy(&v222[8 * v37], v32, v35 - v32);
    v37 = v223;
  }
LABEL_28:
  LODWORD(v223) = v37 + ((unint64_t)v36 >> 3);
  v219 = v221;
  v220 = 0x500000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v203);
  v39 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames)
    goto LABEL_37;
  v40 = *InputAttributeNames;
  v41 = mlir::TypeID::get<mlir::ElementsAttr>();
  v42 = *(unsigned int *)(v40 + 16);
  if (!(_DWORD)v42)
    goto LABEL_37;
  v43 = *(_QWORD **)(v40 + 8);
  v44 = &v43[2 * v42];
  do
  {
    v45 = v42 >> 1;
    v46 = &v43[2 * (v42 >> 1)];
    v48 = *v46;
    v47 = v46 + 2;
    v42 += ~(v42 >> 1);
    if (v48 < v41)
      v43 = v47;
    else
      v42 = v45;
  }
  while (v42);
  if (v43 != v44 && *v43 == v41)
    v49 = v43[1];
  else
LABEL_37:
    v49 = 0;
  mlir::getIntValues<unsigned long long>(v39, v49, (uint64_t)&v219, 1);
  StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v203);
  v51 = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v203);
  WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v203);
  v53 = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v203);
  if (StorageType != 7 && v51 != 8)
  {
    v54 = *(_QWORD *)(a4 + 16);
    if (!v54)
      goto LABEL_49;
    v55 = v203;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_49;
    v56 = *((_QWORD *)v55 + 3);
LABEL_48:
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(_QWORD *)v54 + 64))(v54, v56, v57, v214);
LABEL_49:
    v59 = 0;
    v60 = 0;
    goto LABEL_50;
  }
  if (WeightsLayout != 10 && v53 != 9)
  {
    v54 = *(_QWORD *)(a4 + 16);
    if (!v54)
      goto LABEL_49;
    v58 = v203;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_49;
    v56 = *((_QWORD *)v58 + 3);
    goto LABEL_48;
  }
  v63 = 8;
  v64 = 16;
  if (StorageType == 7)
    v63 = 16;
  v65 = 24;
  if (StorageType == 7)
  {
    v64 = 24;
    v65 = 32;
  }
  v174 = v53 == 9;
  if (v53 == 9)
    v66 = 3;
  else
    v66 = 1;
  v67 = 2;
  if (v53 == 9)
    v67 = 4;
  v176 = v67;
  v178 = v66;
  v183 = *(_QWORD *)(ArgAttrsAttr + v63);
  v181 = *(_QWORD *)(ArgAttrsAttr + v64);
  v180 = *(_QWORD *)(ArgAttrsAttr + v65);
  v214[0] = (void *)3;
  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  v184 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v214, 1, IntegerType, 0);
  v214[0] = (void *)6;
  v69 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  v173 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v214, 1, v69, 0);
  __dst = v218;
  v217 = 0x200000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v203);
  v71 = (uint64_t)Strides;
  if (!Strides)
    goto LABEL_76;
  v72 = *Strides;
  v73 = mlir::TypeID::get<mlir::ElementsAttr>();
  v74 = *(unsigned int *)(v72 + 16);
  if (!(_DWORD)v74)
    goto LABEL_76;
  v75 = *(_QWORD **)(v72 + 8);
  v76 = &v75[2 * v74];
  do
  {
    v77 = v74 >> 1;
    v78 = &v75[2 * (v74 >> 1)];
    v80 = *v78;
    v79 = v78 + 2;
    v74 += ~(v74 >> 1);
    if (v80 < v73)
      v75 = v79;
    else
      v74 = v77;
  }
  while (v74);
  if (v75 != v76 && *v75 == v73)
    v81 = v75[1];
  else
LABEL_76:
    v81 = 0;
  mlir::getIntValues<unsigned long long>(v71, v81, (uint64_t)&__dst, 1);
  v82 = __dst;
  if (*(_QWORD *)__dst != 1 || *((_QWORD *)__dst + 1) != 1)
  {
    v84 = *(_QWORD *)(a4 + 16);
    if (!v84)
      goto LABEL_85;
    v85 = v203;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_85;
    v86 = *((_QWORD *)v85 + 3);
    goto LABEL_84;
  }
  v83 = 8 * v217 - 16;
  if ((_DWORD)v217 != 2)
    memmove(__dst, (char *)__dst + 16, 8 * v217 - 16);
  LODWORD(v217) = (unint64_t)(&v82[v83] - (_BYTE *)__dst) >> 3;
  if (!v184)
    goto LABEL_101;
  v88 = *v184;
  v89 = mlir::TypeID::get<mlir::ShapedType>();
  v90 = *(unsigned int *)(v88 + 16);
  if (!(_DWORD)v90)
    goto LABEL_101;
  v91 = *(_QWORD **)(v88 + 8);
  v92 = &v91[2 * v90];
  do
  {
    v93 = v90 >> 1;
    v94 = &v91[2 * (v90 >> 1)];
    v96 = *v94;
    v95 = v94 + 2;
    v90 += ~(v90 >> 1);
    if (v96 < v89)
      v91 = v95;
    else
      v90 = v93;
  }
  while (v90);
  if (v91 != v92 && *v91 == v89)
    v97 = v91[1];
  else
LABEL_101:
    v97 = 0;
  v197 = mlir::DenseElementsAttr::getFromRawBuffer(v184, v97, __dst, 8 * v217, 8, 1, 0);
  v98 = v219;
  if (*v219 != 1 || v219[1] != 1)
  {
    v84 = *(_QWORD *)(a4 + 16);
    if (!v84)
      goto LABEL_85;
    v100 = v203;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_85;
    v86 = *((_QWORD *)v100 + 3);
    goto LABEL_84;
  }
  v99 = 8 * v220 - 16;
  if ((_DWORD)v220 != 2)
    memmove(v219, v219 + 2, 8 * v220 - 16);
  v175 = 2 * v174;
  LODWORD(v220) = (unint64_t)(&v98[v99] - (_BYTE *)v219) >> 3;
  if (!v184)
    goto LABEL_120;
  v101 = *v184;
  v102 = mlir::TypeID::get<mlir::ShapedType>();
  v103 = *(unsigned int *)(v101 + 16);
  if (!(_DWORD)v103)
    goto LABEL_120;
  v104 = *(_QWORD **)(v101 + 8);
  v105 = &v104[2 * v103];
  do
  {
    v106 = v103 >> 1;
    v107 = &v104[2 * (v103 >> 1)];
    v109 = *v107;
    v108 = v107 + 2;
    v103 += ~(v103 >> 1);
    if (v109 < v102)
      v104 = v108;
    else
      v103 = v106;
  }
  while (v103);
  if (v104 != v105 && *v104 == v102)
    v110 = v104[1];
  else
LABEL_120:
    v110 = 0;
  v196 = mlir::DenseElementsAttr::getFromRawBuffer(v184, v110, v219, 8 * v220, 8, 1, 0);
  v185 = (*(_QWORD *)&v222[8 * v175] - 1) * *v219 + 1;
  v179 = (*(_QWORD *)&v222[8 * v178] - 1) * v219[1] + 1;
  v177 = (*(_QWORD *)&v222[8 * v176] - 1) * v219[2] + 1;
  v194 = 0;
  v195 = 0;
  v192 = 0;
  v193 = 0;
  v190 = 0;
  v191 = 0;
  Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v203);
  v112 = (uint64_t)Rewriter;
  if (!Rewriter)
    goto LABEL_130;
  v113 = *Rewriter;
  v114 = mlir::TypeID::get<mlir::ElementsAttr>();
  v115 = *(unsigned int *)(v113 + 16);
  if (!(_DWORD)v115)
    goto LABEL_130;
  v116 = *(_QWORD **)(v113 + 8);
  v117 = &v116[2 * v115];
  do
  {
    v118 = v115 >> 1;
    v119 = &v116[2 * (v115 >> 1)];
    v121 = *v119;
    v120 = v119 + 2;
    v115 += ~(v115 >> 1);
    if (v121 < v114)
      v116 = v120;
    else
      v115 = v118;
  }
  while (v115);
  if (v116 != v117 && *v116 == v114)
    v122 = v116[1];
  else
LABEL_130:
    v122 = 0;
  PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v203);
  {
    v214[0] = v215;
    memset(v215, 0, sizeof(v215));
    v214[1] = (void *)0x600000006;
    v211 = v213;
    memset(v213, 0, sizeof(v213));
    v212 = 0x600000006;
    if (!v173)
      goto LABEL_141;
    v124 = *v173;
    v125 = mlir::TypeID::get<mlir::ShapedType>();
    v126 = *(unsigned int *)(v124 + 16);
    if (!(_DWORD)v126)
      goto LABEL_141;
    v127 = *(_QWORD **)(v124 + 8);
    v128 = &v127[2 * v126];
    do
    {
      v129 = v126 >> 1;
      v130 = &v127[2 * (v126 >> 1)];
      v132 = *v130;
      v131 = v130 + 2;
      v126 += ~(v126 >> 1);
      if (v132 < v125)
        v127 = v131;
      else
        v126 = v129;
    }
    while (v126);
    if (v127 != v128 && *v127 == v125)
      v133 = v127[1];
    else
LABEL_141:
      v133 = 0;
    v206 = v195;
    v207 = v194;
    v208[0] = v193;
    v208[1] = v192;
    v208[2] = v191;
    v208[3] = v190;
    v188 = 0;
    v189 = mlir::DenseElementsAttr::getFromRawBuffer(v173, v133, &v206, 48, 8, 1, 0);
    v134 = (uint64_t *)operator new(0x28uLL);
    v135 = v134;
    if (StorageType == 7)
    {
      *(_OWORD *)v134 = xmmword_181246600;
      *((_OWORD *)v134 + 1) = unk_181246610;
      v136 = 4;
    }
    else
    {
      *(_OWORD *)v134 = xmmword_1812465B0;
      *((_OWORD *)v134 + 1) = unk_1812465C0;
      v136 = 3;
    }
    v134[4] = v136;
    v138 = (uint64_t)v203;
    v206 = v6;
    mlir::ValueRange::ValueRange(v210, (uint64_t)&v206, 1uLL);
    v206 = v7;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v206);
    if (!DefiningOp
      || (v140 = DefiningOp,
          v141 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v140 + 48) + 32))(*(_QWORD *)(v140 + 48), v141) & 1) == 0))
    {
      v144 = *(_QWORD *)(a4 + 16);
      if (v144)
      {
        v145 = v203;
        if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      }
      v59 = 0;
      v60 = 0;
      goto LABEL_197;
    }
    v142 = (uint64_t *)operator new(0x28uLL);
    v143 = v142;
    if (WeightsLayout == 10)
    {
      v142[4] = 0;
      *(_OWORD *)v142 = xmmword_1812465D8;
      *((_OWORD *)v142 + 1) = unk_1812465E8;
    }
    else
    {
      *(_OWORD *)v142 = xmmword_181246628;
      *((_OWORD *)v142 + 1) = unk_181246638;
      v142[4] = 2;
    }
    v146 = (uint64_t)v203;
    v206 = v7;
    mlir::ValueRange::ValueRange(v209, (uint64_t)&v206, 1uLL);
    v182 = v143;
    v147 = (_QWORD *)(v202[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v147)
      goto LABEL_167;
    v148 = *v147;
    v149 = mlir::TypeID::get<mlir::ShapedType>();
    v150 = *(unsigned int *)(v148 + 16);
    if (!(_DWORD)v150)
      goto LABEL_167;
    v151 = *(_QWORD **)(v148 + 8);
    v152 = &v151[2 * v150];
    do
    {
      v153 = v150 >> 1;
      v154 = &v151[2 * (v150 >> 1)];
      v156 = *v154;
      v155 = v154 + 2;
      v150 += ~(v150 >> 1);
      if (v156 < v149)
        v151 = v155;
      else
        v150 = v153;
    }
    while (v150);
    if (v151 != v152 && *v151 == v149)
      v157 = v151[1];
    else
LABEL_167:
      v157 = 0;
    v199 = v147;
    v200 = v157;
    v158 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v199);
    v159 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v199);
    v161 = (_BYTE *)(v159 + 8 * v160);
    v206 = v208;
    v207 = 0x500000000;
    v162 = v161 - v158;
    if ((unint64_t)(v161 - v158) < 0x29)
    {
      v163 = 0;
      v164 = (char *)v208;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v208, v162 >> 3, 8);
      v163 = v207;
      v164 = (char *)v206;
    }
    if (v161 != v158)
    {
      memcpy(&v164[8 * v163], v158, v161 - v158);
      v163 = v207;
      v164 = (char *)v206;
    }
    v165 = v163 + ((unint64_t)v162 >> 3);
    LODWORD(v207) = v165;
    if (v164 != (char *)v208)
    {
      if (v222 != v224)
      {
        free(v222);
        v164 = (char *)v206;
        LODWORD(v165) = v207;
      }
      v222 = v164;
      v223 = __PAIR64__(HIDWORD(v207), v165);
      v206 = v208;
      HIDWORD(v207) = 0;
      goto LABEL_191;
    }
    v166 = v223;
    if (v223 >= v165)
    {
      if ((_DWORD)v165)
        memmove(v222, v208, 8 * v165);
      goto LABEL_190;
    }
    if (HIDWORD(v223) >= v165)
    {
      if ((_DWORD)v223)
      {
        memmove(v222, v208, 8 * v223);
        goto LABEL_188;
      }
    }
    else
    {
      LODWORD(v223) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, v224, v165, 8);
    }
    v166 = 0;
LABEL_188:
    if (v166 != v207)
      memcpy(&v222[8 * v166], (char *)v206 + 8 * v166, 8 * v207 - 8 * v166);
LABEL_190:
    LODWORD(v223) = v165;
LABEL_191:
    LODWORD(v207) = 0;
    if (v206 != v208)
      free(v206);
    v167 = *((_QWORD *)v203 + 3);
    LOBYTE(v205) = 0;
    v206 = 0;
    v186 = 0;
    v168 = (char *)mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,long long &,BOOL,decltype(nullptr),decltype(nullptr)>((uint64_t *)(a4 + 8), v167, &Transpose, (uint64_t *)&v202, &v197, &v196, &v189, &v188, &v198, (char *)&v205)- 16;
    v169 = (uint64_t *)operator new(0x28uLL);
    v170 = v169;
    if (StorageType == 7)
    {
      *(_OWORD *)v169 = xmmword_181246600;
      *((_OWORD *)v169 + 1) = unk_181246610;
      v171 = 4;
    }
    else
    {
      *(_OWORD *)v169 = xmmword_181246628;
      *((_OWORD *)v169 + 1) = unk_181246638;
      v171 = 2;
    }
    v169[4] = v171;
    v172 = (uint64_t)v203;
    v205 = v168;
    v60 = 1;
    mlir::ValueRange::ValueRange((unint64_t *)&v206, (uint64_t)&v205, 1uLL);
    v59 = mlir::Value::getDefiningOp((mlir::Value *)&v186);
    operator delete(v170);
    operator delete(v182);
LABEL_197:
    operator delete(v135);
    if (v211 != v213)
      free(v211);
    if (v214[0] != v215)
      free(v214[0]);
    goto LABEL_86;
  }
  v84 = *(_QWORD *)(a4 + 16);
  if (v84)
  {
    v137 = v203;
    if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
    {
      v86 = *((_QWORD *)v137 + 3);
LABEL_84:
      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(_QWORD *)v84 + 64))(v84, v86, v87, v214);
    }
  }
LABEL_85:
  v59 = 0;
  v60 = 0;
LABEL_86:
  if (__dst != v218)
    free(__dst);
LABEL_50:
  if (v219 != (_QWORD *)v221)
    free(v219);
  if (v222 != v224)
    free(v222);
  if (!v60)
    return 0;
  v214[0] = (void *)(v59 - 16);
  v61 = 1;
  mlir::ValueRange::ValueRange(v204, (uint64_t)v214, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, a2, v204[0], v204[1]);
  return v61;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only dataLayout NCDHW & NDHWC are supported for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only weights dataLayout OIDHW & DHWIO are supported for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv dilation must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "weight operand is not a constant!\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::~ConvertConv(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::~ConvertConv(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DepthwiseConv2DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DepthwiseConv2DOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[88];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::DepthwiseConv2DOpGenericAdaptorBase::DepthwiseConv2DOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DepthwiseConv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[88];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::DepthwiseConv2DOpGenericAdaptorBase::DepthwiseConv2DOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::DepthwiseConv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[2];
  _QWORD *v32;
  _QWORD v33[4];
  __int16 v34;
  _OWORD v35[6];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a3 + 88);
  v9 = *(_QWORD *)(a3 + 96);
  v37 = v8;
  v38 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v36 = *(_QWORD *)(a3 + 96);
      v28 = *(_OWORD *)(a3 + 80);
      v35[4] = *(_OWORD *)(a3 + 64);
      v35[5] = v28;
      v29 = *(_OWORD *)(a3 + 16);
      v35[0] = *(_OWORD *)a3;
      v35[1] = v29;
      v30 = *(_OWORD *)(a3 + 48);
      v35[2] = *(_OWORD *)(a3 + 32);
      v35[3] = v30;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v35, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v38 = v23;
      if (v37)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
        {
          goto LABEL_32;
        }
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v33[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v34 = 259;
    v31[0] = v33;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DepthwiseConv2DOp &>(mlir::mps::DepthwiseConv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v31);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v31[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v31[1] = v13;
    if (v31[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v31)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v31))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v31);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v38;
    if (v37 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v34 = 259;
  v32 = v33;
  v33[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DepthwiseConv2DOp &>(mlir::mps::DepthwiseConv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v32);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  uint64_t *InputAttributeNames;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(int, uint64_t);
  void *v56;
  uint64_t DefiningOp;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _BOOL4 v63;
  BOOL v64;
  int v65;
  _BOOL4 isSignedInteger;
  uint64_t IntegerType;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78;
  mlir::AffineMap *v79;
  uint64_t v80;
  uint64_t OperandRange;
  uint64_t Loc;
  _OWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  unsigned int v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *Strides;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(int, uint64_t);
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t *v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *Rewriter;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t *v164;
  _QWORD *v165;
  unint64_t v166;
  uint64_t v167;
  int PaddingStyle;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t *v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t *v197;
  _QWORD *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  unint64_t v209;
  unint64_t *v210;
  _QWORD *v211;
  unint64_t v212;
  uint64_t v213;
  mlir::MLIRContext *v214;
  _QWORD *v215;
  uint64_t *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  unint64_t v222;
  unint64_t *v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  unint64_t v235;
  unint64_t *v236;
  _QWORD *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t *v244;
  _QWORD *v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD v269[2];
  _QWORD *v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  unint64_t v274[2];
  uint64_t F16FloatAttr;
  __int128 v276;
  void *ArgOperands;
  uint64_t v278;
  _BYTE v279[40];
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  uint64_t v289;
  _OWORD v290[3];
  void *__p;
  uint64_t v292;
  _OWORD v293[3];
  _QWORD *v294;
  uint64_t v295;
  _BYTE v296[16];
  char *v297;
  uint64_t v298;
  _BYTE v299[32];
  char *v300;
  unint64_t v301;
  _BYTE v302[32];
  __int128 v303;
  uint64_t v304;

  v304 = *MEMORY[0x1E0C80C00];
  v273 = a2;
  v303 = *(_OWORD *)(a3 + 88);
  v272 = 1;
  v7 = *(_QWORD *)(a2 + 24);
  v271 = mlir::ValueRange::dereference_iterator(&v303, 0);
  v270 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v303, 1);
  v8 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v273);
  v9 = (uint64_t *)(*(_QWORD *)(v271 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    goto LABEL_10;
  v10 = *v9;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *(unsigned int *)(v10 + 16);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = *(_QWORD **)(v10 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v269[0] = v9;
  v269[1] = v19;
  if (*(_QWORD *)(v8 + 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v269);
  v22 = v21;
  v23 = (_QWORD *)(v270[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v23)
    goto LABEL_22;
  v24 = *v23;
  v25 = mlir::TypeID::get<mlir::ShapedType>();
  v26 = *(unsigned int *)(v24 + 16);
  if (!(_DWORD)v26)
    goto LABEL_22;
  v27 = *(_QWORD **)(v24 + 8);
  v28 = &v27[2 * v26];
  do
  {
    v29 = v26 >> 1;
    v30 = &v27[2 * (v26 >> 1)];
    v32 = *v30;
    v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25)
      v27 = v31;
    else
      v26 = v29;
  }
  while (v26);
  if (v27 != v28 && *v27 == v25)
    v33 = v27[1];
  else
LABEL_22:
    v33 = 0;
  v267 = v23;
  v268 = v33;
  v266 = 1;
  v34 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v267);
  v35 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v267);
  v37 = (_BYTE *)(v35 + 8 * v36);
  v300 = v302;
  v301 = 0x400000000;
  v38 = v37 - v34;
  if ((unint64_t)(v37 - v34) < 0x21)
  {
    v39 = 0;
    if (v37 == v34)
      goto LABEL_28;
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v300, v302, v38 >> 3, 8);
  v39 = v301;
  if (v37 != v34)
  {
LABEL_27:
    memcpy(&v300[8 * v39], v34, v37 - v34);
    v39 = v301;
  }
LABEL_28:
  LODWORD(v301) = v39 + ((unint64_t)v38 >> 3);
  v297 = v299;
  v298 = 0x400000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v273);
  v41 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames)
    goto LABEL_37;
  v42 = *InputAttributeNames;
  v43 = mlir::TypeID::get<mlir::ElementsAttr>();
  v44 = *(unsigned int *)(v42 + 16);
  if (!(_DWORD)v44)
    goto LABEL_37;
  v45 = *(_QWORD **)(v42 + 8);
  v46 = &v45[2 * v44];
  do
  {
    v47 = v44 >> 1;
    v48 = &v45[2 * (v44 >> 1)];
    v50 = *v48;
    v49 = v48 + 2;
    v44 += ~(v44 >> 1);
    if (v50 < v43)
      v45 = v49;
    else
      v44 = v47;
  }
  while (v44);
  if (v45 != v46 && *v45 == v43)
    v51 = v45[1];
  else
LABEL_37:
    v51 = 0;
  mlir::getIntValues<unsigned long long>(v41, v51, (uint64_t)&v297, 1);
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v273))
  {
    v52 = *(_QWORD *)(a4 + 16);
    if (!v52)
      goto LABEL_102;
    v53 = v273;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_102;
    v54 = *(_QWORD *)(v53 + 24);
LABEL_101:
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), __int128 *))(*(_QWORD *)v52 + 64))(v52, v54, v55, &v280);
LABEL_102:
    v104 = 0;
    v105 = 0;
    goto LABEL_103;
  }
  if (mlir::mps::StencilOp::getPaddingStyle((mlir::mps::StencilOp *)&v273) != 2
    && mlir::mps::StencilOp::getPaddingStyle((mlir::mps::StencilOp *)&v273) != 3)
  {
    v52 = *(_QWORD *)(a4 + 16);
    if (!v52)
      goto LABEL_102;
    v103 = v273;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_102;
    v54 = *(_QWORD *)(v103 + 24);
    goto LABEL_101;
  }
  v265 = 0uLL;
  v263 = 0;
  v264 = 0;
  v261 = 0;
  v262 = 0;
  v259 = 0;
  v260 = 0;
  v56 = *(void **)(*(_QWORD *)(v273 + 72) + 56);
  *(_QWORD *)&v280 = &v265;
  *((_QWORD *)&v280 + 1) = &v263;
  *(_QWORD *)&v281 = &v261;
  *((_QWORD *)&v281 + 1) = &v259;
  ArgOperands = v56;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!DefiningOp
    || (v288 = (void *)DefiningOp,
        *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
    || (*(_BYTE *)(DefiningOp + 46) & 0x80) == 0
    || *(_DWORD *)(DefiningOp + 68) != 4
    || (LOBYTE(v294) = 1,
        __p = &v294,
        v292 = (uint64_t)&v288,
        mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&v280, (uint64_t)&__p), !(_BYTE)v294))
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v273 + 72) + 56);
    v292 = (uint64_t)&v263;
    *(_QWORD *)&v293[0] = &v261;
    *((_QWORD *)&v293[0] + 1) = &v259;
    *(_QWORD *)&v258 = v58;
    v59 = mlir::Value::getDefiningOp((mlir::Value *)&v258);
    if (!v59)
      goto LABEL_57;
    v294 = (_QWORD *)v59;
    if (*(_UNKNOWN **)(*(_QWORD *)(v59 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
      goto LABEL_57;
    if ((*(_BYTE *)(v59 + 46) & 0x80) == 0)
      goto LABEL_57;
    if (*(_DWORD *)(v59 + 68) != 4)
      goto LABEL_57;
    LOBYTE(v276) = 1;
    v288 = &v276;
    v289 = (uint64_t)&v294;
    mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&__p, (uint64_t)&v288);
    if (!(_BYTE)v276)
      goto LABEL_57;
  }
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v261);
  v278 = v60;
  v61 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  if (mlir::ShapedType::getNumElements(v61, v62) == 1 && mlir::ElementsAttr::getNumElements(v259, v260) == 1)
    v63 = (mlir::getSingleFloatValue<float>(v259, v260) & 0x7FFFFFFF) == 0;
  else
LABEL_57:
    v63 = 0;
  if (*(_BYTE *)(a1 + 104))
    v64 = 1;
  else
    v64 = (_QWORD)v265 == 0;
  v65 = !v64;
  v247 = v65;
  if (v64)
  {
    v245 = 0;
    v246 = 0;
  }
  else
  {
    v246 = mlir::convertElementsAttr(v263, v264, 1);
    *(_QWORD *)&v280 = mlir::getElementTypeOrSelf(v261);
    isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v280);
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 8u, isSignedInteger);
    __p = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v261);
    v292 = v68;
    LOBYTE(v280) = 0;
    LOBYTE(v281) = 0;
    v69 = mlir::ShapedType::cloneWith((uint64_t *)&__p, &v280, IntegerType);
    v245 = mlir::rewriteElementsAttr((uint64_t)v261, v262, v69, v70, 1);
  }
  v258 = 0uLL;
  __p = v270;
  v71 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!v71)
    goto LABEL_75;
  v72 = v71;
  v73 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v72 + 48) + 32))(*(_QWORD *)(v72 + 48), v73))
    goto LABEL_75;
  *(_QWORD *)&v280 = &v281;
  *((_QWORD *)&v280 + 1) = 0x100000000;
  mlir::Operation::fold(v72, 0, 0, (uint64_t)&v280);
  v74 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v280 & 0xFFFFFFFFFFFFFFF8));
  v76 = v74;
  if (v74)
  {
    *(_QWORD *)&v258 = v74;
    *((_QWORD *)&v258 + 1) = v75;
  }
  if ((__int128 *)v280 != &v281)
    free((void *)v280);
  if (!v76)
  {
LABEL_75:
    if (!v63 || mlir::mps::StencilOp::getPaddingStyle((mlir::mps::StencilOp *)&v273) == 3)
    {
      v52 = *(_QWORD *)(a4 + 16);
      if (!v52)
        goto LABEL_102;
      v77 = v273;
      if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
        goto LABEL_102;
      v54 = *(_QWORD *)(v77 + 24);
      goto LABEL_101;
    }
  }
  if (v247)
  {
    v258 = v265;
    v78 = v300;
    v79 = (mlir::AffineMap *)v301;
    *(_QWORD *)&v280 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v258);
    *((_QWORD *)&v280 + 1) = v80;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v280);
    __p = (void *)mlir::MemRefType::get(v78, v79, OperandRange, 0, 0, 0);
    v270 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 8), v7, (uint64_t *)&__p, (_QWORD **)&v258)- 16);
  }
  v243 = v7;
  if (mlir::mps::StencilOp::getPaddingStyle((mlir::mps::StencilOp *)&v273) == 3)
  {
    Loc = mlir::Value::getLoc((mlir::Value *)&v270);
    v83 = operator new(0x40uLL);
    *(_QWORD *)&v293[0] = v83 + 4;
    *v83 = xmmword_1812464B0;
    v83[1] = xmmword_1812464C0;
    v83[2] = xmmword_1812464D0;
    v83[3] = xmmword_1812464E0;
    __p = v83;
    v292 = (uint64_t)(v83 + 4);
    *(_QWORD *)&v280 = &v281;
    *((_QWORD *)&v280 + 1) = 0x100000000;
    mlir::OpBuilder::createOrFold<mlir::anec::Transpose,mlir::Value &,std::vector<std::pair<unsigned long long,unsigned long long>>>((mlir::Builder *)(a4 + 8), (uint64_t)&v280, Loc, (uint64_t *)&v270, (uint64_t)&__p);
    v84 = *(_QWORD **)v280;
    if ((__int128 *)v280 != &v281)
      free((void *)v280);
    v270 = v84;
    if (__p)
    {
      v292 = (uint64_t)__p;
      operator delete(__p);
      v84 = v270;
    }
    v85 = (_QWORD *)(v84[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v85)
      goto LABEL_95;
    v86 = *v85;
    v87 = mlir::TypeID::get<mlir::ShapedType>();
    v88 = *(unsigned int *)(v86 + 16);
    if (!(_DWORD)v88)
      goto LABEL_95;
    v89 = *(_QWORD **)(v86 + 8);
    v90 = &v89[2 * v88];
    do
    {
      v91 = v88 >> 1;
      v92 = &v89[2 * (v88 >> 1)];
      v94 = *v92;
      v93 = v92 + 2;
      v88 += ~(v88 >> 1);
      if (v94 < v87)
        v89 = v93;
      else
        v88 = v91;
    }
    while (v88);
    if (v89 != v90 && *v89 == v87)
      v95 = v89[1];
    else
LABEL_95:
      v95 = 0;
    v267 = v85;
    v268 = v95;
    v96 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v267);
    v97 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v267);
    v99 = (_BYTE *)(v97 + 8 * v98);
    *(_QWORD *)&v280 = &v281;
    *((_QWORD *)&v280 + 1) = 0x400000000;
    v100 = v99 - v96;
    if ((unint64_t)(v99 - v96) < 0x21)
    {
      v101 = 0;
      v102 = (char *)&v281;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v280, &v281, v100 >> 3, 8);
      v101 = DWORD2(v280);
      v102 = (char *)v280;
    }
    if (v99 != v96)
    {
      memcpy(&v102[8 * v101], v96, v99 - v96);
      v101 = DWORD2(v280);
      v102 = (char *)v280;
    }
    v108 = v101 + ((unint64_t)v100 >> 3);
    DWORD2(v280) = v101 + ((unint64_t)v100 >> 3);
    if (v102 != (char *)&v281)
    {
      if (v300 != v302)
      {
        free(v300);
        v102 = (char *)v280;
        LODWORD(v108) = DWORD2(v280);
      }
      v300 = v102;
      v301 = __PAIR64__(HIDWORD(v280), v108);
      *(_QWORD *)&v280 = &v281;
      HIDWORD(v280) = 0;
      goto LABEL_132;
    }
    v109 = v301;
    if (v301 >= v108)
    {
      if ((_DWORD)v108)
        memmove(v300, &v281, 8 * v108);
      goto LABEL_131;
    }
    if (HIDWORD(v301) >= v108)
    {
      if ((_DWORD)v301)
      {
        memmove(v300, &v281, 8 * v301);
        goto LABEL_129;
      }
    }
    else
    {
      LODWORD(v301) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v300, v302, v108, 8);
    }
    v109 = 0;
LABEL_129:
    if (v109 != DWORD2(v280))
      memcpy(&v300[8 * v109], (const void *)(v280 + 8 * v109), 8 * DWORD2(v280) - 8 * v109);
LABEL_131:
    LODWORD(v301) = v108;
LABEL_132:
    DWORD2(v280) = 0;
    if ((__int128 *)v280 != &v281)
      free((void *)v280);
  }
  *(_QWORD *)&v280 = 3;
  v110 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  v111 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v280, 1, v110, 0);
  *(_QWORD *)&v280 = 6;
  v244 = (uint64_t *)(a4 + 8);
  v112 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  v242 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v280, 1, v112, 0);
  v294 = v296;
  v295 = 0x200000000;
  Strides = (uint64_t *)mlir::mps::ColToImOp::getStrides((mlir::mps::ColToImOp *)&v273);
  v114 = (uint64_t)Strides;
  if (!Strides)
    goto LABEL_143;
  v115 = *Strides;
  v116 = mlir::TypeID::get<mlir::ElementsAttr>();
  v117 = *(unsigned int *)(v115 + 16);
  if (!(_DWORD)v117)
    goto LABEL_143;
  v118 = *(_QWORD **)(v115 + 8);
  v119 = &v118[2 * v117];
  do
  {
    v120 = v117 >> 1;
    v121 = &v118[2 * (v117 >> 1)];
    v123 = *v121;
    v122 = v121 + 2;
    v117 += ~(v117 >> 1);
    if (v123 < v116)
      v118 = v122;
    else
      v117 = v120;
  }
  while (v117);
  if (v118 != v119 && *v118 == v116)
    v124 = v118[1];
  else
LABEL_143:
    v124 = 0;
  mlir::getIntValues<unsigned long long>(v114, v124, (uint64_t)&v294, 1);
  v125 = v294;
  if (*v294 != 1 || v294[1] != 1)
  {
    v127 = *(_QWORD *)(a4 + 16);
    if (!v127)
      goto LABEL_152;
    v128 = v273;
    if (!mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      goto LABEL_152;
    v129 = *(_QWORD *)(v128 + 24);
    goto LABEL_151;
  }
  v126 = 8 * v295 - 16;
  if ((_DWORD)v295 != 2)
    memmove(v294, v294 + 2, 8 * v295 - 16);
  LODWORD(v295) = (unint64_t)(&v125[v126] - (_BYTE *)v294) >> 3;
  *(_QWORD *)&v280 = 1;
  llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v294, (uint64_t)v294, (uint64_t *)&v280);
  if (v111)
  {
    v131 = *v111;
    v132 = mlir::TypeID::get<mlir::ShapedType>();
    v133 = *(unsigned int *)(v131 + 16);
    if (!(_DWORD)v133)
      goto LABEL_165;
    v134 = *(_QWORD **)(v131 + 8);
    v135 = &v134[2 * v133];
    do
    {
      v136 = v133 >> 1;
      v137 = &v134[2 * (v133 >> 1)];
      v139 = *v137;
      v138 = v137 + 2;
      v133 += ~(v133 >> 1);
      if (v139 < v132)
        v134 = v138;
      else
        v133 = v136;
    }
    while (v133);
    if (v134 != v135 && *v134 == v132)
      v140 = v134[1];
    else
LABEL_165:
      v140 = 0;
  }
  else
  {
    v140 = 0;
  }
  v257 = mlir::DenseElementsAttr::getFromRawBuffer(v111, v140, v294, 8 * v295, 8, 1, 0);
  v141 = v297;
  if (*(_QWORD *)v297 == 1 && *((_QWORD *)v297 + 1) == 1)
  {
    v142 = 8 * v298 - 16;
    if ((_DWORD)v298 != 2)
      memmove(v297, v297 + 16, 8 * v298 - 16);
    LODWORD(v298) = (unint64_t)(&v141[v142] - v297) >> 3;
    *(_QWORD *)&v280 = 1;
    llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v297, (uint64_t)v297, (uint64_t *)&v280);
    if (!v111)
      goto LABEL_186;
    v144 = *v111;
    v145 = mlir::TypeID::get<mlir::ShapedType>();
    v146 = *(unsigned int *)(v144 + 16);
    if (!(_DWORD)v146)
      goto LABEL_186;
    v147 = *(_QWORD **)(v144 + 8);
    v148 = &v147[2 * v146];
    do
    {
      v149 = v146 >> 1;
      v150 = &v147[2 * (v146 >> 1)];
      v152 = *v150;
      v151 = v150 + 2;
      v146 += ~(v146 >> 1);
      if (v152 < v145)
        v147 = v151;
      else
        v146 = v149;
    }
    while (v146);
    if (v147 != v148 && *v147 == v145)
      v153 = v147[1];
    else
LABEL_186:
      v153 = 0;
    v255 = 0;
    v256 = mlir::DenseElementsAttr::getFromRawBuffer(v111, v153, v297, 8 * v298, 8, 1, 0);
    v154 = (*((_QWORD *)v300 + 2) - 1) * *((_QWORD *)v297 + 1) + 1;
    v155 = (*((_QWORD *)v300 + 3) - 1) * *((_QWORD *)v297 + 2) + 1;
    v253 = 0;
    v254 = 0;
    v252 = 0;
    Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v273);
    v157 = (uint64_t)Rewriter;
    if (!Rewriter)
      goto LABEL_196;
    v158 = *Rewriter;
    v159 = mlir::TypeID::get<mlir::ElementsAttr>();
    v160 = *(unsigned int *)(v158 + 16);
    if (!(_DWORD)v160)
      goto LABEL_196;
    v161 = *(_QWORD **)(v158 + 8);
    v162 = &v161[2 * v160];
    do
    {
      v163 = v160 >> 1;
      v164 = &v161[2 * (v160 >> 1)];
      v166 = *v164;
      v165 = v164 + 2;
      v160 += ~(v160 >> 1);
      if (v166 < v159)
        v161 = v165;
      else
        v160 = v163;
    }
    while (v160);
    if (v161 != v162 && *v161 == v159)
      v167 = v161[1];
    else
LABEL_196:
      v167 = 0;
    PaddingStyle = mlir::mps::DepthwiseConv2DDataGradientOp::getPaddingStyle((mlir::mps::DepthwiseConv2DDataGradientOp *)&v273);
    {
      __p = v293;
      memset(v293, 0, sizeof(v293));
      v292 = 0x600000006;
      v288 = v290;
      memset(v290, 0, sizeof(v290));
      v289 = 0x600000006;
      if (v242)
      {
        v169 = *v242;
        v170 = mlir::TypeID::get<mlir::ShapedType>();
        v171 = *(unsigned int *)(v169 + 16);
        v172 = v243;
        if (!(_DWORD)v171)
          goto LABEL_207;
        v173 = *(_QWORD **)(v169 + 8);
        v174 = &v173[2 * v171];
        do
        {
          v175 = v171 >> 1;
          v176 = &v173[2 * (v171 >> 1)];
          v178 = *v176;
          v177 = v176 + 2;
          v171 += ~(v171 >> 1);
          if (v178 < v170)
            v173 = v177;
          else
            v171 = v175;
        }
        while (v171);
        if (v173 != v174 && *v173 == v170)
          v179 = v173[1];
        else
LABEL_207:
          v179 = 0;
      }
      else
      {
        v179 = 0;
        v172 = v243;
      }
      v280 = 0uLL;
      *(_QWORD *)&v281 = v255;
      *((_QWORD *)&v281 + 1) = v254;
      *(_QWORD *)&v282 = v253;
      *((_QWORD *)&v282 + 1) = v252;
      v250 = 0;
      v251 = mlir::DenseElementsAttr::getFromRawBuffer(v242, v179, &v280, 48, 8, 1, 0);
      v182 = *(_QWORD *)(v273 + 24);
      if (v247)
      {
        v184 = v245;
        v183 = v246;
      }
      else
      {
        v183 = 0;
        v184 = 0;
      }
      *(_QWORD *)&v280 = v183;
      ArgOperands = v184;
      v249 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,unsigned long long &,BOOL const&,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(v244, v182, &v271, (uint64_t *)&v270, &v257, &v256, &v251, &v250, &v266, &v272, (uint64_t *)&v280, (uint64_t *)&ArgOperands)- 16;
      if ((_DWORD)v289)
      {
        v185 = v288;
        v186 = 8 * v289;
        v187 = (uint64_t *)v288;
        while (*v187 < 1)
        {
          ++v187;
          v186 -= 8;
          if (!v186)
            goto LABEL_247;
        }
        *(_QWORD *)&v280 = &v281;
        v281 = 0u;
        v282 = 0u;
        v283 = 0u;
        *((_QWORD *)&v280 + 1) = 0xA0000000ALL;
        ArgOperands = v279;
        memset_pattern16(v279, &unk_181246510, 0x28uLL);
        v278 = 0x500000005;
        *(int64x2_t *)&v279[24] = vdupq_n_s64(6uLL);
        v284 = v185[2];
        v285 = v185[3];
        v286 = v185[4];
        v287 = v185[5];
        v276 = xmmword_181233130;
        v188 = mlir::Builder::getIntegerType((mlir::Builder *)v244, 0x40u, 0);
        v189 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v276, 2, v188, 0);
        v190 = v189;
        if (!v189)
          goto LABEL_231;
        v191 = *v189;
        v192 = mlir::TypeID::get<mlir::ShapedType>();
        v193 = *(unsigned int *)(v191 + 16);
        if (!(_DWORD)v193)
          goto LABEL_231;
        v194 = *(_QWORD **)(v191 + 8);
        v195 = &v194[2 * v193];
        do
        {
          v196 = v193 >> 1;
          v197 = &v194[2 * (v193 >> 1)];
          v199 = *v197;
          v198 = v197 + 2;
          v193 += ~(v193 >> 1);
          if (v199 < v192)
            v194 = v198;
          else
            v193 = v196;
        }
        while (v193);
        if (v194 != v195 && *v194 == v192)
          v200 = v194[1];
        else
LABEL_231:
          v200 = 0;
        v248 = mlir::DenseElementsAttr::getFromRawBuffer(v190, v200, v280, 8 * DWORD2(v280), 8, 1, 0);
        F16FloatAttr = 5;
        v201 = mlir::Builder::getIntegerType((mlir::Builder *)v244, 0x40u, 0);
        v202 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&F16FloatAttr, 1, v201, 0);
        v203 = v202;
        if (v202
          && (v204 = *v202,
              v205 = mlir::TypeID::get<mlir::ShapedType>(),
              v206 = *(unsigned int *)(v204 + 16),
              (_DWORD)v206))
        {
          v207 = *(_QWORD **)(v204 + 8);
          v208 = &v207[2 * v206];
          do
          {
            v209 = v206 >> 1;
            v210 = &v207[2 * (v206 >> 1)];
            v212 = *v210;
            v211 = v210 + 2;
            v206 += ~(v206 >> 1);
            if (v212 < v205)
              v207 = v211;
            else
              v206 = v209;
          }
          while (v206);
          v172 = v243;
          if (v207 != v208 && *v207 == v205)
            v213 = v207[1];
          else
            v213 = 0;
        }
        else
        {
          v213 = 0;
          v172 = v243;
        }
        *(_QWORD *)&v276 = mlir::DenseElementsAttr::getFromRawBuffer(v203, v213, ArgOperands, 8 * v278, 8, 1, 0);
        F16FloatAttr = (uint64_t)mlir::Builder::getF16FloatAttr((mlir::Float16Type **)v244, 0.0, v214);
        v249 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Padding,mlir::Value const&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &>((mlir::UnknownLoc **)v244, v172, &v249, (uint64_t *)&v276, &v248, &F16FloatAttr)- 16;
        if (ArgOperands != v279)
          free(ArgOperands);
        if ((__int128 *)v280 != &v281)
          free((void *)v280);
      }
LABEL_247:
      v215 = __p;
      if (*((_QWORD *)__p + 2) || *((_QWORD *)__p + 3))
      {
        v216 = (uint64_t *)(*(_QWORD *)(v249 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v216)
          goto LABEL_258;
        v217 = *v216;
        v218 = mlir::TypeID::get<mlir::ShapedType>();
        v219 = *(unsigned int *)(v217 + 16);
        if (!(_DWORD)v219)
          goto LABEL_258;
        v220 = *(_QWORD **)(v217 + 8);
        v221 = &v220[2 * v219];
        do
        {
          v222 = v219 >> 1;
          v223 = &v220[2 * (v219 >> 1)];
          v225 = *v223;
          v224 = v223 + 2;
          v219 += ~(v219 >> 1);
          if (v225 < v218)
            v220 = v224;
          else
            v219 = v222;
        }
        while (v219);
        if (v220 != v221 && *v220 == v218)
          v226 = v220[1];
        else
LABEL_258:
          v226 = 0;
        *(_QWORD *)&v280 = v216;
        *((_QWORD *)&v280 + 1) = v226;
        v227 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v280) + 16);
        LODWORD(v276) = 2;
        v228 = *((_QWORD *)__p + 3);
        *(_QWORD *)&v280 = *((_QWORD *)__p + 2);
        ArgOperands = (void *)(v227 - (v280 + v228));
        v249 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v244, v172, &v249, (int *)&v276, (uint64_t *)&v280, (uint64_t *)&ArgOperands)- 16;
        v215 = __p;
      }
      if (v215[4] || v215[5])
      {
        v229 = (uint64_t *)(*(_QWORD *)(v249 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v229)
          goto LABEL_271;
        v230 = *v229;
        v231 = mlir::TypeID::get<mlir::ShapedType>();
        v232 = *(unsigned int *)(v230 + 16);
        if (!(_DWORD)v232)
          goto LABEL_271;
        v233 = *(_QWORD **)(v230 + 8);
        v234 = &v233[2 * v232];
        do
        {
          v235 = v232 >> 1;
          v236 = &v233[2 * (v232 >> 1)];
          v238 = *v236;
          v237 = v236 + 2;
          v232 += ~(v232 >> 1);
          if (v238 < v231)
            v233 = v237;
          else
            v232 = v235;
        }
        while (v232);
        if (v233 != v234 && *v233 == v231)
          v239 = v233[1];
        else
LABEL_271:
          v239 = 0;
        *(_QWORD *)&v280 = v229;
        *((_QWORD *)&v280 + 1) = v239;
        v240 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v280) + 24);
        LODWORD(v276) = 3;
        v241 = *((_QWORD *)__p + 5);
        *(_QWORD *)&v280 = *((_QWORD *)__p + 4);
        ArgOperands = (void *)(v240 - (v280 + v241));
        v249 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v244, v172, &v249, (int *)&v276, (uint64_t *)&v280, (uint64_t *)&ArgOperands)- 16;
      }
      v104 = mlir::Value::getDefiningOp((mlir::Value *)&v249);
      if (v288 != v290)
        free(v288);
      if (__p != v293)
        free(__p);
      v105 = 1;
    }
    else
    {
      v180 = *(_QWORD *)(a4 + 16);
      if (v180)
      {
        v181 = v273;
        if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
      }
      v104 = 0;
      v105 = 0;
    }
    goto LABEL_153;
  }
  v127 = *(_QWORD *)(a4 + 16);
  if (v127)
  {
    v143 = v273;
    if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
    {
      v129 = *(_QWORD *)(v143 + 24);
LABEL_151:
      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), __int128 *))(*(_QWORD *)v127 + 64))(v127, v129, v130, &v280);
    }
  }
LABEL_152:
  v104 = 0;
  v105 = 0;
LABEL_153:
  if (v294 != (_QWORD *)v296)
    free(v294);
LABEL_103:
  if (v297 != v299)
    free(v297);
  if (v300 != v302)
    free(v300);
  if (!v105)
    return 0;
  *(_QWORD *)&v280 = v104 - 16;
  v106 = 1;
  mlir::ValueRange::ValueRange(v274, (uint64_t)&v280, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, v274[0], v274[1]);
  return v106;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only dataLayout NCHW is supported for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported weightsLayout for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "weight operand is not a constant!\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv dilation must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv2D\n");
}

mlir::GenericProgramPoint *mlir::ANECPlacementAnalysis::run(mlir::ANECPlacementAnalysis *this, mlir::Operation *a2)
{
  mlir::ANECPlacementAnalysis *v3;

  v3 = this;
  return mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECPlacementAnalysis::run(mlir::Operation *)::$_0>, (uint64_t)&v3, 1);
}

void mlir::ANECPlacementAnalysis::_visitOperation(mlir::ANECPlacementAnalysis *this, mlir::Operation *a2)
{
  void *v4;
  BOOL v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Values;
  unsigned __int16 *v10;
  int v11;
  int v12;
  uint64_t v14;
  void *v15;
  BOOL v16;
  _QWORD *AttrData;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void *v22;
  size_t v23;
  int HashValue;
  _QWORD *v25;
  uint64_t v26;
  int i;
  int v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  _DWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;

  if (a2)
  {
    v4 = *(void **)(*((_QWORD *)a2 + 6) + 16);
    v5 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id;
    v6 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id ? a2 : 0;
    *(_QWORD *)&v44 = v6;
    if (v5 && mlir::placement::RegionCall::getRegionType((mlir::Operation **)&v44) == 1)
    {
      v7 = *((unsigned int *)this + 2);
      if (v7 >= *((_DWORD *)this + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (char *)this + 16, v7 + 1, 8);
        LODWORD(v7) = *((_DWORD *)this + 2);
      }
      *(_QWORD *)(*(_QWORD *)this + 8 * v7) = a2;
      ++*((_DWORD *)this + 2);
    }
  }
  v8 = *((_QWORD *)a2 + 6);
  if (*(_UNKNOWN **)(v8 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    *(_QWORD *)&v44 = *(_QWORD *)(v8 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v44);
  }
  else
  {
    Values = *(_QWORD *)(v8 + 24);
  }
  if (*(_QWORD *)(Values + 16) == 3)
  {
    v10 = *(unsigned __int16 **)(Values + 8);
    v11 = *v10;
    v12 = *((unsigned __int8 *)v10 + 2);
    if (v11 == 28781 && v12 == 115)
    {
      v14 = *((_QWORD *)a2 + 6);
      v15 = *(void **)(v14 + 16);
      v16 = v15 == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id
         || v15 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id;
      if (!v16 && v15 != &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id)
      {
        *(_QWORD *)&v44 = *(_QWORD *)(v14 + 8);
        AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v44);
        v20 = *((_QWORD *)this + 8);
        *(_QWORD *)&v44 = AttrData;
        *((_QWORD *)&v44 + 1) = v19;
        v21 = *((_DWORD *)this + 20);
        if (v21)
        {
          v22 = AttrData;
          v23 = v19;
          HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(AttrData, v19);
          v25 = 0;
          v26 = (v21 - 1);
          for (i = 1; ; ++i)
          {
            v28 = HashValue & v26;
            v29 = v20 + 80 * (HashValue & v26);
            v30 = *(const void **)v29;
            if (*(_QWORD *)v29 == -2)
            {
              if (v22 == (const void *)-2)
                goto LABEL_45;
            }
            else if (v30 == (const void *)-1)
            {
              if (v22 == (const void *)-1)
                goto LABEL_45;
            }
            else if (v23 == *(_QWORD *)(v29 + 8))
            {
              if (!v23
                || (v42 = v25,
                    v43 = v20,
                    v31 = v26,
                    v32 = memcmp(v22, *(const void **)v29, v23),
                    v26 = v31,
                    v25 = v42,
                    v20 = v43,
                    !v32))
              {
LABEL_45:
                v35 = (_DWORD *)(v29 + 24);
                v34 = *(unsigned int *)(v29 + 24);
                v36 = (_QWORD *)(v29 + 16);
                if (v34 >= *(_DWORD *)(v29 + 28))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v29 + 16, (void *)(v29 + 32), v34 + 1, 8);
                  LODWORD(v34) = *(_DWORD *)(v29 + 24);
                }
                goto LABEL_49;
              }
            }
            if (v30 == (const void *)-1)
            {
              if (v25)
                v37 = v25;
              else
                v37 = (_QWORD *)v29;
              goto LABEL_48;
            }
            if (v25)
              v33 = 0;
            else
              v33 = v30 == (const void *)-2;
            if (v33)
              v25 = (_QWORD *)v29;
            HashValue = i + v28;
          }
        }
        v37 = 0;
LABEL_48:
        v38 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)this + 64, (uint64_t)&v44, (uint64_t)&v44, v37);
        LODWORD(v34) = 0;
        *(_OWORD *)v38 = v44;
        v38[2] = v38 + 4;
        v36 = v38 + 2;
        v38[3] = 0x600000000;
        v35 = v38 + 3;
LABEL_49:
        *(_QWORD *)(*v36 + 8 * v34) = a2;
        ++*v35;
        ++*((_QWORD *)this + 11);
        v39 = *(void **)(*((_QWORD *)a2 + 6) + 16);
        if (v39 == &mlir::detail::TypeIDResolver<mlir::mps::PermuteOp,void>::id
          || v39 == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
          || v39 == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
        {
          ++*((_QWORD *)this + 12);
        }
      }
    }
  }
}

double mlir::ANECPlacementAnalysis::printReport(mlir::ANECPlacementAnalysis *this)
{
  unint64_t v2;
  uint64_t v3;
  llvm::raw_ostream *v4;
  void *v5;
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  const void *v22;
  unint64_t v23;
  _WORD *v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  uint64_t v27;
  mlir::Operation **v28;
  uint64_t v29;
  mlir::Operation *v30;
  llvm::raw_ostream *v31;
  const mlir::OpPrintingFlags *v32;
  _BYTE *v33;
  _BYTE *v34;
  int v35;
  llvm::raw_ostream *v36;
  _OWORD *v37;
  const char *v38;
  llvm::raw_ostream *v39;
  void *v40;
  const char *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  mlir::Operation **v45;
  uint64_t v46;
  mlir::Operation *v47;
  llvm::raw_ostream *v48;
  const mlir::OpPrintingFlags *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  void *v52;
  double result;
  _BYTE v54[40];

  v2 = *((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 12);
  v4 = (llvm::raw_ostream *)llvm::dbgs(this);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0x1CuLL)
  {
    qmemcpy(v5, "============================\n", 29);
    *((_QWORD *)v4 + 4) += 29;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, "============================\n", 0x1DuLL);
  }
  v6 = (llvm::raw_ostream *)llvm::dbgs(v4);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 0x16uLL)
  {
    v8 = llvm::raw_ostream::write(v6, "ANEC Placement Report:\n", 0x17uLL);
    v9 = (llvm::raw_ostream *)llvm::dbgs(v8);
    if (v2)
      goto LABEL_6;
LABEL_9:
    v12 = (void *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v12 <= 0x26uLL)
    {
      v9 = llvm::raw_ostream::write(v9, "All MPS operations were placed on ANE.\n", 0x27uLL);
      goto LABEL_21;
    }
    qmemcpy(v12, "All MPS operations were placed on ANE.\n", 39);
    v15 = *((_QWORD *)v9 + 4) + 39;
    goto LABEL_20;
  }
  qmemcpy(v7, "ANEC Placement Report:\n", 23);
  *((_QWORD *)v6 + 4) += 23;
  v9 = (llvm::raw_ostream *)llvm::dbgs(v6);
  if (!v2)
    goto LABEL_9;
LABEL_6:
  v10 = llvm::raw_ostream::operator<<(v9, v2);
  v11 = (void *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 0x2AuLL)
  {
    qmemcpy(v11, " MPS operations couldn't be placed on ANE.\n", 43);
    *((_QWORD *)v10 + 4) += 43;
  }
  else
  {
    v10 = llvm::raw_ostream::write(v10, " MPS operations couldn't be placed on ANE.\n", 0x2BuLL);
  }
  v9 = (llvm::raw_ostream *)llvm::dbgs(v10);
  if (v2 == v3)
  {
    v13 = (void *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v13 <= 0x29uLL)
    {
      v9 = llvm::raw_ostream::write(v9, "All unplaced operations are typechangers.\n", 0x2AuLL);
      goto LABEL_21;
    }
    qmemcpy(v13, "All unplaced operations are typechangers.\n", 42);
    v15 = *((_QWORD *)v9 + 4) + 42;
  }
  else
  {
    v9 = llvm::raw_ostream::operator<<(v9, v2 - v3);
    v14 = (void *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v14 <= 0x43uLL)
    {
      v9 = llvm::raw_ostream::write(v9, " MPS operations (excluding TypeChangers) couldn't be placed on ANE.\n", 0x44uLL);
      goto LABEL_21;
    }
    qmemcpy(v14, " MPS operations (excluding TypeChangers) couldn't be placed on ANE.\n", 68);
    v15 = *((_QWORD *)v9 + 4) + 68;
  }
LABEL_20:
  *((_QWORD *)v9 + 4) = v15;
LABEL_21:
  if (!*((_DWORD *)this + 18))
    goto LABEL_55;
  v9 = (llvm::raw_ostream *)llvm::dbgs(v9);
  v16 = (void *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v16 > 0x14uLL)
  {
    qmemcpy(v16, "Unplaced operations:\n", 21);
    *((_QWORD *)v9 + 4) += 21;
    if (!*((_DWORD *)this + 18))
      goto LABEL_55;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v9, "Unplaced operations:\n", 0x15uLL);
    if (!*((_DWORD *)this + 18))
      goto LABEL_55;
  }
  v17 = *((unsigned int *)this + 20);
  if ((_DWORD)v17)
  {
    v18 = 80 * v17;
    v19 = *((_QWORD *)this + 8);
    while (*(_QWORD *)v19 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v19 += 80;
      v18 -= 80;
      if (!v18)
        goto LABEL_55;
    }
  }
  else
  {
    v19 = *((_QWORD *)this + 8);
  }
  v20 = *((_QWORD *)this + 8) + 80 * v17;
  if (v19 != v20)
  {
LABEL_33:
    v21 = (llvm::raw_ostream *)llvm::dbgs(v9);
    v22 = *(const void **)v19;
    v23 = *(_QWORD *)(v19 + 8);
    v24 = (_WORD *)*((_QWORD *)v21 + 4);
    if (v23 <= *((_QWORD *)v21 + 3) - (_QWORD)v24)
    {
      if (v23)
      {
        memcpy(v24, v22, *(_QWORD *)(v19 + 8));
        v24 = (_WORD *)(*((_QWORD *)v21 + 4) + v23);
        *((_QWORD *)v21 + 4) = v24;
      }
    }
    else
    {
      v21 = llvm::raw_ostream::write(v21, (const char *)v22, *(_QWORD *)(v19 + 8));
      v24 = (_WORD *)*((_QWORD *)v21 + 4);
    }
    if (*((_QWORD *)v21 + 3) - (_QWORD)v24 > 1uLL)
    {
      *v24 = 10272;
      *((_QWORD *)v21 + 4) += 2;
    }
    else
    {
      v21 = llvm::raw_ostream::write(v21, " (", 2uLL);
    }
    v25 = llvm::raw_ostream::operator<<(v21, *(unsigned int *)(v19 + 24));
    v26 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) > 2)
    {
      *(_BYTE *)(v26 + 2) = 10;
      *(_WORD *)v26 = 14889;
      *((_QWORD *)v25 + 4) += 3;
      v27 = *(unsigned int *)(v19 + 24);
      if (!(_DWORD)v27)
        goto LABEL_49;
    }
    else
    {
      v25 = llvm::raw_ostream::write(v25, "):\n", 3uLL);
      v27 = *(unsigned int *)(v19 + 24);
      if (!(_DWORD)v27)
        goto LABEL_49;
    }
    v28 = *(mlir::Operation ***)(v19 + 16);
    v29 = 8 * v27;
    do
    {
      v30 = *v28;
      v31 = (llvm::raw_ostream *)llvm::dbgs(v25);
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v54);
      v32 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope((uint64_t)v54);
      v25 = mlir::Operation::print(v30, v31, v32);
      v33 = (_BYTE *)*((_QWORD *)v31 + 4);
      if (*((_BYTE **)v31 + 3) == v33)
      {
        v25 = llvm::raw_ostream::write(v31, "\n", 1uLL);
      }
      else
      {
        *v33 = 10;
        ++*((_QWORD *)v31 + 4);
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
LABEL_49:
    v9 = (llvm::raw_ostream *)llvm::dbgs(v25);
    v34 = (_BYTE *)*((_QWORD *)v9 + 4);
    if (*((_BYTE **)v9 + 3) == v34)
    {
      v9 = llvm::raw_ostream::write(v9, "\n", 1uLL);
    }
    else
    {
      *v34 = 10;
      ++*((_QWORD *)v9 + 4);
    }
    while (1)
    {
      v19 += 80;
      if (v19 == v20)
        break;
      if (*(_QWORD *)v19 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v19 != v20)
          goto LABEL_33;
        break;
      }
    }
  }
LABEL_55:
  v35 = *((_DWORD *)this + 2);
  if (v35 == 1)
  {
    v36 = (llvm::raw_ostream *)llvm::dbgs(v9);
    v37 = (_OWORD *)*((_QWORD *)v36 + 4);
    if (*((_QWORD *)v36 + 3) - (_QWORD)v37 <= 0x2AuLL)
    {
      v38 = "Found exactly one ANERegionCall operation.\n";
      goto LABEL_61;
    }
    v41 = "Found exactly one ANERegionCall operation.\n";
    goto LABEL_66;
  }
  if (!v35)
  {
    v36 = (llvm::raw_ostream *)llvm::dbgs(v9);
    v37 = (_OWORD *)*((_QWORD *)v36 + 4);
    if (*((_QWORD *)v36 + 3) - (_QWORD)v37 <= 0x2AuLL)
    {
      v38 = "Couldn't find any ANERegionCall operation.\n";
LABEL_61:
      v36 = llvm::raw_ostream::write(v36, v38, 0x2BuLL);
      goto LABEL_69;
    }
    v41 = "Couldn't find any ANERegionCall operation.\n";
LABEL_66:
    v42 = *((_OWORD *)v41 + 1);
    *v37 = *(_OWORD *)v41;
    v37[1] = v42;
    *(_OWORD *)((char *)v37 + 27) = *(_OWORD *)(v41 + 27);
    v43 = *((_QWORD *)v36 + 4) + 43;
    goto LABEL_68;
  }
  v39 = (llvm::raw_ostream *)llvm::dbgs(v9);
  v36 = llvm::raw_ostream::operator<<(v39, *((unsigned int *)this + 2));
  v40 = (void *)*((_QWORD *)v36 + 4);
  if (*((_QWORD *)v36 + 3) - (_QWORD)v40 <= 0x20uLL)
  {
    v36 = llvm::raw_ostream::write(v36, " ANERegionCall operations found.\n", 0x21uLL);
    goto LABEL_69;
  }
  qmemcpy(v40, " ANERegionCall operations found.\n", 33);
  v43 = *((_QWORD *)v36 + 4) + 33;
LABEL_68:
  *((_QWORD *)v36 + 4) = v43;
LABEL_69:
  v44 = *((unsigned int *)this + 2);
  if ((_DWORD)v44)
  {
    v45 = *(mlir::Operation ***)this;
    v46 = 8 * v44;
    do
    {
      v47 = *v45;
      v48 = (llvm::raw_ostream *)llvm::dbgs(v36);
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v54);
      v49 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope((uint64_t)v54);
      v36 = mlir::Operation::print(v47, v48, v49);
      v50 = (_BYTE *)*((_QWORD *)v48 + 4);
      if (*((_BYTE **)v48 + 3) == v50)
      {
        v36 = llvm::raw_ostream::write(v48, "\n", 1uLL);
      }
      else
      {
        *v50 = 10;
        ++*((_QWORD *)v48 + 4);
      }
      ++v45;
      v46 -= 8;
    }
    while (v46);
  }
  v51 = (llvm::raw_ostream *)llvm::dbgs(v36);
  v52 = (void *)*((_QWORD *)v51 + 4);
  if (*((_QWORD *)v51 + 3) - (_QWORD)v52 > 0x1DuLL)
  {
    qmemcpy(v52, "============================\n\n", 30);
    result = *(double *)"==============\n\n";
    *((_QWORD *)v51 + 4) += 30;
  }
  else
  {
    llvm::raw_ostream::write(v51, "============================\n\n", 0x1EuLL);
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECPlacementAnalysis::run(mlir::Operation *)::$_0>(mlir::ANECPlacementAnalysis **a1, mlir::Operation *a2)
{
  mlir::ANECPlacementAnalysis::_visitOperation(*a1, a2);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  uint64_t v8;
  unsigned int v9;
  const void *v10;
  size_t v11;
  int i;
  int v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
    v8 = 0;
    v9 = v4 - 1;
    v10 = *(const void **)a2;
    v11 = *(_QWORD *)(a2 + 8);
    for (i = 1; ; ++i)
    {
      v13 = HashValue & v9;
      v14 = v6 + 80 * (HashValue & v9);
      v15 = *(const void **)v14;
      if (*(_QWORD *)v14 == -2)
      {
        if (v10 == (const void *)-2)
          goto LABEL_19;
      }
      else if (v15 == (const void *)-1)
      {
        if (v10 == (const void *)-1)
          goto LABEL_19;
      }
      else if (v11 == *(_QWORD *)(v14 + 8) && (!v11 || !memcmp(v10, *(const void **)v14, v11)))
      {
LABEL_19:
        result = 1;
        goto LABEL_21;
      }
      if (v15 == (const void *)-1)
        break;
      if (v8)
        v16 = 0;
      else
        v16 = v15 == (const void *)-2;
      if (v16)
        v8 = v14;
      HashValue = i + v13;
    }
    result = 0;
    if (v8)
      v14 = v8;
  }
  else
  {
    v14 = 0;
    result = 0;
  }
LABEL_21:
  *a3 = v14;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(80 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 80 * v3;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + v10);
    llvm::deallocate_buffer(v4, (void *)v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 80 * v11 - 80;
    if (v12 < 0x50)
    {
      v13 = result;
LABEL_12:
      v17 = &result[5 * v11];
      do
      {
        *v13 = xmmword_181234BE0;
        v13 += 5;
      }
      while (v13 != v17);
      return result;
    }
    v14 = v12 / 0x50 + 1;
    v13 = &result[5 * (v14 & 0x7FFFFFFFFFFFFFELL)];
    v15 = v14 & 0x7FFFFFFFFFFFFFELL;
    v16 = result;
    do
    {
      *v16 = xmmword_181234BE0;
      v16[5] = xmmword_181234BE0;
      v16 += 10;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  void *v16;
  _OWORD *v17;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = 80 * v6 - 80;
    if (v8 < 0x50)
    {
      v9 = *(_OWORD **)a1;
LABEL_7:
      v13 = (_OWORD *)(v7 + 80 * v6);
      do
      {
        *v9 = xmmword_181234BE0;
        v9 += 5;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x50 + 1;
    v9 = (_OWORD *)(v7 + 80 * (v10 & 0x7FFFFFFFFFFFFFELL));
    v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    v12 = *(_OWORD **)a1;
    do
    {
      *v12 = xmmword_181234BE0;
      v12[5] = xmmword_181234BE0;
      v12 += 10;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      if (*(_QWORD *)v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v17 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v4, &v17);
        v14 = v17;
        *v17 = *(_OWORD *)v4;
        *((_QWORD *)v14 + 3) = 0x600000000;
        *((_QWORD *)v14 + 2) = v14 + 2;
        v15 = (uint64_t)(v14 + 1);
        if (*(_DWORD *)(v4 + 24))
          llvm::SmallVectorImpl<mlir::Value>::operator=(v15, v4 + 16);
        ++*(_DWORD *)(a1 + 8);
        v16 = *(void **)(v4 + 16);
        if ((void *)(v4 + 32) != v16)
          free(v16);
      }
      v4 += 80;
    }
    while (v4 != a3);
  }
}

void mlir::ANECRegionOpCreator::isOpCompatible(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  llvm *v2[2];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2[0] = 0;
  v2[1] = 0;
  v3 = 0;
  llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::copyFrom((uint64_t)v2);
}

void mlir::ANECRegionOpCreator::getRegionOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  const std::string::value_type **v17;
  std::string::size_type v18;
  std::string::size_type v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  std::string v24;
  std::string v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v34 = a6;
  v35 = a7;
  v32 = a9;
  v33 = a10;
  v30 = a11;
  v31 = a12;
  v28 = a13;
  v29 = a14;
  v26 = a15;
  v27 = a16;
  v17 = (const std::string::value_type **)(a1 + 264);
  v18 = *(unsigned __int8 *)(a1 + 287);
  if (*(char *)(a1 + 287) < 0)
  {
    v19 = *(_QWORD *)(a1 + 272);
    if (!v19)
    {
      std::string::__init_copy_ctor_external(&v25, *v17, 0);
      goto LABEL_15;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 287))
    {
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)v17;
      v25.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 280);
      goto LABEL_15;
    }
    v19 = *(_QWORD *)(a1 + 272);
  }
  *((_BYTE *)&v24.__r_.__value_.__s + 23) = 1;
  LOWORD(v24.__r_.__value_.__l.__data_) = 95;
  if ((v18 & 0x80u) == 0)
    v20 = (const std::string::value_type *)(a1 + 264);
  else
    v20 = *v17;
  if ((v18 & 0x80u) == 0)
    v21 = v18;
  else
    v21 = v19;
  v22 = std::string::append(&v24, v20, v21);
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
LABEL_15:
  __asm { BR              X10 }
}

mlir::GenericProgramPoint *sub_1807D4704(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int16 a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int16 a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  mlir::OpBuilder *v62;
  mlir::GenericProgramPoint *v63;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  __int16 v68;
  _QWORD v69[4];
  __int16 v70;
  _QWORD v71[4];
  __int16 v72;
  std::string v73;
  void *v74;
  char v75;

  v68 = 773;
  v65 = v60;
  v66 = v59;
  v67 = "_A12_region_";
  v69[0] = &v65;
  v69[2] = v61 + 80;
  v70 = 2818;
  v71[0] = v69;
  v71[2] = &v74;
  v72 = 1026;
  llvm::Twine::str((llvm::Twine *)v71, &v73);
  v62 = *(mlir::OpBuilder **)(v58 + 8);
  v71[0] = 0;
  v71[1] = 0;
  v63 = mlir::OpBuilder::create<mlir::anec::A12,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(v62, v57, (void **)&v73.__r_.__value_.__l.__data_, v56, v61 - 104, (uint64_t *)(v61 - 120), v61 - 72, (uint64_t *)(v61 - 88), v61 - 136, (uint64_t)v71);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v73.__r_.__value_.__l.__data_);
    if ((v75 & 0x80000000) == 0)
      return v63;
LABEL_5:
    operator delete(v74);
    return v63;
  }
  if (v75 < 0)
    goto LABEL_5;
  return v63;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A12,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  _QWORD v33[40];

  v33[38] = *MEMORY[0x1E0C80C00];
  v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A12", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v32 = 1283;
    v31[2] = (uint64_t)"anec.A12";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  v22 = *((char *)a3 + 23);
  if (v22 >= 0)
    v23 = a3;
  else
    v23 = *a3;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a3 + 23);
  else
    v24 = (uint64_t)a3[1];
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((_QWORD *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A12,void>::id)
    v26 = v25;
  else
    v26 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A13,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  _QWORD v33[40];

  v33[38] = *MEMORY[0x1E0C80C00];
  v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A13", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v32 = 1283;
    v31[2] = (uint64_t)"anec.A13";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  v22 = *((char *)a3 + 23);
  if (v22 >= 0)
    v23 = a3;
  else
    v23 = *a3;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a3 + 23);
  else
    v24 = (uint64_t)a3[1];
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((_QWORD *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A13,void>::id)
    v26 = v25;
  else
    v26 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A14,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  _QWORD v33[40];

  v33[38] = *MEMORY[0x1E0C80C00];
  v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A14", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v32 = 1283;
    v31[2] = (uint64_t)"anec.A14";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  v22 = *((char *)a3 + 23);
  if (v22 >= 0)
    v23 = a3;
  else
    v23 = *a3;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a3 + 23);
  else
    v24 = (uint64_t)a3[1];
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((_QWORD *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A14,void>::id)
    v26 = v25;
  else
    v26 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A15,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  _QWORD v33[40];

  v33[38] = *MEMORY[0x1E0C80C00];
  v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A15", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v32 = 1283;
    v31[2] = (uint64_t)"anec.A15";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  v22 = *((char *)a3 + 23);
  if (v22 >= 0)
    v23 = a3;
  else
    v23 = *a3;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a3 + 23);
  else
    v24 = (uint64_t)a3[1];
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((_QWORD *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A15,void>::id)
    v26 = v25;
  else
    v26 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A16,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  _QWORD v33[40];

  v33[38] = *MEMORY[0x1E0C80C00];
  v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A16", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v32 = 1283;
    v31[2] = (uint64_t)"anec.A16";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  v22 = *((char *)a3 + 23);
  if (v22 >= 0)
    v23 = a3;
  else
    v23 = *a3;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a3 + 23);
  else
    v24 = (uint64_t)a3[1];
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((_QWORD *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A16,void>::id)
    v26 = v25;
  else
    v26 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A17,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  _QWORD v33[40];

  v33[38] = *MEMORY[0x1E0C80C00];
  v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A17", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v32 = 1283;
    v31[2] = (uint64_t)"anec.A17";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  v22 = *((char *)a3 + 23);
  if (v22 >= 0)
    v23 = a3;
  else
    v23 = *a3;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a3 + 23);
  else
    v24 = (uint64_t)a3[1];
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((_QWORD *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A17,void>::id)
    v26 = v25;
  else
    v26 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A11Legacy,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  _QWORD v33[40];

  v33[38] = *MEMORY[0x1E0C80C00];
  v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A11Legacy", (const unsigned __int8 *)0xE, Context);
  if (!v20)
  {
    v32 = 1283;
    v31[2] = (uint64_t)"anec.A11Legacy";
    v31[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  v22 = *((char *)a3 + 23);
  if (v22 >= 0)
    v23 = a3;
  else
    v23 = *a3;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a3 + 23);
  else
    v24 = (uint64_t)a3[1];
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(_QWORD *)(a5 + 8), v21, *a6, a6[1], *(_QWORD **)a7, *(_QWORD *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(_QWORD *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((_QWORD *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A11Legacy,void>::id)
    v26 = v25;
  else
    v26 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

float mlir::ANECRegionOpCreator::computeHostRegionCost(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;

  if (!a3)
    return 0.0;
  v5 = a1 + 224;
  v6 = 8 * a3;
  v7 = 0.0;
  do
  {
    v8 = *a2++;
    v7 = v7 + mlir::mps::detail::MPSAbstractCostModel::computeCost(v5, v8, *(_QWORD *)(a1 + 256));
    v6 -= 8;
  }
  while (v6);
  return v7;
}

float mlir::ANECRegionOpCreator::computeHostRegionCost(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  _QWORD v3[2];
  float v4;

  v4 = 0.0;
  v3[0] = this;
  v3[1] = &v4;
  mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECRegionOpCreator::computeHostRegionCost(mlir::Operation *)::$_0>, (uint64_t)v3, 1);
  return v4;
}

float mlir::ANECRegionOpCreator::computeDeviceRegionCost(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  float v6;
  uint64_t InterfaceFor;
  float v8;
  uint64_t v9;
  _QWORD v11[2];

  if (!a3)
    return 0.0;
  v5 = 8 * a3;
  v6 = 0.0;
  do
  {
    v9 = *a2;
    if (*a2)
      InterfaceFor = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(*a2);
    else
      InterfaceFor = 0;
    v11[0] = v9;
    v11[1] = InterfaceFor;
    mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v11, *(_QWORD *)(a1 + 256));
    v6 = v6 + v8;
    ++a2;
    v5 -= 8;
  }
  while (v5);
  return v6;
}

float mlir::ANECRegionOpCreator::computeDeviceRegionCost(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  _QWORD v3[2];
  float v4;
  _QWORD *v5;

  v4 = 0.0;
  v3[0] = this;
  v3[1] = &v4;
  v5 = v3;
  mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_19ANECRegionOpCreator23computeDeviceRegionCostES3_E3__0NS1_24ExecutionCostOpInterfaceEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESL_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v5, 1);
  return v4;
}

float mlir::ANECRegionOpCreator::computeModuleCost(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  uint64_t *Context;
  _QWORD v6[3];
  float v7;
  uint64_t LoadedDialect;

  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
  LoadedDialect = mlir::MLIRContext::getLoadedDialect(Context, (uint64_t)"anec", 4);
  v7 = 0.0;
  v6[0] = &LoadedDialect;
  v6[1] = this;
  v6[2] = &v7;
  mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECRegionOpCreator::computeModuleCost(mlir::Operation *)::$_0>, (uint64_t)v6, 1);
  return v7;
}

float mlir::ANECRegionOpCreator::synchronizationCost(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  return *(float *)(*((_QWORD *)this + 32) + 48);
}

void mlir::ANECRegionOpCreator::canonicalizeTranslatedRegion(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  mlir::Attribute *v4;
  unint64_t v5;
  mlir::Region **v6;
  uint64_t v7;
  unint64_t v8;
  mlir::Region **v9;
  unint64_t v10;
  mlir::Region **v11;
  BOOL v12[16];
  __int16 v13;
  int v14;
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void *__p[2];
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[8];
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[8];
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t Context;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD v52[8];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = (mlir::Operation *)((char *)a2 + 24);
  v48 = 0u;
  v49 = 0u;
  Context = mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
  v50 = v52;
  v51 = 0x600000000;
  v52[7] = 0;
  v52[6] = 0;
  v53 = 0;
  v55 = 0;
  v54 = 0;
  v56 = 0x2800000000;
  v57 = 0;
  v58 = 0;
  v59 = 0x2800000000;
  mlir::anec::getANECConvCanonicalizationPatterns(&Context);
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(&v21, &Context, 0, 0, 0, 0);
  v5 = *((unsigned int *)a2 + 11);
  if ((v5 & 0x7FFFFF) != 0)
  {
    v6 = (mlir::Region **)((((unint64_t)a2 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *((unsigned int *)a2 + 10));
    LOBYTE(v13) = 0;
    v34 = 256;
    v35 = xmmword_181233220;
    v37 = 0;
    v36 = 0uLL;
    mlir::applyPatternsAndFoldGreedily(v6, (const mlir::FrozenRewritePatternSet *)&v21, (__int128 *)&v34, (BOOL *)&v13);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v21);
  v7 = mlir::Attribute::getContext(v4);
  v35 = 0u;
  v36 = 0u;
  v34 = v7;
  v37 = v39;
  v38 = 0x600000000;
  v39[6] = 0;
  v39[7] = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0x2800000000;
  v44 = 0;
  v45 = 0;
  v46 = 0x2800000000;
  if (*((_BYTE *)this + 288))
    mlir::anec::getANECCanonicalizeQuantPatterns(&v34);
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(&v13, &v34, 0, 0, 0, 0);
  v8 = *((unsigned int *)a2 + 11);
  if ((v8 & 0x7FFFFF) != 0)
  {
    v9 = (mlir::Region **)((((unint64_t)a2 + 16 * ((v8 >> 23) & 1) + ((v8 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *((unsigned int *)a2 + 10));
    v12[0] = 0;
    v21 = 256;
    *(_OWORD *)__p = xmmword_181233220;
    v24 = 0;
    v23 = 0uLL;
    mlir::applyPatternsAndFoldGreedily(v9, (const mlir::FrozenRewritePatternSet *)&v13, (__int128 *)&v21, v12);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v13);
  v21 = mlir::Attribute::getContext(v4);
  *(_OWORD *)__p = 0u;
  v23 = 0u;
  v24 = v26;
  v25 = 0x600000000;
  v26[6] = 0;
  v26[7] = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0x2800000000;
  v31 = 0;
  v32 = 0;
  v33 = 0x2800000000;
  mlir::anec::getANECLateCanonicalizationPatterns(&v21);
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(v12, &v21, 0, 0, 0, 0);
  v10 = *((unsigned int *)a2 + 11);
  if ((v10 & 0x7FFFFF) != 0)
  {
    v11 = (mlir::Region **)((((unint64_t)a2 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 32 * *((unsigned int *)a2 + 10));
    v20 = 0;
    v13 = 256;
    v14 = 0;
    v15 = 0;
    v16 = xmmword_181233220;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    mlir::applyPatternsAndFoldGreedily(v11, (const mlir::FrozenRewritePatternSet *)v12, (__int128 *)&v13, &v20);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)v12);
  mlir::PDLPatternModule::~PDLPatternModule((mlir::PDLPatternModule *)((char *)&v23 + 8));
}

void mlir::ANECRegionOpCreator::~ANECRegionOpCreator(void **this)
{
  *this = off_1E0E2BBD8;
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)(this + 26));
  mlir::ConversionTarget::~ConversionTarget((mlir::ConversionTarget *)(this + 5));
}

{
  *this = off_1E0E2BBD8;
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)(this + 26));
  mlir::ConversionTarget::~ConversionTarget((mlir::ConversionTarget *)(this + 5));
}

uint64_t sub_1807D5DCC()
{
  uint64_t v0;

  return v0;
}

void sub_1807D5E18()
{
  void *v0;

  operator delete(v0);
}

uint64_t mlir::ANECRegionOpCreator::getMarkAttrID(uint64_t this)
{
  mlir::StringAttr **v1;
  const char *v2;
  const char *v3;
  __int16 v4;

  switch(*(_DWORD *)(this + 248))
  {
    case 0:
      v1 = *(mlir::StringAttr ***)(this + 8);
      v2 = "A12_region";
      goto LABEL_9;
    case 1:
      v1 = *(mlir::StringAttr ***)(this + 8);
      v2 = "A13_region";
      goto LABEL_9;
    case 2:
      v1 = *(mlir::StringAttr ***)(this + 8);
      v2 = "A14_region";
      goto LABEL_9;
    case 3:
      v1 = *(mlir::StringAttr ***)(this + 8);
      v2 = "A15_region";
      goto LABEL_9;
    case 4:
      v1 = *(mlir::StringAttr ***)(this + 8);
      v2 = "A16_region";
      goto LABEL_9;
    case 5:
      v1 = *(mlir::StringAttr ***)(this + 8);
      v2 = "A17_region";
      goto LABEL_9;
    case 6:
      v1 = *(mlir::StringAttr ***)(this + 8);
      v2 = "A11Legacy_region";
LABEL_9:
      v3 = v2;
      v4 = 259;
      this = mlir::Builder::getStringAttr(v1, (mlir::MLIRContext *)&v3);
      break;
    default:
      return this;
  }
  return this;
}

uint64_t mlir::ANECRegionOpCreator::isRegionProfitable()
{
  return 1;
}

uint64_t mlir::ANECRegionOpCreator::getCanonicalizationPatterns@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 216);
  *a2 = *(_QWORD *)(this + 208);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

mlir::GenericProgramPoint *mlir::ANECRegionOpCreator::getRegionTerminator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];

  v5[0] = a3;
  v5[1] = a4;
  return mlir::OpBuilder::create<mlir::anec::RegionReturn,llvm::ArrayRef<mlir::Value> &>(*(mlir::OpBuilder **)(a1 + 8), a2, (uint64_t)v5);
}

uint64_t mlir::ANECRegionOpCreator::getBody(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  result = mlir::OpInterface<mlir::FormableRegionOpInterface,mlir::detail::FormableRegionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  if (result)
  {
    mlir::OpInterface<mlir::FormableRegionOpInterface,mlir::detail::FormableRegionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
    return *((_QWORD *)a2 + 2);
  }
  return result;
}

void mlir::ANECRegionOpCreator::getInitializedConversionTarget(mlir::ANECRegionOpCreator *this@<X0>, mlir::ConversionTarget *a2@<X8>)
{
  mlir::ConversionTarget::ConversionTarget(a2, (mlir::ANECRegionOpCreator *)((char *)this + 40));
}

uint64_t mlir::ANECRegionOpCreator::materializeHostTypeConversion(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[24];

  v9[23] = *MEMORY[0x1E0C80C00];
  result = mlir::materializeMPSToANECHostTypeConversion(*(mlir::UnknownLoc ***)(a1 + 8), a2, a3, a4, a5, a6);
  if (!(_BYTE)result)
  {
    mlir::emitError(a2, (uint64_t)&v8);
    if (v8)
    {
      mlir::Diagnostic::operator<<((uint64_t)v9, "unable to materialize host type conversion");
      if (v8)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v8);
    }
    return std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v9);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::ANECRegionOpCreator::getCallOp(uint64_t a1, uint64_t a2, mlir::SymbolRefAttr *a3, uint64_t a4, uint64_t a5)
{
  mlir::MLIRContext **v5;
  int v7;
  mlir::SymbolRefAttr *v8;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v9[0] = a4;
  v9[1] = a5;
  v8 = a3;
  v5 = *(mlir::MLIRContext ***)(a1 + 8);
  v7 = 1;
  return mlir::OpBuilder::create<mlir::placement::RegionCall,mlir::Operation *&,mlir::placement::RegionType,mlir::ValueRange &>(v5, a2, &v8, &v7, v9);
}

_QWORD *mlir::ANECRegionOpCreator::getConvertedType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  void *ArgAttrsAttr;
  mlir::AffineMap *v14;
  mlir::AffineMap *v15;
  uint64_t OperandRange;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD v38[2];

  if (!a2)
    goto LABEL_10;
  v3 = *a2;
  v4 = mlir::TypeID::get<mlir::ShapedType>();
  v5 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v5)
    goto LABEL_10;
  v6 = *(_QWORD **)(v3 + 8);
  v7 = &v6[2 * v5];
  do
  {
    v8 = v5 >> 1;
    v9 = &v6[2 * (v5 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4)
      v6 = v10;
    else
      v5 = v8;
  }
  while (v5);
  if (v6 != v7 && *v6 == v4)
    v12 = v6[1];
  else
LABEL_10:
    v12 = 0;
  v38[0] = a2;
  v38[1] = v12;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v38))
  {
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v38);
    v15 = v14;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38);
    v17 = (_QWORD *)mlir::MemRefType::get(ArgAttrsAttr, v15, OperandRange, 0, 0, 0);
    v18 = v17;
    if (v17)
    {
      v19 = *v17;
      v20 = mlir::TypeID::get<mlir::ShapedType>();
      v21 = *(unsigned int *)(v19 + 16);
      if ((_DWORD)v21)
      {
        v22 = *(_QWORD **)(v19 + 8);
        do
        {
          v23 = v21 >> 1;
          v24 = &v22[2 * (v21 >> 1)];
          v26 = *v24;
          v25 = v24 + 2;
          v21 += ~(v21 >> 1);
          if (v26 < v20)
            v22 = v25;
          else
            v21 = v23;
        }
        while (v21);
      }
    }
  }
  else
  {
    v27 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38);
    v28 = (_QWORD *)mlir::UnrankedMemRefType::get(v27, 0);
    v18 = v28;
    if (v28)
    {
      v29 = *v28;
      v30 = mlir::TypeID::get<mlir::ShapedType>();
      v31 = *(unsigned int *)(v29 + 16);
      if ((_DWORD)v31)
      {
        v32 = *(_QWORD **)(v29 + 8);
        do
        {
          v33 = v31 >> 1;
          v34 = &v32[2 * (v31 >> 1)];
          v36 = *v34;
          v35 = v34 + 2;
          v31 += ~(v31 >> 1);
          if (v36 < v30)
            v32 = v35;
          else
            v31 = v33;
        }
        while (v31);
      }
    }
  }
  return v18;
}

uint64_t mlir::ANECRegionOpCreator::getPromotedType(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t mlir::ANECRegionOpCreator::insertInstrumentation(mlir::ANECRegionOpCreator *this)
{
  return *((unsigned __int8 *)this + 253);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::RegionReturn,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.region_return", (const unsigned __int8 *)0x12, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.region_return";
    v15[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  mlir::anec::RegionReturn::build((uint64_t)a1, (uint64_t)v18, v17[0], v17[1]);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::RegionReturn,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

void llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::copyFrom(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = (_QWORD *)((char *)v3 + 16);
    v5 = 32 * v2;
    do
    {
      if ((*(v4 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = (void *)*(v4 - 1);
        if (v6)
        {
          *v4 = v6;
          operator delete(v6);
        }
      }
      v4 += 4;
      v5 -= 32;
    }
    while (v5);
    v3 = *(llvm **)a1;
    v7 = (void *)(32 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v7 = 0;
  }
  llvm::deallocate_buffer(v3, v7);
}

void sub_1807D63E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned int *)(v1 + 16);
  *(_DWORD *)(v0 + 16) = v2;
  if ((_DWORD)v2)
  {
    *(_QWORD *)v0 = llvm::allocate_buffer(32 * v2, (std::align_val_t)8uLL);
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>,mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::copyFrom<llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>>((_QWORD *)v0, (uint64_t *)v1);
  }
  else
  {
    *(_QWORD *)v0 = 0;
    *(_QWORD *)(v0 + 8) = 0;
  }
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>,mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::copyFrom<llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  result[1] = a2[1];
  if (*((_DWORD *)result + 4))
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    do
    {
      *(_QWORD *)(*v3 + v4) = *(_QWORD *)(*a2 + v4);
      if ((*(_QWORD *)(*v3 + v4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = (_QWORD *)(*v3 + v4);
        v7 = *a2;
        v6[1] = 0;
        v8 = v7 + v4;
        v6[2] = 0;
        v6[3] = 0;
        v10 = *(_BYTE **)(v8 + 8);
        v9 = *(_BYTE **)(v8 + 16);
        v11 = v9 - v10;
        if (v9 != v10)
        {
          if (v11 < 0)
            abort();
          v12 = (char *)operator new(v9 - v10);
          v6[1] = v12;
          v13 = &v12[8 * (v11 >> 3)];
          v6[2] = v12;
          v6[3] = v13;
          result = memcpy(v12, v10, v11);
          v6[2] = v13;
        }
      }
      ++v5;
      v4 += 32;
    }
    while (v5 < *((unsigned int *)v3 + 4));
  }
  return result;
}

float llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECRegionOpCreator::computeHostRegionCost(mlir::Operation *)::$_0>(_QWORD *a1, uint64_t a2)
{
  float v3;
  float *v4;
  float result;

  v3 = mlir::mps::detail::MPSAbstractCostModel::computeCost(*a1 + 224, a2, *(_QWORD *)(*a1 + 256));
  v4 = (float *)a1[1];
  result = v3 + *v4;
  *v4 = result;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_19ANECRegionOpCreator23computeDeviceRegionCostES3_E3__0NS1_24ExecutionCostOpInterfaceEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESL_E4typeES3_OT1_EUlS3_E_EEvlS3_(float ***a1, uint64_t a2)
{
  uint64_t result;
  uint64_t InterfaceFor;
  float **v6;
  float v7;
  _QWORD v8[2];

  result = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  if (result)
  {
    if (a2)
    {
      InterfaceFor = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
      v6 = *a1;
      v8[0] = a2;
      v8[1] = InterfaceFor;
      result = mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v8, *((_QWORD *)*v6 + 32));
      *v6[1] = v7 + *v6[1];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

float llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECRegionOpCreator::computeModuleCost(mlir::Operation *)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Values;
  float v7;
  uint64_t InterfaceFor;
  float *v9;
  float result;
  _QWORD v11[2];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 48);
  if (*(_UNKNOWN **)(v5 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v11[0] = *(_QWORD *)(v5 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v11);
  }
  else
  {
    Values = *(_QWORD *)(v5 + 24);
  }
  if (Values == **(_QWORD **)a1)
  {
    InterfaceFor = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
    v11[0] = a2;
    v11[1] = InterfaceFor;
    mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v11, *(_QWORD *)(v4 + 256));
  }
  else
  {
    v7 = mlir::mps::detail::MPSAbstractCostModel::computeCost(v4 + 224, a2, *(_QWORD *)(v4 + 256));
  }
  v9 = *(float **)(a1 + 16);
  result = v7 + *v9;
  *v9 = result;
  return result;
}

uint64_t llvm::ARM::getArchSynonym(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int64x2_t v9;
  const char *v10;
  uint64_t v16;
  int v17;
  int64x2_t *v18;
  uint64_t v19;
  _DWORD *v20;
  int v34;
  int v35;
  int64x2_t v37;
  const char *v38;
  uint64_t v39;
  unsigned __int16 *v40;
  int v42;
  int v43;
  int64x2_t v45;
  const char *v46;
  unsigned __int16 *v47;
  int v49;
  int v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD v57[2];
  int64x2_t v58;
  char v59;

  v57[0] = a1;
  v57[1] = a2;
  v58.i8[0] = 0;
  v59 = 0;
  switch(a2)
  {
    case 2:
      if (*(_WORD *)a1 == 13686)
      {
        v9 = vdupq_n_s64(3uLL);
        v10 = "v5t";
        goto LABEL_35;
      }
      break;
    case 3:
      if (*(_WORD *)a1 == 13686 && *(_BYTE *)(a1 + 2) == 101)
      {
        v9 = vdupq_n_s64(4uLL);
        v10 = "v5te";
        goto LABEL_35;
      }
      if (*(_WORD *)a1 == 13942 && *(_BYTE *)(a1 + 2) == 106)
      {
        v9 = vdupq_n_s64(2uLL);
        v10 = "v6";
        goto LABEL_35;
      }
      if (*(_WORD *)a1 == 13942 && *(_BYTE *)(a1 + 2) == 109)
        goto LABEL_31;
      if (*(_WORD *)a1 == 13942 && *(_BYTE *)(a1 + 2) == 122)
        goto LABEL_25;
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x6C683676:
          v9 = vdupq_n_s64(3uLL);
          v10 = "v6k";
          goto LABEL_35;
        case 0x6D733676:
          goto LABEL_31;
        case 0x6B7A3676:
LABEL_25:
          v9 = vdupq_n_s64(4uLL);
          v10 = "v6kz";
          goto LABEL_35;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 == 762525302 && *(_BYTE *)(a1 + 4) == 109)
      {
LABEL_31:
        v9 = vdupq_n_s64(4uLL);
        v10 = "v6-m";
LABEL_35:
        v9.i64[0] = (uint64_t)v10;
        v58 = v9;
        v59 = 1;
      }
      break;
    default:
      break;
  }
  v16 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases((uint64_t)v57, "v7", 2, "v7a", 3, "v7hl", 4, a8, "v7l", 3, (uint64_t)"v7-a", 4);
  if (!*(_BYTE *)(v16 + 32))
  {
    v39 = *(_QWORD *)(v16 + 8);
    if (v39 == 2)
    {
      if (**(_WORD **)v16 != 14454)
        goto LABEL_37;
      v45 = vdupq_n_s64(4uLL);
      v45.i64[0] = (uint64_t)"v8-a";
    }
    else
    {
      if (v39 == 4)
      {
        if (**(_DWORD **)v16 != 1835349878)
          goto LABEL_37;
        v45 = vdupq_n_s64(5uLL);
        v46 = "v7e-m";
      }
      else
      {
        if (v39 != 3)
          goto LABEL_37;
        v40 = *(unsigned __int16 **)v16;
        if (**(_WORD **)v16 == 14198 && *(_BYTE *)(*(_QWORD *)v16 + 2) == 114)
        {
          v45 = vdupq_n_s64(4uLL);
          v46 = "v7-r";
        }
        else
        {
          v42 = *v40;
          v43 = *((unsigned __int8 *)v40 + 2);
          if (v42 != 14198 || v43 != 109)
            goto LABEL_37;
          v45 = vdupq_n_s64(4uLL);
          v46 = "v7-m";
        }
      }
      v45.i64[0] = (uint64_t)v46;
    }
    *(int64x2_t *)(v16 + 16) = v45;
    *(_BYTE *)(v16 + 32) = 1;
  }
LABEL_37:
  v18 = (int64x2_t *)llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(v16, "v8a", 3, "v8l", 3, "aarch64", 7, v17, "arm64", 5, (uint64_t)"v8-a", 4);
  if (!v18[2].i8[0])
  {
    v19 = v18->i64[1];
    if (v19 != 3)
    {
      if (v19 == 5)
      {
        v20 = (_DWORD *)v18->i64[0];
        if (*(_DWORD *)v18->i64[0] == 825112694 && *(_BYTE *)(v18->i64[0] + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v8.1-a";
        }
        else if (*v20 == 841889910 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v8.2-a";
        }
        else if (*v20 == 858667126 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v8.3-a";
        }
        else if (*v20 == 875444342 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v8.4-a";
        }
        else if (*v20 == 892221558 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v8.5-a";
        }
        else if (*v20 == 908998774 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v8.6-a";
        }
        else if (*v20 == 925775990 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v8.7-a";
        }
        else if (*v20 == 942553206 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v8.8-a";
        }
        else if (*v20 == 959330422 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v8.9-a";
        }
        else if (*v20 == 825112950 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v9.1-a";
        }
        else if (*v20 == 841890166 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v9.2-a";
        }
        else if (*v20 == 858667382 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v9.3-a";
        }
        else if (*v20 == 875444598 && *((_BYTE *)v20 + 4) == 97)
        {
          v37 = vdupq_n_s64(6uLL);
          v38 = "v9.4-a";
        }
        else
        {
          v34 = *v20;
          v35 = *((unsigned __int8 *)v20 + 4);
          if (v34 != 892221814 || v35 != 97)
            return a1;
          v37 = vdupq_n_s64(6uLL);
          v38 = "v9.5-a";
        }
        goto LABEL_158;
      }
      v52 = v18->i64[0];
      if (v19 == 10)
      {
        v53 = *(_QWORD *)v52;
        v54 = *(unsigned __int16 *)(v52 + 8);
        if (v53 != 0x616D2E6D312E3876 || v54 != 28265)
          return a1;
        v37 = vdupq_n_s64(0xBuLL);
        v38 = "v8.1-m.main";
        goto LABEL_158;
      }
      if (v19 == 8)
      {
        if (*(_QWORD *)v52 == 0x657361622E6D3876)
        {
          v37 = vdupq_n_s64(9uLL);
          v38 = "v8-m.base";
          goto LABEL_158;
        }
        if (*(_QWORD *)v52 == 0x6E69616D2E6D3876)
        {
          v37 = vdupq_n_s64(9uLL);
          v38 = "v8-m.main";
          goto LABEL_158;
        }
      }
      else if (v19 == 2 && *(_WORD *)v52 == 14710)
      {
        goto LABEL_125;
      }
      return a1;
    }
    v47 = (unsigned __int16 *)v18->i64[0];
    if (*(_WORD *)v18->i64[0] == 14454 && *(_BYTE *)(v18->i64[0] + 2) == 114)
    {
      v37 = vdupq_n_s64(4uLL);
      v38 = "v8-r";
      goto LABEL_158;
    }
    v49 = *v47;
    v50 = *((unsigned __int8 *)v47 + 2);
    if (v49 != 14710 || v50 != 97)
      return a1;
LABEL_125:
    v37 = vdupq_n_s64(4uLL);
    v38 = "v9-a";
LABEL_158:
    v37.i64[0] = (uint64_t)v38;
    v18[1] = v37;
    v18[2].i8[0] = 1;
  }
  return v18[1].i64[0];
}

uint64_t llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(uint64_t a1, const void *a2, uint64_t a3, void *__s2, uint64_t a5, void *a6, uint64_t a7, int a8, void *__s2a, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v17;
  size_t v18;

  if (!*(_BYTE *)(a1 + 32))
  {
    if ((v17 = *(const void **)a1, v18 = *(_QWORD *)(a1 + 8), v18 == a3)
      && (!v18 || !memcmp(*(const void **)a1, a2, *(_QWORD *)(a1 + 8)))
      || v18 == a5 && (!v18 || !memcmp(v17, __s2, v18))
      || v18 == a7 && (!v18 || !memcmp(v17, a6, v18))
      || v18 == a10 && (!v18 || !memcmp(v17, __s2a, v18)))
    {
      *(_QWORD *)(a1 + 16) = a11;
      *(_QWORD *)(a1 + 24) = a12;
      *(_BYTE *)(a1 + 32) = 1;
    }
  }
  return a1;
}

const char *llvm::ARM::getCanonicalArchName(_BYTE *a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  char v9;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v17;
  _BYTE *v18;
  unsigned int v19;
  int v20;
  _BYTE *v21;
  unint64_t v22;

  v21 = a1;
  v22 = a2;
  if (a2 >= 8)
  {
    if (*(_QWORD *)a1 == 0x32335F34366D7261)
    {
      v5 = 8;
      goto LABEL_48;
    }
LABEL_11:
    if (*(_DWORD *)a1 != 913142369 || *((_WORD *)a1 + 2) != 25908)
    {
      if (*(_DWORD *)a1 == 913142369 && a1[4] == 52)
      {
LABEL_42:
        v5 = 5;
        goto LABEL_48;
      }
      if (a2 >= 0xA && *(_QWORD *)a1 == 0x5F34366863726161 && *((_WORD *)a1 + 4) == 12851)
      {
        v5 = 10;
        goto LABEL_48;
      }
      goto LABEL_24;
    }
    v5 = 6;
LABEL_48:
    v4 = a2;
    goto LABEL_49;
  }
  if (a2 >= 6)
    goto LABEL_11;
  if (a2 == 5)
  {
    v3 = *(_DWORD *)a1 == 913142369 && a1[4] == 52;
    if (v3)
    {
      v4 = 5;
      v5 = 5;
      goto LABEL_49;
    }
LABEL_24:
    v9 = 0;
    goto LABEL_25;
  }
  if (a2 < 3)
  {
    v5 = -1;
    v4 = a2;
    goto LABEL_54;
  }
  v9 = 1;
LABEL_25:
  if (*(_WORD *)a1 == 29281 && a1[2] == 109)
  {
    v5 = 3;
    goto LABEL_48;
  }
  if ((v9 & 1) == 0 && *(_DWORD *)a1 == 1836410996 && a1[4] == 98)
    goto LABEL_42;
  if (a2 >= 7 && *(_DWORD *)a1 == 1668440417 && *(_DWORD *)(a1 + 3) == 875980899)
  {
    if (llvm::StringRef::find((uint64_t *)&v21, "eb", 2uLL, 0) != -1)
      return "";
    v4 = v22;
    v5 = 7;
    if (v22 >= 7)
      v17 = 7;
    else
      v17 = v22;
    if (v22 - v17 >= 3)
    {
      v18 = &v21[v17];
      v19 = bswap32(*(unsigned __int16 *)&v21[v17]) >> 16;
      if (v19 == 24418)
        v20 = v18[2] - 101;
      else
        v20 = v19 < 0x5F62 ? -1 : 1;
      v3 = v20 == 0;
      v5 = 7;
      if (v3)
        v5 = 10;
    }
LABEL_49:
    if (v4 >= v5)
      v13 = v5;
    else
      v13 = v4;
    if (v4 - v13 >= 2)
    {
      v14 = v21;
      if (*(_WORD *)&v21[v13] == 25189)
      {
        v5 += 2;
LABEL_64:
        if (v4 >= v5)
          v15 = v5;
        else
          v15 = v4;
        v21 = &v14[v15];
        v22 = v4 - v15;
        if (v4 > v5)
        {
          if (v4 - v15 >= 2
            && (*v21 != 118
             || (char)v21[1] < 0
             || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v21[1] + 60) & 0x400) == 0)
            || llvm::StringRef::find((uint64_t *)&v21, "eb", 2uLL, 0) != -1)
          {
            return "";
          }
          return v21;
        }
        return a1;
      }
    }
LABEL_54:
    if (v4 < 2)
      goto LABEL_56;
    goto LABEL_55;
  }
  v5 = -1;
  v4 = a2;
LABEL_55:
  if (*(_WORD *)&v21[v4 - 2] == 25189)
  {
    if (v4 >= v4 - 2)
      v4 -= 2;
    if (v5 != -1)
      goto LABEL_57;
    goto LABEL_61;
  }
LABEL_56:
  if (v5 != -1)
  {
LABEL_57:
    v14 = v21;
    goto LABEL_64;
  }
LABEL_61:
  if (!v4)
    return a1;
  return v21;
}

uint64_t llvm::ARM::parseArchISA(uint64_t a1, unint64_t a2)
{
  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 == 1668440417 && *(_DWORD *)(a1 + 3) == 875980899)
      return 3;
  }
  else if (a2 < 5)
  {
    if (a2 < 3)
      return 0;
    return *(_WORD *)a1 == 29281 && *(_BYTE *)(a1 + 2) == 109;
  }
  if (*(_DWORD *)a1 == 913142369 && *(_BYTE *)(a1 + 4) == 52)
    return 3;
  if (*(_DWORD *)a1 == 1836410996 && *(_BYTE *)(a1 + 4) == 98)
    return 2;
  return *(_WORD *)a1 == 29281 && *(_BYTE *)(a1 + 2) == 109;
}

uint64_t llvm::ARM::parseArchEndian(uint64_t a1, unint64_t a2)
{
  char v6;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;

  if (a2 < 5)
  {
    if (a2 < 3)
      return 0;
    if (*(_WORD *)a1 != 29281 || *(_BYTE *)(a1 + 2) != 109)
      return 0;
    goto LABEL_30;
  }
  if (*(_DWORD *)a1 == 1701671521 && *(_BYTE *)(a1 + 4) == 98)
    return 2;
  if (a2 < 7)
  {
LABEL_18:
    v6 = 1;
    goto LABEL_19;
  }
  if (*(_DWORD *)a1 == 1836410996 && *(_DWORD *)(a1 + 3) == 1650811501)
    return 2;
  if (a2 < 0xA)
    goto LABEL_18;
  if (*(_QWORD *)a1 == 0x5F34366863726161 && *(_WORD *)(a1 + 8) == 25954)
    return 2;
  v6 = 0;
LABEL_19:
  if ((*(_WORD *)a1 != 29281 || *(_BYTE *)(a1 + 2) != 109) && (*(_DWORD *)a1 != 1836410996 || *(_BYTE *)(a1 + 4) != 98))
  {
    if (a2 >= 7)
    {
      v10 = *(_DWORD *)a1 == 1668440417 && *(_DWORD *)(a1 + 3) == 875980899;
      v11 = v10;
      if (v10)
        v6 = 1;
      if ((v6 & 1) != 0)
        return v11;
    }
    else if ((v6 & 1) != 0)
    {
      return 0;
    }
    v12 = 0x616172636836345FLL;
    v13 = bswap64(*(_QWORD *)a1);
    if (v13 == 0x616172636836345FLL
      && (v13 = bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16, v12 = 13106, (_DWORD)v13 == 13106))
    {
      v14 = 0;
    }
    else if (v13 < v12)
    {
      v14 = -1;
    }
    else
    {
      v14 = 1;
    }
    return v14 == 0;
  }
LABEL_30:
  if (bswap32(*(unsigned __int16 *)(a1 + a2 - 2)) >> 16 == 25954)
    return 2;
  else
    return 1;
}

uint64_t llvm::ARM::parseArch(_BYTE *a1, unint64_t a2)
{
  const char *CanonicalArchName;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t ArchSynonym;
  size_t v11;
  char **v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
  ArchSynonym = llvm::ARM::getArchSynonym((uint64_t)CanonicalArchName, v3, v4, v5, v6, v7, v8, v9);
  v12 = &llvm::ARM::ARMArchNames;
  if (!v11)
    return *((unsigned int *)v12 + 16);
  v13 = (const void *)ArchSynonym;
  v14 = v11;
  v15 = 0;
  v16 = -(uint64_t)v11;
  do
  {
    v17 = (unint64_t)(&llvm::ARM::ARMArchNames)[v15 + 1];
    if (v17 >= v14 && !memcmp(&(&llvm::ARM::ARMArchNames)[v15][v16 + v17], v13, v14))
    {
      v12 = &(&llvm::ARM::ARMArchNames)[v15];
      return *((unsigned int *)v12 + 16);
    }
    v15 += 9;
  }
  while (v15 != 360);
  return 0;
}

uint64_t llvm::ARM::parseArchVersion(_BYTE *a1, unint64_t a2)
{
  char *CanonicalArchName;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t ArchSynonym;
  size_t v13;
  char **v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  CanonicalArchName = (char *)llvm::ARM::getCanonicalArchName(a1, a2);
  v4 = llvm::ARM::getCanonicalArchName(CanonicalArchName, v3);
  ArchSynonym = llvm::ARM::getArchSynonym((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11);
  v14 = &llvm::ARM::ARMArchNames;
  if (!v13)
    return dword_1812466EC[*((int *)v14 + 16)];
  v15 = (const void *)ArchSynonym;
  v16 = v13;
  v17 = 0;
  v18 = -(uint64_t)v13;
  do
  {
    v19 = (&llvm::ARM::ARMArchNames)[v17 + 1];
    if ((unint64_t)v19 >= v16 && !memcmp(&v19[(_QWORD)(&llvm::ARM::ARMArchNames)[v17] + v18], v15, v16))
    {
      v14 = &(&llvm::ARM::ARMArchNames)[v17];
      return dword_1812466EC[*((int *)v14 + 16)];
    }
    v17 += 9;
  }
  while (v17 != 360);
  return 0;
}

uint64_t llvm::ARM::parseArchProfile(_BYTE *a1, unint64_t a2)
{
  char *CanonicalArchName;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t ArchSynonym;
  size_t v13;
  char **v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  CanonicalArchName = (char *)llvm::ARM::getCanonicalArchName(a1, a2);
  v4 = llvm::ARM::getCanonicalArchName(CanonicalArchName, v3);
  ArchSynonym = llvm::ARM::getArchSynonym((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11);
  v14 = &llvm::ARM::ARMArchNames;
  if (!v13)
    return dword_18124678C[*((int *)v14 + 16)];
  v15 = (const void *)ArchSynonym;
  v16 = v13;
  v17 = 0;
  v18 = -(uint64_t)v13;
  do
  {
    v19 = (&llvm::ARM::ARMArchNames)[v17 + 1];
    if ((unint64_t)v19 >= v16 && !memcmp(&v19[(_QWORD)(&llvm::ARM::ARMArchNames)[v17] + v18], v15, v16))
    {
      v14 = &(&llvm::ARM::ARMArchNames)[v17];
      return dword_18124678C[*((int *)v14 + 16)];
    }
    v17 += 9;
  }
  while (v17 != 360);
  return 0;
}

void llvm::SubtargetFeatures::Split(std::vector<std::string> *a1, char *a2, char *a3)
{
  const void **v4;
  const void **v5;
  __int128 v6;
  size_t v7;
  const void *v8;
  void *v9;
  std::vector<std::string>::pointer end;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  void *__p[2];
  unint64_t v16;
  char *v17[2];
  void *v18;
  std::vector<std::string>::size_type __n;
  _QWORD v20[7];

  v20[6] = *MEMORY[0x1E0C80C00];
  v17[0] = a2;
  v17[1] = a3;
  v18 = v20;
  __n = 0x300000000;
  llvm::StringRef::split(v17, (uint64_t)&v18, 44, -1, 0);
  std::vector<std::string>::reserve(a1, __n);
  v4 = (const void **)v18;
  if (!(_DWORD)__n)
    goto LABEL_17;
  v5 = (const void **)((char *)v18 + 16 * __n);
  do
  {
    v7 = (size_t)v4[1];
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v8 = *v4;
    if (v7 >= 0x17)
    {
      v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v11 = v7 | 7;
      v12 = v11 + 1;
      v9 = operator new(v11 + 1);
      __p[1] = (void *)v7;
      v16 = v12 | 0x8000000000000000;
      __p[0] = v9;
    }
    else
    {
      HIBYTE(v16) = v4[1];
      v9 = __p;
      if (!v7)
      {
        LOBYTE(__p[0]) = 0;
        end = a1->__end_;
        if (end < a1->__end_cap_.__value_)
          goto LABEL_3;
        goto LABEL_14;
      }
    }
    memmove(v9, v8, v7);
    *((_BYTE *)v9 + v7) = 0;
    end = a1->__end_;
    if (end < a1->__end_cap_.__value_)
    {
LABEL_3:
      v6 = *(_OWORD *)__p;
      end->__r_.__value_.__r.__words[2] = v16;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v6;
      a1->__end_ = end + 1;
      goto LABEL_4;
    }
LABEL_14:
    v13 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)&a1->__begin_, (uint64_t)__p);
    v14 = SHIBYTE(v16);
    a1->__end_ = (std::vector<std::string>::pointer)v13;
    if (v14 < 0)
      operator delete(__p[0]);
LABEL_4:
    v4 += 2;
  }
  while (v4 != v5);
  v4 = (const void **)v18;
LABEL_17:
  if (v4 != v20)
    free(v4);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v5;
  char *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  std::vector<std::string>::pointer v11;

  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      abort();
    end = this->__end_;
    v5 = 24 * __n;
    v6 = (char *)operator new(24 * __n);
    v7 = (std::string *)&v6[v5];
    v8 = (std::string *)&v6[24 * (end - begin)];
    if (end == begin)
    {
      this->__begin_ = v8;
      this->__end_ = v8;
      this->__end_cap_.__value_ = v7;
    }
    else
    {
      v9 = (std::string *)&v6[24 * (end - begin)];
      do
      {
        v10 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
        v9[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v9[-1].__r_.__value_.__l.__data_ = v10;
        --v9;
        end[-1].__r_.__value_.__l.__size_ = 0;
        end[-1].__r_.__value_.__r.__words[2] = 0;
        end[-1].__r_.__value_.__r.__words[0] = 0;
        --end;
      }
      while (end != begin);
      begin = this->__begin_;
      v11 = this->__end_;
      this->__begin_ = v9;
      this->__end_ = v8;
      this->__end_cap_.__value_ = v7;
      while (v11 != begin)
      {
        if (SHIBYTE(v11[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11[-1].__r_.__value_.__l.__data_);
        --v11;
      }
    }
    if (begin)
      operator delete(begin);
  }
}

void llvm::SubtargetFeatures::AddFeature(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  int v5;
  unint64_t v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string *v9;
  std::string::size_type v10;
  char *v11;
  int v12;
  std::string v13;
  void *__p[2];
  std::string::size_type v15;
  _QWORD v16[2];

  v16[0] = a2;
  v16[1] = a3;
  if (!a3)
    return;
  v5 = *a2;
  if (v5 != 45 && v5 != 43)
  {
    if (a4)
      v8 = "+";
    else
      v8 = "-";
    llvm::StringRef::lower(v16, (uint64_t)&v13);
    v9 = std::string::insert(&v13, 0, v8);
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6 < *(_QWORD *)(a1 + 16))
      goto LABEL_5;
LABEL_10:
    v11 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a1, (uint64_t)__p);
    v12 = SHIBYTE(v15);
    *(_QWORD *)(a1 + 8) = v11;
    if (v12 < 0)
      operator delete(__p[0]);
    goto LABEL_12;
  }
  llvm::StringRef::lower(v16, (uint64_t)__p);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >= *(_QWORD *)(a1 + 16))
    goto LABEL_10;
LABEL_5:
  v7 = *(_OWORD *)__p;
  *(_QWORD *)(v6 + 16) = v15;
  *(_OWORD *)v6 = v7;
  __p[1] = 0;
  v15 = 0;
  __p[0] = 0;
  *(_QWORD *)(a1 + 8) = v6 + 24;
LABEL_12:
  if (v5 != 43 && v5 != 45 && SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

std::string *llvm::SubtargetFeatures::addFeaturesVector(uint64_t a1, std::string *__str, uint64_t a3)
{
  return std::vector<std::string>::__insert_with_size[abi:nn180100]<std::string const*,std::string const*>((void **)a1, *(_QWORD *)(a1 + 8), __str, &__str[a3], 0xAAAAAAAAAAAAAAABLL * ((24 * a3) >> 3));
}

std::vector<std::string> *llvm::SubtargetFeatures::SubtargetFeatures(std::vector<std::string> *a1, char *a2, char *a3)
{
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  llvm::SubtargetFeatures::Split(a1, a2, a3);
  return a1;
}

std::string *std::vector<std::string>::__insert_with_size[abi:nn180100]<std::string const*,std::string const*>(void **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v9;
  _BYTE *v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  std::string *v19;
  char *v20;
  char *v21;
  std::string *v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  __int128 v25;
  uint64_t v26;
  __int128 *v27;
  char *v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  std::string *v34;
  std::string *v35;
  uint64_t v36;
  std::string *v37;
  std::string *v38;
  const std::string::value_type *v39;
  std::string::size_type size;
  void *v41;
  std::string *v42;
  uint64_t v43;
  std::string *v44;
  __int128 v45;
  void *v46;
  __int128 v47;
  void *v48;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 24;
  v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1)
    return (std::string *)v7;
  v9 = __str;
  v12 = (__int128 *)a1[1];
  v11 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v12) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3)) >= a5)
    {
      v19 = &__str[a5];
      v20 = (char *)a1[1];
    }
    else
    {
      v19 = (std::string *)((char *)__str + 8 * (((uint64_t)v12 - v7) >> 3));
      v20 = (char *)a1[1];
      if (v19 != a4)
      {
        v21 = &__str->__r_.__value_.__s.__data_[8 * (((uint64_t)v12 - v7) >> 3)];
        v22 = (std::string *)a1[1];
        do
        {
          while (v21[23] < 0)
          {
            v23 = *(const std::string::value_type **)v21;
            v24 = *((_QWORD *)v21 + 1);
            v21 += 24;
            std::string::__init_copy_ctor_external(v22++, v23, v24);
            v20 += 24;
            if (v21 == (char *)a4)
              goto LABEL_18;
          }
          v25 = *(_OWORD *)v21;
          v22->__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
          *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v25;
          ++v22;
          v21 += 24;
          v20 += 24;
        }
        while (v21 != (char *)a4);
      }
LABEL_18:
      a1[1] = v20;
      if ((uint64_t)v12 - v7 < 1)
        return (std::string *)v7;
    }
    v26 = v7 + 24 * a5;
    v27 = (__int128 *)&v20[-24 * a5];
    v28 = v20;
    if (v27 < v12)
    {
      v28 = v20;
      do
      {
        v29 = *v27;
        *((_QWORD *)v28 + 2) = *((_QWORD *)v27 + 2);
        *(_OWORD *)v28 = v29;
        v28 += 24;
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *(_QWORD *)v27 = 0;
        v27 = (__int128 *)((char *)v27 + 24);
      }
      while (v27 < v12);
    }
    a1[1] = v28;
    if (v20 != (char *)v26)
    {
      v30 = v20 - 24;
      v31 = 8 * ((uint64_t)&v20[-v26] >> 3);
      do
      {
        if (v30[23] < 0)
          operator delete(*(void **)v30);
        v32 = (__int128 *)(v7 + v31 - 24);
        v33 = *v32;
        *((_QWORD *)v30 + 2) = *(_QWORD *)(v7 + v31 - 8);
        *(_OWORD *)v30 = v33;
        v30 -= 24;
        *(_BYTE *)(v7 + v31 - 1) = 0;
        *(_BYTE *)v32 = 0;
        v31 -= 24;
      }
      while (v31);
    }
    if (v19 != v9)
    {
      v34 = (std::string *)v7;
      do
        std::string::operator=(v34++, v9++);
      while (v9 != v19);
    }
    return (std::string *)v7;
  }
  v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v17 = (char *)operator new(24 * v16);
  }
  else
  {
    v17 = 0;
  }
  v35 = (std::string *)&v17[24 * v6];
  v36 = 24 * a5;
  v37 = &v35[a5];
  v38 = v35;
  do
  {
    while (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      v39 = (const std::string::value_type *)v9->__r_.__value_.__r.__words[0];
      size = v9->__r_.__value_.__l.__size_;
      ++v9;
      std::string::__init_copy_ctor_external(v38++, v39, size);
      v36 -= 24;
      if (!v36)
        goto LABEL_38;
    }
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v38->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    ++v38;
    ++v9;
    v36 -= 24;
  }
  while (v36);
LABEL_38:
  v41 = *a1;
  v42 = v35;
  if (*a1 != (void *)v7)
  {
    v43 = v7;
    v44 = v35;
    do
    {
      v42 = v44 - 1;
      v45 = *(_OWORD *)(v43 - 24);
      v44[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 - 8);
      *(_OWORD *)&v44[-1].__r_.__value_.__l.__data_ = v45;
      *(_QWORD *)(v43 - 16) = 0;
      *(_QWORD *)(v43 - 8) = 0;
      *(_QWORD *)(v43 - 24) = 0;
      v43 -= 24;
      --v44;
    }
    while ((void *)v43 != v41);
  }
  v46 = a1[1];
  if (v46 != (void *)v7)
  {
    do
    {
      v47 = *(_OWORD *)v7;
      v37->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
      *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v47;
      ++v37;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v46);
    v7 = (uint64_t)a1[1];
  }
  v48 = *a1;
  *a1 = v42;
  a1[1] = v37;
  a1[2] = &v17[24 * v16];
  while ((void *)v7 != v48)
  {
    if (*(char *)(v7 - 1) < 0)
      operator delete(*(void **)(v7 - 24));
    v7 -= 24;
  }
  if (v48)
    operator delete(v48);
  return v35;
}

uint64_t parseBPFArch(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;
  _BOOL4 v7;
  unsigned int v9;
  int v10;

  if (a2 != 6)
  {
    if (a2 != 5)
    {
      if (a2 != 3)
        return 0;
      v3 = *(_WORD *)a1 == 28770 && *(_BYTE *)(a1 + 2) == 102;
      return (8 * v3);
    }
    if (*(_DWORD *)a1 != 1701212258 || *(_BYTE *)(a1 + 4) != 98)
    {
      v9 = bswap32(*(_DWORD *)a1);
      if (v9 == 1651533413)
        return 8 * (*(_BYTE *)(a1 + 4) == 108);
      if (v9 < 0x62706665)
        v10 = -1;
      else
        v10 = 1;
      return 8 * (v10 == 0);
    }
    return 9;
  }
  if (*(_DWORD *)a1 == 1600548962 && *(_WORD *)(a1 + 4) == 25954)
    return 9;
  v7 = *(_DWORD *)a1 == 1600548962 && *(_WORD *)(a1 + 4) == 25964;
  return (8 * v7);
}

uint64_t llvm::Triple::Triple(uint64_t a1, llvm::Twine *a2)
{
  BOOL v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v26;
  int v27;
  int v29;
  uint64_t v30;
  int v31;
  char *v33;
  unint64_t v34;
  int v35;
  char v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x1E0C80C00];
  llvm::Twine::str(a2, (std::string *)a1);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = *(char *)(a1 + 23) < 0;
  v4 = *(char **)a1;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
    v5 = *(_QWORD *)(a1 + 8);
  v37 = v39;
  v38 = 0x400000000;
  if (!v3)
    v4 = (char *)a1;
  v33 = v4;
  v34 = v5;
  llvm::StringRef::split(&v33, (uint64_t)&v37, 45, 3, 1);
  if (!(_DWORD)v38)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 44))
      goto LABEL_47;
    goto LABEL_46;
  }
  *(_DWORD *)(a1 + 24) = parseArch(*(_QWORD *)v37, *((_QWORD *)v37 + 1), v6, v7, v8, v9, v10, v11);
  *(_DWORD *)(a1 + 28) = parseSubArch(*(_DWORD **)v37, *((_QWORD *)v37 + 1));
  v13 = v38;
  if (v38 < 2)
  {
    v18 = *(_QWORD *)v37;
    v19 = *((_QWORD *)v37 + 1);
    v33 = *(char **)v37;
    v34 = v19;
    LOBYTE(v35) = 0;
    v36 = 0;
    if (v19 >= 7)
    {
      if (*(_DWORD *)v18 == 1936746861 && *(_DWORD *)(v18 + 3) == 842231411)
      {
        v29 = 2;
        goto LABEL_40;
      }
      if (*(_DWORD *)v18 != 1936746861 || *(_WORD *)(v18 + 4) != 13366)
      {
        if (v19 < 9)
        {
LABEL_41:
          v30 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases((uint64_t)&v33, "mips", 4, "mipsel", 6, "mipsr6", 6, v12, "mipsr6el", 8, 1);
          if (*(_BYTE *)(v30 + 20))
            v31 = *(_DWORD *)(v30 + 16);
          else
            v31 = 0;
          *(_DWORD *)(a1 + 40) = v31;
          goto LABEL_45;
        }
        if (*(_QWORD *)v18 != 0x366173697370696DLL || *(_BYTE *)(v18 + 8) != 52)
        {
          v26 = *(_QWORD *)v18;
          v27 = *(unsigned __int8 *)(v18 + 8);
          if (v26 != 0x336173697370696DLL || v27 != 50)
            goto LABEL_41;
          v29 = 1;
          goto LABEL_40;
        }
      }
    }
    else
    {
      if (v19 != 6)
        goto LABEL_41;
      v20 = *(_DWORD *)v18;
      v21 = *(unsigned __int16 *)(v18 + 4);
      if (v20 != 1936746861 || v21 != 13366)
        goto LABEL_41;
    }
    v29 = 3;
LABEL_40:
    v35 = v29;
    v36 = 1;
    goto LABEL_41;
  }
  v14 = v37;
  *(_DWORD *)(a1 + 32) = parseVendor(*((_QWORD *)v37 + 2), *((_QWORD *)v37 + 3));
  if (v13 == 2)
    goto LABEL_45;
  *(_DWORD *)(a1 + 36) = parseOS(v14[4], v14[5]);
  if (v13 < 4)
    goto LABEL_45;
  v15 = v14[6];
  v16 = v14[7];
  *(_DWORD *)(a1 + 40) = parseEnvironment(v15, v16);
  v17 = parseFormat(v15, v16);
  *(_DWORD *)(a1 + 44) = v17;
  if (v17)
    goto LABEL_47;
LABEL_46:
  *(_DWORD *)(a1 + 44) = getDefaultFormat(*(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 36));
LABEL_47:
  if (v37 != v39)
    free(v37);
  return a1;
}

uint64_t parseArch(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v22;
  int v23;
  int v25;
  int v26;
  int v32;
  int v33;
  int v38;
  BOOL v41;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char v61;
  _DWORD *v62;
  int v64;
  int *v65;
  uint64_t v66;
  int v67;
  int v68;
  BOOL v75;
  BOOL v76;
  int v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  int v112;
  int v114;
  BOOL v117;
  BOOL v119;
  BOOL v121;
  BOOL v123;
  BOOL v125;
  uint64_t v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  BOOL v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v156;
  int v157;
  int **v158;
  int v159;
  int *v160;
  int *v161;
  int v162;
  int *v163;
  int *v166;
  int v168;
  int v169;
  int v172;
  int v173;
  uint64_t v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  BOOL v182;
  BOOL v183;
  int *v185;
  uint64_t v186;
  int v187;
  int v188;
  int *v190;
  uint64_t v191;
  int v192;
  int v193;
  unint64_t v195;
  uint64_t *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v203;
  uint64_t v204;
  uint64_t v207;
  uint64_t v208;
  int v210;
  int v211;
  int v212;
  unsigned int v213;
  char *CanonicalArchName;
  unint64_t v215;
  char *v216;
  unint64_t v217;
  int v218;
  int v219;
  int *v221;
  int v223;
  int v224;
  uint64_t *v226;
  int v229;
  int v230;
  uint64_t *v232;
  uint64_t v234;
  uint64_t v235;
  _QWORD v238[2];
  char v239;
  char v240;

  v238[0] = a1;
  v238[1] = a2;
  v239 = 0;
  v240 = 0;
  v10 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases((uint64_t)v238, "i386", 4, "i486", 4, "i586", 4, a8, "i686", 4, 37);
  if (!*(_BYTE *)(v10 + 20))
  {
    v17 = *(int **)v10;
    switch(*(_QWORD *)(v10 + 8))
    {
      case 4:
        if (*v17 == 909653865 || *v17 == 909654121 || *v17 == 909654377)
        {
          v18 = 37;
          goto LABEL_33;
        }
        break;
      case 5:
        v19 = *v17;
        v20 = *((unsigned __int8 *)v17 + 4);
        if (v19 == 912551265 && v20 == 52)
          goto LABEL_32;
        break;
      case 6:
        v22 = *v17;
        v23 = *((unsigned __int16 *)v17 + 2);
        if (v22 == 1597388920 && v23 == 13366)
          goto LABEL_32;
        break;
      case 7:
        v25 = *v17;
        v26 = *(int *)((char *)v17 + 3);
        if (v25 == 1597388920 && v26 == 1748252255)
        {
LABEL_32:
          v18 = 38;
LABEL_33:
          *(_DWORD *)(v10 + 16) = v18;
          *(_BYTE *)(v10 + 20) = 1;
        }
        break;
      default:
        break;
    }
  }
  v12 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v10, "powerpc", 7, "powerpcspe", 10, "ppc", 3, v11, "ppc32", 5, 21);
  if (!*(_BYTE *)(v12 + 20))
  {
    v14 = *(_QWORD *)v12;
    v15 = *(_QWORD *)(v12 + 8);
    switch(v15)
    {
      case 3:
        if (*(_WORD *)v14 == 28784 && *(_BYTE *)(v14 + 2) == 117)
          goto LABEL_72;
        goto LABEL_78;
      case 5:
        if (*(_DWORD *)v14 == 1818456176 && *(_BYTE *)(v14 + 4) == 101)
          goto LABEL_73;
        if (*(_DWORD *)v14 != 912486512 || *(_BYTE *)(v14 + 4) != 52)
          goto LABEL_78;
        goto LABEL_72;
      case 6:
        if (*(_DWORD *)v14 == 1633907576 && *(_WORD *)(v14 + 4) == 25964)
        {
          v38 = 1;
          goto LABEL_156;
        }
        if (*(_DWORD *)v14 != 913142369 || *(_WORD *)(v14 + 4) != 25908)
        {
          v32 = 0;
          v33 = 1;
          goto LABEL_118;
        }
        goto LABEL_148;
      case 7:
        if (*(_DWORD *)v14 == 862154864 && *(_DWORD *)(v14 + 3) == 1701589555)
          goto LABEL_73;
        if (*(_DWORD *)v14 != 912486512 || *(_DWORD *)(v14 + 3) != 1701590070)
          goto LABEL_78;
        goto LABEL_108;
      case 8:
LABEL_94:
        if (*(_QWORD *)v14 == 0x6265656C61637378)
          goto LABEL_147;
        if (*(_QWORD *)v14 != 0x32335F34366D7261)
          goto LABEL_96;
        goto LABEL_106;
      case 9:
        if (*(_QWORD *)v14 == 0x6C63707265776F70 && *(_BYTE *)(v14 + 8) == 101)
        {
LABEL_73:
          v38 = 22;
        }
        else if (*(_QWORD *)v14 == 0x3663707265776F70 && *(_BYTE *)(v14 + 8) == 52)
        {
LABEL_72:
          v38 = 23;
        }
        else
        {
LABEL_78:
          switch(v15)
          {
            case 3:
              if (*(_WORD *)v14 == 29281 && *(_BYTE *)(v14 + 2) == 99)
              {
                v38 = 6;
              }
              else
              {
                v41 = *(_WORD *)v14 == 29281 && *(_BYTE *)(v14 + 2) == 109;
                v38 = 1;
                if (!v41)
                {
                  v32 = 0;
                  v33 = 0;
                  goto LABEL_127;
                }
              }
              break;
            case 7:
              if (*(_DWORD *)v14 != 1668440417 || *(_DWORD *)(v14 + 3) != 875980899)
              {
                v33 = 0;
                v32 = 1;
                if (*(_DWORD *)v14 != 913142369 || *(_DWORD *)(v14 + 3) != 1667576886)
                  goto LABEL_118;
              }
              goto LABEL_148;
            case 8:
              goto LABEL_94;
            case 10:
              goto LABEL_97;
            default:
              goto LABEL_88;
          }
        }
        goto LABEL_156;
      case 10:
LABEL_97:
        if (*(_QWORD *)v14 == 0x5F34366863726161 && *(_WORD *)(v14 + 8) == 25954)
        {
          v38 = 4;
          goto LABEL_156;
        }
        if (*(_QWORD *)v14 == 0x5F34366863726161 && *(_WORD *)(v14 + 8) == 12851)
        {
LABEL_106:
          v38 = 5;
          goto LABEL_156;
        }
LABEL_96:
        v32 = 0;
        v33 = 0;
LABEL_118:
        v38 = 0;
        goto LABEL_127;
      case 11:
        if (*(_QWORD *)v14 != 0x3663707265776F70 || *(_QWORD *)(v14 + 3) != 0x656C343663707265)
          goto LABEL_78;
LABEL_108:
        v38 = 24;
        goto LABEL_156;
      default:
LABEL_88:
        if (v15 == 5)
        {
          if (*(_DWORD *)v14 == 913142369 && *(_BYTE *)(v14 + 4) == 52)
          {
LABEL_148:
            v38 = 3;
            goto LABEL_156;
          }
          v32 = 0;
          v33 = 0;
          v38 = 0;
          if (*(_DWORD *)v14 == 1701671521 && *(_BYTE *)(v14 + 4) == 98)
          {
LABEL_147:
            v38 = 2;
            goto LABEL_156;
          }
          if (*(_DWORD *)v14 == 1836410996 && *(_BYTE *)(v14 + 4) == 98)
          {
            v38 = 35;
            goto LABEL_156;
          }
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v38 = 0;
        }
LABEL_127:
        if (v32)
        {
          if (*(_DWORD *)v14 == 1836410996 && *(_DWORD *)(v14 + 3) == 1650811501)
          {
            v38 = 36;
            goto LABEL_156;
          }
        }
        if (v38)
        {
          if (*(_WORD *)v14 == 30305 && *(_BYTE *)(v14 + 2) == 114)
          {
            v38 = 7;
            goto LABEL_156;
          }
        }
        if (v15 == 4 && *(_DWORD *)v14 == 1798846061)
        {
          v38 = 15;
          goto LABEL_156;
        }
        if (v33)
        {
          if (*(_DWORD *)v14 == 879784813 && *(_WORD *)(v14 + 4) == 12339)
          {
            v38 = 20;
            goto LABEL_156;
          }
        }
        if (v15 == 4 && *(_DWORD *)v14 == 1936746861)
        {
          v38 = 16;
LABEL_156:
          *(_DWORD *)(v12 + 16) = v38;
          *(_BYTE *)(v12 + 20) = 1;
          break;
        }
        break;
    }
  }
  v52 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v12, "mipseb", 6, "mipsallegrex", 12, "mipsisa32r6", 11, v13, "mipsr6", 6, 16);
  v54 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v52, "mipsel", 6, "mipsallegrexel", 14, "mipsisa32r6el", 13, v53, "mipsr6el", 8, 17);
  if (!*(_BYTE *)(v54 + 20))
  {
    v65 = *(int **)v54;
    v66 = *(_QWORD *)(v54 + 8);
    if (v66 == 8)
    {
      if (*(_QWORD *)v65 != 0x626534367370696DLL)
        goto LABEL_158;
    }
    else
    {
      if (v66 != 6)
        goto LABEL_158;
      v67 = *v65;
      v68 = *((unsigned __int16 *)v65 + 2);
      if (v67 != 1936746861 || v68 != 13366)
        goto LABEL_158;
    }
    *(_DWORD *)(v54 + 16) = 18;
    *(_BYTE *)(v54 + 20) = 1;
  }
LABEL_158:
  v56 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v54, "mipsn32", 7, "mipsisa64r6", 11, "mips64r6", 8, v55, "mipsn32r6", 9, 18);
  if (!*(_BYTE *)(v56 + 20) && *(_QWORD *)(v56 + 8) == 8 && **(_QWORD **)v56 == 0x6C6534367370696DLL)
  {
    *(_DWORD *)(v56 + 16) = 19;
    *(_BYTE *)(v56 + 20) = 1;
  }
  v58 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v56, "mipsn32el", 9, "mipsisa64r6el", 13, "mips64r6el", 10, v57, "mipsn32r6el", 11, 19);
  if (!*(_BYTE *)(v58 + 20))
  {
    v60 = *(_QWORD *)(v58 + 8);
    switch(v60)
    {
      case 7:
        v62 = *(_DWORD **)v58;
        if (**(_DWORD **)v58 == 1668508018 && *(_DWORD *)(*(_QWORD *)v58 + 3) == 842233443)
        {
          v64 = 27;
          goto LABEL_317;
        }
        if (*v62 == 1668508018 && *(_DWORD *)((char *)v62 + 3) == 875984483)
        {
          v64 = 28;
          goto LABEL_317;
        }
        if (*v62 == 1635280232 && *(_DWORD *)((char *)v62 + 3) == 1852794721)
        {
          v64 = 12;
          goto LABEL_317;
        }
        if (*v62 != 1953724787 || *(_DWORD *)((char *)v62 + 3) != 2053989748)
        {
          if (*v62 == 1918988403 && *(_DWORD *)((char *)v62 + 3) == 1818583922)
          {
            v64 = 31;
          }
          else
          {
            v75 = *v62 == 1918988403 && *(_DWORD *)((char *)v62 + 3) == 964060018;
            if (v75 || (*v62 == 1918988403 ? (v76 = *(_DWORD *)((char *)v62 + 3) == 875979634) : (v76 = 0), v76))
            {
              v64 = 30;
            }
            else
            {
              if (*v62 != 1953527406 || *(_DWORD *)((char *)v62 + 3) != 875985012)
                goto LABEL_254;
              v64 = 42;
            }
          }
          goto LABEL_317;
        }
        break;
      case 6:
        if (**(_DWORD **)v58 != 1734634849 || *(_WORD *)(*(_QWORD *)v58 + 4) != 28259)
        {
          v61 = 1;
          v62 = *(_DWORD **)v58;
          goto LABEL_222;
        }
LABEL_316:
        v64 = 26;
LABEL_317:
        *(_DWORD *)(v58 + 16) = v64;
        *(_BYTE *)(v58 + 20) = 1;
        goto LABEL_318;
      case 4:
        if (**(_DWORD **)v58 != 808466034)
        {
          v61 = 0;
          v62 = *(_DWORD **)v58;
LABEL_222:
          if ((v61 & 1) == 0)
          {
LABEL_254:
            switch(v60)
            {
              case 6:
                v86 = *v62;
                v87 = *((unsigned __int16 *)v62 + 2);
                v88 = v86 == 1734634849;
                v89 = 30064;
                goto LABEL_301;
              case 13:
                if (*(_QWORD *)v62 == 0x675F757067646D61 && *(_QWORD *)((char *)v62 + 5) == 0x3030367866675F75)
                  goto LABEL_316;
                if (*(_QWORD *)v62 == 0x675F757067646D61 && *(_QWORD *)((char *)v62 + 5) == 0x3130377866675F75)
                  goto LABEL_316;
                if (*(_QWORD *)v62 == 0x675F757067646D61 && *(_QWORD *)((char *)v62 + 5) == 0x3430377866675F75)
                  goto LABEL_316;
                if (*(_QWORD *)v62 == 0x675F757067646D61 && *(_QWORD *)((char *)v62 + 5) == 0x3330387866675F75)
                  goto LABEL_316;
                if (*(_QWORD *)v62 == 0x675F757067646D61 && *(_QWORD *)((char *)v62 + 5) == 0x3230387866675F75)
                  goto LABEL_316;
                if (*(_QWORD *)v62 == 0x675F757067646D61 && *(_QWORD *)((char *)v62 + 5) == 0x3030397866675F75)
                  goto LABEL_316;
                if (*(_QWORD *)v62 == 0x675F757067646D61 && *(_QWORD *)((char *)v62 + 5) == 0x3430397866675F75)
                  goto LABEL_316;
                v97 = *(_QWORD *)v62;
                v98 = *(_QWORD *)((char *)v62 + 5);
                v99 = v97 == 0x675F757067646D61;
                v100 = 0x3630397866675F75;
                goto LABEL_311;
              case 14:
                v101 = *(_QWORD *)v62;
                v98 = *(_QWORD *)((char *)v62 + 6);
                v99 = v101 == 0x675F757067646D61;
                v100 = 0x303130317866675FLL;
                goto LABEL_311;
              case 17:
                v102 = *(_QWORD *)v62;
                v103 = *((_QWORD *)v62 + 1);
                v87 = *((unsigned __int8 *)v62 + 16);
                v88 = v102 == 0x675F757067646D61 && v103 == 0x776E5F3030367866;
                v89 = 104;
LABEL_301:
                if (!v88 || v87 != v89)
                  goto LABEL_318;
                goto LABEL_316;
              case 19:
                v105 = *(_QWORD *)v62;
                v106 = *((_QWORD *)v62 + 1);
                v98 = *(_QWORD *)((char *)v62 + 11);
                v99 = v105 == 0x675F757067646D61 && v106 == 0x6E5F303130317866;
                v100 = 0x6367736E5F303130;
LABEL_311:
                if (!v99 || v98 != v100)
                  goto LABEL_318;
                goto LABEL_316;
              default:
                goto LABEL_318;
            }
          }
          if (*v62 == 1818847081 && *((_WORD *)v62 + 2) == 12851)
          {
            v64 = 43;
          }
          else
          {
            if (*v62 != 1818847081 || *((_WORD *)v62 + 2) != 13366)
              goto LABEL_254;
            v64 = 44;
          }
          goto LABEL_317;
        }
        v64 = 25;
        goto LABEL_317;
      default:
        v62 = *(_DWORD **)v58;
        if (v60 != 5)
        {
          v61 = 0;
          if (v60 != 3)
            goto LABEL_222;
          if (*(_WORD *)v62 != 25460 || *((_BYTE *)v62 + 2) != 101)
            goto LABEL_222;
          v64 = 33;
          goto LABEL_317;
        }
        if (*v62 != 809055091 || *((_BYTE *)v62 + 4) != 120)
        {
          if (*v62 == 1918988403 && *((_BYTE *)v62 + 4) == 99)
          {
            v64 = 29;
          }
          else if (*v62 == 1818583924 && *((_BYTE *)v62 + 4) == 101)
          {
            v64 = 34;
          }
          else if (*v62 == 1919902584 && *((_BYTE *)v62 + 4) == 101)
          {
            v64 = 39;
          }
          else
          {
            if (*v62 != 1953527406 || *((_BYTE *)v62 + 4) != 120)
              goto LABEL_254;
            v64 = 41;
          }
          goto LABEL_317;
        }
        break;
    }
    v64 = 32;
    goto LABEL_317;
  }
LABEL_318:
  v108 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v58, "amdgpu_gfx1011", 14, "amdgpu_gfx1012", 14, "amdgpu_gfx1030", 14, v59, "amdgpu_gfx1032", 14, 26);
  if (!*(_BYTE *)(v108 + 20))
  {
    v110 = *(uint64_t **)v108;
    switch(*(_QWORD *)(v108 + 8))
    {
      case 8:
        if (*v110 == 0x7570676C65746E69)
          goto LABEL_403;
        break;
      case 9:
        v111 = *v110;
        v112 = *((unsigned __int8 *)v110 + 8);
        if (v111 == 0x706761696469766ELL && v112 == 117)
        {
          v114 = 42;
          goto LABEL_404;
        }
        break;
      case 0x12:
        if (*v110 == 0x7570676C65746E69 && v110[1] == 0x3274675F6C6B735FLL && *((_WORD *)v110 + 8) == 13938)
          goto LABEL_403;
        v117 = *v110 == 0x7570676C65746E69 && v110[1] == 0x3274675F6C6B735FLL;
        if (v117 && *((_WORD *)v110 + 8) == 14194)
          goto LABEL_403;
        v119 = *v110 == 0x7570676C65746E69 && v110[1] == 0x3274675F6C626B5FLL;
        if (v119 && *((_WORD *)v110 + 8) == 12402)
          goto LABEL_403;
        v121 = *v110 == 0x7570676C65746E69 && v110[1] == 0x3274675F6C626B5FLL;
        if (v121 && *((_WORD *)v110 + 8) == 12914)
          goto LABEL_403;
        v123 = *v110 == 0x7570676C65746E69 && v110[1] == 0x3274675F6C626B5FLL;
        if (v123 && *((_WORD *)v110 + 8) == 13426)
          goto LABEL_403;
        v125 = *v110 == 0x7570676C65746E69 && v110[1] == 0x3374675F6C626B5FLL;
        if (v125 && *((_WORD *)v110 + 8) == 12658)
          goto LABEL_403;
        v127 = *v110;
        v128 = v110[1];
        v129 = *((unsigned __int16 *)v110 + 8);
        v130 = v127 == 0x7570676C65746E69 && v128 == 0x3374675F6C626B5FLL;
        if (v130 && v129 == 13938)
          goto LABEL_403;
        break;
      case 0x13:
        v132 = *v110;
        v133 = v110[1];
        v134 = *(uint64_t *)((char *)v110 + 11);
        if (v132 == 0x7570676C65746E69 && v133 == 0x3374675F6C6B735FLL && v134 == 0x3031723374675F6CLL)
          goto LABEL_403;
        break;
      case 0x14:
        v138 = *v110 == 0x7570676C65746E69 && v110[1] == 0x3678315F6C63695FLL && *((_DWORD *)v110 + 4) == 930232440;
        if (v138
          || ((v139 = *v110, v140 = v110[1], v141 = *((unsigned int *)v110 + 4), v139 == 0x7570676C65746E69)
            ? (v142 = v140 == 0x3878315F6C63695FLL)
            : (v142 = 0),
              v142 ? (v143 = v141 == 930232440) : (v143 = 0),
              v143))
        {
LABEL_403:
          v114 = 44;
LABEL_404:
          *(_DWORD *)(v108 + 16) = v114;
          *(_BYTE *)(v108 + 20) = 1;
        }
        break;
      default:
        break;
    }
  }
  v144 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v108, "nvidiagpu_gk", 12, "nvidiagpu_gm", 12, "nvidiagpu_gp", 12, v109, "nvidiagpu_gv", 12, 42);
  v146 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v144, "air32", 5, "air32_v16", 9, "air32_v18", 9, v145, "air32_v111", 10, 45);
  if (!*(_BYTE *)(v146 + 20)
    && *(_QWORD *)(v146 + 8) == 9
    && **(_QWORD **)v146 == 0x32765F3233726961
    && *(_BYTE *)(*(_QWORD *)v146 + 8) == 48)
  {
    *(_DWORD *)(v146 + 16) = 45;
    *(_BYTE *)(v146 + 20) = 1;
  }
  v149 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(v146, "air32_v21", 9, "air32_v22", 9, "air32_v23", 9, v147, "air32_v24", 9, "air32_v25", 9, "air32_v26", 9, "air32_v27", 9, "air32_v28", 9, 45);
  v151 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v149, "air32_amdgpu", 12, "air32_applegpu", 14, "air32_intelgpu", 14, v150, "air32_nvidiagpu", 15, 45);
  v153 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v151, "air64", 5, "air64_v16", 9, "air64_v18", 9, v152, "air64_v111", 10, 46);
  if (!*(_BYTE *)(v153 + 20)
    && *(_QWORD *)(v153 + 8) == 9
    && **(_QWORD **)v153 == 0x32765F3436726961
    && *(_BYTE *)(*(_QWORD *)v153 + 8) == 48)
  {
    *(_DWORD *)(v153 + 16) = 46;
    *(_BYTE *)(v153 + 20) = 1;
  }
  v156 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(v153, "air64_v21", 9, "air64_v22", 9, "air64_v23", 9, v154, "air64_v24", 9, "air64_v25", 9, "air64_v26", 9, "air64_v27", 9, "air64_v28", 9, 46);
  v158 = (int **)llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v156, "air64_amdgpu", 12, "air64_applegpu", 14, "air64_intelgpu", 14, v157, "air64_nvidiagpu", 15, 46);
  if (!*((_BYTE *)v158 + 20))
  {
    v160 = v158[1];
    switch((unint64_t)v160)
    {
      case 4uLL:
        v161 = *v158;
        if (**v158 == 842229100)
        {
          v162 = 47;
          goto LABEL_468;
        }
        if (*v161 == 875980140)
        {
          v162 = 48;
          goto LABEL_468;
        }
        if (*v161 == 1919512691)
        {
          v162 = 53;
          goto LABEL_468;
        }
        break;
      case 5uLL:
        v163 = *v158;
        if (**v158 == 1768189281 && *((_BYTE *)*v158 + 4) == 108)
        {
          v162 = 49;
          goto LABEL_468;
        }
        if (*v163 == 1767994216 && *((_BYTE *)v163 + 4) == 108)
        {
          v162 = 51;
          goto LABEL_468;
        }
        goto LABEL_454;
      case 6uLL:
        goto LABEL_446;
      case 7uLL:
        v166 = *v158;
        if (**v158 == 1768189281 && *(int *)((char *)*v158 + 3) == 875981929)
        {
          v162 = 50;
          goto LABEL_468;
        }
        v168 = *v166;
        v169 = *(int *)((char *)v166 + 3);
        if (v168 == 1767994216 && v169 == 875981929)
        {
          v162 = 52;
          goto LABEL_468;
        }
        if (v160 == (int *)6)
        {
LABEL_446:
          if (**v158 != 1919512691 || *((_WORD *)*v158 + 2) != 13366)
            break;
          v162 = 54;
LABEL_468:
          *((_DWORD *)v158 + 4) = v162;
          *((_BYTE *)v158 + 20) = 1;
          break;
        }
LABEL_452:
        v163 = *v158;
        if (v160 == (int *)8)
        {
          if (*(_QWORD *)v163 != 0x302E317672697073 && *(_QWORD *)v163 != 0x312E317672697073)
            break;
        }
        else
        {
          if (v160 != (int *)5)
            break;
LABEL_454:
          v172 = *v163;
          v173 = *((unsigned __int8 *)v163 + 4);
          if (v172 != 1919512691 || v173 != 118)
            break;
        }
        v162 = 55;
        goto LABEL_468;
      default:
        goto LABEL_452;
    }
  }
  v175 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases((uint64_t)v158, "spirv1.2", 8, "spirv1.3", 8, "spirv1.4", 8, v159, "spirv1.5", 8, 55);
  if (*(_BYTE *)(v175 + 20))
    goto LABEL_470;
  v185 = *(int **)v175;
  v186 = *(_QWORD *)(v175 + 8);
  if (v186 != 11)
  {
    if (v186 != 7)
      goto LABEL_470;
    v187 = *v185;
    v188 = *(int *)((char *)v185 + 3);
    if (v187 != 1919512691 || v188 != 842233458)
      goto LABEL_470;
LABEL_539:
    *(_DWORD *)(v175 + 16) = 56;
    *(_BYTE *)(v175 + 20) = 1;
    goto LABEL_470;
  }
  if (*(_QWORD *)v185 == 0x7632337672697073 && *(_QWORD *)((char *)v185 + 3) == 0x302E317632337672)
    goto LABEL_539;
  v203 = *(_QWORD *)v185;
  v204 = *(_QWORD *)((char *)v185 + 3);
  if (v203 == 0x7632337672697073 && v204 == 0x312E317632337672)
    goto LABEL_539;
LABEL_470:
  v177 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v175, "spirv32v1.2", 11, "spirv32v1.3", 11, "spirv32v1.4", 11, v176, "spirv32v1.5", 11, 56);
  if (*(_BYTE *)(v177 + 20))
    goto LABEL_471;
  v190 = *(int **)v177;
  v191 = *(_QWORD *)(v177 + 8);
  if (v191 != 11)
  {
    if (v191 != 7)
      goto LABEL_471;
    v192 = *v190;
    v193 = *(int *)((char *)v190 + 3);
    if (v192 != 1919512691 || v193 != 875984498)
      goto LABEL_471;
LABEL_549:
    *(_DWORD *)(v177 + 16) = 57;
    *(_BYTE *)(v177 + 20) = 1;
    goto LABEL_471;
  }
  if (*(_QWORD *)v190 == 0x7634367672697073 && *(_QWORD *)((char *)v190 + 3) == 0x302E317634367672)
    goto LABEL_549;
  v207 = *(_QWORD *)v190;
  v208 = *(_QWORD *)((char *)v190 + 3);
  if (v207 == 0x7634367672697073 && v208 == 0x312E317634367672)
    goto LABEL_549;
LABEL_471:
  v179 = llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(v177, "spirv64v1.2", 11, "spirv64v1.3", 11, "spirv64v1.4", 11, v178, "spirv64v1.5", 11, 57);
  if (*(_BYTE *)(v179 + 20))
  {
    v180 = *(unsigned int *)(v179 + 16);
    if ((_DWORD)v180)
      return v180;
  }
  else
  {
    v195 = *(_QWORD *)(v179 + 8);
    if (v195 >= 7)
    {
      if (**(_DWORD **)v179 == 1768710507 && *(_DWORD *)(*(_QWORD *)v179 + 3) == 1633840489)
      {
        v180 = 58;
      }
      else if (v195 == 11)
      {
LABEL_598:
        v232 = *(uint64_t **)v179;
        if (**(_QWORD **)v179 == 0x637261676E6F6F6CLL && *(_QWORD *)(*(_QWORD *)v179 + 3) == 0x323368637261676ELL)
        {
          v180 = 13;
        }
        else
        {
          v234 = *v232;
          v235 = *(uint64_t *)((char *)v232 + 3);
          if (v234 != 0x637261676E6F6F6CLL || v235 != 0x343668637261676ELL)
            goto LABEL_473;
          v180 = 14;
        }
      }
      else
      {
        if (v195 != 14)
          goto LABEL_473;
        v197 = *(uint64_t **)v179;
        if (**(_QWORD **)v179 == 0x63737265646E6572 && *(_QWORD *)(*(_QWORD *)v179 + 6) == 0x3233747069726373)
        {
          v180 = 63;
        }
        else
        {
          v199 = *v197;
          v200 = *(uint64_t *)((char *)v197 + 6);
          if (v199 != 0x63737265646E6572 || v200 != 0x3436747069726373)
            goto LABEL_473;
          v180 = 64;
        }
      }
LABEL_619:
      *(_DWORD *)(v179 + 16) = v180;
      *(_BYTE *)(v179 + 20) = 1;
      return v180;
    }
    switch(v195)
    {
      case 2uLL:
        if (**(_WORD **)v179 != 25974)
          break;
        v180 = 65;
        goto LABEL_619;
      case 4uLL:
        goto LABEL_608;
      case 5uLL:
        v221 = *(int **)v179;
        if (**(_DWORD **)v179 == 1634623852 && *(_BYTE *)(*(_QWORD *)v179 + 4) == 105)
        {
          v180 = 60;
          goto LABEL_619;
        }
        v223 = *v221;
        v224 = *((unsigned __int8 *)v221 + 4);
        if (v223 == 1986095219 && v224 == 101)
        {
          v180 = 59;
          goto LABEL_619;
        }
        if (v195 == 4)
        {
LABEL_608:
          if (**(_DWORD **)v179 == 2037085027)
          {
            v180 = 10;
          }
          else
          {
            if (**(_DWORD **)v179 != 1818851428)
              break;
            v180 = 11;
          }
          goto LABEL_619;
        }
        if (v195 != 6)
          break;
LABEL_584:
        v226 = *(uint64_t **)v179;
        if (**(_DWORD **)v179 == 1836278135 && *(_WORD *)(*(_QWORD *)v179 + 4) == 12851)
        {
          v180 = 61;
          goto LABEL_619;
        }
        if (*(_DWORD *)v226 == 1836278135 && *((_WORD *)v226 + 2) == 13366)
        {
          v180 = 62;
          goto LABEL_619;
        }
        v229 = *(_DWORD *)v226;
        v230 = *((unsigned __int16 *)v226 + 2);
        if (v229 == 1852142712 && v230 == 24947)
        {
          v180 = 40;
          goto LABEL_619;
        }
        break;
      case 6uLL:
        goto LABEL_584;
      case 0xBuLL:
        goto LABEL_598;
      default:
        break;
    }
  }
LABEL_473:
  if (a2 < 3)
    return 0;
  v181 = *(_WORD *)a1 == 29281 && *(_BYTE *)(a1 + 2) == 109;
  if (v181
    || a2 >= 5
    && (*(_DWORD *)a1 == 1836410996 ? (v182 = *(_BYTE *)(a1 + 4) == 98) : (v182 = 0),
        v182 || a2 >= 7 && (*(_DWORD *)a1 == 1668440417 ? (v183 = *(_DWORD *)(a1 + 3) == 875980899) : (v183 = 0), v183)))
  {
    v210 = llvm::ARM::parseArchISA(a1, a2);
    v211 = llvm::ARM::parseArchEndian(a1, a2);
    v212 = v211;
    if (v211 == 2)
    {
      if ((v210 - 1) <= 2)
      {
        v213 = dword_1812468D4[v210 - 1];
        CanonicalArchName = (char *)llvm::ARM::getCanonicalArchName((_BYTE *)a1, a2);
        if (!v215)
          return 0;
LABEL_560:
        v216 = CanonicalArchName;
        v217 = v215;
        if (v210 != 2 || v215 == 1 || *(_WORD *)CanonicalArchName != 12918 && *(_WORD *)CanonicalArchName != 13174)
        {
          v218 = llvm::ARM::parseArchProfile(CanonicalArchName, v215);
          v219 = llvm::ARM::parseArchVersion(v216, v217);
          if (v212 == 2)
            LODWORD(v180) = 36;
          else
            LODWORD(v180) = 35;
          if (v219 == 6 && v218 == 3)
            return v180;
          else
            return v213;
        }
        return 0;
      }
    }
    else if (v211 == 1 && (v210 - 1) < 3)
    {
      v213 = dword_1812468C8[v210 - 1];
      CanonicalArchName = (char *)llvm::ARM::getCanonicalArchName((_BYTE *)a1, a2);
      if (!v215)
        return 0;
      goto LABEL_560;
    }
    v213 = 0;
    CanonicalArchName = (char *)llvm::ARM::getCanonicalArchName((_BYTE *)a1, a2);
    if (!v215)
      return 0;
    goto LABEL_560;
  }
  if (*(_WORD *)a1 != 28770 || *(_BYTE *)(a1 + 2) != 102)
    return 0;
  return parseBPFArch(a1, a2);
}

uint64_t parseSubArch(_DWORD *a1, unint64_t a2)
{
  char *CanonicalArchName;
  unint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  char v15;
  char v16;

  if (a2 >= 4
    && *a1 == 1936746861
    && (*(_DWORD *)((char *)a1 + a2 - 4) == 1818572402 || *(_WORD *)((char *)a1 + a2 - 2) == 13938))
  {
    return 39;
  }
  switch(a2)
  {
    case 6uLL:
      if (!memcmp(a1, "arm64e", 6uLL))
        return 34;
      break;
    case 7uLL:
      if (!memcmp(a1, "arm64ec", 7uLL))
        return 35;
      break;
    case 0xAuLL:
      if (*(_QWORD *)a1 == 0x7363707265776F70 && *((_WORD *)a1 + 4) == 25968)
        return 40;
      break;
    default:
      if (a2 < 5)
      {
LABEL_21:
        CanonicalArchName = (char *)llvm::ARM::getCanonicalArchName(a1, a2);
        if (v8)
        {
          v9 = llvm::ARM::parseArch(CanonicalArchName, v8) - 2;
          if (v9 > 0x25)
            return 0;
          else
            return dword_1812468E0[v9];
        }
        else
        {
          v14[0] = a1;
          v14[1] = a2;
          v15 = 0;
          v16 = 0;
          v11 = llvm::StringSwitch<llvm::Triple::SubArchType,llvm::Triple::SubArchType>::EndsWith((uint64_t)v14, "kalimba3", 8uLL, 36);
          v12 = llvm::StringSwitch<llvm::Triple::SubArchType,llvm::Triple::SubArchType>::EndsWith(v11, "kalimba4", 8uLL, 37);
          v13 = llvm::StringSwitch<llvm::Triple::SubArchType,llvm::Triple::SubArchType>::EndsWith(v12, "kalimba5", 8uLL, 38);
          if (*(_BYTE *)(v13 + 20))
            return *(unsigned int *)(v13 + 16);
          else
            return 0;
        }
      }
      break;
  }
  if (*a1 != 1919512691 || *((_BYTE *)a1 + 4) != 118)
    goto LABEL_21;
  v10 = (char *)a1 + a2;
  if (*(_DWORD *)((char *)a1 + a2 - 4) == 808333686)
    return 41;
  switch(*((_DWORD *)v10 - 1))
  {
    case 0x312E3176:
      return 42;
    case 0x322E3176:
      return 43;
    case 0x332E3176:
      return 44;
    case 0x342E3176:
      return 45;
    case 0x352E3176:
      return 46;
  }
  return 0;
}

uint64_t parseVendor(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  switch(a2)
  {
    case 2:
      if (*(_WORD *)a1 == 25456)
      {
        result = 2;
      }
      else
      {
        if (*(_WORD *)a1 != 25967)
          goto LABEL_49;
        result = 13;
      }
      break;
    case 3:
      if (*(_WORD *)a1 == 26995 && *(_BYTE *)(a1 + 2) == 101)
        goto LABEL_50;
      if (*(_WORD *)a1 == 29542 && *(_BYTE *)(a1 + 2) == 108)
      {
        result = 4;
      }
      else if (*(_WORD *)a1 == 25193 && *(_BYTE *)(a1 + 2) == 109)
      {
        result = 5;
      }
      else if (*(_WORD *)a1 == 28009 && *(_BYTE *)(a1 + 2) == 103)
      {
        result = 6;
      }
      else if (*(_WORD *)a1 == 29805 && *(_BYTE *)(a1 + 2) == 105)
      {
        result = 7;
      }
      else if (*(_WORD *)a1 == 29539 && *(_BYTE *)(a1 + 2) == 114)
      {
        result = 9;
      }
      else
      {
        if (*(_WORD *)a1 != 28001 || *(_BYTE *)(a1 + 2) != 100)
          goto LABEL_49;
        result = 10;
      }
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x69656373:
LABEL_50:
          result = 3;
          break;
        case 0x6173656D:
          result = 11;
          break;
        case 0x65737573:
          result = 12;
          break;
        default:
          goto LABEL_49;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 != 1819308129 || *(_BYTE *)(a1 + 4) != 101)
        goto LABEL_49;
      result = 1;
      break;
    case 6:
      if (*(_DWORD *)a1 != 1684633198 || *(_WORD *)(a1 + 4) != 24937)
        goto LABEL_49;
      result = 8;
      break;
    default:
LABEL_49:
      result = 0;
      break;
  }
  return result;
}

uint64_t parseOS(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6)
  {
    if (*(_DWORD *)a1 == 2003984740 && *(_WORD *)(a1 + 4) == 28265)
      return 1;
    if (a2 >= 9)
    {
      if (*(_QWORD *)a1 == 0x6C666E6F67617264 && *(_BYTE *)(a1 + 8) == 121)
        return 2;
    }
    else if (a2 < 7)
    {
      if (*(_WORD *)a1 != 28521 || *(_BYTE *)(a1 + 2) != 115)
        goto LABEL_38;
      return 5;
    }
    if (*(_DWORD *)a1 == 1701147238 && *(_DWORD *)(a1 + 3) == 1685283429)
      return 3;
    if (*(_DWORD *)a1 == 1751348582 && *(_DWORD *)(a1 + 3) == 1634300776)
      return 4;
  }
  else if (a2 < 3)
  {
    return 0;
  }
  if (*(_WORD *)a1 == 28521 && *(_BYTE *)(a1 + 2) == 115)
    return 5;
  if (a2 >= 8)
  {
    if (*(_QWORD *)a1 == 0x647362656572666BLL)
      return 6;
  }
  else if (a2 < 5)
  {
    goto LABEL_42;
  }
LABEL_38:
  if (*(_DWORD *)a1 == 1970170220 && *(_BYTE *)(a1 + 4) == 120)
    return 7;
LABEL_42:
  if (*(_WORD *)a1 == 30316 && *(_BYTE *)(a1 + 2) == 50)
    return 8;
  if (a2 >= 5)
  {
    if (*(_DWORD *)a1 == 1868783981 && *(_BYTE *)(a1 + 4) == 115)
      return 9;
    if (a2 >= 6)
    {
      if (*(_DWORD *)a1 == 1651795310 && *(_WORD *)(a1 + 4) == 25715)
        return 10;
      if (a2 >= 7)
      {
        if (*(_DWORD *)a1 == 1852141679 && *(_DWORD *)(a1 + 3) == 1685283438)
          return 11;
        if (*(_DWORD *)a1 == 1634496371 && *(_DWORD *)(a1 + 3) == 1936290401)
          return 12;
      }
    }
    if (*(_DWORD *)a1 == 1768318325)
      return 13;
    if (*(_DWORD *)a1 == 862873975 && *(_BYTE *)(a1 + 4) == 50)
      return 14;
    if (a2 >= 7 && *(_DWORD *)a1 == 1684957559 && *(_DWORD *)(a1 + 3) == 1937207140)
      return 14;
  }
  else if (a2 == 4 && *(_DWORD *)a1 == 1768318325)
  {
    return 13;
  }
  if (*(_WORD *)a1 == 28538 && *(_BYTE *)(a1 + 2) == 115)
    return 15;
  if (a2 >= 5)
  {
    if (*(_DWORD *)a1 == 1802068328 && *(_BYTE *)(a1 + 4) == 117)
      return 16;
    if (*(_DWORD *)a1 == 1835365490 && *(_BYTE *)(a1 + 4) == 115)
      return 17;
  }
  else if (a2 != 4)
  {
    if (*(_WORD *)a1 != 26977 || *(_BYTE *)(a1 + 2) != 120)
      goto LABEL_92;
    return 19;
  }
  if (*(_DWORD *)a1 == 1818452334)
    return 18;
  if (*(_WORD *)a1 == 26977 && *(_BYTE *)(a1 + 2) == 120)
    return 19;
  if (*(_DWORD *)a1 == 1633973603)
    return 20;
  if (*(_DWORD *)a1 == 1818457710)
    return 21;
  if (a2 >= 6 && *(_DWORD *)a1 == 1751412065 && *(_WORD *)(a1 + 4) == 24947)
    return 22;
LABEL_92:
  if (*(_WORD *)a1 == 29552 && *(_BYTE *)(a1 + 2) == 52)
    return 23;
  if (*(_WORD *)a1 == 29552 && *(_BYTE *)(a1 + 2) == 53)
    return 24;
  if (a2 >= 8)
  {
    if (*(_QWORD *)a1 == 0x75636D6169666C65)
      return 25;
  }
  else if (a2 < 4)
  {
    return 0;
  }
  if (*(_DWORD *)a1 == 1936684660)
    return 26;
  if (a2 < 7)
    goto LABEL_143;
  if (*(_DWORD *)a1 == 1668571511 && *(_DWORD *)(a1 + 3) == 1936681059)
    return 27;
  if (a2 >= 8)
  {
    if (*(_QWORD *)a1 == 0x736F656764697262)
      return 28;
    if (a2 >= 9)
    {
      if (*(_QWORD *)a1 == 0x696B726576697264 && *(_BYTE *)(a1 + 8) == 116)
        return 29;
LABEL_143:
      if (*(_DWORD *)a1 != 1936683640)
      {
        if (a2 < 5)
          goto LABEL_177;
        if (*(_DWORD *)a1 != 1869636979 || *(_BYTE *)(a1 + 4) != 115)
        {
          if (a2 < 6)
            goto LABEL_177;
          goto LABEL_165;
        }
        return 31;
      }
      return 30;
    }
    if (*(_DWORD *)a1 == 1936683640)
      return 30;
  }
  else if (*(_DWORD *)a1 == 1936683640)
  {
    return 30;
  }
  if (*(_DWORD *)a1 == 1869636979 && *(_BYTE *)(a1 + 4) == 115)
    return 31;
LABEL_165:
  if (*(_DWORD *)a1 == 1634952557 && *(_WORD *)(a1 + 4) == 25651)
    return 32;
  if (*(_DWORD *)a1 == 1885629793 && *(_WORD *)(a1 + 4) == 27745)
    return 33;
  if (*(_DWORD *)a1 == 1836213608 && *(_WORD *)(a1 + 4) == 29801)
    return 34;
LABEL_177:
  if (*(_DWORD *)a1 == 1685222760)
    return 35;
  if (*(_DWORD *)a1 == 1769169271)
    return 36;
  if (a2 < 0xA)
  {
    if (a2 < 6)
      return 0;
    goto LABEL_216;
  }
  if (*(_QWORD *)a1 == 0x7470697263736D65 && *(_WORD *)(a1 + 8) == 28261)
    return 37;
  if (a2 >= 0xB)
  {
    if (*(_QWORD *)a1 == 0x6F6D726564616873 && *(_QWORD *)(a1 + 3) == 0x6C65646F6D726564)
      return 38;
LABEL_216:
    if (*(_DWORD *)a1 != 1702127980 || *(_WORD *)(a1 + 4) != 29551)
    {
      if (a2 < 8)
        return 0;
      goto LABEL_221;
    }
    return 39;
  }
  if (*(_DWORD *)a1 == 1702127980 && *(_WORD *)(a1 + 4) == 29551)
    return 39;
LABEL_221:
  if (*(_QWORD *)a1 != 0x7974696E65726573)
    return 0;
  return 40;
}

uint64_t parseEnvironment(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6)
  {
    if (*(_DWORD *)a1 == 1768055141 && *(_WORD *)(a1 + 4) == 26216)
      return 13;
  }
  else if (a2 < 4)
  {
    if (a2 != 3)
      return 0;
    goto LABEL_4;
  }
  if (*(_DWORD *)a1 == 1768055141)
    return 12;
  if (a2 >= 9)
  {
    if (*(_QWORD *)a1 == 0x336E696261756E67 && *(_BYTE *)(a1 + 8) == 50)
      return 2;
    if (*(_QWORD *)a1 == 0x3436696261756E67)
      return 3;
    if (*(_QWORD *)a1 == 0x6869626165756E67 && *(_BYTE *)(a1 + 8) == 102)
      return 5;
    goto LABEL_42;
  }
  if (a2 == 8)
  {
    if (*(_QWORD *)a1 == 0x3436696261756E67)
      return 3;
    goto LABEL_42;
  }
  if (a2 >= 7)
  {
LABEL_42:
    if (*(_DWORD *)a1 == 1702194791 && *(_DWORD *)(a1 + 3) == 1768055141)
      return 4;
    goto LABEL_46;
  }
  if (a2 != 6)
  {
    if (a2 < 5)
      goto LABEL_4;
    if (*(_DWORD *)a1 != 1937075815 || *(_BYTE *)(a1 + 4) != 102)
      goto LABEL_4;
    return 8;
  }
LABEL_46:
  if (*(_DWORD *)a1 == 1718972007 && *(_WORD *)(a1 + 4) == 12851)
    return 6;
  if (*(_DWORD *)a1 == 1718972007 && *(_WORD *)(a1 + 4) == 13366)
    return 7;
  if (*(_DWORD *)a1 == 1937075815 && *(_BYTE *)(a1 + 4) == 102)
    return 8;
  if (*(_DWORD *)a1 == 2020961895 && *(_WORD *)(a1 + 4) == 12851)
    return 9;
  if (a2 >= 9 && *(_QWORD *)a1 == 0x33706C695F756E67 && *(_BYTE *)(a1 + 8) == 50)
    return 10;
  if (*(_DWORD *)a1 == 1701080931 && *(_WORD *)(a1 + 4) == 13873)
    return 11;
LABEL_4:
  if (*(_WORD *)a1 == 28263 && *(_BYTE *)(a1 + 2) == 117)
    return 1;
  if (a2 < 7)
  {
    if (a2 < 4)
      return 0;
    goto LABEL_97;
  }
  if (*(_DWORD *)a1 == 1919184481 && *(_DWORD *)(a1 + 3) == 1684631410)
    return 14;
  if (a2 >= 0xA)
  {
    if (*(_QWORD *)a1 == 0x696261656C73756DLL && *(_WORD *)(a1 + 8) == 26216)
      return 17;
    goto LABEL_92;
  }
  if (a2 >= 8)
  {
LABEL_92:
    if (*(_QWORD *)a1 == 0x696261656C73756DLL)
      return 16;
  }
  if (*(_DWORD *)a1 == 1819506029 && *(_DWORD *)(a1 + 3) == 842233964)
    return 18;
LABEL_97:
  if (*(_DWORD *)a1 == 1819506029)
    return 15;
  if (*(_DWORD *)a1 == 1668707181)
    return 19;
  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 == 1851880553 && *(_DWORD *)(a1 + 3) == 1836411246)
      return 20;
    if (*(_DWORD *)a1 == 1852275043 && *(_WORD *)(a1 + 4) == 29557)
      return 21;
    if (*(_DWORD *)a1 == 1701998435 && *(_DWORD *)(a1 + 3) == 1919705957)
      return 22;
    if (a2 >= 9)
    {
      if (*(_QWORD *)a1 == 0x696B6C656E72656BLL && *(_BYTE *)(a1 + 8) == 116)
        return 23;
      if (*(_QWORD *)a1 == 0x6F74616C756D6973 && *(_BYTE *)(a1 + 8) == 114)
        return 24;
    }
    if (*(_DWORD *)a1 == 1633902957 && *(_WORD *)(a1 + 4) == 26978)
      return 25;
    if (a2 >= 0xB && *(_QWORD *)a1 == 0x726F6674696B6975 && *(_QWORD *)(a1 + 3) == 0x63616D726F667469)
      return 25;
    if (*(_DWORD *)a1 == 1702390128 && *(_BYTE *)(a1 + 4) == 108)
      return 26;
    if (*(_DWORD *)a1 == 1953654134 && *(_WORD *)(a1 + 4) == 30821)
      return 27;
    if (a2 >= 8 && *(_QWORD *)a1 == 0x797274656D6F6567)
      return 28;
LABEL_176:
    if (*(_DWORD *)a1 == 1819047272)
      return 29;
    if (a2 < 6)
    {
LABEL_178:
      if (*(_DWORD *)a1 != 1936943469)
      {
        if (a2 >= 8 && *(_QWORD *)a1 == 0x656C62616C6C6163)
          return 38;
        if (*(_DWORD *)a1 != 1752393069)
        {
          if (a2 >= 0xD && *(_QWORD *)a1 == 0x636966696C706D61 && *(_QWORD *)(a1 + 5) == 0x6E6F697461636966)
            return 40;
          goto LABEL_207;
        }
        return 39;
      }
      return 37;
    }
    if (*(_DWORD *)a1 == 1634561892 && *(_WORD *)(a1 + 4) == 28265)
      return 30;
    if (*(_DWORD *)a1 == 1886220131 && *(_DWORD *)(a1 + 3) == 1702131056)
      return 31;
    if (*(_DWORD *)a1 == 1919052140 && *(_DWORD *)(a1 + 3) == 2037539186)
      return 32;
    if (a2 >= 0xD)
    {
      if (*(_QWORD *)a1 == 0x72656E6567796172 && *(_QWORD *)(a1 + 5) == 0x6E6F69746172656ELL)
        return 33;
    }
    else if (a2 != 12)
    {
LABEL_237:
      if (*(_DWORD *)a1 == 1752788577 && *(_WORD *)(a1 + 4) == 29801)
        return 35;
      if (a2 >= 0xA && *(_QWORD *)a1 == 0x68747365736F6C63 && *(_WORD *)(a1 + 8) == 29801)
        return 36;
      goto LABEL_178;
    }
    if (*(_QWORD *)a1 == 0x6365737265746E69 && *(_DWORD *)(a1 + 8) == 1852795252)
      return 34;
    goto LABEL_237;
  }
  if (a2 != 6)
  {
    if (a2 >= 5 && *(_DWORD *)a1 == 1702390128 && *(_BYTE *)(a1 + 4) == 108)
      return 26;
    goto LABEL_176;
  }
  if (*(_DWORD *)a1 == 1852275043 && *(_WORD *)(a1 + 4) == 29557)
    return 21;
  if (*(_DWORD *)a1 == 1633902957 && *(_WORD *)(a1 + 4) == 26978)
    return 25;
  if (*(_DWORD *)a1 == 1702390128 && *(_BYTE *)(a1 + 4) == 108)
    return 26;
  if (*(_DWORD *)a1 == 1953654134 && *(_WORD *)(a1 + 4) == 30821)
    return 27;
  if (*(_DWORD *)a1 == 1819047272)
    return 29;
  if (*(_DWORD *)a1 == 1634561892 && *(_WORD *)(a1 + 4) == 28265)
    return 30;
  if (*(_DWORD *)a1 == 1752788577 && *(_WORD *)(a1 + 4) == 29801)
    return 35;
  if (*(_DWORD *)a1 == 1936943469)
    return 37;
  if (*(_DWORD *)a1 == 1752393069)
    return 39;
LABEL_207:
  if (*(_DWORD *)a1 != 1936681071)
    return 0;
  return 41;
}

uint64_t parseFormat(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  if (a2 >= 5)
  {
    if (*(_DWORD *)(a1 + a2 - 5) == 1718575992 && *(_BYTE *)(a1 + a2 - 1) == 102)
      return 9;
  }
  else if (a2 != 4)
  {
    if (a2 < 3)
      return 0;
    if (*(_WORD *)(a1 + a2 - 3) != 27749 || *(_BYTE *)(a1 + a2 - 1) != 102)
      return 0;
    return 3;
  }
  v4 = a1 + a2;
  if (*(_DWORD *)(a1 + a2 - 4) == 1717989219)
    return 1;
  if (*(_WORD *)(v4 - 3) == 27749 && *(_BYTE *)(v4 - 1) == 102)
    return 3;
  if (*(_DWORD *)(v4 - 4) == 1717989223)
    return 4;
  if (a2 < 5)
  {
    if (*(_DWORD *)(v4 - 4) != 1836278135)
      return 0;
    return 7;
  }
  if (*(_DWORD *)(v4 - 5) == 1751343469 && *(_BYTE *)(v4 - 1) == 111)
    return 5;
  if (*(_DWORD *)(v4 - 4) == 1836278135)
    return 7;
  if (*(_DWORD *)(v4 - 5) == 1919512691 && *(_BYTE *)(v4 - 1) == 118)
    return 6;
  if (a2 < 8 || *(_QWORD *)(v4 - 8) != 0x62696C6C6174656DLL)
    return 0;
  return 8;
}

uint64_t llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(uint64_t a1, const void *a2, uint64_t a3, void *__s2, uint64_t a5, void *a6, uint64_t a7, int a8, void *__s2a, uint64_t a10, int a11)
{
  const void *v16;
  size_t v17;

  if (!*(_BYTE *)(a1 + 20))
  {
    if ((v16 = *(const void **)a1, v17 = *(_QWORD *)(a1 + 8), v17 == a3)
      && (!v17 || !memcmp(*(const void **)a1, a2, *(_QWORD *)(a1 + 8)))
      || v17 == a5 && (!v17 || !memcmp(v16, __s2, v17))
      || v17 == a7 && (!v17 || !memcmp(v16, a6, v17))
      || v17 == a10 && (!v17 || !memcmp(v16, __s2a, v17)))
    {
      *(_DWORD *)(a1 + 16) = a11;
      *(_BYTE *)(a1 + 20) = 1;
    }
  }
  return a1;
}

uint64_t getDefaultFormat(int a1, unsigned int a2)
{
  if (a2 > 0x1F || ((1 << a2) & 0xFC000222) == 0)
    return ((uint64_t (*)(uint64_t))((char *)sub_1807DB5D8 + 4 * byte_18124687F[a1]))(8);
  if ((a1 - 45) >= 2)
    return 5;
  return 8;
}

uint64_t sub_1807DB5D8()
{
  return 3;
}

uint64_t sub_1807DB5E0(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 13)
    v2 = 1;
  else
    v2 = 3;
  if (a2 == 14)
    return 1;
  else
    return v2;
}

uint64_t sub_1807DB5FC()
{
  return 6;
}

uint64_t sub_1807DB604()
{
  return 7;
}

uint64_t sub_1807DB60C(uint64_t a1, int a2)
{
  if (a2 == 19)
    return 9;
  else
    return 3;
}

uint64_t sub_1807DB620()
{
  return 2;
}

uint64_t sub_1807DB628(uint64_t a1, int a2)
{
  if (a2 == 15)
    return 4;
  else
    return 3;
}

uint64_t llvm::Triple::getOSName(llvm::Triple **this)
{
  int v1;
  BOOL v2;
  llvm::Triple *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  llvm::Triple *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = *((char *)this + 23);
  v2 = v1 < 0;
  v3 = *this;
  if (v1 >= 0)
    v3 = (llvm::Triple *)this;
  v4 = *((unsigned __int8 *)this + 23);
  if (v2)
    v4 = (unint64_t)this[1];
  v14 = v3;
  v15 = v4;
  LOBYTE(v16) = 45;
  v5 = llvm::StringRef::find((uint64_t *)&v14, (char *)&v16, 1uLL, 0);
  if (v5 == -1)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    if (v15 >= v5 + 1)
      v6 = v5 + 1;
    else
      v6 = v15;
    v7 = (uint64_t)v14 + v6;
    v8 = v15 - v6;
  }
  v16 = v7;
  v17 = v8;
  LOBYTE(v14) = 45;
  v9 = llvm::StringRef::find(&v16, (char *)&v14, 1uLL, 0);
  if (v9 == -1)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    if (v17 >= v9 + 1)
      v10 = v9 + 1;
    else
      v10 = v17;
    v11 = v16 + v10;
    v12 = v17 - v10;
  }
  v16 = v11;
  v17 = v12;
  LOBYTE(v14) = 45;
  llvm::StringRef::find(&v16, (char *)&v14, 1uLL, 0);
  return v16;
}

unint64_t llvm::Triple::getOSVersion(llvm::Triple **this)
{
  unsigned __int8 *OSName;
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;

  OSName = (unsigned __int8 *)llvm::Triple::getOSName(this);
  v3 = OSName;
  v5 = v4;
  v6 = *((int *)this + 9);
  v7 = qword_181246978[v6];
  if (v4 >= v7 && !memcmp(OSName, (&off_1E0E55670)[v6], qword_181246978[v6]))
  {
    if (v5 >= v7)
      v14 = v7;
    else
      v14 = v5;
    v3 += v14;
    v5 -= v14;
  }
  else if ((_DWORD)v6 == 9 && v5 >= 5)
  {
    v10 = *(_DWORD *)v3 != 1868783981 || v3[4] != 115;
    v11 = 5;
    if (v5 < 5)
      v11 = v5;
    v12 = &v3[v11];
    v13 = v5 - v11;
    if (!v10)
    {
      v3 = v12;
      v5 = v13;
    }
  }
  v17 = 0;
  v18 = 0;
  llvm::VersionTuple::tryParse(&v17, v3, v5);
  v15 = v17;
  if (v18 < 0)
    v15 = v17 | 0x8000000000000000;
  if (*((_DWORD *)this + 9) == 31 && (_DWORD)v15 == 0)
    return v15 & 0x7FFFFFFF00000000 | 0x8000000000000001;
  else
    return v15;
}

void llvm::Triple::setArchName(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  __int16 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  __int128 v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x1E0C80C00];
  v40 = v42;
  v41 = xmmword_181236C00;
  if (a3 < 0x41)
  {
    v6 = 0;
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v40, v42, a3, 1);
  v6 = v41;
  if (a3)
  {
LABEL_5:
    memcpy((char *)v40 + v6, a2, a3);
    v6 = v41;
  }
LABEL_6:
  v7 = v6 + a3;
  *(_QWORD *)&v41 = v7;
  if (*((_QWORD *)&v41 + 1) < (unint64_t)(v7 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v40, v42, v7 + 1, 1);
    v7 = v41;
  }
  *((_BYTE *)v40 + v7) = 45;
  *(_QWORD *)&v41 = v41 + 1;
  v8 = *(_QWORD **)a1;
  v9 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) >= 0)
    v8 = (_QWORD *)a1;
  else
    v9 = *(_QWORD *)(a1 + 8);
  v33 = v8;
  v34 = v9;
  LOBYTE(v36) = 45;
  v10 = llvm::StringRef::find((uint64_t *)&v33, (char *)&v36, 1uLL, 0);
  if (v10 == -1)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    if (v34 >= v10 + 1)
      v11 = v10 + 1;
    else
      v11 = v34;
    v12 = (char *)v33 + v11;
    v13 = v34 - v11;
  }
  *(_QWORD *)&v36 = v12;
  *((_QWORD *)&v36 + 1) = v13;
  LOBYTE(v33) = 45;
  v14 = llvm::StringRef::find((uint64_t *)&v36, (char *)&v33, 1uLL, 0);
  if (v14 == -1)
  {
    v16 = *((_QWORD *)&v36 + 1);
    v15 = (const void *)v36;
    v17 = v41;
    v18 = *((_QWORD *)&v36 + 1) + v41;
    if (*((_QWORD *)&v41 + 1) < *((_QWORD *)&v36 + 1) + (_QWORD)v41)
    {
LABEL_22:
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v40, v42, v18, 1);
      v17 = v41;
    }
  }
  else
  {
    v15 = (const void *)v36;
    if (v14 >= *((_QWORD *)&v36 + 1))
      v16 = *((_QWORD *)&v36 + 1);
    else
      v16 = v14;
    v17 = v41;
    v18 = v16 + v41;
    if (*((_QWORD *)&v41 + 1) < v16 + (unint64_t)v41)
      goto LABEL_22;
  }
  if (v16)
  {
    memcpy((char *)v40 + v17, v15, v16);
    v17 = v41;
  }
  v19 = v17 + v16;
  *(_QWORD *)&v41 = v19;
  if (*((_QWORD *)&v41 + 1) < v19 + 1)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v40, v42, v19 + 1, 1);
    v19 = v41;
  }
  *((_BYTE *)v40 + v19) = 45;
  *(_QWORD *)&v41 = v41 + 1;
  v20 = *(_QWORD *)a1;
  v21 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) >= 0)
    v20 = a1;
  else
    v21 = *(_QWORD *)(a1 + 8);
  v33 = (_QWORD *)v20;
  v34 = v21;
  LOBYTE(v36) = 45;
  v22 = llvm::StringRef::find((uint64_t *)&v33, (char *)&v36, 1uLL, 0);
  if (v22 == -1)
  {
    v24 = 0;
    v25 = 0;
  }
  else
  {
    if (v34 >= v22 + 1)
      v23 = v22 + 1;
    else
      v23 = v34;
    v24 = (char *)v33 + v23;
    v25 = v34 - v23;
  }
  *(_QWORD *)&v36 = v24;
  *((_QWORD *)&v36 + 1) = v25;
  LOBYTE(v33) = 45;
  v26 = llvm::StringRef::find((uint64_t *)&v36, (char *)&v33, 1uLL, 0);
  if (v26 == -1)
  {
    v28 = 0;
    v29 = 0;
    v30 = v41;
    v31 = v41;
    if (*((_QWORD *)&v41 + 1) < (unint64_t)v41)
    {
LABEL_43:
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v40, v42, v31, 1);
      v30 = v41;
    }
  }
  else
  {
    if (*((_QWORD *)&v36 + 1) >= (unint64_t)(v26 + 1))
      v27 = v26 + 1;
    else
      v27 = *((_QWORD *)&v36 + 1);
    v28 = (const void *)(v36 + v27);
    v29 = *((_QWORD *)&v36 + 1) - v27;
    v30 = v41;
    v31 = v41 + *((_QWORD *)&v36 + 1) - v27;
    if (*((_QWORD *)&v41 + 1) < v31)
      goto LABEL_43;
  }
  if (v29)
  {
    memcpy((char *)v40 + v30, v28, v29);
    v30 = v41;
  }
  *(_QWORD *)&v41 = v30 + v29;
  v35 = 261;
  v33 = v40;
  v34 = v30 + v29;
  llvm::Triple::Triple((uint64_t)&v36, (llvm::Twine *)&v33);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = v36;
  *(_QWORD *)(a1 + 16) = v37;
  *(_OWORD *)(a1 + 24) = v38;
  v32 = v40;
  *(_QWORD *)(a1 + 40) = v39;
  if (v32 != v42)
    free(v32);
}

BOOL llvm::Triple::isArch64Bit(llvm::Triple *this)
{
  return getArchPointerBitWidth(*((_DWORD *)this + 6)) == 64;
}

uint64_t getArchPointerBitWidth(int a1)
{
  return dword_181246AC0[a1];
}

uint64_t llvm::Triple::isMacOSXVersionLT(llvm::Triple **this, unsigned int a2, int a3, int a4)
{
  unint64_t OSVersion;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v12;
  _BOOL4 v14;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  unsigned int v19;
  _BOOL4 v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL4 v28;
  _BOOL4 v30;

  if (*((_DWORD *)this + 9) == 9)
  {
    if (a3)
    {
      OSVersion = llvm::Triple::getOSVersion(this);
      v9 = HIDWORD(OSVersion) & 0x7FFFFFFF;
      v10 = a3 & 0x7FFFFFFF;
      v12 = (a3 & 0x7FFFFFFFu) >= v9 && (v8 & 0x7FFFFFFFu) < (a4 & 0x7FFFFFFFu);
      if (v9 < v10)
        v12 = 1;
      if (OSVersion > a2)
        v12 = 0;
      if (OSVersion < a2)
        v12 = 1;
      v14 = OSVersion <= a2 && v9 < v10;
      if (OSVersion < a2)
        v14 = 1;
      if (a4)
        return v12;
      else
        return v14;
    }
    else
    {
      return llvm::Triple::getOSVersion(this) < a2;
    }
  }
  else if (a2 == 10)
  {
    v16 = a3 + 4;
    v17 = llvm::Triple::getOSVersion(this);
    if (a4)
      v18 = 1;
    else
      v18 = v16 > v17;
    v19 = v18;
    v21 = v16 >= v17 && (HIDWORD(v17) & 0x7FFFFFFFu) < (a4 & 0x7FFFFFFFu);
    if (v16 > v17)
      v21 = v19;
    if (a4)
      return v21;
    else
      return v19;
  }
  else
  {
    v22 = a2 + 9;
    if (a3)
    {
      v23 = llvm::Triple::getOSVersion(this);
      v25 = HIDWORD(v23) & 0x7FFFFFFF;
      v26 = a3 & 0x7FFFFFFF;
      v28 = (a3 & 0x7FFFFFFFu) >= v25 && (v24 & 0x7FFFFFFFu) < (a4 & 0x7FFFFFFFu);
      if (v25 < v26)
        v28 = 1;
      if (v22 < v23)
        v28 = 0;
      if (v22 > v23)
        v28 = 1;
      v30 = v22 >= v23 && v25 < v26;
      if (v22 > v23)
        v30 = 1;
      if (a4)
        return v28;
      else
        return v30;
    }
    else
    {
      return v22 > llvm::Triple::getOSVersion(this);
    }
  }
}

uint64_t llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(uint64_t a1, const void *a2, uint64_t a3, void *__s2, uint64_t a5, void *a6, uint64_t a7, int a8, const void *a9, uint64_t a10, const void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, int a19)
{
  void *v22;
  uint64_t v23;
  uint64_t v25;
  const void *v26;
  size_t v27;
  int v28;
  void *v29;
  int v30;
  void *v31;
  int v32;
  size_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  const void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;

  v22 = a15;
  v23 = a16;
  if (!*(_BYTE *)(a1 + 20))
  {
    v25 = a10;
    v26 = *(const void **)a1;
    v27 = *(_QWORD *)(a1 + 8);
    if (v27 == a3)
    {
      if (!v27)
        goto LABEL_14;
      v45 = *(const void **)a1;
      v39 = a7;
      v41 = a6;
      v38 = __s2;
      v28 = memcmp(*(const void **)a1, a2, *(_QWORD *)(a1 + 8));
      __s2 = v38;
      v22 = a15;
      v25 = a10;
      v26 = v45;
      a7 = v39;
      a6 = v41;
      v23 = a16;
      if (!v28)
        goto LABEL_14;
    }
    if (v27 == a5)
    {
      if (!v27)
        goto LABEL_14;
      v46 = v26;
      v48 = v23;
      v29 = v22;
      v40 = a7;
      v42 = a6;
      v43 = v25;
      v30 = memcmp(v26, __s2, v27);
      v25 = v43;
      v26 = v46;
      a7 = v40;
      a6 = v42;
      v22 = v29;
      v23 = v48;
      if (!v30)
        goto LABEL_14;
    }
    if (v27 == a7)
    {
      if (!v27)
        goto LABEL_14;
      v47 = v26;
      v49 = v23;
      v31 = v22;
      v44 = v25;
      v32 = memcmp(v26, a6, v27);
      v25 = v44;
      v26 = v47;
      v22 = v31;
      v23 = v49;
      if (!v32)
        goto LABEL_14;
    }
    if (v27 == v25)
    {
      if (!v27 || (v33 = v27, v34 = v23, v35 = v22, v36 = memcmp(v26, a9, v33), v22 = v35, v23 = v34, !v36))
      {
LABEL_14:
        *(_DWORD *)(a1 + 16) = a19;
        *(_BYTE *)(a1 + 20) = 1;
      }
    }
  }
  return llvm::StringSwitch<llvm::Triple::EnvironmentType,llvm::Triple::EnvironmentType>::Cases(a1, a11, a12, a13, a14, v22, v23, a8, a17, a18, a19);
}

uint64_t llvm::StringSwitch<llvm::Triple::SubArchType,llvm::Triple::SubArchType>::EndsWith(uint64_t a1, const void *a2, size_t a3, int a4)
{
  size_t v6;

  if (*(_BYTE *)(a1 + 20))
    return a1;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 < a3 || a3 && memcmp((const void *)(*(_QWORD *)a1 + v6 - a3), a2, a3))
    return a1;
  *(_DWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 20) = 1;
  return a1;
}

const char *mlir::affine::AffineDialect::initialize(mlir::affine::AffineDialect *this)
{
  char *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  const char *result;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  const char *v17;
  unint64_t v18;

  mlir::Dialect::addOperations<mlir::affine::AffineDmaStartOp,mlir::affine::AffineDmaWaitOp,mlir::affine::AffineApplyOp,mlir::affine::AffineDelinearizeIndexOp,mlir::affine::AffineForOp,mlir::affine::AffineIfOp,mlir::affine::AffineLoadOp,mlir::affine::AffineMaxOp,mlir::affine::AffineMinOp,mlir::affine::AffineParallelOp,mlir::affine::AffinePrefetchOp,mlir::affine::AffineStoreOp,mlir::affine::AffineVectorLoadOp,mlir::affine::AffineVectorStoreOp,mlir::affine::AffineYieldOp>((uint64_t)this);
  v2 = (char *)operator new(0x18uLL);
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v16 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v8 = v7;
    v2 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
      v18 = 79;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v16;
    }
  }
  v5 = v4[157];
  *((_QWORD *)v2 + 1) = this;
  *((_QWORD *)v2 + 2) = v5;
  *(_QWORD *)v2 = off_1E0E18AC8;
  v17 = v2;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

mlir::affine::AffineDialect *mlir::affine::AffineDialect::AffineDialect(mlir::affine::AffineDialect *this, mlir::MLIRContext *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v6;

  v3 = (_QWORD *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"affine", 6, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineDialect,void>::id);
  *v3 = off_1E0E4DBE8;
  v4 = (uint64_t *)v3[4];
  if (!mlir::MLIRContext::isDialectLoading(v4, (uint64_t)"arith", 5))
  {
    v6 = v4;
    mlir::MLIRContext::getOrLoadDialect(v4, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v6);
  }
  mlir::affine::AffineDialect::initialize(this);
  return this;
}

void mlir::affine::AffineDialect::~AffineDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_1807DC198(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::affine::AffineDmaStartOp,mlir::affine::AffineDmaWaitOp,mlir::affine::AffineApplyOp,mlir::affine::AffineDelinearizeIndexOp,mlir::affine::AffineForOp,mlir::affine::AffineIfOp,mlir::affine::AffineLoadOp,mlir::affine::AffineMaxOp,mlir::affine::AffineMinOp,mlir::affine::AffineParallelOp,mlir::affine::AffinePrefetchOp,mlir::affine::AffineStoreOp,mlir::affine::AffineVectorLoadOp,mlir::affine::AffineVectorStoreOp,mlir::affine::AffineYieldOp>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  _QWORD *v26;

  v2 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, 0, 0);
  v3 = (uint64_t)v26;
  v26 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, 0, 0);
  v5 = (uint64_t)v26;
  v26 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineApplyOp::getAttributeNames(void)::attrNames, 1);
  v7 = (uint64_t)v26;
  v26 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  mlir::RegisteredOperationName::insert<mlir::affine::AffineDelinearizeIndexOp>(a1);
  v8 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineForOp::getAttributeNames(void)::attrNames, 4);
  v9 = (uint64_t)v26;
  v26 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  mlir::RegisteredOperationName::insert<mlir::affine::AffineIfOp>(a1);
  v10 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineLoadOp::getAttributeNames(void)::attrNames, 1);
  v11 = (uint64_t)v26;
  v26 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineMaxOp::getAttributeNames(void)::attrNames, 1);
  v13 = (uint64_t)v26;
  v26 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineMinOp::getAttributeNames(void)::attrNames, 1);
  v15 = (uint64_t)v26;
  v26 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::Model(v16, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineParallelOp::getAttributeNames(void)::attrNames, 6);
  v17 = (uint64_t)v26;
  v26 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  mlir::RegisteredOperationName::insert<mlir::affine::AffinePrefetchOp>(a1);
  v18 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::Model(v18, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineStoreOp::getAttributeNames(void)::attrNames, 1);
  v19 = (uint64_t)v26;
  v26 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::Model(v20, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineVectorLoadOp::getAttributeNames(void)::attrNames, 1);
  v21 = (uint64_t)v26;
  v26 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::Model(v22, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineVectorStoreOp::getAttributeNames(void)::attrNames, 1);
  v23 = (uint64_t)v26;
  v26 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = operator new(0x70uLL);
  v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::Model(v24, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, 0, 0);
  result = (uint64_t)v26;
  v26 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

mlir::GenericProgramPoint *mlir::affine::AffineDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v8 = a4;
  if (*(_UNKNOWN **)(*a3 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    v5 = a3;
  else
    v5 = 0;
  v7 = v5;
  if (v5)
    return mlir::OpBuilder::create<mlir::ub::PoisonOp,mlir::Type &,mlir::ub::PoisonAttr &>(a2, a5, &v8, &v7);
  else
    return mlir::arith::ConstantOp::materialize(a2, a3, a4, a5);
}

uint64_t mlir::affine::isValidDim(_QWORD *a1, mlir::Block *a2)
{
  uint64_t result;
  uint64_t DefiningOp;
  uint64_t v6;
  void *InterfaceFor;
  uint64_t canMapOperands;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;

  v19 = a1;
  v17 = a1[1] & 0xFFFFFFFFFFFFFFF8;
  result = mlir::Type::isIndex((mlir::Type *)&v17);
  if ((_DWORD)result)
  {
    if ((mlir::affine::isValidSymbol(a1, a2) & 1) != 0)
      return 1;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v19);
    if (DefiningOp)
    {
      v6 = DefiningOp;
      if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
      {
        if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0 && (v11 = *(unsigned int *)(DefiningOp + 68), (_DWORD)v11))
        {
          v12 = v11 - 1;
          v13 = (uint64_t *)(*(_QWORD *)(DefiningOp + 72) + 24);
          do
          {
            v14 = *v13;
            v13 += 4;
            result = mlir::affine::isValidDim(v14, a2);
            v16 = v12-- != 0;
          }
          while ((_DWORD)result && v16);
        }
        else
        {
          return 1;
        }
      }
      else if (mlir::OpInterface<mlir::ShapedDimOpInterface,mlir::detail::ShapedDimOpInterfaceInterfaceTraits>::getInterfaceFor(DefiningOp))
      {
        InterfaceFor = mlir::OpInterface<mlir::ShapedDimOpInterface,mlir::detail::ShapedDimOpInterfaceInterfaceTraits>::getInterfaceFor(v6);
        v17 = v6;
        v18 = InterfaceFor;
        canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v17);
        v20 = canMapOperands;
        if (canMapOperands && (*(_QWORD *)(canMapOperands + 8) & 7) == 7)
        {
          result = *(_QWORD *)(canMapOperands + 16);
        }
        else
        {
          result = *(_QWORD *)(mlir::Value::getDefiningOp((mlir::Value *)&v20) + 16);
          if (!result)
            return result;
        }
        result = mlir::Block::getParentOp((mlir::Block *)result);
        if (result)
          return mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((_QWORD *)(result + 48));
      }
      else
      {
        v17 = 0;
        v18 = 0;
        return 0;
      }
    }
    else
    {
      v9 = *(void **)(*(_QWORD *)(mlir::Block::getParentOp((mlir::Block *)v19[2]) + 48) + 16);
      return v9 == &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id
          || v9 == &mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id;
    }
  }
  return result;
}

uint64_t mlir::affine::isValidSymbol(_QWORD *a1, mlir::Block *a2)
{
  uint64_t result;
  _QWORD *v5;
  mlir::Block *ParentRegion;
  uint64_t DefiningOp;
  unint64_t v8;
  void *InterfaceFor;
  uint64_t canMapOperands;
  uint64_t ParentOp;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v18;
  uint64_t v19;
  mlir::Block *v20;
  uint64_t v21;
  uint64_t OperandRange;
  unint64_t ConstantIntValue;
  char v24;
  BOOL v25;
  _QWORD *v26;
  unsigned int *v27[2];
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  mlir::Block *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  v26 = a1;
  v33 = (void *)(a1[1] & 0xFFFFFFFFFFFFFFF8);
  result = mlir::Type::isIndex((mlir::Type *)&v33);
  if (!(_DWORD)result)
    return result;
  if (a2)
  {
    v33 = a1;
    if ((~*((_DWORD *)a1 + 2) & 7) != 0)
      v5 = 0;
    else
      v5 = a1;
    v29 = (uint64_t)v5;
    if (v5)
    {
      ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v29);
    }
    else
    {
      ParentRegion = *(mlir::Block **)(mlir::Value::getDefiningOp((mlir::Value *)&v33) + 16);
      if (ParentRegion)
        ParentRegion = (mlir::Block *)mlir::Block::getParent(ParentRegion);
    }
    if (ParentRegion == a2)
      return 1;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v26);
    if (!DefiningOp)
    {
LABEL_36:
      v19 = *((_QWORD *)a2 + 2);
      if (v19 && (mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>((_QWORD *)(v19 + 48)) & 1) == 0)
      {
        result = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16);
        if (result)
        {
          result = mlir::Block::getParent((mlir::Block *)result);
          if (result)
            return mlir::affine::isValidSymbol(v26, result);
        }
        return result;
      }
      return 0;
    }
  }
  else
  {
    result = mlir::Value::getDefiningOp((mlir::Value *)&v26);
    DefiningOp = result;
    if (!result)
      return result;
  }
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
  {
    v33 = v35;
    v34 = 0x100000000;
    mlir::Operation::fold(DefiningOp, 0, 0, (uint64_t)&v33);
    v8 = *(_QWORD *)v33;
    if (v33 != v35)
      free(v33);
    if (v8 > 7)
      return 1;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
  {
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0)
      return 1;
    v12 = *(unsigned int *)(DefiningOp + 68);
    if (!(_DWORD)v12)
      return 1;
    v13 = *(_QWORD *)(DefiningOp + 72);
    v14 = v12 - 1;
    v15 = (uint64_t *)(v13 + 24);
    do
    {
      v16 = *v15;
      v15 += 4;
      result = mlir::affine::isValidSymbol(v16, a2);
      v18 = v14-- != 0;
    }
    while ((_DWORD)result && v18);
    return result;
  }
  if (!mlir::OpInterface<mlir::ShapedDimOpInterface,mlir::detail::ShapedDimOpInterfaceInterfaceTraits>::getInterfaceFor(DefiningOp)
    || (InterfaceFor = mlir::OpInterface<mlir::ShapedDimOpInterface,mlir::detail::ShapedDimOpInterfaceInterfaceTraits>::getInterfaceFor(DefiningOp),
        !DefiningOp))
  {
    if (!a2)
      return 0;
    goto LABEL_36;
  }
  v33 = (void *)DefiningOp;
  v34 = (uint64_t)InterfaceFor;
  v32 = a2;
  canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v33);
  v29 = canMapOperands;
  if (canMapOperands && (*(_QWORD *)(canMapOperands + 8) & 7) == 7)
  {
    ParentOp = mlir::Block::getParentOp(*(mlir::Block **)(canMapOperands + 16));
    if (ParentOp && (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((_QWORD *)(ParentOp + 48)) & 1) != 0)
      return 1;
  }
  else
  {
    v20 = *(mlir::Block **)(mlir::Value::getDefiningOp((mlir::Value *)&v29) + 16);
    if (v20)
    {
      v21 = mlir::Block::getParentOp(v20);
      if (v21)
      {
        if ((mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((_QWORD *)(v21 + 48)) & 1) != 0)
          return 1;
      }
    }
  }
  if ((~*(_DWORD *)(mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v33) + 8) & 7) == 0)
    return 0;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
  ConstantIntValue = mlir::getConstantIntValue(OperandRange);
  if (!v24)
    return 0;
  v31 = ConstantIntValue;
  v28 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v33);
  v29 = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  v30 = 0;
  v27[0] = (unsigned int *)&v31;
  v27[1] = (unsigned int *)&v32;
  llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::ViewOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(&v29, v27);
  llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::SubViewOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(&v29, v27);
  llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::AllocOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(&v29, v27);
  if (HIBYTE(v30))
    v25 = v30 == 0;
  else
    v25 = 1;
  return !v25;
}

uint64_t mlir::affine::isValidSymbol(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  mlir::Block *v3;
  uint64_t ParentOp;
  uint64_t v5;
  _QWORD *v6;
  mlir::Block *v7;
  uint64_t v8;
  uint64_t v9;
  mlir::Block *v10;
  mlir::Block *Parent;
  _QWORD *v12;
  unint64_t v13;

  v12 = (_QWORD *)result;
  if (result)
  {
    v1 = result;
    v13 = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
    result = mlir::Type::isIndex((mlir::Type *)&v13);
    if ((_DWORD)result)
    {
      v13 = v1;
      if ((~*(_DWORD *)(v1 + 8) & 7) != 0)
      {
        v3 = *(mlir::Block **)(mlir::Value::getDefiningOp((mlir::Value *)&v13) + 16);
        if (v3)
        {
          ParentOp = mlir::Block::getParentOp(v3);
          if (ParentOp)
          {
            if ((mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((_QWORD *)(ParentOp + 48)) & 1) != 0)
              return 1;
          }
        }
      }
      else
      {
        v2 = mlir::Block::getParentOp(*(mlir::Block **)(v1 + 16));
        if (v2 && (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((_QWORD *)(v2 + 48)) & 1) != 0)
          return 1;
      }
      result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (result)
      {
        v5 = result;
        v6 = v12;
        while (1)
        {
          v7 = *(mlir::Block **)(v5 + 16);
          if (!v7)
            break;
          v8 = v5;
          v9 = mlir::Block::getParentOp(v7);
          if (!v9)
            break;
          v5 = v9;
          if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((_QWORD *)(v9 + 48)))
          {
            v10 = *(mlir::Block **)(v8 + 16);
            if (v10)
            {
              Parent = (mlir::Block *)mlir::Block::getParent(v10);
              return mlir::affine::isValidSymbol(v6, Parent);
            }
            break;
          }
        }
        Parent = 0;
        return mlir::affine::isValidSymbol(v6, Parent);
      }
    }
  }
  return result;
}

BOOL mlir::affine::parseDimAndSymbolList(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  mlir::IndexType **v6;
  mlir::MLIRContext *v7;
  uint64_t IndexType;
  char *v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  BOOL v13;
  void *v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[33];

  v18[32] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x800000000;
  if (!(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v16, 1, 1, 0xFFFFFFFFLL))
  {
    v12 = 0;
    v14 = v16;
    if (v16 == v18)
      return v12;
    goto LABEL_15;
  }
  *a3 = v17;
  v6 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v6, v7);
  if ((*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v16, 6, 1, 0xFFFFFFFFLL))
  {
    if (!(_DWORD)v17)
    {
      v12 = 1;
      v14 = v16;
      if (v16 == v18)
        return v12;
      goto LABEL_15;
    }
    v9 = (char *)v16;
    v10 = 32 * v17 - 32;
    do
    {
      v11 = (*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, IndexType, a2);
      v12 = v11 != 0;
      v9 += 32;
      if (v11)
        v13 = v10 == 0;
      else
        v13 = 1;
      v10 -= 32;
    }
    while (!v13);
  }
  else
  {
    v12 = 0;
  }
  v14 = v16;
  if (v16 != v18)
LABEL_15:
    free(v14);
  return v12;
}

uint64_t mlir::affine::AffineApplyOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  unint64_t IndexType;
  int NumDims;
  uint64_t Kind;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  int64x2_t v13;
  int64x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  const char *v27;
  __int16 v28;
  uint64_t Value;
  int v30;
  uint64_t v31;
  _QWORD v32[3];
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  void *__p;
  _QWORD **v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  v31 = 0;
  if (!mlir::AsmParser::parseAttribute<mlir::AffineMapAttr>(a1, &v31, 0, (uint64_t)"map", 3, a2 + 112))return 0;
  v30 = 0;
  if (!mlir::affine::parseDimAndSymbolList(a1, a2 + 16, &v30)
    || !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
  {
    return 0;
  }
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v31);
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (NumDims == v30
    && *(_DWORD *)(a2 + 24) == mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value) + NumDims)
  {
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value);
    v9 = *(unsigned int *)(a2 + 72);
    if (v9 + Kind > (unint64_t)*(unsigned int *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + Kind, 8);
      v9 = *(unsigned int *)(a2 + 72);
      if ((_DWORD)Kind)
        goto LABEL_8;
    }
    else if ((_DWORD)Kind)
    {
LABEL_8:
      v10 = *(_QWORD *)(a2 + 64) + 8 * v9;
      v11 = (unint64_t *)v10;
      v12 = Kind;
      if (Kind < 4)
        goto LABEL_38;
      v11 = (unint64_t *)(v10 + 8 * (Kind & 0xFFFFFFFC));
      v12 = Kind & 3;
      v13 = vdupq_n_s64(IndexType);
      v14 = (int64x2_t *)(v10 + 16);
      v15 = Kind & 0xFFFFFFFC;
      do
      {
        v14[-1] = v13;
        *v14 = v13;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if ((Kind & 0xFFFFFFFC) != Kind)
      {
LABEL_38:
        do
        {
          *v11++ = IndexType;
          --v12;
        }
        while (v12);
      }
    }
    *(_DWORD *)(a2 + 72) = v9 + Kind;
    return 1;
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v27 = "dimension or symbol index mismatch";
  v28 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v32, a1, v18, &v27);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
  if (v32[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
  if (v39)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v38;
      v21 = __p;
      if (v38 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v38 = v19;
      operator delete(v21);
    }
    v22 = v35;
    if (v35)
    {
      v23 = v36;
      v24 = v35;
      if (v36 != v35)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v35;
      }
      v36 = v22;
      operator delete(v24);
    }
    if (v33 != &v34)
      free(v33);
  }
  return v16;
}

uint64_t mlir::affine::AffineApplyOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int NumDims;
  mlir::Operation *v11;
  mlir::ArrayAttr *v12;
  uint64_t Value;
  uint64_t v14;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  v6 = *this;
  v7 = *((unsigned int *)*this + 11);
  if ((v7 & 0x800000) != 0)
  {
    v8 = *((_QWORD *)v6 + 9);
    v9 = *((unsigned int *)v6 + 17);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v16[0] = *((_QWORD *)v6 + 2 * ((v7 >> 23) & 1) + 8);
  v16[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v16);
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)v16);
  printDimAndSymbolList(v8, 0, v8, v9, NumDims, (uint64_t)a2);
  v11 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v16[0] = mlir::Operation::getAttrDictionary(v11);
    v12 = (mlir::ArrayAttr *)v16;
  }
  else
  {
    v12 = (mlir::Operation *)((char *)v11 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v12);
  v16[0] = "map";
  v16[1] = 3;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, Value, v14, v16, 1);
}

llvm::raw_ostream *printDimAndSymbolList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  unint64_t v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *result;
  _BYTE *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  const char *v21;
  uint64_t v22;

  LODWORD(v7) = a5;
  v8 = a1 + 32 * a2;
  v9 = a4 - a2;
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 40);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 40;
  }
  v12 = v7;
  if (v9 >= v7)
    v7 = v7;
  else
    v7 = v9;
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
  v21 = ", ";
  v22 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8, 0, v8, v7, a6, v13, (uint64_t)&v21);
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
  v15 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v15 >= *((_QWORD *)result + 3))
  {
    result = llvm::raw_ostream::write(result, 41);
    v16 = v9 - v12;
    if (v9 <= v12)
      return result;
  }
  else
  {
    *((_QWORD *)result + 4) = v15 + 1;
    *v15 = 41;
    v16 = v9 - v12;
    if (v9 <= v12)
      return result;
  }
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 91);
  }
  else
  {
    *((_QWORD *)v17 + 4) = v18 + 1;
    *v18 = 91;
  }
  v19 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
  v21 = ", ";
  v22 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8 + 32 * v12, 0, v8 + 32 * v12, v16, a6, v19, (uint64_t)&v21);
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
  v20 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v20 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 93);
  *((_QWORD *)result + 4) = v20 + 1;
  *v20 = 93;
  return result;
}

uint64_t mlir::affine::AffineApplyOp::verify(uint64_t **this)
{
  int v2;
  int NumDims;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  const void **v20[4];
  __int16 v21;
  uint64_t Value;
  _QWORD v23[3];
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *__p;
  _QWORD **v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v23[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v23);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v2 = *((_DWORD *)*this + 17);
  else
    v2 = 0;
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (v2 == mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value) + NumDims)
  {
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) == 1)
      return 1;
    v20[0] = (const void **)"mapping must produce one value";
    v21 = 259;
    mlir::OpState::emitOpError(this, v20, (uint64_t)v23);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
    if (v23[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
    if (v30)
    {
      v13 = (_QWORD **)__p;
      if (__p)
      {
        v14 = v29;
        v15 = __p;
        if (v29 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v29 = v13;
        operator delete(v15);
      }
      v8 = v26;
      if (!v26)
        goto LABEL_36;
      v16 = v27;
      v10 = v26;
      if (v27 == v26)
      {
LABEL_35:
        v27 = v8;
        operator delete(v10);
LABEL_36:
        if (v24 != &v25)
          free(v24);
        return v4;
      }
      do
      {
        v18 = (void *)*--v16;
        v17 = v18;
        *v16 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v16 != v8);
LABEL_34:
      v10 = v26;
      goto LABEL_35;
    }
  }
  else
  {
    v20[0] = (const void **)"operand count and affine map dimension and symbol count must match";
    v21 = 259;
    mlir::OpState::emitOpError(this, v20, (uint64_t)v23);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
    if (v23[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
    if (v30)
    {
      v5 = (_QWORD **)__p;
      if (__p)
      {
        v6 = v29;
        v7 = __p;
        if (v29 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v29 = v5;
        operator delete(v7);
      }
      v8 = v26;
      if (!v26)
        goto LABEL_36;
      v9 = v27;
      v10 = v26;
      if (v27 == v26)
        goto LABEL_35;
      do
      {
        v12 = (void *)*--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          operator delete[](v11);
      }
      while (v9 != v8);
      goto LABEL_34;
    }
  }
  return v4;
}

uint64_t mlir::affine::AffineApplyOp::fold(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  int NumDims;
  unint64_t v7;
  char v9;
  mlir::MLIRContext *Context;
  uint64_t *AttributeUniquer;
  void *v12;
  char v13;
  void *v14;
  int *Value;
  void *v16[2];
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v16[0] = *(void **)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64);
  Value = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v16);
  v4 = (void *)mlir::AffineMap::getResult((mlir::AffineMap *)&Value, 0);
  v16[0] = v4;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v16) != 6)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v16, 0);
    v14 = v16[0];
    if (v16[0])
      goto LABEL_3;
LABEL_5:
    v16[0] = v4;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v16) == 7)
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v16, (uint64_t)v4);
      v14 = v16[0];
      if (v16[0])
      {
LABEL_7:
        NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
        v5 = *(_QWORD *)(*(_QWORD *)a1 + 72)
           + 32 * (mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v14) + NumDims);
        return *(_QWORD *)(v5 + 24) | 4;
      }
    }
    else
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v16, 0);
      v14 = v16[0];
      if (v16[0])
        goto LABEL_7;
    }
    v16[0] = v17;
    v16[1] = (void *)0x100000000;
    LOBYTE(v14) = 0;
    v9 = mlir::AffineMap::constantFold(&Value, *(_QWORD *)(a2 + 48), *(unsigned int *)(a2 + 56), (uint64_t)v16, &v14);
    if ((_BYTE)v14)
    {
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
      AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(Context);
      v7 = mlir::StorageUniquer::getSingletonImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) & 0xFFFFFFFFFFFFFFFBLL;
      v12 = v16[0];
      if (v16[0] == v17)
        return v7;
    }
    else
    {
      v13 = v9;
      v12 = v16[0];
      if (v13)
      {
        v7 = *(_QWORD *)v16[0] & 0xFFFFFFFFFFFFFFFBLL;
        if (v16[0] == v17)
          return v7;
      }
      else
      {
        v7 = 0;
        if (v16[0] == v17)
          return v7;
      }
    }
    free(v12);
    return v7;
  }
  mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v16, (uint64_t)v4);
  v14 = v16[0];
  if (!v16[0])
    goto LABEL_5;
LABEL_3:
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 72)
     + 32 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v14);
  return *(_QWORD *)(v5 + 24) | 4;
}

void composeAffineMapAndOperands(mlir::AffineBinaryOpExpr *a1, uint64_t a2)
{
  mlir::MLIRContext *LHS;
  char *v5;
  unsigned int NumDims;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  mlir::MLIRContext *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  mlir *v17;
  mlir *v18;
  uint64_t v19;
  unsigned int v20;
  mlir *v21;
  mlir::Value *v22;
  mlir::MLIRContext *v23;
  uint64_t DefiningOp;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  const double *v32;
  unsigned __int128 *v33;
  unint64_t v34;
  const double *v35;
  unsigned __int128 v36;
  unsigned __int128 v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t Result;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  unsigned int NumSymbols;
  uint64_t v50;
  unint64_t v51;
  mlir::MLIRContext *v52;
  unint64_t AffineDimExpr;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  mlir *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t AffineConstantExpr;
  uint64_t v76;
  mlir *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t AffineSymbolExpr;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  _DWORD *v87;
  uint64_t Value;
  void *v89;
  uint64_t v90;
  _BYTE v91[32];
  void *v92;
  unsigned int v93[2];
  _BYTE v94[32];
  void *v95;
  unsigned int v96[2];
  _BYTE v97[32];
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _QWORD v104[8];

  v104[6] = *MEMORY[0x1E0C80C00];
  if (!mlir::AffineExpr::getKind(a1))
  {
    mlir::affine::canonicalizeMapAndOperands(a1, a2);
    *(_QWORD *)a1 = mlir::simplifyAffineMap(*(int **)a1);
    return;
  }
  LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS(a1);
  v5 = *(char **)a2;
  NumDims = mlir::AffineMap::getNumDims(a1);
  v95 = v97;
  *(_QWORD *)v96 = 0x400000000;
  if (NumDims >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v97, NumDims, 8);
    v7 = v96[0];
LABEL_7:
    memcpy((char *)v95 + 8 * v7, v5, 8 * NumDims);
    v8 = v96[0];
    goto LABEL_8;
  }
  if (NumDims)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_8:
  v96[0] = v8 + NumDims;
  v9 = *(char **)a2;
  v11 = &v9[8 * mlir::AffineMap::getNumDims(a1)];
  v87 = (_DWORD *)(a2 + 8);
  v12 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8);
  v92 = v94;
  *(_QWORD *)v93 = 0x400000000;
  v13 = v12 - (_QWORD)v11;
  if ((unint64_t)(v12 - (_QWORD)v11) < 0x21)
  {
    v14 = 0;
    if (v11 == (char *)v12)
      goto LABEL_13;
    goto LABEL_12;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, v13 >> 3, 8);
  v14 = v93[0];
  if (v11 != (char *)v12)
  {
LABEL_12:
    memcpy((char *)v92 + 8 * v14, v11, v12 - (_QWORD)v11);
    v14 = v93[0];
  }
LABEL_13:
  v15 = v14 + ((unint64_t)v13 >> 3);
  v93[0] = v15;
  v16 = v96[0];
  if (v15 + v96[0])
  {
    v17 = 0;
    v18 = 0;
    do
    {
      while (1)
      {
        v19 = mlir::AffineBinaryOpExpr::getLHS(a1);
        v20 = v96[0];
        v21 = (mlir *)(v18 - v96[0]);
        v22 = (mlir::Value *)(v18 >= v96[0]
                            ? (char *)v92 + 8 * v21
                            : (char *)v95 + 8 * (_QWORD)v17);
        if (*(_QWORD *)v22)
        {
          v23 = (mlir::MLIRContext *)v19;
          DefiningOp = mlir::Value::getDefiningOp(v22);
          if (DefiningOp)
          {
            v25 = DefiningOp;
            if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
              break;
          }
        }
        v17 = (mlir *)((_DWORD)v18 + 1);
        v16 = v96[0];
        LODWORD(v15) = v93[0];
        v18 = v17;
        if ((mlir *)(v93[0] + (unint64_t)v96[0]) == v17)
          goto LABEL_79;
      }
      *(_QWORD *)v22 = 0;
      v102 = *(char **)(DefiningOp + 16 * (((unint64_t)*(unsigned int *)(DefiningOp + 44) >> 23) & 1) + 64);
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v102);
      if ((*(_BYTE *)(v25 + 46) & 0x80) != 0)
      {
        v26 = *(_QWORD *)(v25 + 72);
        v27 = *(unsigned int *)(v25 + 68);
        v102 = (char *)v104;
        v103 = 0x600000000;
        if (v27 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v27, 8);
          v28 = &v102[8 * v103];
          if (v27 >= 0xD
            && ((unint64_t)v28 < v26 + 32 * v27
              ? (v29 = v26 + 24 >= (unint64_t)&v102[8 * v27 + 8 * v103])
              : (v29 = 1),
                v29))
          {
            v30 = v27 & 3;
            if ((v27 & 3) == 0)
              v30 = 4;
            v31 = v27 - v30;
            v28 += 8 * v31;
            v32 = (const double *)(v26 + 88);
            v33 = (unsigned __int128 *)&v102[8 * v103 + 16];
            v34 = v31;
            do
            {
              v35 = v32 - 8;
              v36 = (unsigned __int128)vld4q_f64(v35);
              v37 = (unsigned __int128)vld4q_f64(v32);
              *(v33 - 1) = v36;
              *v33 = v37;
              v32 += 16;
              v33 += 2;
              v34 -= 4;
            }
            while (v34);
          }
          else
          {
LABEL_38:
            v31 = 0;
          }
          v38 = v27 - v31;
          v39 = (uint64_t *)(v26 + 32 * v31 + 24);
          do
          {
            v40 = *v39;
            v39 += 4;
            *(_QWORD *)v28 = v40;
            v28 += 8;
            --v38;
          }
          while (v38);
          v41 = v103;
          goto LABEL_42;
        }
        if ((_DWORD)v27)
        {
          v28 = (char *)v104;
          goto LABEL_38;
        }
        v41 = 0;
      }
      else
      {
        LODWORD(v27) = 0;
        v41 = 0;
        v102 = (char *)v104;
        HIDWORD(v103) = 6;
      }
LABEL_42:
      LODWORD(v103) = v41 + v27;
      mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&Value, (uint64_t)&v102);
      v100 = mlir::AffineMap::shiftDims((mlir::AffineMap *)&Value, v96[0], 0);
      v89 = (void *)mlir::AffineMap::shiftSymbols((mlir::AffineMap *)&v100, v93[0], 0);
      Result = mlir::AffineMap::getResult((mlir::AffineMap *)&v89, 0);
      v43 = (uint64_t)v102;
      v44 = v103;
      v45 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      if (v44 >= v45)
        v46 = v45;
      else
        v46 = v44;
      mlir::ValueRange::ValueRange((unint64_t *)&v100, v43, v46);
      v47 = v102;
      v48 = v103;
      NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
      v50 = v48 - NumSymbols;
      if (v48 <= NumSymbols)
        v50 = 0;
      if (v48 >= NumSymbols)
        v51 = NumSymbols;
      else
        v51 = v48;
      mlir::ValueRange::ValueRange((unint64_t *)&v98, (uint64_t)v47 + 8 * v50, v51);
      if (v18 < v20)
      {
        AffineDimExpr = mlir::getAffineDimExpr(v18, v23, v52);
        v55 = (void *)v100;
        v54 = v101;
        v56 = v96[0];
        v57 = v101 + v96[0];
        if (v57 <= v96[1])
          goto LABEL_55;
LABEL_54:
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v97, v57, 8);
        v56 = v96[0];
        goto LABEL_55;
      }
      AffineDimExpr = mlir::getAffineSymbolExpr(v21, v23, v52);
      v55 = (void *)v100;
      v54 = v101;
      v56 = v96[0];
      v57 = v101 + v96[0];
      if (v57 > v96[1])
        goto LABEL_54;
LABEL_55:
      v89 = v55;
      v90 = 0;
      if (v54)
      {
        v58 = 0;
        v59 = (uint64_t *)((char *)v95 + 8 * v56);
        do
        {
          *v59++ = mlir::ValueRange::dereference_iterator(&v89, v58);
          v58 = ++v90;
        }
        while (v89 != v55 || v58 != v54);
        LODWORD(v56) = v96[0];
      }
      v96[0] = v56 + v54;
      v62 = v98;
      v61 = v99;
      v63 = v93[0];
      v64 = v99 + v93[0];
      if (v64 > v93[1])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, v64, 8);
        v63 = v93[0];
      }
      v89 = v62;
      v90 = 0;
      if (v61)
      {
        v65 = 0;
        v66 = (uint64_t *)((char *)v92 + 8 * v63);
        do
        {
          *v66++ = mlir::ValueRange::dereference_iterator(&v89, v65);
          v65 = ++v90;
        }
        while (v89 != v62 || v65 != v61);
        LODWORD(v63) = v93[0];
      }
      v93[0] = v63 + v61;
      *(_QWORD *)a1 = mlir::AffineMap::replace((uint64_t *)a1, AffineDimExpr, Result, v96[0], (int)v63 + (int)v61);
      if (v102 != (char *)v104)
        free(v102);
      v17 = 0;
      v18 = 0;
      v16 = v96[0];
      LODWORD(v15) = v93[0];
    }
    while (v93[0] + (unint64_t)v96[0]);
  }
LABEL_79:
  *v87 = 0;
  v102 = (char *)v104;
  v103 = 0x400000000;
  v89 = v91;
  v90 = 0x400000000;
  if (v16 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v16, 8);
    LODWORD(v15) = v93[0];
    if (HIDWORD(v90) >= v93[0])
      goto LABEL_84;
    goto LABEL_83;
  }
  if (v15 > 4)
LABEL_83:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, v91, v15, 8);
LABEL_84:
  v86 = (void *)(a2 + 16);
  if (v96[0])
  {
    v68 = 0;
    v69 = (uint64_t *)v95;
    v70 = 8 * v96[0];
    do
    {
      while (1)
      {
        v71 = *v69;
        if (!*v69)
          break;
        v72 = mlir::getAffineDimExpr(v68, LHS, v10);
        v73 = v103;
        if (v103 >= (unint64_t)HIDWORD(v103))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v103 + 1, 8);
          v73 = v103;
        }
        *(_QWORD *)&v102[8 * v73] = v72;
        LODWORD(v103) = v103 + 1;
        v74 = *(unsigned int *)(a2 + 8);
        if (v74 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v86, v74 + 1, 8);
          v74 = *(unsigned int *)(a2 + 8);
        }
        v68 = (mlir *)((_DWORD)v68 + 1);
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v74) = v71;
        ++*v87;
        ++v69;
        v70 -= 8;
        if (!v70)
          goto LABEL_97;
      }
      AffineConstantExpr = mlir::getAffineConstantExpr(0, LHS, v10);
      v76 = v103;
      if (v103 >= (unint64_t)HIDWORD(v103))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v103 + 1, 8);
        v76 = v103;
      }
      *(_QWORD *)&v102[8 * v76] = AffineConstantExpr;
      LODWORD(v103) = v103 + 1;
      ++v69;
      v70 -= 8;
    }
    while (v70);
  }
  else
  {
    LODWORD(v68) = 0;
  }
LABEL_97:
  if (v93[0])
  {
    v77 = 0;
    v78 = (uint64_t *)v92;
    v79 = 8 * v93[0];
    do
    {
      while (1)
      {
        v80 = *v78;
        if (!*v78)
          break;
        AffineSymbolExpr = mlir::getAffineSymbolExpr(v77, LHS, v10);
        v82 = v90;
        if (v90 >= (unint64_t)HIDWORD(v90))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, v91, v90 + 1, 8);
          v82 = v90;
        }
        *((_QWORD *)v89 + v82) = AffineSymbolExpr;
        LODWORD(v90) = v90 + 1;
        v83 = *(unsigned int *)(a2 + 8);
        if (v83 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v86, v83 + 1, 8);
          v83 = *(unsigned int *)(a2 + 8);
        }
        v77 = (mlir *)((_DWORD)v77 + 1);
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v83) = v80;
        ++*v87;
        ++v78;
        v79 -= 8;
        if (!v79)
          goto LABEL_111;
      }
      v84 = mlir::getAffineConstantExpr(0, LHS, v10);
      v85 = v90;
      if (v90 >= (unint64_t)HIDWORD(v90))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, v91, v90 + 1, 8);
        v85 = v90;
      }
      *((_QWORD *)v89 + v85) = v84;
      LODWORD(v90) = v90 + 1;
      ++v78;
      v79 -= 8;
    }
    while (v79);
  }
  else
  {
    LODWORD(v77) = 0;
  }
LABEL_111:
  *(_QWORD *)a1 = mlir::AffineMap::replaceDimsAndSymbols((uint64_t *)a1, (uint64_t)v102, v103, (uint64_t)v89, v90, (int)v68, (int)v77);
  mlir::affine::canonicalizeMapAndOperands(a1, a2);
  *(_QWORD *)a1 = mlir::simplifyAffineMap(*(int **)a1);
  if (v89 != v91)
    free(v89);
  if (v102 != (char *)v104)
    free(v102);
  if (v92 != v94)
    free(v92);
  if (v95 != v97)
    free(v95);
}

void mlir::affine::canonicalizeMapAndOperands(mlir::AffineBinaryOpExpr *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int NumDims;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int NumInputs;
  unint64_t v12;
  mlir *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **p_src;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  mlir::MLIRContext *v21;
  uint64_t AffineSymbolExpr;
  uint64_t AffineDimExpr;
  void *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  size_t v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  void *v45;
  size_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  mlir *v56;
  uint64_t v57;
  unint64_t *v58;
  int v59;
  mlir::MLIRContext *v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm *v65;
  _QWORD *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  mlir *v74;
  uint64_t v75;
  uint64_t DefiningOp;
  uint64_t v77;
  BOOL v78;
  unint64_t *v79;
  int v80;
  mlir::MLIRContext *v81;
  void **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  mlir::MLIRContext *v89;
  uint64_t v90;
  uint64_t AffineConstantExpr;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  int NumSymbols;
  mlir::MLIRContext *LHS;
  mlir::MLIRContext *v99;
  unint64_t v100;
  void *__p;
  void *v102;
  _QWORD *v103;
  void *v104;
  uint64_t v105;
  _BYTE v106[64];
  void *__src;
  llvm *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[64];
  void *v120;
  llvm *p_p;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _BYTE v132[64];
  void **v133;
  uint64_t v134;
  _QWORD v135[3];

  v135[1] = *MEMORY[0x1E0C80C00];
  if (!a1 || !*(_DWORD *)(a2 + 8))
    return;
  LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS(a1);
  v120 = &v122;
  p_p = (llvm *)0x800000000;
  v4 = *(unsigned int *)(a2 + 8);
  if (v4 <= 8)
  {
    __src = &v109;
    v108 = (llvm *)0x800000000;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, v4, 8);
    v5 = *(unsigned int *)(a2 + 8);
    __src = &v109;
    v108 = (llvm *)0x800000000;
    if (v5 >= 9)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v109, v5, 8);
  }
  NumSymbols = mlir::AffineMap::getNumSymbols(a1);
  NumDims = mlir::AffineMap::getNumDims(a1);
  v130 = v132;
  v131 = 0x800000000;
  if (NumDims)
  {
    v7 = NumDims;
    v8 = NumDims;
    if (NumDims < 9)
    {
      v9 = 0;
      v10 = NumDims;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, NumDims, 8);
      v9 = v131;
      v10 = v8 - v131;
      if (v8 == v131)
        goto LABEL_13;
    }
    bzero(&v130[8 * v9], 8 * v10);
LABEL_13:
    LODWORD(v131) = v7;
  }
  NumInputs = mlir::AffineMap::getNumInputs(a1);
  if (NumInputs)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = NumInputs;
    do
    {
      v19 = mlir::AffineMap::getNumDims(a1);
      v20 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v12);
      if (v12 >= v19)
      {
        v16 = p_p;
        p_src = &v120;
        if (p_p >= (unint64_t)HIDWORD(p_p))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, p_p + 1, 8);
          v16 = p_p;
        }
        v18 = v14;
      }
      else if (mlir::affine::isValidSymbol(*(_QWORD *)(*(_QWORD *)a2 + 8 * v12)))
      {
        v18 = (v14 + 1);
        AffineSymbolExpr = mlir::getAffineSymbolExpr((mlir *)(v14 + NumSymbols), LHS, v21);
        *(_QWORD *)&v130[8 * v12] = AffineSymbolExpr;
        v20 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v12);
        v16 = v108;
        p_src = &__src;
        if (v108 >= (unint64_t)HIDWORD(v108))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v109, v108 + 1, 8);
          v16 = v108;
        }
      }
      else
      {
        AffineDimExpr = mlir::getAffineDimExpr(v13, LHS, v21);
        *(_QWORD *)&v130[8 * v12] = AffineDimExpr;
        v20 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v12);
        v16 = p_p;
        p_src = &v120;
        if (p_p >= (unint64_t)HIDWORD(p_p))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, p_p + 1, 8);
          v16 = p_p;
        }
        v18 = v14;
        v13 = (mlir *)((_DWORD)v13 + 1);
      }
      *((_QWORD *)*p_src + v16) = v20;
      ++*((_DWORD *)p_src + 2);
      ++v12;
      v14 = v18;
    }
    while (v15 != v12);
  }
  else
  {
    LODWORD(v18) = 0;
    LODWORD(v13) = 0;
  }
  v24 = __src;
  v25 = v108;
  v26 = p_p;
  v27 = p_p + (unint64_t)v108;
  if (v27 > HIDWORD(p_p))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, v27, 8);
    v26 = p_p;
  }
  if ((_DWORD)v25)
  {
    memcpy((char *)v120 + 8 * v26, v24, 8 * v25);
    v26 = p_p;
  }
  v28 = v26 + v25;
  LODWORD(p_p) = v28;
  if (&v120 != (void **)a2)
  {
    v29 = *(unsigned int *)(a2 + 8);
    if (v29 >= v28)
    {
      if ((_DWORD)v28)
        memmove(*(void **)a2, v120, 8 * v28);
      goto LABEL_43;
    }
    if (*(_DWORD *)(a2 + 12) >= v28)
    {
      if ((_DWORD)v29)
      {
        memmove(*(void **)a2, v120, 8 * v29);
        v30 = p_p;
        if (v29 == p_p)
        {
LABEL_43:
          *(_DWORD *)(a2 + 8) = v28;
          goto LABEL_44;
        }
      }
      else
      {
        v29 = 0;
        v30 = p_p;
        if (!(_DWORD)p_p)
          goto LABEL_43;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v28, 8);
      v29 = 0;
      v30 = p_p;
      if (!(_DWORD)p_p)
        goto LABEL_43;
    }
    memcpy((void *)(*(_QWORD *)a2 + 8 * v29), (char *)v120 + 8 * v29, 8 * v30 - 8 * v29);
    goto LABEL_43;
  }
LABEL_44:
  *(_QWORD *)a1 = mlir::AffineMap::replaceDimsAndSymbols((uint64_t *)a1, (uint64_t)v130, v131, 0, 0, (int)v13, (int)v18 + NumSymbols);
  if (v130 != v132)
    free(v130);
  if (__src != &v109)
    free(__src);
  if (v120 != &v122)
    free(v120);
  v31 = mlir::AffineMap::getNumDims(a1);
  v32 = v31;
  v102 = (void *)1;
  if (v31 <= 0x39)
  {
    v33 = (_DWORD *)((v31 << 58) | 1);
    goto LABEL_58;
  }
  v34 = (char *)operator new(0x48uLL);
  v33 = v34;
  v35 = v32 + 63;
  v36 = (v32 + 63) >> 6;
  *(_QWORD *)v34 = v34 + 16;
  *((_DWORD *)v34 + 3) = 6;
  if ((v32 + 63) >= 0x1C0)
  {
    *((_DWORD *)v34 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v34, v34 + 16, v35 >> 6, 8);
    v37 = *(void **)v33;
    v38 = 8 * v36;
LABEL_56:
    bzero(v37, v38);
    goto LABEL_57;
  }
  if (v35 >= 0x40)
  {
    v37 = v34 + 16;
    v38 = 8 * v36;
    goto LABEL_56;
  }
LABEL_57:
  v33[2] = v36;
  v33[16] = v32;
LABEL_58:
  v102 = v33;
  v39 = mlir::AffineMap::getNumSymbols(a1);
  v40 = v39;
  __p = (void *)1;
  if (v39 <= 0x39)
  {
    v41 = (_DWORD *)((v39 << 58) | 1);
    goto LABEL_66;
  }
  v42 = (char *)operator new(0x48uLL);
  v41 = v42;
  v43 = v40 + 63;
  v44 = (v40 + 63) >> 6;
  *(_QWORD *)v42 = v42 + 16;
  *((_DWORD *)v42 + 3) = 6;
  if ((v40 + 63) >= 0x1C0)
  {
    *((_DWORD *)v42 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, v42 + 16, v43 >> 6, 8);
    v45 = *(void **)v41;
    v46 = 8 * v44;
LABEL_64:
    bzero(v45, v46);
    goto LABEL_65;
  }
  if (v43 >= 0x40)
  {
    v45 = v42 + 16;
    v46 = 8 * v44;
    goto LABEL_64;
  }
LABEL_65:
  v41[2] = v44;
  v41[16] = v40;
LABEL_66:
  __p = v41;
  v120 = &v102;
  p_p = (llvm *)&__p;
  mlir::AffineMap::walkExprs(a1, (uint64_t)llvm::function_ref<void ()(mlir::AffineExpr)>::callback_fn<void canonicalizeMapOrSetAndOperands<mlir::AffineMap>(mlir::AffineMap *,llvm::SmallVectorImpl<mlir::Value> *)::{lambda(mlir::AffineExpr)#1}>, (uint64_t)&v120);
  v99 = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS(a1);
  v130 = v132;
  v131 = 0x800000000;
  v47 = *(unsigned int *)(a2 + 8);
  if (v47 >= 9)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v47, 8);
  v120 = (void *)1;
  p_p = (llvm *)-4096;
  v123 = -4096;
  v124 = -4096;
  v125 = -4096;
  v126 = -4096;
  v127 = -4096;
  v128 = -4096;
  v129 = -4096;
  v48 = mlir::AffineMap::getNumDims(a1);
  v117 = v119;
  v118 = 0x800000000;
  if (v48)
  {
    v49 = v48;
    v50 = v48;
    if (v48 < 9)
    {
      v51 = 0;
      v52 = v48;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v48, 8);
      v51 = v118;
      v52 = v50 - v118;
      if (v50 == v118)
        goto LABEL_74;
    }
    bzero((char *)v117 + 8 * v51, 8 * v52);
LABEL_74:
    LODWORD(v118) = v49;
  }
  v53 = mlir::AffineMap::getNumDims(a1);
  if (v53)
  {
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = v53;
    while (1)
    {
      if ((v102 & 1) != 0)
      {
        if (((1 << v55) & ((unint64_t)v102 >> 1) & ~(-1 << ((unint64_t)v102 >> 58))) != 0)
        {
LABEL_83:
          v58 = (unint64_t *)(*(_QWORD *)a2 + v54);
          __src = 0;
          v59 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&v120, v58, &__src);
          if ((v120 & 1) != 0)
            v61 = (void **)&v130;
          else
            v61 = (void **)((char *)p_p + 16 * v122);
          if (!v59 || __src == v61)
          {
            v62 = mlir::getAffineDimExpr(v56, v99, v60);
            *((_QWORD *)v117 + v55) = v62;
            v63 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v55);
            v64 = v131;
            if (v131 >= (unint64_t)HIDWORD(v131))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v131 + 1, 8);
              v64 = v131;
            }
            *(_QWORD *)&v130[8 * v64] = v63;
            LODWORD(v131) = v131 + 1;
            v65 = (llvm *)*((_QWORD *)v117 + v55);
            __src = *(void **)(*(_QWORD *)a2 + 8 * v55);
            v108 = v65;
            v104 = 0;
            if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&v120, (unint64_t *)&__src, &v104) & 1) == 0)
            {
              v66 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(&v120, (uint64_t)&__src, (unint64_t *)&__src, v104);
              *v66 = __src;
              v66[1] = v108;
            }
            v56 = (mlir *)((_DWORD)v56 + 1);
          }
          else
          {
            *((_QWORD *)v117 + v55) = *((_QWORD *)__src + 1);
          }
        }
      }
      else if ((*(_QWORD *)(*(_QWORD *)v102 + 8 * (v55 >> 6)) & (1 << v55)) != 0)
      {
        goto LABEL_83;
      }
      ++v55;
      v54 += 8;
      if (v57 == v55)
        goto LABEL_94;
    }
  }
  LODWORD(v56) = 0;
LABEL_94:
  __src = (void *)1;
  v108 = (llvm *)-4096;
  v110 = -4096;
  v111 = -4096;
  v112 = -4096;
  v113 = -4096;
  v114 = -4096;
  v115 = -4096;
  v116 = -4096;
  v67 = mlir::AffineMap::getNumSymbols(a1);
  v104 = v106;
  v105 = 0x800000000;
  if (v67)
  {
    v68 = v67;
    v69 = v67;
    if (v67 < 9)
    {
      v70 = 0;
      v71 = v67;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v106, v67, 8);
      v70 = v105;
      v71 = v69 - v105;
      if (v69 == v105)
        goto LABEL_100;
    }
    bzero((char *)v104 + 8 * v70, 8 * v71);
LABEL_100:
    LODWORD(v105) = v68;
  }
  v72 = mlir::AffineMap::getNumSymbols(a1);
  if (v72)
  {
    v73 = 0;
    v74 = 0;
    v75 = v72;
    while (1)
    {
      if ((__p & 1) != 0)
      {
        if (((1 << v73) & ((unint64_t)__p >> 1) & ~(-1 << ((unint64_t)__p >> 58))) != 0)
        {
LABEL_109:
          v100 = 0;
          v103 = *(_QWORD **)(*(_QWORD *)a2 + 8 * (v73 + mlir::AffineMap::getNumDims(a1)));
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v103);
          if (!DefiningOp)
            goto LABEL_119;
          v77 = DefiningOp;
          if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
            goto LABEL_119;
          v133 = (void **)v135;
          v134 = 0x100000000;
          mlir::Operation::fold(v77, 0, 0, (uint64_t)&v133);
          v78 = *(_UNKNOWN **)(*(_QWORD *)((unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
             || ((unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8) == 0;
          if (!v78)
            v100 = (unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8;
          if (v133 != v135)
            free(v133);
          if (!v78)
          {
            mlir::IntegerAttr::getValue(&v100, (llvm::APInt *)&v133);
            if (v134 > 0x40)
              v90 = (uint64_t)*v133;
            else
              v90 = (uint64_t)((_QWORD)v133 << -(uint64_t)v134) >> -(uint64_t)v134;
            AffineConstantExpr = mlir::getAffineConstantExpr((mlir *)v90, v99, v89);
            *((_QWORD *)v104 + v73) = AffineConstantExpr;
            if (v134 >= 0x41 && v133)
              operator delete[](v133);
          }
          else
          {
LABEL_119:
            v79 = (unint64_t *)(*(_QWORD *)a2
                                     + 8 * (v73 + mlir::AffineMap::getNumDims(a1)));
            v133 = 0;
            v80 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&__src, v79, &v133);
            if ((__src & 1) != 0)
              v82 = &v117;
            else
              v82 = (void **)((char *)v108 + 16 * v109);
            if (!v80 || v133 == v82)
            {
              v83 = mlir::getAffineSymbolExpr(v74, v99, v81);
              *((_QWORD *)v104 + v73) = v83;
              v84 = *(_QWORD *)(*(_QWORD *)a2 + 8
                                              * (v73 + mlir::AffineMap::getNumDims(a1)));
              v85 = v131;
              if (v131 >= (unint64_t)HIDWORD(v131))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v131 + 1, 8);
                v85 = v131;
              }
              *(_QWORD *)&v130[8 * v85] = v84;
              LODWORD(v131) = v131 + 1;
              v86 = mlir::AffineMap::getNumDims(a1);
              v87 = *((_QWORD *)v104 + v73);
              v133 = *(void ***)(*(_QWORD *)a2 + 8 * (v73 + v86));
              v134 = v87;
              v103 = 0;
              if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&__src, (unint64_t *)&v133, &v103) & 1) == 0)
              {
                v88 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(&__src, (uint64_t)&v133, (unint64_t *)&v133, v103);
                *v88 = v133;
                v88[1] = v134;
              }
              v74 = (mlir *)((_DWORD)v74 + 1);
            }
            else
            {
              *((_QWORD *)v104 + v73) = v133[1];
            }
          }
        }
      }
      else if ((*(_QWORD *)(*(_QWORD *)__p + 8 * (v73 >> 6)) & (1 << v73)) != 0)
      {
        goto LABEL_109;
      }
      if (v75 == ++v73)
        goto LABEL_136;
    }
  }
  LODWORD(v74) = 0;
LABEL_136:
  *(_QWORD *)a1 = mlir::AffineMap::replaceDimsAndSymbols((uint64_t *)a1, (uint64_t)v117, v118, (uint64_t)v104, v105, (int)v56, (int)v74);
  if (&v130 == (char **)a2)
    goto LABEL_147;
  v92 = v131;
  v93 = *(unsigned int *)(a2 + 8);
  if (v93 >= v131)
  {
    if ((_DWORD)v131)
      memmove(*(void **)a2, v130, 8 * v131);
    goto LABEL_146;
  }
  if (*(_DWORD *)(a2 + 12) < v131)
  {
    *(_DWORD *)(a2 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v92, 8);
    v93 = 0;
    v94 = v131;
    if (!(_DWORD)v131)
      goto LABEL_146;
    goto LABEL_145;
  }
  if (!(_DWORD)v93)
  {
    v93 = 0;
    v94 = v131;
    if (!(_DWORD)v131)
      goto LABEL_146;
    goto LABEL_145;
  }
  memmove(*(void **)a2, v130, 8 * v93);
  v94 = v131;
  if (v93 != v131)
LABEL_145:
    memcpy((void *)(*(_QWORD *)a2 + 8 * v93), &v130[8 * v93], 8 * v94 - 8 * v93);
LABEL_146:
  *(_DWORD *)(a2 + 8) = v92;
LABEL_147:
  if (v104 != v106)
    free(v104);
  if ((__src & 1) == 0)
    llvm::deallocate_buffer(v108, (void *)(16 * v109));
  if (v117 != v119)
    free(v117);
  if ((v120 & 1) == 0)
    llvm::deallocate_buffer(p_p, (void *)(16 * v122));
  if (v130 != v132)
    free(v130);
  v95 = __p;
  if ((__p & 1) == 0 && __p)
  {
    if (*(void **)__p != (char *)__p + 16)
      free(*(void **)__p);
    operator delete(v95);
  }
  v96 = v102;
  if ((v102 & 1) == 0 && v102)
  {
    if (*(void **)v102 != (char *)v102 + 16)
      free(*(void **)v102);
    operator delete(v96);
  }
}

void mlir::affine::canonicalizeSetAndOperands(mlir::IntegerSet *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int NumDims;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int NumInputs;
  unint64_t v12;
  mlir *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **p_src;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  mlir::MLIRContext *v21;
  uint64_t AffineSymbolExpr;
  uint64_t AffineDimExpr;
  void *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  size_t v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  void *v45;
  size_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  mlir *v56;
  uint64_t v57;
  unint64_t *v58;
  int v59;
  mlir::MLIRContext *v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm *v65;
  _QWORD *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  mlir *v74;
  uint64_t v75;
  uint64_t DefiningOp;
  uint64_t v77;
  BOOL v78;
  unint64_t *v79;
  int v80;
  mlir::MLIRContext *v81;
  void **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  mlir::MLIRContext *v89;
  uint64_t v90;
  uint64_t AffineConstantExpr;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  int NumSymbols;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v99;
  unint64_t v100;
  void *__p;
  void *v102;
  _QWORD *v103;
  void *v104;
  uint64_t v105;
  _BYTE v106[64];
  void *__src;
  llvm *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[64];
  void *v120;
  llvm *p_p;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _BYTE v132[64];
  void **v133;
  uint64_t v134;
  _QWORD v135[3];

  v135[1] = *MEMORY[0x1E0C80C00];
  if (!a1 || !*(_DWORD *)(a2 + 8))
    return;
  Context = (mlir::MLIRContext *)mlir::IntegerSet::getContext(a1);
  v120 = &v122;
  p_p = (llvm *)0x800000000;
  v4 = *(unsigned int *)(a2 + 8);
  if (v4 <= 8)
  {
    __src = &v109;
    v108 = (llvm *)0x800000000;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, v4, 8);
    v5 = *(unsigned int *)(a2 + 8);
    __src = &v109;
    v108 = (llvm *)0x800000000;
    if (v5 >= 9)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v109, v5, 8);
  }
  NumSymbols = mlir::AffineMap::getNumSymbols(a1);
  NumDims = mlir::AffineMap::getNumDims(a1);
  v130 = v132;
  v131 = 0x800000000;
  if (NumDims)
  {
    v7 = NumDims;
    v8 = NumDims;
    if (NumDims < 9)
    {
      v9 = 0;
      v10 = NumDims;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, NumDims, 8);
      v9 = v131;
      v10 = v8 - v131;
      if (v8 == v131)
        goto LABEL_13;
    }
    bzero(&v130[8 * v9], 8 * v10);
LABEL_13:
    LODWORD(v131) = v7;
  }
  NumInputs = mlir::AffineMap::getNumInputs(a1);
  if (NumInputs)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = NumInputs;
    do
    {
      v19 = mlir::AffineMap::getNumDims(a1);
      v20 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v12);
      if (v12 >= v19)
      {
        v16 = p_p;
        p_src = &v120;
        if (p_p >= (unint64_t)HIDWORD(p_p))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, p_p + 1, 8);
          v16 = p_p;
        }
        v18 = v14;
      }
      else if (mlir::affine::isValidSymbol(*(_QWORD *)(*(_QWORD *)a2 + 8 * v12)))
      {
        v18 = (v14 + 1);
        AffineSymbolExpr = mlir::getAffineSymbolExpr((mlir *)(v14 + NumSymbols), Context, v21);
        *(_QWORD *)&v130[8 * v12] = AffineSymbolExpr;
        v20 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v12);
        v16 = v108;
        p_src = &__src;
        if (v108 >= (unint64_t)HIDWORD(v108))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v109, v108 + 1, 8);
          v16 = v108;
        }
      }
      else
      {
        AffineDimExpr = mlir::getAffineDimExpr(v13, Context, v21);
        *(_QWORD *)&v130[8 * v12] = AffineDimExpr;
        v20 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v12);
        v16 = p_p;
        p_src = &v120;
        if (p_p >= (unint64_t)HIDWORD(p_p))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, p_p + 1, 8);
          v16 = p_p;
        }
        v18 = v14;
        v13 = (mlir *)((_DWORD)v13 + 1);
      }
      *((_QWORD *)*p_src + v16) = v20;
      ++*((_DWORD *)p_src + 2);
      ++v12;
      v14 = v18;
    }
    while (v15 != v12);
  }
  else
  {
    LODWORD(v18) = 0;
    LODWORD(v13) = 0;
  }
  v24 = __src;
  v25 = v108;
  v26 = p_p;
  v27 = p_p + (unint64_t)v108;
  if (v27 > HIDWORD(p_p))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, v27, 8);
    v26 = p_p;
  }
  if ((_DWORD)v25)
  {
    memcpy((char *)v120 + 8 * v26, v24, 8 * v25);
    v26 = p_p;
  }
  v28 = v26 + v25;
  LODWORD(p_p) = v28;
  if (&v120 != (void **)a2)
  {
    v29 = *(unsigned int *)(a2 + 8);
    if (v29 >= v28)
    {
      if ((_DWORD)v28)
        memmove(*(void **)a2, v120, 8 * v28);
      goto LABEL_43;
    }
    if (*(_DWORD *)(a2 + 12) >= v28)
    {
      if ((_DWORD)v29)
      {
        memmove(*(void **)a2, v120, 8 * v29);
        v30 = p_p;
        if (v29 == p_p)
        {
LABEL_43:
          *(_DWORD *)(a2 + 8) = v28;
          goto LABEL_44;
        }
      }
      else
      {
        v29 = 0;
        v30 = p_p;
        if (!(_DWORD)p_p)
          goto LABEL_43;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v28, 8);
      v29 = 0;
      v30 = p_p;
      if (!(_DWORD)p_p)
        goto LABEL_43;
    }
    memcpy((void *)(*(_QWORD *)a2 + 8 * v29), (char *)v120 + 8 * v29, 8 * v30 - 8 * v29);
    goto LABEL_43;
  }
LABEL_44:
  *(_QWORD *)a1 = mlir::IntegerSet::replaceDimsAndSymbols((uint64_t)a1, (uint64_t)v130, v131, 0, 0, (int)v13, (int)v18 + NumSymbols);
  if (v130 != v132)
    free(v130);
  if (__src != &v109)
    free(__src);
  if (v120 != &v122)
    free(v120);
  v31 = mlir::AffineMap::getNumDims(a1);
  v32 = v31;
  v102 = (void *)1;
  if (v31 <= 0x39)
  {
    v33 = (_DWORD *)((v31 << 58) | 1);
    goto LABEL_58;
  }
  v34 = (char *)operator new(0x48uLL);
  v33 = v34;
  v35 = v32 + 63;
  v36 = (v32 + 63) >> 6;
  *(_QWORD *)v34 = v34 + 16;
  *((_DWORD *)v34 + 3) = 6;
  if ((v32 + 63) >= 0x1C0)
  {
    *((_DWORD *)v34 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v34, v34 + 16, v35 >> 6, 8);
    v37 = *(void **)v33;
    v38 = 8 * v36;
LABEL_56:
    bzero(v37, v38);
    goto LABEL_57;
  }
  if (v35 >= 0x40)
  {
    v37 = v34 + 16;
    v38 = 8 * v36;
    goto LABEL_56;
  }
LABEL_57:
  v33[2] = v36;
  v33[16] = v32;
LABEL_58:
  v102 = v33;
  v39 = mlir::AffineMap::getNumSymbols(a1);
  v40 = v39;
  __p = (void *)1;
  if (v39 <= 0x39)
  {
    v41 = (_DWORD *)((v39 << 58) | 1);
    goto LABEL_66;
  }
  v42 = (char *)operator new(0x48uLL);
  v41 = v42;
  v43 = v40 + 63;
  v44 = (v40 + 63) >> 6;
  *(_QWORD *)v42 = v42 + 16;
  *((_DWORD *)v42 + 3) = 6;
  if ((v40 + 63) >= 0x1C0)
  {
    *((_DWORD *)v42 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, v42 + 16, v43 >> 6, 8);
    v45 = *(void **)v41;
    v46 = 8 * v44;
LABEL_64:
    bzero(v45, v46);
    goto LABEL_65;
  }
  if (v43 >= 0x40)
  {
    v45 = v42 + 16;
    v46 = 8 * v44;
    goto LABEL_64;
  }
LABEL_65:
  v41[2] = v44;
  v41[16] = v40;
LABEL_66:
  __p = v41;
  v120 = &v102;
  p_p = (llvm *)&__p;
  mlir::IntegerSet::walkExprs(a1, (uint64_t)llvm::function_ref<void ()(mlir::AffineExpr)>::callback_fn<void canonicalizeMapOrSetAndOperands<mlir::IntegerSet>(mlir::IntegerSet *,llvm::SmallVectorImpl<mlir::Value> *)::{lambda(mlir::AffineExpr)#1}>, (uint64_t)&v120);
  v99 = (mlir::MLIRContext *)mlir::IntegerSet::getContext(a1);
  v130 = v132;
  v131 = 0x800000000;
  v47 = *(unsigned int *)(a2 + 8);
  if (v47 >= 9)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v47, 8);
  v120 = (void *)1;
  p_p = (llvm *)-4096;
  v123 = -4096;
  v124 = -4096;
  v125 = -4096;
  v126 = -4096;
  v127 = -4096;
  v128 = -4096;
  v129 = -4096;
  v48 = mlir::AffineMap::getNumDims(a1);
  v117 = v119;
  v118 = 0x800000000;
  if (v48)
  {
    v49 = v48;
    v50 = v48;
    if (v48 < 9)
    {
      v51 = 0;
      v52 = v48;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v48, 8);
      v51 = v118;
      v52 = v50 - v118;
      if (v50 == v118)
        goto LABEL_74;
    }
    bzero((char *)v117 + 8 * v51, 8 * v52);
LABEL_74:
    LODWORD(v118) = v49;
  }
  v53 = mlir::AffineMap::getNumDims(a1);
  if (v53)
  {
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = v53;
    while (1)
    {
      if ((v102 & 1) != 0)
      {
        if (((1 << v55) & ((unint64_t)v102 >> 1) & ~(-1 << ((unint64_t)v102 >> 58))) != 0)
        {
LABEL_83:
          v58 = (unint64_t *)(*(_QWORD *)a2 + v54);
          __src = 0;
          v59 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&v120, v58, &__src);
          if ((v120 & 1) != 0)
            v61 = (void **)&v130;
          else
            v61 = (void **)((char *)p_p + 16 * v122);
          if (!v59 || __src == v61)
          {
            v62 = mlir::getAffineDimExpr(v56, v99, v60);
            *((_QWORD *)v117 + v55) = v62;
            v63 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v55);
            v64 = v131;
            if (v131 >= (unint64_t)HIDWORD(v131))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v131 + 1, 8);
              v64 = v131;
            }
            *(_QWORD *)&v130[8 * v64] = v63;
            LODWORD(v131) = v131 + 1;
            v65 = (llvm *)*((_QWORD *)v117 + v55);
            __src = *(void **)(*(_QWORD *)a2 + 8 * v55);
            v108 = v65;
            v104 = 0;
            if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&v120, (unint64_t *)&__src, &v104) & 1) == 0)
            {
              v66 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(&v120, (uint64_t)&__src, (unint64_t *)&__src, v104);
              *v66 = __src;
              v66[1] = v108;
            }
            v56 = (mlir *)((_DWORD)v56 + 1);
          }
          else
          {
            *((_QWORD *)v117 + v55) = *((_QWORD *)__src + 1);
          }
        }
      }
      else if ((*(_QWORD *)(*(_QWORD *)v102 + 8 * (v55 >> 6)) & (1 << v55)) != 0)
      {
        goto LABEL_83;
      }
      ++v55;
      v54 += 8;
      if (v57 == v55)
        goto LABEL_94;
    }
  }
  LODWORD(v56) = 0;
LABEL_94:
  __src = (void *)1;
  v108 = (llvm *)-4096;
  v110 = -4096;
  v111 = -4096;
  v112 = -4096;
  v113 = -4096;
  v114 = -4096;
  v115 = -4096;
  v116 = -4096;
  v67 = mlir::AffineMap::getNumSymbols(a1);
  v104 = v106;
  v105 = 0x800000000;
  if (v67)
  {
    v68 = v67;
    v69 = v67;
    if (v67 < 9)
    {
      v70 = 0;
      v71 = v67;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v106, v67, 8);
      v70 = v105;
      v71 = v69 - v105;
      if (v69 == v105)
        goto LABEL_100;
    }
    bzero((char *)v104 + 8 * v70, 8 * v71);
LABEL_100:
    LODWORD(v105) = v68;
  }
  v72 = mlir::AffineMap::getNumSymbols(a1);
  if (v72)
  {
    v73 = 0;
    v74 = 0;
    v75 = v72;
    while (1)
    {
      if ((__p & 1) != 0)
      {
        if (((1 << v73) & ((unint64_t)__p >> 1) & ~(-1 << ((unint64_t)__p >> 58))) != 0)
        {
LABEL_109:
          v100 = 0;
          v103 = *(_QWORD **)(*(_QWORD *)a2 + 8 * (v73 + mlir::AffineMap::getNumDims(a1)));
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v103);
          if (!DefiningOp)
            goto LABEL_119;
          v77 = DefiningOp;
          if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
            goto LABEL_119;
          v133 = (void **)v135;
          v134 = 0x100000000;
          mlir::Operation::fold(v77, 0, 0, (uint64_t)&v133);
          v78 = *(_UNKNOWN **)(*(_QWORD *)((unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
             || ((unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8) == 0;
          if (!v78)
            v100 = (unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8;
          if (v133 != v135)
            free(v133);
          if (!v78)
          {
            mlir::IntegerAttr::getValue(&v100, (llvm::APInt *)&v133);
            if (v134 > 0x40)
              v90 = (uint64_t)*v133;
            else
              v90 = (uint64_t)((_QWORD)v133 << -(uint64_t)v134) >> -(uint64_t)v134;
            AffineConstantExpr = mlir::getAffineConstantExpr((mlir *)v90, v99, v89);
            *((_QWORD *)v104 + v73) = AffineConstantExpr;
            if (v134 >= 0x41 && v133)
              operator delete[](v133);
          }
          else
          {
LABEL_119:
            v79 = (unint64_t *)(*(_QWORD *)a2
                                     + 8 * (v73 + mlir::AffineMap::getNumDims(a1)));
            v133 = 0;
            v80 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&__src, v79, &v133);
            if ((__src & 1) != 0)
              v82 = &v117;
            else
              v82 = (void **)((char *)v108 + 16 * v109);
            if (!v80 || v133 == v82)
            {
              v83 = mlir::getAffineSymbolExpr(v74, v99, v81);
              *((_QWORD *)v104 + v73) = v83;
              v84 = *(_QWORD *)(*(_QWORD *)a2 + 8
                                              * (v73 + mlir::AffineMap::getNumDims(a1)));
              v85 = v131;
              if (v131 >= (unint64_t)HIDWORD(v131))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v131 + 1, 8);
                v85 = v131;
              }
              *(_QWORD *)&v130[8 * v85] = v84;
              LODWORD(v131) = v131 + 1;
              v86 = mlir::AffineMap::getNumDims(a1);
              v87 = *((_QWORD *)v104 + v73);
              v133 = *(void ***)(*(_QWORD *)a2 + 8 * (v73 + v86));
              v134 = v87;
              v103 = 0;
              if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&__src, (unint64_t *)&v133, &v103) & 1) == 0)
              {
                v88 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(&__src, (uint64_t)&v133, (unint64_t *)&v133, v103);
                *v88 = v133;
                v88[1] = v134;
              }
              v74 = (mlir *)((_DWORD)v74 + 1);
            }
            else
            {
              *((_QWORD *)v104 + v73) = v133[1];
            }
          }
        }
      }
      else if ((*(_QWORD *)(*(_QWORD *)__p + 8 * (v73 >> 6)) & (1 << v73)) != 0)
      {
        goto LABEL_109;
      }
      if (v75 == ++v73)
        goto LABEL_136;
    }
  }
  LODWORD(v74) = 0;
LABEL_136:
  *(_QWORD *)a1 = mlir::IntegerSet::replaceDimsAndSymbols((uint64_t)a1, (uint64_t)v117, v118, (uint64_t)v104, v105, (int)v56, (int)v74);
  if (&v130 == (char **)a2)
    goto LABEL_147;
  v92 = v131;
  v93 = *(unsigned int *)(a2 + 8);
  if (v93 >= v131)
  {
    if ((_DWORD)v131)
      memmove(*(void **)a2, v130, 8 * v131);
    goto LABEL_146;
  }
  if (*(_DWORD *)(a2 + 12) < v131)
  {
    *(_DWORD *)(a2 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v92, 8);
    v93 = 0;
    v94 = v131;
    if (!(_DWORD)v131)
      goto LABEL_146;
    goto LABEL_145;
  }
  if (!(_DWORD)v93)
  {
    v93 = 0;
    v94 = v131;
    if (!(_DWORD)v131)
      goto LABEL_146;
    goto LABEL_145;
  }
  memmove(*(void **)a2, v130, 8 * v93);
  v94 = v131;
  if (v93 != v131)
LABEL_145:
    memcpy((void *)(*(_QWORD *)a2 + 8 * v93), &v130[8 * v93], 8 * v94 - 8 * v93);
LABEL_146:
  *(_DWORD *)(a2 + 8) = v92;
LABEL_147:
  if (v104 != v106)
    free(v104);
  if ((__src & 1) == 0)
    llvm::deallocate_buffer(v108, (void *)(16 * v109));
  if (v117 != v119)
    free(v117);
  if ((v120 & 1) == 0)
    llvm::deallocate_buffer(p_p, (void *)(16 * v122));
  if (v130 != v132)
    free(v130);
  v95 = __p;
  if ((__p & 1) == 0 && __p)
  {
    if (*(void **)__p != (char *)__p + 16)
      free(*(void **)__p);
    operator delete(v95);
  }
  v96 = v102;
  if ((v102 & 1) == 0 && v102)
  {
    if (*(void **)v102 != (char *)v102 + 16)
      free(*(void **)v102);
    operator delete(v96);
  }
}

void mlir::affine::AffineApplyOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.apply", 12, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_1E0E16420;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineApplyOp>]";
  v39 = 118;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::affine::AffineDmaStartOp::print(mlir::affine::AffineDmaStartOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t InherentAttr;
  uint64_t v9;
  uint64_t v10;
  unsigned int NumInputs;
  llvm::raw_ostream *v12;
  uint64_t v13;
  int v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t DstIndices;
  unint64_t v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  int v22;
  int v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t TagIndices;
  unint64_t v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  uint64_t NumElements;
  llvm::raw_ostream *v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::raw_ostream *v42;
  uint64_t v43;
  llvm::raw_ostream *v44;
  _WORD *v45;
  int v46;
  llvm::raw_ostream *v47;
  _WORD *v48;
  int v49;
  int v50;
  uint64_t Value;
  unint64_t v53[2];
  unint64_t v54[2];
  unint64_t v55[3];

  v55[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 91;
  }
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"src_map", 7);
  v9 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v10 = *(_QWORD *)(v9 + 72);
  else
    v10 = 0;
  Value = mlir::Operation::getInherentAttr(v9, (uint64_t)"src_map", 7);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  mlir::ValueRange::ValueRange(v55, v10 + 32, NumInputs);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 240))(a2, InherentAttr, v55[0], v55[1]);
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 2)
  {
    *(_BYTE *)(v13 + 2) = 32;
    *(_WORD *)v13 = 11357;
    *((_QWORD *)v12 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v12, "], ", 3uLL);
  }
  Value = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"src_map", 7);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  v14 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v14 + 1) + 24));
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 91);
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 91;
  }
  v17 = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"dst_map", 7);
  DstIndices = mlir::affine::AffineDmaStartOp::getDstIndices(this);
  mlir::ValueRange::ValueRange(v54, DstIndices, v19);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 240))(a2, v17, v54[0], v54[1]);
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = *((_QWORD *)v20 + 4);
  if ((unint64_t)(*((_QWORD *)v20 + 3) - v21) > 2)
  {
    *(_BYTE *)(v21 + 2) = 32;
    *(_WORD *)v21 = 11357;
    *((_QWORD *)v20 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v20, "], ", 3uLL);
  }
  Value = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"src_map", 7);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  v22 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  Value = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"dst_map", 7);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  v23 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v22 + v23 + 2) + 24));
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 91);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 91;
  }
  v26 = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"tag_map", 7);
  TagIndices = mlir::affine::AffineDmaStartOp::getTagIndices(this);
  mlir::ValueRange::ValueRange(v53, TagIndices, v28);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 240))(a2, v26, v53[0], v53[1]);
  v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v30 = *((_QWORD *)v29 + 4);
  if ((unint64_t)(*((_QWORD *)v29 + 3) - v30) > 2)
  {
    *(_BYTE *)(v30 + 2) = 32;
    *(_WORD *)v30 = 11357;
    *((_QWORD *)v29 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v29, "], ", 3uLL);
  }
  NumElements = mlir::affine::AffineDmaStartOp::getNumElements(this);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, NumElements);
  if (!mlir::affine::AffineDmaStartOp::isStrided(this))
    goto LABEL_40;
  v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = (_WORD *)*((_QWORD *)v32 + 4);
  if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 1uLL)
  {
    *v33 = 8236;
    *((_QWORD *)v32 + 4) += 2;
    if (!mlir::affine::AffineDmaStartOp::isStrided(this))
      goto LABEL_27;
  }
  else
  {
    llvm::raw_ostream::write(v32, ", ", 2uLL);
    if (!mlir::affine::AffineDmaStartOp::isStrided(this))
    {
LABEL_27:
      v34 = 0;
      goto LABEL_32;
    }
  }
  v35 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v36 = (*(_DWORD *)(v35 + 68) - 2);
  else
    v36 = 4294967294;
  v34 = *(_QWORD *)(*(_QWORD *)(v35 + 72) + 32 * v36 + 24);
LABEL_32:
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v34);
  v37 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v38 = (_WORD *)*((_QWORD *)v37 + 4);
  if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 1uLL)
  {
    *v38 = 8236;
    *((_QWORD *)v37 + 4) += 2;
    if (!mlir::affine::AffineDmaStartOp::isStrided(this))
      goto LABEL_34;
LABEL_36:
    v40 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
      v41 = (*(_DWORD *)(v40 + 68) - 1);
    else
      v41 = 0xFFFFFFFFLL;
    v39 = *(_QWORD *)(*(_QWORD *)(v40 + 72) + 32 * v41 + 24);
    goto LABEL_39;
  }
  llvm::raw_ostream::write(v37, ", ", 2uLL);
  if (mlir::affine::AffineDmaStartOp::isStrided(this))
    goto LABEL_36;
LABEL_34:
  v39 = 0;
LABEL_39:
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v39);
LABEL_40:
  v42 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v43 = *((_QWORD *)v42 + 4);
  if ((unint64_t)(*((_QWORD *)v42 + 3) - v43) > 2)
  {
    *(_BYTE *)(v43 + 2) = 32;
    *(_WORD *)v43 = 14880;
    *((_QWORD *)v42 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v42, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v45 = (_WORD *)*((_QWORD *)v44 + 4);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 1uLL)
  {
    *v45 = 8236;
    *((_QWORD *)v44 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v44, ", ", 2uLL);
  }
  Value = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"src_map", 7);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  v46 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v46 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v47 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v48 = (_WORD *)*((_QWORD *)v47 + 4);
  if (*((_QWORD *)v47 + 3) - (_QWORD)v48 > 1uLL)
  {
    *v48 = 8236;
    *((_QWORD *)v47 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v47, ", ", 2uLL);
  }
  Value = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"src_map", 7);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  v49 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  Value = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"dst_map", 7);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  v50 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v49 + v50 + 2) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::affine::AffineDmaStartOp::getDstIndices(mlir::affine::AffineDmaStartOp *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t InherentAttr;

  v2 = *(_QWORD *)this;
  if ((*(_BYTE *)(v2 + 46) & 0x80) != 0)
    v3 = *(_QWORD *)(v2 + 72);
  else
    v3 = 0;
  InherentAttr = mlir::Operation::getInherentAttr(v2, (uint64_t)"src_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  v4 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 1;
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"src_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"dst_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  return v3 + 32 * v4 + 32;
}

uint64_t mlir::affine::AffineDmaStartOp::getTagIndices(mlir::affine::AffineDmaStartOp *this)
{
  uint64_t v2;
  uint64_t v3;
  int NumInputs;
  uint64_t v5;
  uint64_t InherentAttr;

  v2 = *(_QWORD *)this;
  if ((*(_BYTE *)(v2 + 46) & 0x80) != 0)
    v3 = *(_QWORD *)(v2 + 72);
  else
    v3 = 0;
  InherentAttr = mlir::Operation::getInherentAttr(v2, (uint64_t)"src_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"dst_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  v5 = NumInputs + mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 2;
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"src_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"dst_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"tag_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  return v3 + 32 * v5 + 32;
}

uint64_t mlir::affine::AffineDmaStartOp::getNumElements(mlir::affine::AffineDmaStartOp *this)
{
  int NumInputs;
  int v3;
  uint64_t InherentAttr;

  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"src_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"dst_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  v3 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"tag_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72)
                   + 32
                   * (NumInputs + v3 + mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 3)
                   + 24);
}

BOOL mlir::affine::AffineDmaStartOp::isStrided(mlir::affine::AffineDmaStartOp *this)
{
  uint64_t v2;
  int v3;
  int NumInputs;
  int v5;
  uint64_t InherentAttr;

  v2 = *(_QWORD *)this;
  if ((*(_BYTE *)(v2 + 46) & 0x80) != 0)
    v3 = *(_DWORD *)(v2 + 68);
  else
    v3 = 0;
  InherentAttr = mlir::Operation::getInherentAttr(v2, (uint64_t)"src_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"dst_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  v5 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"tag_map", 7);
  InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  return v3 != NumInputs + v5 + mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 4;
}

uint64_t mlir::affine::AffineDmaStartOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t Value;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  uint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  _QWORD v31[4];
  uint64_t v32;
  _QWORD v33[4];
  _QWORD v34[24];
  void *v35;
  uint64_t v36;
  _BYTE v37[24];
  void *v38;
  uint64_t v39;
  _BYTE v40[64];
  void *v41;
  uint64_t v42;
  _BYTE v43[128];
  void *v44;
  uint64_t v45;
  _BYTE v46[128];
  char *v47;
  uint64_t v48;
  _QWORD v49[18];

  v49[16] = *MEMORY[0x1E0C80C00];
  memset(v33, 0, 24);
  v32 = 0;
  v47 = (char *)v49;
  v48 = 0x400000000;
  memset(v31, 0, 24);
  v30 = 0;
  v44 = v46;
  v45 = 0x400000000;
  memset(v29, 0, 24);
  v28 = 0;
  v41 = v43;
  v42 = 0x400000000;
  memset(v27, 0, 24);
  v38 = v40;
  v39 = 0x200000000;
  v35 = v37;
  v36 = 0x300000000;
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v33, 1)
    || !(*(unsigned __int8 (**)(uint64_t, char **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, &v47, &v32, "src_map", 7, a2 + 112, 2)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v31, 1)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, &v44, &v30, "dst_map", 7, a2 + 112, 2)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v29, 1)
    || !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, &v41, &v28, "tag_map", 7, a2 + 112, 2)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v27, 1)|| (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1)&& !(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v38, 0, 1, 0xFFFFFFFFLL))
  {
    goto LABEL_43;
  }
  v7 = v39;
  if ((v39 & 0xFFFFFFFD) != 0)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v9 = "expected two stride related operands";
LABEL_15:
    v25[0] = v9;
    v26 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(v34, a1, v8, v25);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v34);
    goto LABEL_44;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a1 + 552))(a1, &v35))
    goto LABEL_43;
  if ((_DWORD)v36 != 3)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v9 = "expected three types";
    goto LABEL_15;
  }
  v23 = a2 + 16;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 696))(a1, v33, *(_QWORD *)v35))
    goto LABEL_43;
  if ((_DWORD)v48)
  {
    v11 = v47;
    v12 = 32 * v48;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v11, IndexType, v23))
    {
      v11 += 32;
      v12 -= 32;
      if (!v12)
        goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_23:
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v31, *((_QWORD *)v35 + 1), v23))goto LABEL_43;
  if ((_DWORD)v45)
  {
    v13 = (char *)v44;
    v14 = 32 * v45;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v13, IndexType, v23))
    {
      v13 += 32;
      v14 -= 32;
      if (!v14)
        goto LABEL_28;
    }
    goto LABEL_43;
  }
LABEL_28:
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v29, *((_QWORD *)v35 + 2), v23))goto LABEL_43;
  if ((_DWORD)v42)
  {
    v15 = (char *)v41;
    v16 = 32 * v42;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v15, IndexType, v23))
    {
      v15 += 32;
      v16 -= 32;
      if (!v16)
        goto LABEL_33;
    }
    goto LABEL_43;
  }
LABEL_33:
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v27, IndexType, v23))
  {
LABEL_43:
    v10 = 0;
    goto LABEL_44;
  }
  if (v7 == 2 && (_DWORD)v39)
  {
    v17 = (char *)v38;
    v18 = 32 * v39;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17, IndexType, v23))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18)
        goto LABEL_39;
    }
    goto LABEL_43;
  }
LABEL_39:
  v19 = v48;
  v34[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v32);
  if (v19 != mlir::AffineMap::getNumInputs((mlir::AffineMap *)v34)
    || (v20 = v45,
        v25[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v30),
        v20 != mlir::AffineMap::getNumInputs((mlir::AffineMap *)v25))
    || (v21 = v42,
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v28),
        v21 != mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value)))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v9 = "memref operand count not equal to map.numInputs";
    goto LABEL_15;
  }
  v10 = 1;
LABEL_44:
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  if (v41 != v43)
    free(v41);
  if (v44 != v46)
    free(v44);
  if (v47 != (char *)v49)
    free(v47);
  return v10;
}

uint64_t mlir::affine::AffineDmaStartOp::verifyInvariantsImpl(mlir::affine::AffineDmaStartOp *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  int NumInputs;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  mlir::Block *v30;
  uint64_t v31;
  uint64_t ParentOp;
  mlir::Block *v33;
  mlir::Block *Parent;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  uint64_t DstIndices;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  uint64_t TagIndices;
  uint64_t v59;
  uint64_t v60;
  uint64_t i;
  _QWORD *v62;
  _QWORD **v63;
  _QWORD **v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD **v69;
  _QWORD **v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  _QWORD **v75;
  _QWORD **v76;
  void *v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  _QWORD **v81;
  _QWORD **v82;
  void *v83;
  _QWORD *v84;
  void *v85;
  void *v86;
  _QWORD **v87;
  _QWORD **v88;
  void *v89;
  _QWORD *v90;
  void *v91;
  void *v92;
  uint64_t Value;
  const void **v95[4];
  __int16 v96;
  _QWORD v97[3];
  void *v98;
  uint64_t v99;
  void *v100;
  _QWORD *v101;
  void *__p;
  _QWORD **v103;
  char v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v97[0] = mlir::Operation::getInherentAttr(v2, (uint64_t)"src_map", 7);
    v97[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
    if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72)
                                                          + 32
                                                          * (mlir::AffineMap::getNumInputs((mlir::AffineMap *)v97)
                                                           + 1)
                                                          + 24)
                                              + 8) & 0xFFFFFFFFFFFFFFF8)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      v97[0] = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"src_map", 7);
      v97[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
      NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)v97);
      v97[0] = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"dst_map", 7);
      v97[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
      if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72)
                                                            + 32
                                                            * (NumInputs
                                                             + mlir::AffineMap::getNumInputs((mlir::AffineMap *)v97)
                                                             + 2)
                                                            + 24)
                                                + 8) & 0xFFFFFFFFFFFFFFF8)
                        + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        v97[0] = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"src_map", 7);
        v95[0] = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
        v25 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)v95);
        v97[0] = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"dst_map", 7);
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
        v26 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value) + v25;
        v97[0] = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"tag_map", 7);
        v97[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
        v27 = v26 + mlir::AffineMap::getNumInputs((mlir::AffineMap *)v97);
        v28 = *(_QWORD *)this;
        if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
        {
          v29 = *(_DWORD *)(v28 + 68);
          if (v29 == v27 + 4 || v29 == v27 + 6)
            goto LABEL_49;
        }
        else if (v27 == -4 || v27 == -6)
        {
LABEL_49:
          while (1)
          {
            v30 = *(mlir::Block **)(v28 + 16);
            if (!v30)
              break;
            v31 = v28;
            ParentOp = mlir::Block::getParentOp(v30);
            if (!ParentOp)
              break;
            v28 = ParentOp;
            if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((_QWORD *)(ParentOp + 48)))
            {
              v33 = *(mlir::Block **)(v31 + 16);
              if (v33)
              {
                Parent = (mlir::Block *)mlir::Block::getParent(v33);
                goto LABEL_55;
              }
              break;
            }
          }
          Parent = 0;
LABEL_55:
          v35 = *(_QWORD *)this;
          if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
            v36 = *(_QWORD *)(v35 + 72);
          else
            v36 = 0;
          v97[0] = mlir::Operation::getInherentAttr(v35, (uint64_t)"src_map", 7);
          v97[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
          v37 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)v97);
          if (v37)
          {
            v38 = v37;
            v39 = v36 + 56;
            while (1)
            {
              v40 = *(_QWORD **)v39;
              v97[0] = *(_QWORD *)(*(_QWORD *)v39 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!mlir::Type::isIndex((mlir::Type *)v97))
                break;
              if ((mlir::affine::isValidDim(v40, Parent) & 1) == 0
                && (mlir::affine::isValidSymbol(v40, Parent) & 1) == 0)
              {
                v95[0] = (const void **)"src index must be a dimension or symbol identifier";
                v96 = 259;
                mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
                v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
                if (v97[0])
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
                if (!v104)
                  return v3;
                v41 = (_QWORD **)__p;
                if (__p)
                {
                  v42 = v103;
                  v43 = __p;
                  if (v103 != __p)
                  {
                    do
                      v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
                    while (v42 != v41);
                    v43 = __p;
                  }
                  v103 = v41;
                  operator delete(v43);
                }
                v7 = v100;
                if (!v100)
                  goto LABEL_178;
                v44 = v101;
                v9 = v100;
                if (v101 == v100)
                  goto LABEL_177;
                do
                {
                  v46 = (void *)*--v44;
                  v45 = v46;
                  *v44 = 0;
                  if (v46)
                    operator delete[](v45);
                }
                while (v44 != v7);
                goto LABEL_176;
              }
              v39 += 32;
              if (!--v38)
                goto LABEL_77;
            }
            v95[0] = (const void **)"src index to dma_start must have 'index' type";
            v96 = 259;
            mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
            v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
            if (v97[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
            if (!v104)
              return v3;
            v69 = (_QWORD **)__p;
            if (__p)
            {
              v70 = v103;
              v71 = __p;
              if (v103 != __p)
              {
                do
                  v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
                while (v70 != v69);
                v71 = __p;
              }
              v103 = v69;
              operator delete(v71);
            }
            v7 = v100;
            if (!v100)
              goto LABEL_178;
            v72 = v101;
            v9 = v100;
            if (v101 == v100)
              goto LABEL_177;
            do
            {
              v74 = (void *)*--v72;
              v73 = v74;
              *v72 = 0;
              if (v74)
                operator delete[](v73);
            }
            while (v72 != v7);
          }
          else
          {
LABEL_77:
            DstIndices = mlir::affine::AffineDmaStartOp::getDstIndices(this);
            if (v48)
            {
              v49 = v48;
              v50 = DstIndices + 24;
              while (1)
              {
                v51 = *(_QWORD **)v50;
                v97[0] = *(_QWORD *)(*(_QWORD *)v50 + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!mlir::Type::isIndex((mlir::Type *)v97))
                  break;
                if ((mlir::affine::isValidDim(v51, Parent) & 1) == 0
                  && (mlir::affine::isValidSymbol(v51, Parent) & 1) == 0)
                {
                  v95[0] = (const void **)"dst index must be a dimension or symbol identifier";
                  v96 = 259;
                  mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
                  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
                  if (v97[0])
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
                  if (!v104)
                    return v3;
                  v52 = (_QWORD **)__p;
                  if (__p)
                  {
                    v53 = v103;
                    v54 = __p;
                    if (v103 != __p)
                    {
                      do
                        v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                      while (v53 != v52);
                      v54 = __p;
                    }
                    v103 = v52;
                    operator delete(v54);
                  }
                  v7 = v100;
                  if (!v100)
                    goto LABEL_178;
                  v55 = v101;
                  v9 = v100;
                  if (v101 == v100)
                    goto LABEL_177;
                  do
                  {
                    v57 = (void *)*--v55;
                    v56 = v57;
                    *v55 = 0;
                    if (v57)
                      operator delete[](v56);
                  }
                  while (v55 != v7);
                  goto LABEL_176;
                }
                v50 += 32;
                if (!--v49)
                  goto LABEL_97;
              }
              v95[0] = (const void **)"dst index to dma_start must have 'index' type";
              v96 = 259;
              mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
              v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
              if (v97[0])
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
              if (!v104)
                return v3;
              v75 = (_QWORD **)__p;
              if (__p)
              {
                v76 = v103;
                v77 = __p;
                if (v103 != __p)
                {
                  do
                    v76 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v76 - 1);
                  while (v76 != v75);
                  v77 = __p;
                }
                v103 = v75;
                operator delete(v77);
              }
              v7 = v100;
              if (!v100)
                goto LABEL_178;
              v78 = v101;
              v9 = v100;
              if (v101 == v100)
                goto LABEL_177;
              do
              {
                v80 = (void *)*--v78;
                v79 = v80;
                *v78 = 0;
                if (v80)
                  operator delete[](v79);
              }
              while (v78 != v7);
            }
            else
            {
LABEL_97:
              TagIndices = mlir::affine::AffineDmaStartOp::getTagIndices(this);
              if (!v59)
                return 1;
              v60 = v59;
              for (i = TagIndices + 24; ; i += 32)
              {
                v62 = *(_QWORD **)i;
                v97[0] = *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!mlir::Type::isIndex((mlir::Type *)v97))
                  break;
                if ((mlir::affine::isValidDim(v62, Parent) & 1) == 0
                  && (mlir::affine::isValidSymbol(v62, Parent) & 1) == 0)
                {
                  v95[0] = (const void **)"tag index must be a dimension or symbol identifier";
                  v96 = 259;
                  mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
                  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
                  if (v97[0])
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
                  if (!v104)
                    return v3;
                  v63 = (_QWORD **)__p;
                  if (__p)
                  {
                    v64 = v103;
                    v65 = __p;
                    if (v103 != __p)
                    {
                      do
                        v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
                      while (v64 != v63);
                      v65 = __p;
                    }
                    v103 = v63;
                    operator delete(v65);
                  }
                  v7 = v100;
                  if (!v100)
                    goto LABEL_178;
                  v66 = v101;
                  v9 = v100;
                  if (v101 == v100)
                    goto LABEL_177;
                  do
                  {
                    v68 = (void *)*--v66;
                    v67 = v68;
                    *v66 = 0;
                    if (v68)
                      operator delete[](v67);
                  }
                  while (v66 != v7);
                  goto LABEL_176;
                }
                v3 = 1;
                if (!--v60)
                  return v3;
              }
              v95[0] = (const void **)"tag index to dma_start must have 'index' type";
              v96 = 259;
              mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
              v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
              if (v97[0])
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
              if (!v104)
                return v3;
              v81 = (_QWORD **)__p;
              if (__p)
              {
                v82 = v103;
                v83 = __p;
                if (v103 != __p)
                {
                  do
                    v82 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v82 - 1);
                  while (v82 != v81);
                  v83 = __p;
                }
                v103 = v81;
                operator delete(v83);
              }
              v7 = v100;
              if (!v100)
                goto LABEL_178;
              v84 = v101;
              v9 = v100;
              if (v101 == v100)
                goto LABEL_177;
              do
              {
                v86 = (void *)*--v84;
                v85 = v86;
                *v84 = 0;
                if (v86)
                  operator delete[](v85);
              }
              while (v84 != v7);
            }
          }
          goto LABEL_176;
        }
        v95[0] = (const void **)"incorrect number of operands";
        v96 = 259;
        mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
        v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
        if (v97[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
        if (v104)
        {
          v87 = (_QWORD **)__p;
          if (__p)
          {
            v88 = v103;
            v89 = __p;
            if (v103 != __p)
            {
              do
                v88 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v88 - 1);
              while (v88 != v87);
              v89 = __p;
            }
            v103 = v87;
            operator delete(v89);
          }
          v7 = v100;
          if (!v100)
            goto LABEL_178;
          v90 = v101;
          v9 = v100;
          if (v101 == v100)
            goto LABEL_177;
          do
          {
            v92 = (void *)*--v90;
            v91 = v92;
            *v90 = 0;
            if (v92)
              operator delete[](v91);
          }
          while (v90 != v7);
          goto LABEL_176;
        }
      }
      else
      {
        v95[0] = (const void **)"expected DMA tag to be of memref type";
        v96 = 259;
        mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
        v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
        if (v97[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
        if (v104)
        {
          v19 = (_QWORD **)__p;
          if (__p)
          {
            v20 = v103;
            v21 = __p;
            if (v103 != __p)
            {
              do
                v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
              while (v20 != v19);
              v21 = __p;
            }
            v103 = v19;
            operator delete(v21);
          }
          v7 = v100;
          if (!v100)
            goto LABEL_178;
          v22 = v101;
          v9 = v100;
          if (v101 == v100)
            goto LABEL_177;
          do
          {
            v24 = (void *)*--v22;
            v23 = v24;
            *v22 = 0;
            if (v24)
              operator delete[](v23);
          }
          while (v22 != v7);
          goto LABEL_176;
        }
      }
    }
    else
    {
      v95[0] = (const void **)"expected DMA destination to be of memref type";
      v96 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
      v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
      if (v97[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
      if (v104)
      {
        v12 = (_QWORD **)__p;
        if (__p)
        {
          v13 = v103;
          v14 = __p;
          if (v103 != __p)
          {
            do
              v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            v14 = __p;
          }
          v103 = v12;
          operator delete(v14);
        }
        v7 = v100;
        if (!v100)
          goto LABEL_178;
        v15 = v101;
        v9 = v100;
        if (v101 == v100)
          goto LABEL_177;
        do
        {
          v17 = (void *)*--v15;
          v16 = v17;
          *v15 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v15 != v7);
        goto LABEL_176;
      }
    }
  }
  else
  {
    v95[0] = (const void **)"expected DMA source to be of memref type";
    v96 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
    if (v97[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
    if (v104)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v103;
        v6 = __p;
        if (v103 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v103 = v4;
        operator delete(v6);
      }
      v7 = v100;
      if (!v100)
        goto LABEL_178;
      v8 = v101;
      v9 = v100;
      if (v101 == v100)
      {
LABEL_177:
        v101 = v7;
        operator delete(v9);
LABEL_178:
        if (v98 != &v99)
          free(v98);
        return v3;
      }
      do
      {
        v11 = (void *)*--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          operator delete[](v10);
      }
      while (v8 != v7);
LABEL_176:
      v9 = v100;
      goto LABEL_177;
    }
  }
  return v3;
}

void mlir::affine::AffineDmaStartOp::getEffects(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int NumInputs;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  const char **v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  const char **p_InherentAttr;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  const char **v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  char *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  const char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  const char *InherentAttr;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  v5 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
  if ((v6 & 1) == 0
  {
    if ((v41 & 1) == 0
    {
      InherentAttr = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      v69 = 84;
      v47 = llvm::StringRef::find((uint64_t *)&InherentAttr, "DesiredTypeName = ", 0x12uLL, 0);
      if (v69 >= v47)
        v48 = v47;
      else
        v48 = v69;
      v49 = &InherentAttr[v48];
      v50 = v69 - v48;
      if (v69 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v69 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_1E0E25AA8;
    *(_QWORD *)algn_1EDC058A8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
  }
  v7 = *(unsigned int *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12))
  {
    InherentAttr = (const char *)v4;
    v69 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v70 = v5 | 4;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v20 = v7 + 1;
    v21 = *(_QWORD *)a2 + 40 * (unint64_t)v7 > (unint64_t)&InherentAttr;
    if (*(_QWORD *)a2 <= (unint64_t)&InherentAttr && v21)
    {
      v44 = (char *)&InherentAttr - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v20, 40);
      v22 = *(_QWORD *)a2;
      v23 = (const char **)&v44[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v20, 40);
      v22 = *(_QWORD *)a2;
      v23 = &InherentAttr;
    }
    v24 = v22 + 40 * *(unsigned int *)(a2 + 8);
    v25 = *(_OWORD *)v23;
    v26 = *((_OWORD *)v23 + 1);
    *(_QWORD *)(v24 + 32) = v23[4];
    *(_OWORD *)v24 = v25;
    *(_OWORD *)(v24 + 16) = v26;
  }
  else
  {
    v8 = *(_QWORD *)a2 + 40 * v7;
    *(_QWORD *)v8 = v4;
    *(_QWORD *)(v8 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v8 + 16) = v5 | 4;
    *(_QWORD *)(v8 + 24) = 0;
    *(_DWORD *)(v8 + 32) = 0;
    *(_BYTE *)(v8 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
  v9 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
  InherentAttr = (const char *)mlir::Operation::getInherentAttr(*a1, (uint64_t)"src_map", 7);
  InherentAttr = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  v10 = *(_QWORD *)(*(_QWORD *)(*a1 + 72)
                  + 32 * (mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 1)
                  + 24);
  if ((v11 & 1) == 0
  {
    if ((v42 & 1) == 0
    {
      InherentAttr = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      v69 = 84;
      v54 = llvm::StringRef::find((uint64_t *)&InherentAttr, "DesiredTypeName = ", 0x12uLL, 0);
      if (v69 >= v54)
        v55 = v54;
      else
        v55 = v69;
      v56 = &InherentAttr[v55];
      v57 = v69 - v55;
      if (v69 - v55 >= 0x12)
        v58 = 18;
      else
        v58 = v69 - v55;
      v59 = v57 - v58;
      if (v59 >= v59 - 1)
        v60 = v59 - 1;
      else
        v60 = v59;
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v56[v58], v60);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_1E0E25AA8;
    *(_QWORD *)algn_1EDC058A8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
  }
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    InherentAttr = (const char *)v9;
    v69 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v70 = v10 | 4;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v27 = v12 + 1;
    v28 = *(_QWORD *)a2 + 40 * (unint64_t)v12 > (unint64_t)&InherentAttr;
    if (*(_QWORD *)a2 <= (unint64_t)&InherentAttr && v28)
    {
      v45 = (char *)&InherentAttr - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v27, 40);
      v29 = *(_QWORD *)a2;
      p_InherentAttr = (const char **)&v45[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v27, 40);
      v29 = *(_QWORD *)a2;
      p_InherentAttr = &InherentAttr;
    }
    v31 = v29 + 40 * *(unsigned int *)(a2 + 8);
    v32 = *(_OWORD *)p_InherentAttr;
    v33 = *((_OWORD *)p_InherentAttr + 1);
    *(_QWORD *)(v31 + 32) = p_InherentAttr[4];
    *(_OWORD *)v31 = v32;
    *(_OWORD *)(v31 + 16) = v33;
  }
  else
  {
    v13 = *(_QWORD *)a2 + 40 * v12;
    *(_QWORD *)v13 = v9;
    *(_QWORD *)(v13 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v13 + 16) = v10 | 4;
    *(_QWORD *)(v13 + 24) = 0;
    *(_DWORD *)(v13 + 32) = 0;
    *(_BYTE *)(v13 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
  v14 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  InherentAttr = (const char *)mlir::Operation::getInherentAttr(*a1, (uint64_t)"src_map", 7);
  InherentAttr = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  InherentAttr = (const char *)mlir::Operation::getInherentAttr(*a1, (uint64_t)"dst_map", 7);
  InherentAttr = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  v16 = *(_QWORD *)(*(_QWORD *)(*a1 + 72)
                  + 32
                  * (NumInputs + mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 2)
                  + 24);
  if ((v17 & 1) == 0
  {
    if ((v43 & 1) == 0
    {
      InherentAttr = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      v69 = 84;
      v61 = llvm::StringRef::find((uint64_t *)&InherentAttr, "DesiredTypeName = ", 0x12uLL, 0);
      if (v69 >= v61)
        v62 = v61;
      else
        v62 = v69;
      v63 = &InherentAttr[v62];
      v64 = v69 - v62;
      if (v69 - v62 >= 0x12)
        v65 = 18;
      else
        v65 = v69 - v62;
      v66 = v64 - v65;
      if (v66 >= v66 - 1)
        v67 = v66 - 1;
      else
        v67 = v66;
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v63[v65], v67);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_1E0E25AA8;
    *(_QWORD *)algn_1EDC058A8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
  }
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    InherentAttr = (const char *)v14;
    v69 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v70 = v16 | 4;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v34 = v18 + 1;
    v35 = *(_QWORD *)a2 + 40 * (unint64_t)v18 > (unint64_t)&InherentAttr;
    if (*(_QWORD *)a2 <= (unint64_t)&InherentAttr && v35)
    {
      v46 = (char *)&InherentAttr - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v34, 40);
      v36 = *(_QWORD *)a2;
      v37 = (const char **)&v46[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v34, 40);
      v36 = *(_QWORD *)a2;
      v37 = &InherentAttr;
    }
    v38 = v36 + 40 * *(unsigned int *)(a2 + 8);
    v39 = *(_OWORD *)v37;
    v40 = *((_OWORD *)v37 + 1);
    *(_QWORD *)(v38 + 32) = v37[4];
    *(_OWORD *)v38 = v39;
    *(_OWORD *)(v38 + 16) = v40;
  }
  else
  {
    v19 = *(_QWORD *)a2 + 40 * v18;
    *(_QWORD *)v19 = v14;
    *(_QWORD *)(v19 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v19 + 16) = v16 | 4;
    *(_QWORD *)(v19 + 24) = 0;
    *(_DWORD *)(v19 + 32) = 0;
    *(_BYTE *)(v19 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

void mlir::affine::AffineDmaWaitOp::print(mlir::affine::AffineDmaWaitOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int NumInputs;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const double *v15;
  unsigned __int128 *v16;
  uint64_t v17;
  const double *v18;
  unsigned __int128 v19;
  unsigned __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  int v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  uint64_t Value;
  unint64_t v32[2];
  void *InherentAttr;
  uint64_t v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 91;
  }
  v8 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v9 = *(_QWORD *)(v8 + 72);
  else
    v9 = 0;
  InherentAttr = (void *)mlir::Operation::getInherentAttr(v8, (uint64_t)"tag_map", 7);
  InherentAttr = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  v11 = NumInputs;
  InherentAttr = v35;
  v34 = 0x200000000;
  if (NumInputs >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InherentAttr, v35, NumInputs, 8);
    v12 = (char *)InherentAttr + 8 * v34;
    if (v11 >= 0xF
      && ((unint64_t)v12 >= v9 + 32 * v11 + 32
       || v9 + 56 >= (unint64_t)InherentAttr + 8 * v34 + 8 * v11))
    {
      v14 = v11 & 3;
      if ((v11 & 3) == 0)
        v14 = 4;
      v13 = v11 - v14;
      v12 += v13;
      v15 = (const double *)(v9 + 120);
      v16 = (unsigned __int128 *)((char *)InherentAttr + 8 * v34 + 16);
      v17 = v13;
      do
      {
        v18 = v15 - 8;
        v19 = (unsigned __int128)vld4q_f64(v18);
        v20 = (unsigned __int128)vld4q_f64(v15);
        *(v16 - 1) = v19;
        *v16 = v20;
        v15 += 16;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      goto LABEL_21;
    }
LABEL_16:
    v13 = 0;
LABEL_21:
    v21 = v11 - v13;
    v22 = (uint64_t *)(v9 + 32 * v13 + 56);
    do
    {
      v23 = *v22;
      v22 += 4;
      *v12++ = v23;
      --v21;
    }
    while (v21);
    v24 = v34;
    goto LABEL_24;
  }
  if (NumInputs)
  {
    v12 = v35;
    goto LABEL_16;
  }
  v24 = 0;
LABEL_24:
  LODWORD(v34) = v24 + v11;
  v25 = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"tag_map", 7);
  mlir::ValueRange::ValueRange(v32, (uint64_t)InherentAttr, v34);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 240))(a2, v25, v32[0], v32[1]);
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = *((_QWORD *)v26 + 4);
  if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 2)
  {
    *(_BYTE *)(v27 + 2) = 32;
    *(_WORD *)v27 = 11357;
    *((_QWORD *)v26 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v26, "], ", 3uLL);
  }
  Value = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"tag_map", 7);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  v28 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v28 + 1) + 24));
  v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v30 = *((_QWORD *)v29 + 4);
  if ((unint64_t)(*((_QWORD *)v29 + 3) - v30) > 2)
  {
    *(_BYTE *)(v30 + 2) = 32;
    *(_WORD *)v30 = 14880;
    *((_QWORD *)v29 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v29, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (InherentAttr != v35)
    free(InherentAttr);
}

uint64_t mlir::affine::AffineDmaWaitOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v14;
  const char *v15;
  __int16 v16;
  _QWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  _QWORD v21[24];
  char *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x1E0C80C00];
  memset(v20, 0, 24);
  v18 = 0;
  v19 = 0;
  v22 = (char *)v24;
  v23 = 0x200000000;
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  memset(v17, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v20, 1))
    goto LABEL_14;
  if (!(*(unsigned __int8 (**)(uint64_t, char **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, &v22, &v19, "tag_map", 7, a2 + 112, 2))goto LABEL_14;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    goto LABEL_14;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    goto LABEL_14;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 544))(a1, &v18))
    goto LABEL_14;
  v7 = a2 + 16;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v20, v18, v7))goto LABEL_14;
  if ((_DWORD)v23)
  {
    v8 = v22;
    v9 = 32 * v23;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, IndexType, v7))
    {
      v8 += 32;
      v9 -= 32;
      if (!v9)
        goto LABEL_11;
    }
    goto LABEL_14;
  }
LABEL_11:
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17, IndexType, v7))
  {
LABEL_14:
    v12 = 0;
    goto LABEL_15;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v14 = v23;
    v21[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
    if (v14 == mlir::AffineMap::getNumInputs((mlir::AffineMap *)v21))
    {
      v12 = 1;
      goto LABEL_15;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v11 = "tag memref operand count != to map.numInputs";
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v11 = "expected tag to be of memref type";
  }
  v15 = v11;
  v16 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v21, a1, v10, &v15);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v21);
LABEL_15:
  if (v22 != (char *)v24)
    free(v22);
  return v12;
}

uint64_t mlir::affine::AffineDmaWaitOp::verifyInvariantsImpl(uint64_t **this)
{
  mlir::Block *Parent;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  mlir::Block *v12;
  uint64_t ParentOp;
  mlir::Block *v14;
  mlir::Block *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int NumInputs;
  uint64_t v19;
  uint64_t i;
  _QWORD *v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  const void **v35[4];
  __int16 v36;
  _QWORD v37[3];
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD **v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  Parent = (mlir::Block *)*this;
  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    do
    {
      v14 = (mlir::Block *)*((_QWORD *)Parent + 2);
      if (!v14)
        goto LABEL_45;
      v12 = Parent;
      ParentOp = mlir::Block::getParentOp(v14);
      Parent = (mlir::Block *)ParentOp;
      if (!ParentOp)
        goto LABEL_22;
    }
    while (!mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((_QWORD *)(ParentOp + 48)));
    v15 = (mlir::Block *)*((_QWORD *)v12 + 2);
    if (v15)
    {
      Parent = (mlir::Block *)mlir::Block::getParent(v15);
LABEL_22:
      v16 = (uint64_t)*this;
      if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      {
LABEL_23:
        v17 = *(_QWORD *)(v16 + 72);
        goto LABEL_24;
      }
    }
    else
    {
LABEL_45:
      Parent = 0;
      v16 = (uint64_t)*this;
      if ((*((_BYTE *)*this + 46) & 0x80) != 0)
        goto LABEL_23;
    }
    v17 = 0;
LABEL_24:
    v37[0] = mlir::Operation::getInherentAttr(v16, (uint64_t)"tag_map", 7);
    v37[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v37);
    NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)v37);
    if (!NumInputs)
      return 1;
    v19 = NumInputs;
    for (i = v17 + 56; ; i += 32)
    {
      v21 = *(_QWORD **)i;
      v37[0] = *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!mlir::Type::isIndex((mlir::Type *)v37))
        break;
      if ((mlir::affine::isValidDim(v21, Parent) & 1) == 0 && (mlir::affine::isValidSymbol(v21, Parent) & 1) == 0)
      {
        v35[0] = (const void **)"index must be a dimension or symbol identifier";
        v36 = 259;
        mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
        v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
        if (v37[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
        if (!v44)
          return v3;
        v22 = (_QWORD **)__p;
        if (__p)
        {
          v23 = v43;
          v24 = __p;
          if (v43 != __p)
          {
            do
              v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
            while (v23 != v22);
            v24 = __p;
          }
          v43 = v22;
          operator delete(v24);
        }
        v7 = v40;
        if (!v40)
          goto LABEL_63;
        v25 = v41;
        v9 = v40;
        if (v41 == v40)
          goto LABEL_62;
        do
        {
          v27 = (void *)*--v25;
          v26 = v27;
          *v25 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v25 != v7);
        goto LABEL_61;
      }
      if (!--v19)
        return 1;
    }
    v35[0] = (const void **)"index to dma_wait must have 'index' type";
    v36 = 259;
    mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    if (!v44)
      return v3;
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v43;
      v30 = __p;
      if (v43 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v43 = v28;
      operator delete(v30);
    }
    v7 = v40;
    if (!v40)
      goto LABEL_63;
    v31 = v41;
    v9 = v40;
    if (v41 == v40)
      goto LABEL_62;
    do
    {
      v33 = (void *)*--v31;
      v32 = v33;
      *v31 = 0;
      if (v33)
        operator delete[](v32);
    }
    while (v31 != v7);
    goto LABEL_61;
  }
  v35[0] = (const void **)"expected DMA tag to be of memref type";
  v36 = 259;
  mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
  if (v37[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
  if (v44)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v43;
      v6 = __p;
      if (v43 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v43 = v4;
      operator delete(v6);
    }
    v7 = v40;
    if (!v40)
      goto LABEL_63;
    v8 = v41;
    v9 = v40;
    if (v41 == v40)
    {
LABEL_62:
      v41 = v7;
      operator delete(v9);
LABEL_63:
      if (v38 != &v39)
        free(v38);
      return v3;
    }
    do
    {
      v11 = (void *)*--v8;
      v10 = v11;
      *v8 = 0;
      if (v11)
        operator delete[](v10);
    }
    while (v8 != v7);
LABEL_61:
    v9 = v40;
    goto LABEL_62;
  }
  return v3;
}

_QWORD *mlir::affine::AffineForOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, const char *a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t, _QWORD *, unint64_t, unint64_t), uint64_t a13)
{
  uint64_t DenseI32ArrayAttr;
  mlir::StringAttr *Context;
  uint64_t v18;
  mlir::MLIRContext *v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t IndexType;
  uint64_t IntegerAttr;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _OWORD *v31;
  mlir::MLIRContext *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t Loc;
  _QWORD *result;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v51;
  uint64_t v52[2];
  unint64_t v53[2];
  _DWORD v54[3];
  const char *v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v54[0] = a4;
  v54[1] = a7;
  v54[2] = a11;
  DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v54, 3);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v57 = 261;
  v55 = "operandSegmentSizes";
  v56 = 19;
  v18 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v55);
  mlir::NamedAttribute::NamedAttribute(v52, v18, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v52[0], v52[1]);
  v55 = a10;
  v56 = 0;
  if (a11)
  {
    v19 = 0;
    do
    {
      v21 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v55, (uint64_t)v19) + 8);
      v22 = *(unsigned int *)(a2 + 72);
      if (v22 >= *(unsigned int *)(a2 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22 + 1, 8);
        v22 = *(unsigned int *)(a2 + 72);
      }
      *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v22) = v21 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(a2 + 72);
      v19 = (mlir::MLIRContext *)++v56;
    }
    while (v55 != a10 || v19 != (mlir::MLIRContext *)a11);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  IndexType = mlir::Builder::getIndexType((mlir::IndexType **)a1, v19);
  IntegerAttr = mlir::Builder::getIntegerAttr(a1, IndexType, a9);
  mlir::NamedAttribute::NamedAttribute(&v55, v23, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v55, v56);
  v26 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  v27 = mlir::AffineMapAttr::get(a5);
  mlir::NamedAttribute::NamedAttribute(&v55, v26, v27);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v55, v56);
  mlir::OperationState::addOperands(a2, a3, a4);
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16);
  v29 = mlir::AffineMapAttr::get(a8);
  mlir::NamedAttribute::NamedAttribute(&v55, v28, v29);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v55, v56);
  mlir::OperationState::addOperands(a2, a6, a7);
  mlir::OperationState::addOperands(a2, (uint64_t)a10, a11);
  v30 = (uint64_t *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v31 = operator new(0x48uLL);
  *v31 = 0u;
  v31[1] = 0u;
  *((_QWORD *)v31 + 4) = v31 + 2;
  *((_QWORD *)v31 + 5) = v31 + 2;
  *((_QWORD *)v31 + 7) = 0;
  *((_QWORD *)v31 + 8) = 0;
  *((_QWORD *)v31 + 6) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v30, (uint64_t)v31);
  v33 = *v30;
  *((_QWORD *)v31 + 2) = v30;
  *((_QWORD *)v31 + 1) = v33;
  v31 = (_OWORD *)((char *)v31 + 8);
  *(_QWORD *)(v33 + 8) = v31;
  *v30 = (uint64_t)v31;
  v34 = v30[1];
  if (v34)
    v35 = (_QWORD *)(v34 - 8);
  else
    v35 = 0;
  v36 = mlir::Builder::getIndexType((mlir::IndexType **)a1, v32);
  v37 = mlir::Block::addArgument(v35, v36, *(_QWORD *)a2);
  v55 = a10;
  v56 = 0;
  if (!a11)
  {
    if (!a12)
      return (_QWORD *)mlir::impl::ensureRegionTerminator(v30, a1, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::buildTerminator);
    goto LABEL_22;
  }
  v38 = 0;
  do
  {
    v52[0] = mlir::ValueRange::dereference_iterator(&v55, v38);
    v39 = *(_QWORD *)(v52[0] + 8) & 0xFFFFFFFFFFFFFFF8;
    Loc = mlir::Value::getLoc((mlir::Value *)v52);
    result = mlir::Block::addArgument(v35, v39, Loc);
    v38 = ++v56;
  }
  while (v55 != a10 || v38 != a11);
  if (a12)
  {
LABEL_22:
    v43 = (_OWORD *)(a1 + 16);
    v51 = *(_OWORD *)(a1 + 16);
    v44 = v35[5];
    *(_QWORD *)(a1 + 16) = v35;
    *(_QWORD *)(a1 + 24) = v44;
    v45 = *(_QWORD *)a2;
    mlir::ValueRange::ValueRange(v53, v35[6] + 8, ((uint64_t)(v35[7] - v35[6]) >> 3) - 1);
    result = (_QWORD *)a12(a13, a1, v45, v37, v53[0], v53[1]);
    if ((_QWORD)v51)
    {
      *v43 = v51;
    }
    else
    {
      *(_QWORD *)v43 = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  return result;
}

void mlir::OperationState::addAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4[2];

  v3 = a1 + 112;
  mlir::NamedAttribute::NamedAttribute(v4, a2, a3);
  mlir::NamedAttrList::push_back(v3, v4[0], v4[1]);
}

uint64_t mlir::affine::AffineForOp::verifyRegions(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int NumDims;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  const void **v44[4];
  __int16 v45;
  _QWORD v46[3];
  void *v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD **v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  v5 = v3 + 48;
  v4 = *(_QWORD *)(v3 + 48);
  if (((*(_QWORD *)(v5 + 8) - v4) & 0x7FFFFFFF8) != 0
    && (v46[0] = *(_QWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFFFF8, mlir::Type::isIndex((mlir::Type *)v46)))
  {
    v46[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    v46[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v46);
    if (mlir::AffineMap::getNumInputs((mlir::AffineMap *)v46))
    {
      v6 = *((unsigned int *)*this + 11);
      v7 = HIBYTE(*((_DWORD *)*this + 11)) ? (uint64_t)&(*this)[2 * ((v6 >> 23) & 1) + 8] : 0;
      v8 = *(unsigned int *)(v7 + 24);
      v9 = (v6 & 0x800000) != 0 ? (*this)[9] : 0;
      v46[0] = (*this)[2 * ((v6 >> 23) & 1) + 8];
      v46[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v46);
      NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)v46);
      if (!verifyDimAndSymbolIdentifiers<mlir::affine::AffineForOp>(this, v9, v8, NumDims))
        return 0;
    }
    v11 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v11 = 0;
    v46[0] = *(_QWORD *)(v11 + 16);
    v46[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v46);
    if (mlir::AffineMap::getNumInputs((mlir::AffineMap *)v46))
    {
      v12 = *((unsigned int *)*this + 11);
      v13 = (uint64_t)&(*this)[2 * ((v12 >> 23) & 1) + 8];
      if (!HIBYTE(*((_DWORD *)*this + 11)))
        v13 = 0;
      v14 = *(unsigned int *)(v13 + 24);
      v15 = (v12 & 0x800000) != 0 ? (*this)[9] : 0;
      v16 = v15 + 32 * v14;
      v17 = (*(_DWORD *)(v13 + 28) + v14) - v14;
      v46[0] = *(_QWORD *)(v13 + 16);
      v46[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v46);
      v18 = mlir::AffineMap::getNumDims((mlir::AffineMap *)v46);
      if (!verifyDimAndSymbolIdentifiers<mlir::affine::AffineForOp>(this, v16, v17, v18))
        return 0;
    }
    v19 = *((_DWORD *)*this + 9);
    if (!v19)
      return 1;
    if (mlir::affine::AffineForOp::getNumIterOperands((mlir::affine::AffineForOp *)this) == v19)
    {
      v20 = *(_QWORD *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                                                   + 8]
                        + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                        + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)*this + 10)
                      + 8);
      if (v20)
        v21 = v20 - 8;
      else
        v21 = 0;
      if (((*(_QWORD *)(v21 + 56) - *(_QWORD *)(v21 + 48)) >> 3) - 1 == v19)
        return 1;
      v44[0] = (const void **)"mismatch between the number of basic block args and results";
      v45 = 259;
      mlir::OpState::emitOpError(this, v44, (uint64_t)v46);
      v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
      if (v46[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
      if (v53)
      {
        v37 = (_QWORD **)__p;
        if (__p)
        {
          v38 = v52;
          v39 = __p;
          if (v52 != __p)
          {
            do
              v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
            while (v38 != v37);
            v39 = __p;
          }
          v52 = v37;
          operator delete(v39);
        }
        v26 = v49;
        if (!v49)
          goto LABEL_73;
        v40 = v50;
        v28 = v49;
        if (v50 == v49)
        {
LABEL_72:
          v50 = v26;
          operator delete(v28);
LABEL_73:
          if (v47 != &v48)
            free(v47);
          return v22;
        }
        do
        {
          v42 = (void *)*--v40;
          v41 = v42;
          *v40 = 0;
          if (v42)
            operator delete[](v41);
        }
        while (v40 != v26);
LABEL_71:
        v28 = v49;
        goto LABEL_72;
      }
    }
    else
    {
      v44[0] = (const void **)"mismatch between the number of loop-carried values and results";
      v45 = 259;
      mlir::OpState::emitOpError(this, v44, (uint64_t)v46);
      v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
      if (v46[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
      if (v53)
      {
        v31 = (_QWORD **)__p;
        if (__p)
        {
          v32 = v52;
          v33 = __p;
          if (v52 != __p)
          {
            do
              v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            v33 = __p;
          }
          v52 = v31;
          operator delete(v33);
        }
        v26 = v49;
        if (!v49)
          goto LABEL_73;
        v34 = v50;
        v28 = v49;
        if (v50 == v49)
          goto LABEL_72;
        do
        {
          v36 = (void *)*--v34;
          v35 = v36;
          *v34 = 0;
          if (v36)
            operator delete[](v35);
        }
        while (v34 != v26);
        goto LABEL_71;
      }
    }
  }
  else
  {
    v44[0] = (const void **)"expected body to have a single index argument for the induction variable";
    v45 = 259;
    mlir::OpState::emitOpError(this, v44, (uint64_t)v46);
    v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
    if (v46[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
    if (v53)
    {
      v23 = (_QWORD **)__p;
      if (__p)
      {
        v24 = v52;
        v25 = __p;
        if (v52 != __p)
        {
          do
            v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          v25 = __p;
        }
        v52 = v23;
        operator delete(v25);
      }
      v26 = v49;
      if (!v49)
        goto LABEL_73;
      v27 = v50;
      v28 = v49;
      if (v50 == v49)
        goto LABEL_72;
      do
      {
        v30 = (void *)*--v27;
        v29 = v30;
        *v27 = 0;
        if (v30)
          operator delete[](v29);
      }
      while (v27 != v26);
      goto LABEL_71;
    }
  }
  return v22;
}

uint64_t verifyDimAndSymbolIdentifiers<mlir::affine::AffineForOp>(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  mlir::Block *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  mlir::Block *v22;
  uint64_t *v23;
  uint64_t ParentOp;
  unsigned __int8 v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  mlir::Block *v33;
  mlir::Block *v34;
  mlir::Block *v35;
  mlir::Block *Parent;
  uint64_t v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD **v47;
  _QWORD **v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  const void **v53[4];
  __int16 v54;
  const char *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  _QWORD *v60;
  void *__p;
  _QWORD **v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 1;
  v8 = 0;
  while (2)
  {
    v9 = *(_QWORD **)(a2 + 32 * v8 + 24);
    v10 = *a1;
    if (v8 >= a4)
    {
      do
      {
        v22 = (mlir::Block *)v10[2];
        if (!v22)
          goto LABEL_42;
        v23 = v10;
        ParentOp = mlir::Block::getParentOp(v22);
        if (!ParentOp)
          goto LABEL_42;
        v10 = (uint64_t *)ParentOp;
        if ((v25 & 1) == 0
        {
          v55 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
          v56 = 83;
          v26 = llvm::StringRef::find((uint64_t *)&v55, "DesiredTypeName = ", 0x12uLL, 0);
          if (v56 >= v26)
            v27 = v26;
          else
            v27 = v56;
          v28 = &v55[v27];
          v29 = v56 - v27;
          v30 = 18;
          if (v29 < 0x12)
            v30 = v29;
          v31 = v29 - v30;
          if (v31 >= v31 - 1)
            v32 = v31 - 1;
          else
            v32 = v31;
          mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
        }
      }
      while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v10[6] + 32))(v10[6], mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id));
      v35 = (mlir::Block *)v23[2];
      if (v35)
      {
        Parent = (mlir::Block *)mlir::Block::getParent(v35);
        if ((mlir::affine::isValidSymbol(v9, Parent) & 1) == 0)
          goto LABEL_43;
      }
      else
      {
LABEL_42:
        if ((mlir::affine::isValidSymbol(v9, 0) & 1) == 0)
        {
LABEL_43:
          v53[0] = (const void **)"operand cannot be used as a symbol";
          v54 = 259;
          mlir::OpState::emitOpError(a1, v53, (uint64_t)&v55);
          v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v55);
          if (v55)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v55);
          if (!v63)
            return v37;
          v38 = (_QWORD **)__p;
          if (__p)
          {
            v39 = v62;
            v40 = __p;
            if (v62 != __p)
            {
              do
                v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
              while (v39 != v38);
              v40 = __p;
            }
            v62 = v38;
            operator delete(v40);
          }
          v41 = v59;
          if (!v59)
            goto LABEL_75;
          v42 = v60;
          v43 = v59;
          if (v60 == v59)
            goto LABEL_74;
          do
          {
            v45 = (void *)*--v42;
            v44 = v45;
            *v42 = 0;
            if (v45)
              operator delete[](v44);
          }
          while (v42 != v41);
          goto LABEL_73;
        }
      }
LABEL_4:
      if (++v8 == a3)
        return 1;
      continue;
    }
    break;
  }
  do
  {
    v11 = (mlir::Block *)v10[2];
    if (!v11)
      goto LABEL_3;
    v12 = v10;
    v13 = mlir::Block::getParentOp(v11);
    if (!v13)
      goto LABEL_3;
    v10 = (uint64_t *)v13;
    if ((v14 & 1) == 0
    {
      v55 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
      v56 = 83;
      v15 = llvm::StringRef::find((uint64_t *)&v55, "DesiredTypeName = ", 0x12uLL, 0);
      if (v56 >= v15)
        v16 = v15;
      else
        v16 = v56;
      v17 = &v55[v16];
      v18 = v56 - v16;
      v19 = 18;
      if (v18 < 0x12)
        v19 = v18;
      v20 = v18 - v19;
      if (v20 >= v20 - 1)
        v21 = v20 - 1;
      else
        v21 = v20;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
    }
  }
  while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v10[6] + 32))(v10[6], mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id));
  v33 = (mlir::Block *)v12[2];
  if (!v33)
  {
LABEL_3:
    if ((mlir::affine::isValidDim(v9, 0) & 1) != 0)
      goto LABEL_4;
    goto LABEL_59;
  }
  v34 = (mlir::Block *)mlir::Block::getParent(v33);
  if ((mlir::affine::isValidDim(v9, v34) & 1) != 0)
    goto LABEL_4;
LABEL_59:
  v53[0] = (const void **)"operand cannot be used as a dimension id";
  v54 = 259;
  mlir::OpState::emitOpError(a1, v53, (uint64_t)&v55);
  v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v55);
  if (v55)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v55);
  if (v63)
  {
    v47 = (_QWORD **)__p;
    if (__p)
    {
      v48 = v62;
      v49 = __p;
      if (v62 != __p)
      {
        do
          v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
        while (v48 != v47);
        v49 = __p;
      }
      v62 = v47;
      operator delete(v49);
    }
    v41 = v59;
    if (!v59)
      goto LABEL_75;
    v50 = v60;
    v43 = v59;
    if (v60 == v59)
    {
LABEL_74:
      v60 = v41;
      operator delete(v43);
LABEL_75:
      if (v57 != &v58)
        free(v57);
      return v37;
    }
    do
    {
      v52 = (void *)*--v50;
      v51 = v52;
      *v50 = 0;
      if (v52)
        operator delete[](v51);
    }
    while (v50 != v41);
LABEL_73:
    v43 = v59;
    goto LABEL_74;
  }
  return v37;
}

uint64_t mlir::affine::AffineForOp::getNumIterOperands(mlir::affine::AffineForOp *this)
{
  unint64_t v2;
  int v3;
  int NumInputs;
  uint64_t v6;
  uint64_t v7;
  uint64_t Value;

  v7 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v7);
  v2 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v6);
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v3 = *(_DWORD *)(*(_QWORD *)this + 68);
  else
    v3 = 0;
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  return v3 - (NumInputs + mlir::AffineMap::getNumInputs((mlir::AffineMap *)&v7));
}

uint64_t mlir::affine::AffineForOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  mlir::MLIRContext *v10;
  uint64_t v11;
  mlir::MLIRContext *v12;
  uint64_t v13;
  const char *AttrData;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t IndexType;
  uint64_t IntegerAttr;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t DenseI32ArrayAttr;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  const char *v42;
  __int16 v43;
  _QWORD v44[6];
  char v45;
  char v46;
  const char *v47;
  int v48;
  __int16 v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[128];
  void *__p;
  uint64_t v54;
  _WORD v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  memset(v44, 0, 24);
  v46 = 0;
  v44[5] = 0;
  v45 = 0;
  v44[4] = mlir::Builder::getIndexType(v4, v5);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 720))(a1, v44, 0, 0))return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1))
    return 0;
  v6 = *(_DWORD *)(a2 + 24);
  if (!parseBound(1, a2, a1))
    return 0;
  v7 = *(_DWORD *)(a2 + 24);
  __p = " between bounds";
  v55[8] = 259;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "to", 2, &__p))return 0;
  v8 = *(_DWORD *)(a2 + 24);
  if (!parseBound(0, a2, a1))
    return 0;
  v9 = *(_DWORD *)(a2 + 24);
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "step", 4))
  {
    v38 = v9;
    v39 = v8;
    v40 = v7;
    v41 = v6;
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
    IndexType = mlir::Builder::getIndexType(v4, v10);
    IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)v4, IndexType, 1);
    mlir::OperationState::addAttribute(a2, v17, IntegerAttr);
    goto LABEL_19;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v50 = 0;
  v13 = mlir::Builder::getIndexType(v4, v12);
  __p = *(void **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&__p);
  v15 = (uint64_t)AttrData;
  v16 = AttrData ? strlen(AttrData) : 0;
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, (uint64_t *)&v50, v13, v15, v16, a2 + 112))return 0;
  mlir::IntegerAttr::getValue(&v50, (llvm::APInt *)&__p);
  v20 = v54 - 1;
  if (v54 > 0x40)
  {
    v23 = *((_QWORD *)__p + (v20 >> 6));
    operator delete[](__p);
    if (((v23 >> v20) & 1) != 0)
      goto LABEL_14;
  }
  else if ((((unint64_t)__p >> v20) & 1) != 0)
  {
LABEL_14:
    v47 = "expected step to be representable as a positive signed integer";
    v49 = 259;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&__p, a1, v11, &v47);
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
    return v21;
  }
  v38 = v9;
  v39 = v8;
  v40 = v7;
  v41 = v6;
LABEL_19:
  __p = v55;
  v54 = 0x400000000;
  v50 = v52;
  v51 = 0x400000000;
  v24 = llvm::SmallVectorTemplateBase<mlir::OpAsmParser::Argument,true>::push_back((uint64_t)&__p, (unint64_t)v44);
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, __n128))(*(_QWORD *)a1 + 376))(a1, "iter_args", 9, v24))
  {
    if (!mlir::OpAsmParser::parseAssignmentList(a1)
      || !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 528))(a1, a2 + 64))
    {
LABEL_34:
      v21 = 0;
      goto LABEL_36;
    }
    if ((_DWORD)v54 != 1)
    {
      if ((_DWORD)v51)
      {
        v25 = *(unsigned int *)(a2 + 72);
        if ((_DWORD)v25)
        {
          v26 = 0;
          v27 = (char *)v50;
          v28 = *(_QWORD **)(a2 + 64);
          v29 = (char *)__p + 96;
          v30 = ((unint64_t)v54 << 6) - 128;
          v31 = (v25 << 6) - 64;
          v32 = ((unint64_t)v51 << 6) - 64;
          while (1)
          {
            *(_QWORD *)&v29[v26] = *v28;
            if (!(*(unsigned __int8 (**)(uint64_t, char *))(*(_QWORD *)a1 + 696))(a1, v27))
              goto LABEL_34;
            if (v30 != v26 && v32 != v26)
            {
              v27 += 32;
              ++v28;
              v33 = v31 == v26;
              v26 += 64;
              if (!v33)
                continue;
            }
            break;
          }
        }
      }
    }
  }
  LODWORD(v47) = v40 - v41;
  HIDWORD(v47) = v38 - v39;
  v48 = v51;
  DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(v4, (uint64_t)&v47, 3);
  mlir::OperationState::addAttribute((mlir::Attribute *)a2, (uint64_t)"operandSegmentSizes", 19, DenseI32ArrayAttr);
  v35 = mlir::OperationState::addRegion((mlir::OperationState *)a2);
  if (*(unsigned int *)(a2 + 72) + 1 != v54)
  {
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v42 = "mismatch between the number of loop-carried values and results";
    v43 = 259;
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v47, a1, v37, &v42);
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v47);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v47);
    goto LABEL_36;
  }
  v36 = (_QWORD *)v35;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 744))(a1, v35, __p))
    goto LABEL_34;
  mlir::impl::ensureRegionTerminator(v36, v4, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::buildTerminator);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112);
LABEL_36:
  if (v50 != v52)
    free(v50);
  if (__p != v55)
    free(__p);
  return v21;
}

uint64_t parseBound(int a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  uint64_t v7;
  char v8;
  mlir::IndexType **v9;
  mlir::MLIRContext *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  unint64_t SymbolIdentityMap;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  mlir::MLIRContext *v23;
  uint64_t IndexType;
  uint64_t AttrData;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  int v47;
  int NumDims;
  int v49;
  const char *v50;
  uint64_t v52;
  mlir *Int;
  mlir::MLIRContext *v54;
  unint64_t ConstantAffineMap;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t Value;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[4];
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  _QWORD *v71;
  void *__p;
  _QWORD **v73;
  char v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[5];

  v77[4] = *MEMORY[0x1E0C80C00];
  if (a1)
    v6 = "max";
  else
    v6 = "min";
  if (a1)
    v7 = 0;
  else
    v7 = 16;
  v8 = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a3 + 376))(a3, v6, 3);
  v9 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + v7);
  v75 = v77;
  v76 = 0x100000000;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 688))(a3, &v75, 0, 1, 0xFFFFFFFFLL))goto LABEL_62;
  if (!(_DWORD)v76)
  {
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
    v62 = 0;
    IndexType = mlir::Builder::getIndexType(v9, v23);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v65);
    v26 = a2 + 112;
    if (mlir::AsmParser::parseAttribute<mlir::Attribute>(a3, &v62, IndexType, AttrData, v27, a2 + 112))
    {
      v28 = v62;
      v29 = *(void **)(*(_QWORD *)v62 + 136);
      if (v29 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v30 = v62;
      else
        v30 = 0;
      v61 = v30;
      if (v29 != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
      {
        if (v29 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          v28 = 0;
        v63[0] = v28;
        if (v29 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        {
          --*(_DWORD *)(a2 + 120);
          v52 = v65;
          Int = (mlir *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v63);
          ConstantAffineMap = mlir::Builder::getConstantAffineMap(v9, Int, v54);
          v56 = mlir::AffineMapAttr::get(ConstantAffineMap);
          mlir::NamedAttribute::NamedAttribute(&v66, v52, v56);
          v17 = v66;
          v18 = v67;
          v19 = v26;
LABEL_12:
          mlir::NamedAttrList::push_back(v19, v17, v18);
          v20 = 1;
          v21 = v75;
          if (v75 == v77)
            return v20;
          goto LABEL_64;
        }
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
        v63[0] = "expected valid affine map representation for loop bounds";
        v64 = 259;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a3 + 24))(&v66, a3, v31, v63);
        v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v66);
        if (v66)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v66);
        if (!v74)
          goto LABEL_63;
        v32 = (_QWORD **)__p;
        if (__p)
        {
          v33 = v73;
          v34 = __p;
          if (v73 != __p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = __p;
          }
          v73 = v32;
          operator delete(v34);
        }
        v35 = v70;
        if (!v70)
          goto LABEL_52;
        v36 = v71;
        v37 = v70;
        if (v71 == v70)
          goto LABEL_51;
        do
        {
          v39 = (void *)*--v36;
          v38 = v39;
          *v36 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v36 != v35);
        goto LABEL_50;
      }
      v47 = *(_DWORD *)(a2 + 24);
      v60 = 0;
      if (mlir::affine::parseDimAndSymbolList(a3, a2 + 16, &v60))
      {
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v61);
        NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
        if (NumDims == v60)
        {
          v49 = *(_DWORD *)(a2 + 24) - v47;
          if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value) + NumDims == v49)
          {
            v20 = 1;
            if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) < 2 || v8)
              goto LABEL_63;
            if (a1)
              v50 = "lower loop bound affine map with multiple results requires 'max' prefix";
            else
              v50 = "upper loop bound affine map with multiple results requires 'min' prefix";
            v63[0] = v50;
            v64 = 259;
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a3 + 24))(&v66, a3, v22, v63);
LABEL_70:
            v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v66);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v66);
            v21 = v75;
            if (v75 == v77)
              return v20;
            goto LABEL_64;
          }
          v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
          v58 = "symbol operand count and affine map symbol count must match";
        }
        else
        {
          v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
          v58 = "dim operand count and affine map dim count must match";
        }
        v63[0] = v58;
        v64 = 259;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a3 + 24))(&v66, a3, v57, v63);
        goto LABEL_70;
      }
    }
LABEL_62:
    v20 = 0;
    goto LABEL_63;
  }
  if ((_DWORD)v76 == 1)
  {
    v11 = v75;
    v12 = mlir::Builder::getIndexType(v9, v10);
    if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a3 + 696))(a3, v11, v12, a2 + 16))
    {
      SymbolIdentityMap = mlir::Builder::getSymbolIdentityMap(v9, v13, v14);
      v16 = mlir::AffineMapAttr::get(SymbolIdentityMap);
      mlir::NamedAttribute::NamedAttribute(&v66, v65, v16);
      v17 = v66;
      v18 = v67;
      v19 = a2 + 112;
      goto LABEL_12;
    }
    goto LABEL_62;
  }
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v63[0] = "expected only one loop bound operand";
  v64 = 259;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a3 + 24))(&v66, a3, v40, v63);
  v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v66);
  if (v66)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v66);
  if (v74)
  {
    v41 = (_QWORD **)__p;
    if (__p)
    {
      v42 = v73;
      v43 = __p;
      if (v73 != __p)
      {
        do
          v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        v43 = __p;
      }
      v73 = v41;
      operator delete(v43);
    }
    v35 = v70;
    if (!v70)
    {
LABEL_52:
      if (v68 != &v69)
      {
        free(v68);
        v21 = v75;
        if (v75 == v77)
          return v20;
        goto LABEL_64;
      }
      goto LABEL_63;
    }
    v44 = v71;
    v37 = v70;
    if (v71 == v70)
    {
LABEL_51:
      v71 = v35;
      operator delete(v37);
      goto LABEL_52;
    }
    do
    {
      v46 = (void *)*--v44;
      v45 = v46;
      *v44 = 0;
      if (v46)
        operator delete[](v45);
    }
    while (v44 != v35);
LABEL_50:
    v37 = v70;
    goto LABEL_51;
  }
LABEL_63:
  v21 = v75;
  if (v75 != v77)
LABEL_64:
    free(v21);
  return v20;
}

uint64_t mlir::affine::AffineForOp::print(mlir::affine::AffineForOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  llvm::raw_ostream *v30;
  int NumIterOperands;
  llvm::raw_ostream *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  llvm::raw_ostream *v44;
  uint64_t v45;
  llvm::raw_ostream *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  mlir::Operation *v54;
  void **p_p;
  uint64_t Value;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  llvm::raw_ostream *v68;
  _WORD *v69;
  uint64_t v70;
  llvm::raw_ostream *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  void *__p;
  uint64_t v78;
  uint64_t AttrData;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = *(_QWORD *)(((*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                 + 8);
  if (v6)
    v7 = v6 - 8;
  else
    v7 = 0;
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 152))(a2, **(_QWORD **)(v7 + 48), 0, 0, 1);
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 32;
    *(_WORD *)v9 = 15648;
    *((_QWORD *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  v10 = *(unsigned int *)(*(_QWORD *)this + 44);
  v11 = *(_QWORD *)this + 16 * ((v10 >> 23) & 1);
  v14 = *(_QWORD *)(v11 + 64);
  v13 = v11 + 64;
  v12 = v14;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v13 = 0;
  if ((v10 & 0x800000) != 0)
    v15 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v15 = 0;
  printBound(v12, v15, *(unsigned int *)(v13 + 24), "max", (uint64_t)a2);
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_DWORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 3uLL)
  {
    *v17 = 544175136;
    *((_QWORD *)v16 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v16, " to ", 4uLL);
  }
  v18 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v19 = *(_QWORD *)this + 16 * ((v18 >> 23) & 1) + 64;
  else
    v19 = 0;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(unsigned int *)(v19 + 24);
  v22 = *(_DWORD *)(v19 + 28);
  if ((v18 & 0x800000) != 0)
    v23 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v23 = 0;
  printBound(v20, v23 + 32 * v21, (v22 + v21) - v21, "min", (uint64_t)a2);
  v24 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v24 = 0;
  v75 = *(const char **)(v24 + 8);
  mlir::IntegerAttr::getValue(&v75, (llvm::APInt *)&__p);
  if (v78 > 0x40)
  {
    v25 = *(_QWORD *)__p;
    operator delete[](__p);
    if (v25 == 1)
      goto LABEL_37;
  }
  else if ((uint64_t)((_QWORD)__p << -(uint64_t)v78) >> -(uint64_t)v78 == 1)
  {
    goto LABEL_37;
  }
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = *((_QWORD *)v26 + 4);
  if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 5)
  {
    *(_WORD *)(v27 + 4) = 8304;
    *(_DWORD *)v27 = 1702130464;
    *((_QWORD *)v26 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v26, " step ", 6uLL);
  }
  v28 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v28 = 0;
  v75 = *(const char **)(v28 + 8);
  mlir::IntegerAttr::getValue(&v75, (llvm::APInt *)&__p);
  if (v78 > 0x40)
  {
    v29 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v29 = (uint64_t)((_QWORD)__p << -(uint64_t)v78) >> -(uint64_t)v78;
  }
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  llvm::raw_ostream::operator<<(v30, v29);
LABEL_37:
  NumIterOperands = mlir::affine::AffineForOp::getNumIterOperands(this);
  if (!NumIterOperands)
    goto LABEL_62;
  v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = *((_QWORD *)v32 + 4);
  if ((unint64_t)(*((_QWORD *)v32 + 3) - v33) > 0xA)
  {
    *(_DWORD *)(v33 + 7) = 678651762;
    *(_QWORD *)v33 = *(_QWORD *)" iter_args(";
    *((_QWORD *)v32 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v32, " iter_args(", 0xBuLL);
  }
  v34 = *(unsigned int *)(*(_QWORD *)this + 44);
  v35 = *(_QWORD *)(((*(_QWORD *)this + 16 * ((v34 >> 23) & 1) + 64 + ((v34 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                  + 8);
  if (v35)
    v36 = v35 - 8;
  else
    v36 = 0;
  v37 = *(_QWORD *)(v36 + 48);
  v38 = (*(_QWORD *)(v36 + 56) - v37) >> 3;
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v39 = (_DWORD *)(*(_QWORD *)this + 16 * ((v34 >> 23) & 1) + 64);
  else
    v39 = 0;
  if ((v34 & 0x800000) != 0)
  {
    v40 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v38 != 1)
    {
LABEL_49:
      v41 = v39[8];
      if (v41)
      {
        v42 = (v39[7] + v39[6]);
        v43 = *(_QWORD *)(v40 + 32 * v42 + 24);
        (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(v37 + 8));
        v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v45 = *((_QWORD *)v44 + 4);
        if ((unint64_t)(*((_QWORD *)v44 + 3) - v45) > 2)
        {
          *(_BYTE *)(v45 + 2) = 32;
          *(_WORD *)v45 = 15648;
          *((_QWORD *)v44 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v44, " = ", 3uLL);
        }
        (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v43);
        if (v38 != 2)
        {
          v63 = (v41 + v42);
          v64 = (_QWORD *)(v37 + 16);
          v65 = 8 * v38 - 16;
          v66 = (uint64_t *)(v40 + 32 * v42 + 56);
          v67 = ~v42 + v63;
          do
          {
            if (!v67)
              break;
            v68 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
            v69 = (_WORD *)*((_QWORD *)v68 + 4);
            if (*((_QWORD *)v68 + 3) - (_QWORD)v69 > 1uLL)
            {
              *v69 = 8236;
              *((_QWORD *)v68 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v68, ", ", 2uLL);
            }
            v70 = *v66;
            (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *v64);
            v71 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
            v72 = *((_QWORD *)v71 + 4);
            if ((unint64_t)(*((_QWORD *)v71 + 3) - v72) > 2)
            {
              *(_BYTE *)(v72 + 2) = 32;
              *(_WORD *)v72 = 15648;
              *((_QWORD *)v71 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v71, " = ", 3uLL);
            }
            (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v70);
            ++v64;
            v66 += 4;
            --v67;
            v65 -= 8;
          }
          while (v65);
        }
      }
    }
  }
  else
  {
    v40 = 0;
    if (v38 != 1)
      goto LABEL_49;
  }
  v46 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v47 = *((_QWORD *)v46 + 4);
  if ((unint64_t)(*((_QWORD *)v46 + 3) - v47) > 5)
  {
    *(_WORD *)(v47 + 4) = 10272;
    *(_DWORD *)v47 = 1043144745;
    *((_QWORD *)v46 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v46, ") -> (", 6uLL);
  }
  v48 = *(unsigned int *)(*(_QWORD *)this + 36);
  v49 = (const char *)(*(_QWORD *)this - 16);
  if (!(_DWORD)v48)
    v49 = 0;
  v75 = v49;
  v76 = v48;
  mlir::OperandRange::getTypes((uint64_t *)&v75, (uint64_t *)&__p);
  v75 = ", ";
  v76 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)__p, v78, AttrData, v80, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v75);
  v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v51 = (_BYTE *)*((_QWORD *)v50 + 4);
  if (*((_BYTE **)v50 + 3) == v51)
  {
    llvm::raw_ostream::write(v50, ")", 1uLL);
  }
  else
  {
    *v51 = 41;
    ++*((_QWORD *)v50 + 4);
  }
LABEL_62:
  v52 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v53 = (_BYTE *)*((_QWORD *)v52 + 4);
  if ((unint64_t)v53 >= *((_QWORD *)v52 + 3))
  {
    llvm::raw_ostream::write(v52, 32);
  }
  else
  {
    *((_QWORD *)v52 + 4) = v53 + 1;
    *v53 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)a2 + 224))(a2, ((*(_QWORD *)this+ 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(*(_QWORD *)this + 40), 0, NumIterOperands != 0, 0);
  v54 = *(mlir::Operation **)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47))
  {
    __p = (void *)mlir::Operation::getAttrDictionary(v54);
    p_p = &__p;
  }
  else
  {
    p_p = (void **)((char *)v54 + 56);
  }
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)p_p);
  v58 = v57;
  v75 = **(const char ***)(*(_QWORD *)(*(_QWORD *)this + 48) + 96);
  __p = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v75);
  v78 = v59;
  v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 48) + 96) + 16);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v74);
  v80 = v60;
  v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 48) + 96) + 8);
  v81 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v73);
  v82 = v61;
  v83 = "operandSegmentSizes";
  v84 = 19;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 192))(a2, Value, v58, &__p, 4);
}

llvm::raw_ostream *printBound(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  size_t v12;
  void *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  int NumDims;
  uint64_t v18;
  unint64_t LHS;
  llvm::raw_ostream *v20;
  uint64_t v21;
  uint64_t Value;
  uint64_t v23;
  uint64_t v24;

  v23 = a1;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v23);
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) != 1)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    if (a4)
    {
      v11 = (llvm::raw_ostream *)v10;
      v12 = strlen(a4);
      v13 = (void *)*((_QWORD *)v11 + 4);
      if (v12 <= *((_QWORD *)v11 + 3) - (_QWORD)v13)
      {
        if (v12)
        {
          memcpy(v13, a4, v12);
          *((_QWORD *)v11 + 4) += v12;
        }
      }
      else
      {
        llvm::raw_ostream::write(v11, a4, v12);
      }
    }
    v14 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
    {
      llvm::raw_ostream::write(v14, 32);
    }
    else
    {
      *((_QWORD *)v14 + 4) = v15 + 1;
      *v15 = 32;
    }
    goto LABEL_17;
  }
  v9 = mlir::AffineMap::getResult((mlir::AffineMap *)&Value, 0);
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value)
    || mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value)
    || ((v24 = v9, mlir::AffineExpr::getKind((mlir::AffineExpr *)&v24) != 5) ? (v18 = 0) : (v18 = v9),
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v24, v18),
        (v21 = v24) == 0))
  {
    if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value)
      || mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value) != 1)
    {
      goto LABEL_17;
    }
    v24 = v9;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v24) == 7)
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v24, v9);
      if (!v24)
        goto LABEL_17;
    }
    else
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v24, 0);
      if (!v24)
      {
LABEL_17:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 40))(a5, v23);
        NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
        return printDimAndSymbolList(a2, 0, a2, a3, NumDims, a5);
      }
    }
    return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 160))(a5, *(_QWORD *)(a2 + 24));
  }
  LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v21);
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
  return llvm::raw_ostream::operator<<(v20, LHS);
}

void mlir::affine::AffineForOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.for", 10, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E192B0;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AffineForEmptyLoopFolder]";
  v39 = 97;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

void mlir::affine::AffineForOp::getSuccessorRegions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t TrivialConstantTripCount;
  char v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  BOOL v52;
  char *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57[3];

  v57[2] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (!v7)
      goto LABEL_12;
    if (TrivialConstantTripCount)
    {
      v9 = *a1;
      v10 = *(unsigned int *)(*a1 + 44);
      if ((v10 & 0x7FFFFF) != 0)
      {
        v11 = (v10 >> 23) & 1;
        v12 = (v10 >> 21) & 0x7F8;
        v13 = *(unsigned int *)(v9 + 40);
        v14 = ((v9 + 16 * v11 + v12 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v13;
      }
      else
      {
        v14 = 0;
        v13 = *(unsigned int *)(v9 + 40);
        v11 = (v10 >> 23) & 1;
        v12 = (v10 >> 21) & 0x7F8;
      }
      v43 = *(_QWORD *)(((v9 + 16 * v11 + v12 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v13 + 8);
      if (v43)
        v44 = v43 - 8;
      else
        v44 = 0;
      v45 = *(_QWORD *)(v44 + 48);
      v46 = ((*(_QWORD *)(v44 + 56) - v45) >> 3) - 1;
      v56 = v14;
      v23 = (char *)&v56;
      mlir::ValueRange::ValueRange(v57, v45 + 8, v46);
      v24 = *(unsigned int *)(a3 + 8);
      v25 = *(_QWORD *)a3;
      if (v24 < *(_DWORD *)(a3 + 12))
        goto LABEL_35;
LABEL_37:
      v47 = v24 + 1;
      v48 = v25 + 24 * v24 > (unint64_t)&v56;
      if (v25 <= (unint64_t)&v56 && v48)
      {
        v53 = (char *)&v57[-1] - v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v47, 24);
        v25 = *(_QWORD *)a3;
        v23 = &v53[*(_QWORD *)a3];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v47, 24);
        v25 = *(_QWORD *)a3;
        v23 = (char *)&v56;
      }
LABEL_35:
      v40 = v25 + 24 * *(unsigned int *)(a3 + 8);
      v41 = *(_OWORD *)v23;
      v42 = *((_QWORD *)v23 + 2);
      goto LABEL_36;
    }
LABEL_14:
    v21 = *(unsigned int *)(*a1 + 36);
    if ((_DWORD)v21)
      v22 = *a1 - 16;
    else
      v22 = 0;
    v56 = 0;
    v23 = (char *)&v56;
    mlir::ValueRange::ValueRange(v57, v22, v21);
    v24 = *(unsigned int *)(a3 + 8);
    v25 = *(_QWORD *)a3;
    if (v24 < *(_DWORD *)(a3 + 12))
      goto LABEL_35;
    goto LABEL_37;
  }
  if (v7)
    v8 = TrivialConstantTripCount == 1;
  else
    v8 = 0;
  if (v8)
    goto LABEL_14;
LABEL_12:
  v15 = *a1;
  v16 = *(unsigned int *)(*a1 + 44);
  if ((v16 & 0x7FFFFF) != 0)
  {
    v17 = (v16 >> 23) & 1;
    v18 = (v16 >> 21) & 0x7F8;
    v19 = *(unsigned int *)(v15 + 40);
    v20 = ((v15 + 16 * v17 + v18 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v19;
  }
  else
  {
    v20 = 0;
    v19 = *(unsigned int *)(v15 + 40);
    v17 = (v16 >> 23) & 1;
    v18 = (v16 >> 21) & 0x7F8;
  }
  v26 = *(_QWORD *)(((v15 + 16 * v17 + v18 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v19 + 8);
  if (v26)
    v27 = v26 - 8;
  else
    v27 = 0;
  v28 = *(_QWORD *)(v27 + 48);
  v29 = ((*(_QWORD *)(v27 + 56) - v28) >> 3) - 1;
  v56 = v20;
  v30 = (char *)&v56;
  mlir::ValueRange::ValueRange(v57, v28 + 8, v29);
  v31 = *(unsigned int *)(a3 + 8);
  v32 = *(_QWORD *)a3;
  if (v31 >= *(_DWORD *)(a3 + 12))
  {
    v49 = v31 + 1;
    v50 = v32 + 24 * v31 > (unint64_t)&v56;
    if (v32 <= (unint64_t)&v56 && v50)
    {
      v54 = (char *)&v57[-1] - v32;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v49, 24);
      v32 = *(_QWORD *)a3;
      v33 = &v54[*(_QWORD *)a3];
      goto LABEL_25;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v49, 24);
    v32 = *(_QWORD *)a3;
  }
  v33 = (char *)&v56;
LABEL_25:
  v34 = v32 + 24 * *(unsigned int *)(a3 + 8);
  v35 = *(_OWORD *)v33;
  *(_QWORD *)(v34 + 16) = *((_QWORD *)v33 + 2);
  *(_OWORD *)v34 = v35;
  ++*(_DWORD *)(a3 + 8);
  v36 = *(unsigned int *)(*a1 + 36);
  if ((_DWORD)v36)
    v37 = *a1 - 16;
  else
    v37 = 0;
  v56 = 0;
  mlir::ValueRange::ValueRange(v57, v37, v36);
  v38 = *(unsigned int *)(a3 + 8);
  v39 = *(_QWORD *)a3;
  if (v38 >= *(_DWORD *)(a3 + 12))
  {
    v51 = v38 + 1;
    v52 = v39 + 24 * v38 > (unint64_t)&v56;
    if (v39 <= (unint64_t)&v56 && v52)
    {
      v55 = (char *)&v57[-1] - v39;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v51, 24);
      v39 = *(_QWORD *)a3;
      v30 = &v55[*(_QWORD *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v51, 24);
      v39 = *(_QWORD *)a3;
      v30 = (char *)&v56;
    }
  }
  v40 = v39 + 24 * *(unsigned int *)(a3 + 8);
  v41 = *(_OWORD *)v30;
  v42 = *((_QWORD *)v30 + 2);
LABEL_36:
  *(_QWORD *)(v40 + 16) = v42;
  *(_OWORD *)v40 = v41;
  ++*(_DWORD *)(a3 + 8);
}

unint64_t `anonymous namespace'::getTrivialConstantTripCount(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t SingleConstantResult;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  unsigned int v12;
  uint64_t v13;

  v2 = a1 + 64;
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v3 = a1 + 64 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1);
  else
    v3 = 0;
  v13 = *(_QWORD *)(v3 + 8);
  mlir::IntegerAttr::getValue(&v13, (llvm::APInt *)&__p);
  if (v12 > 0x40)
  {
    v4 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v4 = (uint64_t)((_QWORD)__p << -(uint64_t)v12) >> -(uint64_t)v12;
  }
  __p = *(void **)(v2 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1));
  __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  if (!mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&__p))
    return 0;
  v5 = HIBYTE(*(_DWORD *)(a1 + 44)) ? v2 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1) : 0;
  __p = *(void **)(v5 + 16);
  __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  if (!mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&__p) || v4 < 1)
    return 0;
  __p = *(void **)(v2 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1));
  __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  SingleConstantResult = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p);
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v7 = v2 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1);
  else
    v7 = 0;
  __p = *(void **)(v7 + 16);
  __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  v8 = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p);
  if (v8 - SingleConstantResult < 1)
    return 0;
  else
    return (v4 + v8 - SingleConstantResult - 1) / (unint64_t)v4;
}

uint64_t mlir::affine::AffineForOp::fold(void **a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v4;
  char *v5;
  _DWORD *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  const double *v17;
  unsigned __int128 *v18;
  unint64_t v19;
  const double *v20;
  unsigned __int128 v21;
  unsigned __int128 v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  const double *v41;
  unsigned __int128 *v42;
  uint64_t v43;
  const double *v44;
  unsigned __int128 v45;
  unsigned __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  unint64_t TrivialConstantTripCount;
  char v58;
  _DWORD *v59;
  unint64_t v60;
  _DWORD *v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *i;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  const double *v79;
  int8x16_t *v80;
  unint64_t v81;
  const double *v82;
  unsigned __int128 v83;
  unsigned __int128 v84;
  int8x16_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  unint64_t v94[2];
  uint64_t *v95[2];
  void *v96;
  uint64_t v97;
  _BYTE v98[32];
  void *Value;
  uint64_t v100;
  _QWORD v101[6];

  v101[4] = *MEMORY[0x1E0C80C00];
  v96 = *a1;
  v95[0] = (uint64_t *)&v96;
  Value = (void *)*((_QWORD *)v96 + 2 * (((unint64_t)*((unsigned int *)v96 + 11) >> 23) & 1) + 8);
  Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  v4 = !mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value)
    && foldLoopBounds(mlir::affine::AffineForOp)::$_0::operator()(v95, 1) != 0;
  v5 = (char *)v96 + 16 * (((unint64_t)*((unsigned int *)v96 + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)v96 + 11)))
    v5 = 0;
  Value = (void *)*((_QWORD *)v5 + 2);
  Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  if (!mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value)
    && foldLoopBounds(mlir::affine::AffineForOp)::$_0::operator()(v95, 0))
  {
    v4 = 1;
  }
  v6 = *a1;
  v93 = v6;
  v7 = v6[11];
  v8 = (char *)(v6 + 16);
  v9 = (v7 >> 23) & 1;
  v10 = (uint64_t)&v6[4 * v9 + 16];
  if (!HIBYTE(v6[11]))
    v10 = 0;
  v11 = *(unsigned int *)(v10 + 24);
  if ((v7 & 0x800000) != 0)
    v12 = *((_QWORD *)v6 + 9);
  else
    v12 = 0;
  Value = v101;
  v100 = 0x400000000;
  if (v11 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v101, v11, 8);
    v13 = (char *)Value + 8 * v100;
    if (v11 >= 0xD)
    {
      v14 = (unint64_t)v13 >= v12 + 32 * v11
         || v12 + 24 >= (unint64_t)Value + 8 * v100 + 8 * v11;
      if (v14)
      {
        v15 = v11 & 3;
        if ((v11 & 3) == 0)
          v15 = 4;
        v16 = v11 - v15;
        v13 += v16;
        v17 = (const double *)(v12 + 88);
        v18 = (unsigned __int128 *)((char *)Value + 8 * v100 + 16);
        v19 = v16;
        do
        {
          v20 = v17 - 8;
          v21 = (unsigned __int128)vld4q_f64(v20);
          v22 = (unsigned __int128)vld4q_f64(v17);
          *(v18 - 1) = v21;
          *v18 = v22;
          v17 += 16;
          v18 += 2;
          v19 -= 4;
        }
        while (v19);
        goto LABEL_29;
      }
    }
LABEL_28:
    v16 = 0;
LABEL_29:
    v23 = v11 - v16;
    v24 = (uint64_t *)(v12 + 32 * v16 + 24);
    do
    {
      v25 = *v24;
      v24 += 4;
      *v13++ = v25;
      --v23;
    }
    while (v23);
    v26 = v100;
    v7 = v6[11];
    v9 = (v7 >> 23) & 1;
    v27 = v7 & 0x800000;
    goto LABEL_32;
  }
  if ((_DWORD)v11)
  {
    v13 = v101;
    goto LABEL_28;
  }
  v26 = 0;
  v27 = v7 & 0x800000;
LABEL_32:
  LODWORD(v100) = v26 + v11;
  if (BYTE3(v7))
    v28 = &v8[16 * v9];
  else
    v28 = 0;
  v30 = *((unsigned int *)v28 + 6);
  v29 = *((_DWORD *)v28 + 7);
  if (v27)
    v31 = *((_QWORD *)v6 + 9);
  else
    v31 = 0;
  v32 = (v29 + v30);
  v33 = v32 - v30;
  v96 = v98;
  v97 = 0x400000000;
  if ((unint64_t)(v32 - v30) >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v98, v32 - v30, 8);
    v34 = v97;
    v35 = v96;
    v36 = (char *)v96 + 8 * v97;
    if (v33 < 0x13)
      goto LABEL_52;
LABEL_42:
    v37 = v31 + 32 * v30;
    if ((unint64_t)v36 >= v31 + 32 * v32 || v37 + 24 >= (unint64_t)&v35[8 * (v34 + v32 - v30)])
    {
      v39 = 4;
      if ((v33 & 3) != 0)
        v39 = v33 & 3;
      v40 = v33 - v39;
      v36 += 8 * (v33 - v39);
      v41 = (const double *)(v37 + 88);
      v42 = (unsigned __int128 *)&v35[8 * v34 + 16];
      v43 = v39 + v30 - v32;
      do
      {
        v44 = v41 - 8;
        v45 = (unsigned __int128)vld4q_f64(v44);
        v46 = (unsigned __int128)vld4q_f64(v41);
        *(v42 - 1) = v45;
        *v42 = v46;
        v41 += 16;
        v42 += 2;
        v43 += 4;
      }
      while (v43);
      goto LABEL_53;
    }
LABEL_52:
    v40 = 0;
LABEL_53:
    v47 = v40 + v30 - v32;
    v48 = (uint64_t *)(32 * v40 + 32 * v30 + v31 + 24);
    do
    {
      v49 = *v48;
      v48 += 4;
      *(_QWORD *)v36 = v49;
      v36 += 8;
      v14 = __CFADD__(v47++, 1);
    }
    while (!v14);
    v29 = v97;
    v9 = ((unint64_t)v6[11] >> 23) & 1;
    goto LABEL_57;
  }
  if (v29)
  {
    v34 = 0;
    v35 = v98;
    v36 = v98;
    if (v33 < 0x13)
      goto LABEL_52;
    goto LABEL_42;
  }
LABEL_57:
  LODWORD(v97) = v29 + v33;
  v95[0] = *(uint64_t **)&v8[16 * v9];
  v50 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v95);
  v92 = v50;
  if (HIBYTE(v6[11]))
    v51 = &v8[16 * (((unint64_t)v6[11] >> 23) & 1)];
  else
    v51 = 0;
  v95[0] = *((uint64_t **)v51 + 2);
  v52 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v95);
  v91 = v52;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v92, (uint64_t)&Value);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v92, (uint64_t)&Value);
  simplifyMinOrMaxExprWithOperands((mlir::AffineExpr *)&v92, (uint64_t *)Value, v100, 1);
  simplifyMinOrMaxExprWithOperands((mlir::AffineExpr *)&v91, (uint64_t *)v96, v97, 0);
  v92 = mlir::removeDuplicateExprs(v92);
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v91, (uint64_t)&v96);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v91, (uint64_t)&v96);
  v53 = mlir::removeDuplicateExprs(v91);
  v91 = v53;
  v54 = v92 == v50 && v53 == v52;
  v55 = !v54;
  if (!v54)
  {
    if (v92 != v50)
    {
      mlir::ValueRange::ValueRange((unint64_t *)v95, (uint64_t)Value, v100);
      mlir::affine::AffineForOp::setLowerBound((uint64_t *)&v93, (uint64_t)v95[0], (uint64_t)v95[1], v92);
      v53 = v91;
    }
    if (v53 != v52)
    {
      mlir::ValueRange::ValueRange(v94, (uint64_t)v96, v97);
      mlir::affine::AffineForOp::setUpperBound((uint64_t *)&v93, v94[0], v94[1], v91);
    }
  }
  if (v96 != v98)
    free(v96);
  if (Value != v101)
    free(Value);
  v56 = v4 | v55;
  if (v58)
  {
    if (!TrivialConstantTripCount)
    {
      v59 = *a1;
      if (*((_DWORD *)*a1 + 9))
      {
        v60 = v59[11];
        v61 = &v59[4 * ((v60 >> 23) & 1) + 16];
        if (!HIBYTE(v59[11]))
          v61 = 0;
        v62 = v61[6];
        v63 = v61[7];
        v64 = v61[8];
        if ((v60 & 0x800000) != 0)
        {
          v65 = *((_QWORD *)v59 + 9);
          v66 = (v63 + v62);
          v67 = (v64 + v66);
          v68 = v65 + 32 * v66;
        }
        else
        {
          v65 = 0;
          v66 = (v63 + v62);
          v67 = (v64 + v66);
          v68 = 32 * v66;
        }
        v69 = v67 - v66;
        v70 = 0;
        v71 = v65 + 32 * v66;
        *(_DWORD *)(a3 + 8) = 0;
        if (v69 > *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v69, 8);
          v70 = *(_DWORD *)(a3 + 8);
        }
        if (v69 || v68 != v71)
        {
          v72 = *(_QWORD *)a3;
          v73 = (uint64_t *)(*(_QWORD *)a3 + 8 * v70);
          if (v68 != v71)
          {
            for (i = (uint64_t *)(v68 + 24); ; i += 4)
            {
              v75 = *i;
              *v73++ = v75 | 4;
            }
          }
          if (v69 > 0xA && ((v76 = v70, (unint64_t)v73 >= v68 + 32 * v69) || v68 + 24 >= v72 + 8 * (v69 + v70)))
          {
            v78 = v69 & 3;
            if ((v69 & 3) == 0)
              v78 = 4;
            v77 = v69 - v78;
            v73 += v77;
            v79 = (const double *)(v68 + 88);
            v80 = (int8x16_t *)(v72 + 8 * v76 + 16);
            v81 = v77;
            do
            {
              v82 = v79 - 8;
              v83 = (unsigned __int128)vld4q_f64(v82);
              v84 = (unsigned __int128)vld4q_f64(v79);
              v85 = (int8x16_t)vdupq_n_s64(4uLL);
              v80[-1] = vorrq_s8((int8x16_t)v83, v85);
              *v80 = vorrq_s8((int8x16_t)v84, v85);
              v79 += 16;
              v80 += 2;
              v81 -= 4;
            }
            while (v81);
          }
          else
          {
            v77 = 0;
          }
          v86 = v69 - v77;
          v87 = (uint64_t *)(v68 + 32 * v77 + 24);
          do
          {
            v88 = *v87;
            v87 += 4;
            *v73++ = v88 | 4;
            --v86;
          }
          while (v86);
          v70 = *(_DWORD *)(a3 + 8);
        }
        *(_DWORD *)(a3 + 8) = v70 + v69;
        return 1;
      }
    }
  }
  return v56;
}

void mlir::affine::AffineForOp::setLowerBound(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  mlir::MLIRContext *Context;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;
  _BYTE v21[16];
  void *v22;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (HIBYTE(*(_DWORD *)(*a1 + 44)))
    v9 = *a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64;
  else
    v9 = 0;
  v10 = *(_DWORD *)(v9 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 96) + 8 * *(_QWORD *)(*(_QWORD *)(v8 + 48) + 104) - 8);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v8 + 24));
  v13 = *a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*a1 + 44)))
    v13 = 0;
  v14 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v13 + 24, 3);
  mlir::NamedAttribute::NamedAttribute(&v18, v11, v14);
  v19 = 0;
  v20 = v18;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v21, v8, 0, v10, &v19, 1);
  mlir::MutableOperandRange::assign((uint64_t)v21, a2, a3);
  if (v22 != v23)
    free(v22);
  v15 = *a1;
  v16 = **(_QWORD **)(*(_QWORD *)(v15 + 48) + 96);
  v17 = mlir::AffineMapAttr::get(a4);
  mlir::Operation::setAttr(v15, v16, v17);
}

void mlir::affine::AffineForOp::setUpperBound(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  mlir::MLIRContext *Context;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  __int128 v21;
  _BYTE v22[16];
  void *v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (HIBYTE(*(_DWORD *)(*a1 + 44)))
    v9 = *a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64;
  else
    v9 = 0;
  v10 = *(_DWORD *)(v9 + 24);
  v11 = *(_DWORD *)(v9 + 28);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 96) + 8 * *(_QWORD *)(*(_QWORD *)(v8 + 48) + 104) - 8);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v8 + 24));
  v14 = *a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*a1 + 44)))
    v14 = 0;
  v15 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v14 + 24, 3);
  mlir::NamedAttribute::NamedAttribute(&v19, v12, v15);
  v20 = 1;
  v21 = v19;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v22, v8, v10, v11, &v20, 1);
  mlir::MutableOperandRange::assign((uint64_t)v22, a2, a3);
  if (v23 != v24)
    free(v23);
  v16 = *a1;
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 96) + 16);
  v18 = mlir::AffineMapAttr::get(a4);
  mlir::Operation::setAttr(v16, v17, v18);
}

unint64_t mlir::affine::AffineForOp::getSingleLowerBound(mlir::affine::AffineForOp *this)
{
  void *SingleConstantResult;
  _QWORD v4[4];
  uint64_t Value;

  v4[0] = *(_QWORD *)(*(_QWORD *)this
                    + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                    + 64);
  v4[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v4);
  if (!mlir::AffineMap::isSingleConstant((mlir::AffineMap *)v4))
    return 0;
  v4[0] = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  memset(&v4[1], 0, 24);
  Value = *(_QWORD *)(*(_QWORD *)this
                    + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                    + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  SingleConstantResult = (void *)mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value);
  return mlir::Builder::getI64IntegerAttr((mlir::Builder *)v4, SingleConstantResult) & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::affine::AffineForOp::getSingleUpperBound(mlir::affine::AffineForOp *this)
{
  unint64_t v2;
  _BOOL4 isSingleConstant;
  unint64_t result;
  unint64_t v5;
  void *SingleConstantResult;
  _QWORD v7[4];
  uint64_t Value;

  v2 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v7[0] = *(_QWORD *)(v2 + 16);
  v7[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v7);
  isSingleConstant = mlir::AffineMap::isSingleConstant((mlir::AffineMap *)v7);
  result = 0;
  if (isSingleConstant)
  {
    v7[0] = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
    memset(&v7[1], 0, 24);
    v5 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v5 = 0;
    Value = *(_QWORD *)(v5 + 16);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
    SingleConstantResult = (void *)mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value);
    return mlir::Builder::getI64IntegerAttr((mlir::Builder *)v7, SingleConstantResult) & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

void mlir::affine::AffineForOp::replaceWithAdditionalYields(mlir::GenericProgramPoint **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v14;
  mlir::GenericProgramPoint *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  const double *v34;
  unsigned __int128 *v35;
  uint64_t v36;
  const double *v37;
  unsigned __int128 v38;
  unsigned __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  mlir::GenericProgramPoint *v48;
  unint64_t v49;
  void **v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  mlir::OpBuilder *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  mlir::GenericProgramPoint *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  mlir::GenericProgramPoint **v68;
  mlir::GenericProgramPoint *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  mlir::GenericProgramPoint **v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  mlir::GenericProgramPoint **v81;
  int v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t **v92;
  uint64_t *v93;
  uint64_t **v94;
  mlir::GenericProgramPoint *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t InterfaceFor;
  __int128 v104;
  mlir::OpBuilder *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  __int128 v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t Value;
  mlir::GenericProgramPoint *v121;
  unint64_t v122[2];
  unint64_t v123[2];
  void *__p;
  uint64_t v125;
  uint64_t **v126;
  void *v127;
  uint64_t v128;
  _BYTE v129[48];
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD v135[5];

  v135[3] = *MEMORY[0x1E0C80C00];
  v14 = (_QWORD *)(a2 + 24);
  v118 = *(_OWORD *)(a2 + 24);
  v15 = *a1;
  v16 = *((_QWORD *)v15 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v15);
  *v14 = v16;
  v14[1] = v17;
  v18 = *((unsigned int *)*a1 + 11);
  v19 = (_DWORD *)((char *)*a1 + 16 * ((v18 >> 23) & 1) + 64);
  if (!HIBYTE(*((_DWORD *)*a1 + 11)))
    v19 = 0;
  v20 = v19[6];
  v21 = v19[7];
  v22 = v19[8];
  v116 = a7;
  v117 = a6;
  v115 = a5;
  if ((v18 & 0x800000) != 0)
    v23 = *((_QWORD *)*a1 + 9);
  else
    v23 = 0;
  v24 = (v21 + v20);
  v25 = (v22 + v24);
  v26 = v25 - v24;
  v127 = v129;
  v128 = 0x600000000;
  if ((unint64_t)(v25 - v24) >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v129, v25 - v24, 8);
    v27 = v128;
    v28 = v127;
    v29 = (char *)v127 + 8 * v128;
    if (v26 < 0x13)
      goto LABEL_20;
LABEL_10:
    v30 = v23 + 32 * v24;
    v31 = (unint64_t)v29 >= v23 + 32 * v25 || v30 + 24 >= (unint64_t)&v28[8 * (v27 + v25 - v24)];
    if (v31)
    {
      v32 = 4;
      if ((v26 & 3) != 0)
        v32 = v26 & 3;
      v33 = v26 - v32;
      v29 += 8 * (v26 - v32);
      v34 = (const double *)(v30 + 88);
      v35 = (unsigned __int128 *)&v28[8 * v27 + 16];
      v36 = v32 + v24 - v25;
      do
      {
        v37 = v34 - 8;
        v38 = (unsigned __int128)vld4q_f64(v37);
        v39 = (unsigned __int128)vld4q_f64(v34);
        *(v35 - 1) = v38;
        *v35 = v39;
        v34 += 16;
        v35 += 2;
        v36 += 4;
      }
      while (v36);
LABEL_21:
      v40 = v33 + v24 - v25;
      v41 = (uint64_t *)(32 * v33 + 32 * v24 + v23 + 24);
      do
      {
        v42 = *v41;
        v41 += 4;
        *(_QWORD *)v29 = v42;
        v29 += 8;
        v31 = __CFADD__(v40++, 1);
      }
      while (!v31);
      LODWORD(v128) = v128 + v26;
      v43 = v128;
      v44 = a4 + v128;
      if (v44 > HIDWORD(v128))
        goto LABEL_25;
      goto LABEL_26;
    }
LABEL_20:
    v33 = 0;
    goto LABEL_21;
  }
  if (v22)
  {
    v27 = 0;
    v28 = v129;
    v29 = v129;
    if (v26 < 0x13)
      goto LABEL_20;
    goto LABEL_10;
  }
  v43 = v26;
  LODWORD(v128) = v25 - v24;
  v44 = a4 + v26;
  if (v44 > 6)
  {
LABEL_25:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v129, v44, 8);
    v43 = v128;
  }
LABEL_26:
  __p = a3;
  v125 = 0;
  if (a4)
  {
    v45 = 0;
    v46 = (uint64_t *)((char *)v127 + 8 * v43);
    do
    {
      *v46++ = mlir::ValueRange::dereference_iterator(&__p, v45);
      v45 = ++v125;
    }
    while (__p != a3 || v45 != a4);
    LODWORD(v43) = v128;
  }
  LODWORD(v128) = v43 + a4;
  v48 = *a1;
  v49 = *((unsigned int *)*a1 + 11);
  v50 = (void **)((char *)*a1 + 16 * ((v49 >> 23) & 1) + 64);
  if (HIBYTE(*((_DWORD *)*a1 + 11)))
    v51 = (uint64_t)*a1 + 16 * ((v49 >> 23) & 1) + 64;
  else
    v51 = 0;
  v52 = *(unsigned int *)(v51 + 24);
  if ((v49 & 0x800000) != 0)
    v53 = (uint64_t *)*((_QWORD *)v48 + 9);
  else
    v53 = 0;
  v113 = v14;
  v54 = (mlir::OpBuilder *)(v14 - 2);
  v55 = *((_QWORD *)v48 + 3);
  v132 = v53;
  v133 = v52;
  __p = *v50;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  v56 = *((unsigned int *)*a1 + 11);
  v57 = (uint64_t)*a1 + 16 * ((v56 >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*a1 + 11)))
    v57 = 0;
  v58 = *(unsigned int *)(v57 + 24);
  v59 = *(_DWORD *)(v57 + 28);
  if ((v56 & 0x800000) != 0)
    v60 = *((_QWORD *)*a1 + 9);
  else
    v60 = 0;
  v130 = v60 + 32 * v58;
  v131 = (v59 + v58) - v58;
  __p = *(void **)(v57 + 16);
  v119 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  v61 = (unint64_t)*a1 + 16 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*a1 + 11)))
    v61 = 0;
  v121 = *(mlir::GenericProgramPoint **)(v61 + 8);
  mlir::IntegerAttr::getValue(&v121, (llvm::APInt *)&__p);
  if (v125 > 0x40)
  {
    v62 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v62 = (uint64_t)((_QWORD)__p << -(uint64_t)v125) >> -(uint64_t)v125;
  }
  __p = (void *)v62;
  v63 = mlir::OpBuilder::create<mlir::affine::AffineForOp,mlir::OperandRange,mlir::AffineMap,mlir::OperandRange,mlir::AffineMap,long long,llvm::SmallVector<mlir::Value,6u> &>(v54, v55, (uint64_t)&v132, (unint64_t *)&Value, (uint64_t)&v130, (unint64_t *)&v119, (uint64_t *)&__p, (uint64_t)&v127);
  v65 = *((unsigned int *)*a1 + 10);
  v64 = *((unsigned int *)*a1 + 11);
  v66 = (uint64_t)*a1 + 16 * ((v64 >> 23) & 1);
  v121 = v63;
  v67 = *(_QWORD *)(((v66 + ((v64 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v65 + 8);
  if (v67)
    v68 = (mlir::GenericProgramPoint **)(v67 - 8);
  else
    v68 = 0;
  mlir::Block::getTerminator(v68);
  v70 = (uint64_t)v69;
  v71 = *(_QWORD *)((((unint64_t)v63
                    + 16 * (((unint64_t)*((unsigned int *)v63 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v63 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v63 + 10)
                  + 8);
  if (v71)
    v72 = v71 - 8;
  else
    v72 = 0;
  v73 = *(uint64_t **)(v72 + 48);
  v74 = (uint64_t)(*(_QWORD *)(v72 + 56) - (_QWORD)v73) >> 3;
  v75 = a1;
  if (v74 <= a4)
    v76 = v73;
  else
    v76 = &v73[v74 - a4];
  if (v74 >= a4)
    v77 = a4;
  else
    v77 = v74;
  v114 = *(_OWORD *)(a2 + 24);
  v78 = *((_QWORD *)v69 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v69);
  *(_QWORD *)(a2 + 24) = v78;
  *(_QWORD *)(a2 + 32) = v79;
  v130 = *((_QWORD *)*v75 + 3);
  v132 = v76;
  v133 = v77;
  v80 = *(_QWORD *)(v117 + 24);
  if (v80)
  {
    v81 = v75;
    (*(void (**)(void **__return_ptr, uint64_t, mlir::OpBuilder *, uint64_t *, uint64_t **))(*(_QWORD *)v80 + 48))(&__p, v80, v54, &v130, &v132);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v70);
    if ((*(_BYTE *)(v70 + 46) & 0x80) != 0)
      v82 = *(_DWORD *)(v70 + 68);
    else
      v82 = 0;
    v83 = v113;
    mlir::MutableOperandRange::MutableOperandRange((uint64_t)&v132, v70, 0, v82, 0, 0);
    mlir::ValueRange::ValueRange((unint64_t *)&v130, (uint64_t)__p, v125);
    mlir::MutableOperandRange::append((uint64_t)&v132, v130, v131);
    if (v134 != v135)
      free(v134);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v70);
    if (__p != &v126)
      free(__p);
    if ((_QWORD)v114)
    {
      *(_OWORD *)v113 = v114;
    }
    else
    {
      *v113 = 0;
      v113[1] = 0;
    }
    v84 = *(_QWORD *)((((unint64_t)*v81
                      + 16 * (((unint64_t)*((unsigned int *)*v81 + 11) >> 23) & 1)
                      + (((unint64_t)*((unsigned int *)*v81 + 11) >> 21) & 0x7F8)
                      + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *((unsigned int *)*v81 + 10)
                    + 8);
    if (v84)
      v85 = v84 - 8;
    else
      v85 = 0;
    v86 = *(_QWORD *)((((unint64_t)v63
                      + 16 * (((unint64_t)*((unsigned int *)v63 + 11) >> 23) & 1)
                      + (((unint64_t)*((unsigned int *)v63 + 11) >> 21) & 0x7F8)
                      + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *((unsigned int *)v63 + 10)
                    + 8);
    if (v86)
      v87 = v86 - 8;
    else
      v87 = 0;
    v88 = *(_QWORD *)(v87 + 48);
    v89 = *(_QWORD *)(v85 + 48);
    if ((*(_QWORD *)(v87 + 56) - v88) >> 3 >= (unint64_t)((unint64_t)(*(_QWORD *)(v85 + 56)
                                                                                                 - v89) >> 3))
      v90 = ((unint64_t)(*(_QWORD *)(v85 + 56) - v89) >> 3);
    else
      v90 = (*(_QWORD *)(v87 + 56) - v88) >> 3;
    mlir::ValueRange::ValueRange(v123, v88, v90);
    mlir::RewriterBase::mergeBlocks(a2, v85, v87, v123[0], v123[1]);
    if (v115)
    {
      __p = a3;
      v125 = 0;
      v126 = (uint64_t **)v76;
      if (a4)
      {
        if (v77)
        {
          v91 = 0;
          do
          {
            v92 = (uint64_t **)mlir::ValueRange::dereference_iterator(&__p, v91);
            v93 = *v126;
            v132 = (uint64_t *)&v121;
            mlir::RewriterBase::replaceUsesWithIf(a2, v92, v93, (uint64_t (*)(uint64_t, uint64_t *))llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::affine::AffineForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_1>, (uint64_t)&v132);
            v91 = v125 + 1;
            v94 = v126 + 1;
            v125 = v91;
            ++v126;
          }
          while ((v91 != a4 || __p != a3) && v94 != (uint64_t **)&v76[v77]);
          v63 = v121;
          v83 = v113;
        }
      }
    }
    v97 = *v81;
    v98 = *((_DWORD *)v63 + 9);
    if (v98)
      v99 = (uint64_t)v63 - 16;
    else
      v99 = 0;
    v100 = *((_DWORD *)v97 + 9);
    if (v98 >= v100)
      v101 = v100;
    else
      v101 = v98;
    mlir::ValueRange::ValueRange(v122, v99, v101);
    (*(void (**)(uint64_t, mlir::GenericProgramPoint *, unint64_t, unint64_t))(*(_QWORD *)a2 + 24))(a2, v97, v122[0], v122[1]);
    v102 = (uint64_t)v121;
    if (v121)
      InterfaceFor = mlir::OpInterface<mlir::LoopLikeOpInterface,mlir::detail::LoopLikeOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v121);
    else
      InterfaceFor = 0;
    v104 = v118;
    *(_QWORD *)v116 = v102;
    *(_QWORD *)(v116 + 8) = InterfaceFor;
    *(_BYTE *)(v116 + 16) = 1;
    if (v127 != v129)
    {
      free(v127);
      v104 = v118;
    }
    if ((_QWORD)v104)
    {
      *(_OWORD *)v83 = v104;
    }
    else
    {
      *v83 = 0;
      v83[1] = 0;
    }
  }
  else
  {
    v105 = (mlir::OpBuilder *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::OpBuilder::create<mlir::affine::AffineForOp,mlir::OperandRange,mlir::AffineMap,mlir::OperandRange,mlir::AffineMap,long long,llvm::SmallVector<mlir::Value,6u> &>(v105, v106, v107, v108, v109, v110, v111, v112);
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineForOp,mlir::OperandRange,mlir::AffineMap,mlir::OperandRange,mlir::AffineMap,long long,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t *Context;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  mlir::GenericProgramPoint *v22;
  mlir::GenericProgramPoint *v23;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  __int16 v28;
  uint64_t v29[4];
  __int16 v30;
  const char *v31[2];
  unint64_t v32[2];
  unint64_t v33[2];
  _QWORD v34[39];

  v34[38] = *MEMORY[0x1E0C80C00];
  v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.for", (const unsigned __int8 *)0xA, Context);
  if (!v18)
  {
    v30 = 1283;
    v29[2] = (uint64_t)"affine.for";
    v29[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v17);
  mlir::ValueRange::ValueRange(v33, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  v19 = *a4;
  mlir::ValueRange::ValueRange(v32, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  v20 = *a6;
  v21 = *a7;
  mlir::ValueRange::ValueRange((unint64_t *)v31, *(_QWORD *)a8, *(unsigned int *)(a8 + 8));
  mlir::affine::AffineForOp::build((uint64_t)a1, (uint64_t)v34, v33[0], v33[1], v19, v32[0], v32[1], v20, v21, v31[0], (uint64_t)v31[1], 0, v25);
  v22 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((_QWORD *)v22 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
    v23 = v22;
  else
    v23 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v23;
}

__n128 mlir::affine::AffineIfOp::getSuccessorRegions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 *v29;
  __n128 result;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  BOOL v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v5 = *(unsigned int *)(*a1 + 36);
    v6 = *a1 - 16;
    goto LABEL_3;
  }
  if (*(_DWORD *)(a3 + 12) <= 1u)
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), 2uLL, 24);
  v11 = (_QWORD *)(((*a1
                   + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*a1 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*a1 + 40));
  if ((_QWORD *)*v11 == v11)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v12 = v11[1];
    if (v12)
      v13 = v12 - 8;
    else
      v13 = 0;
    v14 = *(_QWORD *)(v13 + 48);
    v15 = (*(_QWORD *)(v13 + 56) - v14) >> 3;
  }
  v37 = ((*a1
        + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1)
        + (((unint64_t)*(unsigned int *)(*a1 + 44) >> 21) & 0x7F8)
        + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *(unsigned int *)(*a1 + 40);
  v16 = &v37;
  mlir::ValueRange::ValueRange(v38, v14, v15);
  v17 = *(unsigned int *)(a3 + 8);
  v18 = *(_QWORD *)a3;
  if (v17 >= *(_DWORD *)(a3 + 12))
  {
    v33 = v17 + 1;
    v34 = v18 + 24 * v17 > (unint64_t)&v37;
    if (v18 <= (unint64_t)&v37 && v34)
    {
      v36 = (char *)&v38[-1] - v18;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v33, 24);
      v18 = *(_QWORD *)a3;
      v16 = (unint64_t *)&v36[*(_QWORD *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v33, 24);
      v18 = *(_QWORD *)a3;
      v16 = &v37;
    }
  }
  v19 = v18 + 24 * *(unsigned int *)(a3 + 8);
  v20 = *(_OWORD *)v16;
  *(_QWORD *)(v19 + 16) = v16[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(a3 + 8);
  v21 = *a1;
  v22 = *(unsigned int *)(*a1 + 44);
  if ((v22 & 0x7FFFFF) != 0)
  {
    v23 = ((v21 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(v21 + 40);
    v24 = v23 + 24;
    if (*(_QWORD *)(v23 + 24) != v23 + 24)
      goto LABEL_19;
  }
  else if (MEMORY[0x18] != 24)
  {
    v23 = 0;
    v24 = 24;
LABEL_19:
    v25 = *(_QWORD *)(v23 + 32);
    if (v25)
      v26 = v25 - 8;
    else
      v26 = 0;
    v27 = *(_QWORD *)(v26 + 48);
    v28 = (*(_QWORD *)(v26 + 56) - v27) >> 3;
    v37 = v24;
    v8 = (__n128 *)&v37;
    mlir::ValueRange::ValueRange(v38, v27, v28);
    v9 = *(unsigned int *)(a3 + 8);
    v10 = *(_QWORD *)a3;
    if (v9 >= *(_DWORD *)(a3 + 12))
      goto LABEL_28;
    goto LABEL_26;
  }
  v5 = *(unsigned int *)(v21 + 36);
  v6 = v21 - 16;
LABEL_3:
  if ((_DWORD)v5)
    v7 = v6;
  else
    v7 = 0;
  v37 = 0;
  v8 = (__n128 *)&v37;
  mlir::ValueRange::ValueRange(v38, v7, v5);
  v9 = *(unsigned int *)(a3 + 8);
  v10 = *(_QWORD *)a3;
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
LABEL_28:
    v31 = v9 + 1;
    v32 = v10 + 24 * v9 > (unint64_t)&v37;
    if (v10 <= (unint64_t)&v37 && v32)
    {
      v35 = (char *)&v38[-1] - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v31, 24);
      v10 = *(_QWORD *)a3;
      v8 = (__n128 *)&v35[*(_QWORD *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v31, 24);
      v10 = *(_QWORD *)a3;
      v8 = (__n128 *)&v37;
    }
  }
LABEL_26:
  v29 = (__n128 *)(v10 + 24 * *(unsigned int *)(a3 + 8));
  result = *v8;
  v29[1].n128_u64[0] = v8[1].n128_u64[0];
  *v29 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t mlir::affine::AffineIfOp::verify(mlir::affine::AffineIfOp *this)
{
  uint64_t v2;
  uint64_t InherentAttr;
  char v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int NumDims;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  mlir::Block *v26;
  uint64_t v27;
  uint64_t ParentOp;
  unsigned __int8 v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  mlir::Block *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  unint64_t v41;
  unint64_t v42;
  const char *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  mlir::Block *v48;
  mlir::Block *Parent;
  mlir::Block *v50;
  mlir::Block *v51;
  char v52;
  _QWORD **v53;
  _QWORD **v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  void *v60;
  _QWORD **v61;
  _QWORD **v62;
  void *v63;
  _QWORD *v64;
  void *v65;
  void *v66;
  _QWORD **v67;
  _QWORD **v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  void *v72;
  uint64_t Value;
  uint64_t v75;
  const void **v76[4];
  __int16 v77;
  const char *v78;
  unint64_t v79;
  void *v80;
  _BYTE v81[96];
  void *v82;
  _QWORD *v83;
  void *__p;
  _QWORD **v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"condition", 9);
    if (v4)
    {
      if (InherentAttr)
        goto LABEL_4;
LABEL_15:
      v75 = 0;
      goto LABEL_16;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(v2 + 56, "condition", 9uLL);
  if (!InherentAttr)
    goto LABEL_15;
LABEL_4:
  v5 = *(void **)(*(_QWORD *)InherentAttr + 136);
  v6 = v5 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
    v7 = InherentAttr;
  else
    v7 = 0;
  v75 = v7;
  if (!v6)
  {
LABEL_16:
    v76[0] = (const void **)"requires an integer set attribute named 'condition'";
    v77 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, v76, (uint64_t)&v78);
    v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v78);
    if (v78)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
    if (v86)
    {
      v16 = (_QWORD **)__p;
      if (__p)
      {
        v17 = v85;
        v18 = __p;
        if (v85 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v85 = v16;
        operator delete(v18);
      }
      v19 = v82;
      if (!v82)
        goto LABEL_122;
      v20 = v83;
      v21 = v82;
      if (v83 == v82)
      {
LABEL_121:
        v83 = v19;
        operator delete(v21);
LABEL_122:
        if (v80 != v81)
          free(v80);
        return v15;
      }
      do
      {
        v23 = (void *)*--v20;
        v22 = v23;
        *v20 = 0;
        if (v23)
          operator delete[](v22);
      }
      while (v20 != v19);
LABEL_120:
      v21 = v82;
      goto LABEL_121;
    }
    return v15;
  }
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v75);
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
  {
    v8 = *(_DWORD *)(*(_QWORD *)this + 68);
    if (v8 == mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value))
      goto LABEL_11;
  }
  else if (!mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value))
  {
LABEL_11:
    v9 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    {
      v10 = *(_QWORD *)(v9 + 72);
      v11 = *(unsigned int *)(v9 + 68);
      NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      if ((_DWORD)v11)
      {
        v13 = 0;
        v14 = NumDims;
        while (2)
        {
          v24 = *(_QWORD **)(v10 + 32 * v13 + 24);
          v25 = *(_QWORD *)this;
          if (v13 < v14)
          {
            do
            {
              v26 = *(mlir::Block **)(v25 + 16);
              if (!v26)
                goto LABEL_30;
              v27 = v25;
              ParentOp = mlir::Block::getParentOp(v26);
              if (!ParentOp)
                goto LABEL_30;
              v25 = ParentOp;
              if ((v29 & 1) == 0
              {
                v78 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
                v79 = 83;
                v30 = llvm::StringRef::find((uint64_t *)&v78, "DesiredTypeName = ", 0x12uLL, 0);
                if (v79 >= v30)
                  v31 = v30;
                else
                  v31 = v79;
                v32 = &v78[v31];
                v33 = v79 - v31;
                v34 = 18;
                if (v33 < 0x12)
                  v34 = v33;
                v35 = v33 - v34;
                if (v35 >= v35 - 1)
                  v36 = v35 - 1;
                else
                  v36 = v35;
                mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
              }
            }
            while (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id));
            v48 = *(mlir::Block **)(v27 + 16);
            if (!v48)
            {
LABEL_30:
              if ((mlir::affine::isValidDim(v24, 0) & 1) != 0)
                goto LABEL_31;
              goto LABEL_84;
            }
            Parent = (mlir::Block *)mlir::Block::getParent(v48);
            if ((mlir::affine::isValidDim(v24, Parent) & 1) != 0)
              goto LABEL_31;
LABEL_84:
            v76[0] = (const void **)"operand cannot be used as a dimension id";
            v77 = 259;
            mlir::OpState::emitOpError((uint64_t **)this, v76, (uint64_t)&v78);
            v52 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v78);
            if (v78)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
            if (!v86)
              return v52 != 0;
            v61 = (_QWORD **)__p;
            if (__p)
            {
              v62 = v85;
              v63 = __p;
              if (v85 != __p)
              {
                do
                  v62 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v62 - 1);
                while (v62 != v61);
                v63 = __p;
              }
              v85 = v61;
              operator delete(v63);
            }
            v56 = v82;
            if (!v82)
            {
LABEL_100:
              if (v80 != v81)
                free(v80);
              return v52 != 0;
            }
            v64 = v83;
            v58 = v82;
            if (v83 == v82)
            {
LABEL_99:
              v83 = v56;
              operator delete(v58);
              goto LABEL_100;
            }
            do
            {
              v66 = (void *)*--v64;
              v65 = v66;
              *v64 = 0;
              if (v66)
                operator delete[](v65);
            }
            while (v64 != v56);
LABEL_98:
            v58 = v82;
            goto LABEL_99;
          }
          do
          {
            v37 = *(mlir::Block **)(v25 + 16);
            if (!v37)
              goto LABEL_69;
            v38 = v25;
            v39 = mlir::Block::getParentOp(v37);
            if (!v39)
              goto LABEL_69;
            v25 = v39;
            if ((v40 & 1) == 0
            {
              v78 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
              v79 = 83;
              v41 = llvm::StringRef::find((uint64_t *)&v78, "DesiredTypeName = ", 0x12uLL, 0);
              if (v79 >= v41)
                v42 = v41;
              else
                v42 = v79;
              v43 = &v78[v42];
              v44 = v79 - v42;
              v45 = 18;
              if (v44 < 0x12)
                v45 = v44;
              v46 = v44 - v45;
              if (v46 >= v46 - 1)
                v47 = v46 - 1;
              else
                v47 = v46;
              mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
            }
          }
          while (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id));
          v50 = *(mlir::Block **)(v38 + 16);
          if (v50)
          {
            v51 = (mlir::Block *)mlir::Block::getParent(v50);
            if ((mlir::affine::isValidSymbol(v24, v51) & 1) == 0)
              goto LABEL_70;
          }
          else
          {
LABEL_69:
            if ((mlir::affine::isValidSymbol(v24, 0) & 1) == 0)
            {
LABEL_70:
              v76[0] = (const void **)"operand cannot be used as a symbol";
              v77 = 259;
              mlir::OpState::emitOpError((uint64_t **)this, v76, (uint64_t)&v78);
              v52 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v78);
              if (v78)
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
              if (!v86)
                return v52 != 0;
              v53 = (_QWORD **)__p;
              if (__p)
              {
                v54 = v85;
                v55 = __p;
                if (v85 != __p)
                {
                  do
                    v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                  while (v54 != v53);
                  v55 = __p;
                }
                v85 = v53;
                operator delete(v55);
              }
              v56 = v82;
              if (!v82)
                goto LABEL_100;
              v57 = v83;
              v58 = v82;
              if (v83 == v82)
                goto LABEL_99;
              do
              {
                v60 = (void *)*--v57;
                v59 = v60;
                *v57 = 0;
                if (v60)
                  operator delete[](v59);
              }
              while (v57 != v56);
              goto LABEL_98;
            }
          }
LABEL_31:
          if (++v13 == v11)
            return 1;
          continue;
        }
      }
    }
    else
    {
      mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
    }
    return 1;
  }
  v76[0] = (const void **)"operand count and condition integer set dimension and symbol count must match";
  v77 = 259;
  mlir::OpState::emitOpError((uint64_t **)this, v76, (uint64_t)&v78);
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v78);
  if (v78)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
  if (v86)
  {
    v67 = (_QWORD **)__p;
    if (__p)
    {
      v68 = v85;
      v69 = __p;
      if (v85 != __p)
      {
        do
          v68 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v68 - 1);
        while (v68 != v67);
        v69 = __p;
      }
      v85 = v67;
      operator delete(v69);
    }
    v19 = v82;
    if (!v82)
      goto LABEL_122;
    v70 = v83;
    v21 = v82;
    if (v83 == v82)
      goto LABEL_121;
    do
    {
      v72 = (void *)*--v70;
      v71 = v72;
      *v70 = 0;
      if (v72)
        operator delete[](v71);
    }
    while (v70 != v19);
    goto LABEL_120;
  }
  return v15;
}

BOOL mlir::affine::AffineIfOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  _DWORD *v4;
  int NumDims;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD v28[4];
  __int16 v29;
  uint64_t Value;
  int v31;
  uint64_t v32;
  _QWORD v33[3];
  void *v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  void *__p;
  _QWORD **v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v4 = (_DWORD *)((char *)a2 + 112);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerSetAttr>(a1, &v32, 0, (uint64_t)"condition", 9, (uint64_t)a2 + 112))return 0;
  v31 = 0;
  if (!mlir::affine::parseDimAndSymbolList(a1, (uint64_t)a2 + 16, &v31))
    return 0;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v32);
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (NumDims == v31)
  {
    if (*((_DWORD *)a2 + 6) == mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value) + NumDims)
    {
      if ((*(unsigned __int8 (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 536))(a1, (_DWORD *)a2 + 16))
      {
        llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve((uint64_t)a2 + 224, 2uLL);
        v6 = (_QWORD *)mlir::OperationState::addRegion(a2);
        v7 = (_QWORD *)mlir::OperationState::addRegion(a2);
        if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v6, 0, 0, 0))
        {
          v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
          mlir::impl::ensureRegionTerminator(v6, v8, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineIfOp>::buildTerminator);
          if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "else", 4))return (*(unsigned __int8 (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 456))(a1, v4) != 0;
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v7, 0, 0, 0))
          {
            v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
            mlir::impl::ensureRegionTerminator(v7, v9, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineIfOp>::buildTerminator);
            return (*(unsigned __int8 (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 456))(a1, v4) != 0;
          }
        }
      }
      return 0;
    }
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v28[0] = "symbol operand count and integer set symbol count must match";
    v29 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(v33, a1, v21, v28);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v33);
    if (v33[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v33);
    if (v40)
    {
      v22 = (_QWORD **)__p;
      if (__p)
      {
        v23 = v39;
        v24 = __p;
        if (v39 != __p)
        {
          do
            v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          v24 = __p;
        }
        v39 = v22;
        operator delete(v24);
      }
      v16 = v36;
      if (!v36)
        goto LABEL_43;
      v25 = v37;
      v18 = v36;
      if (v37 == v36)
      {
LABEL_42:
        v37 = v16;
        operator delete(v18);
LABEL_43:
        if (v34 != &v35)
          free(v34);
        return v10;
      }
      do
      {
        v27 = (void *)*--v25;
        v26 = v27;
        *v25 = 0;
        if (v27)
          operator delete[](v26);
      }
      while (v25 != v16);
LABEL_41:
      v18 = v36;
      goto LABEL_42;
    }
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v28[0] = "dim operand count and integer set dim count must match";
    v29 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(v33, a1, v12, v28);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v33);
    if (v33[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v33);
    if (v40)
    {
      v13 = (_QWORD **)__p;
      if (__p)
      {
        v14 = v39;
        v15 = __p;
        if (v39 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v39 = v13;
        operator delete(v15);
      }
      v16 = v36;
      if (!v36)
        goto LABEL_43;
      v17 = v37;
      v18 = v36;
      if (v37 == v36)
        goto LABEL_42;
      do
      {
        v20 = (void *)*--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
          operator delete[](v19);
      }
      while (v17 != v16);
      goto LABEL_41;
    }
  }
  return v10;
}

uint64_t mlir::affine::AffineIfOp::print(mlir::affine::AffineIfOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4;
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int NumDims;
  uint64_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  unsigned int *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  mlir::ArrayAttr *p_Value;
  llvm::raw_ostream *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *Value;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];

  v4 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47)
    && (InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"condition", 9), v6))
  {
    if (InherentAttr)
      goto LABEL_4;
  }
  else
  {
    InherentAttr = mlir::DictionaryAttr::get(v4 + 56, "condition", 9uLL);
    if (InherentAttr)
    {
LABEL_4:
      if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
        v7 = InherentAttr;
      else
        v7 = 0;
      goto LABEL_9;
    }
  }
  v7 = 0;
LABEL_9:
  v33 = v7;
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, " ", 1uLL);
  }
  else
  {
    *v9 = 32;
    ++*((_QWORD *)v8 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v7);
  v10 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
  {
    v11 = *(_QWORD *)(v10 + 72);
    v12 = *(unsigned int *)(v10 + 68);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  Value = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v33);
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  printDimAndSymbolList(v11, 0, v11, v12, NumDims, (uint64_t)a2);
  v14 = *(unsigned int *)(*(_QWORD *)this + 36);
  v15 = *(_QWORD *)this - 16;
  if (!(_DWORD)v14)
    v15 = 0;
  v34[0] = v15;
  v34[1] = v14;
  mlir::OperandRange::getTypes(v34, (uint64_t *)&Value);
  if (Value != v31 || v30 != v32)
    mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>((uint64_t)a2, (uint64_t *)&Value);
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)a2 + 224))(a2, ((*(_QWORD *)this+ 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(*(_QWORD *)this + 40), 0, *(_DWORD *)(*(_QWORD *)this + 36) != 0, 0);
  v18 = *(unsigned int **)this;
  v19 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v19 & 0x7FFFFF) != 0)
  {
    v20 = (((unint64_t)&v18[4 * ((v19 >> 23) & 1) + 17] + ((v19 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * v18[10];
    v22 = *(_QWORD *)(v20 + 24);
    v21 = v20 + 24;
    if (v22 == v21)
      goto LABEL_24;
LABEL_27:
    v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v25 = *((_QWORD *)v24 + 4);
    if ((unint64_t)(*((_QWORD *)v24 + 3) - v25) > 5)
    {
      *(_WORD *)(v25 + 4) = 8293;
      *(_DWORD *)v25 = 1936483616;
      *((_QWORD *)v24 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v24, " else ", 6uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)a2 + 224))(a2, v21, 0, *(_DWORD *)(*(_QWORD *)this + 36) != 0, 0);
    v18 = *(unsigned int **)this;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      goto LABEL_25;
LABEL_31:
    Value = (const char *)mlir::Operation::getAttrDictionary((mlir::Operation *)v18);
    p_Value = (mlir::ArrayAttr *)&Value;
    goto LABEL_32;
  }
  v21 = 24;
  if (MEMORY[0x18] != 24)
    goto LABEL_27;
LABEL_24:
  if (BYTE3(v19))
    goto LABEL_31;
LABEL_25:
  p_Value = (mlir::ArrayAttr *)(v18 + 14);
LABEL_32:
  v26 = mlir::ArrayAttr::getValue(p_Value);
  Value = "condition";
  v30 = 9;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(_QWORD *)a2 + 192))(a2, v26, v27, &Value, 1);
}

uint64_t mlir::affine::AffineIfOp::fold(uint64_t *a1)
{
  uint64_t v2;
  uint64_t InherentAttr;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  unint64_t v12;
  const double *v13;
  unsigned __int128 *v14;
  unint64_t v15;
  const double *v16;
  unsigned __int128 v17;
  unsigned __int128 v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int NumDims;
  int NumSymbols;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *Context;
  _QWORD *v29;
  uint64_t v30;
  uint64_t DefiningOp;
  int v32;
  int v33;
  mlir::BytecodeWriterConfig *Results;
  uint64_t v35;
  uint64_t v36;
  uint64_t RawData;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  mlir::StringAttr *v58;
  uint64_t v59;
  uint64_t Value;
  uint64_t v62;
  _QWORD v63[4];
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[5];

  v69[4] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (*(_BYTE *)(*a1 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(*a1, (uint64_t)"condition", 9);
    if (v4)
    {
      if (InherentAttr)
        goto LABEL_4;
LABEL_8:
      v5 = 0;
      goto LABEL_9;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(v2 + 56, "condition", 9uLL);
  if (!InherentAttr)
    goto LABEL_8;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
    v5 = (void *)InherentAttr;
  else
    v5 = 0;
LABEL_9:
  v67 = v5;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
  v6 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) == 0)
  {
    LODWORD(v8) = 0;
    v22 = 0;
    v67 = v69;
    HIDWORD(v68) = 4;
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unsigned int *)(v6 + 68);
  v67 = v69;
  v68 = 0x400000000;
  if (v8 < 5)
  {
    if (!(_DWORD)v8)
    {
      v22 = 0;
      goto LABEL_29;
    }
    v9 = v69;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, v8, 8);
    v9 = (char *)v67 + 8 * v68;
    if (v8 >= 0xD
      && ((unint64_t)v9 >= v7 + 32 * v8 || v7 + 24 >= (unint64_t)v67 + 8 * v68 + 8 * v8))
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v9 += v12;
      v13 = (const double *)(v7 + 88);
      v14 = (unsigned __int128 *)((char *)v67 + 8 * v68 + 16);
      v15 = v12;
      do
      {
        v16 = v13 - 8;
        v17 = (unsigned __int128)vld4q_f64(v16);
        v18 = (unsigned __int128)vld4q_f64(v13);
        *(v14 - 1) = v17;
        *v14 = v18;
        v13 += 16;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      goto LABEL_26;
    }
  }
  v12 = 0;
LABEL_26:
  v19 = v8 - v12;
  v20 = (uint64_t *)(v7 + 32 * v12 + 24);
  do
  {
    v21 = *v20;
    v20 += 4;
    *v9++ = v21;
    --v19;
  }
  while (v19);
  v22 = v68;
LABEL_29:
  LODWORD(v68) = v22 + v8;
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  v25 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
  v27 = v26;
  Context = (_QWORD *)mlir::IntegerSet::getContext((mlir::IntegerSet *)&Value);
  v62 = mlir::AffineMap::get(NumDims, NumSymbols, v25, v27, Context);
  if ((_DWORD)v68)
  {
    v29 = v67;
    v30 = 8 * v68;
    while (1)
    {
      v63[0] = *v29;
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v63);
      if (DefiningOp)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
          break;
      }
      ++v29;
      v30 -= 8;
      if (!v30)
        goto LABEL_35;
    }
    composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v62, (uint64_t)&v67);
    v32 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v62);
    v33 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v62);
    Results = (mlir::BytecodeWriterConfig *)mlir::AffineMap::getResults((mlir::AffineMap *)&v62);
    v36 = v35;
    RawData = mlir::DenseArrayAttr::getRawData((mlir::DenseArrayAttr *)&Value);
    Value = mlir::IntegerSet::get(v32, v33, Results, v36, RawData, v38);
  }
LABEL_35:
  mlir::affine::canonicalizeSetAndOperands((mlir::IntegerSet *)&Value, (uint64_t)&v67);
  v39 = *a1;
  if (*(_BYTE *)(*a1 + 47) && (v40 = mlir::Operation::getInherentAttr(*a1, (uint64_t)"condition", 9), v41))
  {
    if (v40)
      goto LABEL_38;
  }
  else
  {
    v40 = mlir::DictionaryAttr::get(v39 + 56, "condition", 9uLL);
    if (v40)
    {
LABEL_38:
      if (*(_UNKNOWN **)(*(_QWORD *)v40 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
        v42 = v40;
      else
        v42 = 0;
      v63[0] = v42;
      v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v63);
      v44 = Value;
      if (Value != v43)
        goto LABEL_42;
      goto LABEL_45;
    }
  }
  v63[0] = 0;
  v47 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v63);
  v44 = Value;
  if (Value != v47)
  {
LABEL_42:
    v45 = v67;
    v46 = v68;
    goto LABEL_60;
  }
LABEL_45:
  v48 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) != 0)
  {
    v49 = *(_QWORD *)(v48 + 72);
    v50 = *(unsigned int *)(v48 + 68);
    v45 = v67;
    v46 = v68;
    if (v50 != v68)
      goto LABEL_60;
  }
  else
  {
    v49 = 0;
    v50 = 0;
    v45 = v67;
    v46 = v68;
    if ((_DWORD)v68)
      goto LABEL_60;
  }
  if ((_DWORD)v46)
  {
    v51 = 0;
    v52 = (_QWORD *)(v49 + 24);
    while (v50 != v51 && v45[v51] == *v52)
    {
      ++v51;
      v52 += 4;
      if (v46 == v51)
      {
        if (((v50 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1 == v50)
          goto LABEL_56;
        break;
      }
    }
  }
  else if (!v50)
  {
LABEL_56:
    v53 = 0;
    if (v45 == v69)
      return v53;
    goto LABEL_61;
  }
LABEL_60:
  mlir::ValueRange::ValueRange((unint64_t *)&v65, (uint64_t)v45, v46);
  v54 = v65;
  v55 = v66;
  v56 = *a1;
  v57 = mlir::IntegerSetAttr::get(v44);
  v58 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v56 + 24));
  v64 = 261;
  v63[0] = "condition";
  v63[1] = 9;
  v59 = mlir::StringAttr::get(v58, (mlir::MLIRContext *)v63);
  mlir::Operation::setAttr(v56, v59, v57);
  mlir::Operation::setOperands((uint64_t *)*a1, v54, v55);
  v53 = 1;
  v45 = v67;
  if (v67 != v69)
LABEL_61:
    free(v45);
  return v53;
}

void mlir::affine::AffineIfOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.if", 9, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E165D8;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyDeadElse]";
  v73 = 89;
  v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9)
    v10 = v9;
  else
    v10 = v73;
  v11 = &v72[v10];
  v12 = v73 - v10;
  if (v73 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v73 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"affine.if", 9, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E17260;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AlwaysTrueOrFalseIf]";
  v73 = 92;
  v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43)
    v44 = v43;
  else
    v44 = v73;
  v45 = &v72[v44];
  v46 = v73 - v44;
  if (v73 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v73 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = &v55[8 * v51];
  v57 = &v55[8 * v54];
  *(_QWORD *)v56 = v38;
  v42 = (uint64_t)(v56 + 8);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 -= v61;
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *((_QWORD *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

void mlir::affine::AffineLoadOp::build(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  mlir::StringAttr *Context;
  uint64_t v12;
  uint64_t RHS;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19[2];

  v16 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  v15 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
  v10 = mlir::AffineMapAttr::get(a4);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v18 = 261;
  v17[0] = "map";
  v17[1] = 3;
  v12 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v17);
  mlir::NamedAttribute::NamedAttribute(v19, v12, v10);
  mlir::NamedAttrList::push_back(a2 + 112, v19[0], v19[1]);
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v15);
  v14 = *(unsigned int *)(a2 + 72);
  if (v14 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v14) = RHS;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::affine::AffineLoadOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  char *v7;
  uint64_t v8;
  uint64_t RHS;
  _BOOL8 v10;
  void *v11;
  uint64_t v13;
  _QWORD v14[4];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  memset(v14, 0, 24);
  v13 = 0;
  v15 = 0;
  v16 = v18;
  v17 = 0x100000000;
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v14, 1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, &v16, &v13, "map", 3, a2 + 112, 2)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)&& mlir::AsmParser::parseColonType<mlir::MemRefType>(a1, &v15)&& (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v14, v15, a2 + 16))
  {
    if (!(_DWORD)v17)
    {
LABEL_10:
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v15);
      v10 = mlir::AsmParser::addTypeToList(a1, RHS, a2 + 64) != 0;
      v11 = v16;
      if (v16 == v18)
        return v10;
      goto LABEL_13;
    }
    v7 = (char *)v16;
    v8 = 32 * v17;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v7, IndexType, a2 + 16))
    {
      v7 += 32;
      v8 -= 32;
      if (!v8)
        goto LABEL_10;
    }
  }
  v10 = 0;
  v11 = v16;
  if (v16 != v18)
LABEL_13:
    free(v11);
  return v10;
}

uint64_t mlir::affine::AffineLoadOp::print(mlir::affine::AffineLoadOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t InherentAttr;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  mlir::Operation *v17;
  mlir::ArrayAttr *v18;
  uint64_t Value;
  uint64_t v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  _QWORD v24[2];
  unint64_t v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
    v8 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_9:
      InherentAttr = mlir::DictionaryAttr::get(v8 + 56, "map", 3uLL);
      goto LABEL_10;
    }
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 91;
    v8 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_9;
  }
  InherentAttr = mlir::Operation::getInherentAttr(v8, (uint64_t)"map", 3);
  if (!v10)
    goto LABEL_9;
LABEL_10:
  v11 = InherentAttr;
  if (InherentAttr
    && *(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    v12 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    {
      v13 = *(_QWORD *)(v12 + 72);
      v14 = *(unsigned int *)(v12 + 68) - 1;
    }
    else
    {
      v13 = 0;
      v14 = -1;
    }
    mlir::ValueRange::ValueRange(v25, v13 + 32, v14);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 240))(a2, v11, v25[0], v25[1]);
  }
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 93);
    v17 = *(mlir::Operation **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_17;
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 93;
    v17 = *(mlir::Operation **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_17:
      v24[0] = mlir::Operation::getAttrDictionary(v17);
      v18 = (mlir::ArrayAttr *)v24;
      goto LABEL_20;
    }
  }
  v18 = (mlir::Operation *)((char *)v17 + 56);
LABEL_20:
  Value = mlir::ArrayAttr::getValue(v18);
  v24[0] = "map";
  v24[1] = 3;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, Value, v20, v24, 1);
  v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 2)
  {
    *(_BYTE *)(v22 + 2) = 32;
    *(_WORD *)v22 = 14880;
    *((_QWORD *)v21 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v21, " : ", 3uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

BOOL mlir::affine::AffineLoadOp::verify(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t *v13;
  uint64_t InherentAttr;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void **v24;
  __int16 v25;
  unint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD **v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v26 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *(v2 - 1) & 0xFFFFFFFFFFFFFFF8;
  if (v3 == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v26))
  {
    v13 = *this;
    if (!*((_BYTE *)*this + 47)
      || (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)*this, (uint64_t)"map", 3), !v15))
    {
      InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v13 + 7), "map", 3uLL);
    }
    if (InherentAttr)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v16 = InherentAttr;
      else
        v16 = 0;
      v17 = (uint64_t)*this;
      if ((*((_BYTE *)*this + 46) & 0x80) != 0)
        goto LABEL_24;
    }
    else
    {
      v16 = 0;
      v17 = (uint64_t)*this;
      if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      {
LABEL_24:
        v18 = *(_QWORD *)(v17 + 72);
        v19 = *(unsigned int *)(v17 + 68);
        v20 = v19 - 1;
        v21 = v18 + 32;
        v22 = v19 - 1;
        return verifyMemoryOpIndexing(v13, v16, v21, v20, v26, v22) != 0;
      }
    }
    v20 = -1;
    v22 = -1;
    v21 = 32;
    return verifyMemoryOpIndexing(v13, v16, v21, v20, v26, v22) != 0;
  }
  v24 = (const void **)"result type must match element type of memref";
  v25 = 259;
  mlir::OpState::emitOpError(this, &v24, (uint64_t)v27);
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  if (v34)
  {
    v5 = (_QWORD **)__p;
    if (__p)
    {
      v6 = v33;
      v7 = __p;
      if (v33 != __p)
      {
        do
          v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        v7 = __p;
      }
      v33 = v5;
      operator delete(v7);
    }
    v8 = v30;
    if (v30)
    {
      v9 = v31;
      v10 = v30;
      if (v31 != v30)
      {
        do
        {
          v12 = (void *)*--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            operator delete[](v11);
        }
        while (v9 != v8);
        v10 = v30;
      }
      v31 = v8;
      operator delete(v10);
    }
    if (v28 != &v29)
      free(v28);
  }
  return v4;
}

uint64_t verifyMemoryOpIndexing(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int Kind;
  uint64_t v11;
  mlir::Block *Parent;
  mlir::Block *v13;
  mlir::Block *v14;
  uint64_t ParentOp;
  mlir::Block *v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t i;
  _QWORD *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  const void **v47[4];
  __int16 v48;
  uint64_t Value;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  void *v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  void *__p;
  _QWORD **v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v50 = a5;
  v51 = a2;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v51);
  Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
  if (v11 == Kind)
  {
    if (mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value) == a6)
    {
      Parent = (mlir::Block *)a1;
      while (1)
      {
        v13 = (mlir::Block *)*((_QWORD *)Parent + 2);
        if (!v13)
          break;
        v14 = Parent;
        ParentOp = mlir::Block::getParentOp(v13);
        Parent = (mlir::Block *)ParentOp;
        if (!ParentOp)
          goto LABEL_39;
        if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((_QWORD *)(ParentOp + 48)))
        {
          v16 = (mlir::Block *)*((_QWORD *)v14 + 2);
          if (v16)
          {
            Parent = (mlir::Block *)mlir::Block::getParent(v16);
            if (!a4)
              return 1;
LABEL_40:
            for (i = a3 + 24; ; i += 32)
            {
              v33 = *(_QWORD **)i;
              v52[0] = *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!mlir::Type::isIndex((mlir::Type *)v52))
                break;
              if ((mlir::affine::isValidDim(v33, Parent) & 1) == 0
                && (mlir::affine::isValidSymbol(v33, Parent) & 1) == 0)
              {
                v47[0] = (const void **)"index must be a dimension or symbol identifier";
                v48 = 259;
                mlir::Operation::emitOpError(a1, v47, (uint64_t)v52);
                v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
                if (v52[0])
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
                if (!v59)
                  return v17;
                v34 = (_QWORD **)__p;
                if (__p)
                {
                  v35 = v58;
                  v36 = __p;
                  if (v58 != __p)
                  {
                    do
                      v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
                    while (v35 != v34);
                    v36 = __p;
                  }
                  v58 = v34;
                  operator delete(v36);
                }
                v21 = v55;
                if (!v55)
                  goto LABEL_75;
                v37 = v56;
                v23 = v55;
                if (v56 == v55)
                  goto LABEL_74;
                do
                {
                  v39 = (void *)*--v37;
                  v38 = v39;
                  *v37 = 0;
                  if (v39)
                    operator delete[](v38);
                }
                while (v37 != v21);
                goto LABEL_73;
              }
              if (!--a4)
                return 1;
            }
            v47[0] = (const void **)"index to load must have 'index' type";
            v48 = 259;
            mlir::Operation::emitOpError(a1, v47, (uint64_t)v52);
            v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
            if (v52[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
            if (!v59)
              return v17;
            v40 = (_QWORD **)__p;
            if (__p)
            {
              v41 = v58;
              v42 = __p;
              if (v58 != __p)
              {
                do
                  v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
                while (v41 != v40);
                v42 = __p;
              }
              v58 = v40;
              operator delete(v42);
            }
            v21 = v55;
            if (!v55)
              goto LABEL_75;
            v43 = v56;
            v23 = v55;
            if (v56 == v55)
              goto LABEL_74;
            do
            {
              v45 = (void *)*--v43;
              v44 = v45;
              *v43 = 0;
              if (v45)
                operator delete[](v44);
            }
            while (v43 != v21);
LABEL_73:
            v23 = v55;
            goto LABEL_74;
          }
          Parent = 0;
          if (a4)
            goto LABEL_40;
          return 1;
        }
      }
      Parent = 0;
LABEL_39:
      if (a4)
        goto LABEL_40;
      return 1;
    }
    v47[0] = (const void **)"expects as many subscripts as affine map inputs";
    v48 = 259;
    mlir::Operation::emitOpError(a1, v47, (uint64_t)v52);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
    if (v52[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
    if (v59)
    {
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v58;
        v28 = __p;
        if (v58 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v58 = v26;
        operator delete(v28);
      }
      v21 = v55;
      if (v55)
      {
        v29 = v56;
        v23 = v55;
        if (v56 != v55)
        {
          do
          {
            v31 = (void *)*--v29;
            v30 = v31;
            *v29 = 0;
            if (v31)
              operator delete[](v30);
          }
          while (v29 != v21);
          goto LABEL_73;
        }
        goto LABEL_74;
      }
LABEL_75:
      if (v53 != &v54)
        free(v53);
    }
  }
  else
  {
    v47[0] = (const void **)"affine map num results must equal memref rank";
    v48 = 259;
    mlir::Operation::emitOpError(a1, v47, (uint64_t)v52);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
    if (v52[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
    if (v59)
    {
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v58;
        v20 = __p;
        if (v58 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v58 = v18;
        operator delete(v20);
      }
      v21 = v55;
      if (v55)
      {
        v22 = v56;
        v23 = v55;
        if (v56 != v55)
        {
          do
          {
            v25 = (void *)*--v22;
            v24 = v25;
            *v22 = 0;
            if (v25)
              operator delete[](v24);
          }
          while (v22 != v21);
          goto LABEL_73;
        }
LABEL_74:
        v56 = v21;
        operator delete(v23);
      }
      goto LABEL_75;
    }
  }
  return v17;
}

void mlir::affine::AffineLoadOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.load", 11, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_1E0E163C8;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineLoadOp>]";
  v39 = 117;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::affine::AffineLoadOp::fold(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t DefiningOp;
  uint64_t v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t ParentOp;
  mlir::Block *v10;
  uint64_t FastmathAttr;
  uint64_t v13;
  void *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *ConstantInitValue;
  void *v18;
  int isSplat;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22[4];
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *Value;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  if (mlir::memref::foldMemRefCast(*a1, 0))
  {
    if (*(_DWORD *)(*a1 + 36))
      v2 = *a1 - 16;
    else
      v2 = 0;
    return mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) | 4;
  }
  Value = *(void **)(*(_QWORD *)(*a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Value);
  if (!DefiningOp)
    return 0;
  v5 = DefiningOp;
  v3 = 0;
  v6 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::memref::GetGlobalOp,void>::id;
  if (v6 == &mlir::detail::TypeIDResolver<mlir::memref::GetGlobalOp,void>::id)
    v8 = DefiningOp;
  else
    v8 = 0;
  v25 = v8;
  if (v7)
  {
    while (1)
    {
      v10 = *(mlir::Block **)(v5 + 16);
      if (!v10)
        break;
      ParentOp = mlir::Block::getParentOp(v10);
      if (!ParentOp)
        break;
      v5 = ParentOp;
      if (mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((_QWORD *)(ParentOp + 48)))
      {
        FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v25);
        v13 = mlir::SymbolTable::lookupSymbolIn(v5, FastmathAttr);
        v3 = 0;
        if (!v13)
          return v3;
        v14 = *(void **)(*(_QWORD *)(v13 + 48) + 16);
        v15 = v14 == &mlir::detail::TypeIDResolver<mlir::memref::GlobalOp,void>::id;
        v16 = v14 == &mlir::detail::TypeIDResolver<mlir::memref::GlobalOp,void>::id ? v13 : 0;
        v24 = v16;
        if (!v15)
          return v3;
        ConstantInitValue = mlir::memref::GlobalOp::getConstantInitValue((mlir::memref::GlobalOp *)&v24);
        v3 = (unint64_t)ConstantInitValue;
        if (!ConstantInitValue)
          return v3;
        if (!mlir::DenseElementsAttr::classof((uint64_t)ConstantInitValue))
          v3 = 0;
        v23 = v3;
        if (!v3)
          return v3;
        if (mlir::DenseElementsAttr::classof(v3))
          v18 = (void *)v3;
        else
          v18 = 0;
        Value = v18;
        if (v18)
        {
          isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&Value);
          v20 = isSplat ? (_QWORD *)v3 : 0;
          v29 = v20;
          if (isSplat)
            return mlir::DenseElementsAttr::getSplatValue<mlir::Attribute>((mlir::ArrayAttr *)&v29) & 0xFFFFFFFFFFFFFFFBLL;
        }
        Value = *(void **)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
        Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
        if (mlir::AffineMap::isConstant((mlir::AffineMap *)&Value))
        {
          Value = *(void **)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
          v21 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
          mlir::AffineMap::getConstantResults((mlir::AffineMap *)&v21, (uint64_t)&Value);
          v22[0] = (uint64_t)Value;
          v22[1] = 256;
          v22[2] = (uint64_t)Value + 8 * v27;
          v22[3] = 256;
          llvm::to_vector<4u,llvm::iterator_range<llvm::mapped_iterator<long long *,mlir::affine::AffineLoadOp::fold(mlir::affine::AffineLoadOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0,unsigned long long>>>(&v29, v22);
          if (Value != &v28)
            free(Value);
          mlir::DenseElementsAttr::getValues<mlir::Attribute>((mlir::ArrayAttr *)&v23, (uint64_t)&Value);
          v3 = mlir::detail::ElementsAttrRange<mlir::DenseElementsAttr::AttributeElementIterator>::operator[]((uint64_t)&Value, (uint64_t)v29) & 0xFFFFFFFFFFFFFFFBLL;
          if (v29 != v30)
            free(v29);
          return v3;
        }
        return 0;
      }
    }
    return 0;
  }
  return v3;
}

uint64_t mlir::DenseElementsAttr::getSplatValue<mlir::Attribute>(mlir::ArrayAttr *a1)
{
  uint64_t v2;
  uint64_t NumElements;
  uint64_t v5;
  __int128 v6;

  mlir::ArrayAttr::getValue(a1);
  mlir::NamedAttribute::NamedAttribute(&v6, *(_QWORD *)a1, 0);
  v2 = *(_QWORD *)a1;
  NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  mlir::NamedAttribute::NamedAttribute(&v5, v2, NumElements);
  return mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v6);
}

void llvm::to_vector<4u,llvm::iterator_range<llvm::mapped_iterator<long long *,mlir::affine::AffineLoadOp::fold(mlir::affine::AffineLoadOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0,unsigned long long>>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v3 = *a2;
  v4 = (uint64_t *)a2[2];
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v5 = (uint64_t)v4 - v3;
  if ((unint64_t)v4 - v3 < 0x21)
  {
    v6 = 0;
    v7 = 0;
    if ((uint64_t *)v3 == v4)
      goto LABEL_12;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v5 >> 3, 8);
    v6 = *((unsigned int *)a1 + 2);
    v7 = *((_DWORD *)a1 + 2);
    if ((uint64_t *)v3 == v4)
      goto LABEL_12;
  }
  v8 = (_QWORD *)(*a1 + 8 * v6);
  if ((unint64_t)(v5 - 8) < 0x38)
  {
    v9 = (uint64_t *)v3;
    do
    {
LABEL_11:
      v17 = *v9++;
      *v8++ = v17;
    }
    while (v9 != v4);
    goto LABEL_12;
  }
  v10 = 8 * v6 + *a1;
  v9 = (uint64_t *)v3;
  if ((unint64_t)(v10 - v3) < 0x20)
    goto LABEL_11;
  v11 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
  v8 = (_QWORD *)((char *)v8 + v12);
  v9 = (uint64_t *)(v3 + v12);
  v13 = (__int128 *)(v3 + 16);
  v14 = (_OWORD *)(v10 + 16);
  v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v16 = *v13;
    *(v14 - 1) = *(v13 - 1);
    *v14 = v16;
    v13 += 2;
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_11;
LABEL_12:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v5 >> 3);
}

double mlir::DenseElementsAttr::getValues<mlir::Attribute>@<D0>(mlir::ArrayAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t NumElements;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  Value = mlir::ArrayAttr::getValue(a1);
  v6 = v5;
  mlir::NamedAttribute::NamedAttribute(&v12, *(_QWORD *)a1, 0);
  v7 = *(_QWORD *)a1;
  NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  mlir::NamedAttribute::NamedAttribute(&v11, v7, NumElements);
  v10 = v11;
  result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 32) = Value;
  *(_QWORD *)(a2 + 40) = v6;
  return result;
}

uint64_t mlir::detail::ElementsAttrRange<mlir::DenseElementsAttr::AttributeElementIterator>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *(_QWORD *)(a1 + 8) + mlir::ElementsAttr::getFlattenedIndex(*(_QWORD **)(a1 + 32), a2);
  v5[0] = *(_QWORD *)a1;
  v5[1] = v3;
  return mlir::DenseElementsAttr::AttributeElementIterator::operator*(v5);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties]";
        v15 = 115;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[109];
    return a1[32];
  }
  return result;
}

BOOL mlir::affine::AffineStoreOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  uint64_t RHS;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  BOOL v13;
  void *v14;
  uint64_t v16;
  _QWORD v17[4];
  _QWORD v18[4];
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  memset(v18, 0, 24);
  memset(v17, 0, 24);
  v16 = 0;
  v19 = 0;
  v20 = v22;
  v21 = 0x100000000;
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v18, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, &v20, &v16, "map", 3, a2 + 112, 2)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)&& mlir::AsmParser::parseColonType<mlir::MemRefType>(a1, &v19)&& (RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v19), v8 = a2 + 16, (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v18, RHS, v8))&& (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17,
         v19,
         v8))
  {
    if (!(_DWORD)v21)
    {
      v12 = 1;
      v14 = v20;
      if (v20 == v22)
        return v12;
      goto LABEL_19;
    }
    v9 = (char *)v20;
    v10 = 32 * v21 - 32;
    do
    {
      v11 = (*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, IndexType, v8);
      v12 = v11 != 0;
      v9 += 32;
      if (v11)
        v13 = v10 == 0;
      else
        v13 = 1;
      v10 -= 32;
    }
    while (!v13);
  }
  else
  {
    v12 = 0;
  }
  v14 = v20;
  if (v20 != v22)
LABEL_19:
    free(v14);
  return v12;
}

uint64_t mlir::affine::AffineStoreOp::print(mlir::affine::AffineStoreOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _WORD *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t InherentAttr;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  mlir::Operation *v19;
  mlir::ArrayAttr *v20;
  uint64_t Value;
  uint64_t v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  _QWORD v26[2];
  unint64_t v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 1uLL)
  {
    *v7 = 8236;
    *((_QWORD *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", ", 2uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56));
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 91);
    v10 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_12:
      InherentAttr = mlir::DictionaryAttr::get(v10 + 56, "map", 3uLL);
      goto LABEL_13;
    }
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 91;
    v10 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_12;
  }
  InherentAttr = mlir::Operation::getInherentAttr(v10, (uint64_t)"map", 3);
  if (!v12)
    goto LABEL_12;
LABEL_13:
  v13 = InherentAttr;
  if (InherentAttr
    && *(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    v14 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    {
      v15 = *(_QWORD *)(v14 + 72);
      v16 = *(unsigned int *)(v14 + 68) - 2;
    }
    else
    {
      v15 = 0;
      v16 = -2;
    }
    mlir::ValueRange::ValueRange(v27, v15 + 64, v16);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 240))(a2, v13, v27[0], v27[1]);
  }
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 93);
    v19 = *(mlir::Operation **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_20;
  }
  else
  {
    *((_QWORD *)v17 + 4) = v18 + 1;
    *v18 = 93;
    v19 = *(mlir::Operation **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_20:
      v26[0] = mlir::Operation::getAttrDictionary(v19);
      v20 = (mlir::ArrayAttr *)v26;
      goto LABEL_23;
    }
  }
  v20 = (mlir::Operation *)((char *)v19 + 56);
LABEL_23:
  Value = mlir::ArrayAttr::getValue(v20);
  v26[0] = "map";
  v26[1] = 3;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, Value, v22, v26, 1);
  v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v24 = *((_QWORD *)v23 + 4);
  if ((unint64_t)(*((_QWORD *)v23 + 3) - v24) > 2)
  {
    *(_BYTE *)(v24 + 2) = 32;
    *(_WORD *)v24 = 14880;
    *((_QWORD *)v23 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v23, " : ", 3uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
}

BOOL mlir::affine::AffineStoreOp::verify(uint64_t **this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t *v13;
  uint64_t InherentAttr;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void **v24;
  __int16 v25;
  unint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD **v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v26 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v3 == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v26))
  {
    v13 = *this;
    if (!*((_BYTE *)*this + 47)
      || (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)*this, (uint64_t)"map", 3), !v15))
    {
      InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v13 + 7), "map", 3uLL);
    }
    if (InherentAttr)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v16 = InherentAttr;
      else
        v16 = 0;
      v17 = (uint64_t)*this;
      if ((*((_BYTE *)*this + 46) & 0x80) != 0)
        goto LABEL_24;
    }
    else
    {
      v16 = 0;
      v17 = (uint64_t)*this;
      if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      {
LABEL_24:
        v18 = *(_QWORD *)(v17 + 72);
        v19 = *(unsigned int *)(v17 + 68);
        v20 = v19 - 2;
        v21 = v18 + 64;
        v22 = v19 - 2;
        return verifyMemoryOpIndexing(v13, v16, v21, v20, v26, v22) != 0;
      }
    }
    v20 = -2;
    v22 = -2;
    v21 = 64;
    return verifyMemoryOpIndexing(v13, v16, v21, v20, v26, v22) != 0;
  }
  v24 = (const void **)"value to store must have the same type as memref element type";
  v25 = 259;
  mlir::OpState::emitOpError(this, &v24, (uint64_t)v27);
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  if (v34)
  {
    v5 = (_QWORD **)__p;
    if (__p)
    {
      v6 = v33;
      v7 = __p;
      if (v33 != __p)
      {
        do
          v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        v7 = __p;
      }
      v33 = v5;
      operator delete(v7);
    }
    v8 = v30;
    if (v30)
    {
      v9 = v31;
      v10 = v30;
      if (v31 != v30)
      {
        do
        {
          v12 = (void *)*--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            operator delete[](v11);
        }
        while (v9 != v8);
        v10 = v30;
      }
      v31 = v8;
      operator delete(v10);
    }
    if (v28 != &v29)
      free(v28);
  }
  return v4;
}

void mlir::affine::AffineStoreOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.store", 12, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_1E0E16478;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineStoreOp>]";
  v39 = 118;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::affine::AffineMinOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  mlir::IndexType *v14;
  mlir::MLIRContext *v15;
  uint64_t v16;
  uint64_t Value;
  uint64_t v19;
  mlir::StringAttr *Context;
  uint64_t v21;
  unint64_t v22;
  int *v23[4];
  __int16 v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(unsigned int *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 48);
  v25 = v27;
  v26 = 0x200000000;
  v23[0] = *(int **)(v2 + 64 + 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1));
  v23[0] = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v23);
  v22 = mlir::AffineMap::partialConstantFold(v23, v4, v3, (uint64_t)&v25, 0);
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v22) == 1
    && mlir::AffineMap::isSymbolIdentity((mlir::AffineMap *)&v22))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + 24) | 4;
    v6 = v25;
    if (v25 == v27)
      return v5;
    goto LABEL_13;
  }
  if (!(_DWORD)v26)
  {
    v23[0] = *(int **)(v2 + 64 + 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1));
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v23);
    if (v22 != Value)
    {
      v19 = mlir::AffineMapAttr::get(v22);
      Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
      v24 = 261;
      v23[0] = (int *)"map";
      v23[1] = (int *)3;
      v21 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v23);
      mlir::Operation::setAttr(v2, v21, v19);
      v5 = (v2 - 16) | 4;
      v6 = v25;
      if (v25 == v27)
        return v5;
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  v7 = (uint64_t *)v25;
  if ((_DWORD)v26 != 1)
  {
    v9 = (uint64_t *)((char *)v25 + 8);
    v8 = *(_QWORD *)v25;
    v10 = 8 * v26 - 8;
    v11 = (uint64_t *)((char *)v25 + 8);
    do
    {
      v13 = *v11++;
      v12 = v13;
      if (v13 < v8)
      {
        v8 = v12;
        v7 = v9;
      }
      v9 = v11;
      v10 -= 8;
    }
    while (v10);
  }
  if (v7 == (uint64_t *)((char *)v25 + 8 * v26))
  {
LABEL_18:
    v5 = 0;
    v6 = v25;
    if (v25 == v27)
      return v5;
    goto LABEL_13;
  }
  v14 = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
  v16 = mlir::IndexType::get(v14, v15);
  v5 = mlir::IntegerAttr::get(v16, *v7) & 0xFFFFFFFFFFFFFFFBLL;
  v6 = v25;
  if (v25 != v27)
LABEL_13:
    free(v6);
  return v5;
}

void mlir::affine::AffineMinOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;

  v38 = a2;
  mlir::RewritePatternSet::addImpl<CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  mlir::RewritePatternSet::addImpl<DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  mlir::RewritePatternSet::addImpl<MergeAffineMinMaxOp<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  v3 = v38;
  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v39, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.min", 10, (__int16)v39, v3, 0, 0);
  *(_QWORD *)v4 = &off_1E0E16370;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineMinOp>]";
  v40 = 116;
  v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9)
    v10 = v9;
  else
    v10 = v40;
  v11 = &v39[v10];
  v12 = v40 - v10;
  if (v40 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v40 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  mlir::RewritePatternSet::addImpl<CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
}

uint64_t mlir::affine::AffineMinOp::verify(mlir::affine::AffineMinOp *this)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  int NumDims;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  const void **v15[4];
  __int16 v16;
  uint64_t *v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)this;
  v17 = (uint64_t *)v1;
  v2 = *(unsigned int *)(v1 + 44);
  if ((v2 & 0x800000) != 0)
    v3 = *(_DWORD *)(v1 + 68);
  else
    v3 = 0;
  v18[0] = *(_QWORD *)(v1 + 64 + 16 * ((v2 >> 23) & 1));
  v15[0] = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v18);
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)v15);
  v18[0] = *(_QWORD *)(v1 + 64 + 16 * (((unint64_t)*(unsigned int *)(v1 + 44) >> 23) & 1));
  v18[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v18);
  if (v3 == mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v18) + NumDims)
    return 1;
  v15[0] = (const void **)"operand count and affine map dimension and symbol count must match";
  v16 = 259;
  mlir::OpState::emitOpError(&v17, v15, (uint64_t)v18);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
  if (v18[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
  if (v25)
  {
    v6 = (_QWORD **)__p;
    if (__p)
    {
      v7 = v24;
      v8 = __p;
      if (v24 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v24 = v6;
      operator delete(v8);
    }
    v9 = v21;
    if (v21)
    {
      v10 = v22;
      v11 = v21;
      if (v22 != v21)
      {
        do
        {
          v13 = (void *)*--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            operator delete[](v12);
        }
        while (v10 != v9);
        v11 = v21;
      }
      v22 = v9;
      operator delete(v11);
    }
    if (v19 != &v20)
      free(v19);
  }
  return v5;
}

uint64_t mlir::affine::AffineMinOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[256];
  void *v19;
  uint64_t v20;
  _QWORD v21[33];

  v21[32] = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  v19 = v21;
  v20 = 0x800000000;
  v15 = 0;
  v16 = v18;
  v17 = 0x800000000;
  if (!mlir::AsmParser::parseAttribute<mlir::AffineMapAttr>(a1, &v15, 0, (uint64_t)"map", 3, a2 + 112)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v19, 1, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v16, 6, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
  {
    goto LABEL_17;
  }
  if ((_DWORD)v20)
  {
    v7 = (char *)v19;
    v8 = 32 * v20;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v7, IndexType, a2 + 16))
    {
      v7 += 32;
      v8 -= 32;
      if (!v8)
        goto LABEL_9;
    }
LABEL_17:
    v12 = 0;
    v13 = v16;
    if (v16 == v18)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_9:
  if ((_DWORD)v17)
  {
    v9 = (char *)v16;
    v10 = 32 * v17;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, IndexType, a2 + 16))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10)
        goto LABEL_13;
    }
    goto LABEL_17;
  }
LABEL_13:
  v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v11) = IndexType;
  ++*(_DWORD *)(a2 + 72);
  v12 = 1;
  v13 = v16;
  if (v16 != v18)
LABEL_18:
    free(v13);
LABEL_19:
  if (v19 != v21)
    free(v19);
  return v12;
}

uint64_t mlir::affine::AffineMinOp::print(mlir::affine::AffineMinOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t InherentAttr;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  mlir::ArrayAttr *p_Value;
  uint64_t v25;
  uint64_t v26;
  const char *Value;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)this;
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 < *((_QWORD *)v4 + 3))
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
    if (!*(_BYTE *)(v3 + 47))
      goto LABEL_6;
LABEL_5:
    InherentAttr = mlir::Operation::getInherentAttr(v3, (uint64_t)"map", 3);
    if (v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  llvm::raw_ostream::write(v4, 32);
  if (*(_BYTE *)(v3 + 47))
    goto LABEL_5;
LABEL_6:
  InherentAttr = mlir::DictionaryAttr::get(v3 + 56, "map", 3uLL);
LABEL_7:
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 40))(a2, InherentAttr);
  v8 = *(unsigned int *)(v3 + 44);
  if ((v8 & 0x800000) != 0)
  {
    v9 = *(unsigned int *)(v3 + 68);
    v10 = *(_QWORD *)(v3 + 72);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  Value = *(const char **)(v3 + 16 * ((v8 >> 23) & 1) + 64);
  Value = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  LODWORD(v11) = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 40);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 40;
  }
  v14 = v11;
  if (v9 >= v11)
    v11 = v11;
  else
    v11 = v9;
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  Value = ", ";
  v29 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v10, 0, v10, v11, (uint64_t)a2, v15, (uint64_t)&Value);
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 41);
    v18 = v9 - v14;
    if (v9 == v14)
      goto LABEL_24;
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 41;
    v18 = v9 - v14;
    if (v9 == v14)
      goto LABEL_24;
  }
  v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v20 = (_BYTE *)*((_QWORD *)v19 + 4);
  if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 91);
  }
  else
  {
    *((_QWORD *)v19 + 4) = v20 + 1;
    *v20 = 91;
  }
  v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  Value = ", ";
  v29 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v10 + 32 * v14, 0, v10 + 32 * v14, v18, (uint64_t)a2, v21, (uint64_t)&Value);
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 93);
    if (!*(_BYTE *)(v3 + 47))
      goto LABEL_25;
LABEL_27:
    Value = (const char *)mlir::Operation::getAttrDictionary((mlir::Operation *)v3);
    p_Value = (mlir::ArrayAttr *)&Value;
    goto LABEL_28;
  }
  *((_QWORD *)v22 + 4) = v23 + 1;
  *v23 = 93;
LABEL_24:
  if (*(_BYTE *)(v3 + 47))
    goto LABEL_27;
LABEL_25:
  p_Value = (mlir::ArrayAttr *)(v3 + 56);
LABEL_28:
  v25 = mlir::ArrayAttr::getValue(p_Value);
  Value = "map";
  v29 = 3;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(_QWORD *)a2 + 192))(a2, v25, v26, &Value, 1);
}

unint64_t mlir::affine::AffineMaxOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  mlir::IndexType *v15;
  mlir::MLIRContext *v16;
  uint64_t v17;
  uint64_t Value;
  uint64_t v20;
  mlir::StringAttr *Context;
  uint64_t v22;
  unint64_t v23;
  int *v24[4];
  __int16 v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(unsigned int *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 48);
  v26 = v28;
  v27 = 0x200000000;
  v24[0] = *(int **)(v2 + 64 + 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1));
  v24[0] = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v24);
  v23 = mlir::AffineMap::partialConstantFold(v24, v4, v3, (uint64_t)&v26, 0);
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v23) == 1
    && mlir::AffineMap::isSymbolIdentity((mlir::AffineMap *)&v23))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + 24) | 4;
    v6 = v26;
    if (v26 == v28)
      return v5;
    goto LABEL_15;
  }
  if (!(_DWORD)v27)
  {
    v24[0] = *(int **)(v2 + 64 + 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1));
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v24);
    if (v23 != Value)
    {
      v20 = mlir::AffineMapAttr::get(v23);
      Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
      v25 = 261;
      v24[0] = (int *)"map";
      v24[1] = (int *)3;
      v22 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v24);
      mlir::Operation::setAttr(v2, v22, v20);
      v5 = (v2 - 16) | 4;
      v6 = v26;
      if (v26 == v28)
        return v5;
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  v7 = (uint64_t *)v26;
  if ((_DWORD)v27 != 1)
  {
    v9 = (uint64_t *)((char *)v26 + 8);
    v8 = *(_QWORD *)v26;
    v10 = 8 * v27 - 8;
    v11 = (uint64_t *)((char *)v26 + 8);
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v8 < v13;
      if (v8 <= v13)
        v8 = v12;
      if (v14)
        v7 = v9;
      v9 = v11;
      v10 -= 8;
    }
    while (v10);
  }
  if (v7 == (uint64_t *)((char *)v26 + 8 * v27))
  {
LABEL_20:
    v5 = 0;
    v6 = v26;
    if (v26 == v28)
      return v5;
    goto LABEL_15;
  }
  v15 = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
  v17 = mlir::IndexType::get(v15, v16);
  v5 = mlir::IntegerAttr::get(v17, *v7) & 0xFFFFFFFFFFFFFFFBLL;
  v6 = v26;
  if (v26 != v28)
LABEL_15:
    free(v6);
  return v5;
}

void mlir::affine::AffineMaxOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;

  v38 = a2;
  mlir::RewritePatternSet::addImpl<CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  mlir::RewritePatternSet::addImpl<DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  mlir::RewritePatternSet::addImpl<MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  v3 = v38;
  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v39, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.max", 10, (__int16)v39, v3, 0, 0);
  *(_QWORD *)v4 = &off_1E0E16318;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineMaxOp>]";
  v40 = 116;
  v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9)
    v10 = v9;
  else
    v10 = v40;
  v11 = &v39[v10];
  v12 = v40 - v10;
  if (v40 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v40 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  mlir::RewritePatternSet::addImpl<CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
}

uint64_t mlir::affine::AffineMaxOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[256];
  void *v19;
  uint64_t v20;
  _QWORD v21[33];

  v21[32] = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  v19 = v21;
  v20 = 0x800000000;
  v15 = 0;
  v16 = v18;
  v17 = 0x800000000;
  if (!mlir::AsmParser::parseAttribute<mlir::AffineMapAttr>(a1, &v15, 0, (uint64_t)"map", 3, a2 + 112)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v19, 1, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v16, 6, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
  {
    goto LABEL_17;
  }
  if ((_DWORD)v20)
  {
    v7 = (char *)v19;
    v8 = 32 * v20;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v7, IndexType, a2 + 16))
    {
      v7 += 32;
      v8 -= 32;
      if (!v8)
        goto LABEL_9;
    }
LABEL_17:
    v12 = 0;
    v13 = v16;
    if (v16 == v18)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_9:
  if ((_DWORD)v17)
  {
    v9 = (char *)v16;
    v10 = 32 * v17;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, IndexType, a2 + 16))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10)
        goto LABEL_13;
    }
    goto LABEL_17;
  }
LABEL_13:
  v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v11) = IndexType;
  ++*(_DWORD *)(a2 + 72);
  v12 = 1;
  v13 = v16;
  if (v16 != v18)
LABEL_18:
    free(v13);
LABEL_19:
  if (v19 != v21)
    free(v19);
  return v12;
}

uint64_t mlir::affine::AffinePrefetchOp::parse(mlir::AsmParser *a1, mlir::Attribute *a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  mlir::Builder *v7;
  uint64_t IntegerType;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v20;
  void *v21;
  mlir::BoolAttr **v23;
  mlir::MLIRContext *v25;
  uint64_t BoolAttr;
  mlir::StringAttr *Context;
  uint64_t v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  mlir::BoolAttr **v37;
  mlir::MLIRContext *v38;
  uint64_t v39;
  mlir::StringAttr *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  __int16 v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  char *v63;
  uint64_t v64;
  _QWORD v65[5];

  v65[4] = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  v52 = 0;
  memset(v51, 0, 24);
  v50 = 0;
  v7 = (mlir::Builder *)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  IntegerType = mlir::Builder::getIntegerType(v7, 0x20u);
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v63 = (char *)v65;
  v64 = 0x100000000;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v51, 1)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *, char **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, &v63, &v45, "map", 3, (uint64_t)a2 + 112, 2)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 120))(a1)|| !mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v48)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 120))(a1)|| (v56 = 257, !(*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, const char **))(*(_QWORD *)a1 + 368))(a1, "locality", 8, &v53))|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 152))(a1)|| !mlir::AsmParser::parseAttribute<mlir::IntegerAttr>((uint64_t)a1,
                           &v50,
                           IntegerType,
                           (uint64_t)"localityHint",
                           12,
                           (uint64_t)a2 + 112)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 168))(a1)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 120))(a1)
    || !mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v46)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112)
    || !mlir::AsmParser::parseColonType<mlir::MemRefType>((uint64_t)a1, &v52)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v51, v52, (uint64_t)a2 + 16))
  {
LABEL_33:
    v12 = 0;
    goto LABEL_34;
  }
  if ((_DWORD)v64)
  {
    v9 = v63;
    v10 = 32 * v64;
    while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, IndexType, (uint64_t)a2 + 16))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10)
        goto LABEL_19;
    }
    goto LABEL_33;
  }
LABEL_19:
  if (v49 == 5)
  {
    if (*(_DWORD *)v48 != 1953067639 || *(_BYTE *)(v48 + 4) != 101)
    {
LABEL_22:
      v11 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 16))(a1);
      v42 = "rw specifier has to be 'read' or 'write'";
      v44 = 259;
      (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v53, a1, v11, &v42);
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
      if (v53)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
      if (v62)
      {
        v13 = (_QWORD **)__p;
        if (__p)
        {
          v14 = v61;
          v15 = __p;
          if (v61 != __p)
          {
            do
              v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
            while (v14 != v13);
            v15 = __p;
          }
          v61 = v13;
          operator delete(v15);
        }
        v16 = v58;
        if (!v58)
          goto LABEL_72;
        v17 = v59;
        v18 = v58;
        if (v59 == v58)
        {
LABEL_71:
          v59 = v16;
          operator delete(v18);
LABEL_72:
          if (v55 != &v57)
            free(v55);
          goto LABEL_34;
        }
        do
        {
          v21 = (void *)*--v17;
          v20 = v21;
          *v17 = 0;
          if (v21)
            operator delete[](v20);
        }
        while (v17 != v16);
LABEL_70:
        v18 = v58;
        goto LABEL_71;
      }
      goto LABEL_34;
    }
  }
  else if (v49 != 4 || *(_DWORD *)v48 != 1684104562)
  {
    goto LABEL_22;
  }
  v23 = (mlir::BoolAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  v25 = (mlir::MLIRContext *)(v49 == 5 && *(_DWORD *)v48 == 1953067639 && *(_BYTE *)(v48 + 4) == 101);
  BoolAttr = mlir::Builder::getBoolAttr(v23, v25);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  v56 = 261;
  v53 = "isWrite";
  v54 = 7;
  v28 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v53);
  mlir::NamedAttribute::NamedAttribute(&v42, v28, BoolAttr);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v42, v43);
  if (v47 != 5)
  {
    if (v47 != 4 || *(_DWORD *)v46 != 1635017060)
      goto LABEL_56;
LABEL_79:
    v37 = (mlir::BoolAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
    if (v47 == 4)
      v38 = (mlir::MLIRContext *)(*(_DWORD *)v46 == 1635017060);
    else
      v38 = 0;
    v39 = mlir::Builder::getBoolAttr(v37, v38);
    v40 = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
    v56 = 261;
    v53 = "isDataCache";
    v54 = 11;
    v41 = mlir::StringAttr::get(v40, (mlir::MLIRContext *)&v53);
    mlir::NamedAttribute::NamedAttribute(&v42, v41, v39);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v42, v43);
    v12 = 1;
    goto LABEL_34;
  }
  if (*(_DWORD *)v46 == 1953721961 && *(_BYTE *)(v46 + 4) == 114)
    goto LABEL_79;
LABEL_56:
  v29 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 16))(a1);
  v42 = "cache type has to be 'data' or 'instr'";
  v44 = 259;
  (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v53, a1, v29, &v42);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
  if (v53)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
  if (v62)
  {
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v61;
      v32 = __p;
      if (v61 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v61 = v30;
      operator delete(v32);
    }
    v16 = v58;
    if (!v58)
      goto LABEL_72;
    v33 = v59;
    v18 = v58;
    if (v59 == v58)
      goto LABEL_71;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v16);
    goto LABEL_70;
  }
LABEL_34:
  if (v63 != (char *)v65)
    free(v63);
  return v12;
}

uint64_t mlir::affine::AffinePrefetchOp::print(mlir::affine::AffinePrefetchOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t InherentAttr;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  unint64_t v19;
  _BOOL4 Value;
  uint64_t v21;
  llvm::raw_ostream *v22;
  const char *v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  _WORD *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  llvm::raw_ostream *v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  llvm::raw_ostream *v38;
  const char *v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  mlir::Operation *v43;
  void **p_p;
  uint64_t v45;
  uint64_t v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  uint64_t v50;
  void *__p;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  unint64_t v59[3];

  v59[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
    v8 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_9:
      InherentAttr = mlir::DictionaryAttr::get(v8 + 56, "map", 3uLL);
      goto LABEL_10;
    }
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 91;
    v8 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_9;
  }
  InherentAttr = mlir::Operation::getInherentAttr(v8, (uint64_t)"map", 3);
  if (!v10)
    goto LABEL_9;
LABEL_10:
  v11 = InherentAttr;
  if (InherentAttr
    && *(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    v12 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    {
      v13 = *(_QWORD *)(v12 + 72);
      v14 = *(unsigned int *)(v12 + 68) - 1;
    }
    else
    {
      v13 = 0;
      v14 = -1;
    }
    mlir::ValueRange::ValueRange(v59, v13 + 32, v14);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 240))(a2, v11, v59[0], v59[1]);
  }
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 93);
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 93;
  }
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v18 = (_WORD *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 1uLL)
  {
    *v18 = 8236;
    *((_QWORD *)v17 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v17, ", ", 2uLL);
  }
  v19 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v19 = 0;
  __p = *(void **)(v19 + 8);
  Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&__p);
  v21 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v22 = (llvm::raw_ostream *)v21;
  if (Value)
    v23 = "write";
  else
    v23 = "read";
  if (Value)
    v24 = 5;
  else
    v24 = 4;
  v26 = *(_QWORD *)(v21 + 24);
  v25 = *(void **)(v21 + 32);
  if (v24 <= v26 - (uint64_t)v25)
  {
    memcpy(v25, v23, v24);
    *((_QWORD *)v22 + 4) += v24;
  }
  else
  {
    llvm::raw_ostream::write(v22, v23, v24);
  }
  v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v28 = (_WORD *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
  {
    *v28 = 8236;
    *((_QWORD *)v27 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v27, ", ", 2uLL);
  }
  v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v30 = *((_QWORD *)v29 + 4);
  if ((unint64_t)(*((_QWORD *)v29 + 3) - v30) > 8)
  {
    *(_BYTE *)(v30 + 8) = 60;
    *(_QWORD *)v30 = *(_QWORD *)"locality<";
    *((_QWORD *)v29 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v29, "locality<", 9uLL);
  }
  v31 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v31 = 0;
  v50 = *(_QWORD *)(v31 + 16);
  mlir::IntegerAttr::getValue(&v50, (llvm::APInt *)&__p);
  if (v52 > 0x40)
  {
    v32 = *(unsigned int *)__p;
    operator delete[](__p);
  }
  else
  {
    v32 = __p;
  }
  v33 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  llvm::raw_ostream::operator<<(v33, v32);
  v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v35 = *((_QWORD *)v34 + 4);
  if ((unint64_t)(*((_QWORD *)v34 + 3) - v35) > 2)
  {
    *(_BYTE *)(v35 + 2) = 32;
    *(_WORD *)v35 = 11326;
    *((_QWORD *)v34 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v34, ">, ", 3uLL);
  }
  __p = *(void **)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  v36 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&__p);
  v37 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v38 = (llvm::raw_ostream *)v37;
  if (v36)
    v39 = "data";
  else
    v39 = "instr";
  if (v36)
    v40 = 4;
  else
    v40 = 5;
  v42 = *(_QWORD *)(v37 + 24);
  v41 = *(void **)(v37 + 32);
  if (v40 <= v42 - (uint64_t)v41)
  {
    memcpy(v41, v39, v40);
    *((_QWORD *)v38 + 4) += v40;
    v43 = *(mlir::Operation **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_54;
  }
  else
  {
    llvm::raw_ostream::write(v38, v39, v40);
    v43 = *(mlir::Operation **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_54:
      __p = (void *)mlir::Operation::getAttrDictionary(v43);
      p_p = &__p;
      goto LABEL_57;
    }
  }
  p_p = (void **)((char *)v43 + 56);
LABEL_57:
  v45 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)p_p);
  __p = "map";
  v52 = 3;
  v53 = "localityHint";
  v54 = 12;
  v55 = "isDataCache";
  v56 = 11;
  v57 = "isWrite";
  v58 = 7;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 192))(a2, v45, v46, &__p, 4);
  v47 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v48 = *((_QWORD *)v47 + 4);
  if ((unint64_t)(*((_QWORD *)v47 + 3) - v48) > 2)
  {
    *(_BYTE *)(v48 + 2) = 32;
    *(_WORD *)v48 = 14880;
    *((_QWORD *)v47 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v47, " : ", 3uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::affine::AffinePrefetchOp::verify(mlir::affine::AffinePrefetchOp *this)
{
  uint64_t v2;
  uint64_t InherentAttr;
  char v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  int Kind;
  uint64_t v9;
  int v10;
  unint64_t Parent;
  uint64_t v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  mlir::Block *v19;
  unint64_t v20;
  uint64_t ParentOp;
  mlir::Block *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD **i;
  _QWORD *v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  _QWORD **v45;
  _QWORD **v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  void *v51;
  const void **v53[4];
  __int16 v54;
  uint64_t Value;
  uint64_t v56;
  _QWORD v57[3];
  void *v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"map", 3);
    if (v4)
    {
      if (InherentAttr)
        goto LABEL_4;
LABEL_24:
      v56 = 0;
      goto LABEL_25;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(v2 + 56, "map", 3uLL);
  if (!InherentAttr)
    goto LABEL_24;
LABEL_4:
  v5 = *(void **)(*(_QWORD *)InherentAttr + 136);
  v6 = v5 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
    v7 = InherentAttr;
  else
    v7 = 0;
  v56 = v7;
  if (v6)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v56);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value);
    v57[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v57);
    if (v9 == Kind)
    {
      v10 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value) + 1;
      Parent = *(_QWORD *)this;
      if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
      {
        if (v10 == *(_DWORD *)(Parent + 68))
          goto LABEL_27;
      }
      else if (!v10)
      {
        goto LABEL_27;
      }
      v53[0] = (const void **)"too few operands";
      v54 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v53, (uint64_t)v57);
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
      if (v57[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
      if (!v64)
        return v12;
      v13 = (_QWORD **)__p;
      if (__p)
      {
        v14 = v63;
        v15 = __p;
        if (v63 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v63 = v13;
        operator delete(v15);
      }
      v16 = v60;
      if (!v60)
        goto LABEL_89;
      v17 = v61;
      v18 = v60;
      if (v61 == v60)
        goto LABEL_88;
      do
      {
        v27 = (void *)*--v17;
        v26 = v27;
        *v17 = 0;
        if (v27)
          operator delete[](v26);
      }
      while (v17 != v16);
    }
    else
    {
      v53[0] = (const void **)"affine.prefetch affine map num results must equal memref rank";
      v54 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v53, (uint64_t)v57);
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
      if (v57[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
      if (!v64)
        return v12;
      v45 = (_QWORD **)__p;
      if (__p)
      {
        v46 = v63;
        v47 = __p;
        if (v63 != __p)
        {
          do
            v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
          while (v46 != v45);
          v47 = __p;
        }
        v63 = v45;
        operator delete(v47);
      }
      v16 = v60;
      if (!v60)
        goto LABEL_89;
      v48 = v61;
      v18 = v60;
      if (v61 == v60)
        goto LABEL_88;
      do
      {
        v50 = (void *)*--v48;
        v49 = v50;
        *v48 = 0;
        if (v50)
          operator delete[](v49);
      }
      while (v48 != v16);
    }
    goto LABEL_87;
  }
LABEL_25:
  Parent = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) == 0 || *(_DWORD *)(Parent + 68) != 1)
  {
    v53[0] = (const void **)"too few operands";
    v54 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, v53, (uint64_t)v57);
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    if (v57[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
    if (!v64)
      return v12;
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v63;
      v30 = __p;
      if (v63 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v63 = v28;
      operator delete(v30);
    }
    v16 = v60;
    if (!v60)
      goto LABEL_89;
    v31 = v61;
    v18 = v60;
    if (v61 == v60)
    {
LABEL_88:
      v61 = v16;
      operator delete(v18);
LABEL_89:
      v51 = v58;
      if (v58 == v59)
        return v12;
LABEL_90:
      free(v51);
      return v12;
    }
    do
    {
      v33 = (void *)*--v31;
      v32 = v33;
      *v31 = 0;
      if (v33)
        operator delete[](v32);
    }
    while (v31 != v16);
LABEL_87:
    v18 = v60;
    goto LABEL_88;
  }
LABEL_27:
  while (1)
  {
    v19 = *(mlir::Block **)(Parent + 16);
    if (!v19)
      break;
    v20 = Parent;
    ParentOp = mlir::Block::getParentOp(v19);
    Parent = ParentOp;
    if (!ParentOp)
      goto LABEL_51;
    if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((_QWORD *)(ParentOp + 48)))
    {
      v22 = *(mlir::Block **)(v20 + 16);
      if (v22)
      {
        Parent = mlir::Block::getParent(v22);
        v23 = *(_QWORD *)this;
        if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) == 0)
          goto LABEL_32;
      }
      else
      {
        Parent = 0;
        v23 = *(_QWORD *)this;
        if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) == 0)
          goto LABEL_32;
      }
      goto LABEL_52;
    }
  }
  Parent = 0;
LABEL_51:
  v23 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) == 0)
  {
LABEL_32:
    v24 = -1;
    v25 = 32;
    goto LABEL_54;
  }
LABEL_52:
  v34 = *(unsigned int *)(v23 + 68);
  v24 = v34 - 1;
  if (v34 == 1)
    return 1;
  v25 = *(_QWORD *)(v23 + 72) + 32;
LABEL_54:
  for (i = (_QWORD **)(v25 + 24); ; i += 4)
  {
    v36 = *i;
    if ((mlir::affine::isValidDim(*i, (mlir::Block *)Parent) & 1) == 0
      && (mlir::affine::isValidSymbol(v36, (mlir::Block *)Parent) & 1) == 0)
    {
      break;
    }
    if (!--v24)
      return 1;
  }
  v53[0] = (const void **)"index must be a dimension or symbol identifier";
  v54 = 259;
  mlir::OpState::emitOpError((uint64_t **)this, v53, (uint64_t)v57);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
  if (v57[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
  if (v64)
  {
    v37 = (_QWORD **)__p;
    if (__p)
    {
      v38 = v63;
      v39 = __p;
      if (v63 != __p)
      {
        do
          v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        v39 = __p;
      }
      v63 = v37;
      operator delete(v39);
    }
    v40 = v60;
    if (v60)
    {
      v41 = v61;
      v42 = v60;
      if (v61 != v60)
      {
        do
        {
          v44 = (void *)*--v41;
          v43 = v44;
          *v41 = 0;
          if (v44)
            operator delete[](v43);
        }
        while (v41 != v40);
        v42 = v60;
      }
      v61 = v40;
      operator delete(v42);
    }
    v51 = v58;
    if (v58 != v59)
      goto LABEL_90;
  }
  return v12;
}

void mlir::affine::AffinePrefetchOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.prefetch", 15, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_1E0E164D0;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>]";
  v39 = 121;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

void mlir::affine::AffineParallelOp::getSteps(mlir::affine::AffineParallelOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  char *Value;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v3 = 0;
  v18 = *(_QWORD *)(v3 + 24);
  Value = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v18);
  v5 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v18);
  v7 = (char *)(v5 + 8 * v6);
  v8 = v22;
  v20 = v22;
  v21 = 0x400000000;
  v9 = v7 - Value;
  if ((unint64_t)(v7 - Value) < 0x21)
  {
    v10 = 0;
    v12 = 0;
    v11 = v22;
    if (v7 == Value)
      goto LABEL_10;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v9 >> 3, 8);
    v10 = v21;
    v11 = v20;
    v12 = v21;
    if (v7 == Value)
      goto LABEL_10;
  }
  v13 = &v11[v10];
  do
  {
    v14 = *(_QWORD *)Value;
    Value += 8;
    v19 = v14;
    *v13++ = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v19);
  }
  while (Value != v7);
  v12 = v21;
  v11 = v20;
LABEL_10:
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x800000000;
  v15 = v12 + ((unint64_t)v9 >> 3);
  LODWORD(v21) = v15;
  if ((_DWORD)v15 && &v20 != (_QWORD **)a2)
  {
    if (v11 == v22)
    {
      v17 = v12 + ((unint64_t)v9 >> 3);
      if (v15 < 9
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v15, 8),
            v17 = v21,
            v8 = v20,
            (_DWORD)v21))
      {
        memcpy(*(void **)a2, v8, 8 * v17);
        v8 = v20;
      }
      *(_DWORD *)(a2 + 8) = v15;
    }
    else
    {
      *(_QWORD *)a2 = v11;
      v16 = HIDWORD(v21);
      *(_DWORD *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 12) = v16;
      v20 = v22;
      HIDWORD(v21) = 0;
    }
    LODWORD(v21) = 0;
    v11 = v8;
  }
  if (v11 != v22)
    free(v11);
}

uint64_t mlir::affine::AffineParallelOp::getUpperBoundsOperands(mlir::affine::AffineParallelOp *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;

  v1 = *(_QWORD *)this;
  v2 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v2 & 0x800000) != 0)
    v3 = *(_QWORD *)(v1 + 72);
  else
    v3 = 0;
  v4 = v1 + 16 * ((v2 >> 23) & 1) + 64;
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v5 = v4;
  else
    v5 = 0;
  Value = *(_QWORD *)(v5 + 8);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  return v3 + 32 * mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
}

uint64_t mlir::affine::AffineParallelOp::getUpperBoundsMap(mlir::affine::AffineParallelOp *this)
{
  unint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  v3 = *(_QWORD *)(v1 + 40);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::AffineParallelOp::getLowerBoundsValueMap@<X0>(mlir::affine::AffineParallelOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int NumInputs;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16[2];
  unint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v4 = 0;
  v15 = *(_QWORD *)(v4 + 8);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v15);
  v6 = *(_QWORD *)this;
  v7 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v7 & 0x800000) != 0)
  {
    v8 = *(_QWORD *)(v6 + 72);
    v9 = *(unsigned int *)(v6 + 68);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v6 + 16 * ((v7 >> 23) & 1) + 64;
  if (BYTE3(v7))
    v11 = v10;
  else
    v11 = 0;
  v15 = *(_QWORD *)(v11 + 8);
  v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v15);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&v15);
  if (v9 >= NumInputs)
    v13 = NumInputs;
  else
    v13 = v9;
  mlir::ValueRange::ValueRange(v17, v8, v13);
  mlir::ValueRange::ValueRange(v16, 0, 0);
  return mlir::affine::AffineValueMap::AffineValueMap(a2, Value, v17[0], v17[1], v16[0], v16[1]);
}

uint64_t mlir::affine::AffineParallelOp::getUpperBoundsValueMap@<X0>(mlir::affine::AffineParallelOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int NumInputs;
  uint64_t v14;
  unint64_t v15[2];
  unint64_t v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v4 = 0;
  v14 = *(_QWORD *)(v4 + 40);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  v6 = *(_QWORD *)this;
  v7 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v7 & 0x800000) != 0)
  {
    v8 = *(_QWORD *)(v6 + 72);
    v9 = *(unsigned int *)(v6 + 68);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v6 + 16 * ((v7 >> 23) & 1) + 64;
  if (BYTE3(v7))
    v11 = v10;
  else
    v11 = 0;
  v14 = *(_QWORD *)(v11 + 8);
  v14 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&v14);
  mlir::ValueRange::ValueRange(v16, v8 + 32 * NumInputs, v9 - NumInputs);
  mlir::ValueRange::ValueRange(v15, 0, 0);
  return mlir::affine::AffineValueMap::AffineValueMap(a2, Value, v16[0], v16[1], v15[0], v15[1]);
}

void mlir::affine::AffineParallelOp::setLowerBounds(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int NumInputs;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v22;
  unint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const double *v30;
  unsigned __int128 *v31;
  uint64_t v32;
  const double *v33;
  unsigned __int128 v34;
  unsigned __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *Value;
  uint64_t v45;
  _BYTE v46[32];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(unsigned int *)(*a1 + 44);
  if ((v9 & 0x800000) != 0)
  {
    v10 = *(_QWORD *)(v8 + 72);
    v11 = *(unsigned int *)(v8 + 68);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = v8 + 16 * ((v9 >> 23) & 1) + 64;
  if (HIBYTE(*(_DWORD *)(*a1 + 44)))
    v13 = v12;
  else
    v13 = 0;
  Value = *(void **)(v13 + 8);
  Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  v15 = NumInputs;
  v16 = v11 - NumInputs;
  Value = v46;
  v45 = 0x400000000;
  if (a3 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v46, a3, 8);
    v17 = v45;
    v18 = Value;
    v47 = a2;
    v48 = 0;
LABEL_9:
    v19 = 0;
    v20 = (uint64_t *)&v18[8 * v17];
    do
    {
      *v20++ = mlir::ValueRange::dereference_iterator(&v47, v19);
      v19 = ++v48;
    }
    while (v47 != a2 || v19 != a3);
    LODWORD(v45) = v45 + a3;
    v22 = v45;
    v23 = v16 + v45;
    if (v23 > HIDWORD(v45))
      goto LABEL_16;
    goto LABEL_17;
  }
  v17 = 0;
  v47 = a2;
  v48 = 0;
  v18 = v46;
  if (a3)
    goto LABEL_9;
  v22 = 0;
  LODWORD(v45) = 0;
  v23 = v11 - NumInputs;
  if (v16 > 4)
  {
LABEL_16:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v46, v23, 8);
    v22 = v45;
  }
LABEL_17:
  v24 = Value;
  if (v11 != v15)
  {
    v25 = (char *)Value + 8 * v22;
    if (v16 >= 0x13
      && ((v26 = v22, v27 = v10 + 32 * v15, (unint64_t)v25 >= v10 + 32 * v11)
       || v27 + 24 >= (unint64_t)Value + 8 * (v11 + v22 - v15)))
    {
      v29 = 4;
      if ((v16 & 3) != 0)
        v29 = v16 & 3;
      v28 = v16 - v29;
      v25 += v16 - v29;
      v30 = (const double *)(v27 + 88);
      v31 = (unsigned __int128 *)((char *)Value + 8 * v26 + 16);
      v32 = v29 + v15 - v11;
      do
      {
        v33 = v30 - 8;
        v34 = (unsigned __int128)vld4q_f64(v33);
        v35 = (unsigned __int128)vld4q_f64(v30);
        *(v31 - 1) = v34;
        *v31 = v35;
        v30 += 16;
        v31 += 2;
        v32 += 4;
      }
      while (v32);
    }
    else
    {
      v28 = 0;
    }
    v36 = v28 + v15 - v11;
    v37 = (uint64_t *)(32 * v28 + 32 * v15 + v10 + 24);
    do
    {
      v38 = *v37;
      v37 += 4;
      *v25++ = v38;
    }
    while (!__CFADD__(v36++, 1));
    v22 = v45;
    v24 = Value;
  }
  LODWORD(v45) = v22 + v16;
  v40 = (uint64_t *)*a1;
  mlir::ValueRange::ValueRange((unint64_t *)&v42, (uint64_t)v24, v22 + v16);
  mlir::Operation::setOperands(v40, v42, v43);
  v41 = mlir::AffineMapAttr::get(a4);
  mlir::Operation::setAttr(*a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 48) + 96) + 8), v41);
  if (Value != v46)
    free(Value);
}

void mlir::affine::AffineParallelOp::setUpperBounds(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int NumInputs;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  const double *v19;
  unsigned __int128 *v20;
  unint64_t v21;
  const double *v22;
  unsigned __int128 v23;
  unsigned __int128 v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *Value;
  uint64_t v40;
  _BYTE v41[32];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(unsigned int *)(*a1 + 44);
  if ((v9 & 0x800000) != 0)
  {
    v10 = *(_QWORD *)(v8 + 72);
    v11 = *(unsigned int *)(v8 + 68);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = v8 + 16 * ((v9 >> 23) & 1) + 64;
  if (HIBYTE(*(_DWORD *)(*a1 + 44)))
    v13 = v12;
  else
    v13 = 0;
  Value = *(void **)(v13 + 8);
  Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  if (v11 >= NumInputs)
    v15 = NumInputs;
  else
    v15 = v11;
  Value = v41;
  v40 = 0x400000000;
  if (v15 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v41, v15, 8);
    v16 = (char *)Value + 8 * v40;
    if (v15 >= 0xD
      && ((unint64_t)v16 >= v10 + 32 * v15
       || v10 + 24 >= (unint64_t)Value + 8 * v40 + 8 * v15))
    {
      v18 = v15 & 3;
      if ((v15 & 3) == 0)
        v18 = 4;
      v17 = v15 - v18;
      v16 += 8 * v17;
      v19 = (const double *)(v10 + 88);
      v20 = (unsigned __int128 *)((char *)Value + 8 * v40 + 16);
      v21 = v17;
      do
      {
        v22 = v19 - 8;
        v23 = (unsigned __int128)vld4q_f64(v22);
        v24 = (unsigned __int128)vld4q_f64(v19);
        *(v20 - 1) = v23;
        *v20 = v24;
        v19 += 16;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
LABEL_21:
      v25 = v15 - v17;
      v26 = (uint64_t *)(v10 + 32 * v17 + 24);
      do
      {
        v27 = *v26;
        v26 += 4;
        *(_QWORD *)v16 = v27;
        v16 += 8;
        --v25;
      }
      while (v25);
      LODWORD(v40) = v40 + v15;
      v28 = v40;
      v29 = a3 + v40;
      if (v29 > HIDWORD(v40))
        goto LABEL_24;
      goto LABEL_25;
    }
LABEL_16:
    v17 = 0;
    goto LABEL_21;
  }
  if (v15)
  {
    v16 = v41;
    goto LABEL_16;
  }
  v28 = 0;
  LODWORD(v40) = 0;
  v29 = a3;
  if (a3 > 4)
  {
LABEL_24:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v41, v29, 8);
    v28 = v40;
  }
LABEL_25:
  v30 = Value;
  v42 = a2;
  v43 = 0;
  if (a3)
  {
    v31 = 0;
    v32 = (uint64_t *)((char *)Value + 8 * v28);
    do
    {
      *v32++ = mlir::ValueRange::dereference_iterator(&v42, v31);
      v31 = ++v43;
    }
    while (v42 != a2 || v31 != a3);
    LODWORD(v28) = v40;
    v30 = Value;
  }
  v34 = (v28 + a3);
  LODWORD(v40) = v28 + a3;
  v35 = (uint64_t *)*a1;
  mlir::ValueRange::ValueRange((unint64_t *)&v37, (uint64_t)v30, v34);
  mlir::Operation::setOperands(v35, v37, v38);
  v36 = mlir::AffineMapAttr::get(a4);
  mlir::Operation::setAttr(*a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 48) + 96) + 40), v36);
  if (Value != v41)
    free(Value);
}

BOOL mlir::affine::AffineParallelOp::verify(mlir::affine::AffineParallelOp *this)
{
  uint64_t v2;
  uint64_t NumElements;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  void *v8;
  void **v9;
  void **v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  _BYTE *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  void **v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  void **v32;
  char *v33;
  char *v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  void **v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  void **v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  _QWORD **v57;
  _QWORD **v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  BOOL v76;
  void **v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  void **v82;
  char *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  void **v87;
  char *v88;
  char *v89;
  __int128 v90;
  _QWORD **v91;
  _QWORD **v92;
  void *v93;
  _QWORD *v94;
  void *v95;
  void *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void **v105;
  unsigned int v106;
  void **v107;
  char *v108;
  char *v109;
  __int128 v110;
  uint64_t v111;
  void **v112;
  char *v113;
  char *v114;
  __int128 v115;
  uint64_t v116;
  void **v117;
  char *v118;
  char *v119;
  __int128 v120;
  _QWORD **v121;
  _QWORD **v122;
  void *v123;
  _QWORD *v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v139;
  unint64_t Int;
  char v141;
  unint64_t v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  void *v146;
  _QWORD **v147;
  _QWORD **v148;
  void *v149;
  _QWORD *v150;
  void *v151;
  void *v152;
  _QWORD **v153;
  _QWORD **v154;
  void *v155;
  _QWORD *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int NumInputs;
  unint64_t v166;
  unsigned int NumDims;
  uint64_t UpperBoundsOperands;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  _QWORD **v172;
  _QWORD **v173;
  void *v174;
  _QWORD *v175;
  void *v176;
  void *v177;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  BOOL v185;
  unint64_t v186;
  BOOL v187;
  unint64_t v188;
  BOOL v189;
  unint64_t v190;
  BOOL v191;
  unint64_t v192;
  unint64_t v193;
  BOOL v194;
  unint64_t v195;
  unint64_t v196;
  BOOL v197;
  unint64_t v198;
  BOOL v199;
  unint64_t v200;
  BOOL v201;
  int64_t v202;
  int64_t v203;
  int64_t v204;
  int64_t v205;
  int64_t v206;
  int64_t v207;
  int64_t v208;
  int64_t v209;
  char *v210;
  int64_t v211;
  int64_t v212;
  int64_t v213;
  int64_t v214;
  int64_t v215;
  int64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  __int16 v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  void *v226;
  const char *v227;
  uint64_t v228;
  __int16 v229;
  void *Value;
  unsigned int v231;
  uint64_t v232;
  void *v233;
  unsigned int v234;
  unsigned int v235;
  _BYTE v236[96];
  void *v237;
  _QWORD *v238;
  void *__p;
  _QWORD **v240;
  char v241;
  uint64_t v242;

  v242 = *MEMORY[0x1E0C80C00];
  mlir::affine::AffineParallelOp::getSteps(this, (uint64_t)&Value);
  v2 = v231;
  if (Value != &v232)
    free(Value);
  v226 = *(void **)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v226);
  if (NumElements != v2)
    goto LABEL_16;
  v4 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v4 = 0;
  v219 = *(void **)(v4 + 32);
  if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v219) != NumElements)
    goto LABEL_16;
  mlir::affine::AffineParallelOp::getSteps(this, (uint64_t)&Value);
  if (v231 != (_DWORD)v2)
  {
    v7 = 1;
    v8 = Value;
    if (Value == &v232)
      goto LABEL_15;
    goto LABEL_14;
  }
  v5 = *(_QWORD *)(((*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                 + 8);
  if (v5)
    v6 = v5 - 8;
  else
    v6 = 0;
  v7 = v2 != (*(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48)) >> 3;
  v8 = Value;
  if (Value != &v232)
LABEL_14:
    free(v8);
LABEL_15:
  if (!v7)
  {
    v223 = *(_QWORD *)(*(_QWORD *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                     + 64);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&Value, v223, 0);
    v65 = v223;
    v66 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v223);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v226, v65, v66);
    v67 = 0;
    while (1)
    {
      v69 = Value == v226 && v231 == v227;
      if (v69 && v232 == v228)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&Value, (llvm::APInt *)&v219);
      if (v220 > 0x40)
      {
        v68 = *(_QWORD *)v219;
        operator delete[](v219);
      }
      else
      {
        LODWORD(v68) = (_DWORD)v219;
      }
      v67 += v68;
      ++v232;
    }
    v70 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v70 = 0;
    Value = *(void **)(v70 + 8);
    Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
    if (v67 != mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value))
    {
      v229 = 257;
      mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v226, (uint64_t)&Value);
      if (Value)
      {
        LODWORD(v219) = 3;
        v220 = "expected lower bounds map to have ";
        v221 = 34;
        v77 = &v219;
        v78 = (char *)v233;
        if (v234 >= v235)
        {
          v192 = v234 + 1;
          if (v233 <= &v219 && (char *)v233 + 24 * v234 > (char *)&v219)
          {
            v211 = (char *)&v219 - (_BYTE *)v233;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v192, 24);
            v78 = (char *)v233;
            v77 = (void **)((char *)v233 + v211);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v192, 24);
            v77 = &v219;
            v78 = (char *)v233;
          }
        }
        v79 = &v78[24 * v234];
        v80 = *(_OWORD *)v77;
        *((_QWORD *)v79 + 2) = v77[2];
        *(_OWORD *)v79 = v80;
        v81 = ++v234;
        if (Value)
        {
          LODWORD(v219) = 5;
          v220 = (const char *)v67;
          v82 = &v219;
          v83 = (char *)v233;
          if (v81 >= v235)
          {
            v193 = v81 + 1;
            v194 = (char *)v233 + 24 * v81 > (char *)&v219;
            if (v233 <= &v219 && v194)
            {
              v212 = (char *)&v219 - (_BYTE *)v233;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v193, 24);
              v83 = (char *)v233;
              v82 = (void **)((char *)v233 + v212);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v193, 24);
              v82 = &v219;
              v83 = (char *)v233;
            }
          }
          v84 = &v83[24 * v234];
          v85 = *(_OWORD *)v82;
          *((_QWORD *)v84 + 2) = v82[2];
          *(_OWORD *)v84 = v85;
          v86 = ++v234;
          if (Value)
          {
            LODWORD(v219) = 3;
            v220 = " results";
            v221 = 8;
            v87 = &v219;
            v88 = (char *)v233;
            if (v86 >= v235)
            {
              v196 = v86 + 1;
              v197 = (char *)v233 + 24 * v86 > (char *)&v219;
              if (v233 <= &v219 && v197)
              {
                v214 = (char *)&v219 - (_BYTE *)v233;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v196, 24);
                v88 = (char *)v233;
                v87 = (void **)((char *)v233 + v214);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v196, 24);
                v87 = &v219;
                v88 = (char *)v233;
              }
            }
            v89 = &v88[24 * v234];
            v90 = *(_OWORD *)v87;
            *((_QWORD *)v89 + 2) = v87[2];
            *(_OWORD *)v89 = v90;
            ++v234;
          }
        }
      }
      v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      if (v241)
      {
        v91 = (_QWORD **)__p;
        if (__p)
        {
          v92 = v240;
          v93 = __p;
          if (v240 != __p)
          {
            do
              v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
            while (v92 != v91);
            v93 = __p;
          }
          v240 = v91;
          operator delete(v93);
        }
        v60 = v237;
        if (!v237)
          goto LABEL_248;
        v94 = v238;
        v62 = v237;
        if (v238 == v237)
          goto LABEL_247;
        do
        {
          v96 = (void *)*--v94;
          v95 = v96;
          *v94 = 0;
          if (v96)
            operator delete[](v95);
        }
        while (v94 != v60);
        goto LABEL_246;
      }
      return v56;
    }
    v71 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v71 = 0;
    v223 = *(_QWORD *)(v71 + 32);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&Value, v223, 0);
    v72 = v223;
    v73 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v223);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v226, v72, v73);
    v74 = 0;
    while (1)
    {
      v76 = Value == v226 && v231 == v227;
      if (v76 && v232 == v228)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&Value, (llvm::APInt *)&v219);
      if (v220 > 0x40)
      {
        v75 = *(_QWORD *)v219;
        operator delete[](v219);
      }
      else
      {
        LODWORD(v75) = (_DWORD)v219;
      }
      v74 += v75;
      ++v232;
    }
    v97 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v97 = 0;
    Value = *(void **)(v97 + 40);
    Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
    if (v74 != mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value))
    {
      v229 = 257;
      mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v226, (uint64_t)&Value);
      if (Value)
      {
        LODWORD(v219) = 3;
        v220 = "expected upper bounds map to have ";
        v221 = 34;
        v107 = &v219;
        v108 = (char *)v233;
        if (v234 >= v235)
        {
          v195 = v234 + 1;
          if (v233 <= &v219 && (char *)v233 + 24 * v234 > (char *)&v219)
          {
            v213 = (char *)&v219 - (_BYTE *)v233;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v195, 24);
            v108 = (char *)v233;
            v107 = (void **)((char *)v233 + v213);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v195, 24);
            v107 = &v219;
            v108 = (char *)v233;
          }
        }
        v109 = &v108[24 * v234];
        v110 = *(_OWORD *)v107;
        *((_QWORD *)v109 + 2) = v107[2];
        *(_OWORD *)v109 = v110;
        v111 = ++v234;
        if (Value)
        {
          LODWORD(v219) = 5;
          v220 = (const char *)v74;
          v112 = &v219;
          v113 = (char *)v233;
          if (v111 >= v235)
          {
            v198 = v111 + 1;
            v199 = (char *)v233 + 24 * v111 > (char *)&v219;
            if (v233 <= &v219 && v199)
            {
              v215 = (char *)&v219 - (_BYTE *)v233;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v198, 24);
              v113 = (char *)v233;
              v112 = (void **)((char *)v233 + v215);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v198, 24);
              v112 = &v219;
              v113 = (char *)v233;
            }
          }
          v114 = &v113[24 * v234];
          v115 = *(_OWORD *)v112;
          *((_QWORD *)v114 + 2) = v112[2];
          *(_OWORD *)v114 = v115;
          v116 = ++v234;
          if (Value)
          {
            LODWORD(v219) = 3;
            v220 = " results";
            v221 = 8;
            v117 = &v219;
            v118 = (char *)v233;
            if (v116 >= v235)
            {
              v200 = v116 + 1;
              v201 = (char *)v233 + 24 * v116 > (char *)&v219;
              if (v233 <= &v219 && v201)
              {
                v216 = (char *)&v219 - (_BYTE *)v233;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v200, 24);
                v118 = (char *)v233;
                v117 = (void **)((char *)v233 + v216);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v200, 24);
                v117 = &v219;
                v118 = (char *)v233;
              }
            }
            v119 = &v118[24 * v234];
            v120 = *(_OWORD *)v117;
            *((_QWORD *)v119 + 2) = v117[2];
            *(_OWORD *)v119 = v120;
            ++v234;
          }
        }
      }
      v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      if (v241)
      {
        v121 = (_QWORD **)__p;
        if (__p)
        {
          v122 = v240;
          v123 = __p;
          if (v240 != __p)
          {
            do
              v122 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v122 - 1);
            while (v122 != v121);
            v123 = __p;
          }
          v240 = v121;
          operator delete(v123);
        }
        v60 = v237;
        if (!v237)
          goto LABEL_248;
        v124 = v238;
        v62 = v237;
        if (v238 == v237)
          goto LABEL_247;
        do
        {
          v126 = (void *)*--v124;
          v125 = v126;
          *v124 = 0;
          if (v126)
            operator delete[](v125);
        }
        while (v124 != v60);
        goto LABEL_246;
      }
      return v56;
    }
    v98 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v98 = 0;
    Value = *(void **)(v98 + 16);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
    v99 = *(_QWORD *)this;
    if (v100 != *(_DWORD *)(*(_QWORD *)this + 36))
    {
      v226 = "a reduction must be specified for each output";
      v229 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v226, (uint64_t)&Value);
      v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      if (v241)
      {
        v153 = (_QWORD **)__p;
        if (__p)
        {
          v154 = v240;
          v155 = __p;
          if (v240 != __p)
          {
            do
              v154 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v154 - 1);
            while (v154 != v153);
            v155 = __p;
          }
          v240 = v153;
          operator delete(v155);
        }
        v60 = v237;
        if (!v237)
          goto LABEL_248;
        v156 = v238;
        v62 = v237;
        if (v238 == v237)
          goto LABEL_247;
        do
        {
          v158 = (void *)*--v156;
          v157 = v158;
          *v156 = 0;
          if (v158)
            operator delete[](v157);
        }
        while (v156 != v60);
        goto LABEL_246;
      }
      return v56;
    }
    v101 = *(unsigned int *)(v99 + 44);
    v102 = v99 + 16 * ((v101 >> 23) & 1) + 64;
    if (!BYTE3(v101))
      v102 = 0;
    v219 = *(void **)(v102 + 16);
    v9 = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v219);
    v103 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v219);
    v105 = (void **)(v103 + 8 * v104);
    if (v105 == v9)
    {
LABEL_221:
      v159 = *(_QWORD *)this;
      v160 = *(unsigned int *)(*(_QWORD *)this + 44);
      if ((v160 & 0x800000) != 0)
      {
        v161 = *(_QWORD *)(v159 + 72);
        v162 = *(unsigned int *)(v159 + 68);
      }
      else
      {
        v161 = 0;
        v162 = 0;
      }
      v163 = v159 + 16 * ((v160 >> 23) & 1) + 64;
      if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
        v164 = v163;
      else
        v164 = 0;
      Value = *(void **)(v164 + 8);
      Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
      NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
      if (v162 >= NumInputs)
        v162 = NumInputs;
      v166 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
      if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
        v166 = 0;
      Value = *(void **)(v166 + 8);
      Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
      NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      if (!verifyDimAndSymbolIdentifiers<mlir::affine::AffineForOp>((uint64_t **)this, v161, v162, NumDims))return 0;
      UpperBoundsOperands = mlir::affine::AffineParallelOp::getUpperBoundsOperands(this);
      v170 = v169;
      Value = (void *)mlir::affine::AffineParallelOp::getUpperBoundsMap(this);
      v171 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      return verifyDimAndSymbolIdentifiers<mlir::affine::AffineForOp>((uint64_t **)this, UpperBoundsOperands, v170, v171) != 0;
    }
    v106 = 0;
    while (2)
    {
      v139 = (uint64_t)*v9;
      if (*(_UNKNOWN **)(*(_QWORD *)*v9 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v139 = 0;
      v223 = v139;
      if (!v139
        || (Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v223), mlir::arith::symbolizeAtomicRMWKind(Int), !v141))
      {
        v226 = "invalid reduction attribute";
        v229 = 259;
        mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v226, (uint64_t)&Value);
        v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        if (v241)
        {
          v172 = (_QWORD **)__p;
          if (__p)
          {
            v173 = v240;
            v174 = __p;
            if (v240 != __p)
            {
              do
                v173 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v173 - 1);
              while (v173 != v172);
              v174 = __p;
            }
            v240 = v172;
            operator delete(v174);
          }
          v60 = v237;
          if (!v237)
            goto LABEL_248;
          v175 = v238;
          v62 = v237;
          if (v238 == v237)
            goto LABEL_247;
          do
          {
            v177 = (void *)*--v175;
            v176 = v177;
            *v175 = 0;
            if (v177)
              operator delete[](v176);
          }
          while (v175 != v60);
          goto LABEL_246;
        }
        return v56;
      }
      v142 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v223);
      v143 = mlir::arith::symbolizeAtomicRMWKind(v142);
      if (v144)
      {
        v145 = *(_QWORD *)this - 16 * (v106 + 1);
        if (v106 > 5)
          v145 = *(_QWORD *)this - 24 * (v106 - 5) - 96;
        v146 = (void *)(*(_QWORD *)(v145 + 8) & 0xFFFFFFFFFFFFFFF8);
        switch(v143)
        {
          case 0uLL:
          case 3uLL:
          case 6uLL:
          case 9uLL:
            v127 = *(void **)(*(_QWORD *)v146 + 136);
            if (v127 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
            {
              goto LABEL_173;
            }
            goto LABEL_193;
          case 1uLL:
          case 0xAuLL:
          case 0xBuLL:
          case 0xCuLL:
            if (*(_UNKNOWN **)(*(_QWORD *)v146 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
              goto LABEL_193;
            goto LABEL_173;
          case 2uLL:
            goto LABEL_173;
          case 4uLL:
          case 7uLL:
            if (*(_UNKNOWN **)(*(_QWORD *)v146 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
              v146 = 0;
            Value = v146;
            if (!v146 || mlir::IntegerType::getSignedness((mlir::IntegerType *)&Value) != 1)
              goto LABEL_193;
            goto LABEL_173;
          case 5uLL:
          case 8uLL:
            if (*(_UNKNOWN **)(*(_QWORD *)v146 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
              v146 = 0;
            Value = v146;
            if (!v146 || mlir::IntegerType::getSignedness((mlir::IntegerType *)&Value) != 2)
              goto LABEL_193;
LABEL_173:
            ++v106;
            if (++v9 != v105)
              continue;
            goto LABEL_221;
          default:
LABEL_193:
            v226 = "result type cannot match reduction attribute";
            v229 = 259;
            mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v226, (uint64_t)&Value);
            v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            if (Value)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
            if (!v241)
              return v56;
            v147 = (_QWORD **)__p;
            if (__p)
            {
              v148 = v240;
              v149 = __p;
              if (v240 != __p)
              {
                do
                  v148 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v148 - 1);
                while (v148 != v147);
                v149 = __p;
              }
              v240 = v147;
              operator delete(v149);
            }
            v60 = v237;
            if (!v237)
              goto LABEL_248;
            v150 = v238;
            v62 = v237;
            if (v238 == v237)
              goto LABEL_247;
            do
            {
              v152 = (void *)*--v150;
              v151 = v152;
              *v150 = 0;
              if (v152)
                operator delete[](v151);
            }
            while (v150 != v60);
            break;
        }
        goto LABEL_246;
      }
      break;
    }
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_307;
  }
LABEL_16:
  v222 = 257;
  mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v219, (uint64_t)&Value);
  if (Value)
  {
    v9 = &v233;
    LODWORD(v226) = 3;
    v227 = "the number of region arguments (";
    v228 = 32;
    v10 = &v226;
    v11 = (char *)v233;
    if (v234 >= v235)
    {
      v179 = v234 + 1;
      if (v233 <= &v226 && (char *)v233 + 24 * v234 > (char *)&v226)
      {
        v202 = (char *)&v226 - (_BYTE *)v233;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v179, 24);
        v11 = (char *)v233;
        v10 = (void **)((char *)v233 + v202);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v179, 24);
        v10 = &v226;
        v11 = (char *)v233;
      }
    }
    v12 = &v11[24 * v234];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = v10[2];
    *(_OWORD *)v12 = v13;
    ++v234;
    if (Value)
    {
      v14 = *(_QWORD *)(((*(_QWORD *)this
                        + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                        + ((*(_DWORD *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                        + 71) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                      + 8);
      if (v14)
        v15 = v14 - 8;
      else
        v15 = 0;
      v16 = *(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48);
      LODWORD(v226) = 5;
      v227 = (const char *)(v16 >> 3);
      v17 = &v226;
      v18 = (char *)v233;
      if (v234 >= v235)
      {
        v183 = v234 + 1;
        if (v233 <= &v226 && (char *)v233 + 24 * v234 > (char *)&v226)
        {
          v206 = (char *)&v226 - (_BYTE *)v233;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v183, 24);
          v18 = (char *)v233;
          v17 = (void **)((char *)v233 + v206);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v183, 24);
          v17 = &v226;
          v18 = (char *)v233;
        }
      }
      v19 = &v18[24 * v234];
      v20 = *(_OWORD *)v17;
      *((_QWORD *)v19 + 2) = v17[2];
      *(_OWORD *)v19 = v20;
      v21 = ++v234;
      if (Value)
      {
        LODWORD(v226) = 3;
        v227 = ") and the number of map groups for lower (";
        v228 = 42;
        v22 = &v226;
        v23 = v233;
        if (v21 < v235)
        {
LABEL_25:
          v24 = &v23[24 * v234];
          v25 = *(_OWORD *)v22;
          *((_QWORD *)v24 + 2) = v22[2];
          *(_OWORD *)v24 = v25;
          ++v234;
          goto LABEL_26;
        }
        v190 = v21 + 1;
        v191 = (char *)v233 + 24 * v21 > (char *)&v226;
        if (v233 > &v226 || !v191)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v190, 24);
          v22 = &v226;
          v23 = v233;
          goto LABEL_25;
        }
LABEL_307:
        v210 = (char *)((char *)&v226 - v23);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v236, v190, 24);
        v23 = v233;
        v22 = (void **)&v210[(_QWORD)v233];
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  v218 = *(_QWORD *)(*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + 64);
  v26 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v218);
  if (Value)
  {
    LODWORD(v226) = 2;
    v227 = (const char *)v26;
    v27 = &v226;
    v28 = (char *)v233;
    if (v234 >= v235)
    {
      v180 = v234 + 1;
      if (v233 <= &v226 && (char *)v233 + 24 * v234 > (char *)&v226)
      {
        v203 = (char *)&v226 - (_BYTE *)v233;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v180, 24);
        v28 = (char *)v233;
        v27 = (void **)((char *)v233 + v203);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v180, 24);
        v27 = &v226;
        v28 = (char *)v233;
      }
    }
    v29 = &v28[24 * v234];
    v30 = *(_OWORD *)v27;
    *((_QWORD *)v29 + 2) = v27[2];
    *(_OWORD *)v29 = v30;
    v31 = ++v234;
    if (Value)
    {
      LODWORD(v226) = 3;
      v227 = ") and upper bound (";
      v228 = 19;
      v32 = &v226;
      v33 = (char *)v233;
      if (v31 >= v235)
      {
        v184 = v31 + 1;
        v185 = (char *)v233 + 24 * v31 > (char *)&v226;
        if (v233 <= &v226 && v185)
        {
          v207 = (char *)&v226 - (_BYTE *)v233;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v184, 24);
          v33 = (char *)v233;
          v32 = (void **)((char *)v233 + v207);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v184, 24);
          v32 = &v226;
          v33 = (char *)v233;
        }
      }
      v34 = &v33[24 * v234];
      v35 = *(_OWORD *)v32;
      *((_QWORD *)v34 + 2) = v32[2];
      *(_OWORD *)v34 = v35;
      ++v234;
    }
  }
  v36 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v36 = 0;
  v217 = *(_QWORD *)(v36 + 32);
  v37 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v217);
  if (Value)
  {
    LODWORD(v226) = 2;
    v227 = (const char *)v37;
    v38 = &v226;
    v39 = (char *)v233;
    if (v234 >= v235)
    {
      v181 = v234 + 1;
      if (v233 <= &v226 && (char *)v233 + 24 * v234 > (char *)&v226)
      {
        v204 = (char *)&v226 - (_BYTE *)v233;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v181, 24);
        v39 = (char *)v233;
        v38 = (void **)((char *)v233 + v204);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v181, 24);
        v38 = &v226;
        v39 = (char *)v233;
      }
    }
    v40 = &v39[24 * v234];
    v41 = *(_OWORD *)v38;
    *((_QWORD *)v40 + 2) = v38[2];
    *(_OWORD *)v40 = v41;
    v42 = ++v234;
    if (Value)
    {
      LODWORD(v226) = 3;
      v227 = "), and the number of steps (";
      v228 = 28;
      v43 = &v226;
      v44 = (char *)v233;
      if (v42 >= v235)
      {
        v186 = v42 + 1;
        v187 = (char *)v233 + 24 * v42 > (char *)&v226;
        if (v233 <= &v226 && v187)
        {
          v208 = (char *)&v226 - (_BYTE *)v233;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v186, 24);
          v44 = (char *)v233;
          v43 = (void **)((char *)v233 + v208);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v186, 24);
          v43 = &v226;
          v44 = (char *)v233;
        }
      }
      v45 = &v44[24 * v234];
      v46 = *(_OWORD *)v43;
      *((_QWORD *)v45 + 2) = v43[2];
      *(_OWORD *)v45 = v46;
      ++v234;
    }
  }
  mlir::affine::AffineParallelOp::getSteps(this, (uint64_t)&v226);
  if (Value)
  {
    LODWORD(v223) = 5;
    v224 = v227;
    v47 = &v223;
    v48 = (char *)v233;
    if (v234 >= v235)
    {
      v182 = v234 + 1;
      if (v233 <= &v223 && (char *)v233 + 24 * v234 > (char *)&v223)
      {
        v205 = (char *)&v223 - (_BYTE *)v233;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v182, 24);
        v48 = (char *)v233;
        v47 = (uint64_t *)((char *)v233 + v205);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v182, 24);
        v47 = &v223;
        v48 = (char *)v233;
      }
    }
    v49 = &v48[24 * v234];
    v50 = *(_OWORD *)v47;
    *((_QWORD *)v49 + 2) = v47[2];
    *(_OWORD *)v49 = v50;
    v51 = ++v234;
    if (Value)
    {
      LODWORD(v223) = 3;
      v224 = (unint64_t)") must all match";
      v225 = 16;
      v52 = &v223;
      v53 = (char *)v233;
      if (v51 >= v235)
      {
        v188 = v51 + 1;
        v189 = (char *)v233 + 24 * v51 > (char *)&v223;
        if (v233 <= &v223 && v189)
        {
          v209 = (char *)&v223 - (_BYTE *)v233;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v188, 24);
          v53 = (char *)v233;
          v52 = (uint64_t *)((char *)v233 + v209);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v188, 24);
          v52 = &v223;
          v53 = (char *)v233;
        }
      }
      v54 = &v53[24 * v234];
      v55 = *(_OWORD *)v52;
      *((_QWORD *)v54 + 2) = v52[2];
      *(_OWORD *)v54 = v55;
      ++v234;
    }
  }
  v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (v226 != &v228)
    free(v226);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  if (v241)
  {
    v57 = (_QWORD **)__p;
    if (__p)
    {
      v58 = v240;
      v59 = __p;
      if (v240 != __p)
      {
        do
          v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
        while (v58 != v57);
        v59 = __p;
      }
      v240 = v57;
      operator delete(v59);
    }
    v60 = v237;
    if (!v237)
      goto LABEL_248;
    v61 = v238;
    v62 = v237;
    if (v238 == v237)
    {
LABEL_247:
      v238 = v60;
      operator delete(v62);
LABEL_248:
      if (v233 != v236)
        free(v233);
      return v56;
    }
    do
    {
      v64 = (void *)*--v61;
      v63 = v64;
      *v61 = 0;
      if (v64)
        operator delete[](v63);
    }
    while (v61 != v60);
LABEL_246:
    v62 = v237;
    goto LABEL_247;
  }
  return v56;
}

uint64_t mlir::affine::AffineValueMap::canonicalize(mlir::affine::AffineValueMap *this)
{
  const void **v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AffineMap;
  unint64_t v14[2];
  unint64_t v15[2];
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v2 = (const void **)((char *)this + 96);
  v16 = v18;
  v17 = 0x400000000;
  if (&v16 != (void **)((char *)this + 96))
  {
    v3 = *((_DWORD *)this + 26);
    if (v3)
    {
      if (v3 < 5)
      {
        v5 = v18;
        v4 = *((_DWORD *)this + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, *((unsigned int *)this + 26), 8);
        v4 = *((_DWORD *)this + 26);
        if (!v4)
        {
LABEL_8:
          LODWORD(v17) = v3;
          goto LABEL_9;
        }
        v5 = v16;
      }
      memcpy(v5, *v2, 8 * v4);
      goto LABEL_8;
    }
  }
LABEL_9:
  AffineMap = mlir::affine::AffineValueMap::getAffineMap(this);
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&AffineMap, (uint64_t)&v16);
  v6 = mlir::affine::AffineValueMap::getAffineMap(this);
  v7 = AffineMap;
  if (AffineMap == v6)
  {
    v9 = v17;
    v8 = v16;
    if ((_DWORD)v17 == *((_DWORD *)this + 26))
    {
      if (!(_DWORD)v17)
      {
LABEL_16:
        v11 = 0;
        if (v16 == v18)
          return v11;
        goto LABEL_19;
      }
      v10 = 0;
      while (*(_QWORD *)((char *)v16 + v10) == *(_QWORD *)((char *)*v2 + v10))
      {
        v10 += 8;
        if (8 * v17 == v10)
          goto LABEL_16;
      }
    }
  }
  else
  {
    v8 = v16;
    v9 = v17;
  }
  mlir::ValueRange::ValueRange(v15, (uint64_t)v8, v9);
  mlir::ValueRange::ValueRange(v14, 0, 0);
  mlir::affine::AffineValueMap::reset((uint64_t)this, v7, v15[0], v15[1], v14[0], v14[1]);
  v11 = 1;
  v8 = v16;
  if (v16 != v18)
LABEL_19:
    free(v8);
  return v11;
}

uint64_t mlir::affine::AffineParallelOp::fold(uint64_t *a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t Operands;
  unint64_t v5;
  unint64_t AffineMap;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13[2];
  unint64_t v14[2];
  _BYTE v15[192];
  _BYTE v16[192];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = *a1;
  mlir::affine::AffineParallelOp::getLowerBoundsValueMap((mlir::affine::AffineParallelOp *)&v12, (uint64_t)v16);
  v1 = mlir::affine::AffineValueMap::canonicalize((mlir::affine::AffineValueMap *)v16);
  mlir::affine::AffineParallelOp::getUpperBoundsValueMap((mlir::affine::AffineParallelOp *)&v12, (uint64_t)v15);
  v2 = mlir::affine::AffineValueMap::canonicalize((mlir::affine::AffineValueMap *)v15);
  if (v1 | v2)
  {
    v3 = v2;
    if (v1)
    {
      Operands = mlir::affine::AffineValueMap::getOperands((mlir::affine::AffineValueMap *)v16);
      mlir::ValueRange::ValueRange(v14, Operands, v5);
      AffineMap = mlir::affine::AffineValueMap::getAffineMap((mlir::affine::AffineValueMap *)v16);
      mlir::affine::AffineParallelOp::setLowerBounds(&v12, v14[0], v14[1], AffineMap);
    }
    if (v3)
    {
      v7 = mlir::affine::AffineValueMap::getOperands((mlir::affine::AffineValueMap *)v15);
      mlir::ValueRange::ValueRange(v13, v7, v8);
      v9 = mlir::affine::AffineValueMap::getAffineMap((mlir::affine::AffineValueMap *)v15);
      mlir::affine::AffineParallelOp::setUpperBounds(&v12, v13[0], v13[1], v9);
    }
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  mlir::affine::AffineValueMap::~AffineValueMap((mlir::affine::AffineValueMap *)v15);
  mlir::affine::AffineValueMap::~AffineValueMap((mlir::affine::AffineValueMap *)v16);
  return v10;
}

void mlir::affine::AffineParallelOp::print(mlir::affine::AffineParallelOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int NumInputs;
  unint64_t v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  llvm::raw_ostream *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _WORD *v48;
  unint64_t *v49;
  llvm::raw_ostream *v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  llvm::raw_ostream *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  llvm::raw_ostream *v63;
  _WORD *v64;
  uint64_t v65;
  llvm::raw_ostream *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  llvm::raw_ostream *v72;
  _BYTE *v73;
  mlir::Operation *v74;
  mlir::ArrayAttr *p_Value;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  llvm::raw_ostream *v80;
  unint64_t v81;
  llvm::raw_ostream *v82;
  _WORD *v83;
  const char *v84;
  uint64_t v85;
  const char *Value;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  void *v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101[2];
  unint64_t v102[3];

  v102[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_WORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 1uLL)
  {
    *v5 = 10272;
    *((_QWORD *)v4 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v4, " (", 2uLL);
  }
  v6 = *(_QWORD *)(((*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                 + 8);
  if (v6)
    v7 = v6 - 8;
  else
    v7 = 0;
  v8 = *(_QWORD **)(v7 + 48);
  v9 = *(_QWORD *)(v7 + 56);
  v10 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = v9 - (_QWORD)v8;
  if (v11)
  {
    v12 = (llvm::raw_ostream *)v10;
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *v8);
    if (v11 != 8)
    {
      v44 = v11 >> 3;
      v45 = v8 + 1;
      v46 = 8 * v44 - 8;
      do
      {
        v48 = (_WORD *)*((_QWORD *)v12 + 4);
        if (*((_QWORD *)v12 + 3) - (_QWORD)v48 > 1uLL)
        {
          *v48 = 8236;
          *((_QWORD *)v12 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v12, ", ", 2uLL);
        }
        v47 = *v45++;
        (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v47);
        v46 -= 8;
      }
      while (v46);
    }
  }
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v14 = *((_QWORD *)v13 + 4);
  if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 4)
  {
    *(_BYTE *)(v14 + 4) = 40;
    *(_DWORD *)v14 = 540876841;
    *((_QWORD *)v13 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v13, ") = (", 5uLL);
  }
  v15 = *(_QWORD *)this;
  v16 = *(unsigned int *)(*(_QWORD *)this + 44);
  v17 = *(_QWORD *)this + 16 * ((v16 >> 23) & 1);
  v20 = *(_QWORD *)(v17 + 64);
  v18 = v17 + 64;
  v19 = v20;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v18 = 0;
  v21 = *(_QWORD *)(v18 + 8);
  if ((v16 & 0x800000) != 0)
  {
    v22 = *(_QWORD *)(v15 + 72);
    v23 = *(unsigned int *)(v15 + 68);
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
  Value = *(const char **)(v18 + 8);
  Value = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  if (v23 >= NumInputs)
    v25 = NumInputs;
  else
    v25 = v23;
  mlir::ValueRange::ValueRange(v102, v22, v25);
  printMinMaxBound((uint64_t)a2, v21, v19, v102[0], v102[1], "max", 3uLL);
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = *((_QWORD *)v26 + 4);
  if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 5)
  {
    *(_WORD *)(v27 + 4) = 10272;
    *(_DWORD *)v27 = 1869881385;
    *((_QWORD *)v26 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v26, ") to (", 6uLL);
  }
  v28 = *(_QWORD *)this;
  v29 = *(unsigned int *)(*(_QWORD *)this + 44);
  v30 = (_QWORD *)(*(_QWORD *)this + 16 * ((v29 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v30 = 0;
  v32 = v30[4];
  v31 = v30[5];
  if ((v29 & 0x800000) != 0)
  {
    v33 = *(_QWORD *)(v28 + 72);
    v34 = *(unsigned int *)(v28 + 68);
  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  Value = (const char *)v30[1];
  Value = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  v35 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  mlir::ValueRange::ValueRange(v101, v33 + 32 * v35, v34 - v35);
  printMinMaxBound((uint64_t)a2, v31, v32, v101[0], v101[1], "min", 3uLL);
  v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v37 = (_BYTE *)*((_QWORD *)v36 + 4);
  if ((unint64_t)v37 >= *((_QWORD *)v36 + 3))
  {
    llvm::raw_ostream::write(v36, 41);
    mlir::affine::AffineParallelOp::getSteps(this, (uint64_t)&v98);
    v38 = v99;
    if (!v99)
      goto LABEL_46;
  }
  else
  {
    *((_QWORD *)v36 + 4) = v37 + 1;
    *v37 = 41;
    mlir::affine::AffineParallelOp::getSteps(this, (uint64_t)&v98);
    v38 = v99;
    if (!v99)
      goto LABEL_46;
  }
  v39 = v98;
  v40 = 8 * v38;
  while (*v39 == 1)
  {
    ++v39;
    v40 -= 8;
    if (!v40)
      goto LABEL_46;
  }
  v41 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v42 = (_DWORD *)*((_QWORD *)v41 + 4);
  if (*((_QWORD *)v41 + 3) - (_QWORD)v42 <= 6uLL)
  {
    llvm::raw_ostream::write(v41, " step (", 7uLL);
    v43 = v99;
    if (!v99)
      goto LABEL_44;
LABEL_43:
    v49 = (unint64_t *)v98;
    v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    llvm::raw_ostream::operator<<(v50, *v49);
    if ((_DWORD)v43 != 1)
    {
      v78 = v49 + 1;
      v79 = 8 * v43 - 8;
      do
      {
        v82 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v83 = (_WORD *)*((_QWORD *)v82 + 4);
        if (*((_QWORD *)v82 + 3) - (_QWORD)v83 > 1uLL)
        {
          *v83 = 8236;
          *((_QWORD *)v82 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v82, ", ", 2uLL);
        }
        v80 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v81 = *v78++;
        llvm::raw_ostream::operator<<(v80, v81);
        v79 -= 8;
      }
      while (v79);
    }
    goto LABEL_44;
  }
  *(_DWORD *)((char *)v42 + 3) = 673214565;
  *v42 = 1702130464;
  *((_QWORD *)v41 + 4) += 7;
  v43 = v99;
  if (v99)
    goto LABEL_43;
LABEL_44:
  v51 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v52 = (_BYTE *)*((_QWORD *)v51 + 4);
  if ((unint64_t)v52 >= *((_QWORD *)v51 + 3))
  {
    llvm::raw_ostream::write(v51, 41);
    if (!*(_DWORD *)(*(_QWORD *)this + 36))
      goto LABEL_67;
    goto LABEL_47;
  }
  *((_QWORD *)v51 + 4) = v52 + 1;
  *v52 = 41;
LABEL_46:
  if (!*(_DWORD *)(*(_QWORD *)this + 36))
    goto LABEL_67;
LABEL_47:
  v53 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v54 = *((_QWORD *)v53 + 4);
  if ((unint64_t)(*((_QWORD *)v53 + 3) - v54) > 8)
  {
    *(_BYTE *)(v54 + 8) = 40;
    *(_QWORD *)v54 = *(_QWORD *)" reduce (";
    *((_QWORD *)v53 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v53, " reduce (", 9uLL);
  }
  v55 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v55 = 0;
  v84 = *(const char **)(v55 + 16);
  v56 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v84);
  v57 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v84);
  v59 = (uint64_t *)(v57 + 8 * v58);
  Value = (const char *)a2;
  if (v59 != v56)
  {
    v61 = *v56;
    v60 = v56 + 1;
    mlir::affine::AffineParallelOp::print(mlir::OpAsmPrinter &)::$_1::operator()<mlir::Attribute const>((uint64_t *)&Value, v61);
    while (v60 != v59)
    {
      while (1)
      {
        v63 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v64 = (_WORD *)*((_QWORD *)v63 + 4);
        if (*((_QWORD *)v63 + 3) - (_QWORD)v64 <= 1uLL)
          break;
        *v64 = 8236;
        *((_QWORD *)v63 + 4) += 2;
        v62 = *v60++;
        mlir::affine::AffineParallelOp::print(mlir::OpAsmPrinter &)::$_1::operator()<mlir::Attribute const>((uint64_t *)&Value, v62);
        if (v60 == v59)
          goto LABEL_58;
      }
      llvm::raw_ostream::write(v63, ", ", 2uLL);
      v65 = *v60++;
      mlir::affine::AffineParallelOp::print(mlir::OpAsmPrinter &)::$_1::operator()<mlir::Attribute const>((uint64_t *)&Value, v65);
    }
  }
LABEL_58:
  v66 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v67 = *((_QWORD *)v66 + 4);
  if ((unint64_t)(*((_QWORD *)v66 + 3) - v67) > 5)
  {
    *(_WORD *)(v67 + 4) = 10272;
    *(_DWORD *)v67 = 1043144745;
    *((_QWORD *)v66 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v66, ") -> (", 6uLL);
  }
  v68 = *(unsigned int *)(*(_QWORD *)this + 36);
  v69 = (const char *)(*(_QWORD *)this - 16);
  if (!(_DWORD)v68)
    v69 = 0;
  v84 = v69;
  v85 = v68;
  mlir::OperandRange::getTypes((uint64_t *)&v84, (uint64_t *)&Value);
  v84 = ", ";
  v85 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)Value, v87, (uint64_t)v88, v89, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v84);
  v70 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v71 = (_BYTE *)*((_QWORD *)v70 + 4);
  if (*((_BYTE **)v70 + 3) == v71)
  {
    llvm::raw_ostream::write(v70, ")", 1uLL);
  }
  else
  {
    *v71 = 41;
    ++*((_QWORD *)v70 + 4);
  }
LABEL_67:
  v72 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v73 = (_BYTE *)*((_QWORD *)v72 + 4);
  if ((unint64_t)v73 >= *((_QWORD *)v72 + 3))
  {
    llvm::raw_ostream::write(v72, 32);
  }
  else
  {
    *((_QWORD *)v72 + 4) = v73 + 1;
    *v73 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)a2 + 224))(a2, ((*(_QWORD *)this+ 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(*(_QWORD *)this + 40), 0, *(_DWORD *)(*(_QWORD *)this + 36) != 0, 0);
  v74 = *(mlir::Operation **)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47))
  {
    Value = (const char *)mlir::Operation::getAttrDictionary(v74);
    p_Value = (mlir::ArrayAttr *)&Value;
  }
  else
  {
    p_Value = (mlir::Operation *)((char *)v74 + 56);
  }
  v76 = mlir::ArrayAttr::getValue(p_Value);
  Value = "reductions";
  v87 = 10;
  v88 = "lowerBoundsMap";
  v89 = 14;
  v90 = "lowerBoundsGroups";
  v91 = 17;
  v92 = "upperBoundsMap";
  v93 = 14;
  v94 = "upperBoundsGroups";
  v95 = 17;
  v96 = "steps";
  v97 = 5;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(_QWORD *)a2 + 192))(a2, v76, v77, &Value, 6);
  if (v98 != &v100)
    free(v98);
}

void printMinMaxBound(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, const void *a6, size_t a7)
{
  unint64_t v8;
  unsigned int NumDims;
  unint64_t v13;
  unint64_t v14;
  uint64_t NumElements;
  unsigned int v16;
  BOOL v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  unsigned int *p_p;
  unsigned int v21;
  uint64_t Result;
  llvm::raw_ostream *v23;
  void *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  unint64_t SliceMap;
  uint64_t v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;
  void *__p;
  unsigned int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int *Value;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v8 = a5;
  v45 = *MEMORY[0x1E0C80C00];
  v41 = a3;
  v42 = a2;
  v43 = a4;
  v44 = a5;
  Value = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v42);
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  v13 = v8 - NumDims;
  if (v8 >= NumDims)
    v8 = NumDims;
  if (NumDims)
    v14 = mlir::ValueRange::offset_base(&v43, NumDims);
  else
    v14 = a4;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v37, a3, 0);
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v41);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v34, a3, NumElements);
  v16 = 0;
  while (1)
  {
    v17 = v37 == v34 && v38 == v35;
    if (v17 && v39 == v36)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v37, (llvm::APInt *)&__p);
    if (v16)
    {
      v18 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v19 = (_WORD *)*((_QWORD *)v18 + 4);
      if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
      {
        *v19 = 8236;
        *((_QWORD *)v18 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v18, ", ", 2uLL);
      }
    }
    if (v33 >= 0x41)
      p_p = (unsigned int *)__p;
    else
      p_p = (unsigned int *)&__p;
    v21 = *p_p;
    if (*p_p == 1)
    {
      Result = mlir::AffineMap::getResult((mlir::AffineMap *)&Value, v16);
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1 + 248))(a1, Result, a4, v8, v14, v13);
      if (v33 < 0x41)
        goto LABEL_7;
    }
    else
    {
      v23 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v24 = (void *)*((_QWORD *)v23 + 4);
      if (a7 <= *((_QWORD *)v23 + 3) - (_QWORD)v24)
      {
        if (a7)
        {
          memcpy(v24, a6, a7);
          *((_QWORD *)v23 + 4) += a7;
        }
      }
      else
      {
        llvm::raw_ostream::write(v23, (const char *)a6, a7);
      }
      v25 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v26 = (_BYTE *)*((_QWORD *)v25 + 4);
      if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
      {
        llvm::raw_ostream::write(v25, 40);
      }
      else
      {
        *((_QWORD *)v25 + 4) = v26 + 1;
        *v26 = 40;
      }
      SliceMap = mlir::AffineMap::getSliceMap(&Value, v16, v21);
      v28 = mlir::AffineMapAttr::get(SliceMap);
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a1 + 240))(a1, v28, v43, v44);
      v29 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v30 = (_BYTE *)*((_QWORD *)v29 + 4);
      if ((unint64_t)v30 >= *((_QWORD *)v29 + 3))
      {
        llvm::raw_ostream::write(v29, 41);
        if (v33 < 0x41)
          goto LABEL_7;
      }
      else
      {
        *((_QWORD *)v29 + 4) = v30 + 1;
        *v30 = 41;
        if (v33 < 0x41)
          goto LABEL_7;
      }
    }
    if (__p)
      operator delete[](__p);
LABEL_7:
    v16 += v21;
    ++v39;
  }
}

uint64_t mlir::affine::AffineParallelOp::parse(mlir::AsmParser *a1, mlir::Attribute *a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  uint64_t Results;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t LHS;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t I64ArrayAttr;
  void **v19;
  uint64_t ArrayAttr;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  const char *v39;
  __int16 v40;
  void *v41;
  uint64_t Value;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int16 v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[4];
  void *v58[2];
  _BYTE v59[128];
  void *v60[2];
  _QWORD v61[9];
  void *v62;
  uint64_t v63;
  _QWORD v64[34];

  v64[32] = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  v62 = v64;
  v63 = 0x400000000;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 736))(a1, &v62, 1, 0, 0)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 136))(a1)|| !parseAffineMapWithMinMax(a1, a2, 1)|| (v48 = 257, !(*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "to", 2, &v44))|| !parseAffineMapWithMinMax(a1, a2, 0))
  {
    v16 = 0;
    goto LABEL_19;
  }
  v43 = 0;
  v60[0] = v61;
  v60[1] = (void *)0x400000000;
  v61[8] = 4;
  v58[0] = v59;
  v58[1] = (void *)0x400000000;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "step", 4))
  {
    v55 = 1;
    llvm::SmallVector<long long,4u>::SmallVector((uint64_t)&v44, v63, (unint64_t *)&v55);
    I64ArrayAttr = mlir::Builder::getI64ArrayAttr((uint64_t *)v4, (void **)v44, v45);
    mlir::OperationState::addAttribute(a2, (uint64_t)"steps", 5, I64ArrayAttr);
    v19 = (void **)v44;
    if (v44 == &v46)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **, uint64_t *, const char *, uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 704))(a1, v58, &v43, "steps", 5, v60, 1))
  {
    v16 = 0;
    goto LABEL_42;
  }
  v55 = (uint64_t)v57;
  v56 = 0x400000000;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v43);
  Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  if (!v8)
  {
    v15 = v56;
LABEL_61:
    v38 = mlir::Builder::getI64ArrayAttr((uint64_t *)v4, (void **)v55, v15);
    mlir::OperationState::addAttribute(a2, (uint64_t)"steps", 5, v38);
    v19 = (void **)v55;
    if ((_QWORD *)v55 == v57)
    {
LABEL_24:
      v44 = &v46;
      v45 = 0x400000000;
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "reduce", 6))
      {
        if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 264))(a1))
          goto LABEL_38;
        v55 = (uint64_t)a1;
        v56 = (uint64_t)v4;
        v57[0] = &v44;
        if (!(*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD, uint64_t (*)(uint64_t *), uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::affine::AffineParallelOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, &v55, 0, 0)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 280))(a1))
        {
          goto LABEL_38;
        }
      }
      ArrayAttr = mlir::Builder::getArrayAttr(v4, (uint64_t)v44, v45);
      mlir::OperationState::addAttribute(a2, (uint64_t)"reductions", 10, ArrayAttr);
      if (!(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(_QWORD *)a1 + 536))(a1, (uint64_t)a2 + 64))goto LABEL_38;
      v21 = (_QWORD *)mlir::OperationState::addRegion(a2);
      v22 = (char *)v62;
      v23 = v63;
      if ((_DWORD)v63)
      {
        v24 = (char *)v62;
        if (((v63 - 1) & 0x3FFFFFFFFFFFFFFLL) == 0)
          goto LABEL_71;
        v25 = ((v63 - 1) & 0x3FFFFFFFFFFFFFFLL) + 1;
        v24 = (char *)v62 + 64 * (v25 & 0x7FFFFFFFFFFFFFELL);
        v26 = (uint64_t *)((char *)v62 + 96);
        v27 = v25 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          *(v26 - 8) = IndexType;
          *v26 = IndexType;
          v26 += 16;
          v27 -= 2;
        }
        while (v27);
        if (v25 != (v25 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_71:
          do
          {
            *((_QWORD *)v24 + 4) = IndexType;
            v24 += 64;
          }
          while (v24 != &v22[64 * v23]);
        }
      }
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD *, char *))(*(_QWORD *)a1 + 744))(a1, v21, v22)&& (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112))
      {
        mlir::impl::ensureRegionTerminator(v21, v4, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineParallelOp>::buildTerminator);
        v16 = 1;
      }
      else
      {
LABEL_38:
        v16 = 0;
      }
      v28 = (void **)v44;
      if (v44 == &v46)
        goto LABEL_42;
      goto LABEL_40;
    }
LABEL_23:
    free(v19);
    goto LABEL_24;
  }
  v9 = (void **)Results;
  v10 = 8 * v8;
  while (1)
  {
    v11 = *v9;
    v44 = *v9;
    v12 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v44) == 5 ? (uint64_t)v11 : 0;
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v44, v12);
    v41 = v44;
    if (!v44)
      break;
    LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v41);
    v14 = v56;
    if (v56 >= (unint64_t)HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 8);
      v14 = v56;
    }
    *(_QWORD *)(v55 + 8 * v14) = LHS;
    v15 = v56 + 1;
    LODWORD(v56) = v56 + 1;
    ++v9;
    v10 -= 8;
    if (!v10)
      goto LABEL_61;
  }
  v29 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 16))(a1);
  v39 = "steps must be constant integers";
  v40 = 259;
  (*(void (**)(void **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v44, a1, v29, &v39);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v53;
      v32 = __p;
      if (v53 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v53 = v30;
      operator delete(v32);
    }
    v33 = v50;
    if (v50)
    {
      v34 = v51;
      v35 = v50;
      if (v51 != v50)
      {
        do
        {
          v37 = (void *)*--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            operator delete[](v36);
        }
        while (v34 != v33);
        v35 = v50;
      }
      v51 = v33;
      operator delete(v35);
    }
    if (v47 != &v49)
      free(v47);
  }
  v28 = (void **)v55;
  if ((_QWORD *)v55 == v57)
    goto LABEL_42;
LABEL_40:
  free(v28);
LABEL_42:
  if (v58[0] != v59)
    free(v58[0]);
  if (v60[0] != v61)
    free(v60[0]);
LABEL_19:
  if (v62 != v64)
    free(v62);
  return v16;
}

uint64_t parseAffineMapWithMinMax(mlir::AsmParser *a1, mlir::Attribute *a2, int a3)
{
  const char *v5;
  const char *v6;
  mlir::AffineMap **v7;
  mlir::MLIRContext *v8;
  unint64_t EmptyAffineMap;
  uint64_t v10;
  mlir::StringAttr *Context;
  uint64_t v12;
  uint64_t *v13;
  uint64_t I32TensorAttr;
  mlir::StringAttr *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  void **v44;
  _QWORD *v45;
  mlir::Attribute *v46;
  void **v47;
  uint64_t **v48;
  void **v49;
  void **v50;
  _QWORD v51[2];
  int v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[48];
  void *v56;
  uint64_t v57;
  _BYTE v58[48];
  void *v59;
  uint64_t v60;
  _BYTE v61[48];
  void *__src;
  uint64_t v63;
  _BYTE v64[48];
  void *v65[2];
  _BYTE v66[32];
  void *v67;
  uint64_t v68;
  _BYTE v69[48];
  void *v70;
  uint64_t v71;
  _BYTE v72[48];
  uint64_t *v73;
  uint64_t v74;
  _BYTE v75[48];
  char *v76;
  uint64_t v77;
  _QWORD v78[8];

  v78[6] = *MEMORY[0x1E0C80C00];
  v52 = a3;
  v51[0] = "__pseudo_bound_map";
  v51[1] = 18;
  if (a3)
    v5 = "lowerBoundsMap";
  else
    v5 = "upperBoundsMap";
  if (a3)
    v6 = "lowerBoundsGroups";
  else
    v6 = "upperBoundsGroups";
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 264))(a1))
    return 0;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 288))(a1))
  {
    v7 = (mlir::AffineMap **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
    EmptyAffineMap = mlir::Builder::getEmptyAffineMap(v7, v8);
    v10 = mlir::AffineMapAttr::get(EmptyAffineMap);
    Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
    LOWORD(v46) = 261;
    v42 = (void *)v5;
    v43 = 14;
    v12 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v42);
    mlir::NamedAttribute::NamedAttribute(&v76, v12, v10);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v76, v77);
    v13 = (uint64_t *)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
    I32TensorAttr = mlir::Builder::getI32TensorAttr(v13, 0, 0);
    v15 = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
    LOWORD(v46) = 261;
    v42 = (void *)v6;
    v43 = 17;
    v16 = mlir::StringAttr::get(v15, (mlir::MLIRContext *)&v42);
    mlir::NamedAttribute::NamedAttribute(&v76, v16, I32TensorAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v76, v77);
    return 1;
  }
  v76 = (char *)v78;
  v77 = 0x600000000;
  v73 = (uint64_t *)v75;
  v74 = 0x100000000;
  v70 = v72;
  v71 = 0x100000000;
  v67 = v69;
  v68 = 0xC00000000;
  v65[0] = v66;
  v65[1] = (void *)0x100000000;
  v42 = a1;
  v43 = (uint64_t)&v52;
  v44 = v65;
  v45 = v51;
  v46 = a2;
  v47 = (void **)&v76;
  v48 = &v73;
  v49 = &v70;
  v50 = &v67;
  {
    v40 = (uint64_t)v6;
    if ((_DWORD)v77)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 8 * v77;
      v22 = 1;
      do
      {
        v23 = v73[v22];
        v24 = *(_DWORD *)((char *)v70 + v22 * 8);
        __src = (void *)mlir::AffineExpr::shiftDims((mlir::MLIRContext ***)&v76[v18], v23, v19, 0);
        v25 = mlir::AffineExpr::shiftSymbols((mlir::MLIRContext ***)&__src, v24, v20, 0);
        *(_QWORD *)&v76[v18] = v25;
        v19 += v23;
        v20 += v24;
        v18 += 8;
        v22 += 6;
      }
      while (v21 != v18);
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    __src = v64;
    v63 = 0x600000000;
    v59 = v61;
    v60 = 0x600000000;
    v56 = v58;
    v57 = 0x600000000;
    v53 = v55;
    v54 = 0x600000000;
    if (deduplicateAndResolveOperands(a1, v73, v74, (uint64_t)&__src, (uint64_t)&v56, 6))
    {
      if (deduplicateAndResolveOperands(a1, (uint64_t *)v70, v71, (uint64_t)&v59, (uint64_t)&v53, 7))
      {
        llvm::SmallVectorImpl<mlir::Value>::append<mlir::Value*,void>((uint64_t)a2 + 16, __src, (_BYTE *)__src + 8 * v63);
        llvm::SmallVectorImpl<mlir::Value>::append<mlir::Value*,void>((uint64_t)a2 + 16, v59, (_BYTE *)v59 + 8 * v60);
        v39 = (uint64_t *)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
        v26 = (uint64_t)v76;
        v27 = v77;
        v28 = (_QWORD *)mlir::AsmParser::getContext(a1);
        v41 = mlir::AffineMap::get(v19, v20, v26, v27, v28);
        v41 = mlir::AffineMap::replaceDimsAndSymbols((uint64_t *)&v41, (uint64_t)v56, v57, (uint64_t)v53, v54, v63, v60);
        v29 = mlir::AffineMapAttr::get(v41);
        mlir::OperationState::addAttribute(a2, (uint64_t)v5, 14, v29);
        v30 = mlir::Builder::getI32TensorAttr(v39, (uint64_t)v67, v68);
        mlir::OperationState::addAttribute(a2, v40, 17, v30);
        v17 = 1;
        v31 = v53;
        if (v53 == v55)
        {
LABEL_23:
          if (v56 != v58)
            free(v56);
          if (v59 != v61)
            free(v59);
          if (__src != v64)
            free(__src);
          goto LABEL_29;
        }
      }
      else
      {
        v17 = 0;
        v31 = v53;
        if (v53 == v55)
          goto LABEL_23;
      }
    }
    else
    {
      v17 = 0;
      v31 = v53;
      if (v53 == v55)
        goto LABEL_23;
    }
    free(v31);
    goto LABEL_23;
  }
  v17 = 0;
LABEL_29:
  if (v65[0] != v66)
    free(v65[0]);
  if (v67 != v69)
    free(v67);
  v32 = (char *)v70;
  if ((_DWORD)v71)
  {
    v33 = 48 * v71;
    do
    {
      v34 = *(char **)&v32[v33 - 48];
      if (&v32[v33 - 32] != v34)
        free(v34);
      v33 -= 48;
    }
    while (v33);
    v32 = (char *)v70;
  }
  if (v32 != v72)
    free(v32);
  v35 = v73;
  if ((_DWORD)v74)
  {
    v36 = 6 * v74;
    do
    {
      v37 = (uint64_t *)v35[v36 - 6];
      if (&v35[v36 - 4] != v37)
        free(v37);
      v36 -= 6;
    }
    while (v36 * 8);
    v35 = v73;
  }
  if (v35 != (uint64_t *)v75)
    free(v35);
  if (v76 != (char *)v78)
    free(v76);
  return v17;
}

uint64_t llvm::SmallVector<long long,4u>::SmallVector(uint64_t result, unint64_t a2, unint64_t *a3)
{
  _DWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int64x2_t v9;
  int64x2_t *v10;
  unint64_t v11;

  v4 = (_DWORD *)result;
  v5 = (unint64_t *)(result + 16);
  *(_QWORD *)result = result + 16;
  *(_DWORD *)(result + 12) = 4;
  v6 = *a3;
  if (a2 >= 5)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, v5, a2, 8);
    v7 = (unint64_t *)(*(_QWORD *)v4 + 8 * (a2 & 0xFFFFFFFFFFFFFFFCLL));
    v8 = a2 & 3;
    v9 = vdupq_n_s64(v6);
    v10 = (int64x2_t *)(*(_QWORD *)v4 + 16);
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v10[-1] = v9;
      *v10 = v9;
      v10 += 2;
      v11 -= 4;
    }
    while (v11);
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != a2)
    {
      do
      {
        *v7++ = v6;
        --v8;
      }
      while (v8);
    }
    goto LABEL_6;
  }
  if (!a2
    || (*v5 = v6, a2 == 1)
    || (*(_QWORD *)(result + 24) = v6, a2 == 2)
    || (*(_QWORD *)(result + 32) = v6, a2 == 3))
  {
LABEL_6:
    v4[2] = a2;
    return (uint64_t)v4;
  }
  *(_QWORD *)(result + 40) = v6;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t mlir::affine::AffineYieldOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t ParentOp;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  int *v40;
  char *v41;
  char *v42;
  __int128 v43;
  _QWORD **v44;
  _QWORD **v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  const void **v57[4];
  __int16 v58;
  int v59;
  const char *v60;
  uint64_t v61;
  _QWORD v62[3];
  void *v63;
  unsigned int v64;
  unsigned int v65;
  _BYTE v66[96];
  void *v67;
  _QWORD *v68;
  void *__p;
  _QWORD **v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  ParentOp = (*this)[2];
  if (ParentOp)
  {
    ParentOp = mlir::Block::getParentOp((mlir::Block *)ParentOp);
    v2 = *this;
  }
  v4 = *(unsigned int *)(ParentOp + 36);
  if ((_DWORD)v4)
    v5 = ParentOp - 16;
  else
    v5 = 0;
  v6 = *((_DWORD *)v2 + 11);
  if ((v6 & 0x800000) != 0)
  {
    v7 = *((unsigned int *)v2 + 17);
    v8 = v2[9];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = *(void **)(*(_QWORD *)(ParentOp + 48) + 16);
  if (v9 != &mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id
    && v9 != &mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id
    && v9 != &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
  {
    v58 = 257;
    mlir::OpState::emitOpError(this, v57, (uint64_t)v62);
    if (v62[0])
    {
      v59 = 3;
      v60 = "only terminates affine.if/for/parallel regions";
      v61 = 46;
      v15 = &v59;
      v16 = (char *)v63;
      if (v64 >= v65)
      {
        v52 = v64 + 1;
        if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
        {
          v55 = (char *)&v59 - (_BYTE *)v63;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v52, 24);
          v16 = (char *)v63;
          v15 = (int *)((char *)v63 + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v52, 24);
          v15 = &v59;
          v16 = (char *)v63;
        }
      }
      v17 = &v16[24 * v64];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v17 = v18;
      ++v64;
    }
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v62);
    if (v62[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
    if (!v71)
      return v14;
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v70;
      v21 = __p;
      if (v70 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v70 = v19;
      operator delete(v21);
    }
    v22 = v67;
    if (!v67)
      goto LABEL_83;
    v23 = v68;
    v24 = v67;
    if (v68 == v67)
    {
LABEL_82:
      v68 = v22;
      operator delete(v24);
LABEL_83:
      v39 = v63;
      if (v63 != v66)
LABEL_84:
        free(v39);
      return v14;
    }
    do
    {
      v26 = (void *)*--v23;
      v25 = v26;
      *v23 = 0;
      if (v26)
        operator delete[](v25);
    }
    while (v23 != v22);
LABEL_81:
    v24 = v67;
    goto LABEL_82;
  }
  if ((v6 & 0x800000) == 0)
  {
    if (!(_DWORD)v4)
      goto LABEL_18;
LABEL_64:
    v58 = 257;
    mlir::OpState::emitOpError(this, v57, (uint64_t)v62);
    if (v62[0])
    {
      v59 = 3;
      v60 = "parent of yield must have same number of results as the yield operands";
      v61 = 70;
      v40 = &v59;
      v41 = (char *)v63;
      if (v64 >= v65)
      {
        v51 = v64 + 1;
        if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
        {
          v54 = (char *)&v59 - (_BYTE *)v63;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v51, 24);
          v41 = (char *)v63;
          v40 = (int *)((char *)v63 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v51, 24);
          v40 = &v59;
          v41 = (char *)v63;
        }
      }
      v42 = &v41[24 * v64];
      v43 = *(_OWORD *)v40;
      *((_QWORD *)v42 + 2) = *((_QWORD *)v40 + 2);
      *(_OWORD *)v42 = v43;
      ++v64;
    }
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v62);
    if (v62[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
    if (!v71)
      return v14;
    v44 = (_QWORD **)__p;
    if (__p)
    {
      v45 = v70;
      v46 = __p;
      if (v70 != __p)
      {
        do
          v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        v46 = __p;
      }
      v70 = v44;
      operator delete(v46);
    }
    v22 = v67;
    if (!v67)
      goto LABEL_83;
    v47 = v68;
    v24 = v67;
    if (v68 == v67)
      goto LABEL_82;
    do
    {
      v49 = (void *)*--v47;
      v48 = v49;
      *v47 = 0;
      if (v49)
        operator delete[](v48);
    }
    while (v47 != v22);
    goto LABEL_81;
  }
  if ((_DWORD)v4 != *((_DWORD *)v2 + 17))
    goto LABEL_64;
LABEL_18:
  if ((_DWORD)v4)
  {
    v12 = 0;
    v13 = v8 + 24;
    while (v7 != v12)
    {
      if ((*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v12) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v58 = 257;
        mlir::OpState::emitOpError(this, v57, (uint64_t)v62);
        if (v62[0])
        {
          v59 = 3;
          v60 = "types mismatch between yield op and its parent";
          v61 = 46;
          v27 = &v59;
          v28 = (char *)v63;
          if (v64 >= v65)
          {
            v53 = v64 + 1;
            if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
            {
              v56 = (char *)&v59 - (_BYTE *)v63;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v53, 24);
              v28 = (char *)v63;
              v27 = (int *)((char *)v63 + v56);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v53, 24);
              v27 = &v59;
              v28 = (char *)v63;
            }
          }
          v29 = &v28[24 * v64];
          v30 = *(_OWORD *)v27;
          *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
          *(_OWORD *)v29 = v30;
          ++v64;
        }
        v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v62);
        if (v62[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
        if (v71)
        {
          v31 = (_QWORD **)__p;
          if (__p)
          {
            v32 = v70;
            v33 = __p;
            if (v70 != __p)
            {
              do
                v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
              while (v32 != v31);
              v33 = __p;
            }
            v70 = v31;
            operator delete(v33);
          }
          v34 = v67;
          if (v67)
          {
            v35 = v68;
            v36 = v67;
            if (v68 != v67)
            {
              do
              {
                v38 = (void *)*--v35;
                v37 = v38;
                *v35 = 0;
                if (v38)
                  operator delete[](v37);
              }
              while (v35 != v34);
              v36 = v67;
            }
            v68 = v34;
            operator delete(v36);
          }
          v39 = v63;
          if (v63 != v66)
            goto LABEL_84;
        }
        return v14;
      }
      ++v12;
      v13 += 32;
      if (v4 == v12)
        return 1;
    }
  }
  return 1;
}

void mlir::affine::AffineVectorLoadOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  mlir::StringAttr *Context;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19[2];

  v16 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  mlir::OperationState::addOperands(a2, a6, a7);
  v12 = mlir::AffineMapAttr::get(a5);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v18 = 261;
  v17[0] = "map";
  v17[1] = 3;
  v14 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v17);
  mlir::NamedAttribute::NamedAttribute(v19, v14, v12);
  mlir::NamedAttrList::push_back(a2 + 112, v19[0], v19[1]);
  v15 = *(unsigned int *)(a2 + 72);
  if (v15 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v15) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::affine::AffineVectorLoadOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.vector_load", 18, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_1E0E16528;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>]";
  v39 = 123;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

BOOL mlir::affine::AffineVectorLoadOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  char *v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v11;
  _QWORD v12[4];
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  v13 = 0;
  v14 = 0;
  memset(v12, 0, 24);
  v11 = 0;
  v15 = v17;
  v16 = 0x100000000;
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v12, 1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, &v15, &v11, "map", 3, a2 + 112, 2)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)&& mlir::AsmParser::parseColonType<mlir::MemRefType>(a1, &v14)&& (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)&& mlir::AsmParser::parseType<mlir::VectorType>(a1, &v13)&& (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v12, v14, a2 + 16))
  {
    if (!(_DWORD)v16)
    {
LABEL_12:
      v9 = mlir::AsmParser::addTypeToList(a1, v13, a2 + 64) != 0;
      goto LABEL_14;
    }
    v7 = (char *)v15;
    v8 = 32 * v16;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v7, IndexType, a2 + 16))
    {
      v7 += 32;
      v8 -= 32;
      if (!v8)
        goto LABEL_12;
    }
  }
  v9 = 0;
LABEL_14:
  if (v15 != v17)
    free(v15);
  return v9;
}

uint64_t mlir::AsmParser::parseType<mlir::VectorType>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD **v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v18))
    return 0;
  v5 = v18;
  if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v16 = "invalid kind of type specified";
  v17 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v19, a1, v4, &v16);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  if (v26)
  {
    v8 = (_QWORD **)__p;
    if (__p)
    {
      v9 = v25;
      v10 = __p;
      if (v25 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v25 = v8;
      operator delete(v10);
    }
    v11 = v22;
    if (v22)
    {
      v12 = v23;
      v13 = v22;
      if (v23 != v22)
      {
        do
        {
          v15 = (void *)*--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            operator delete[](v14);
        }
        while (v12 != v11);
        v13 = v22;
      }
      v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21)
      free(v20);
  }
  return v6;
}

uint64_t mlir::affine::AffineVectorLoadOp::print(mlir::affine::AffineVectorLoadOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t InherentAttr;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  mlir::Operation *v17;
  mlir::ArrayAttr *v18;
  uint64_t Value;
  uint64_t v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  _WORD *v24;
  _QWORD v26[2];
  unint64_t v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
    v8 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_9:
      InherentAttr = mlir::DictionaryAttr::get(v8 + 56, "map", 3uLL);
      goto LABEL_10;
    }
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 91;
    v8 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_9;
  }
  InherentAttr = mlir::Operation::getInherentAttr(v8, (uint64_t)"map", 3);
  if (!v10)
    goto LABEL_9;
LABEL_10:
  v11 = InherentAttr;
  if (InherentAttr
    && *(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    v12 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    {
      v13 = *(_QWORD *)(v12 + 72);
      v14 = *(unsigned int *)(v12 + 68) - 1;
    }
    else
    {
      v13 = 0;
      v14 = -1;
    }
    mlir::ValueRange::ValueRange(v27, v13 + 32, v14);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 240))(a2, v11, v27[0], v27[1]);
  }
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 93);
    v17 = *(mlir::Operation **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_17;
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 93;
    v17 = *(mlir::Operation **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_17:
      v26[0] = mlir::Operation::getAttrDictionary(v17);
      v18 = (mlir::ArrayAttr *)v26;
      goto LABEL_20;
    }
  }
  v18 = (mlir::Operation *)((char *)v17 + 56);
LABEL_20:
  Value = mlir::ArrayAttr::getValue(v18);
  v26[0] = "map";
  v26[1] = 3;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, Value, v20, v26, 1);
  v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 2)
  {
    *(_BYTE *)(v22 + 2) = 32;
    *(_WORD *)v22 = 14880;
    *((_QWORD *)v21 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v21, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v24 = (_WORD *)*((_QWORD *)v23 + 4);
  if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 1uLL)
  {
    *v24 = 8236;
    *((_QWORD *)v23 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v23, ", ", 2uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)this - 8) & 0xFFFFFFFFFFFFFFF8);
}

BOOL mlir::affine::AffineVectorLoadOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t InherentAttr;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t NextResultAtOffset;

  v2 = *this;
  v3 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8);
  if (*((_BYTE *)*this + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr((uint64_t)*this, (uint64_t)"map", 3);
    if (v5)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (InherentAttr)
        goto LABEL_4;
LABEL_14:
      v7 = 0;
      v8 = (uint64_t)*this;
      if ((*((_BYTE *)*this + 46) & 0x80) != 0)
        goto LABEL_8;
LABEL_15:
      if (verifyMemoryOpIndexing(v2, v7, 32, -1, v6, -1))
        goto LABEL_9;
      return 0;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v2 + 7), "map", 3uLL);
  v6 = v3 & 0xFFFFFFFFFFFFFFF8;
  if (!InherentAttr)
    goto LABEL_14;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
    v7 = InherentAttr;
  else
    v7 = 0;
  v8 = (uint64_t)*this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    goto LABEL_15;
LABEL_8:
  if (!verifyMemoryOpIndexing(v2, v7, *(_QWORD *)(v8 + 72) + 32, *(unsigned int *)(v8 + 68) - 1, v6, *(_DWORD *)(v8 + 68) - 1))return 0;
LABEL_9:
  v9 = (uint64_t)*this;
  if (*(_DWORD *)(v9 + 36))
    v10 = v9 - 16;
  else
    v10 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
  return verifyVectorMemoryOp((uint64_t *)v9, v6, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) != 0;
}

uint64_t verifyVectorMemoryOp(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t RHS;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  const void **v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD **v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v17 = a3;
  v18 = a2;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v18);
  if (RHS == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v17))
    return 1;
  v15 = (const void **)"requires memref and vector types of the same elemental type";
  v16 = 259;
  mlir::Operation::emitOpError(a1, &v15, (uint64_t)v19);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  if (v26)
  {
    v6 = (_QWORD **)__p;
    if (__p)
    {
      v7 = v25;
      v8 = __p;
      if (v25 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v25 = v6;
      operator delete(v8);
    }
    v9 = v22;
    if (v22)
    {
      v10 = v23;
      v11 = v22;
      if (v23 != v22)
      {
        do
        {
          v13 = (void *)*--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            operator delete[](v12);
        }
        while (v10 != v9);
        v11 = v22;
      }
      v23 = v9;
      operator delete(v11);
    }
    if (v20 != &v21)
      free(v20);
  }
  return v5;
}

void mlir::affine::AffineVectorStoreOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.vector_store", 19, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_1E0E16580;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>]";
  v39 = 124;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

BOOL mlir::affine::AffineVectorStoreOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  _BOOL8 v11;
  BOOL v12;
  void *v13;
  uint64_t v15;
  _QWORD v16[4];
  _QWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  v18 = 0;
  v19 = 0;
  memset(v17, 0, 24);
  memset(v16, 0, 24);
  v15 = 0;
  v20 = v22;
  v21 = 0x100000000;
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v16, 1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, &v20, &v15, "map", 3, a2 + 112, 2)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)&& mlir::AsmParser::parseColonType<mlir::MemRefType>(a1, &v19)&& (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)&& mlir::AsmParser::parseType<mlir::VectorType>(a1, &v18)&& (v7 = a2 + 16, (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17, v18, v7))&& (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1,
         v16,
         v19,
         v7))
  {
    if (!(_DWORD)v21)
    {
      v11 = 1;
      v13 = v20;
      if (v20 == v22)
        return v11;
      goto LABEL_21;
    }
    v8 = (char *)v20;
    v9 = 32 * v21 - 32;
    do
    {
      v10 = (*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, IndexType, v7);
      v11 = v10 != 0;
      v8 += 32;
      if (v10)
        v12 = v9 == 0;
      else
        v12 = 1;
      v9 -= 32;
    }
    while (!v12);
  }
  else
  {
    v11 = 0;
  }
  v13 = v20;
  if (v20 != v22)
LABEL_21:
    free(v13);
  return v11;
}

uint64_t mlir::affine::AffineVectorStoreOp::print(mlir::affine::AffineVectorStoreOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _WORD *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t InherentAttr;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  mlir::Operation *v19;
  mlir::ArrayAttr *v20;
  uint64_t Value;
  uint64_t v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  _WORD *v26;
  _QWORD v28[2];
  unint64_t v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 1uLL)
  {
    *v7 = 8236;
    *((_QWORD *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", ", 2uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56));
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 91);
    v10 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_12:
      InherentAttr = mlir::DictionaryAttr::get(v10 + 56, "map", 3uLL);
      goto LABEL_13;
    }
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 91;
    v10 = *(_QWORD *)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_12;
  }
  InherentAttr = mlir::Operation::getInherentAttr(v10, (uint64_t)"map", 3);
  if (!v12)
    goto LABEL_12;
LABEL_13:
  v13 = InherentAttr;
  if (InherentAttr
    && *(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    v14 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    {
      v15 = *(_QWORD *)(v14 + 72);
      v16 = *(unsigned int *)(v14 + 68) - 2;
    }
    else
    {
      v15 = 0;
      v16 = -2;
    }
    mlir::ValueRange::ValueRange(v29, v15 + 64, v16);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 240))(a2, v13, v29[0], v29[1]);
  }
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 93);
    v19 = *(mlir::Operation **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_20;
  }
  else
  {
    *((_QWORD *)v17 + 4) = v18 + 1;
    *v18 = 93;
    v19 = *(mlir::Operation **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 47))
    {
LABEL_20:
      v28[0] = mlir::Operation::getAttrDictionary(v19);
      v20 = (mlir::ArrayAttr *)v28;
      goto LABEL_23;
    }
  }
  v20 = (mlir::Operation *)((char *)v19 + 56);
LABEL_23:
  Value = mlir::ArrayAttr::getValue(v20);
  v28[0] = "map";
  v28[1] = 3;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, Value, v22, v28, 1);
  v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v24 = *((_QWORD *)v23 + 4);
  if ((unint64_t)(*((_QWORD *)v23 + 3) - v24) > 2)
  {
    *(_BYTE *)(v24 + 2) = 32;
    *(_WORD *)v24 = 14880;
    *((_QWORD *)v23 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v23, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v26 = (_WORD *)*((_QWORD *)v25 + 4);
  if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 1uLL)
  {
    *v26 = 8236;
    *((_QWORD *)v25 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v25, ", ", 2uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

BOOL mlir::affine::AffineVectorStoreOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t InherentAttr;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *this;
  v3 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8);
  if (*((_BYTE *)*this + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr((uint64_t)*this, (uint64_t)"map", 3);
    if (v5)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (InherentAttr)
        goto LABEL_4;
LABEL_11:
      v7 = 0;
      v8 = (uint64_t)*this;
      if ((*((_BYTE *)*this + 46) & 0x80) != 0)
        goto LABEL_8;
LABEL_12:
      if (verifyMemoryOpIndexing(v2, v7, 64, -2, v6, -2))
        return verifyVectorMemoryOp(*this, v6, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != 0;
      return 0;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v2 + 7), "map", 3uLL);
  v6 = v3 & 0xFFFFFFFFFFFFFFF8;
  if (!InherentAttr)
    goto LABEL_11;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
    v7 = InherentAttr;
  else
    v7 = 0;
  v8 = (uint64_t)*this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    goto LABEL_12;
LABEL_8:
  if (verifyMemoryOpIndexing(v2, v7, *(_QWORD *)(v8 + 72) + 64, *(unsigned int *)(v8 + 68) - 2, v6, *(_DWORD *)(v8 + 68) - 2))return verifyVectorMemoryOp(*this, v6, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != 0;
  return 0;
}

uint64_t mlir::affine::AffineDelinearizeIndexOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  const void **v19[4];
  __int16 v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v2 = *((unsigned int *)v1 + 17);
    if ((_DWORD)v2 == 1)
    {
      v19[0] = (const void **)"basis should not be empty";
      v20 = 259;
      mlir::OpState::emitOpError(this, v19, (uint64_t)v21);
      v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
      if (v21[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
      if (v28)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v27;
          v6 = __p;
          if (v27 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v27 = v4;
          operator delete(v6);
        }
        v7 = v24;
        if (!v24)
          goto LABEL_35;
        v8 = v25;
        v9 = v24;
        if (v25 == v24)
        {
LABEL_34:
          v25 = v7;
          operator delete(v9);
LABEL_35:
          if (v22 != &v23)
            free(v22);
          return v3;
        }
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
LABEL_33:
        v9 = v24;
        goto LABEL_34;
      }
      return v3;
    }
    if (v2 - 1 == *((_DWORD *)v1 + 9))
      return 1;
  }
  v19[0] = (const void **)"should return an index for each basis element";
  v20 = 259;
  mlir::OpState::emitOpError(this, v19, (uint64_t)v21);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  if (v28)
  {
    v12 = (_QWORD **)__p;
    if (__p)
    {
      v13 = v27;
      v14 = __p;
      if (v27 != __p)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = __p;
      }
      v27 = v12;
      operator delete(v14);
    }
    v7 = v24;
    if (!v24)
      goto LABEL_35;
    v15 = v25;
    v9 = v24;
    if (v25 == v24)
      goto LABEL_34;
    do
    {
      v17 = (void *)*--v15;
      v16 = v17;
      *v15 = 0;
      if (v17)
        operator delete[](v16);
    }
    while (v15 != v7);
    goto LABEL_33;
  }
  return v3;
}

uint64_t mlir::affine::AffineApplyOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD **v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v26 = &v56;
      v27 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v27 = (char *)v60;
          v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v26 = &v56;
          v27 = (char *)v60;
        }
      }
      v28 = &v27[24 * v61];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v67;
      v32 = __p;
      if (v67 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v67 = v30;
      operator delete(v32);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v33 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "map", 3uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for map in DictionaryAttr to set Properties.";
      v58 = 63;
      v36 = &v56;
      v37 = (char *)v60;
      if (v61 >= v62)
      {
        v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v53 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v37 = (char *)v60;
          v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v36 = &v56;
          v37 = (char *)v60;
        }
      }
      v38 = &v37[24 * v61];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v67;
      v42 = __p;
      if (v67 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v67 = v40;
      operator delete(v42);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v43 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 48;
    v10 = &v56;
    v11 = (char *)v60;
    if (v61 >= v62)
    {
      v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v52 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v11 = (char *)v60;
        v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v10 = &v56;
        v11 = (char *)v60;
      }
    }
    v12 = &v11[24 * v61];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v61;
    if (v59[0])
    {
      v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v15 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v15 = (char *)v60;
          v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v14 = &v56;
          v15 = (char *)v60;
        }
      }
      v16 = &v15[24 * v61];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v67;
      v20 = __p;
      if (v67 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v67 = v18;
      operator delete(v20);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v22 = v65;
    v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
LABEL_57:
    v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::affine::AffineApplyOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"map", 3, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties]";
        v15 = 115;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[111];
    return a1[32];
  }
  return result;
}

void mlir::affine::AffineApplyOp::build(mlir::IndexType **a1, uint64_t a2, mlir::BytecodeWriterConfig *a3, mlir::BytecodeWriterConfig *a4, uint64_t a5, uint64_t a6)
{
  uint64_t IndexType;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mlir::BytecodeWriterConfig *v13[2];
  void *v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v13[0] = a3;
  v13[1] = a4;
  IndexType = mlir::Builder::getIndexType(a1, (mlir::MLIRContext *)a2);
  mlir::AffineMap::inferFromExprList(v13, 1uLL, (uint64_t)&v14);
  v10 = *(_QWORD *)v14;
  mlir::OperationState::addOperands(a2, a5, a6);
  v11 = mlir::AffineMapAttr::get(v10);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>((_QWORD *)a2) = v11;
  v12 = *(unsigned int *)(a2 + 72);
  if (v12 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v12) = IndexType;
  ++*(_DWORD *)(a2 + 72);
  if (v14 != v15)
    free(v14);
}

BOOL mlir::affine::AffineApplyOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t NextResultAtOffset;
  uint64_t v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  const void **v22;
  __int16 v23;
  _QWORD v24[3];
  void *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *__p;
  _QWORD **v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v24[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v24))return 0;
    v4 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v5 = *((unsigned int *)v4 + 17);
      if ((_DWORD)v5)
      {
        v6 = 0;
        v7 = v4[9] + 24;
        while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v6))
        {
          ++v6;
          v7 += 32;
          if (v5 == v6)
          {
            v4 = *this;
            goto LABEL_9;
          }
        }
        return 0;
      }
    }
LABEL_9:
    v8 = *((_DWORD *)v4 + 9);
    v9 = (uint64_t)(v4 - 2);
    if (v8)
      v10 = v9;
    else
      v10 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
    return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
  }
  else
  {
    v22 = (const void **)"requires attribute 'map'";
    v23 = 259;
    mlir::OpState::emitOpError(this, &v22, (uint64_t)v24);
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    if (v31)
    {
      v13 = (_QWORD **)__p;
      if (__p)
      {
        v14 = v30;
        v15 = __p;
        if (v30 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v30 = v13;
        operator delete(v15);
      }
      v16 = v27;
      if (v27)
      {
        v17 = v28;
        v18 = v27;
        if (v28 != v27)
        {
          do
          {
            v20 = (void *)*--v17;
            v19 = v20;
            *v17 = 0;
            if (v20)
              operator delete[](v19);
          }
          while (v17 != v16);
          v18 = v27;
        }
        v28 = v16;
        operator delete(v18);
      }
      if (v25 != &v26)
        free(v25);
    }
  }
  return v12;
}

uint64_t mlir::affine::AffineDelinearizeIndexOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t NextResultAtOffset;

  if (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    v2 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    {
      v4 = -1;
      v5 = 32;
LABEL_5:
      v6 = 0;
      v7 = v5 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v6 + 1))
      {
        ++v6;
        v7 += 32;
        if (v4 == v6)
        {
          v2 = *this;
          goto LABEL_9;
        }
      }
      return 0;
    }
    v3 = *((unsigned int *)v2 + 17);
    v4 = v3 - 1;
    if (v3 != 1)
    {
      v5 = v2[9] + 32;
      goto LABEL_5;
    }
LABEL_9:
    v8 = *((unsigned int *)v2 + 9);
    v9 = v2 - 2;
    if (v8)
      v10 = (uint64_t)v9;
    else
      v10 = 0;
    if (!(_DWORD)v8)
      return 1;
    v11 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, v11);
      if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, v11))break;
      if (v8 == ++v11)
        return 1;
    }
  }
  return 0;
}

uint64_t mlir::affine::AffineDelinearizeIndexOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v13[32];
  __int16 v14;
  void *__src;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[128];
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  memset(v21, 0, 24);
  v18 = v20;
  v19 = 0x400000000;
  __src = &v17;
  v16 = 0x100000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v21, 1))
    goto LABEL_15;
  v14 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, char *))(*(_QWORD *)a1 + 368))(a1, "into", 4, v13))goto LABEL_15;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
    goto LABEL_15;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v18, 0, 1, 0xFFFFFFFFLL))goto LABEL_15;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    goto LABEL_15;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    goto LABEL_15;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_15;
  if (!mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src))
    goto LABEL_15;
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  mlir::OperationState::addTypes(a2, __src, v16);
  v7 = a2 + 16;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v21, IndexType, a2 + 16))goto LABEL_15;
  if ((_DWORD)v19)
  {
    v8 = (char *)v18;
    v9 = 32 * v19;
    v10 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, IndexType, v7))
    {
      v8 += 32;
      v9 -= 32;
      if (!v9)
        goto LABEL_16;
    }
LABEL_15:
    v10 = 0;
LABEL_16:
    v11 = __src;
    if (__src != &v17)
      goto LABEL_17;
    goto LABEL_18;
  }
  v10 = 1;
  v11 = __src;
  if (__src != &v17)
LABEL_17:
    free(v11);
LABEL_18:
  if (v18 != v20)
    free(v18);
  return v10;
}

void mlir::affine::AffineDelinearizeIndexOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _DWORD *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  mlir::Operation *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  mlir::Operation *v22;
  mlir::ArrayAttr *v23;
  uint64_t Value;
  uint64_t v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35[4];
  _QWORD v36[2];
  void *v37;
  uint64_t v38;
  _QWORD v39[5];

  v39[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_DWORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 3uLL)
  {
    *v9 = 1869901417;
    *((_QWORD *)v8 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v8, "into", 4uLL);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, "(", 1uLL);
    v14 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_15;
  }
  else
  {
    *v13 = 40;
    ++*((_QWORD *)v12 + 4);
    v14 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_15:
      v15 = *((unsigned int *)v14 + 17);
      v16 = *((_QWORD *)v14 + 9);
      v17 = v15 - 1;
      goto LABEL_16;
    }
  }
  v16 = 0;
  v17 = -1;
LABEL_16:
  v18 = v16 + 32;
  v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v37 = ", ";
  v38 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v18, 0, v18, v17, (uint64_t)a2, v19, (uint64_t)&v37);
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if (*((_BYTE **)v20 + 3) == v21)
  {
    llvm::raw_ostream::write(v20, ")", 1uLL);
  }
  else
  {
    *v21 = 41;
    ++*((_QWORD *)v20 + 4);
  }
  v37 = v39;
  v38 = 0x200000000;
  v22 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v35[0] = mlir::Operation::getAttrDictionary(v22);
    v23 = (mlir::ArrayAttr *)v35;
  }
  else
  {
    v23 = (mlir::Operation *)((char *)v22 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v23);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v25, v37, v38);
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((_QWORD *)v26 + 4) = v27 + 1;
    *v27 = 32;
  }
  v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v29 = (_BYTE *)*((_QWORD *)v28 + 4);
  if (*((_BYTE **)v28 + 3) == v29)
  {
    llvm::raw_ostream::write(v28, ":", 1uLL);
  }
  else
  {
    *v29 = 58;
    ++*((_QWORD *)v28 + 4);
  }
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v31 = (_BYTE *)*((_QWORD *)v30 + 4);
  if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((_QWORD *)v30 + 4) = v31 + 1;
    *v31 = 32;
  }
  v32 = *((unsigned int *)*this + 9);
  v33 = (uint64_t)*this - 16;
  if (!(_DWORD)v32)
    v33 = 0;
  v34[0] = v33;
  v34[1] = v32;
  mlir::OperandRange::getTypes(v34, v35);
  v36[0] = ", ";
  v36[1] = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v35[0], v35[1], v35[2], v35[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)v36);
  if (v37 != v39)
    free(v37);
}

BOOL mlir::affine::AffineForOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  int *v62;
  char *v63;
  char *v64;
  __int128 v65;
  _QWORD **v66;
  _QWORD **v67;
  void *v68;
  _QWORD *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  char *v75;
  char *v76;
  __int128 v77;
  _QWORD **v78;
  _QWORD **v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  const char *v105;
  uint64_t v106;
  _QWORD v107[3];
  void *v108;
  unsigned int v109;
  unsigned int v110;
  _BYTE v111[96];
  void *v112;
  _QWORD *v113;
  void *__p;
  _QWORD **v115;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v103 = v6;
  if (!v6)
  {
    a3(v107, a4);
    if (v107[0])
    {
      v104 = 3;
      v105 = "expected DictionaryAttr to set properties";
      v106 = 41;
      v26 = &v104;
      v27 = (char *)v108;
      if (v109 >= v110)
      {
        v86 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          v94 = (char *)&v104 - (_BYTE *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v86, 24);
          v27 = (char *)v108;
          v26 = (int *)((char *)v108 + v94);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v86, 24);
          v26 = &v104;
          v27 = (char *)v108;
        }
      }
      v28 = &v27[24 * v109];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v109;
      if (v107[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
    }
    if (!v116)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v115;
      v32 = __p;
      if (v115 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v115 = v30;
      operator delete(v32);
    }
    v21 = v112;
    if (!v112)
      goto LABEL_115;
    v33 = v113;
    v23 = v112;
    if (v113 == v112)
    {
LABEL_114:
      v113 = v21;
      operator delete(v23);
LABEL_115:
      if (v108 != v111)
        free(v108);
      return 0;
    }
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
LABEL_113:
    v23 = v112;
    goto LABEL_114;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v103, "lowerBoundMap", 0xDuLL);
  if (!v8)
  {
    a3(v107, a4);
    if (v107[0])
    {
      v104 = 3;
      v105 = "expected key entry for lowerBoundMap in DictionaryAttr to set Properties.";
      v106 = 73;
      v36 = &v104;
      v37 = (char *)v108;
      if (v109 >= v110)
      {
        v88 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          v96 = (char *)&v104 - (_BYTE *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v88, 24);
          v37 = (char *)v108;
          v36 = (int *)((char *)v108 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v88, 24);
          v36 = &v104;
          v37 = (char *)v108;
        }
      }
      v38 = &v37[24 * v109];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v109;
      if (v107[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
    }
    if (!v116)
      return 0;
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v115;
      v42 = __p;
      if (v115 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v115 = v40;
      operator delete(v42);
    }
    v21 = v112;
    if (!v112)
      goto LABEL_115;
    v43 = v113;
    v23 = v112;
    if (v113 == v112)
      goto LABEL_114;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v21);
    goto LABEL_113;
  }
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    a3(v107, a4);
    if (v107[0])
    {
      v104 = 3;
      v106 = 58;
      v10 = &v104;
      v11 = (char *)v108;
      if (v109 >= v110)
      {
        v87 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          v95 = (char *)&v104 - (_BYTE *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v87, 24);
          v11 = (char *)v108;
          v10 = (int *)((char *)v108 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v87, 24);
          v10 = &v104;
          v11 = (char *)v108;
        }
      }
      v12 = &v11[24 * v109];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v109;
      if (v107[0])
      {
        v14 = &v104;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v104, v9);
        v15 = (char *)v108;
        if (v109 >= v110)
        {
          v89 = v109 + 1;
          if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
          {
            v97 = (char *)&v104 - (_BYTE *)v108;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v89, 24);
            v15 = (char *)v108;
            v14 = (int *)((char *)v108 + v97);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v89, 24);
            v14 = &v104;
            v15 = (char *)v108;
          }
        }
        v16 = &v15[24 * v109];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v109;
        if (v107[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
      }
    }
    if (!v116)
      return 0;
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v115;
      v20 = __p;
      if (v115 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v115 = v18;
      operator delete(v20);
    }
    v21 = v112;
    if (!v112)
      goto LABEL_115;
    v22 = v113;
    v23 = v112;
    if (v113 == v112)
      goto LABEL_114;
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
    goto LABEL_113;
  }
  *a1 = v8;
  v46 = mlir::DictionaryAttr::get((uint64_t)&v103, "step", 4uLL);
  if (!v46)
  {
    a3(v107, a4);
    if (v107[0])
    {
      v104 = 3;
      v105 = "expected key entry for step in DictionaryAttr to set Properties.";
      v106 = 64;
      v62 = &v104;
      v63 = (char *)v108;
      if (v109 >= v110)
      {
        v91 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          v99 = (char *)&v104 - (_BYTE *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v91, 24);
          v63 = (char *)v108;
          v62 = (int *)((char *)v108 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v91, 24);
          v62 = &v104;
          v63 = (char *)v108;
        }
      }
      v64 = &v63[24 * v109];
      v65 = *(_OWORD *)v62;
      *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
      *(_OWORD *)v64 = v65;
      ++v109;
      if (v107[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
    }
    if (!v116)
      return 0;
    v66 = (_QWORD **)__p;
    if (__p)
    {
      v67 = v115;
      v68 = __p;
      if (v115 != __p)
      {
        do
          v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        v68 = __p;
      }
      v115 = v66;
      operator delete(v68);
    }
    v21 = v112;
    if (!v112)
      goto LABEL_115;
    v69 = v113;
    v23 = v112;
    if (v113 == v112)
      goto LABEL_114;
    do
    {
      v71 = (void *)*--v69;
      v70 = v71;
      *v69 = 0;
      if (v71)
        operator delete[](v70);
    }
    while (v69 != v21);
    goto LABEL_113;
  }
  v47 = v46;
  if (*(_UNKNOWN **)(*(_QWORD *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a3(v107, a4);
    if (v107[0])
    {
      v104 = 3;
      v106 = 49;
      v48 = &v104;
      v49 = (char *)v108;
      if (v109 >= v110)
      {
        v90 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          v98 = (char *)&v104 - (_BYTE *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v90, 24);
          v49 = (char *)v108;
          v48 = (int *)((char *)v108 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v90, 24);
          v48 = &v104;
          v49 = (char *)v108;
        }
      }
      v50 = &v49[24 * v109];
      v51 = *(_OWORD *)v48;
      *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
      *(_OWORD *)v50 = v51;
      ++v109;
      if (v107[0])
      {
        v52 = &v104;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v104, v47);
        v53 = (char *)v108;
        if (v109 >= v110)
        {
          v92 = v109 + 1;
          if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
          {
            v100 = (char *)&v104 - (_BYTE *)v108;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v92, 24);
            v53 = (char *)v108;
            v52 = (int *)((char *)v108 + v100);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v92, 24);
            v52 = &v104;
            v53 = (char *)v108;
          }
        }
        v54 = &v53[24 * v109];
        v55 = *(_OWORD *)v52;
        *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
        *(_OWORD *)v54 = v55;
        ++v109;
        if (v107[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
      }
    }
    if (!v116)
      return 0;
    v56 = (_QWORD **)__p;
    if (__p)
    {
      v57 = v115;
      v58 = __p;
      if (v115 != __p)
      {
        do
          v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        v58 = __p;
      }
      v115 = v56;
      operator delete(v58);
    }
    v21 = v112;
    if (!v112)
      goto LABEL_115;
    v59 = v113;
    v23 = v112;
    if (v113 == v112)
      goto LABEL_114;
    do
    {
      v61 = (void *)*--v59;
      v60 = v61;
      *v59 = 0;
      if (v61)
        operator delete[](v60);
    }
    while (v59 != v21);
    goto LABEL_113;
  }
  a1[1] = v46;
  v72 = mlir::DictionaryAttr::get((uint64_t)&v103, "upperBoundMap", 0xDuLL);
  v102 = v72;
  if (!v72)
  {
    a3(v107, a4);
    if (v107[0])
    {
      v104 = 3;
      v105 = "expected key entry for upperBoundMap in DictionaryAttr to set Properties.";
      v106 = 73;
      v74 = &v104;
      v75 = (char *)v108;
      if (v109 >= v110)
      {
        v93 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          v101 = (char *)&v104 - (_BYTE *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v93, 24);
          v75 = (char *)v108;
          v74 = (int *)((char *)v108 + v101);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v93, 24);
          v74 = &v104;
          v75 = (char *)v108;
        }
      }
      v76 = &v75[24 * v109];
      v77 = *(_OWORD *)v74;
      *((_QWORD *)v76 + 2) = *((_QWORD *)v74 + 2);
      *(_OWORD *)v76 = v77;
      ++v109;
      if (v107[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
    }
    if (!v116)
      return 0;
    v78 = (_QWORD **)__p;
    if (__p)
    {
      v79 = v115;
      v80 = __p;
      if (v115 != __p)
      {
        do
          v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
        while (v79 != v78);
        v80 = __p;
      }
      v115 = v78;
      operator delete(v80);
    }
    v21 = v112;
    if (!v112)
      goto LABEL_115;
    v81 = v113;
    v23 = v112;
    if (v113 == v112)
      goto LABEL_114;
    do
    {
      v83 = (void *)*--v81;
      v82 = v83;
      *v81 = 0;
      if (v83)
        operator delete[](v82);
    }
    while (v81 != v21);
    goto LABEL_113;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v72 + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    a3(v107, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v73, &v102);
LABEL_96:
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v107);
    return 0;
  }
  a1[2] = v72;
  v85 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v103, "operandSegmentSizes", 0x13uLL);
  if (!v85)
  {
    v85 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v103, "operand_segment_sizes", 0x15uLL);
    if (!v85)
    {
      a3(v107, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v107, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_96;
    }
  }
  return mlir::convertFromAttribute(a1 + 3, (const char *)3, v85, a3, a4) != 0;
}

uint64_t mlir::affine::AffineForOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t DictionaryAttr;
  void *v30;
  mlir::DictionaryAttr *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];

  v35[6] = *MEMORY[0x1E0C80C00];
  v32 = a1;
  v33 = v35;
  v34 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v32, (uint64_t)"lowerBoundMap", 13, *a2);
    v6 = v5;
    v7 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v7 = v34;
    }
    v8 = (uint64_t *)((char *)v33 + 16 * v7);
    *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v34) = v34 + 1;
  }
  v9 = a2[1];
  if (v9)
  {
    v10 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"step", 4, v9);
    v12 = v11;
    v13 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v13 = v34;
    }
    v14 = (uint64_t *)((char *)v33 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    LODWORD(v34) = v34 + 1;
  }
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"upperBoundMap", 13, v15);
    v18 = v17;
    v19 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v19 = v34;
    }
    v20 = (uint64_t *)((char *)v33 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    LODWORD(v34) = v34 + 1;
  }
  v21 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 3);
  v22 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"operandSegmentSizes", 19, v21);
  v24 = v23;
  v25 = v34;
  if (v34 >= HIDWORD(v34))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
    v25 = v34;
  }
  v26 = (uint64_t *)((char *)v33 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  v27 = __CFADD__((_DWORD)v34, 1);
  v28 = (v34 + 1);
  LODWORD(v34) = v34 + 1;
  if (v27)
  {
    DictionaryAttr = 0;
    v30 = v33;
    if (v33 == v35)
      return DictionaryAttr;
    goto LABEL_20;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v32, (mlir::MLIRContext *)v33, v28);
  v30 = v33;
  if (v33 != v35)
LABEL_20:
    free(v30);
  return DictionaryAttr;
}

uint64_t mlir::affine::AffineForOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t *a2, char *__s1, size_t __n)
{
  uint64_t result;

  result = 0;
  switch(__n)
  {
    case 4uLL:
      if (memcmp(__s1, "step", __n))
        goto LABEL_11;
      return a2[1];
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_11;
    case 0xDuLL:
      if (*(_QWORD *)__s1 == 0x756F427265776F6CLL && *(_QWORD *)(__s1 + 5) == 0x70614D646E756F42)
      {
        result = *a2;
      }
      else if (!memcmp(__s1, "upperBoundMap", __n))
      {
        result = a2[2];
      }
      else
      {
LABEL_11:
        result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n))
        goto LABEL_11;
      goto LABEL_13;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n))
        goto LABEL_11;
LABEL_13:
      result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::affine::AffineForOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 4uLL:
      result = memcmp(__s1, "step", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
            v10 = a4;
          else
            v10 = 0;
          v5[1] = v10;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xDuLL:
      if (*(_QWORD *)__s1 == 0x756F427265776F6CLL && *(_QWORD *)(__s1 + 5) == 0x70614D646E756F42)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
            v11 = a4;
          else
            v11 = 0;
          *(_QWORD *)result = v11;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      else
      {
        result = memcmp(__s1, "upperBoundMap", a3);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
              v7 = a4;
            else
              v7 = 0;
            v5[2] = v7;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
    case 0x13uLL:
      result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!(_DWORD)result)
        goto LABEL_17;
      break;
    case 0x15uLL:
      result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!(_DWORD)result)
      {
LABEL_17:
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          v8 = (_DWORD)result ? a4 : 0;
          v12 = v8;
          if ((_DWORD)result)
          {
            result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 3)
            {
              result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v9)
                result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v9);
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::affine::AffineForOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;

  v8 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v8, (const void **)"lowerBoundMap", (const char *)0xD, a3, a4))
  {
    v9 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(v9, (const void **)"step", (const char *)4, a3, a4))
    {
      v10 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v10, (const void **)"upperBoundMap", (const char *)0xD, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE v40[96];
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD **v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v35 = a1;
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35) + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
      return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    v32 = "attribute '";
    v33 = 11;
    v9 = &v31;
    v10 = (char *)v37;
    if (v38 >= v39)
    {
      v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        v29 = (char *)&v31 - (_BYTE *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v10 = (char *)v37;
        v9 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v9 = &v31;
        v10 = (char *)v37;
      }
    }
    v11 = &v10[24 * v38];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v38;
    if (v35)
    {
      v34 = 261;
      v31 = a2;
      v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        v32 = "' failed to satisfy constraint: index attribute";
        v33 = 47;
        v13 = &v31;
        v14 = (char *)v37;
        if (v38 >= v39)
        {
          v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            v30 = (char *)&v31 - (_BYTE *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v14 = (char *)v37;
            v13 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v13 = &v31;
            v14 = (char *)v37;
          }
        }
        v15 = &v14[24 * v38];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        ++v38;
      }
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  if (v45)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v44;
      v20 = __p;
      if (v44 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v44 = v18;
      operator delete(v20);
    }
    v21 = v41;
    if (v41)
    {
      v22 = v42;
      v23 = v41;
      if (v42 != v41)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v41;
      }
      v42 = v21;
      operator delete(v23);
    }
    if (v37 != v40)
      free(v37);
  }
  return v17;
}

BOOL mlir::affine::AffineForOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3))
    return 0;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 4)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 3, v12, 4 * v13);
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3 + 2)
      && ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6
       || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)3));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x28uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_1EDC07000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties]";
        v15 = 113;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v4[113];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffineForOp::writeProperties(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  mlir::MLIRContext *Context;
  uint64_t v6;
  uint64_t result;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v4 = *(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64;
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)v4);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
    v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 24, 3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 16));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (result >= 6)
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 24), 3);
  return result;
}

BOOL mlir::affine::AffineForOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ODSOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD **v36;
  _QWORD **v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  const void **v43[4];
  __int16 v44;
  _QWORD v45[3];
  void *v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  void *__p;
  _QWORD **v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *v3;
  if (!*v3)
  {
    v43[0] = (const void **)"requires attribute 'lowerBoundMap'";
    v44 = 259;
    mlir::OpState::emitOpError(this, v43, (uint64_t)v45);
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v45);
    if (v45[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v45);
    if (!v52)
      return v21;
    v22 = (_QWORD **)__p;
    if (__p)
    {
      v23 = v51;
      v24 = __p;
      if (v51 != __p)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = __p;
      }
      v51 = v22;
      operator delete(v24);
    }
    v25 = v48;
    if (v48)
    {
      v26 = v49;
      v27 = v48;
      if (v49 == v48)
        goto LABEL_73;
      do
      {
        v29 = (void *)*--v26;
        v28 = v29;
        *v26 = 0;
        if (v29)
          operator delete[](v28);
      }
      while (v26 != v25);
LABEL_72:
      v27 = v48;
LABEL_73:
      v49 = v25;
      operator delete(v27);
    }
LABEL_74:
    if (v46 != &v47)
      free(v46);
    return v21;
  }
  v5 = v3[1];
  if (!v5)
  {
    v43[0] = (const void **)"requires attribute 'step'";
    v44 = 259;
    mlir::OpState::emitOpError(this, v43, (uint64_t)v45);
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v45);
    if (v45[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v45);
    if (!v52)
      return v21;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v51;
      v32 = __p;
      if (v51 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v51 = v30;
      operator delete(v32);
    }
    v25 = v48;
    if (v48)
    {
      v33 = v49;
      v27 = v48;
      if (v49 == v48)
        goto LABEL_73;
      do
      {
        v35 = (void *)*--v33;
        v34 = v35;
        *v33 = 0;
        if (v35)
          operator delete[](v34);
      }
      while (v33 != v25);
      goto LABEL_72;
    }
    goto LABEL_74;
  }
  v6 = v3[2];
  if (!v6)
  {
    v43[0] = (const void **)"requires attribute 'upperBoundMap'";
    v44 = 259;
    mlir::OpState::emitOpError(this, v43, (uint64_t)v45);
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v45);
    if (v45[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v45);
    if (!v52)
      return v21;
    v36 = (_QWORD **)__p;
    if (__p)
    {
      v37 = v51;
      v38 = __p;
      if (v51 != __p)
      {
        do
          v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        v38 = __p;
      }
      v51 = v36;
      operator delete(v38);
    }
    v25 = v48;
    if (v48)
    {
      v39 = v49;
      v27 = v48;
      if (v49 == v48)
        goto LABEL_73;
      do
      {
        v41 = (void *)*--v39;
        v40 = v41;
        *v39 = 0;
        if (v41)
          operator delete[](v40);
      }
      while (v39 != v25);
      goto LABEL_72;
    }
    goto LABEL_74;
  }
  v45[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v4, (const void **)"lowerBoundMap", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v45))return 0;
  v45[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v6, (const void **)"upperBoundMap", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v45))return 0;
  v45[0] = *this;
  if (!mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(v5, (const void **)"step", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v45))return 0;
  v7 = *((unsigned int *)*this + 11);
  v8 = (uint64_t)&(*this)[2 * ((v7 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v8 = 0;
  v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    v10 = (*this)[9];
    if ((_DWORD)v9)
      goto LABEL_14;
  }
  else
  {
    v10 = 0;
    if ((_DWORD)v9)
    {
LABEL_14:
      v11 = 0;
      v12 = v10 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v11))
      {
        ++v11;
        v12 += 32;
        if (v9 == v11)
          goto LABEL_17;
      }
      return 0;
    }
  }
LABEL_17:
  ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u);
  if (v14)
  {
    v15 = v14;
    v16 = ODSOperands + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v16 += 32;
      if (!--v15)
        goto LABEL_21;
    }
    return 0;
  }
LABEL_21:
  mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 2u);
  v17 = *this;
  v18 = *((unsigned int *)*this + 9);
  if (*((_DWORD *)*this + 9))
    v19 = (uint64_t)(*this - 2);
  else
    v19 = 0;
  if ((_DWORD)v18)
  {
    for (i = 0; i != v18; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v19, i);
    v17 = *this;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v17, (((unint64_t)&v17[2 * (((unint64_t)*((unsigned int *)v17 + 11) >> 23) & 1) + 8]+ (((unint64_t)*((unsigned int *)v17 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v17 + 10), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::affine::detail::AffineIfOpGenericAdaptorBase::AffineIfOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "affine.if", 9, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties]";
        v15 = 114;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[115];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffineLoadOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  const void **v23;
  __int16 v24;
  _QWORD v25[3];
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v25[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    v4 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    {
      v6 = -1;
      v7 = 32;
LABEL_7:
      v8 = 0;
      v9 = v7 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 1))
      {
        ++v8;
        v9 += 32;
        if (v6 == v8)
        {
          v4 = *this;
          goto LABEL_11;
        }
      }
      return 0;
    }
    v5 = *((unsigned int *)v4 + 17);
    v6 = v5 - 1;
    if (v5 != 1)
    {
      v7 = v4[9] + 32;
      goto LABEL_7;
    }
LABEL_11:
    v10 = *((_DWORD *)v4 + 9);
    v11 = v4 - 2;
    if (v10)
      v12 = (uint64_t)v11;
    else
      v12 = 0;
    mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
    return 1;
  }
  else
  {
    v23 = (const void **)"requires attribute 'map'";
    v24 = 259;
    mlir::OpState::emitOpError(this, &v23, (uint64_t)v25);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
    if (v25[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
    if (v32)
    {
      v14 = (_QWORD **)__p;
      if (__p)
      {
        v15 = v31;
        v16 = __p;
        if (v31 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v31 = v14;
        operator delete(v16);
      }
      v17 = v28;
      if (v28)
      {
        v18 = v29;
        v19 = v28;
        if (v29 != v28)
        {
          do
          {
            v21 = (void *)*--v18;
            v20 = v21;
            *v18 = 0;
            if (v21)
              operator delete[](v20);
          }
          while (v18 != v17);
          v19 = v28;
        }
        v29 = v17;
        operator delete(v19);
      }
      if (v26 != &v27)
        free(v26);
    }
  }
  return v13;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties]";
        v15 = 113;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[117];
    return a1[32];
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties]";
        v15 = 113;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[119];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffineParallelOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  __int128 v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  __int128 v65;
  _QWORD **v66;
  _QWORD **v67;
  void *v68;
  _QWORD *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  char *v75;
  char *v76;
  __int128 v77;
  _QWORD **v78;
  _QWORD **v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  _QWORD v111[3];
  void *v112;
  unsigned int v113;
  unsigned int v114;
  _BYTE v115[96];
  void *v116;
  _QWORD *v117;
  void *__p;
  _QWORD **v119;
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v107 = v6;
  if (!v6)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      v109 = "expected DictionaryAttr to set properties";
      v110 = 41;
      v28 = &v108;
      v29 = (char *)v112;
      if (v113 >= v114)
      {
        v90 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v98 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v90, 24);
          v29 = (char *)v112;
          v28 = (uint64_t *)((char *)v112 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v90, 24);
          v28 = &v108;
          v29 = (char *)v112;
        }
      }
      v30 = &v29[24 * v113];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = v28[2];
      *(_OWORD *)v30 = v31;
      ++v113;
      if (v111[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
    }
    if (!v120)
      return 0;
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v119;
      v34 = __p;
      if (v119 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v119 = v32;
      operator delete(v34);
    }
    v23 = v116;
    if (!v116)
      goto LABEL_114;
    v35 = v117;
    v25 = v116;
    if (v117 == v116)
    {
LABEL_113:
      v117 = v23;
      operator delete(v25);
LABEL_114:
      if (v112 != v115)
        free(v112);
      return 0;
    }
    do
    {
      v37 = (void *)*--v35;
      v36 = v37;
      *v35 = 0;
      if (v37)
        operator delete[](v36);
    }
    while (v35 != v23);
LABEL_112:
    v25 = v116;
    goto LABEL_113;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v107, "lowerBoundsGroups", 0x11uLL);
  if (!v8)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      v109 = "expected key entry for lowerBoundsGroups in DictionaryAttr to set Properties.";
      v110 = 77;
      v38 = &v108;
      v39 = (char *)v112;
      if (v113 >= v114)
      {
        v91 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v99 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
          v39 = (char *)v112;
          v38 = (uint64_t *)((char *)v112 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
          v38 = &v108;
          v39 = (char *)v112;
        }
      }
      v40 = &v39[24 * v113];
      v41 = *(_OWORD *)v38;
      *((_QWORD *)v40 + 2) = v38[2];
      *(_OWORD *)v40 = v41;
      ++v113;
      if (v111[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
    }
    if (!v120)
      return 0;
    v42 = (_QWORD **)__p;
    if (__p)
    {
      v43 = v119;
      v44 = __p;
      if (v119 != __p)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = __p;
      }
      v119 = v42;
      operator delete(v44);
    }
    v23 = v116;
    if (!v116)
      goto LABEL_114;
    v45 = v117;
    v25 = v116;
    if (v117 == v116)
      goto LABEL_113;
    do
    {
      v47 = (void *)*--v45;
      v46 = v47;
      *v45 = 0;
      if (v47)
        operator delete[](v46);
    }
    while (v45 != v23);
    goto LABEL_112;
  }
  v9 = v8;
  if ((mlir::DenseIntElementsAttr::classof(v8) & 1) == 0)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      v110 = 62;
      v48 = &v108;
      v49 = (char *)v112;
      if (v113 >= v114)
      {
        v92 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v100 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v92, 24);
          v49 = (char *)v112;
          v48 = (uint64_t *)((char *)v112 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v92, 24);
          v48 = &v108;
          v49 = (char *)v112;
        }
      }
      v50 = &v49[24 * v113];
      v51 = *(_OWORD *)v48;
      *((_QWORD *)v50 + 2) = v48[2];
      *(_OWORD *)v50 = v51;
      ++v113;
      if (v111[0])
      {
        v52 = &v108;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v9);
        v53 = (char *)v112;
        if (v113 >= v114)
        {
          v93 = v113 + 1;
          if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
          {
            v101 = (char *)&v108 - (_BYTE *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
            v53 = (char *)v112;
            v52 = (uint64_t *)((char *)v112 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
            v52 = &v108;
            v53 = (char *)v112;
          }
        }
        v54 = &v53[24 * v113];
        v55 = *(_OWORD *)v52;
        *((_QWORD *)v54 + 2) = v52[2];
        *(_OWORD *)v54 = v55;
        ++v113;
        if (v111[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
    if (!v120)
      return 0;
    v56 = (_QWORD **)__p;
    if (__p)
    {
      v57 = v119;
      v58 = __p;
      if (v119 != __p)
      {
        do
          v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        v58 = __p;
      }
      v119 = v56;
      operator delete(v58);
    }
    v23 = v116;
    if (!v116)
      goto LABEL_114;
    v59 = v117;
    v25 = v116;
    if (v117 == v116)
      goto LABEL_113;
    do
    {
      v61 = (void *)*--v59;
      v60 = v61;
      *v59 = 0;
      if (v61)
        operator delete[](v60);
    }
    while (v59 != v23);
    goto LABEL_112;
  }
  *a1 = v9;
  v10 = mlir::DictionaryAttr::get((uint64_t)&v107, "lowerBoundsMap", 0xEuLL);
  if (!v10)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      v109 = "expected key entry for lowerBoundsMap in DictionaryAttr to set Properties.";
      v110 = 74;
      v62 = &v108;
      v63 = (char *)v112;
      if (v113 >= v114)
      {
        v95 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v103 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
          v63 = (char *)v112;
          v62 = (uint64_t *)((char *)v112 + v103);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
          v62 = &v108;
          v63 = (char *)v112;
        }
      }
      v64 = &v63[24 * v113];
      v65 = *(_OWORD *)v62;
      *((_QWORD *)v64 + 2) = v62[2];
      *(_OWORD *)v64 = v65;
      ++v113;
      if (v111[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
    }
    if (!v120)
      return 0;
    v66 = (_QWORD **)__p;
    if (__p)
    {
      v67 = v119;
      v68 = __p;
      if (v119 != __p)
      {
        do
          v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        v68 = __p;
      }
      v119 = v66;
      operator delete(v68);
    }
    v23 = v116;
    if (!v116)
      goto LABEL_114;
    v69 = v117;
    v25 = v116;
    if (v117 == v116)
      goto LABEL_113;
    do
    {
      v71 = (void *)*--v69;
      v70 = v71;
      *v69 = 0;
      if (v71)
        operator delete[](v70);
    }
    while (v69 != v23);
    goto LABEL_112;
  }
  v11 = v10;
  if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      v110 = 59;
      v12 = &v108;
      v13 = (char *)v112;
      if (v113 >= v114)
      {
        v94 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v102 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
          v13 = (char *)v112;
          v12 = (uint64_t *)((char *)v112 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
          v12 = &v108;
          v13 = (char *)v112;
        }
      }
      v14 = &v13[24 * v113];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = v12[2];
      *(_OWORD *)v14 = v15;
      ++v113;
      if (v111[0])
      {
        v16 = &v108;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v11);
        v17 = (char *)v112;
        if (v113 >= v114)
        {
          v96 = v113 + 1;
          if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
          {
            v104 = (char *)&v108 - (_BYTE *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v96, 24);
            v17 = (char *)v112;
            v16 = (uint64_t *)((char *)v112 + v104);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v96, 24);
            v16 = &v108;
            v17 = (char *)v112;
          }
        }
        v18 = &v17[24 * v113];
        v19 = *(_OWORD *)v16;
        *((_QWORD *)v18 + 2) = v16[2];
        *(_OWORD *)v18 = v19;
        ++v113;
        if (v111[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
    if (!v120)
      return 0;
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v119;
      v22 = __p;
      if (v119 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v119 = v20;
      operator delete(v22);
    }
    v23 = v116;
    if (!v116)
      goto LABEL_114;
    v24 = v117;
    v25 = v116;
    if (v117 == v116)
      goto LABEL_113;
    do
    {
      v27 = (void *)*--v24;
      v26 = v27;
      *v24 = 0;
      if (v27)
        operator delete[](v26);
    }
    while (v24 != v23);
    goto LABEL_112;
  }
  a1[1] = v10;
  v72 = mlir::DictionaryAttr::get((uint64_t)&v107, "reductions", 0xAuLL);
  v106 = v72;
  if (!v72)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      v109 = "expected key entry for reductions in DictionaryAttr to set Properties.";
      v110 = 70;
      v74 = &v108;
      v75 = (char *)v112;
      if (v113 >= v114)
      {
        v97 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v105 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
          v75 = (char *)v112;
          v74 = (uint64_t *)((char *)v112 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
          v74 = &v108;
          v75 = (char *)v112;
        }
      }
      v76 = &v75[24 * v113];
      v77 = *(_OWORD *)v74;
      *((_QWORD *)v76 + 2) = v74[2];
      *(_OWORD *)v76 = v77;
      ++v113;
      if (v111[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
    }
    if (!v120)
      return 0;
    v78 = (_QWORD **)__p;
    if (__p)
    {
      v79 = v119;
      v80 = __p;
      if (v119 != __p)
      {
        do
          v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
        while (v79 != v78);
        v80 = __p;
      }
      v119 = v78;
      operator delete(v80);
    }
    v23 = v116;
    if (!v116)
      goto LABEL_114;
    v81 = v117;
    v25 = v116;
    if (v117 == v116)
      goto LABEL_113;
    do
    {
      v83 = (void *)*--v81;
      v82 = v83;
      *v81 = 0;
      if (v83)
        operator delete[](v82);
    }
    while (v81 != v23);
    goto LABEL_112;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v72 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    a1[2] = v72;
    v85 = mlir::DictionaryAttr::get((uint64_t)&v107, "steps", 5uLL);
    v108 = v85;
    if (v85)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)v85 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      {
        a1[3] = v85;
        v87 = mlir::DictionaryAttr::get((uint64_t)&v107, "upperBoundsGroups", 0x11uLL);
        v108 = v87;
        if (!v87)
        {
          a3(v111, a4);
          mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v111, "expected key entry for upperBoundsGroups in DictionaryAttr to set Properties.");
          goto LABEL_123;
        }
        v88 = v87;
        if ((mlir::DenseIntElementsAttr::classof(v87) & 1) != 0)
        {
          a1[4] = v88;
          v89 = mlir::DictionaryAttr::get((uint64_t)&v107, "upperBoundsMap", 0xEuLL);
          v108 = v89;
          if (!v89)
          {
            a3(v111, a4);
            mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v111, "expected key entry for upperBoundsMap in DictionaryAttr to set Properties.");
            goto LABEL_123;
          }
          if (*(_UNKNOWN **)(*(_QWORD *)v89 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
          {
            a1[5] = v89;
            return 1;
          }
          a3(v111, a4);
        }
        else
        {
          a3(v111, a4);
        }
      }
      else
      {
        a3(v111, a4);
      }
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v86, &v108);
    }
    else
    {
      a3(v111, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v111, "expected key entry for steps in DictionaryAttr to set Properties.");
    }
  }
  else
  {
    a3(v111, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v73, &v106);
  }
LABEL_123:
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v111);
  return 0;
}

uint64_t mlir::affine::AffineParallelOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  void *v39;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[7];

  v45[6] = *MEMORY[0x1E0C80C00];
  v42 = a1;
  v43 = v45;
  v44 = 0x300000000;
  if (!*a2)
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_10;
    goto LABEL_7;
  }
  NamedAttr = mlir::Builder::getNamedAttr(&v42, (uint64_t)"lowerBoundsGroups", 17, *a2);
  v5 = v4;
  v6 = v44;
  if (v44 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
    v6 = v44;
  }
  v7 = (uint64_t *)((char *)v43 + 16 * v6);
  *v7 = NamedAttr;
  v7[1] = v5;
  v8 = v44 + 1;
  LODWORD(v44) = v44 + 1;
  v9 = a2[1];
  if (v9)
  {
LABEL_7:
    v10 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"lowerBoundsMap", 14, v9);
    v12 = v11;
    v13 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      v13 = v44;
    }
    v14 = (uint64_t *)((char *)v43 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
LABEL_10:
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"reductions", 10, v15);
    v18 = v17;
    v19 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      v19 = v44;
    }
    v20 = (uint64_t *)((char *)v43 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  v21 = a2[3];
  if (v21)
  {
    v22 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"steps", 5, v21);
    v24 = v23;
    v25 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      v25 = v44;
    }
    v26 = (uint64_t *)((char *)v43 + 16 * v25);
    *v26 = v22;
    v26[1] = v24;
    v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  v27 = a2[4];
  if (v27)
  {
    v28 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"upperBoundsGroups", 17, v27);
    v30 = v29;
    v31 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      v31 = v44;
    }
    v32 = (uint64_t *)((char *)v43 + 16 * v31);
    *v32 = v28;
    v32[1] = v30;
    v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  v33 = a2[5];
  if (v33)
  {
    v34 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"upperBoundsMap", 14, v33);
    v36 = v35;
    v37 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      v37 = v44;
    }
    v38 = (uint64_t *)((char *)v43 + 16 * v37);
    *v38 = v34;
    v38[1] = v36;
    v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  v39 = v43;
  if (!v8)
  {
    DictionaryAttr = 0;
    if (v43 == v45)
      return DictionaryAttr;
    goto LABEL_28;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v42, (mlir::MLIRContext *)v43, v8);
  v39 = v43;
  if (v43 != v45)
LABEL_28:
    free(v39);
  return DictionaryAttr;
}

uint64_t mlir::affine::AffineParallelOp::getInherentAttr(int a1, _QWORD *a2, _QWORD *__s1, size_t __n)
{
  switch(__n)
  {
    case 5uLL:
      if (memcmp(__s1, "steps", __n))
        return 0;
      return a2[3];
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xFuLL:
    case 0x10uLL:
      return 0;
    case 0xAuLL:
      if (memcmp(__s1, "reductions", __n))
        return 0;
      return a2[2];
    case 0xEuLL:
      if (!memcmp(__s1, "lowerBoundsMap", __n))
        return a2[1];
      if (memcmp(__s1, "upperBoundsMap", __n))
        return 0;
      return a2[5];
    case 0x11uLL:
      if (*__s1 == 0x756F427265776F6CLL && __s1[1] == 0x70756F724773646ELL && *((_BYTE *)__s1 + 16) == 115)
        return *a2;
      if (memcmp(__s1, "upperBoundsGroups", __n))
        return 0;
      return a2[4];
    default:
      return 0;
  }
}

uint64_t mlir::affine::AffineParallelOp::setInherentAttr(uint64_t result, _QWORD *__s1, size_t __n, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = (uint64_t *)result;
  switch(__n)
  {
    case 5uLL:
      result = memcmp(__s1, "steps", __n);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
            v13 = a4;
          else
            v13 = 0;
          v7[3] = v13;
        }
        else
        {
          v7[3] = 0;
        }
      }
      break;
    case 0xAuLL:
      result = memcmp(__s1, "reductions", __n);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
            v8 = a4;
          else
            v8 = 0;
          v7[2] = v8;
        }
        else
        {
          v7[2] = 0;
        }
      }
      break;
    case 0xEuLL:
      result = memcmp(__s1, "lowerBoundsMap", __n);
      if ((_DWORD)result)
      {
        result = memcmp(__s1, "upperBoundsMap", __n);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
              v9 = a4;
            else
              v9 = 0;
            v7[5] = v9;
          }
          else
          {
            v7[5] = 0;
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
          v14 = a4;
        else
          v14 = 0;
        v7[1] = v14;
      }
      else
      {
        v7[1] = 0;
      }
      break;
    case 0x11uLL:
      if (*__s1 == 0x756F427265776F6CLL && __s1[1] == 0x70756F724773646ELL && *((_BYTE *)__s1 + 16) == 115)
      {
        if (a4)
        {
          result = mlir::DenseIntElementsAttr::classof(a4);
          if ((_DWORD)result)
            v15 = a4;
          else
            v15 = 0;
          *v7 = v15;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      else
      {
        result = memcmp(__s1, "upperBoundsGroups", __n);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            result = mlir::DenseIntElementsAttr::classof(a4);
            if ((_DWORD)result)
              v12 = a4;
            else
              v12 = 0;
            v7[4] = v12;
          }
          else
          {
            v7[4] = 0;
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::affine::AffineParallelOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"lowerBoundsGroups", 17, *a2);
  v5 = a2[1];
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"lowerBoundsMap", 14, v5);
  v6 = a2[2];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"reductions", 10, v6);
  v7 = a2[3];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"steps", 5, v7);
  v8 = a2[4];
  if (v8)
    mlir::NamedAttrList::append(a3, (uint64_t)"upperBoundsGroups", 17, v8);
  v9 = a2[5];
  if (v9)
    mlir::NamedAttrList::append(a3, (uint64_t)"upperBoundsMap", 14, v9);
}

BOOL mlir::affine::AffineParallelOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 result;

  v8 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v8, (const void **)"lowerBoundsGroups", (const char *)0x11, a3, a4))
  {
    v9 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v9, (const void **)"lowerBoundsMap", (const char *)0xE, a3, a4))
    {
      v10 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      if (!v10
        || mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(v10, (const void **)"reductions", (const char *)0xA, a3, a4))
      {
        v11 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24));
        if (!v11
          || mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(v11, (const void **)"steps", (const char *)5, a3, a4))
        {
          v12 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32));
          if (!v12
            || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v12, (const void **)"upperBoundsGroups", (const char *)0x11, a3, a4))
          {
            v13 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 40));
            if (!v13
              || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v13, (const void **)"upperBoundsMap", (const char *)0xE, a3, a4))
            {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t *Value;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  const void **v35;
  const char *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    v39 = a1;
    Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    v29 = (uint64_t *)(v27 + 8 * v28);
    if (v29 != Value)
    {
      while (*Value && (mlir::arith::AtomicRMWKindAttr::classof(*Value) & 1) != 0)
      {
        if (++Value == v29)
          return 1;
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    v36 = "attribute '";
    v37 = 11;
    v9 = &v35;
    v10 = (char *)v41;
    if (v42 >= v43)
    {
      v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        v33 = (char *)&v35 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v10 = (char *)v41;
        v9 = (const void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v9 = &v35;
        v10 = (char *)v41;
      }
    }
    v11 = &v10[24 * v42];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v42;
    if (v39)
    {
      v38 = 261;
      v35 = a2;
      v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        v36 = "' failed to satisfy constraint: Reduction ops";
        v37 = 45;
        v13 = &v35;
        v14 = (char *)v41;
        if (v42 >= v43)
        {
          v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            v34 = (char *)&v35 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            v14 = (char *)v41;
            v13 = (const void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            v13 = &v35;
            v14 = (char *)v41;
          }
        }
        v15 = &v14[24 * v42];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        ++v42;
      }
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  if (v49)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v17;
}

uint64_t mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t Value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  const void **v36;
  const char *v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  _BYTE v45[96];
  void *v46;
  _QWORD *v47;
  void *__p;
  _QWORD **v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    v35 = a1;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(_QWORD *)Value)
      {
        if (*(_UNKNOWN **)(**(_QWORD **)Value + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          break;
        v36 = *(const void ***)Value;
        v40 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
        if (!mlir::Type::isSignlessInteger((mlir::Type *)&v40, 64))
          break;
        Value += 8;
        if (Value == v29)
          return 1;
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v40, a5);
  if (v40)
  {
    LODWORD(v36) = 3;
    v37 = "attribute '";
    v38 = 11;
    v9 = &v36;
    v10 = (char *)v42;
    if (v43 >= v44)
    {
      v31 = v43 + 1;
      if (v42 <= &v36 && (char *)v42 + 24 * v43 > (char *)&v36)
      {
        v33 = (char *)&v36 - (_BYTE *)v42;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v31, 24);
        v10 = (char *)v42;
        v9 = (const void ***)((char *)v42 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v31, 24);
        v9 = &v36;
        v10 = (char *)v42;
      }
    }
    v11 = &v10[24 * v43];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v43;
    if (v40)
    {
      v39 = 261;
      v36 = a2;
      v37 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v41, &v36);
      if (v40)
      {
        LODWORD(v36) = 3;
        v37 = "' failed to satisfy constraint: 64-bit integer array attribute";
        v38 = 62;
        v13 = &v36;
        v14 = (char *)v42;
        if (v43 >= v44)
        {
          v32 = v43 + 1;
          if (v42 <= &v36 && (char *)v42 + 24 * v43 > (char *)&v36)
          {
            v34 = (char *)&v36 - (_BYTE *)v42;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v32, 24);
            v14 = (char *)v42;
            v13 = (const void ***)((char *)v42 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v32, 24);
            v13 = &v36;
            v14 = (char *)v42;
          }
        }
        v15 = &v14[24 * v43];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        ++v43;
      }
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  if (v50)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v49;
      v20 = __p;
      if (v49 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v49 = v18;
      operator delete(v20);
    }
    v21 = v46;
    if (v46)
    {
      v22 = v47;
      v23 = v46;
      if (v47 != v46)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v46;
      }
      v47 = v21;
      operator delete(v23);
    }
    if (v42 != v45)
      free(v42);
  }
  return v17;
}

BOOL mlir::affine::AffineParallelOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 4)
      && mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3 + 5) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x30uLL);
    *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_1EDC07000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties]";
        v15 = 118;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v4[121];
    return a1[32];
  }
  return result;
}

BOOL mlir::affine::AffineParallelOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  _QWORD **v44;
  _QWORD **v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  const void **v51[4];
  __int16 v52;
  _QWORD v53[3];
  void *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  void *__p;
  _QWORD **v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *v3;
  if (!*v3)
  {
    v51[0] = (const void **)"requires attribute 'lowerBoundsGroups'";
    v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (!v60)
      return v17;
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v59;
      v20 = __p;
      if (v59 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v59 = v18;
      operator delete(v20);
    }
    v21 = v56;
    if (v56)
    {
      v22 = v57;
      v23 = v56;
      if (v57 == v56)
        goto LABEL_101;
      do
      {
        v25 = (void *)*--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v22 != v21);
LABEL_100:
      v23 = v56;
LABEL_101:
      v57 = v21;
      operator delete(v23);
    }
LABEL_102:
    if (v54 != &v55)
      free(v54);
    return v17;
  }
  v5 = v3[1];
  if (!v5)
  {
    v51[0] = (const void **)"requires attribute 'lowerBoundsMap'";
    v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (!v60)
      return v17;
    v26 = (_QWORD **)__p;
    if (__p)
    {
      v27 = v59;
      v28 = __p;
      if (v59 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v59 = v26;
      operator delete(v28);
    }
    v21 = v56;
    if (v56)
    {
      v29 = v57;
      v23 = v56;
      if (v57 == v56)
        goto LABEL_101;
      do
      {
        v31 = (void *)*--v29;
        v30 = v31;
        *v29 = 0;
        if (v31)
          operator delete[](v30);
      }
      while (v29 != v21);
      goto LABEL_100;
    }
    goto LABEL_102;
  }
  v6 = v3[2];
  if (!v6)
  {
    v51[0] = (const void **)"requires attribute 'reductions'";
    v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (!v60)
      return v17;
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v59;
      v34 = __p;
      if (v59 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v59 = v32;
      operator delete(v34);
    }
    v21 = v56;
    if (v56)
    {
      v35 = v57;
      v23 = v56;
      if (v57 == v56)
        goto LABEL_101;
      do
      {
        v37 = (void *)*--v35;
        v36 = v37;
        *v35 = 0;
        if (v37)
          operator delete[](v36);
      }
      while (v35 != v21);
      goto LABEL_100;
    }
    goto LABEL_102;
  }
  v7 = v3[3];
  if (!v7)
  {
    v51[0] = (const void **)"requires attribute 'steps'";
    v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (!v60)
      return v17;
    v38 = (_QWORD **)__p;
    if (__p)
    {
      v39 = v59;
      v40 = __p;
      if (v59 != __p)
      {
        do
          v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        v40 = __p;
      }
      v59 = v38;
      operator delete(v40);
    }
    v21 = v56;
    if (v56)
    {
      v41 = v57;
      v23 = v56;
      if (v57 == v56)
        goto LABEL_101;
      do
      {
        v43 = (void *)*--v41;
        v42 = v43;
        *v41 = 0;
        if (v43)
          operator delete[](v42);
      }
      while (v41 != v21);
      goto LABEL_100;
    }
    goto LABEL_102;
  }
  v8 = v3[4];
  if (!v8)
  {
    v51[0] = (const void **)"requires attribute 'upperBoundsGroups'";
    v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (!v60)
      return v17;
    v44 = (_QWORD **)__p;
    if (__p)
    {
      v45 = v59;
      v46 = __p;
      if (v59 != __p)
      {
        do
          v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        v46 = __p;
      }
      v59 = v44;
      operator delete(v46);
    }
    v21 = v56;
    if (v56)
    {
      v47 = v57;
      v23 = v56;
      if (v57 == v56)
        goto LABEL_101;
      do
      {
        v49 = (void *)*--v47;
        v48 = v49;
        *v47 = 0;
        if (v49)
          operator delete[](v48);
      }
      while (v47 != v21);
      goto LABEL_100;
    }
    goto LABEL_102;
  }
  v9 = v3[5];
  if (!v9)
  {
    v51[0] = (const void **)"requires attribute 'upperBoundsMap'";
    v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v53);
    return v17;
  }
  v53[0] = v2;
  if (!mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(v6, (const void **)"reductions", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0;
  v53[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v5, (const void **)"lowerBoundsMap", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0;
  v53[0] = *this;
  if (!mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v4, (const void **)"lowerBoundsGroups", (const char *)0x11, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0;
  v53[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v9, (const void **)"upperBoundsMap", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0;
  v53[0] = *this;
  if (!mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v8, (const void **)"upperBoundsGroups", (const char *)0x11, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0;
  v53[0] = *this;
  if (!mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(v7, (const void **)"steps", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0;
  v10 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v11 = *((unsigned int *)v10 + 17);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = v10[9] + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v12))
      {
        ++v12;
        v13 += 32;
        if (v11 == v12)
        {
          v10 = *this;
          goto LABEL_22;
        }
      }
      return 0;
    }
  }
LABEL_22:
  v14 = *((unsigned int *)v10 + 9);
  if (*((_DWORD *)v10 + 9))
    v15 = (uint64_t)(v10 - 2);
  else
    v15 = 0;
  if ((_DWORD)v14)
  {
    for (i = 0; i != v14; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v15, i);
    v10 = *this;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v10, (((unint64_t)&v10[2 * (((unint64_t)*((unsigned int *)v10 + 11) >> 23) & 1) + 8]+ (((unint64_t)*((unsigned int *)v10 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v10 + 10), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::affine::AffinePrefetchOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  __int128 v43;
  _QWORD **v44;
  _QWORD **v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  __int128 v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  __int128 v67;
  _QWORD **v68;
  _QWORD **v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  uint64_t *v74;
  char *v75;
  char *v76;
  __int128 v77;
  _QWORD **v78;
  _QWORD **v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  _QWORD v108[3];
  void *v109;
  unsigned int v110;
  unsigned int v111;
  _BYTE v112[96];
  void *v113;
  _QWORD *v114;
  void *__p;
  _QWORD **v116;
  char v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v104 = v6;
  if (!v6)
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      v106 = "expected DictionaryAttr to set properties";
      v107 = 41;
      v14 = &v105;
      v15 = (char *)v109;
      if (v110 >= v111)
      {
        v87 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v95 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v87, 24);
          v15 = (char *)v109;
          v14 = (uint64_t *)((char *)v109 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v87, 24);
          v14 = &v105;
          v15 = (char *)v109;
        }
      }
      v16 = &v15[24 * v110];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v116;
      v20 = __p;
      if (v116 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v116 = v18;
      operator delete(v20);
    }
    v21 = v113;
    if (!v113)
      goto LABEL_114;
    v22 = v114;
    v23 = v113;
    if (v114 == v113)
    {
LABEL_113:
      v114 = v21;
      operator delete(v23);
LABEL_114:
      if (v109 != v112)
        free(v109);
      return 0;
    }
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
LABEL_112:
    v23 = v113;
    goto LABEL_113;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "isDataCache", 0xBuLL);
  if (!v8)
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      v106 = "expected key entry for isDataCache in DictionaryAttr to set Properties.";
      v107 = 71;
      v26 = &v105;
      v27 = (char *)v109;
      if (v110 >= v111)
      {
        v88 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v96 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v88, 24);
          v27 = (char *)v109;
          v26 = (uint64_t *)((char *)v109 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v88, 24);
          v26 = &v105;
          v27 = (char *)v109;
        }
      }
      v28 = &v27[24 * v110];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = v26[2];
      *(_OWORD *)v28 = v29;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v116;
      v32 = __p;
      if (v116 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v116 = v30;
      operator delete(v32);
    }
    v21 = v113;
    if (!v113)
      goto LABEL_114;
    v33 = v114;
    v23 = v113;
    if (v114 == v113)
      goto LABEL_113;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
    goto LABEL_112;
  }
  v9 = (uint64_t)v8;
  if (!mlir::BoolAttr::classof(v8))
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      v107 = 56;
      v36 = &v105;
      v37 = (char *)v109;
      if (v110 >= v111)
      {
        v89 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v97 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          v37 = (char *)v109;
          v36 = (uint64_t *)((char *)v109 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          v36 = &v105;
          v37 = (char *)v109;
        }
      }
      v38 = &v37[24 * v110];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = v36[2];
      *(_OWORD *)v38 = v39;
      ++v110;
      if (v108[0])
      {
        v40 = &v105;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v105, v9);
        v41 = (char *)v109;
        if (v110 >= v111)
        {
          v90 = v110 + 1;
          if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
          {
            v98 = (char *)&v105 - (_BYTE *)v109;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
            v41 = (char *)v109;
            v40 = (uint64_t *)((char *)v109 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
            v40 = &v105;
            v41 = (char *)v109;
          }
        }
        v42 = &v41[24 * v110];
        v43 = *(_OWORD *)v40;
        *((_QWORD *)v42 + 2) = v40[2];
        *(_OWORD *)v42 = v43;
        ++v110;
        if (v108[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117)
      return 0;
    v44 = (_QWORD **)__p;
    if (__p)
    {
      v45 = v116;
      v46 = __p;
      if (v116 != __p)
      {
        do
          v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        v46 = __p;
      }
      v116 = v44;
      operator delete(v46);
    }
    v21 = v113;
    if (!v113)
      goto LABEL_114;
    v47 = v114;
    v23 = v113;
    if (v114 == v113)
      goto LABEL_113;
    do
    {
      v49 = (void *)*--v47;
      v48 = v49;
      *v47 = 0;
      if (v49)
        operator delete[](v48);
    }
    while (v47 != v21);
    goto LABEL_112;
  }
  *a1 = v9;
  v10 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "isWrite", 7uLL);
  if (!v10)
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      v106 = "expected key entry for isWrite in DictionaryAttr to set Properties.";
      v107 = 67;
      v50 = &v105;
      v51 = (char *)v109;
      if (v110 >= v111)
      {
        v91 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v99 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v91, 24);
          v51 = (char *)v109;
          v50 = (uint64_t *)((char *)v109 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v91, 24);
          v50 = &v105;
          v51 = (char *)v109;
        }
      }
      v52 = &v51[24 * v110];
      v53 = *(_OWORD *)v50;
      *((_QWORD *)v52 + 2) = v50[2];
      *(_OWORD *)v52 = v53;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v54 = (_QWORD **)__p;
    if (__p)
    {
      v55 = v116;
      v56 = __p;
      if (v116 != __p)
      {
        do
          v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
        while (v55 != v54);
        v56 = __p;
      }
      v116 = v54;
      operator delete(v56);
    }
    v21 = v113;
    if (!v113)
      goto LABEL_114;
    v57 = v114;
    v23 = v113;
    if (v114 == v113)
      goto LABEL_113;
    do
    {
      v59 = (void *)*--v57;
      v58 = v59;
      *v57 = 0;
      if (v59)
        operator delete[](v58);
    }
    while (v57 != v21);
    goto LABEL_112;
  }
  v11 = (uint64_t)v10;
  if (!mlir::BoolAttr::classof(v10))
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      v107 = 52;
      v60 = &v105;
      v61 = (char *)v109;
      if (v110 >= v111)
      {
        v92 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v100 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v92, 24);
          v61 = (char *)v109;
          v60 = (uint64_t *)((char *)v109 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v92, 24);
          v60 = &v105;
          v61 = (char *)v109;
        }
      }
      v62 = &v61[24 * v110];
      v63 = *(_OWORD *)v60;
      *((_QWORD *)v62 + 2) = v60[2];
      *(_OWORD *)v62 = v63;
      ++v110;
      if (v108[0])
      {
        v64 = &v105;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v105, v11);
        v65 = (char *)v109;
        if (v110 >= v111)
        {
          v93 = v110 + 1;
          if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
          {
            v101 = (char *)&v105 - (_BYTE *)v109;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v93, 24);
            v65 = (char *)v109;
            v64 = (uint64_t *)((char *)v109 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v93, 24);
            v64 = &v105;
            v65 = (char *)v109;
          }
        }
        v66 = &v65[24 * v110];
        v67 = *(_OWORD *)v64;
        *((_QWORD *)v66 + 2) = v64[2];
        *(_OWORD *)v66 = v67;
        ++v110;
        if (v108[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117)
      return 0;
    v68 = (_QWORD **)__p;
    if (__p)
    {
      v69 = v116;
      v70 = __p;
      if (v116 != __p)
      {
        do
          v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
        while (v69 != v68);
        v70 = __p;
      }
      v116 = v68;
      operator delete(v70);
    }
    v21 = v113;
    if (!v113)
      goto LABEL_114;
    v71 = v114;
    v23 = v113;
    if (v114 == v113)
      goto LABEL_113;
    do
    {
      v73 = (void *)*--v71;
      v72 = v73;
      *v71 = 0;
      if (v73)
        operator delete[](v72);
    }
    while (v71 != v21);
    goto LABEL_112;
  }
  a1[1] = v11;
  v12 = mlir::DictionaryAttr::get((uint64_t)&v104, "localityHint", 0xCuLL);
  v103 = v12;
  if (!v12)
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      v106 = "expected key entry for localityHint in DictionaryAttr to set Properties.";
      v107 = 72;
      v74 = &v105;
      v75 = (char *)v109;
      if (v110 >= v111)
      {
        v94 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v102 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v94, 24);
          v75 = (char *)v109;
          v74 = (uint64_t *)((char *)v109 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v94, 24);
          v74 = &v105;
          v75 = (char *)v109;
        }
      }
      v76 = &v75[24 * v110];
      v77 = *(_OWORD *)v74;
      *((_QWORD *)v76 + 2) = v74[2];
      *(_OWORD *)v76 = v77;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v78 = (_QWORD **)__p;
    if (__p)
    {
      v79 = v116;
      v80 = __p;
      if (v116 != __p)
      {
        do
          v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
        while (v79 != v78);
        v80 = __p;
      }
      v116 = v78;
      operator delete(v80);
    }
    v21 = v113;
    if (!v113)
      goto LABEL_114;
    v81 = v114;
    v23 = v113;
    if (v114 == v113)
      goto LABEL_113;
    do
    {
      v83 = (void *)*--v81;
      v82 = v83;
      *v81 = 0;
      if (v83)
        operator delete[](v82);
    }
    while (v81 != v21);
    goto LABEL_112;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a1[2] = v12;
    v85 = mlir::DictionaryAttr::get((uint64_t)&v104, "map", 3uLL);
    v105 = v85;
    if (v85)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)v85 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
      {
        a1[3] = v85;
        return 1;
      }
      a3(v108, a4);
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v86, &v105);
    }
    else
    {
      a3(v108, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v108, "expected key entry for map in DictionaryAttr to set Properties.");
    }
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v108);
    return 0;
  }
  a3(v108, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v13, &v103);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v108);
  return 0;
}

uint64_t mlir::affine::AffinePrefetchOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  void *v27;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[7];

  v33[6] = *MEMORY[0x1E0C80C00];
  v30 = a1;
  v31 = v33;
  v32 = 0x300000000;
  if (!*a2)
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_10;
    goto LABEL_7;
  }
  NamedAttr = mlir::Builder::getNamedAttr(&v30, (uint64_t)"isDataCache", 11, *a2);
  v5 = v4;
  v6 = v32;
  if (v32 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
    v6 = v32;
  }
  v7 = (uint64_t *)((char *)v31 + 16 * v6);
  *v7 = NamedAttr;
  v7[1] = v5;
  v8 = v32 + 1;
  LODWORD(v32) = v32 + 1;
  v9 = a2[1];
  if (v9)
  {
LABEL_7:
    v10 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"isWrite", 7, v9);
    v12 = v11;
    v13 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      v13 = v32;
    }
    v14 = (uint64_t *)((char *)v31 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
LABEL_10:
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"localityHint", 12, v15);
    v18 = v17;
    v19 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      v19 = v32;
    }
    v20 = (uint64_t *)((char *)v31 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  v21 = a2[3];
  if (v21)
  {
    v22 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"map", 3, v21);
    v24 = v23;
    v25 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      v25 = v32;
    }
    v26 = (uint64_t *)((char *)v31 + 16 * v25);
    *v26 = v22;
    v26[1] = v24;
    v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  v27 = v31;
  if (!v8)
  {
    DictionaryAttr = 0;
    if (v31 == v33)
      return DictionaryAttr;
    goto LABEL_20;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v30, (mlir::MLIRContext *)v31, v8);
  v27 = v31;
  if (v31 != v33)
LABEL_20:
    free(v27);
  return DictionaryAttr;
}

uint64_t mlir::affine::AffinePrefetchOp::getInherentAttr(int a1, _QWORD *a2, char *__s1, size_t __n)
{
  switch(__n)
  {
    case 3uLL:
      if (memcmp(__s1, "map", __n))
        return 0;
      return a2[3];
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
      return 0;
    case 7uLL:
      if (memcmp(__s1, "isWrite", __n))
        return 0;
      return a2[1];
    case 0xBuLL:
      if (*(_QWORD *)__s1 != 0x6143617461447369 || *(_QWORD *)(__s1 + 3) != 0x6568636143617461)
        return 0;
      return *a2;
    case 0xCuLL:
      if (memcmp(__s1, "localityHint", __n))
        return 0;
      return a2[2];
    default:
      return 0;
  }
}

uint64_t mlir::affine::AffinePrefetchOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 3uLL:
      result = memcmp(__s1, "map", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
            v10 = a4;
          else
            v10 = 0;
          v5[3] = v10;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    case 7uLL:
      result = memcmp(__s1, "isWrite", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::BoolAttr::classof(a4);
          if ((_DWORD)result)
            v6 = a4;
          else
            v6 = 0;
          v5[1] = v6;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xBuLL:
      if (*(_QWORD *)__s1 == 0x6143617461447369 && *(_QWORD *)(__s1 + 3) == 0x6568636143617461)
      {
        if (a4)
        {
          result = mlir::BoolAttr::classof(a4);
          if ((_DWORD)result)
            v8 = a4;
          else
            v8 = 0;
          *v5 = v8;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      break;
    case 0xCuLL:
      result = memcmp(__s1, "localityHint", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
            v9 = a4;
          else
            v9 = 0;
          v5[2] = v9;
        }
        else
        {
          v5[2] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::affine::AffinePrefetchOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  const void **v10;
  uint64_t v11;
  _BOOL8 result;

  v8 = (_QWORD *)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v8, (const void **)"isDataCache", (const char *)0xB, a3, a4))
  {
    v9 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v9, (const void **)"isWrite", (const char *)7, a3, a4))
    {
      v10 = (const void **)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(v10, (const void **)"localityHint", (const char *)0xC, a3, a4))
      {
        v11 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24));
        if (!v11
          || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v11, (const void **)"map", (const char *)3, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x20uLL);
    *v3 = 0u;
    v3[1] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties]";
        v15 = 118;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[123];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffinePrefetchOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ODSOperands;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  const void **v41[4];
  __int16 v42;
  _QWORD v43[3];
  void *v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  void *__p;
  _QWORD **v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (!*(_QWORD *)v3)
  {
    v41[0] = (const void **)"requires attribute 'isDataCache'";
    v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (!v50)
      return v8;
    v14 = (_QWORD **)__p;
    if (__p)
    {
      v15 = v49;
      v16 = __p;
      if (v49 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v49 = v14;
      operator delete(v16);
    }
    v17 = v46;
    if (v46)
    {
      v18 = v47;
      v19 = v46;
      if (v47 == v46)
        goto LABEL_76;
      do
      {
        v21 = (void *)*--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          operator delete[](v20);
      }
      while (v18 != v17);
LABEL_75:
      v19 = v46;
LABEL_76:
      v47 = v17;
      operator delete(v19);
    }
LABEL_77:
    if (v44 != &v45)
      free(v44);
    return v8;
  }
  v5 = *(_QWORD **)(v3 + 8);
  if (!v5)
  {
    v41[0] = (const void **)"requires attribute 'isWrite'";
    v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (!v50)
      return v8;
    v22 = (_QWORD **)__p;
    if (__p)
    {
      v23 = v49;
      v24 = __p;
      if (v49 != __p)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = __p;
      }
      v49 = v22;
      operator delete(v24);
    }
    v17 = v46;
    if (v46)
    {
      v25 = v47;
      v19 = v46;
      if (v47 == v46)
        goto LABEL_76;
      do
      {
        v27 = (void *)*--v25;
        v26 = v27;
        *v25 = 0;
        if (v27)
          operator delete[](v26);
      }
      while (v25 != v17);
      goto LABEL_75;
    }
    goto LABEL_77;
  }
  v6 = *(const void ***)(v3 + 16);
  if (!v6)
  {
    v41[0] = (const void **)"requires attribute 'localityHint'";
    v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (!v50)
      return v8;
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v49;
      v30 = __p;
      if (v49 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v49 = v28;
      operator delete(v30);
    }
    v17 = v46;
    if (v46)
    {
      v31 = v47;
      v19 = v46;
      if (v47 == v46)
        goto LABEL_76;
      do
      {
        v33 = (void *)*--v31;
        v32 = v33;
        *v31 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v31 != v17);
      goto LABEL_75;
    }
    goto LABEL_77;
  }
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
  {
    v41[0] = (const void **)"requires attribute 'map'";
    v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (!v50)
      return v8;
    v34 = (_QWORD **)__p;
    if (__p)
    {
      v35 = v49;
      v36 = __p;
      if (v49 != __p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = __p;
      }
      v49 = v34;
      operator delete(v36);
    }
    v17 = v46;
    if (v46)
    {
      v37 = v47;
      v19 = v46;
      if (v47 == v46)
        goto LABEL_76;
      do
      {
        v39 = (void *)*--v37;
        v38 = v39;
        *v37 = 0;
        if (v39)
          operator delete[](v38);
      }
      while (v37 != v17);
      goto LABEL_75;
    }
    goto LABEL_77;
  }
  v43[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v5, (const void **)"isWrite", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43))return 0;
  v43[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(v6, (const void **)"localityHint", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43))return 0;
  v43[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v4, (const void **)"isDataCache", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43))return 0;
  v43[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  v8 = 1;
  ODSOperands = mlir::memref::PrefetchOp::getODSOperands((mlir::memref::PrefetchOp *)this, 1u);
  if (v10)
  {
    v11 = v10;
    v12 = 0;
    for (i = ODSOperands + 24;
          mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v12 + 1);
          i += 32)
    {
      if (v11 == ++v12)
        return v8;
    }
    return 0;
  }
  return v8;
}

uint64_t mlir::affine::AffineStoreOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  const void **v20;
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v22[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
    {
      return 0;
    }
    v4 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    {
      v6 = -2;
      v7 = 64;
LABEL_7:
      v8 = 0;
      for (i = v7 + 24;
            mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 2);
            i += 32)
      {
        if (v6 == ++v8)
          return 1;
      }
      return 0;
    }
    v5 = *((unsigned int *)v4 + 17);
    v6 = v5 - 2;
    if (v5 != 2)
    {
      v7 = v4[9] + 64;
      goto LABEL_7;
    }
    return 1;
  }
  else
  {
    v20 = (const void **)"requires attribute 'map'";
    v21 = 259;
    mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v11 = (_QWORD **)__p;
      if (__p)
      {
        v12 = v28;
        v13 = __p;
        if (v28 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v28 = v11;
        operator delete(v13);
      }
      v14 = v25;
      if (v25)
      {
        v15 = v26;
        v16 = v25;
        if (v26 != v25)
        {
          do
          {
            v18 = (void *)*--v15;
            v17 = v18;
            *v15 = 0;
            if (v18)
              operator delete[](v17);
          }
          while (v15 != v14);
          v16 = v25;
        }
        v26 = v14;
        operator delete(v16);
      }
      if (v23 != &v24)
        free(v23);
    }
  }
  return v10;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties]";
        v15 = 120;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[125];
    return a1[32];
  }
  return result;
}

BOOL mlir::affine::AffineVectorLoadOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t NextResultAtOffset;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  const void **v24;
  __int16 v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v26[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v26)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    v4 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    {
      v6 = -1;
      v7 = 32;
LABEL_7:
      v8 = 0;
      v9 = v7 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 1))
      {
        ++v8;
        v9 += 32;
        if (v6 == v8)
        {
          v4 = *this;
          goto LABEL_11;
        }
      }
      return 0;
    }
    v5 = *((unsigned int *)v4 + 17);
    v6 = v5 - 1;
    if (v5 != 1)
    {
      v7 = v4[9] + 32;
      goto LABEL_7;
    }
LABEL_11:
    v10 = *((_DWORD *)v4 + 9);
    v11 = v4 - 2;
    if (v10)
      v12 = (uint64_t)v11;
    else
      v12 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
    return mlir::affine::__mlir_ods_local_type_constraint_AffineOps5(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", (const void **)6, 0) != 0;
  }
  else
  {
    v24 = (const void **)"requires attribute 'map'";
    v25 = 259;
    mlir::OpState::emitOpError(this, &v24, (uint64_t)v26);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v33)
    {
      v15 = (_QWORD **)__p;
      if (__p)
      {
        v16 = v32;
        v17 = __p;
        if (v32 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v32 = v15;
        operator delete(v17);
      }
      v18 = v29;
      if (v29)
      {
        v19 = v30;
        v20 = v29;
        if (v30 != v29)
        {
          do
          {
            v22 = (void *)*--v19;
            v21 = v22;
            *v19 = 0;
            if (v22)
              operator delete[](v21);
          }
          while (v19 != v18);
          v20 = v29;
        }
        v30 = v18;
        operator delete(v20);
      }
      if (v27 != &v28)
        free(v27);
    }
  }
  return v14;
}

uint64_t mlir::affine::__mlir_ods_local_type_constraint_AffineOps5(uint64_t *a1, const void **a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  const void **v50[4];
  __int16 v51;
  int v52;
  const char *v53;
  uint64_t v54;
  _QWORD v55[3];
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
    && (v50[0] = a2, mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v50), v37 >= 1))
  {
    v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
    v55[0] = a2;
    v55[1] = v38;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v55);
    return 1;
  }
  else
  {
    v51 = 261;
    v50[0] = a3;
    v50[1] = a4;
    mlir::Operation::emitOpError(a1, v50, (uint64_t)v55);
    if (v55[0])
    {
      v52 = 3;
      v53 = " #";
      v54 = 2;
      v10 = &v52;
      v11 = (char *)v56;
      if (v57 >= v58)
      {
        v40 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          v46 = (char *)&v52 - (_BYTE *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          v11 = (char *)v56;
          v10 = (int *)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          v10 = &v52;
          v11 = (char *)v56;
        }
      }
      v12 = &v11[24 * v57];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      v14 = ++v57;
      if (v55[0])
      {
        v52 = 5;
        v53 = (const char *)a5;
        v15 = &v52;
        v16 = (char *)v56;
        if (v14 >= v58)
        {
          v41 = v14 + 1;
          v42 = (char *)v56 + 24 * v14 > (char *)&v52;
          if (v56 <= &v52 && v42)
          {
            v47 = (char *)&v52 - (_BYTE *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            v16 = (char *)v56;
            v15 = (int *)((char *)v56 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            v15 = &v52;
            v16 = (char *)v56;
          }
        }
        v17 = &v16[24 * v57];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v17 = v18;
        v19 = ++v57;
        if (v55[0])
        {
          v52 = 3;
          v53 = " must be vector of any type values, but got ";
          v54 = 44;
          v20 = &v52;
          v21 = (char *)v56;
          if (v19 >= v58)
          {
            v43 = v19 + 1;
            v44 = (char *)v56 + 24 * v19 > (char *)&v52;
            if (v56 <= &v52 && v44)
            {
              v48 = (char *)&v52 - (_BYTE *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              v21 = (char *)v56;
              v20 = (int *)((char *)v56 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              v20 = &v52;
              v21 = (char *)v56;
            }
          }
          v22 = &v21[24 * v57];
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          ++v57;
          if (v55[0])
          {
            v24 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)a2);
            v25 = (char *)v56;
            if (v57 >= v58)
            {
              v45 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                v49 = (char *)&v52 - (_BYTE *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                v25 = (char *)v56;
                v24 = (int *)((char *)v56 + v49);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                v24 = &v52;
                v25 = (char *)v56;
              }
            }
            v26 = &v25[24 * v57];
            v27 = *(_OWORD *)v24;
            *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
            *(_OWORD *)v26 = v27;
            ++v57;
          }
        }
      }
    }
    v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (v64)
    {
      v29 = (_QWORD **)__p;
      if (__p)
      {
        v30 = v63;
        v31 = __p;
        if (v63 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v63 = v29;
        operator delete(v31);
      }
      v32 = v60;
      if (v60)
      {
        v33 = v61;
        v34 = v60;
        if (v61 != v60)
        {
          do
          {
            v36 = (void *)*--v33;
            v35 = v36;
            *v33 = 0;
            if (v36)
              operator delete[](v35);
          }
          while (v33 != v32);
          v34 = v60;
        }
        v61 = v32;
        operator delete(v34);
      }
      if (v56 != v59)
        free(v56);
    }
  }
  return v28;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_1EDC07000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_1EDC07000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties]";
        v15 = 121;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_1EDC07000;
      }
    }
    a1[33] = v5[127];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffineVectorStoreOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  const void **v20;
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v22[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22)|| !mlir::affine::__mlir_ods_local_type_constraint_AffineOps5(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", (const void **)7, 0)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
    {
      return 0;
    }
    v4 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    {
      v6 = -2;
      v7 = 64;
LABEL_8:
      v8 = 0;
      for (i = v7 + 24;
            mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 2);
            i += 32)
      {
        if (v6 == ++v8)
          return 1;
      }
      return 0;
    }
    v5 = *((unsigned int *)v4 + 17);
    v6 = v5 - 2;
    if (v5 != 2)
    {
      v7 = v4[9] + 64;
      goto LABEL_8;
    }
    return 1;
  }
  else
  {
    v20 = (const void **)"requires attribute 'map'";
    v21 = 259;
    mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v11 = (_QWORD **)__p;
      if (__p)
      {
        v12 = v28;
        v13 = __p;
        if (v28 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v28 = v11;
        operator delete(v13);
      }
      v14 = v25;
      if (v25)
      {
        v15 = v26;
        v16 = v25;
        if (v26 != v25)
        {
          do
          {
            v18 = (void *)*--v15;
            v17 = v18;
            *v15 = 0;
            if (v18)
              operator delete[](v17);
          }
          while (v15 != v14);
          v16 = v25;
        }
        v26 = v14;
        operator delete(v16);
      }
      if (v23 != &v24)
        free(v23);
    }
  }
  return v10;
}

BOOL mlir::affine::AffineYieldOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  void *v8[2];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)
    || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| (_DWORD)v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    v5 = 0;
    v6 = v8[0];
    if (v8[0] == &v9)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  v6 = v8[0];
  if (v8[0] != &v9)
LABEL_9:
    free(v6);
LABEL_10:
  if (v10 != v12)
    free(v10);
  return v5;
}

void *mlir::OpInterface<mlir::ShapedDimOpInterface,mlir::detail::ShapedDimOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  void *result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = (void *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
          v31 = 76;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::ShapedDimOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
          v31 = 76;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

void *mlir::detail::InterfaceMap::lookup<mlir::ShapedDimOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  void **p_vtable;
  unint64_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  void **v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
      v23 = 76;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = p_vtable[483];
  v5 = *(void ***)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = (unint64_t *)&v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = (void **)(v8 + 2);
    v3 += ~(v3 >> 1);
    if (v10 < (unint64_t)v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (void **)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

_BYTE *llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::ViewOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(_BYTE *a1, unsigned int **a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isValidSymbol;
  uint64_t Value;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64x2_t *v18;
  int32x4_t v19;
  int64x2_t v20;
  uint64_t v21;
  int32x4_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t Sizes;
  unint64_t v31;
  uint64_t v32;

  if (!a1[9])
  {
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id)
    {
      v5 = **a2;
      v6 = *(_QWORD *)a2[1];
      v32 = *(_QWORD *)a1;
      v31 = *(_QWORD *)(v3 - 8) & 0xFFFFFFFFFFFFFFF8;
      v7 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31) + 8 * v5);
      isValidSymbol = 1;
      if (v7 != 0x8000000000000000)
      {
LABEL_24:
        a1[8] = isValidSymbol;
        a1[9] = 1;
        return a1;
      }
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31);
      if (v10 >= v5)
        v11 = v5;
      else
        v11 = v10;
      if (!v11)
      {
        v15 = 0;
LABEL_23:
        Sizes = mlir::memref::ViewOp::getSizes((mlir::memref::ViewOp *)&v32);
        mlir::memref::ViewOp::getSizes((mlir::memref::ViewOp *)&v32);
        isValidSymbol = mlir::affine::isValidSymbol(*(_QWORD *)(Sizes + 32 * v15 + 24), v6);
        goto LABEL_24;
      }
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 >= 7)
      {
        v16 = v12 + 1;
        v17 = (v12 + 1) & 0x3FFFFFFFFFFFFFF8;
        v14 = (uint64_t *)(Value + 8 * v17);
        v18 = (int64x2_t *)(Value + 32);
        v19 = 0uLL;
        v20 = vdupq_n_s64(0x8000000000000000);
        v21 = v17;
        v22 = 0uLL;
        do
        {
          v23 = v18[-2];
          v24 = v18[-1];
          v25 = *v18;
          v26 = v18[1];
          v18 += 4;
          v19 = vsubq_s32(v19, vuzp1q_s32((int32x4_t)vceqq_s64(v23, v20), (int32x4_t)vceqq_s64(v24, v20)));
          v22 = vsubq_s32(v22, vuzp1q_s32((int32x4_t)vceqq_s64(v25, v20), (int32x4_t)vceqq_s64(v26, v20)));
          v21 -= 8;
        }
        while (v21);
        v13 = vaddvq_s32(vaddq_s32(v22, v19));
        if (v16 == v17)
        {
LABEL_22:
          v15 = v13;
          goto LABEL_23;
        }
      }
      else
      {
        v13 = 0;
        v14 = (uint64_t *)Value;
      }
      v27 = (uint64_t *)(Value + 8 * v11);
      do
      {
        v28 = *v14++;
        if (v28 == 0x8000000000000000)
          ++v13;
      }
      while (v14 != v27);
      goto LABEL_22;
    }
  }
  return a1;
}

_BYTE *llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::SubViewOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(_BYTE *result, unsigned int **a2)
{
  _BYTE *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isValidSymbol;
  uint64_t Value;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t *v17;
  int32x4_t v18;
  int64x2_t v19;
  uint64_t v20;
  int32x4_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t Sizes;
  unint64_t v29;
  uint64_t v30;

  v2 = result;
  if (!result[9]
    && *(_QWORD *)result
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id)
  {
    v4 = **a2;
    v5 = *(_QWORD *)a2[1];
    v30 = *(_QWORD *)result;
    v29 = *(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v30) + 8) & 0xFFFFFFFFFFFFFFF8;
    v6 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29) + 8 * v4);
    isValidSymbol = 1;
    if (v6 != 0x8000000000000000)
    {
LABEL_24:
      v2[8] = isValidSymbol;
      v2[9] = 1;
      return v2;
    }
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
    if (v9 >= v4)
      v10 = v4;
    else
      v10 = v9;
    if (!v10)
    {
      v14 = 0;
LABEL_23:
      Sizes = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v30);
      isValidSymbol = mlir::affine::isValidSymbol(*(_QWORD *)(Sizes + 32 * v14 + 24), v5);
      goto LABEL_24;
    }
    v11 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v11 >= 7)
    {
      v15 = v11 + 1;
      v16 = (v11 + 1) & 0x3FFFFFFFFFFFFFF8;
      v13 = (uint64_t *)(Value + 8 * v16);
      v17 = (int64x2_t *)(Value + 32);
      v18 = 0uLL;
      v19 = vdupq_n_s64(0x8000000000000000);
      v20 = v16;
      v21 = 0uLL;
      do
      {
        v22 = v17[-2];
        v23 = v17[-1];
        v24 = *v17;
        v25 = v17[1];
        v17 += 4;
        v18 = vsubq_s32(v18, vuzp1q_s32((int32x4_t)vceqq_s64(v22, v19), (int32x4_t)vceqq_s64(v23, v19)));
        v21 = vsubq_s32(v21, vuzp1q_s32((int32x4_t)vceqq_s64(v24, v19), (int32x4_t)vceqq_s64(v25, v19)));
        v20 -= 8;
      }
      while (v20);
      v12 = vaddvq_s32(vaddq_s32(v21, v18));
      if (v15 == v16)
      {
LABEL_22:
        v14 = v12;
        goto LABEL_23;
      }
    }
    else
    {
      v12 = 0;
      v13 = (uint64_t *)Value;
    }
    v26 = (uint64_t *)(Value + 8 * v10);
    do
    {
      v27 = *v13++;
      if (v27 == 0x8000000000000000)
        ++v12;
    }
    while (v13 != v26);
    goto LABEL_22;
  }
  return result;
}

_BYTE *llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::AllocOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(_BYTE *result, unsigned int **a2)
{
  _BYTE *v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isValidSymbol;
  uint64_t Value;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64x2_t *v18;
  int32x4_t v19;
  int64x2_t v20;
  uint64_t v21;
  int32x4_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t DynamicSizes;
  unint64_t v30;
  uint64_t v31;

  v2 = result;
  if (!result[9])
  {
    v3 = *(_QWORD *)result;
    if (*(_QWORD *)result
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id)
    {
      v5 = **a2;
      v6 = *(_QWORD *)a2[1];
      v31 = *(_QWORD *)result;
      v30 = *(_QWORD *)(v3 - 8) & 0xFFFFFFFFFFFFFFF8;
      v7 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30) + 8 * v5);
      isValidSymbol = 1;
      if (v7 != 0x8000000000000000)
      {
LABEL_24:
        v2[8] = isValidSymbol;
        v2[9] = 1;
        return v2;
      }
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
      if (v10 >= v5)
        v11 = v5;
      else
        v11 = v10;
      if (!v11)
      {
        v15 = 0;
LABEL_23:
        DynamicSizes = mlir::memref::AllocOp::getDynamicSizes((mlir::memref::AllocOp *)&v31);
        isValidSymbol = mlir::affine::isValidSymbol(*(_QWORD *)(DynamicSizes + 32 * v15 + 24), v6);
        goto LABEL_24;
      }
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 >= 7)
      {
        v16 = v12 + 1;
        v17 = (v12 + 1) & 0x3FFFFFFFFFFFFFF8;
        v14 = (uint64_t *)(Value + 8 * v17);
        v18 = (int64x2_t *)(Value + 32);
        v19 = 0uLL;
        v20 = vdupq_n_s64(0x8000000000000000);
        v21 = v17;
        v22 = 0uLL;
        do
        {
          v23 = v18[-2];
          v24 = v18[-1];
          v25 = *v18;
          v26 = v18[1];
          v18 += 4;
          v19 = vsubq_s32(v19, vuzp1q_s32((int32x4_t)vceqq_s64(v23, v20), (int32x4_t)vceqq_s64(v24, v20)));
          v22 = vsubq_s32(v22, vuzp1q_s32((int32x4_t)vceqq_s64(v25, v20), (int32x4_t)vceqq_s64(v26, v20)));
          v21 -= 8;
        }
        while (v21);
        v13 = vaddvq_s32(vaddq_s32(v22, v19));
        if (v16 == v17)
        {
LABEL_22:
          v15 = v13;
          goto LABEL_23;
        }
      }
      else
      {
        v13 = 0;
        v14 = (uint64_t *)Value;
      }
      v27 = (uint64_t *)(Value + 8 * v11);
      do
      {
        v28 = *v14++;
        if (v28 == 0x8000000000000000)
          ++v13;
      }
      while (v14 != v27);
      goto LABEL_22;
    }
  }
  return result;
}

void llvm::SmallVectorImpl<mlir::Value>::append<mlir::Value*,void>(uint64_t a1, _BYTE *__src, _BYTE *a3)
{
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = a3 - __src;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + ((a3 - __src) >> 3);
  if (v8 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 8);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  if (__src != a3)
  {
    memcpy((void *)(*(_QWORD *)a1 + 8 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + (v6 >> 3);
}

uint64_t mlir::AffineMap::shiftDims(mlir::AffineMap *this, int a2, unsigned int a3)
{
  int v6;
  int NumSymbols;
  unint64_t v8;
  mlir::MLIRContext ***Results;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  mlir::MLIRContext **v16;
  unsigned int NumDims;
  uint64_t v18;
  _QWORD *LHS;
  uint64_t v20;
  mlir::MLIRContext **v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  v6 = mlir::AffineMap::getNumDims(this) + a2;
  NumSymbols = mlir::AffineMap::getNumSymbols(this);
  Results = (mlir::MLIRContext ***)mlir::AffineMap::getResults(this);
  v10 = v8;
  v23 = v25;
  v24 = 0x400000000;
  v11 = 8 * v8;
  if (8 * v8 < 0x21)
  {
    v12 = 0;
    v14 = 0;
    v13 = v25;
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v8, 8);
    v12 = v24;
    v13 = v23;
    v14 = v24;
    if (!v10)
      goto LABEL_8;
  }
  v15 = &v13[v12];
  do
  {
    v16 = *Results++;
    v22 = v16;
    NumDims = mlir::AffineMap::getNumDims(this);
    *v15++ = mlir::AffineExpr::shiftDims(&v22, NumDims, a2, a3);
    v11 -= 8;
  }
  while (v11);
  v14 = v24;
  v13 = v23;
LABEL_8:
  v18 = (v14 + v10);
  LODWORD(v24) = v14 + v10;
  LHS = (_QWORD *)mlir::AffineBinaryOpExpr::getLHS(this);
  v20 = mlir::AffineMap::get(v6, NumSymbols, (uint64_t)v13, v18, LHS);
  if (v23 != v25)
    free(v23);
  return v20;
}

uint64_t mlir::AffineMap::shiftSymbols(mlir::AffineMap *this, int a2, unsigned int a3)
{
  int NumDims;
  int v7;
  unint64_t v8;
  mlir::MLIRContext ***Results;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  mlir::MLIRContext **v16;
  unsigned int NumSymbols;
  uint64_t v18;
  _QWORD *LHS;
  uint64_t v20;
  mlir::MLIRContext **v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  NumDims = mlir::AffineMap::getNumDims(this);
  v7 = mlir::AffineMap::getNumSymbols(this) + a2;
  Results = (mlir::MLIRContext ***)mlir::AffineMap::getResults(this);
  v10 = v8;
  v23 = v25;
  v24 = 0x400000000;
  v11 = 8 * v8;
  if (8 * v8 < 0x21)
  {
    v12 = 0;
    v14 = 0;
    v13 = v25;
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v8, 8);
    v12 = v24;
    v13 = v23;
    v14 = v24;
    if (!v10)
      goto LABEL_8;
  }
  v15 = &v13[v12];
  do
  {
    v16 = *Results++;
    v22 = v16;
    NumSymbols = mlir::AffineMap::getNumSymbols(this);
    *v15++ = mlir::AffineExpr::shiftSymbols(&v22, NumSymbols, a2, a3);
    v11 -= 8;
  }
  while (v11);
  v14 = v24;
  v13 = v23;
LABEL_8:
  v18 = (v14 + v10);
  LODWORD(v24) = v14 + v10;
  LHS = (_QWORD *)mlir::AffineBinaryOpExpr::getLHS(this);
  v20 = mlir::AffineMap::get(NumDims, v7, (uint64_t)v13, v18, LHS);
  if (v23 != v25)
    free(v23);
  return v20;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::Attribute>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD **v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v26, a3))
    return 0;
  v13 = v26;
  *a2 = v26;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    v24 = "invalid kind of attribute specified";
    v25 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v27, a1, v12, &v24);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    if (v34)
    {
      v16 = (_QWORD **)__p;
      if (__p)
      {
        v17 = v33;
        v18 = __p;
        if (v33 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v33 = v16;
        operator delete(v18);
      }
      v19 = v30;
      if (v30)
      {
        v20 = v31;
        v21 = v30;
        if (v31 != v30)
        {
          do
          {
            v23 = (void *)*--v20;
            v22 = v23;
            *v20 = 0;
            if (v23)
              operator delete[](v22);
          }
          while (v20 != v19);
          v21 = v30;
        }
        v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29)
        free(v28);
    }
  }
  return v14;
}

uint64_t foldLoopBounds(mlir::affine::AffineForOp)::$_0::operator()(uint64_t **a1, int a2)
{
  char v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void **v10;
  uint64_t DefiningOp;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void **v23;
  unsigned int v24;
  int v25;
  void **p_p;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v34;
  unint64_t ConstantMap;
  mlir::MLIRContext *v36;
  mlir::MLIRContext *v37;
  unint64_t v38;
  uint64_t v40;
  void *__p;
  unsigned int v42;
  int *Value;
  void *v44;
  uint64_t v45;
  _BYTE v46[32];
  void *v47;
  uint64_t v48;
  _BYTE v49[64];
  void *v50;
  uint64_t v51;
  uint64_t v52;

  v2 = a2;
  v52 = *MEMORY[0x1E0C80C00];
  v47 = v49;
  v48 = 0x800000000;
  v4 = **a1;
  v5 = *(unsigned int *)(v4 + 44);
  v6 = v4 + 16 * ((v5 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(v4 + 44)))
    v6 = 0;
  v7 = *(unsigned int *)(v6 + 24);
  if (a2)
  {
    if ((v5 & 0x800000) != 0)
    {
      v8 = *(_QWORD *)(v4 + 72);
      if (!*(_DWORD *)(v6 + 24))
        goto LABEL_23;
    }
    else
    {
      v8 = 0;
      if (!*(_DWORD *)(v6 + 24))
        goto LABEL_23;
    }
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 28);
    if ((v5 & 0x800000) != 0)
    {
      v8 = *(_QWORD *)(v4 + 72) + 32 * v7;
      v7 = (v9 + v7) - v7;
      if (!v7)
        goto LABEL_23;
    }
    else
    {
      v8 = 32 * v7;
      v7 = (v9 + v7) - v7;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = (void **)(v8 + 24);
  do
  {
    v50 = *v10;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v50);
    v12 = DefiningOp;
    if (DefiningOp)
    {
      if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
      {
        v44 = v46;
        v45 = 0x100000000;
        mlir::Operation::fold(v12, 0, 0, (uint64_t)&v44);
        v13 = *(_QWORD *)v44;
        if (v44 != v46)
          free(v44);
        v12 = v13 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        v12 = 0;
      }
    }
    v14 = v48;
    if (v48 >= (unint64_t)HIDWORD(v48))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v48 + 1, 8);
      v14 = v48;
    }
    *((_QWORD *)v47 + v14) = v12;
    LODWORD(v48) = v48 + 1;
    v10 += 4;
    --v7;
  }
  while (v7);
LABEL_23:
  v15 = *a1;
  if ((v2 & 1) != 0)
  {
    v16 = *(void **)(*v15 + 16 * (((unint64_t)*(unsigned int *)(*v15 + 44) >> 23) & 1) + 64);
  }
  else
  {
    v17 = *v15;
    v18 = *(unsigned int *)(v17 + 44);
    v19 = v17 + 16 * ((v18 >> 23) & 1) + 64;
    if (!BYTE3(v18))
      v19 = 0;
    v16 = *(void **)(v19 + 16);
  }
  v44 = v16;
  Value = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
  v44 = v46;
  v45 = 0x400000000;
  if (mlir::AffineMap::constantFold(&Value, (uint64_t)v47, v48, (uint64_t)&v44, 0))
  {
    v50 = *(void **)v44;
    mlir::IntegerAttr::getValue(&v50, (llvm::APInt *)&__p);
    if (v45 >= 2)
    {
      v20 = 8 * v45;
      v21 = 8;
      if ((v2 & 1) == 0)
      {
        while (1)
        {
          v40 = *(_QWORD *)((char *)v44 + v21);
          mlir::IntegerAttr::getValue(&v40, (llvm::APInt *)&v50);
          v25 = llvm::APInt::compareSigned((llvm::APInt *)&__p, (const llvm::APInt *)&v50);
          if (v25 >= 0)
            p_p = &v50;
          else
            p_p = &__p;
          v27 = v42;
          if (v42 > 0x40)
            goto LABEL_55;
          if (v25 >= 0)
            v27 = v51;
          if (v27 > 0x40)
          {
LABEL_55:
            llvm::APInt::assignSlowCase((const void **)&__p, (const void **)p_p);
            if (v51 >= 0x41)
            {
LABEL_56:
              if (v50)
                operator delete[](v50);
            }
          }
          else
          {
            __p = *p_p;
            v42 = v27;
            if (v51 >= 0x41)
              goto LABEL_56;
          }
          v21 += 8;
          if (v20 == v21)
            goto LABEL_58;
        }
      }
      do
      {
        v40 = *(_QWORD *)((char *)v44 + v21);
        mlir::IntegerAttr::getValue(&v40, (llvm::APInt *)&v50);
        v22 = llvm::APInt::compareSigned((llvm::APInt *)&__p, (const llvm::APInt *)&v50);
        if (v22 <= 0)
          v23 = &v50;
        else
          v23 = &__p;
        v24 = v42;
        if (v42 > 0x40)
          goto LABEL_42;
        if (v22 <= 0)
          v24 = v51;
        if (v24 >= 0x41)
        {
LABEL_42:
          llvm::APInt::assignSlowCase((const void **)&__p, (const void **)v23);
          if (v51 >= 0x41)
          {
LABEL_43:
            if (v50)
              operator delete[](v50);
          }
        }
        else
        {
          __p = *v23;
          v42 = v24;
          if (v51 >= 0x41)
            goto LABEL_43;
        }
        v21 += 8;
      }
      while (v20 != v21);
    }
LABEL_58:
    v28 = *a1;
    if ((v2 & 1) != 0)
    {
      if (v42 > 0x40)
        v29 = *(_QWORD *)__p;
      else
        v29 = (uint64_t)((_QWORD)__p << -(uint64_t)v42) >> -(uint64_t)v42;
      mlir::ValueRange::ValueRange((unint64_t *)&v50, 0, 0);
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*v28 + 24));
      ConstantMap = mlir::AffineMap::getConstantMap((mlir::AffineMap *)v29, Context, v34);
      mlir::affine::AffineForOp::setLowerBound(v28, (uint64_t)v50, v51, ConstantMap);
      if (v42 < 0x41)
        goto LABEL_72;
    }
    else
    {
      if (v42 > 0x40)
        v32 = *(_QWORD *)__p;
      else
        v32 = (uint64_t)((_QWORD)__p << -(uint64_t)v42) >> -(uint64_t)v42;
      mlir::ValueRange::ValueRange((unint64_t *)&v50, 0, 0);
      v36 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*v28 + 24));
      v38 = mlir::AffineMap::getConstantMap((mlir::AffineMap *)v32, v36, v37);
      mlir::affine::AffineForOp::setUpperBound(v28, (uint64_t)v50, v51, v38);
      if (v42 < 0x41)
        goto LABEL_72;
    }
    if (__p)
      operator delete[](__p);
LABEL_72:
    v30 = 1;
    v31 = v44;
    if (v44 == v46)
      goto LABEL_74;
    goto LABEL_73;
  }
  v30 = 0;
  v31 = v44;
  if (v44 != v46)
LABEL_73:
    free(v31);
LABEL_74:
  if (v47 != v49)
    free(v47);
  return v30;
}

void simplifyMinOrMaxExprWithOperands(mlir::AffineExpr *a1, uint64_t *a2, unint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t LowerBound;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t UpperBound;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unsigned int Kind;
  unsigned int v21;
  uint64_t Results;
  uint64_t v23;
  void **v24;
  uint64_t i;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t LHS;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t NumDims;
  uint64_t NumSymbols;
  unint64_t BoundForAffineExpr;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t AffineConstantExpr;
  char *v53;
  mlir **v54;
  mlir *v55;
  mlir::MLIRContext *DesiredBytecodeVersion;
  mlir::MLIRContext *v57;
  char *v58;
  unint64_t v59;
  _BYTE *v60;
  char *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  mlir **v66;
  mlir *v67;
  mlir::MLIRContext *v68;
  mlir::MLIRContext *v69;
  char *v70;
  unint64_t v71;
  _BYTE *v72;
  char *v73;
  _BYTE *v74;
  int v75;
  int v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[32];
  void *v84;
  uint64_t v85;
  _BYTE v86[64];
  void *v87;
  uint64_t v88;
  _BYTE v89[64];
  void *v90;
  uint64_t v91;
  _BYTE v92[48];
  char *v93;
  uint64_t v94;
  _QWORD v95[8];

  v95[6] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return;
  v93 = (char *)v95;
  v94 = 0x300000000;
  v90 = v92;
  v91 = 0x300000000;
  if (a3 >= 4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, a3, 16);
    if (a3 > HIDWORD(v91))
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v92, a3, 16);
  }
  v8 = 8 * a3;
  do
  {
    v9 = *a2;
    LowerBound = getLowerBound(*a2);
    v12 = v11;
    v13 = v94;
    if (v94 >= (unint64_t)HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, v94 + 1, 16);
      v13 = v94;
    }
    v14 = (uint64_t *)&v93[16 * v13];
    *v14 = LowerBound;
    v14[1] = v12;
    LODWORD(v94) = v94 + 1;
    UpperBound = getUpperBound(v9);
    v17 = v16;
    v18 = v91;
    if (v91 >= (unint64_t)HIDWORD(v91))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v92, v91 + 1, 16);
      v18 = v91;
    }
    v19 = (unint64_t *)((char *)v90 + 16 * v18);
    *v19 = UpperBound;
    v19[1] = v17;
    LODWORD(v91) = v91 + 1;
    ++a2;
    v8 -= 8;
  }
  while (v8);
  v87 = v89;
  v88 = 0x400000000;
  v84 = v86;
  v85 = 0x400000000;
  Kind = mlir::AffineExpr::getKind(a1);
  if (HIDWORD(v88) < Kind)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, Kind, 16);
    v21 = mlir::AffineExpr::getKind(a1);
    if (HIDWORD(v85) >= v21)
    {
LABEL_15:
      Results = mlir::AffineMap::getResults(a1);
      if (!v23)
        goto LABEL_34;
      goto LABEL_19;
    }
  }
  else
  {
    v21 = mlir::AffineExpr::getKind(a1);
    if (HIDWORD(v85) >= v21)
      goto LABEL_15;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, v21, 16);
  Results = mlir::AffineMap::getResults(a1);
  if (v23)
  {
LABEL_19:
    v24 = (void **)Results;
    for (i = 8 * v23; i; i -= 8)
    {
      v28 = *v24;
      v81 = *v24;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v81) == 5)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v81, (uint64_t)v28);
        if (!v81)
          goto LABEL_29;
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v81, 0);
        if (!v81)
        {
LABEL_29:
          NumDims = mlir::AffineMap::getNumDims(a1);
          NumSymbols = mlir::AffineMap::getNumSymbols(a1);
          BoundForAffineExpr = mlir::getBoundForAffineExpr((uint64_t)v28, NumDims, NumSymbols, (uint64_t)v93, v94, (uint64_t)v90, v91, 0);
          v38 = v37;
          v39 = v88;
          if (v88 >= (unint64_t)HIDWORD(v88))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 16);
            v39 = v88;
          }
          v40 = (unint64_t *)((char *)v87 + 16 * v39);
          *v40 = BoundForAffineExpr;
          v40[1] = v38;
          LODWORD(v88) = v88 + 1;
          v41 = mlir::AffineMap::getNumDims(a1);
          v42 = mlir::AffineMap::getNumSymbols(a1);
          v43 = mlir::getBoundForAffineExpr((uint64_t)v28, v41, v42, (uint64_t)v93, v94, (uint64_t)v90, v91, 1);
          v27 = v44;
          v45 = v85;
          if (v85 >= (unint64_t)HIDWORD(v85))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, v85 + 1, 16);
            v45 = v85;
          }
          v26 = (char *)v84 + 16 * v45;
          *(_QWORD *)v26 = v43;
          goto LABEL_21;
        }
      }
      LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81);
      v30 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 16);
        v30 = v88;
      }
      v31 = (uint64_t *)((char *)v87 + 16 * v30);
      *v31 = LHS;
      v31[1] = 1;
      LODWORD(v88) = v88 + 1;
      v32 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81);
      v33 = v85;
      if (v85 >= (unint64_t)HIDWORD(v85))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, v85 + 1, 16);
        v33 = v85;
      }
      v26 = (char *)v84 + 16 * v33;
      *(_QWORD *)v26 = v32;
      v27 = 1;
LABEL_21:
      *((_QWORD *)v26 + 1) = v27;
      LODWORD(v85) = v85 + 1;
      ++v24;
    }
  }
LABEL_34:
  v81 = v83;
  v82 = 0x400000000;
  v46 = mlir::AffineMap::getResults(a1);
  if (v47)
  {
    v48 = (uint64_t *)v46;
    v49 = (uint64_t *)(v46 + 8 * v47);
    v50 = 0;
    if ((a4 & 1) != 0)
    {
      do
      {
        AffineConstantExpr = *v48;
        v80 = *v48;
        v53 = (char *)v84;
        if (*((_BYTE *)v87 + 16 * v50 + 8))
        {
          v54 = (mlir **)((char *)v84 + 16 * v50);
          if (*((_BYTE *)v54 + 8))
          {
            v55 = (mlir *)*((_QWORD *)v87 + 2 * v50);
            if (v55 == *v54)
            {
              DesiredBytecodeVersion = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&v80);
              AffineConstantExpr = mlir::getAffineConstantExpr(v55, DesiredBytecodeVersion, v57);
              v80 = AffineConstantExpr;
              v53 = (char *)v84;
            }
          }
        }
        v58 = &v53[16 * v50];
        if (v58[8] && (_DWORD)v88)
        {
          v59 = 0;
          v60 = v87;
          v61 = (char *)v87 + 16 * v50;
          v62 = v53 + 8;
          while (v50 == v59
               || !v60[8]
               || *(_QWORD *)v60 <= *(_QWORD *)v58
               && (*(_QWORD *)v60 < *(_QWORD *)v58
                || *v62
                && v61[8]
                && *(_QWORD *)v61 == *(_QWORD *)v58
                && v59 > v50
                && *(_QWORD *)v60 == *((_QWORD *)v62 - 1)))
          {
            ++v59;
            v62 += 16;
            v60 += 16;
            if (v60 == (char *)v87 + 16 * v88)
              goto LABEL_37;
          }
        }
        else
        {
LABEL_37:
          v51 = v82;
          if (v82 >= (unint64_t)HIDWORD(v82))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v82 + 1, 8);
            v51 = v82;
          }
          *((_QWORD *)v81 + v51) = AffineConstantExpr;
          LODWORD(v82) = v82 + 1;
        }
        ++v50;
        ++v48;
      }
      while (v48 != v49);
    }
    else
    {
      do
      {
        v64 = *v48;
        v80 = *v48;
        v65 = (char *)v87;
        if (*((_BYTE *)v87 + 16 * v50 + 8))
        {
          v66 = (mlir **)((char *)v84 + 16 * v50);
          if (*((_BYTE *)v66 + 8))
          {
            v67 = (mlir *)*((_QWORD *)v87 + 2 * v50);
            if (v67 == *v66)
            {
              v68 = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&v80);
              v64 = mlir::getAffineConstantExpr(v67, v68, v69);
              v80 = v64;
              v65 = (char *)v87;
            }
          }
        }
        v70 = &v65[16 * v50];
        if (v70[8] && (_DWORD)v85)
        {
          v71 = 0;
          v72 = v84;
          v73 = (char *)v84 + 16 * v50;
          v74 = v65 + 8;
          while (v50 == v71
               || !v72[8]
               || *(_QWORD *)v72 >= *(_QWORD *)v70
               && (*(_QWORD *)v72 > *(_QWORD *)v70
                || *v74
                && v73[8]
                && *(_QWORD *)v70 == *(_QWORD *)v73
                && v71 > v50
                && *(_QWORD *)v72 == *((_QWORD *)v74 - 1)))
          {
            ++v71;
            v74 += 16;
            v72 += 16;
            if (v72 == (char *)v84 + 16 * v85)
              goto LABEL_59;
          }
        }
        else
        {
LABEL_59:
          v63 = v82;
          if (v82 >= (unint64_t)HIDWORD(v82))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v82 + 1, 8);
            v63 = v82;
          }
          *((_QWORD *)v81 + v63) = v64;
          LODWORD(v82) = v82 + 1;
        }
        ++v50;
        ++v48;
      }
      while (v48 != v49);
    }
  }
  v75 = mlir::AffineMap::getNumDims(a1);
  v76 = mlir::AffineMap::getNumSymbols(a1);
  v77 = v81;
  v78 = v82;
  v79 = (_QWORD *)mlir::AffineBinaryOpExpr::getLHS(a1);
  *(_QWORD *)a1 = mlir::AffineMap::get(v75, v76, (uint64_t)v77, v78, v79);
  if (v81 != v83)
    free(v81);
  if (v84 != v86)
    free(v84);
  if (v87 != v89)
    free(v87);
  if (v90 != v92)
    free(v90);
  if (v93 != (char *)v95)
    free(v93);
}

uint64_t getLowerBound(uint64_t a1)
{
  mlir::Block *v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;

  if (!a1)
    return 0;
  if ((*(_QWORD *)(a1 + 8) & 7) != 7)
    return 0;
  v2 = *(mlir::Block **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(mlir::Block::getParent(v2) + 16);
  v4 = v3
    && *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id;
  if (!v4)
    return 0;
  v6 = *(unsigned int *)(v3 + 44);
  v7 = (uint64_t *)(v3 + 64 + 16 * ((v6 >> 23) & 1));
  v8 = *(_QWORD *)((((unint64_t)v7 + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(v3 + 40)
                 + 8);
  v4 = v8 == 0;
  v9 = v8 - 8;
  if (v4)
    v9 = 0;
  if (**(_QWORD **)(v9 + 48) != a1)
    return 0;
  Value = *v7;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  if (!mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value))
    return 0;
  Value = *(_QWORD *)(v3 + 64 + 16 * (((unint64_t)*(unsigned int *)(v3 + 44) >> 23) & 1));
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  return mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value);
}

unint64_t getUpperBound(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  mlir::Block *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 isSingleConstant;
  uint64_t v14;
  uint64_t SingleConstantResult;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p;
  unsigned int v23;
  uint64_t v24;

  LOBYTE(v1) = 0;
  if (!a1)
    return 0;
  v3 = 0;
  if ((*(_QWORD *)(a1 + 8) & 7) == 7)
  {
    v4 = *(mlir::Block **)(a1 + 16);
    if (v4
      && ((v5 = *(_QWORD *)(mlir::Block::getParent(v4) + 16)) != 0
        ? (v6 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
        : (v6 = 0),
          v6))
    {
      LOBYTE(v1) = 0;
      v3 = 0;
      v8 = v5 + 64;
      v9 = *(unsigned int *)(v5 + 44);
      v10 = *(_QWORD *)(((v5 + 64 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *(unsigned int *)(v5 + 40)
                      + 8);
      v6 = v10 == 0;
      v11 = v10 - 8;
      if (v6)
        v11 = 0;
      if (**(_QWORD **)(v11 + 48) == a1)
      {
        v12 = BYTE3(v9) ? v5 + 64 + 16 * ((v9 >> 23) & 1) : 0;
        __p = *(void **)(v12 + 16);
        __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
        isSingleConstant = mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&__p);
        LOBYTE(v1) = 0;
        v3 = 0;
        if (isSingleConstant)
        {
          __p = *(void **)(v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1));
          __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
          if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&__p))
          {
            if (HIBYTE(*(_DWORD *)(v5 + 44)))
              v14 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            else
              v14 = 0;
            __p = *(void **)(v14 + 16);
            __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
            SingleConstantResult = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p);
            if (HIBYTE(*(_DWORD *)(v5 + 44)))
              v16 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            else
              v16 = 0;
            __p = *(void **)(v16 + 16);
            __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
            v17 = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p);
            __p = *(void **)(v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1));
            __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
            v18 = v17 + ~mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p);
            if (HIBYTE(*(_DWORD *)(v5 + 44)))
              v19 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            else
              v19 = 0;
            v24 = *(_QWORD *)(v19 + 8);
            mlir::IntegerAttr::getValue(&v24, (llvm::APInt *)&__p);
            if (v23 > 0x40)
            {
              v20 = *(_QWORD *)__p;
              operator delete[](__p);
            }
            else
            {
              v20 = (uint64_t)((_QWORD)__p << -(uint64_t)v23) >> -(uint64_t)v23;
            }
            v1 = SingleConstantResult + ~(v18 % v20);
          }
          else
          {
            if (HIBYTE(*(_DWORD *)(v5 + 44)))
              v21 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            else
              v21 = 0;
            __p = *(void **)(v21 + 16);
            __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
            v1 = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p) - 1;
          }
          v3 = v1 & 0xFFFFFFFFFFFFFF00;
        }
      }
    }
    else
    {
      LOBYTE(v1) = 0;
      v3 = 0;
    }
  }
  return v3 | v1;
}

uint64_t deduplicateAndResolveOperands(mlir::AsmParser *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  mlir::IndexType **v12;
  mlir::MLIRContext *v13;
  uint64_t IndexType;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t AffineDimExpr;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  mlir *v29;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v31;
  int v32;
  void *v33;
  uint64_t *v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[7];

  v38[6] = *MEMORY[0x1E0C80C00];
  v12 = (mlir::IndexType **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v12, v13);
  if (!a3)
    return 1;
  v15 = IndexType;
  v16 = &a2[6 * a3];
  v35 = v16;
  while (2)
  {
    v36 = v38;
    v37 = 0x600000000;
    v17 = *((unsigned int *)a2 + 2);
    if (!(_DWORD)v17)
    {
LABEL_23:
      v32 = 0;
      v33 = v36;
      if (v36 == v38)
        goto LABEL_25;
      goto LABEL_24;
    }
    v18 = *a2;
    v19 = 32 * v17;
    do
    {
      if (!(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 696))(a1, v18, v15, &v36))
      {
        v32 = 1;
        v33 = v36;
        if (v36 == v38)
          goto LABEL_25;
LABEL_24:
        free(v33);
        goto LABEL_25;
      }
      v18 += 32;
      v19 -= 32;
    }
    while (v19);
    if (!(_DWORD)v37)
      goto LABEL_23;
    v20 = (uint64_t *)v36;
    v21 = (char *)v36 + 8 * v37;
    while (2)
    {
      v24 = *v20;
      v25 = *(char **)a4;
      v26 = *(unsigned int *)(a4 + 8);
      v27 = *(char **)a4;
      if ((_DWORD)v26)
      {
        v28 = 8 * v26;
        v27 = *(char **)a4;
        while (*(_QWORD *)v27 != v24)
        {
          v27 += 8;
          v28 -= 8;
          if (!v28)
          {
            v27 = &v25[8 * v26];
            break;
          }
        }
      }
      v29 = (mlir *)((unint64_t)(v27 - v25) >> 3);
      if ((_DWORD)v26 == (_DWORD)v29)
      {
        if (v26 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v26 + 1, 8);
          v26 = *(unsigned int *)(a4 + 8);
          v25 = *(char **)a4;
        }
        *(_QWORD *)&v25[8 * v26] = v24;
        ++*(_DWORD *)(a4 + 8);
      }
      Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
      if (a6 == 6)
      {
        AffineDimExpr = mlir::getAffineDimExpr(v29, Context, v31);
        v23 = *(unsigned int *)(a5 + 8);
        if (v23 >= *(unsigned int *)(a5 + 12))
        {
LABEL_22:
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v23 + 1, 8);
          v23 = *(unsigned int *)(a5 + 8);
        }
      }
      else
      {
        AffineDimExpr = mlir::getAffineSymbolExpr(v29, Context, v31);
        v23 = *(unsigned int *)(a5 + 8);
        if (v23 >= *(unsigned int *)(a5 + 12))
          goto LABEL_22;
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v23) = AffineDimExpr;
      ++*(_DWORD *)(a5 + 8);
      if (++v20 != (uint64_t *)v21)
        continue;
      break;
    }
    v32 = 0;
    v16 = v35;
    v33 = v36;
    if (v36 != v38)
      goto LABEL_24;
LABEL_25:
    if (!v32)
    {
      a2 += 6;
      if (a2 == v16)
        return 1;
      continue;
    }
    return 0;
  }
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseAffineMapWithMinMax(mlir::OpAsmParser &,mlir::OperationState &,`anonymous namespace'::MinMaxKind)::$_0>(_QWORD *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  char *Results;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  unsigned int NumDims;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  int v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  size_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int Kind;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[32];
  void *Value;
  uint64_t v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (*(_DWORD *)a1[1])
    v3 = "max";
  else
    v3 = "min";
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v2 + 376))(v2, v3, 3))
  {
    *(_DWORD *)(a1[2] + 8) = 0;
    v44 = 0;
    if ((*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*a1 + 704))(*a1))
    {
      mlir::NamedAttrList::erase(a1[4] + 112, *(const void **)a1[3], *(_QWORD *)(a1[3] + 8));
      v4 = a1[5];
      Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
      Results = (char *)mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
      llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(v4, *(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 8), Results, &Results[8 * v6]);
      v7 = (char **)a1[2];
      v8 = *v7;
      v9 = *((unsigned int *)v7 + 2);
      Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
      NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      if (v9 >= NumDims)
        v11 = NumDims;
      else
        v11 = v9;
      Value = v50;
      v49 = 0x100000000;
      if (v11 < 2)
      {
        if (!(_DWORD)v11)
        {
          v30 = 0;
LABEL_23:
          LODWORD(v49) = v30 + v11;
          v45 = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
          v31 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v45);
          v32 = v31;
          v33 = &v8[32 * v31];
          v45 = v47;
          v46 = 0x100000000;
          v34 = 32 * v9 - 32 * v31;
          if (v34 < 0x21)
          {
            v35 = 0;
            if (v31 == (_DWORD)v9)
            {
LABEL_28:
              LODWORD(v46) = v35 + (v34 >> 5);
              v36 = a1[6];
              v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
              Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v43);
              llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>>::append(v36, Kind, (unint64_t)&Value);
              v38 = a1[7];
              v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
              v39 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v43);
              llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>>::append(v38, v39, (unint64_t)&v45);
              v40 = a1[8];
              v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
              v41 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v43);
              v42 = *(unsigned int *)(v40 + 8);
              if (v42 >= *(_DWORD *)(v40 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v40, (void *)(v40 + 16), v42 + 1, 4);
                LODWORD(v42) = *(_DWORD *)(v40 + 8);
              }
              *(_DWORD *)(*(_QWORD *)v40 + 4 * v42) = v41;
              ++*(_DWORD *)(v40 + 8);
              if (v45 != v47)
                free(v45);
              if (Value != v50)
                free(Value);
              return 1;
            }
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, (uint64_t)v34 >> 5, 32);
            v35 = v46;
            if (v32 == (_DWORD)v9)
              goto LABEL_28;
          }
          memcpy((char *)v45 + 32 * v35, v33, v34);
          v35 = v46;
          goto LABEL_28;
        }
        v12 = 0;
        v13 = v50;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v50, v11, 32);
        v12 = v49;
        v13 = Value;
      }
      memcpy(&v13[4 * v12], v8, 32 * v11);
      v30 = v49;
      goto LABEL_23;
    }
    return 0;
  }
  v14 = *a1;
  v15 = a1[6];
  v16 = *(_DWORD *)(v15 + 8);
  if (v16 < *(_DWORD *)(v15 + 12))
  {
    v17 = (_QWORD *)(*(_QWORD *)v15 + 48 * v16);
    *v17 = v17 + 2;
    v17[1] = 0x100000000;
    LODWORD(v17) = *(_DWORD *)(v15 + 8) + 1;
    *(_DWORD *)(v15 + 8) = (_DWORD)v17;
    v18 = *(_QWORD *)v15 + 48 * v17 - 48;
    v19 = a1[7];
    v20 = *(_DWORD *)(v19 + 8);
    if (v20 < *(_DWORD *)(v19 + 12))
      goto LABEL_13;
LABEL_37:
    v22 = llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::growAndEmplaceBack<>(v19);
    v23 = a1[5];
    v24 = *(unsigned int *)(v23 + 8);
    if (v24 < *(_DWORD *)(v23 + 12))
      goto LABEL_14;
    goto LABEL_38;
  }
  v18 = llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::growAndEmplaceBack<>(v15);
  v19 = a1[7];
  v20 = *(_DWORD *)(v19 + 8);
  if (v20 >= *(_DWORD *)(v19 + 12))
    goto LABEL_37;
LABEL_13:
  v21 = (_QWORD *)(*(_QWORD *)v19 + 48 * v20);
  *v21 = v21 + 2;
  v21[1] = 0x100000000;
  LODWORD(v21) = *(_DWORD *)(v19 + 8) + 1;
  *(_DWORD *)(v19 + 8) = (_DWORD)v21;
  v22 = *(_QWORD *)v19 + 48 * v21 - 48;
  v23 = a1[5];
  v24 = *(unsigned int *)(v23 + 8);
  if (v24 < *(_DWORD *)(v23 + 12))
  {
LABEL_14:
    v25 = *(_QWORD *)v23;
    *(_QWORD *)(*(_QWORD *)v23 + 8 * v24) = 0;
    goto LABEL_15;
  }
LABEL_38:
  llvm::SmallVectorBase<unsigned int>::grow_pod(v23, (void *)(v23 + 16), v24 + 1, 8);
  *(_QWORD *)(*(_QWORD *)v23 + 8 * *(unsigned int *)(v23 + 8)) = 0;
  LODWORD(v24) = *(_DWORD *)(v23 + 8);
  v25 = *(_QWORD *)v23;
LABEL_15:
  v26 = v24 + 1;
  *(_DWORD *)(v23 + 8) = v26;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 712))(v14, v18, v22, v25 + 8 * v26 - 8))return 0;
  v27 = a1[8];
  v28 = *(unsigned int *)(v27 + 8);
  if (v28 >= *(_DWORD *)(v27 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v27, (void *)(v27 + 16), v28 + 1, 4);
    LODWORD(v28) = *(_DWORD *)(v27 + 8);
  }
  result = 1;
  *(_DWORD *)(*(_QWORD *)v27 + 4 * v28) = 1;
  ++*(_DWORD *)(v27 + 8);
  return result;
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>>::append(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;

  v3 = a3;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v6 + a2;
  if (v7 > *(unsigned int *)(a1 + 12))
  {
    v15 = *(_QWORD *)a1 + 48 * v6;
    if (*(_QWORD *)a1 <= a3 && v15 > a3)
    {
      v17 = a3 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::grow(a1, v7);
      v3 = *(_QWORD *)a1 + v17;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::grow(a1, v7);
    }
  }
  v8 = *(_DWORD *)(a1 + 8);
  if (a2)
  {
    v9 = (_QWORD *)(*(_QWORD *)a1 + 48 * v8);
    v10 = a2;
    while (1)
    {
      v12 = v9 + 2;
      *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v9 == (_QWORD *)v3)
        goto LABEL_7;
      v13 = *(_DWORD *)(v3 + 8);
      if (!v13)
        goto LABEL_7;
      if (v13 < 2)
      {
        v11 = 32;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v9 + 2, *(unsigned int *)(v3 + 8), 32);
        v14 = *(unsigned int *)(v3 + 8);
        if (!(_DWORD)v14)
          goto LABEL_6;
        v12 = (void *)*v9;
        v11 = 32 * v14;
      }
      memcpy(v12, *(const void **)v3, v11);
LABEL_6:
      *((_DWORD *)v9 + 2) = v13;
LABEL_7:
      v9 += 6;
      if (!--v10)
      {
        v8 = *(_DWORD *)(a1 + 8);
        break;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v8 + a2;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 48, &v14);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = 48 * v7;
    v9 = v4;
    do
    {
      *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v6[2])
        llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand>::operator=((uint64_t)v9, (uint64_t)v6);
      v9 += 6;
      v6 += 12;
      v8 -= 48;
    }
    while (v8);
    v6 = *(_DWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        v12 = *(_DWORD **)&v6[v11 - 12];
        if (&v6[v11 - 8] != v12)
          free(v12);
        v11 -= 12;
      }
      while (v11 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::growAndEmplaceBack<>(uint64_t a1)
{
  _DWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  unint64_t v16;

  v16 = 0;
  v2 = (_DWORD *)(a1 + 16);
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 48, &v16);
  v4 = v3;
  v5 = &v3[6 * *(unsigned int *)(a1 + 8)];
  *v5 = v5 + 2;
  v5[1] = 0x100000000;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = 48 * v7;
    v9 = v3;
    do
    {
      *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v6[2])
        llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand>::operator=((uint64_t)v9, (uint64_t)v6);
      v9 += 6;
      v6 += 12;
      v8 -= 48;
    }
    while (v8);
    v6 = *(_DWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        v12 = *(_DWORD **)&v6[v11 - 12];
        if (&v6[v11 - 8] != v12)
          free(v12);
        v11 -= 12;
      }
      while (v11 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v13 = v16;
  if (v6 != v2)
    free(v6);
  *(_QWORD *)a1 = v4;
  v14 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 12) = v13;
  return (uint64_t)&v4[6 * v14 - 6];
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>(_QWORD *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
      v15 = 83;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v2[183]);
}

uint64_t mlir::RegisteredOperationName::insert<mlir::affine::AffineDelinearizeIndexOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"affine.delinearize_index", 24, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineDelinearizeIndexOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E433D8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::affine::AffineIfOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"affine.if", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E428E8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::affine::AffinePrefetchOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"affine.prefetch", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffinePrefetchOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E43180;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::affine::AffinePrefetchOp::getAttributeNames(void)::attrNames, 4);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::Model(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
    v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineDmaStartOp]";
    v19 = 80;
    v11 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
    if (v19 >= v11)
      v12 = v11;
    else
      v12 = v19;
    v13 = &v18[v12];
    v14 = v19 - v12;
    if (v19 - v12 >= 0x12)
      v15 = 18;
    else
      v15 = v19 - v12;
    v16 = v14 - v15;
    if (v16 >= v16 - 1)
      v17 = v16 - 1;
    else
      v17 = v16;
    mlir::detail::TypeIDResolver<mlir::affine::AffineDmaStartOp,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
  }
  v5 = mlir::detail::TypeIDResolver<mlir::affine::AffineDmaStartOp,void>::resolveTypeID(void)::id;
  v20 = v22;
  v21 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>((uint64_t)&v20);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>((uint64_t)&v20);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.dma_start", 16, a2, v5, (uint64_t)&v20);
  v6 = v20;
  if ((_DWORD)v21)
  {
    v7 = 16 * v21;
    v8 = (void **)((char *)v20 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    v6 = v20;
  }
  if (v6 != v22)
    free(v6);
  *a1 = &unk_1E0E42FF0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::foldHook(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  llvm **v7;
  llvm *v9[2];
  unint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v9, a2);
  v6 = v10;
  if (v10 >= 8)
  {
    if ((v10 & 4) != 0)
    {
      if ((v10 & 2) != 0)
        v7 = v9;
      else
        v7 = (llvm **)v9[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7, v2, v3, v4);
    }
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v9[0], v9[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineDmaStartOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getAffineMapAttrForMemRef;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[500], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::affine::AffineDmaStartOp::getAffineMapAttrForMemRef(&v4, a3);
}

uint64_t mlir::affine::AffineDmaStartOp::getAffineMapAttrForMemRef(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  mlir::StringAttr *Context;
  const char *v7;
  uint64_t v8;
  uint64_t InherentAttr;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;

  v3 = *a1;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 72) + 24) == a2)
  {
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v3 + 24));
    v12 = 261;
    v7 = "src_map";
  }
  else
  {
    v11[0] = mlir::Operation::getInherentAttr(v3, (uint64_t)"src_map", 7);
    v11[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v11);
    v5 = *(_QWORD *)(*(_QWORD *)(*a1 + 72)
                   + 32 * (mlir::AffineMap::getNumInputs((mlir::AffineMap *)v11) + 1)
                   + 24);
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
    v12 = 261;
    if (v5 == a2)
      v7 = "dst_map";
    else
      v7 = "tag_map";
  }
  v11[0] = v7;
  v11[1] = 7;
  v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v11);
  InherentAttr = mlir::Operation::getInherentAttr(*a1, (uint64_t)v7, 7);
  mlir::NamedAttribute::NamedAttribute(&v13, v8, InherentAttr);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::affine::AffineDmaStartOp::getEffects(&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::memref::foldMemRefCast(a2, 0);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  unint64_t v100;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v93 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v25 = v24;
    a1 = v93;
    if (v25)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v100 = 91;
      v26 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v26)
        v27 = v26;
      else
        v27 = v100;
      v28 = &v99[v27];
      v29 = v100 - v27;
      if (v100 - v27 >= 0x12)
        v30 = 18;
      else
        v30 = v100 - v27;
      v31 = v29 - v30;
      if (v31 >= v31 - 1)
        v32 = v31 - 1;
      else
        v32 = v31;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v93;
    }
  }
  v3 = v2[202];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v88 = v3;
    v94 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v34 = v33;
    v3 = v88;
    a1 = v94;
    if (v34)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v100 = 88;
      v35 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v35)
        v36 = v35;
      else
        v36 = v100;
      v37 = &v99[v36];
      v38 = v100 - v36;
      if (v100 - v36 >= 0x12)
        v39 = 18;
      else
        v39 = v100 - v36;
      v40 = v38 - v39;
      if (v40 >= v40 - 1)
        v41 = v40 - 1;
      else
        v41 = v40;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v88;
      a1 = v94;
    }
  }
  v6 = v5[198];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v89 = v3;
    v95 = a1;
    v84 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v84;
    v3 = v89;
    v43 = v42;
    a1 = v95;
    if (v43)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v100 = 83;
      v44 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v44)
        v45 = v44;
      else
        v45 = v100;
      v46 = &v99[v45];
      v47 = v100 - v45;
      if (v100 - v45 >= 0x12)
        v48 = 18;
      else
        v48 = v100 - v45;
      v49 = v47 - v48;
      if (v49 >= v49 - 1)
        v50 = v49 - 1;
      else
        v50 = v49;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v84;
      v3 = v89;
      a1 = v95;
    }
  }
  v9 = v8[188];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v90 = v3;
    v96 = a1;
    v81 = v9;
    v85 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v81;
    v6 = v85;
    v52 = v51;
    v3 = v90;
    a1 = v96;
    if (v52)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v100 = 84;
      v53 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v53)
        v54 = v53;
      else
        v54 = v100;
      v55 = &v99[v54];
      v56 = v100 - v54;
      if (v100 - v54 >= 0x12)
        v57 = 18;
      else
        v57 = v100 - v54;
      v58 = v56 - v57;
      if (v58 >= v58 - 1)
        v59 = v58 - 1;
      else
        v59 = v58;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v81;
      v6 = v85;
      v3 = v90;
      a1 = v96;
    }
  }
  v12 = v11[192];
  v14 = &unk_1EDC07000;
  if ((v13 & 1) == 0)
  {
    v91 = v3;
    v97 = a1;
    v82 = v9;
    v86 = v6;
    v79 = v12;
    v14 = (_QWORD *)&unk_1EDC07000;
    v12 = v79;
    v9 = v82;
    v6 = v86;
    v3 = v91;
    v61 = v60;
    a1 = v97;
    if (v61)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v100 = 102;
      v62 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v62)
        v63 = v62;
      else
        v63 = v100;
      v64 = &v99[v63];
      v65 = v100 - v63;
      if (v100 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v100 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v14 = (_QWORD *)&unk_1EDC07000;
      v12 = v79;
      v9 = v82;
      v6 = v86;
      v3 = v91;
      a1 = v97;
    }
  }
  v15 = v14[55];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v92 = v3;
    v98 = a1;
    v83 = v9;
    v87 = v6;
    v78 = v15;
    v80 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v78;
    v12 = v80;
    v9 = v83;
    v6 = v87;
    v70 = v69;
    v3 = v92;
    a1 = v98;
    if (v70)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v100 = 93;
      v71 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v71)
        v72 = v71;
      else
        v72 = v100;
      v73 = &v99[v72];
      v74 = v100 - v72;
      if (v100 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v100 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v78;
      v12 = v80;
      v9 = v83;
      v6 = v87;
      v3 = v92;
      a1 = v98;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v17[158] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineDmaStartOp::print((mlir::affine::AffineDmaStartOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::OpTrait::impl::verifyZeroResults(a1, a2))
    return 0;
  v4 = a1;
  return mlir::affine::AffineDmaStartOp::verifyInvariantsImpl((mlir::affine::AffineDmaStartOp *)&v4) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::Model(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
    v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineDmaWaitOp]";
    v19 = 79;
    v11 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
    if (v19 >= v11)
      v12 = v11;
    else
      v12 = v19;
    v13 = &v18[v12];
    v14 = v19 - v12;
    if (v19 - v12 >= 0x12)
      v15 = 18;
    else
      v15 = v19 - v12;
    v16 = v14 - v15;
    if (v16 >= v16 - 1)
      v17 = v16 - 1;
    else
      v17 = v16;
    mlir::detail::TypeIDResolver<mlir::affine::AffineDmaWaitOp,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
  }
  v5 = mlir::detail::TypeIDResolver<mlir::affine::AffineDmaWaitOp,void>::resolveTypeID(void)::id;
  v20 = v22;
  v21 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>>((uint64_t)&v20);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.dma_wait", 15, a2, v5, (uint64_t)&v20);
  v6 = v20;
  if ((_DWORD)v21)
  {
    v7 = 16 * v21;
    v8 = (void **)((char *)v20 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    v6 = v20;
  }
  if (v6 != v22)
    free(v6);
  *a1 = &unk_1E0E42F28;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::foldHook(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  llvm **v7;
  llvm *v9[2];
  unint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v9, a2);
  v6 = v10;
  if (v10 >= 8)
  {
    if ((v10 & 4) != 0)
    {
      if ((v10 & 2) != 0)
        v7 = v9;
      else
        v7 = (llvm **)v9[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7, v2, v3, v4);
    }
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v9[0], v9[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineDmaWaitOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>::getAffineMapAttrForMemRef;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[500], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  uint64_t InherentAttr;
  _QWORD v7[4];
  __int16 v8;
  uint64_t v9;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "tag_map";
  v7[1] = 7;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"tag_map", 7);
  mlir::NamedAttribute::NamedAttribute(&v9, v4, InherentAttr);
  return v9;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::memref::foldMemRefCast(a2, 0);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  unint64_t v81;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v75 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v20;
    a1 = v75;
    if (v21)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v81 = 91;
      v22 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v22)
        v23 = v22;
      else
        v23 = v81;
      v24 = &v80[v23];
      v25 = v81 - v23;
      if (v81 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v81 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v75;
    }
  }
  v3 = v2[202];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v71 = v3;
    v76 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v29;
    v3 = v71;
    a1 = v76;
    if (v30)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v81 = 88;
      v31 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v31)
        v32 = v31;
      else
        v32 = v81;
      v33 = &v80[v32];
      v34 = v81 - v32;
      if (v81 - v32 >= 0x12)
        v35 = 18;
      else
        v35 = v81 - v32;
      v36 = v34 - v35;
      if (v36 >= v36 - 1)
        v37 = v36 - 1;
      else
        v37 = v36;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v71;
      a1 = v76;
    }
  }
  v6 = v5[198];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v72 = v3;
    v77 = a1;
    v68 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v68;
    v3 = v72;
    v39 = v38;
    a1 = v77;
    if (v39)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v81 = 83;
      v40 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v40)
        v41 = v40;
      else
        v41 = v81;
      v42 = &v80[v41];
      v43 = v81 - v41;
      if (v81 - v41 >= 0x12)
        v44 = 18;
      else
        v44 = v81 - v41;
      v45 = v43 - v44;
      if (v45 >= v45 - 1)
        v46 = v45 - 1;
      else
        v46 = v45;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v68;
      v3 = v72;
      a1 = v77;
    }
  }
  v9 = v8[188];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v73 = v3;
    v78 = a1;
    v66 = v9;
    v69 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v66;
    v6 = v69;
    v48 = v47;
    v3 = v73;
    a1 = v78;
    if (v48)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v81 = 84;
      v49 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v49)
        v50 = v49;
      else
        v50 = v81;
      v51 = &v80[v50];
      v52 = v81 - v50;
      if (v81 - v50 >= 0x12)
        v53 = 18;
      else
        v53 = v81 - v50;
      v54 = v52 - v53;
      if (v54 >= v54 - 1)
        v55 = v54 - 1;
      else
        v55 = v54;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v51[v53], v55);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v66;
      v6 = v69;
      v3 = v73;
      a1 = v78;
    }
  }
  v12 = v11[192];
  v14 = &unk_1EDC07000;
  if ((v13 & 1) == 0)
  {
    v74 = v3;
    v79 = a1;
    v67 = v9;
    v70 = v6;
    v65 = v12;
    v14 = (_QWORD *)&unk_1EDC07000;
    v12 = v65;
    v9 = v67;
    v6 = v70;
    v3 = v74;
    v57 = v56;
    a1 = v79;
    if (v57)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v81 = 102;
      v58 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v58)
        v59 = v58;
      else
        v59 = v81;
      v60 = &v80[v59];
      v61 = v81 - v59;
      if (v81 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v81 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v14 = (_QWORD *)&unk_1EDC07000;
      v12 = v65;
      v9 = v67;
      v6 = v70;
      v3 = v74;
      a1 = v79;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v14[55] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::affine::AffineDmaWaitOp::print((mlir::affine::AffineDmaWaitOp *)&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::OpTrait::impl::verifyZeroResults(a1, a2))
    return 0;
  v4 = a1;
  return mlir::affine::AffineDmaWaitOp::verifyInvariantsImpl((uint64_t **)&v4) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.apply", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E42CD0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineApplyOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineApplyOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineApplyOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineApplyOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Context;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned int *)(a1 + 44);
  v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  v19 = v8;
  v20[0] = 0;
  v21 = 0;
  v22 = *v10;
  v23 = *(_OWORD *)v26;
  if (v8)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21)
      v21 = 0;
    mlir::OperationName::OperationName(v20, "affine.apply", 12, Context);
    v21 = 1;
  }
  v24 = a2;
  v25 = a3;
  v14 = mlir::affine::AffineApplyOp::fold((uint64_t)&v18, (uint64_t)&v19);
  v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v14 > 7;
  v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __guard v151;
  __guard v152;
  __guard v153;
  __guard v154;
  __guard v155;
  __guard v156;
  __guard v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      v186 = 109;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[305];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v186 = 88;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[198];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = p_vtable[481];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[158] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineApplyOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineApplyOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineApplyOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm **v4;
  llvm *v6[2];
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0)
        v4 = v6;
      else
        v4 = (llvm **)v6[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineDelinearizeIndexOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void **p_vtable;
  void *v18;
  unsigned __int8 v19;
  void **v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __guard v119;
  __guard v120;
  __guard v121;
  __guard v122;
  __guard v123;
  __guard v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  const char *v140;
  unint64_t v141;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v132 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v32;
    a1 = v132;
    if (v33)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v141 = 83;
      v34 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v34)
        v35 = v34;
      else
        v35 = v141;
      v36 = &v140[v35];
      v37 = v141 - v35;
      if (v141 - v35 >= 0x12)
        v38 = 18;
      else
        v38 = v141 - v35;
      v39 = v37 - v38;
      if (v39 >= v39 - 1)
        v40 = v39 - 1;
      else
        v40 = v39;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v132;
    }
  }
  v3 = v2[187];
  if ((v4 & 1) == 0)
  {
    v133 = a1;
    v125 = v3;
    v3 = v125;
    v42 = v41;
    a1 = v133;
    if (v42)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v141 = 87;
      v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v43)
        v44 = v43;
      else
        v44 = v141;
      v45 = &v140[v44];
      v46 = v141 - v44;
      if (v141 - v44 >= 0x12)
        v47 = 18;
      else
        v47 = v141 - v44;
      v48 = v46 - v47;
      if (v48 >= v48 - 1)
        v49 = v48 - 1;
      else
        v49 = v48;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v45[v47], v49);
      v3 = v125;
      a1 = v133;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v134 = a1;
    v119 = v6;
    v126 = v3;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v119;
    v3 = v126;
    v51 = v50;
    a1 = v134;
    if (v51)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v141 = 86;
      v52 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v52)
        v53 = v52;
      else
        v53 = v141;
      v54 = &v140[v53];
      v55 = v141 - v53;
      if (v141 - v53 >= 0x12)
        v56 = 18;
      else
        v56 = v141 - v53;
      v57 = v55 - v56;
      if (v57 >= v57 - 1)
        v58 = v57 - 1;
      else
        v58 = v57;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v54[v56], v58);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v119;
      v3 = v126;
      a1 = v134;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v135 = a1;
    v120 = v6;
    v127 = v3;
    v114 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v114;
    v6 = v120;
    v3 = v127;
    v60 = v59;
    a1 = v135;
    if (v60)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v141 = 97;
      v61 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v61)
        v62 = v61;
      else
        v62 = v141;
      v63 = &v140[v62];
      v64 = v141 - v62;
      if (v141 - v62 >= 0x12)
        v65 = 18;
      else
        v65 = v141 - v62;
      v66 = v64 - v65;
      if (v66 >= v66 - 1)
        v67 = v66 - 1;
      else
        v67 = v66;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v63[v65], v67);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v114;
      v6 = v120;
      v3 = v127;
      a1 = v135;
    }
  }
  v12 = v11[197];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v136 = a1;
    v121 = v6;
    v128 = v3;
    v110 = v12;
    v115 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v110;
    v9 = v115;
    v6 = v121;
    v3 = v128;
    v69 = v68;
    a1 = v136;
    if (v69)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v141 = 84;
      v70 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v70)
        v71 = v70;
      else
        v71 = v141;
      v72 = &v140[v71];
      v73 = v141 - v71;
      if (v141 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v141 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v110;
      v9 = v115;
      v6 = v121;
      v3 = v128;
      a1 = v136;
    }
  }
  v15 = v14[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v16 & 1) == 0)
  {
    v137 = a1;
    v122 = v6;
    v129 = v3;
    v111 = v12;
    v116 = v9;
    v107 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v15 = v107;
    v12 = v111;
    v9 = v116;
    v6 = v122;
    v3 = v129;
    v78 = v77;
    a1 = v137;
    if (v78)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v141 = 95;
      v79 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v79)
        v80 = v79;
      else
        v80 = v141;
      v81 = &v140[v80];
      v82 = v141 - v80;
      if (v141 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v141 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v15 = v107;
      v12 = v111;
      v9 = v116;
      v6 = v122;
      v3 = v129;
      a1 = v137;
    }
  }
  v18 = p_vtable[486];
  v20 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v138 = a1;
    v123 = v6;
    v130 = v3;
    v112 = v12;
    v117 = v9;
    v105 = v18;
    v108 = v15;
    v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v105;
    v15 = v108;
    v12 = v112;
    v9 = v117;
    v6 = v123;
    v3 = v130;
    v87 = v86;
    a1 = v138;
    if (v87)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v141 = 99;
      v88 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v88)
        v89 = v88;
      else
        v89 = v141;
      v90 = &v140[v89];
      v91 = v141 - v89;
      if (v141 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v141 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v105;
      v15 = v108;
      v12 = v112;
      v9 = v117;
      v6 = v123;
      v3 = v130;
      a1 = v138;
    }
  }
  v21 = v20[504];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v139 = a1;
    v124 = v6;
    v131 = v3;
    v113 = v12;
    v118 = v9;
    v106 = v18;
    v109 = v15;
    v104 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v104;
    v18 = v106;
    v15 = v109;
    v12 = v113;
    v9 = v118;
    v6 = v124;
    v3 = v131;
    v96 = v95;
    a1 = v139;
    if (v96)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v141 = 93;
      v97 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v97)
        v98 = v97;
      else
        v98 = v141;
      v99 = &v140[v98];
      v100 = v141 - v98;
      if (v141 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v141 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v104;
      v18 = v106;
      v15 = v109;
      v12 = v113;
      v9 = v118;
      v6 = v124;
      v3 = v131;
      a1 = v139;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == a1
      || v21 == a1
      || v23[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::affine::AffineDelinearizeIndexOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v5 = a1;
  if (!mlir::affine::AffineDelinearizeIndexOp::verifyInvariantsImpl((uint64_t **)&v5))
    return 0;
  v5 = a1;
  return mlir::affine::AffineDelinearizeIndexOp::verify((uint64_t **)&v5) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.for", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E429B0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                               + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineForOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineForOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::affine::AffineForOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::affine::AffineForOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  if (*v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"lowerBoundMap", 13, *v6);
  v7 = v6[1];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"step", 4, v7);
  v8 = v6[2];
  if (v8)
    mlir::NamedAttrList::append(a3, (uint64_t)"upperBoundMap", 13, v8);
  v9 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)(v6 + 3), 3);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v9);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::affine::AffineForOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineForOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineForOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)a3 != *(_QWORD *)a2)
    return 0;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  if (*(_QWORD *)(a3 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  return *(_QWORD *)(a3 + 24) == *(_QWORD *)(a2 + 24)
      && *(_DWORD *)(a3 + 32) == (unint64_t)*(unsigned int *)(a2 + 32);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::CreateOperationOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::affine::AffineForOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  void *__p;
  unsigned int v6;
  uint64_t v7;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v2 = 0;
  v7 = *(_QWORD *)(v2 + 8);
  mlir::IntegerAttr::getValue(&v7, (llvm::APInt *)&__p);
  if (v6 > 0x40)
  {
    v3 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v3 = (uint64_t)((_QWORD)__p << -(uint64_t)v6) >> -(uint64_t)v6;
  }
  return 2 * (v3 == 1);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x68uLL);
  *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::replaceWithAdditionalYields;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[148], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  Operation *v4;
  uint64_t v6;

  v6 = a3;
  v4 = (Operation *)*((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2)
    return 0;
  else
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  double result;

  v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  else
    v3 = 0;
  a2[2] = v3;
  *a2 = a2 + 2;
  *(_QWORD *)&result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::promoteIfSingleIteration()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleInductionVar(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  return **(_QWORD **)(v3 + 48);
}

unint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleLowerBound(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::affine::AffineForOp::getSingleLowerBound((mlir::affine::AffineForOp *)&v3);
}

unint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleStep(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  void *__p;
  unsigned int v8;
  uint64_t v9;

  v6[0] = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  memset(&v6[1], 0, 24);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v3 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v3 = 0;
  v9 = *(_QWORD *)(v3 + 8);
  mlir::IntegerAttr::getValue(&v9, (llvm::APInt *)&__p);
  if (v8 > 0x40)
  {
    v4 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v4 = (uint64_t)((_QWORD)__p << -(uint64_t)v8) >> -(uint64_t)v8;
  }
  return mlir::Builder::getI64IntegerAttr((mlir::Builder *)v6, (void *)v4) & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleUpperBound(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::affine::AffineForOp::getSingleUpperBound((mlir::affine::AffineForOp *)&v3);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getInitsMutable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  mlir::MLIRContext *Context;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  int v14;
  __int128 v15;
  unsigned int v16[4];
  void *v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v3 = a2 + 64;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (_DWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  else
    v4 = 0;
  v5 = v4[7] + v4[6];
  v6 = v4[8];
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8 * *(_QWORD *)(*(_QWORD *)(a2 + 48) + 104) - 8);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v9 = v3 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  else
    v9 = 0;
  v10 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v9 + 24, 3);
  mlir::NamedAttribute::NamedAttribute(&v13, v7, v10);
  v14 = 2;
  v15 = v13;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v16, a2, v5, v6, &v14, 1);
  v11 = mlir::MutableOperandRange::operator mlir::OperandRange(v16);
  if (v17 != v18)
    free(v17);
  return v11;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionIterArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  return *(_QWORD *)(v3 + 48) + 8;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getYieldedValuesMutable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::GenericProgramPoint **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v8[4];
  void *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = (mlir::GenericProgramPoint **)(v2 - 8);
  else
    v3 = 0;
  mlir::Block::getTerminator(v3);
  if ((*(_BYTE *)(v4 + 46) & 0x80) != 0)
    v5 = *(_DWORD *)(v4 + 68);
  else
    v5 = 0;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v8, v4, 0, v5, 0, 0);
  v6 = mlir::MutableOperandRange::operator mlir::OperandRange(v8);
  if (v9 != v10)
    free(v9);
  return v6;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopResults(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::replaceWithAdditionalYields(mlir::GenericProgramPoint *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, unint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  mlir::GenericProgramPoint *v7;

  v7 = a1;
  mlir::affine::AffineForOp::replaceWithAdditionalYields(&v7, a2, a3, a4, a5, a6, a7);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::areTypesCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[160], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v3 = a2 + 16 * ((v2 >> 23) & 1) + 64;
  else
    v3 = 0;
  v4 = (*(_DWORD *)(v3 + 28) + *(_DWORD *)(v3 + 24));
  if ((v2 & 0x800000) != 0)
    return *(_QWORD *)(a2 + 72) + 32 * v4;
  else
    return 32 * v4;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2;
  mlir::affine::AffineForOp::getSuccessorRegions(&v5, 0, a5);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a2;
  mlir::affine::AffineForOp::getSuccessorRegions(&v4, a3, a4);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a5 + 12 * v7;
  v9 = v6;
  do
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::foldHook<mlir::affine::AffineForOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::foldHook<mlir::affine::AffineForOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t Context;
  void *v16;
  uint64_t v17;
  _BYTE v18[8];
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v16 = (void *)a1;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v9 = a1 + 16 * ((v8 >> 23) & 1) + 64;
  else
    v9 = 0;
  v10 = v8 & 0x7FFFFF;
  if ((v8 & 0x7FFFFF) != 0)
  {
    v11 = ((a1 + 16 * ((v8 >> 23) & 1) + 64 + ((v8 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v11, v10);
  v17 = v7;
  v18[0] = 0;
  v19 = 0;
  v13 = *(_OWORD *)(v9 + 16);
  v20 = *(_OWORD *)v9;
  v21 = v13;
  v22 = *(_QWORD *)(v9 + 32);
  v23 = *(_OWORD *)v26;
  if (v7)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v17);
    if (v19)
      v19 = 0;
    mlir::OperationName::OperationName(v18, "affine.for", 10, Context);
    v19 = 1;
  }
  v24 = a2;
  v25 = a3;
  return mlir::affine::AffineForOp::fold(&v16, v12, a4);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **p_vtable;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  void **v32;
  void *v33;
  unsigned __int8 v34;
  void **v35;
  void *v36;
  unsigned __int8 v37;
  _QWORD *v38;
  void *v39;
  unsigned __int8 v40;
  _QWORD *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __guard v218;
  __guard v219;
  __guard v220;
  __guard v221;
  __guard v222;
  __guard v223;
  __guard v224;
  __guard v225;
  __guard v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __guard v248;
  __guard v249;
  __guard v250;
  __guard v251;
  __guard v252;
  __guard v253;
  __guard v254;
  __guard v255;
  __guard v256;
  __guard v257;
  __guard v258;
  __guard v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  const char *v287;
  unint64_t v288;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v288 = 81;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v273;
    }
  }
  v3 = v2[210];
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v288 = 87;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v288 = 88;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[198];
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v288 = 96;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[423];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v288 = 83;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[184];
  v20 = &unk_1EDC07000;
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v20 = (_QWORD *)&unk_1EDC07000;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine:"
             ":AffineYieldOp>::Impl<Empty>]";
      v288 = 136;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v20 = (_QWORD *)&unk_1EDC07000;
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = (void *)v20[59];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = v23[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v288 = 89;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = p_vtable[481];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      v288 = 96;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = v29[203];
  v32 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[486];
  v35 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v288 = 97;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[502];
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      v288 = 89;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = (void *)v38[441];
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v288 = 93;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v41[23] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineForOp::print((mlir::affine::AffineForOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
  {
    return 0;
  }
  v5 = a1;
  return mlir::affine::AffineForOp::verifyInvariantsImpl((uint64_t **)&v5);
}

BOOL mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;
  mlir::Operation *v3;
  mlir::detail *v5;

  if (!mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait((uint64_t)a1)
    || !mlir::detail::verifyLoopLikeOpInterface(a1, v2)
    || !mlir::detail::verifyTypesAlongControlFlowEdges(a1, v3))
  {
    return 0;
  }
  v5 = a1;
  return mlir::affine::AffineForOp::verifyRegions((uint64_t **)&v5) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AttrData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void ***v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  BOOL v33;
  char *v34;
  const void **v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  _QWORD v41[4];
  __int16 v42;
  _QWORD v43[4];
  __int16 v44;
  const void **v45[4];
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (!(_DWORD)v1)
    return 1;
  v3 = 0;
  v4 = a1 + 64;
  v5 = 24 * v1;
  while (1)
  {
    v6 = *(unsigned int *)(a1 + 44);
    if ((v6 & 0x7FFFFF) == 0)
      break;
    v7 = (_QWORD *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                  + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
    if (v7 != (_QWORD *)*v7)
      goto LABEL_8;
LABEL_3:
    v3 += 3;
    if ((_QWORD *)v5 == v3)
      return 1;
  }
  v7 = v3;
  if (v3 == (_QWORD *)*v3)
    goto LABEL_3;
LABEL_8:
  v8 = v7[1];
  if (v8)
    v9 = v8 - 8;
  else
    v9 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v9 + 32));
  v11 = *(_QWORD *)(v10 + 48);
  if (*(_UNKNOWN **)(v11 + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineYieldOp,void>::id)
    goto LABEL_3;
  v40 = 1283;
  v39[0] = "expects regions to end with '";
  v39[2] = "affine.yield";
  v39[3] = 12;
  v41[0] = v39;
  v41[2] = "', found '";
  v42 = 770;
  v47 = *(_QWORD *)(v11 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v47);
  v43[0] = v41;
  v43[2] = AttrData;
  v43[3] = v13;
  v44 = 1282;
  v45[0] = (const void **)v43;
  v45[2] = (const void **)"'";
  v46 = 770;
  mlir::Operation::emitOpError((uint64_t *)a1, v45, (uint64_t)&v47);
  v14 = mlir::Diagnostic::attachNote(&v48, 0, 0);
  v15 = v14 + 16;
  v16 = *(_QWORD *)(v14 + 16);
  LODWORD(v35) = 3;
  v36 = (uint64_t)"in custom textual format, the absence of terminator implies '";
  v37 = 61;
  v17 = *(unsigned int *)(v14 + 24);
  v18 = &v35;
  if (v17 >= *(_DWORD *)(v14 + 28))
  {
    v32 = v17 + 1;
    v33 = v16 + 24 * v17 > (unint64_t)&v35;
    if (v16 <= (unint64_t)&v35 && v33)
    {
      v34 = (char *)&v35 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = (const void ***)&v34[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = &v35;
    }
  }
  v19 = v16 + 24 * *(unsigned int *)(v14 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = v18[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(v14 + 24);
  v38 = 262;
  v35 = (const void **)"affine.yield";
  v36 = 12;
  v21 = mlir::Diagnostic::operator<<(v14, &v35);
  mlir::Diagnostic::operator<<(v21, 39);
  v22 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v47)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  if (v55)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v54;
      v25 = __p;
      if (v54 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v54 = v23;
      operator delete(v25);
    }
    v26 = v51;
    if (v51)
    {
      v27 = v52;
      v28 = v51;
      if (v52 != v51)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v51;
      }
      v52 = v26;
      operator delete(v28);
    }
    if (v49 != &v50)
      free(v49);
  }
  return v22;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineIfOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::affine::AffineIfOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSpeculatability()
{
  return 2;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::areTypesCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[160], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  else
    return 0;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  uint64_t v6;

  v6 = a2;
  *(_QWORD *)&result = mlir::affine::AffineIfOp::getSuccessorRegions(&v6, 0, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v5;

  v5 = a2;
  *(_QWORD *)&result = mlir::affine::AffineIfOp::getSuccessorRegions(&v5, a3, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a5 + 12 * v7;
  v9 = v6;
  do
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  mlir::affine::detail::AffineIfOpGenericAdaptorBase::AffineIfOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::affine::AffineIfOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  __guard *v2;
  __guard v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  void *v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **p_vtable;
  void *v27;
  unsigned __int8 v28;
  _QWORD *v29;
  void *v30;
  unsigned __int8 v31;
  void **v32;
  void *v33;
  unsigned __int8 v34;
  _QWORD *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __guard v201;
  __guard v202;
  __guard v203;
  __guard v204;
  __guard v205;
  __guard v206;
  __guard v207;
  __guard v208;
  __guard v209;
  __guard v210;
  __guard v211;
  __guard v212;
  __guard v213;
  __guard v214;
  __guard v215;
  __guard v216;
  __guard v217;
  __guard v218;
  __guard v219;
  __guard v220;
  __guard v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NRegions<2>::Impl<Empty>]";
      v235 = 89;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NRegions<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NRegions<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      a1 = v222;
    }
  }
  v3 = v2[309];
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v235 = 87;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v235 = 88;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[198];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v235 = 83;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[184];
  v17 = &unk_1EDC07000;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = (_QWORD *)&unk_1EDC07000;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine:"
             ":AffineYieldOp>::Impl<Empty>]";
      v235 = 136;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = (_QWORD *)&unk_1EDC07000;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = (void *)v17[59];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      v235 = 89;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[199];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = p_vtable[486];
  v29 = &unk_1EDC07000;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v29 = (_QWORD *)&unk_1EDC07000;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::RecursivelySpeculatableImplTrait<Empty>]";
      v235 = 104;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::OpTrait::RecursivelySpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RecursivelySpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v29 = (_QWORD *)&unk_1EDC07000;
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = (void *)v29[69];
  v32 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v235 = 97;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[502];
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v235 = 93;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v35[23] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineIfOp::print((mlir::affine::AffineIfOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(unsigned int *a1)
{
  mlir::Operation *v2;
  mlir::Operation *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int *v8;

  if (!mlir::OpTrait::impl::verifyNRegions((mlir::OpTrait::impl *)a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v2)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)
    || !mlir::OpTrait::impl::verifyNoRegionArguments((mlir::OpTrait::impl *)a1, v3))
  {
    return 0;
  }
  v4 = a1[9];
  v5 = a1[9] ? (uint64_t)(a1 - 4) : 0;
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v5, i);
  }
  if (!mlir::scf::__mlir_ods_local_region_constraint_SCFOps1((uint64_t *)a1, (((unint64_t)&a1[4 * (((unint64_t)a1[11] >> 23) & 1) + 17]+ (((unint64_t)a1[11] >> 21) & 0x7F8)+ 3) & 0xFFFFFFFFFFFFFFF8)+ 32 * a1[10], (uint64_t)"thenRegion", 10, 0))return 0;
  v8 = a1;
  return mlir::affine::AffineIfOp::verify((mlir::affine::AffineIfOp *)&v8) != 0;
}

BOOL mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;

  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.load", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineLoadOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E42C08;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineLoadOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineLoadOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getValue;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[498], v2);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
}

unint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32;
  else
    return 32;
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getValue(uint64_t a1, uint64_t a2)
{
  return a2 - 16;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMapAttrForMemRef;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[500], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  _QWORD v6[4];
  __int16 v7;
  uint64_t v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  mlir::NamedAttribute::NamedAttribute(&v8, v4, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::LoadOp::getEffects((uint64_t)&v3, a3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineLoadOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineLoadOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Context;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned int *)(a1 + 44);
  v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  v19 = v8;
  v20[0] = 0;
  v21 = 0;
  v22 = *v10;
  v23 = *(_OWORD *)v26;
  if (v8)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21)
      v21 = 0;
    mlir::OperationName::OperationName(v20, "affine.load", 11, Context);
    v21 = 1;
  }
  v24 = a2;
  v25 = a3;
  v14 = mlir::affine::AffineLoadOp::fold(&v18);
  v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v14 > 7;
  v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  void **p_vtable;
  void *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **v20;
  void *v21;
  unsigned __int8 v22;
  _QWORD *v23;
  void *v24;
  unsigned __int8 v25;
  _QWORD *v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v210 = 104;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = p_vtable[501];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v210 = 97;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[197];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  v20 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[481];
  v23 = &unk_1EDC07000;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = (_QWORD *)&unk_1EDC07000;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface::Trait<Empty>]";
      v210 = 99;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineReadOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = (_QWORD *)&unk_1EDC07000;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = (void *)v23[71];
  v26 = &unk_1EDC07000;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (_QWORD *)&unk_1EDC07000;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v210 = 102;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (_QWORD *)&unk_1EDC07000;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = (void *)v26[55];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v210 = 91;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[202];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v32[158] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineLoadOp::print((mlir::affine::AffineLoadOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineLoadOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineLoadOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.max", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E42A78;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineMaxOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineMaxOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMaxOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMaxOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Context;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned int *)(a1 + 44);
  v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  v19 = v8;
  v20[0] = 0;
  v21 = 0;
  v22 = *v10;
  v23 = *(_OWORD *)v26;
  if (v8)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21)
      v21 = 0;
    mlir::OperationName::OperationName(v20, "affine.max", 10, Context);
    v21 = 1;
  }
  v24 = a2;
  v25 = a3;
  v14 = mlir::affine::AffineMaxOp::fold(&v18, (uint64_t)&v19);
  v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v14 > 7;
  v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineMinOp::print((mlir::affine::AffineMinOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineApplyOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineMinOp::verify((mlir::affine::AffineMinOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.min", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E42B40;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineMinOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineMinOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  mlir::Operation *v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMinOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMinOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Context;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned int *)(a1 + 44);
  v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  v19 = v8;
  v20[0] = 0;
  v21 = 0;
  v22 = *v10;
  v23 = *(_OWORD *)v26;
  if (v8)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21)
      v21 = 0;
    mlir::OperationName::OperationName(v20, "affine.min", 10, Context);
    v21 = 1;
  }
  v24 = a2;
  v25 = a3;
  v14 = mlir::affine::AffineMinOp::fold(&v18, (uint64_t)&v19);
  v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v14 > 7;
  v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineMinOp::print((mlir::affine::AffineMinOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineApplyOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineMinOp::verify((mlir::affine::AffineMinOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.parallel", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E430B8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, mlir::Attribute *a2)@<X8>)
{
  *a1 = mlir::affine::AffineParallelOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, mlir::Attribute *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                       + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, size_t a4)
{
  int Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::affine::AffineParallelOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::affine::AffineParallelOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::affine::AffineParallelOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::affine::AffineParallelOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getOpPropertyByteSize()
{
  return 48;
}

double mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::initProperties(uint64_t a1, uint64_t a2, _OWORD *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[2];
    a3[1] = a4[1];
    a3[2] = v5;
    *a3 = v4;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineParallelOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineParallelOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] != a2[2])
    return 0;
  if (a3[3] != a2[3])
    return 0;
  if (a3[4] == a2[4])
    return a3[5] == a2[5];
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::GlobalOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[2]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[3]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[4]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[5]);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSpeculatability()
{
  return 2;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x68uLL);
  *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::replaceWithAdditionalYields;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[148], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  Operation *v4;
  uint64_t v6;

  v6 = a3;
  v4 = (Operation *)*((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2)
    return 0;
  else
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  double result;

  v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  else
    v3 = 0;
  a2[2] = v3;
  *a2 = a2 + 2;
  *(_QWORD *)&result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::promoteIfSingleIteration()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleInductionVar()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleLowerBound()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleStep()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleUpperBound()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getInitsMutable()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getRegionIterArgs()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getYieldedValuesMutable()
{
  return 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopResults(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::replaceWithAdditionalYields(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::foldHook<mlir::affine::AffineParallelOp>(a2, a3, a4);
}

uint64_t mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::foldHook<mlir::affine::AffineParallelOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t Context;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23[3];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v7 = (__int128 *)(a1 + 16 * ((v6 >> 23) & 1) + 64);
  else
    v7 = 0;
  v8 = v6 & 0x7FFFFF;
  if ((v6 & 0x7FFFFF) != 0)
  {
    v9 = ((a1 + 16 * ((v6 >> 23) & 1) + 64 + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  mlir::ValueRange::ValueRange(v23, v9, v8);
  v14 = v5;
  v15[0] = 0;
  v16 = 0;
  v10 = v7[1];
  v17 = *v7;
  v18 = v10;
  v19 = v7[2];
  v20 = *(_OWORD *)v23;
  if (v5)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v14);
    if (v16)
      v16 = 0;
    mlir::OperationName::OperationName(v15, "affine.parallel", 15, Context);
    v16 = 1;
  }
  v21 = a2;
  v22 = a3;
  return mlir::affine::AffineParallelOp::fold(&v13);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  void *v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  void **v29;
  void *v30;
  unsigned __int8 v31;
  _QWORD *v32;
  void *v33;
  unsigned __int8 v34;
  void **v35;
  void *v36;
  unsigned __int8 v37;
  __guard *v38;
  __guard v39;
  unsigned __int8 v40;
  uint64_t *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  __guard v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __guard v248;
  __guard v249;
  __guard v250;
  __guard v251;
  __guard v252;
  __guard v253;
  __guard v254;
  __guard v255;
  __guard v256;
  __guard v257;
  __guard v258;
  __guard v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  const char *v287;
  unint64_t v288;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v288 = 81;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v273;
    }
  }
  v3 = v2[210];
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v288 = 87;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v288 = 88;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[198];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v288 = 83;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[184];
  v17 = &unk_1EDC07000;
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v17 = (_QWORD *)&unk_1EDC07000;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine:"
             ":AffineYieldOp>::Impl<Empty>]";
      v288 = 136;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v17 = (_QWORD *)&unk_1EDC07000;
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = (void *)v17[59];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v288 = 89;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = p_vtable[481];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      v288 = 96;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = v26[203];
  v29 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = v29[486];
  v32 = &unk_1EDC07000;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = (_QWORD *)&unk_1EDC07000;
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::RecursivelySpeculatableImplTrait<Empty>]";
      v288 = 104;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::OpTrait::RecursivelySpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RecursivelySpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = (_QWORD *)&unk_1EDC07000;
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = (void *)v32[69];
  v35 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v288 = 97;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[502];
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      v288 = 89;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[441];
  v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v288 = 91;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == (_QWORD)a1
      || v41[202] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::affine::AffineParallelOp::print((mlir::affine::AffineParallelOp *)&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
    return 0;
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
    return 0;
  v5 = a1;
  if (!mlir::affine::AffineParallelOp::verifyInvariantsImpl((uint64_t **)&v5))
    return 0;
  v5 = a1;
  return mlir::affine::AffineParallelOp::verify((mlir::affine::AffineParallelOp *)&v5);
}

BOOL mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;

  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyLoopLikeOpInterface(a1, v2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffinePrefetchOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, mlir::Attribute *a2)@<X8>)
{
  *a1 = mlir::affine::AffinePrefetchOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, mlir::Attribute *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                       + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  int Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::affine::AffinePrefetchOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::affine::AffinePrefetchOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  if (*v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"isDataCache", 11, *v5);
  v6 = v5[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"isWrite", 7, v6);
  v7 = v5[2];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"localityHint", 12, v7);
  v8 = v5[3];
  if (v8)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::affine::AffinePrefetchOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getOpPropertyByteSize()
{
  return 32;
}

double mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::initProperties(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *a3 = *a4;
    a3[1] = v5;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffinePrefetchOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffinePrefetchOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::copyProperties(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] == a2[2])
    return a3[3] == a2[3];
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::FuncOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3 + 3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[2]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[3]);
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::getAffineMapAttrForMemRef;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[500], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[4];
  __int16 v8;
  uint64_t v9;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "map";
  v7[1] = 3;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  mlir::NamedAttribute::NamedAttribute(&v9, v4, *(_QWORD *)(v5 + 24));
  return v9;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::foldHook<mlir::affine::AffinePrefetchOp>(a2, a3, a4);
}

uint64_t mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::foldHook<mlir::affine::AffinePrefetchOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t Context;
  uint64_t v14;
  _BYTE v15[8];
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22[3];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v8 = (__int128 *)(a1 + 16 * ((v7 >> 23) & 1) + 64);
  else
    v8 = 0;
  v9 = v7 & 0x7FFFFF;
  if ((v7 & 0x7FFFFF) != 0)
  {
    v10 = ((a1 + 16 * ((v7 >> 23) & 1) + 64 + ((v7 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  mlir::ValueRange::ValueRange(v22, v10, v9);
  v14 = v6;
  v15[0] = 0;
  v16 = 0;
  v11 = v8[1];
  v17 = *v8;
  v18 = v11;
  v19 = *(_OWORD *)v22;
  if (v6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v14);
    if (v16)
      v16 = 0;
    mlir::OperationName::OperationName(v15, "affine.prefetch", 15, Context);
    v16 = 1;
  }
  v20 = a2;
  v21 = a3;
  return mlir::memref::foldMemRefCast(a1, 0);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void **p_vtable;
  void *v18;
  unsigned __int8 v19;
  _QWORD *v20;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  const char *v119;
  unint64_t v120;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v112;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v120 = 83;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v120 = 97;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[197];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v120 = 89;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = p_vtable[481];
  v20 = &unk_1EDC07000;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    v20 = (_QWORD *)&unk_1EDC07000;
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v120 = 102;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v20 = (_QWORD *)&unk_1EDC07000;
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == a1
      || v20[55] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffinePrefetchOp::print((mlir::affine::AffinePrefetchOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffinePrefetchOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffinePrefetchOp::verify((mlir::affine::AffinePrefetchOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.store", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineStoreOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E42D98;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  llvm **v7;
  llvm *v9[2];
  unint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v9, a2, a3, a4);
  v6 = v10;
  if (v10 >= 8)
  {
    if ((v10 & 4) != 0)
    {
      if ((v10 & 2) != 0)
        v7 = v9;
      else
        v7 = (llvm **)v9[0];
      (*(void (**)(uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7, v4);
    }
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v9[0], v9[1]);
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineStoreOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineStoreOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getValueToStore;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
      v15 = 86;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[499], v2);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
}

unint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 64;
  else
    return 64;
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getValueToStore(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMapAttrForMemRef;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[500], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  _QWORD v6[4];
  __int16 v7;
  uint64_t v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  mlir::NamedAttribute::NamedAttribute(&v8, v4, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::StoreOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldHook<mlir::affine::AffineStoreOp>(a2, a3, a4);
}

uint64_t mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldHook<mlir::affine::AffineStoreOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t Context;
  uint64_t v13;
  _BYTE v14[8];
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[3];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(unsigned int *)(a1 + 44);
  v8 = (uint64_t *)(a1 + 16 * ((v7 >> 23) & 1) + 64);
  v9 = v7 & 0x7FFFFF;
  if ((v7 & 0x7FFFFF) != 0)
  {
    v10 = (((unint64_t)v8 + ((v7 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  mlir::ValueRange::ValueRange(v20, v10, v9);
  v13 = v6;
  v14[0] = 0;
  v15 = 0;
  v16 = *v8;
  v17 = *(_OWORD *)v20;
  if (v6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v13);
    if (v15)
      v15 = 0;
    mlir::OperationName::OperationName(v14, "affine.store", 12, Context);
    v15 = 1;
  }
  v18 = a2;
  v19 = a3;
  return mlir::memref::foldMemRefCast(a1, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24));
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  __guard *v11;
  __guard v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void **p_vtable;
  void *v18;
  unsigned __int8 v19;
  _QWORD *v20;
  void *v21;
  unsigned __int8 v22;
  _QWORD *v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __guard v145;
  __guard v146;
  __guard v147;
  __guard v148;
  __guard v149;
  __guard v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v186 = 83;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[196];
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v186 = 97;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[303];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = p_vtable[481];
  v20 = &unk_1EDC07000;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = (_QWORD *)&unk_1EDC07000;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface::Trait<Empty>]";
      v186 = 100;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineWriteOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = (_QWORD *)&unk_1EDC07000;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = (void *)v20[99];
  v23 = &unk_1EDC07000;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (_QWORD *)&unk_1EDC07000;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v186 = 102;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (_QWORD *)&unk_1EDC07000;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = (void *)v23[55];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v186 = 91;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[202];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v29[158] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineStoreOp::print((mlir::affine::AffineStoreOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineStoreOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineStoreOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.vector_load", 18, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineVectorLoadOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E43248;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineVectorLoadOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineVectorLoadOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getValue;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[498], v2);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
}

unint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32;
  else
    return 32;
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getValue(uint64_t a1, uint64_t a2)
{
  return a2 - 16;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMapAttrForMemRef;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[500], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  _QWORD v6[4];
  __int16 v7;
  uint64_t v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  mlir::NamedAttribute::NamedAttribute(&v8, v4, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::LoadOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  void *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  _QWORD *v23;
  void *v24;
  unsigned __int8 v25;
  _QWORD *v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  v8 = &unk_1EDC07000;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = (_QWORD *)&unk_1EDC07000;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl<Empty>]";
      v210 = 110;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = (_QWORD *)&unk_1EDC07000;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = (void *)v8[103];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v210 = 97;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[197];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = p_vtable[481];
  v23 = &unk_1EDC07000;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = (_QWORD *)&unk_1EDC07000;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface::Trait<Empty>]";
      v210 = 99;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineReadOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = (_QWORD *)&unk_1EDC07000;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = (void *)v23[71];
  v26 = &unk_1EDC07000;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (_QWORD *)&unk_1EDC07000;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v210 = 102;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (_QWORD *)&unk_1EDC07000;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = (void *)v26[55];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v210 = 91;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[202];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v32[158] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineVectorLoadOp::print((mlir::affine::AffineVectorLoadOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineVectorLoadOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineVectorLoadOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.vector_store", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineVectorStoreOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E43310;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::foldHook()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm **v4;
  llvm *v6[2];
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0)
        v4 = v6;
      else
        v4 = (llvm **)v6[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineVectorStoreOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineVectorStoreOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getValueToStore;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
      v15 = 86;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[499], v2);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
}

unint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 64;
  else
    return 64;
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getValueToStore(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMapAttrForMemRef;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[500], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  _QWORD v6[4];
  __int16 v7;
  uint64_t v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  mlir::NamedAttribute::NamedAttribute(&v8, v4, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::StoreOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineVectorStoreOp::print((mlir::affine::AffineVectorStoreOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineVectorStoreOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineVectorStoreOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.yield", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineYieldOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E42E60;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  llvm **v2;
  llvm *v4[2];
  unint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v1 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0)
        v2 = v4;
      else
        v2 = (llvm **)v4[0];
      (*(void (**)(uint64_t, uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v2, v0);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineYieldOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSuccessorRegions;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      v15 = 89;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[173], v2);
}

double mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getMutableSuccessorOperands@<D0>(mlir::Operation *a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  return mlir::MutableOperandRange::MutableOperandRange(a2, a1);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Block *v6;
  uint64_t ParentOp;
  uint64_t v9;
  mlir::Block *v10;
  unint64_t Parent;
  uint64_t v13;
  uint64_t v14;

  v6 = *(mlir::Block **)(a2 + 16);
  if (v6)
  {
    ParentOp = mlir::Block::getParentOp(v6);
    v9 = ParentOp;
    if (ParentOp)
      ParentOp = mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp);
    v10 = *(mlir::Block **)(a2 + 16);
    v13 = v9;
    v14 = ParentOp;
    if (v10)
      Parent = mlir::Block::getParent(v10);
    else
      Parent = 0;
  }
  else
  {
    Parent = 0;
    v13 = 0;
    v14 = 0;
  }
  return mlir::BranchOpInterface::getSuccessorForOperands(&v13, Parent, a5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void **p_vtable;
  void *v18;
  unsigned __int8 v19;
  void **v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  __guard v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __guard v157;
  __guard v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v235 = 83;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v235 = 88;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[198];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = p_vtable[486];
  v20 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v235 = 99;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[504];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[158];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v235 = 84;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[190];
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      v235 = 103;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[459];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      v235 = 82;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[182];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v235 = 91;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == a1
      || v21 == a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || v35[202] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::func::ReturnOp::print((mlir::func::ReturnOp *)&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyIsTerminator(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::affine::AffineYieldOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants()
{
  return 1;
}

void `anonymous namespace'::AffineInlinerInterface::~AffineInlinerInterface(_anonymous_namespace_::AffineInlinerInterface *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::AffineInlinerInterface::isLegalToInline(_anonymous_namespace_::AffineInlinerInterface *this, mlir::Region *a2, mlir::Region **a3, BOOL a4, mlir::IRMapping *a5)
{
  void *v5;
  mlir::Region **v9;
  uint64_t result;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t InterfaceFor;
  int v22;
  int isValidDim;
  int v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t ArgOperands;
  unint64_t v29;
  unint64_t v30;
  unsigned int NumDims;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int NumSymbols;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(_QWORD *, mlir::Block *);
  uint64_t ArgAttrsAttr;
  void *v53;
  uint64_t v54;
  _BYTE v55[160];
  uint64_t (*v56)(_QWORD *, mlir::Block *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 48) + 16);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id)
  {
    return 0;
  }
  v9 = (mlir::Region **)a3[1];
  if (v9 == a3 || v9[1] != (mlir::Region *)a3)
    return 0;
  v11 = (mlir::GenericProgramPoint *)(v9 + 3);
  v12 = v9[4];
  if (v12 != (mlir::GenericProgramPoint *)(v9 + 3))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v12);
      v20 = v19;
      if (mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v19))
      {
        InterfaceFor = mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v20);
        v58 = v20;
        v59 = InterfaceFor;
        if (v20)
        {
          v53 = v55;
          v54 = 0x400000000;
          mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v58, (uint64_t)&v53);
          v22 = v54;
          if (v53 != v55)
            free(v53);
          if (!v22)
            goto LABEL_18;
        }
      }
      else
      {
        v58 = 0;
        v59 = 0;
      }
      if (v20
        && *(_UNKNOWN **)(*(_QWORD *)(v20 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
      {
        isValidDim = mlir::affine::isValidDim((_QWORD *)(v20 - 16), (mlir::Block *)a3);
        v24 = *(_DWORD *)(v20 + 44);
        if (isValidDim)
        {
          if ((v24 & 0x800000) != 0)
          {
            v15 = *(unsigned int *)(v20 + 68);
            v16 = *(_QWORD *)(v20 + 72);
          }
          else
          {
            v16 = 0;
            v15 = 0;
          }
          mlir::ValueRange::ValueRange((unint64_t *)&v53, v16, v15);
          v56 = mlir::affine::isValidDim;
          v17 = (uint64_t)v53;
          v18 = v54;
        }
        else
        {
          if ((v24 & 0x800000) != 0)
          {
            v25 = *(unsigned int *)(v20 + 68);
            v26 = *(_QWORD *)(v20 + 72);
          }
          else
          {
            v26 = 0;
            v25 = 0;
          }
          mlir::ValueRange::ValueRange((unint64_t *)&v58, v26, v25);
          v56 = mlir::affine::isValidSymbol;
          v17 = v58;
          v18 = v59;
        }
        if ((remainsLegalAfterInline(v17, v18, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v56) & 1) == 0)return 0;
      }
      else if (mlir::OpInterface<mlir::affine::AffineReadOpInterface,mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits>::getInterfaceFor(v20)
             && (v27 = mlir::OpInterface<mlir::affine::AffineReadOpInterface,mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits>::getInterfaceFor(v20),
                 v20))
      {
        v53 = (void *)v20;
        v54 = (uint64_t)v27;
        ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
        ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53);
        v30 = v29;
        NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&ArgAttrsAttr);
        if (v30 >= NumDims)
          v32 = NumDims;
        else
          v32 = v30;
        mlir::ValueRange::ValueRange((unint64_t *)&v58, ArgOperands, v32);
        v33 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53);
        v35 = v34;
        NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&ArgAttrsAttr);
        if (v35 <= NumSymbols)
          v37 = v33;
        else
          v37 = v33 + 32 * (v35 - NumSymbols);
        if (v35 >= NumSymbols)
          v38 = NumSymbols;
        else
          v38 = v35;
        mlir::ValueRange::ValueRange((unint64_t *)&v56, v37, v38);
        v51 = mlir::affine::isValidDim;
        if ((remainsLegalAfterInline(v58, v59, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v51) & 1) == 0)return 0;
        v51 = mlir::affine::isValidSymbol;
        result = remainsLegalAfterInline((uint64_t)v56, v57, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v51);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (!mlir::OpInterface<mlir::affine::AffineWriteOpInterface,mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits>::getInterfaceFor(v20))
          return 0;
        v39 = mlir::OpInterface<mlir::affine::AffineWriteOpInterface,mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits>::getInterfaceFor(v20);
        if (!v20)
          return 0;
        v53 = (void *)v20;
        v54 = (uint64_t)v39;
        ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
        v40 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53);
        v42 = v41;
        v43 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&ArgAttrsAttr);
        v44 = v42 >= v43 ? v43 : v42;
        mlir::ValueRange::ValueRange((unint64_t *)&v58, v40, v44);
        v45 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53);
        v47 = v46;
        v48 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&ArgAttrsAttr);
        v49 = v47 <= v48 ? v45 : v45 + 32 * (v47 - v48);
        v50 = v47 >= v48 ? v48 : v47;
        mlir::ValueRange::ValueRange((unint64_t *)&v56, v49, v50);
        v51 = mlir::affine::isValidDim;
        if ((remainsLegalAfterInline(v58, v59, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v51) & 1) == 0)return 0;
        v51 = mlir::affine::isValidSymbol;
        if ((remainsLegalAfterInline((uint64_t)v56, v57, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v51) & 1) == 0)return 0;
      }
LABEL_18:
      v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v12 + 1);
    }
    while (v12 != v11);
  }
  return 1;
}

BOOL `anonymous namespace'::AffineInlinerInterface::isLegalToInline(_anonymous_namespace_::AffineInlinerInterface *this, mlir::Operation *a2, mlir::Region *a3, BOOL a4, mlir::IRMapping *a5)
{
  _QWORD *v5;
  void *v6;

  v5 = (_QWORD *)(*((_QWORD *)a3 + 2) + 48);
  if ((mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>(v5) & 1) != 0)
    return 1;
  v6 = *(void **)(*v5 + 16);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
    return 1;
  return v6 == &mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id
      || v6 == &mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id;
}

uint64_t `anonymous namespace'::AffineInlinerInterface::shouldAnalyzeRecursively(_anonymous_namespace_::AffineInlinerInterface *this, mlir::Operation *a2)
{
  return 1;
}

uint64_t remainsLegalAfterInline(uint64_t a1, uint64_t a2, mlir::Block *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  mlir::Block *ParentRegion;
  int v19;
  uint64_t v20;
  uint64_t DefiningOp;
  void *InterfaceFor;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[2];
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v28 = a1;
  v29 = 0;
  if (!a2)
    return 1;
  v14 = 0;
  while (1)
  {
    v15 = (_DWORD *)mlir::ValueRange::dereference_iterator(&v28, v14);
    v16 = (unint64_t)v15;
    v30[0] = v15;
    if ((~v15[2] & 7) != 0)
      v17 = 0;
    else
      v17 = (unint64_t)v15;
    v26 = v15;
    v27 = v17;
    if (v17)
    {
      ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v27);
    }
    else
    {
      ParentRegion = *(mlir::Block **)(mlir::Value::getDefiningOp((mlir::Value *)v30) + 16);
      if (ParentRegion)
        ParentRegion = (mlir::Block *)mlir::Block::getParent(ParentRegion);
    }
    if (ParentRegion != a3)
      goto LABEL_22;
    if ((~*(_DWORD *)(v16 + 8) & 7) != 0)
      break;
    v27 = v16;
    v30[0] = 0;
    v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, &v27, v30);
    v20 = 0;
    if (v19 && v30[0] != (void *)(*(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 16)))
      v20 = *((_QWORD *)v30[0] + 1);
    if ((a6(a7, v20, a4) & 1) == 0)
      return 0;
LABEL_22:
    v14 = ++v29;
    if (v28 == a1 && v14 == a2)
      return 1;
  }
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v26);
  InterfaceFor = mlir::OpInterface<mlir::ShapedDimOpInterface,mlir::detail::ShapedDimOpInterfaceInterfaceTraits>::getInterfaceFor(DefiningOp);
  v23 = mlir::Value::getDefiningOp((mlir::Value *)&v26);
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v23 + 48)))
  {
    v30[0] = v31;
    v30[1] = (void *)0x100000000;
    mlir::Operation::fold(v23, 0, 0, (uint64_t)v30);
    v24 = *(_QWORD *)v30[0];
    if (v30[0] != v31)
      free(v30[0]);
    if (v24 > 7)
      goto LABEL_22;
  }
  if (InterfaceFor)
    goto LABEL_22;
  return 0;
}

uint64_t llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return (*a1)(a2, a3);
}

void *mlir::OpInterface<mlir::affine::AffineReadOpInterface,mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  void *result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = (void *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
          v31 = 85;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::affine::AffineReadOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
          v31 = 85;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

void *mlir::detail::InterfaceMap::lookup<mlir::affine::AffineReadOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  void **p_vtable;
  unint64_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  void **v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
      v23 = 85;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = p_vtable[498];
  v5 = *(void ***)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = (unint64_t *)&v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = (void **)(v8 + 2);
    v3 += ~(v3 >> 1);
    if (v10 < (unint64_t)v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (void **)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void *mlir::OpInterface<mlir::affine::AffineWriteOpInterface,mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  void *result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = (void *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
          v31 = 86;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::affine::AffineWriteOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
          v31 = 86;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

void *mlir::detail::InterfaceMap::lookup<mlir::affine::AffineWriteOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  void **p_vtable;
  unint64_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  void **v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
      v23 = 86;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = p_vtable[499];
  v5 = *(void ***)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = (unint64_t *)&v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = (void **)(v8 + 2);
    v3 += ~(v3 >> 1);
    if (v10 < (unint64_t)v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (void **)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::AffineMapAttr>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD **v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v26, a3))
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
    v13 = v26;
  else
    v13 = 0;
  *a2 = v13;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    v24 = "invalid kind of attribute specified";
    v25 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v27, a1, v12, &v24);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    if (v34)
    {
      v16 = (_QWORD **)__p;
      if (__p)
      {
        v17 = v33;
        v18 = __p;
        if (v33 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v33 = v16;
        operator delete(v18);
      }
      v19 = v30;
      if (v30)
      {
        v20 = v31;
        v21 = v30;
        if (v31 != v30)
        {
          do
          {
            v23 = (void *)*--v20;
            v22 = v23;
            *v20 = 0;
            if (v23)
              operator delete[](v22);
          }
          while (v20 != v19);
          v21 = v30;
        }
        v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29)
        free(v28);
    }
  }
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::AffineExpr)>::callback_fn<void canonicalizeMapOrSetAndOperands<mlir::AffineMap>(mlir::AffineMap *,llvm::SmallVectorImpl<mlir::Value> *)::{lambda(mlir::AffineExpr)#1}>(unint64_t **a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) == 6)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, a2);
    v7 = v8;
    if (v8)
      goto LABEL_3;
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, 0);
    v7 = v8;
    if (v8)
    {
LABEL_3:
      v4 = *a1;
      result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v7);
      v6 = *v4;
      if ((*v4 & 1) == 0)
      {
LABEL_4:
        *(_QWORD *)(*(_QWORD *)v6 + 8 * (result >> 6)) |= 1 << result;
        return result;
      }
LABEL_12:
      *v4 = v6 & 0xFC00000000000000 | (2
                                       * (((v6 >> 1) & ~(-1 << (v6 >> 58)) | (1 << result)) & ~(-1 << (v6 >> 58)))) | 1;
      return result;
    }
  }
  v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) != 7)
  {
    result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, 0);
    if (!v8)
      return result;
LABEL_11:
    v4 = a1[1];
    result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v8);
    v6 = *v4;
    if ((*v4 & 1) == 0)
      goto LABEL_4;
    goto LABEL_12;
  }
  result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, a2);
  if (v8)
    goto LABEL_11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      result = 0;
      *a3 = 0;
      return result;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = *a2;
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v24 = a3;
    v22 = a2;
    v25 = v3;
    v23 = v4;
    v26 = *a2;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v25;
    v5 = v26;
    v4 = v23;
    a2 = v22;
    a3 = v24;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v25;
      v5 = v26;
      v4 = v23;
      a2 = v22;
      a3 = v24;
    }
  }
  v8 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
  v10 = -348639895 * ((v9 >> 47) ^ v9);
  v11 = v4 - 1;
  v12 = v10 & (v4 - 1);
  v13 = (_QWORD *)(v3 + 16 * v12);
  v14 = *v13;
  if (*a2 == *v13)
  {
    result = 1;
LABEL_8:
    *a3 = v13;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v14 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v14 == -8192;
      if (v18)
        v16 = v13;
      v19 = v12 + v17++;
      v12 = v19 & v11;
      v13 = (_QWORD *)(v3 + 16 * (v19 & v11));
      v14 = *v13;
      if (*a2 == *v13)
        goto LABEL_8;
    }
    result = 0;
    if (v16)
      v13 = v16;
    *a3 = v13;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(_DWORD *a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_10:
    llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::grow((uint64_t)a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)a1, a3, &v9);
    a4 = v9;
    *a1 += 2;
    if (*a4 == -4096)
      return a4;
    goto LABEL_7;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
    goto LABEL_10;
  *a1 += 2;
  if (*a4 != -4096)
LABEL_7:
    --a1[1];
  return a4;
}

uint64_t llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::grow(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *buffer;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  _QWORD v45[2];
  _QWORD v46[15];

  v2 = result;
  v46[14] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v7 = (_QWORD *)(result + 8);
    v6 = *(llvm **)(result + 8);
    v8 = *(unsigned int *)(result + 16);
    if (a2 > 8)
    {
      v29 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(v2 + 8) = buffer;
      *(_QWORD *)(v2 + 16) = v29;
      v31 = *(_DWORD *)v2;
      v9 = (unint64_t *)((char *)v6 + 16 * v8);
      *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
      if ((v31 & 1) != 0)
      {
        v10 = (_QWORD *)(v2 + 136);
        v11 = 112;
      }
      else
      {
        v10 = &buffer[2 * v29];
        v7 = buffer;
        v11 = 16 * v29 - 16;
        if (v11 < 0x10)
        {
          v33 = buffer;
          goto LABEL_49;
        }
      }
    }
    else
    {
      v9 = (unint64_t *)((char *)v6 + 16 * v8);
      *(_QWORD *)result = 1;
      v10 = (_QWORD *)(result + 136);
      v11 = 112;
    }
    v32 = (v11 >> 4) + 1;
    v33 = &v7[2 * (v32 & 0x1FFFFFFFFFFFFFFELL)];
    v34 = v7 + 2;
    v35 = v32 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v34 - 2) = -4096;
      *v34 = -4096;
      v34 += 4;
      v35 -= 2;
    }
    while (v35);
    if (v32 == (v32 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_50:
      if ((_DWORD)v8)
      {
        v42 = (unint64_t *)v6;
        do
        {
          if ((*v42 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v45[0] = 0;
            llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>(v2, v42, v45);
            v43 = v45[0];
            *(_QWORD *)v45[0] = *v42;
            *(_QWORD *)(v43 + 8) = v42[1];
            *(_DWORD *)v2 += 2;
          }
          v42 += 2;
        }
        while (v42 != v9);
      }
      llvm::deallocate_buffer(v6, (void *)(16 * v8));
    }
    do
    {
LABEL_49:
      *v33 = -4096;
      v33 += 2;
    }
    while (v33 != v10);
    goto LABEL_50;
  }
  v12 = result + 8;
  v13 = v45;
  if ((*(_QWORD *)(result + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v14 = *(_QWORD *)(result + 24);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_10;
  }
  else
  {
    v36 = *(_QWORD *)(result + 16);
    v45[0] = *(_QWORD *)(result + 8);
    v45[1] = v36;
    v13 = v46;
    v14 = *(_QWORD *)(result + 24);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      v15 = *(_QWORD *)(result + 40);
      if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_11;
      goto LABEL_32;
    }
  }
  v37 = *(_QWORD *)(result + 32);
  *v13 = v14;
  v13[1] = v37;
  v13 += 2;
  v15 = *(_QWORD *)(result + 40);
  if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    v16 = *(_QWORD *)(result + 56);
    if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  *v13 = v15;
  v13[1] = *(_QWORD *)(result + 48);
  v13 += 2;
  v16 = *(_QWORD *)(result + 56);
  if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    v17 = *(_QWORD *)(result + 72);
    if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  *v13 = v16;
  v13[1] = *(_QWORD *)(result + 64);
  v13 += 2;
  v17 = *(_QWORD *)(result + 72);
  if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_13:
    v18 = *(_QWORD *)(result + 88);
    if ((v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  *v13 = v17;
  v13[1] = *(_QWORD *)(result + 80);
  v13 += 2;
  v18 = *(_QWORD *)(result + 88);
  if ((v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_14:
    v19 = *(_QWORD *)(result + 104);
    if ((v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  *v13 = v18;
  v13[1] = *(_QWORD *)(result + 96);
  v13 += 2;
  v19 = *(_QWORD *)(result + 104);
  if ((v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_15:
    v20 = *(_QWORD *)(result + 120);
    if ((v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  *v13 = v19;
  v13[1] = *(_QWORD *)(result + 112);
  v13 += 2;
  v20 = *(_QWORD *)(result + 120);
  if ((v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_16:
    v21 = *(_DWORD *)result;
    if (a2 < 9)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  *v13 = v20;
  v13[1] = *(_QWORD *)(result + 128);
  v13 += 2;
  v21 = *(_DWORD *)result;
  if (a2 < 9)
  {
LABEL_17:
    *(_QWORD *)result = v21 & 1;
    if ((v21 & 1) == 0)
      goto LABEL_18;
LABEL_39:
    v23 = (_QWORD *)(v2 + 136);
    v24 = 112;
    goto LABEL_20;
  }
LABEL_38:
  *(_DWORD *)result = v21 & 0xFFFFFFFE;
  v38 = a2;
  result = (uint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *(_QWORD *)(v2 + 8) = result;
  *(_QWORD *)(v2 + 16) = v38;
  v39 = *(_DWORD *)v2;
  *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
  if ((v39 & 1) != 0)
    goto LABEL_39;
LABEL_18:
  v22 = *(unsigned int *)(v2 + 16);
  if (!(_DWORD)v22)
    goto LABEL_42;
  v12 = *(_QWORD *)(v2 + 8);
  v23 = (_QWORD *)(v12 + 16 * v22);
  v24 = (unint64_t)v23 - v12 - 16;
  if (v24 < 0x10)
  {
    v26 = *(_QWORD **)(v2 + 8);
    do
    {
LABEL_41:
      *v26 = -4096;
      v26 += 2;
    }
    while (v26 != v23);
    goto LABEL_42;
  }
LABEL_20:
  v25 = (v24 >> 4) + 1;
  v26 = (_QWORD *)(v12 + 16 * (v25 & 0x1FFFFFFFFFFFFFFELL));
  v27 = (_QWORD *)(v12 + 16);
  v28 = v25 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v27 - 2) = -4096;
    *v27 = -4096;
    v27 += 4;
    v28 -= 2;
  }
  while (v28);
  if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_41;
LABEL_42:
  if (v45 != v13)
  {
    v40 = v45;
    do
    {
      if ((*v40 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v44 = 0;
        result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>(v2, v40, &v44);
        v41 = v44;
        *v44 = *v40;
        v41[1] = v40[1];
        *(_DWORD *)v2 += 2;
      }
      v40 += 2;
    }
    while (v40 != v13);
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::AffineExpr)>::callback_fn<void canonicalizeMapOrSetAndOperands<mlir::IntegerSet>(mlir::IntegerSet *,llvm::SmallVectorImpl<mlir::Value> *)::{lambda(mlir::AffineExpr)#1}>(unint64_t **a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) == 6)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, a2);
    v7 = v8;
    if (v8)
      goto LABEL_3;
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, 0);
    v7 = v8;
    if (v8)
    {
LABEL_3:
      v4 = *a1;
      result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v7);
      v6 = *v4;
      if ((*v4 & 1) == 0)
      {
LABEL_4:
        *(_QWORD *)(*(_QWORD *)v6 + 8 * (result >> 6)) |= 1 << result;
        return result;
      }
LABEL_12:
      *v4 = v6 & 0xFC00000000000000 | (2
                                       * (((v6 >> 1) & ~(-1 << (v6 >> 58)) | (1 << result)) & ~(-1 << (v6 >> 58)))) | 1;
      return result;
    }
  }
  v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) != 7)
  {
    result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, 0);
    if (!v8)
      return result;
LABEL_11:
    v4 = a1[1];
    result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v8);
    v6 = *v4;
    if ((*v4 & 1) == 0)
      goto LABEL_4;
    goto LABEL_12;
  }
  result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, a2);
  if (v8)
    goto LABEL_11;
  return result;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineApplyOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineApplyOp>::~SimplifyAffineOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineApplyOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineApplyOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineApplyOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineApplyOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t Value;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const double *v12;
  unsigned __int128 *v13;
  unint64_t v14;
  const double *v15;
  unsigned __int128 v16;
  unsigned __int128 v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x1E0C80C00];
  v32 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v32);
  v29 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v7 = 0;
    v9 = 0;
    v20 = 0;
    v32 = v34;
    HIDWORD(v33) = 8;
    goto LABEL_17;
  }
  v6 = *(unsigned int *)(a2 + 68);
  v7 = *(_QWORD *)(a2 + 72);
  v32 = v34;
  v33 = 0x800000000;
  if (v6 < 9)
  {
    v9 = 0;
    if (!(_DWORD)v6)
    {
      v20 = 0;
      goto LABEL_17;
    }
    v8 = v34;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v6, 8);
    v8 = (char *)v32 + 8 * v33;
    if (v6 >= 0xD
      && ((unint64_t)v8 >= v7 + 32 * v6 || v7 + 24 >= (unint64_t)v32 + 8 * v33 + 8 * v6))
    {
      v11 = v6 & 3;
      if ((v6 & 3) == 0)
        v11 = 4;
      v10 = v6 - v11;
      v8 += v10;
      v12 = (const double *)(v7 + 88);
      v13 = (unsigned __int128 *)((char *)v32 + 8 * v33 + 16);
      v14 = v10;
      do
      {
        v15 = v12 - 8;
        v16 = (unsigned __int128)vld4q_f64(v15);
        v17 = (unsigned __int128)vld4q_f64(v12);
        *(v13 - 1) = v16;
        *v13 = v17;
        v12 += 16;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      goto LABEL_14;
    }
  }
  v10 = 0;
LABEL_14:
  v18 = v6 - v10;
  v19 = (32 * v10) | 0x18;
  do
  {
    *v8++ = *(_QWORD *)(v7 + v19);
    v19 += 32;
    --v18;
  }
  while (v18);
  v20 = v33;
  v9 = v6;
LABEL_17:
  LODWORD(v33) = v20 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v29, (uint64_t)&v32);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v29, (uint64_t)&v32);
  simplifyMapWithOperands((mlir::AffineExpr *)&v29, (uint64_t *)v32, v33);
  if (v29 != Value)
  {
    v21 = v32;
    goto LABEL_19;
  }
  v21 = v32;
  if (!v9)
  {
LABEL_29:
    v23 = 0;
    if (v32 == v34)
      return v23;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v7 + 24) == *(_QWORD *)v32)
  {
    v25 = (uint64_t *)(v7 + 56);
    v26 = 8;
    while (8 * v9 != v26)
    {
      v27 = *v25;
      v25 += 4;
      v28 = *(_QWORD *)((char *)v32 + v26);
      v26 += 8;
      if (v27 != v28)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v30[1] = v33;
  v31 = v29;
  v30[0] = v21;
  v22 = mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(a3 + 1, *(_QWORD *)(a2 + 24), &v31, (uint64_t)v30);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v22);
  v23 = 1;
  v21 = v32;
  if (v32 != v34)
LABEL_20:
    free(v21);
  return v23;
}

void simplifyMapWithOperands(mlir::AffineExpr *a1, uint64_t *a2, unint64_t a3)
{
  unsigned int Kind;
  uint64_t Results;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t NumDims;
  uint64_t NumSymbols;
  void *v13;
  uint64_t v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD *LHS;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[7];

  v23[6] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x600000000;
  Kind = mlir::AffineExpr::getKind(a1);
  if (Kind > 6)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, Kind, 8);
  Results = mlir::AffineMap::getResults(a1);
  if (v8)
  {
    v9 = (void **)Results;
    v10 = 8 * v8;
    do
    {
      v20 = *v9;
      NumDims = mlir::AffineMap::getNumDims(a1);
      NumSymbols = mlir::AffineMap::getNumSymbols(a1);
      simplifyExprAndOperands(&v20, NumDims, NumSymbols, a2, a3);
      v13 = v20;
      v14 = v22;
      if (v22 >= (unint64_t)HIDWORD(v22))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 8);
        v14 = v22;
      }
      *((_QWORD *)v21 + v14) = v13;
      LODWORD(v22) = v22 + 1;
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v15 = mlir::AffineMap::getNumDims(a1);
  v16 = mlir::AffineMap::getNumSymbols(a1);
  v17 = v21;
  v18 = v22;
  LHS = (_QWORD *)mlir::AffineBinaryOpExpr::getLHS(a1);
  *(_QWORD *)a1 = mlir::AffineMap::get(v15, v16, (uint64_t)v17, v18, LHS);
  if (v21 != v23)
    free(v21);
}

uint64_t simplifyExprAndOperands(void **a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5)
{
  void *v10;
  uint64_t result;
  int Kind;
  void *AffineBinaryOpExpr;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t LowerBound;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t UpperBound;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t BoundForAffineExpr;
  void *v29;
  unsigned __int8 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  void *v47;
  mlir::MLIRContext *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  mlir::MLIRContext **v55;
  uint64_t v56;
  mlir::MLIRContext *v57;
  void *v58;
  void *v59;
  uint64_t LargestKnownDivisor;
  mlir::MLIRContext *DesiredBytecodeVersion;
  mlir::MLIRContext **v62;
  mlir::MLIRContext **v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  void *v68;
  uint64_t RHS;
  mlir::MLIRContext **LHS;
  void *v71;
  mlir::MLIRContext **v72;
  mlir::MLIRContext **v73;
  void *v74;
  uint64_t v75;
  _BYTE v76[48];
  void *v77;
  uint64_t v78;
  _QWORD v79[8];

  v79[6] = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  v77 = *a1;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) >= 5)
  {
    result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, 0);
    v71 = v77;
    if (!v77)
      return result;
  }
  else
  {
    result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, (uint64_t)v10);
    v71 = v77;
    if (!v77)
      return result;
  }
  LHS = (mlir::MLIRContext **)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v71);
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v71);
  simplifyExprAndOperands(&LHS, a2, a3, a4, a5);
  simplifyExprAndOperands(&RHS, a2, a3, a4, a5);
  Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
  AffineBinaryOpExpr = (void *)mlir::getAffineBinaryOpExpr(Kind, LHS, RHS);
  *a1 = AffineBinaryOpExpr;
  v77 = AffineBinaryOpExpr;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) >= 5)
  {
    result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, 0);
    v71 = v77;
    if (!v77)
      return result;
  }
  else
  {
    result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, (uint64_t)AffineBinaryOpExpr);
    v71 = v77;
    if (!v77)
      return result;
  }
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)a1) != 3
    && mlir::AffineExpr::getKind((mlir::AffineExpr *)a1) != 4)
  {
    result = mlir::AffineExpr::getKind((mlir::AffineExpr *)a1);
    if ((_DWORD)result != 2)
      return result;
  }
  LHS = (mlir::MLIRContext **)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v71);
  v14 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v71);
  RHS = (uint64_t)v14;
  v77 = v14;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) == 5)
  {
    result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, (uint64_t)v14);
    v68 = v77;
    if (!v77)
      return result;
  }
  else
  {
    result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, 0);
    v68 = v77;
    if (!v77)
      return result;
  }
  result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v68);
  if (result < 1)
    return result;
  v65 = result;
  v67 = a4;
  DesiredBytecodeVersion = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
  v63 = LHS;
  v77 = v79;
  v78 = 0x300000000;
  v74 = v76;
  v75 = 0x300000000;
  v15 = 8 * a5;
  if (a5 < 4)
  {
    if (!a5)
      goto LABEL_27;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, a5, 16);
    if (a5 > HIDWORD(v75))
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, a5, 16);
  }
  v16 = 8 * a5;
  do
  {
    v17 = *a4;
    LowerBound = getLowerBound(*a4);
    v20 = v19;
    v21 = v78;
    if (v78 >= (unint64_t)HIDWORD(v78))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, v78 + 1, 16);
      v21 = v78;
    }
    v22 = (uint64_t *)((char *)v77 + 16 * v21);
    *v22 = LowerBound;
    v22[1] = v20;
    LODWORD(v78) = v78 + 1;
    UpperBound = getUpperBound(v17);
    v25 = v24;
    v26 = v75;
    if (v75 >= (unint64_t)HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v75 + 1, 16);
      v26 = v75;
    }
    v27 = (unint64_t *)((char *)v74 + 16 * v26);
    *v27 = UpperBound;
    v27[1] = v25;
    LODWORD(v75) = v75 + 1;
    ++a4;
    v16 -= 8;
  }
  while (v16);
LABEL_27:
  v73 = v63;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v73) == 5)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v73, (uint64_t)v63);
    if (v73)
      goto LABEL_29;
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v73, 0);
    if (v73)
    {
LABEL_29:
      BoundForAffineExpr = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v73);
      v64 = 1;
      v29 = v74;
      if (v74 == v76)
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  BoundForAffineExpr = mlir::getBoundForAffineExpr((uint64_t)v63, a2, a3, (uint64_t)v77, v78, (uint64_t)v74, v75, 0);
  v64 = v30;
  v29 = v74;
  if (v74 != v76)
LABEL_30:
    free(v29);
LABEL_31:
  if (v77 != v79)
    free(v77);
  v62 = LHS;
  v77 = v79;
  v78 = 0x300000000;
  v66 = BoundForAffineExpr;
  v74 = v76;
  v75 = 0x300000000;
  if (a5 < 4)
  {
    if (!a5)
      goto LABEL_46;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, a5, 16);
    if (a5 > HIDWORD(v75))
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, a5, 16);
  }
  v31 = v67;
  do
  {
    v32 = *v31;
    v33 = getLowerBound(*v31);
    v35 = v34;
    v36 = v78;
    if (v78 >= (unint64_t)HIDWORD(v78))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, v78 + 1, 16);
      v36 = v78;
    }
    v37 = (uint64_t *)((char *)v77 + 16 * v36);
    *v37 = v33;
    v37[1] = v35;
    LODWORD(v78) = v78 + 1;
    v38 = getUpperBound(v32);
    v40 = v39;
    v41 = v75;
    if (v75 >= (unint64_t)HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v75 + 1, 16);
      v41 = v75;
    }
    v42 = (unint64_t *)((char *)v74 + 16 * v41);
    *v42 = v38;
    v42[1] = v40;
    LODWORD(v75) = v75 + 1;
    ++v31;
    v15 -= 8;
  }
  while (v15);
LABEL_46:
  v73 = v62;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v73) == 5)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v73, (uint64_t)v62);
    v44 = v65;
    v43 = v66;
    v72 = v73;
    if (v73)
      goto LABEL_48;
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v73, 0);
    v44 = v65;
    v43 = v66;
    v72 = v73;
    if (v73)
    {
LABEL_48:
      v45 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v72);
      v46 = 1;
      v47 = v74;
      if (v74 == v76)
        goto LABEL_50;
      goto LABEL_49;
    }
  }
  v45 = mlir::getBoundForAffineExpr((uint64_t)v62, a2, a3, (uint64_t)v77, v78, (uint64_t)v74, v75, 1);
  v46 = v51;
  v47 = v74;
  if (v74 != v76)
LABEL_49:
    free(v47);
LABEL_50:
  if (v77 != v79)
    free(v77);
  if (!v64 || !v46)
    goto LABEL_84;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71) == 3)
  {
    v49 = (unint64_t)v44 >> 63;
    if (v43 && (unint64_t)v43 >> 63 != (_DWORD)v49)
    {
      v50 = ~(~v43 / v44);
      if (!v45)
        goto LABEL_64;
    }
    else
    {
      v50 = v43 / v44;
      if (!v45)
      {
LABEL_64:
        if (v50 == v45 / v44)
        {
LABEL_65:
          if (v43 && (unint64_t)v43 >> 63 != (_DWORD)v49)
          {
            v52 = ~(~v43 / v44);
LABEL_101:
            v57 = DesiredBytecodeVersion;
            goto LABEL_102;
          }
          goto LABEL_100;
        }
        goto LABEL_69;
      }
    }
    if ((unint64_t)v45 >> 63 == (_DWORD)v49)
      goto LABEL_64;
    if (v50 == ~(~v45 / v44))
      goto LABEL_65;
  }
LABEL_69:
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71) == 4)
  {
    v53 = v43 < 1 ? v43 / v44 : (v43 - 1) / v44 + 1;
    v54 = v45 < 1 ? v45 / v44 : (v45 - 1) / v44 + 1;
    if (v53 == v54)
    {
      if (v43 >= 1)
      {
        v52 = (v43 - 1) / v44 + 1;
        goto LABEL_101;
      }
LABEL_100:
      v52 = v43 / v44;
      goto LABEL_101;
    }
  }
  result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
  if ((_DWORD)result == 2 && (v43 & 0x8000000000000000) == 0 && v43 < v44 && v45 < v44)
  {
    *a1 = LHS;
    return result;
  }
LABEL_84:
  v72 = 0;
  v73 = 0;
  v55 = LHS;
  v77 = LHS;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) >= 5)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, 0);
    v56 = (uint64_t)v67;
    v74 = v77;
    if (!v77)
      goto LABEL_89;
LABEL_88:
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v74))
      goto LABEL_89;
    v58 = (void *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v74);
    v59 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v74);
    LargestKnownDivisor = getLargestKnownDivisor(v58, v56);
    result = isNonNegativeBoundedBy((uint64_t)v59, v56, a5, LargestKnownDivisor);
    if ((result & 1) == 0)
    {
      LargestKnownDivisor = getLargestKnownDivisor(v59, v56);
      if (!isNonNegativeBoundedBy((uint64_t)v58, v56, a5, LargestKnownDivisor))
        goto LABEL_89;
      result = (uint64_t)v58;
      v58 = v59;
      v59 = (void *)result;
    }
    v72 = (mlir::MLIRContext **)v59;
    v73 = (mlir::MLIRContext **)v58;
    if (!(v44 % LargestKnownDivisor))
    {
      result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
      if ((_DWORD)result == 3)
      {
        result = mlir::AffineExpr::floorDiv(&v73, (uint64_t)v68);
LABEL_103:
        *a1 = (void *)result;
        return result;
      }
    }
    if (!(LargestKnownDivisor % v44))
    {
      result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
      if ((_DWORD)result == 2)
      {
        result = mlir::AffineExpr::operator%((unint64_t *)&v72, (uint64_t)v68);
        goto LABEL_103;
      }
    }
    return result;
  }
  mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, (uint64_t)v55);
  v56 = (uint64_t)v67;
  v74 = v77;
  if (v77)
    goto LABEL_88;
LABEL_89:
  if (isNonNegativeBoundedBy((uint64_t)LHS, v56, a5, v44)
    && mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71) == 3
    || (result = getLargestKnownDivisor(LHS, v56), !(result % v44))
    && (result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71), (_DWORD)result == 2))
  {
    v57 = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
    v52 = 0;
LABEL_102:
    result = mlir::getAffineConstantExpr((mlir *)v52, v57, v48);
    goto LABEL_103;
  }
  return result;
}

BOOL isNonNegativeBoundedBy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t LHS;
  uint64_t v10;
  mlir::Block *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t Value;

  Value = a1;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) != 5)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&Value, 0);
    v21 = Value;
    if (Value)
      goto LABEL_3;
LABEL_10:
    Value = a1;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) == 6)
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&Value, a1);
      v21 = Value;
      if (!Value)
        return 0;
    }
    else
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&Value, 0);
      v21 = Value;
      if (!Value)
        return 0;
    }
    v10 = *(_QWORD *)(a2 + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v21));
    if (v10)
    {
      if ((*(_QWORD *)(v10 + 8) & 7) == 7)
      {
        v11 = *(mlir::Block **)(v10 + 16);
        if (v11)
        {
          v12 = *(_QWORD *)(mlir::Block::getParent(v11) + 16);
          if (v12
            && *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
          {
            v14 = v12 + 64;
            v15 = *(unsigned int *)(v12 + 44);
            v16 = (uint64_t *)(v12 + 64 + 16 * ((v15 >> 23) & 1));
            v17 = *(_QWORD *)((((unint64_t)v16 + ((v15 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                            + 32 * *(unsigned int *)(v12 + 40)
                            + 8);
            v18 = v17 ? v17 - 8 : 0;
            if (**(_QWORD **)(v18 + 48) == v10)
            {
              Value = *v16;
              Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
              if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value))
              {
                Value = *(_QWORD *)(v14 + 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1));
                Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
                if ((mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value) & 0x8000000000000000) == 0)
                {
                  v19 = HIBYTE(*(_DWORD *)(v12 + 44))
                      ? v14 + 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1)
                      : 0;
                  Value = *(_QWORD *)(v19 + 16);
                  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
                  if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value))
                  {
                    v20 = HIBYTE(*(_DWORD *)(v12 + 44))
                        ? v14 + 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1)
                        : 0;
                    Value = *(_QWORD *)(v20 + 16);
                    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
                    if (mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value) <= a4)
                      return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&Value, a1);
  v21 = Value;
  if (!Value)
    goto LABEL_10;
LABEL_3:
  LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v21);
  return LHS >= 0 && LHS < a4;
}

uint64_t getLargestKnownDivisor(void *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  mlir::Block *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t LargestKnownDivisorOfMapExprs;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *__p;
  unsigned int v26;
  uint64_t v27;

  v24 = a1;
  mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v24);
  v4 = v3;
  v5 = (uint64_t)v24;
  __p = v24;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&__p) == 6)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&__p, v5);
    v23 = __p;
    if (!__p)
      return v4;
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&__p, 0);
    v23 = __p;
    if (!__p)
      return v4;
  }
  v6 = *(_QWORD *)(a2 + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v23));
  if (v6)
    v7 = (*(_QWORD *)(v6 + 8) & 7) == 7;
  else
    v7 = 0;
  if (!v7)
    return 1;
  v8 = *(mlir::Block **)(v6 + 16);
  if (!v8)
    return 1;
  v9 = *(_QWORD *)(mlir::Block::getParent(v8) + 16);
  if (!v9
    || *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
  {
    return 1;
  }
  v11 = v9 + 64;
  v12 = *(unsigned int *)(v9 + 44);
  v13 = (void **)(v9 + 64 + 16 * ((v12 >> 23) & 1));
  v14 = *(_QWORD *)((((unint64_t)v13 + ((v12 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v9 + 40)
                  + 8);
  v15 = v14 ? v14 - 8 : 0;
  if (**(_QWORD **)(v15 + 48) != v6)
    return 1;
  __p = *v13;
  __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&__p)
    && (__p = *(void **)(v11 + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1)),
        __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p),
        !mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p)))
  {
    if (HIBYTE(*(_DWORD *)(v9 + 44)))
      v21 = v11 + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1);
    else
      v21 = 0;
    v27 = *(_QWORD *)(v21 + 8);
    mlir::IntegerAttr::getValue(&v27, (llvm::APInt *)&__p);
    if (v26 > 0x40)
    {
      v22 = *(_QWORD *)__p;
      operator delete[](__p);
      return v22;
    }
    else
    {
      return (uint64_t)((_QWORD)__p << -(uint64_t)v26) >> -(uint64_t)v26;
    }
  }
  else
  {
    __p = *(void **)(v11 + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1));
    __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
    LargestKnownDivisorOfMapExprs = mlir::AffineMap::getLargestKnownDivisorOfMapExprs((mlir::AffineMap *)&__p);
    if (HIBYTE(*(_DWORD *)(v9 + 44)))
      v18 = v11 + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1);
    else
      v18 = 0;
    v27 = *(_QWORD *)(v18 + 8);
    mlir::IntegerAttr::getValue(&v27, (llvm::APInt *)&__p);
    if (v26 > 0x40)
    {
      v19 = *(_QWORD *)__p;
      operator delete[](__p);
    }
    else
    {
      v19 = (uint64_t)((_QWORD)__p << -(uint64_t)v26) >> -(uint64_t)v26;
    }
    if (v19)
    {
      if (v19 >= 0)
        v20 = v19;
      else
        v20 = -v19;
      do
      {
        v4 = v20;
        v20 = LargestKnownDivisorOfMapExprs % v20;
        LargestKnownDivisorOfMapExprs = v4;
      }
      while (v20);
      return v4;
    }
    return LargestKnownDivisorOfMapExprs;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x1E0C80C00];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.apply", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.apply";
    v24[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[38];
  unint64_t v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"affine.yield", 12);
  mlir::ValueRange::ValueRange(v6, 0, 0);
  mlir::OperationState::addOperands((uint64_t)v5, v6[0], v6[1]);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void `anonymous namespace'::AffineForEmptyLoopFolder::~AffineForEmptyLoopFolder(_anonymous_namespace_::AffineForEmptyLoopFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineForOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineForOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineForOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::AffineForEmptyLoopFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t TrivialConstantTripCount;
  unint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  mlir::GenericProgramPoint **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54[2];
  void *v55;
  uint64_t v56;
  _BYTE v57[32];
  unint64_t v58[3];

  v58[2] = *MEMORY[0x1E0C80C00];
  v3 = a2 + 64;
  v4 = *(_QWORD *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  v5 = v4 - 8;
  if (!v4)
    v5 = 0;
  v6 = v5 + 32;
  v7 = *(_QWORD *)(v5 + 40);
  if (v7 != v6 && *(_QWORD *)(v7 + 8) == v6)
  {
    if (!*(_DWORD *)(a2 + 36))
      return 1;
    v13 = TrivialConstantTripCount;
    v15 = v14;
    if (v14 && !TrivialConstantTripCount)
    {
      v16 = *(unsigned int *)(a2 + 44);
      if (HIBYTE(*(_DWORD *)(a2 + 44)))
        v17 = (_DWORD *)(v3 + 16 * ((v16 >> 23) & 1));
      else
        v17 = 0;
      v18 = v17[6];
      v19 = v17[7];
      v20 = v17[8];
      if ((v16 & 0x800000) != 0)
        v21 = *(_QWORD *)(a2 + 72);
      else
        v21 = 0;
      mlir::ValueRange::ValueRange(v58, v21 + 32 * (v19 + v18), (v20 + v19 + v18) - (unint64_t)(v19 + v18));
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v58[0], v58[1]);
      return 1;
    }
    v22 = *(unsigned int *)(a2 + 40);
    v23 = v3
        + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
        + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8);
    v55 = v57;
    v56 = 0x400000000;
    v24 = *(_QWORD *)(((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v22 + 8);
    if (v24)
      v25 = (mlir::GenericProgramPoint **)(v24 - 8);
    else
      v25 = 0;
    mlir::Block::getTerminator(v25);
    v27 = *(_QWORD *)(((v3
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 8);
    if (v27)
      v28 = v27 - 8;
    else
      v28 = 0;
    v51 = a3;
    v52 = v13;
    v53 = v15;
    if ((*(_BYTE *)(v26 + 46) & 0x80) == 0 || (v29 = v26, v30 = *(unsigned int *)(v26 + 68), !(_DWORD)v30))
    {
      v33 = 0;
      v32 = 0;
LABEL_40:
      if (!v53 && ((v33 | v32) & 1) != 0
        || (v53 ? (v46 = v52 > 1) : (v46 = 0), !v46 ? (v47 = 0) : (v47 = 1), (v47 & v32 & 1) != 0))
      {
        v8 = 0;
        v48 = v55;
        if (v55 == v57)
          return v8;
      }
      else
      {
        mlir::ValueRange::ValueRange(v54, (uint64_t)v55, v56);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v51 + 24))(v51, a2, v54[0], v54[1]);
        v8 = 1;
        v48 = v55;
        if (v55 == v57)
          return v8;
      }
      free(v48);
      return v8;
    }
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = *(_QWORD *)(v28 + 48);
    v35 = *(_QWORD *)(v28 + 56) - v34;
    v36 = (char *)(v34 + 8);
    v37 = 8 * (v35 >> 3);
    v38 = (char *)(v34 + v37);
    v39 = v37 - 8;
    while (1)
    {
      v41 = *(_QWORD *)(*(_QWORD *)(v29 + 72) + 32 * v31 + 24);
      v42 = v36;
      if (v35 != 8)
      {
        v43 = v39;
        v42 = v36;
        while (*(_QWORD *)v42 != v41)
        {
          v42 += 8;
          v43 -= 8;
          if (!v43)
          {
            v42 = v38;
            break;
          }
        }
      }
      if (v42 != v38)
        break;
      v40 = v56;
      v33 = 1;
      if (v56 >= (unint64_t)HIDWORD(v56))
        goto LABEL_38;
LABEL_27:
      *((_QWORD *)v55 + v40) = v41;
      LODWORD(v56) = v56 + 1;
      if (++v31 == v30)
        goto LABEL_40;
    }
    v44 = ((unint64_t)(v42 - v36) >> 3);
    v32 |= v31 != v44;
    if (*(_BYTE *)(a2 + 47))
      v45 = a2 + 80;
    else
      v45 = 0;
    v41 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                    + 32 * (*(_DWORD *)(v45 + 28) + *(_DWORD *)(v45 + 24))
                    + 32 * v44
                    + 24);
    v40 = v56;
    if (v56 < (unint64_t)HIDWORD(v56))
      goto LABEL_27;
LABEL_38:
    v50 = v33;
    v49 = v39;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v40 + 1, 8);
    v39 = v49;
    v33 = v50;
    v40 = v56;
    goto LABEL_27;
  }
  return 0;
}

mlir::Block *llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::affine::AffineForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_1>(mlir::Operation ***a1, uint64_t a2)
{
  return mlir::Operation::isProperAncestor(**a1, *(Operation **)(a2 + 16));
}

uint64_t mlir::AsmParser::parseAttribute<mlir::IntegerSetAttr>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD **v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v26, a3))
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
    v13 = v26;
  else
    v13 = 0;
  *a2 = v13;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    v24 = "invalid kind of attribute specified";
    v25 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v27, a1, v12, &v24);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    if (v34)
    {
      v16 = (_QWORD **)__p;
      if (__p)
      {
        v17 = v33;
        v18 = __p;
        if (v33 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v33 = v16;
        operator delete(v18);
      }
      v19 = v30;
      if (v30)
      {
        v20 = v31;
        v21 = v30;
        if (v31 != v30)
        {
          do
          {
            v23 = (void *)*--v20;
            v22 = v23;
            *v20 = 0;
            if (v23)
              operator delete[](v22);
          }
          while (v20 != v19);
          v21 = v30;
        }
        v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29)
        free(v28);
    }
  }
  return v14;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineIfOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[38];
  unint64_t v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"affine.yield", 12);
  mlir::ValueRange::ValueRange(v6, 0, 0);
  mlir::OperationState::addOperands((uint64_t)v5, v6[0], v6[1]);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void `anonymous namespace'::SimplifyDeadElse::~SimplifyDeadElse(_anonymous_namespace_::SimplifyDeadElse *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineIfOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineIfOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineIfOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyDeadElse::matchAndRewrite(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v5 = a2[11];
  if ((v5 & 0x7FFFFF) != 0)
  {
    v6 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
    if (*(_QWORD *)(v6 + 24) == v6 + 24)
      return 0;
  }
  else if (MEMORY[0x18] == 24)
  {
    return 0;
  }
  v7 = *(_QWORD *)((((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17]
                   + ((v5 >> 21) & 0x7F8)
                   + 3) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * a2[10]
                 + 32);
  v8 = v7 - 8;
  if (!v7)
    v8 = 0;
  v9 = v8 + 32;
  v10 = *(_QWORD *)(v8 + 40);
  if (v10 == v9 || *(_QWORD *)(v10 + 8) != v9 || a2[9])
    return 0;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a3 + 72))(a3, a2);
  v12 = *(_QWORD *)((((unint64_t)&a2[4 * (((unint64_t)a2[11] >> 23) & 1) + 17]
                    + (((unint64_t)a2[11] >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a2[10]
                  + 32);
  if (v12)
    v13 = v12 - 8;
  else
    v13 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, v13);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a3 + 80))(a3, a2);
  return 1;
}

void `anonymous namespace'::AlwaysTrueOrFalseIf::~AlwaysTrueOrFalseIf(_anonymous_namespace_::AlwaysTrueOrFalseIf *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::AlwaysTrueOrFalseIf::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t InherentAttr;
  char v6;
  int *v7;
  int *Value;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  mlir::GenericProgramPoint **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  _BOOL4 v19;
  mlir::MLIRContext **Constraint;
  int *v21;
  unint64_t v22[2];
  unint64_t v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"condition", 9);
    if (v6)
    {
      if (InherentAttr)
        goto LABEL_4;
LABEL_8:
      v7 = 0;
      goto LABEL_9;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "condition", 9uLL);
  if (!InherentAttr)
    goto LABEL_8;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
    v7 = (int *)InherentAttr;
  else
    v7 = 0;
LABEL_9:
  v21 = v7;
  Value = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v21);
  v21 = Value;
  if (mlir::IntegerSet::isEmptyIntegerSet(&v21))
  {
    v9 = *(unsigned int *)(a2 + 44);
    if (!*(_DWORD *)(a2 + 36))
    {
      if ((v9 & 0x7FFFFF) != 0)
      {
        v10 = ((a2 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(a2 + 40);
        if (*(_QWORD *)(v10 + 24) != v10 + 24)
          goto LABEL_13;
      }
      else if (MEMORY[0x18] != 24)
      {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a2);
      return 1;
    }
LABEL_13:
    v11 = (uint64_t *)(((a2 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 32);
LABEL_14:
    v12 = *v11;
    if (v12)
      v13 = (mlir::GenericProgramPoint **)(v12 - 8);
    else
      v13 = 0;
    mlir::Block::getTerminator(v13);
    v15 = v14;
    mlir::ValueRange::ValueRange(v23, 0, 0);
    mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v13, a2, v23[0], v23[1]);
    if ((*(_BYTE *)(v15 + 46) & 0x80) != 0)
    {
      v16 = *(_QWORD *)(v15 + 72);
      v17 = *(unsigned int *)(v15 + 68);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    mlir::ValueRange::ValueRange(v22, v16, v17);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v22[0], v22[1]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v15);
    return 1;
  }
  v21 = Value;
  if (mlir::IntegerSet::getNumEqualities((mlir::IntegerSet *)&v21) != 1
    || mlir::IntegerSet::getNumInequalities((mlir::IntegerSet *)&v21))
  {
    return 0;
  }
  Constraint = (mlir::MLIRContext **)mlir::IntegerSet::getConstraint((mlir::IntegerSet *)&v21, 0);
  v19 = mlir::AffineExpr::operator==(&Constraint, 0);
  result = 0;
  if (v19)
  {
    v11 = (uint64_t *)(((a2
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 8);
    goto LABEL_14;
  }
  return result;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineLoadOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineLoadOp>::~SimplifyAffineOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineLoadOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineLoadOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineLoadOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineLoadOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  const double *v14;
  unsigned __int128 *v15;
  unint64_t v16;
  const double *v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint64_t v20;
  int v21;
  void *v22;
  mlir::GenericProgramPoint *v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  unint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x1E0C80C00];
  v34 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v34);
  v30 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v34 = v36;
    v35 = 0x800000000;
    v7 = -1;
    v8 = 32;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v7, 8);
    v9 = v35;
    v10 = v34;
    v11 = (char *)v34 + 8 * v35;
    if (v7 < 0xD)
      goto LABEL_9;
    goto LABEL_7;
  }
  v6 = *(unsigned int *)(a2 + 68);
  v7 = v6 - 1;
  v8 = *(_QWORD *)(a2 + 72) + 32;
  v34 = v36;
  v35 = 0x800000000;
  if ((unint64_t)(v6 - 1) >= 9)
    goto LABEL_3;
  v9 = 0;
  if (v6 == 1)
  {
    v21 = 0;
    goto LABEL_17;
  }
  v10 = v36;
  v11 = v36;
  if (v7 < 0xD)
    goto LABEL_9;
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    v13 = v7 & 3;
    if ((v7 & 3) == 0)
      v13 = 4;
    v12 = v7 - v13;
    v11 += v12;
    v14 = (const double *)(v8 + 88);
    v15 = (unsigned __int128 *)&v10[v9 + 2];
    v16 = v12;
    do
    {
      v17 = v14 - 8;
      v18 = (unsigned __int128)vld4q_f64(v17);
      v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      *v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  v12 = 0;
LABEL_14:
  v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(_QWORD *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  v21 = v35;
  v9 = v7;
LABEL_17:
  LODWORD(v35) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v30, (uint64_t)&v34);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v30, (uint64_t)&v34);
  simplifyMapWithOperands((mlir::AffineExpr *)&v30, (uint64_t *)v34, v35);
  if (v30 != Value)
  {
    v22 = v34;
    goto LABEL_19;
  }
  v22 = v34;
  if (!v9)
  {
LABEL_29:
    v24 = 0;
    if (v34 == v36)
      return v24;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v8 + 24) == *(_QWORD *)v34)
  {
    v26 = (uint64_t *)(v8 + 56);
    v27 = 1;
    while (v9 != v27)
    {
      v28 = *v26;
      v26 += 4;
      v29 = *((_QWORD *)v34 + v27++);
      if (v28 != v29)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v32[1] = v35;
  v33 = v30;
  v31 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v32[0] = v22;
  v23 = mlir::OpBuilder::create<mlir::affine::AffineLoadOp,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), &v31, &v33, (uint64_t)v32);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v23);
  v24 = 1;
  v22 = v34;
  if (v34 != v36)
LABEL_20:
    free(v22);
  return v24;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineLoadOp,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  unint64_t v24[2];
  _QWORD v25[39];

  v25[38] = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.load", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"affine.load";
    v22[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v11);
  v13 = *a3;
  v14 = *a4;
  v15 = mlir::ValueRange::ValueRange(v24, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  mlir::affine::AffineLoadOp::build((uint64_t)v15, (uint64_t)v25, v13, v14, v24[0], v24[1]);
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineLoadOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineStoreOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineStoreOp>::~SimplifyAffineOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineStoreOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineStoreOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineStoreOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineStoreOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  const double *v14;
  unsigned __int128 *v15;
  unint64_t v16;
  const double *v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  mlir::GenericProgramPoint *v24;
  uint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  unint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[9];

  v38[8] = *MEMORY[0x1E0C80C00];
  v36 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  v31 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v36 = v38;
    v37 = 0x800000000;
    v7 = -2;
    v8 = 64;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v7, 8);
    v9 = v37;
    v10 = v36;
    v11 = (char *)v36 + 8 * v37;
    if (v7 < 0xD)
      goto LABEL_9;
    goto LABEL_7;
  }
  v6 = *(unsigned int *)(a2 + 68);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(a2 + 72) + 64;
  v36 = v38;
  v37 = 0x800000000;
  if ((unint64_t)(v6 - 2) >= 9)
    goto LABEL_3;
  v9 = 0;
  if (v6 == 2)
  {
    v21 = 0;
    goto LABEL_17;
  }
  v10 = v38;
  v11 = v38;
  if (v7 < 0xD)
    goto LABEL_9;
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    v13 = v7 & 3;
    if ((v7 & 3) == 0)
      v13 = 4;
    v12 = v7 - v13;
    v11 += v12;
    v14 = (const double *)(v8 + 88);
    v15 = (unsigned __int128 *)&v10[v9 + 2];
    v16 = v12;
    do
    {
      v17 = v14 - 8;
      v18 = (unsigned __int128)vld4q_f64(v17);
      v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      *v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  v12 = 0;
LABEL_14:
  v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(_QWORD *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  v21 = v37;
  v9 = v7;
LABEL_17:
  LODWORD(v37) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  simplifyMapWithOperands((mlir::AffineExpr *)&v31, (uint64_t *)v36, v37);
  if (v31 != Value)
  {
    v22 = v36;
    goto LABEL_19;
  }
  v22 = v36;
  if (!v9)
  {
LABEL_29:
    v25 = 0;
    if (v36 == v38)
      return v25;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v8 + 24) == *(_QWORD *)v36)
  {
    v27 = (uint64_t *)(v8 + 56);
    v28 = 1;
    while (v9 != v28)
    {
      v29 = *v27;
      v27 += 4;
      v30 = *((_QWORD *)v36 + v28++);
      if (v29 != v30)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v34[1] = v37;
  v35 = v31;
  v23 = *(_QWORD *)(a2 + 72);
  v33 = *(_QWORD *)(v23 + 24);
  v34[0] = v22;
  v32 = *(_QWORD *)(v23 + 56);
  v24 = mlir::OpBuilder::create<mlir::affine::AffineStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), &v33, &v32, &v35, (uint64_t)v34);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v24);
  v25 = 1;
  v22 = v36;
  if (v36 != v38)
LABEL_20:
    free(v22);
  return v25;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  unint64_t v29[2];
  _QWORD v30[39];

  v30[38] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.store", (const unsigned __int8 *)0xC, Context);
  if (!v14)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"affine.store";
    v27[3] = 12;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v26 = 259;
    llvm::operator+(v27, v25, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  mlir::ValueRange::ValueRange(v29, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  v18 = v29[0];
  v19 = v29[1];
  v27[0] = v15;
  v25[0] = v16;
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v27, 1);
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v25, 1);
  mlir::OperationState::addOperands((uint64_t)v30, v18, v19);
  v20 = mlir::AffineMapAttr::get(v17);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(v30) = v20;
  v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineStoreOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v22;
}

void mlir::RewritePatternSet::addImpl<CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E13E00;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>]";
    v25 = 115;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E13D50;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>]";
    v25 = 111;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<MergeAffineMinMaxOp<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E13608;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = MergeAffineMinMaxOp<mlir::affine::AffineMinOp>]";
    v25 = 96;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E13EB0;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>]";
    v25 = 119;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>::~CanonicalizeSingleResultAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>::~CanonicalizeSingleResultAffineMinMaxOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMinOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMinOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  mlir::GenericProgramPoint *v8;
  _QWORD v10[2];
  uint64_t Value;

  v5 = a2 + 64;
  v10[0] = *(_QWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  v10[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v10) != 1)
    return 0;
  v10[0] = *(_QWORD *)(v5 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    v7 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v10[0] = v7;
  v10[1] = v6;
  v8 = mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap,mlir::OperandRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&Value, (uint64_t)v10);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v8);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap,mlir::OperandRange>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x1E0C80C00];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.apply", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.apply";
    v24[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

_QWORD *DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>::~DeduplicateAffineMinMaxExpressions(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>::~DeduplicateAffineMinMaxExpressions(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t Results;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int NumDims;
  int NumSymbols;
  unint64_t v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  uint64_t v23;
  uint64_t Value;
  void *v25;
  uint64_t v26;
  _BYTE v27[32];
  unint64_t v28[3];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v25);
  v25 = v27;
  v26 = 0x400000000;
  Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  v7 = v26;
  if (v6)
  {
    v8 = (uint64_t *)Results;
    v9 = (uint64_t *)(Results + 8 * v6);
    do
    {
      v10 = *v8;
      v11 = v25;
      v12 = v7;
      v13 = (char *)v25;
      if (v7)
      {
        v14 = 8 * v7;
        v13 = (char *)v25;
        while (*(_QWORD *)v13 != v10)
        {
          v13 += 8;
          v14 -= 8;
          if (!v14)
          {
            v13 = (char *)v25 + 8 * v7;
            break;
          }
        }
      }
      if (v7 == (v13 - (_BYTE *)v25) >> 3)
      {
        if (v7 >= HIDWORD(v26))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v7 + 1, 8);
          v12 = v26;
          v11 = v25;
        }
        v11[v12] = v10;
        v7 = v26 + 1;
        LODWORD(v26) = v26 + 1;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  if (v7 == mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value))
  {
    v15 = 0;
    v16 = v25;
    if (v25 == v27)
      return v15;
    goto LABEL_19;
  }
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  v23 = mlir::AffineMap::get(NumDims, NumSymbols, (uint64_t)v25, v26, a3[1]);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v19 = *(unsigned int *)(a2 + 68);
    v20 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  mlir::ValueRange::ValueRange(v28, v20, v19);
  v21 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,mlir::ValueRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&v23, (uint64_t *)v28);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v21);
  v15 = 1;
  v16 = v25;
  if (v25 != v27)
LABEL_19:
    free(v16);
  return v15;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,mlir::ValueRange>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  _QWORD v26[8];
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD v30[29];

  v30[28] = *MEMORY[0x1E0C80C00];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.min", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.min";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v9);
  v11 = *a3;
  v12 = *a4;
  v13 = a4[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v26, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(v26) = v16;
  v17 = v28;
  if (v28 >= v29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v28 + 1, 8);
    v17 = v28;
  }
  *(_QWORD *)(v27 + 8 * v17) = IndexType;
  ++v28;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v19;
}

_QWORD *MergeAffineMinMaxOp<mlir::affine::AffineMinOp>::~MergeAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void MergeAffineMinMaxOp<mlir::affine::AffineMinOp>::~MergeAffineMinMaxOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t MergeAffineMinMaxOp<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  unint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t NumDims;
  unint64_t v10;
  uint64_t v11;
  unint64_t NumSymbols;
  void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t *v19;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t *v25;
  int v27;
  uint64_t Results;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  uint64_t DefiningOp;
  unsigned int Position;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  mlir::GenericProgramPoint *v69;
  uint64_t v70;
  void *v71;
  mlir::IndexType **v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t Value;
  mlir::MLIRContext **v78[4];
  _QWORD v79[2];
  mlir::MLIRContext **v80;
  mlir::MLIRContext **v81;
  void *v82;
  unint64_t v83;
  _BYTE v84[64];
  void *v85;
  uint64_t v86;
  _BYTE v87[32];
  void *v88;
  uint64_t v89;
  _BYTE v90[32];
  void *v91;
  uint64_t v92;
  _BYTE v93[64];
  char *v94;
  unint64_t v95;
  _BYTE v96[64];
  void *v97;
  unint64_t v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v94 = *(char **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    v6 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v94, v6, v5);
  v7 = v94;
  v8 = v95;
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (v8 < NumDims)
    NumDims = v8;
  v99 = v7;
  v100 = NumDims;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v10 = *(unsigned int *)(a2 + 68);
    v11 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v94, v11, v10);
  NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  if (v95 <= NumSymbols)
  {
    v13 = v94;
    NumSymbols = v95;
  }
  else
  {
    v13 = (void *)mlir::ValueRange::offset_base(&v94, v95 - NumSymbols);
  }
  v97 = v13;
  v98 = NumSymbols;
  v14 = v99;
  v15 = v100;
  v94 = v96;
  v95 = 0x800000000;
  if (v100 < 9)
  {
    v16 = 0;
    v91 = v99;
    v92 = 0;
    v17 = v96;
    if (!v100)
    {
      v21 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v100, 8);
    v16 = v95;
    v17 = v94;
    v91 = v14;
    v92 = 0;
  }
  v18 = 0;
  v19 = (uint64_t *)&v17[8 * v16];
  do
  {
    *v19++ = mlir::ValueRange::dereference_iterator(&v91, v18);
    v18 = ++v92;
  }
  while (v91 != v14 || v18 != v15);
  v21 = v95;
  v13 = v97;
  NumSymbols = v98;
LABEL_20:
  LODWORD(v95) = v21 + v15;
  v91 = v93;
  v92 = 0x800000000;
  if (NumSymbols < 9)
  {
    v22 = 0;
    v82 = v13;
    v83 = 0;
    v23 = v93;
    if (!NumSymbols)
    {
      v27 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, NumSymbols, 8);
    v22 = v92;
    v23 = v91;
    v82 = v13;
    v83 = 0;
  }
  v24 = 0;
  v25 = (uint64_t *)&v23[8 * v22];
  do
  {
    *v25++ = mlir::ValueRange::dereference_iterator(&v82, v24);
    v24 = ++v83;
  }
  while (v82 != v13 || v24 != NumSymbols);
  v27 = v92;
LABEL_30:
  LODWORD(v92) = v27 + NumSymbols;
  v88 = v90;
  v89 = 0x400000000;
  v85 = v87;
  v86 = 0x400000000;
  Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  if (v29)
  {
    v30 = (void **)Results;
    v31 = 8 * v29;
    while (1)
    {
      v33 = *v30;
      v82 = *v30;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v82) == 7)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, (uint64_t)v33);
        v79[0] = v82;
        if (v82)
          goto LABEL_37;
LABEL_40:
        v82 = v33;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v82) == 6)
        {
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, (uint64_t)v33);
          v78[0] = (mlir::MLIRContext **)v82;
          if (!v82)
            goto LABEL_32;
        }
        else
        {
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, 0);
          v78[0] = (mlir::MLIRContext **)v82;
          if (!v82)
            goto LABEL_32;
        }
        Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v78);
        v82 = (void *)mlir::ValueRange::dereference_iterator(&v99, Position);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v82);
        if (DefiningOp)
          goto LABEL_45;
LABEL_32:
        v32 = v89;
        if (v89 >= (unint64_t)HIDWORD(v89))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v89 + 1, 8);
          v32 = v89;
        }
        *((_QWORD *)v88 + v32) = v33;
        LODWORD(v89) = v89 + 1;
        ++v30;
        v31 -= 8;
        if (!v31)
          break;
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, 0);
        v79[0] = v82;
        if (!v82)
          goto LABEL_40;
LABEL_37:
        v34 = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v79);
        v82 = (void *)mlir::ValueRange::dereference_iterator(&v97, v34);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v82);
        if (!DefiningOp)
          goto LABEL_32;
LABEL_45:
        v37 = DefiningOp;
        if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id)
          goto LABEL_32;
        v38 = v86;
        if (v86 >= (unint64_t)HIDWORD(v86))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v87, v86 + 1, 8);
          v38 = v86;
        }
        *((_QWORD *)v85 + v38) = v37;
        LODWORD(v86) = v86 + 1;
        ++v30;
        v31 -= 8;
        if (!v31)
          break;
      }
    }
  }
  if ((_DWORD)v86)
  {
    v74 = a2;
    v73 = a3;
    v39 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
    v40 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
    if ((_DWORD)v86)
    {
      v41 = (char *)v85;
      v75 = (char *)v85 + 8 * v86;
      while (1)
      {
        v42 = *(_QWORD *)v41;
        v82 = *(void **)(*(_QWORD *)v41
                       + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)v41 + 44) >> 23) & 1)
                       + 64);
        v79[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v82);
        v43 = mlir::AffineMap::getNumDims((mlir::AffineMap *)v79);
        v44 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v79);
        if ((*(_BYTE *)(v42 + 46) & 0x80) != 0)
        {
          v45 = *(unsigned int *)(v42 + 68);
          v46 = *(_QWORD *)(v42 + 72);
        }
        else
        {
          v46 = 0;
          v45 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v82, v46, v45);
        v47 = v82;
        v48 = v83 >= v43 ? v43 : v83;
        if ((*(_BYTE *)(v42 + 46) & 0x80) != 0)
        {
          v49 = *(unsigned int *)(v42 + 68);
          v50 = *(_QWORD *)(v42 + 72);
        }
        else
        {
          v50 = 0;
          v49 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v82, v50, v49);
        v51 = v82;
        v52 = v44;
        if (v83 > v44)
          break;
        v52 = v83;
        v53 = v95;
        v54 = v48 + v95;
        if (v54 > HIDWORD(v95))
          goto LABEL_64;
LABEL_65:
        v82 = v47;
        v83 = 0;
        if (v48)
        {
          v55 = 0;
          v56 = (uint64_t *)&v94[8 * v53];
          do
          {
            *v56++ = mlir::ValueRange::dereference_iterator(&v82, v55);
            v55 = ++v83;
          }
          while (v82 != v47 || v55 != v48);
          LODWORD(v53) = v95;
        }
        LODWORD(v95) = v53 + v48;
        v58 = v92;
        v59 = v52 + v92;
        if (v59 > HIDWORD(v92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, v59, 8);
          v58 = v92;
        }
        v82 = v51;
        v83 = 0;
        if (v52)
        {
          v60 = 0;
          v61 = (uint64_t *)((char *)v91 + 8 * v58);
          do
          {
            *v61++ = mlir::ValueRange::dereference_iterator(&v82, v60);
            v60 = ++v83;
          }
          while (v82 != v51 || v60 != v52);
          LODWORD(v58) = v92;
        }
        LODWORD(v92) = v58 + v52;
        v63 = mlir::AffineMap::getResults((mlir::AffineMap *)v79);
        if (v64)
        {
          v65 = (void **)v63;
          v66 = 8 * v64;
          do
          {
            v82 = *v65;
            v78[0] = (mlir::MLIRContext **)mlir::AffineExpr::shiftDims((mlir::MLIRContext ***)&v82, v43, v39, 0);
            v67 = mlir::AffineExpr::shiftSymbols(v78, v44, v40, 0);
            v68 = v89;
            if (v89 >= (unint64_t)HIDWORD(v89))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v89 + 1, 8);
              v68 = v89;
            }
            *((_QWORD *)v88 + v68) = v67;
            LODWORD(v89) = v89 + 1;
            ++v65;
            v66 -= 8;
          }
          while (v66);
        }
        v39 += v43;
        v40 += v44;
        v41 += 8;
        if (v41 == v75)
          goto LABEL_91;
      }
      v51 = (void *)mlir::ValueRange::offset_base(&v82, v83 - v44);
      v53 = v95;
      v54 = v48 + v95;
      if (v54 <= HIDWORD(v95))
        goto LABEL_65;
LABEL_64:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v54, 8);
      v53 = v95;
      goto LABEL_65;
    }
LABEL_91:
    v76 = mlir::AffineMap::get(v39, v40, (uint64_t)v88, v89, v73[1]);
    v81 = (mlir::MLIRContext **)((char *)v91 + 8 * v92);
    v82 = v84;
    v83 = 0x800000000;
    v79[0] = v94;
    v79[1] = v91;
    v80 = (mlir::MLIRContext **)&v94[8 * v95];
    v78[0] = v80;
    v78[1] = v81;
    v78[2] = v80;
    v78[3] = v81;
    llvm::SmallVectorImpl<mlir::Type>::append<llvm::concat_iterator<mlir::Type,mlir::Type*,mlir::Type*>,void>((uint64_t)&v82, v79, v78);
    v69 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::SmallVector<mlir::Value,8u> &>(v73 + 1, *(_QWORD *)(v74 + 24), (unint64_t *)&v76, (uint64_t)&v82);
    (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*v73 + 4))(v73, v74, v69);
    if (v82 != v84)
      free(v82);
    v70 = 1;
    v71 = v85;
    if (v85 != v87)
      goto LABEL_94;
  }
  else
  {
    v70 = 0;
    v71 = v85;
    if (v85 != v87)
LABEL_94:
      free(v71);
  }
  if (v88 != v90)
    free(v88);
  if (v91 != v93)
    free(v91);
  if (v94 != v96)
    free(v94);
  return v70;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::SmallVector<mlir::Value,8u> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x1E0C80C00];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.min", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.min";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMinOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMinOp>::~SimplifyAffineOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t Value;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;
  int v15;
  unint64_t v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[64];
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  v24 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    v7 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v26, v7, v6);
  v9 = v26;
  v8 = v27;
  v26 = v28;
  v27 = 0x800000000;
  if (v8 < 9)
  {
    v10 = 0;
    v29 = v9;
    v30 = 0;
    v11 = v28;
    if (!v8)
    {
      v15 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v8, 8);
    v10 = v27;
    v11 = v26;
    v29 = v9;
    v30 = 0;
  }
  v12 = 0;
  v13 = (uint64_t *)&v11[8 * v10];
  do
  {
    *v13++ = mlir::ValueRange::dereference_iterator(&v29, v12);
    v12 = ++v30;
  }
  while (v29 != v9 || v12 != v8);
  v15 = v27;
LABEL_13:
  LODWORD(v27) = v15 + v8;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v24, (uint64_t)&v26);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v24, (uint64_t)&v26);
  simplifyMapWithOperands((mlir::AffineExpr *)&v24, (uint64_t *)v26, v27);
  v16 = v24;
  if (v24 == Value)
  {
    v21 = v26;
    v29 = v9;
    v30 = 0;
    if (!v8)
    {
LABEL_25:
      v18 = 0;
      v19 = v26;
      if (v26 == v28)
        return v18;
      goto LABEL_15;
    }
    v22 = 0;
    while (*v21 == mlir::ValueRange::dereference_iterator(&v29, v22))
    {
      v22 = ++v30;
      ++v21;
      if (v29 == v9 && v22 == v8)
        goto LABEL_25;
    }
    v16 = v24;
  }
  v25 = v16;
  v29 = v26;
  v30 = v27;
  v17 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(a3 + 1, *(_QWORD *)(a2 + 24), &v25, (uint64_t)&v29);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v17);
  v18 = 1;
  v19 = v26;
  if (v26 != v28)
LABEL_15:
    free(v19);
  return v18;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x1E0C80C00];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.min", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.min";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

_QWORD *CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>::~CanonicalizeAffineMinMaxOpExprAndTermOrder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>::~CanonicalizeAffineMinMaxOpExprAndTermOrder(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  unint64_t v5;
  uint64_t v6;
  mlir::GenericProgramPoint *v7;
  uint64_t Value;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10[0] = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if (!canonicalizeMapExprAndTermOrder((mlir::AffineMap *)&Value))
    return 0;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    v6 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v6, v5);
  v7 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,mlir::ValueRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&Value, (uint64_t *)v10);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v7);
  return 1;
}

uint64_t canonicalizeMapExprAndTermOrder(mlir::AffineMap *a1)
{
  uint64_t Results;
  uint64_t v3;
  mlir::AffineExpr *v4;
  mlir::AffineExpr *v5;
  int v6;
  int NumDims;
  int NumSymbols;
  char v9;
  int v10;
  int v11;
  void *v12;
  const void *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  void *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  unsigned int v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unsigned int Kind;
  uint64_t v37;
  _QWORD *v38;
  int32x4_t *v39;
  uint64_t v40;
  char *v41;
  int32x4_t *v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unsigned int *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  void *v58;
  uint64_t v59;
  _QWORD *LHS;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  const void *v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[48];
  void *v69;
  void *__p;
  _QWORD v71[4];
  void *v72;
  _BYTE v73[32];
  void *v74;
  uint64_t v75;
  _QWORD v76[10];

  v76[8] = *MEMORY[0x1E0C80C00];
  v74 = v76;
  v75 = 0x100000000;
  Results = mlir::AffineMap::getResults(a1);
  if (v3)
  {
    v4 = (mlir::AffineExpr *)Results;
    v5 = (mlir::AffineExpr *)(Results + 8 * v3);
    while (1)
    {
      mlir::AffineExpr::isPureAffine(v4);
      if (!v6)
        goto LABEL_49;
      NumDims = mlir::AffineMap::getNumDims(a1);
      NumSymbols = mlir::AffineMap::getNumSymbols(a1);
      mlir::SimpleAffineExprFlattener::SimpleAffineExprFlattener((mlir::SimpleAffineExprFlattener *)&v69, NumDims, NumSymbols);
      mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder((uint64_t)&v69, *(_QWORD *)v4);
      if (!v9
        || (v10 = *(_DWORD *)(v71[0] - 72),
            v11 = mlir::AffineMap::getNumDims(a1),
            v10 != v11 + mlir::AffineMap::getNumSymbols(a1) + 1))
      {
        v17 = 0;
        v69 = off_1E0E47DA0;
        v18 = v72;
        if (v72 == v73)
          goto LABEL_14;
LABEL_13:
        free(v18);
        goto LABEL_14;
      }
      v12 = *(void **)(v71[0] - 80);
      v66 = v12;
      v13 = (const void *)(*(_QWORD *)(v71[0] - 80) + 8 * *(unsigned int *)(v71[0] - 72));
      v65 = v13;
      if (v75 < HIDWORD(v75))
        break;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,6u>,false>::growAndEmplaceBack<long long const*,long long const*>((uint64_t)&v74, (const void **)&v66, &v65);
      v17 = 1;
      v69 = off_1E0E47DA0;
      v18 = v72;
      if (v72 != v73)
        goto LABEL_13;
LABEL_14:
      v19 = (char *)__p;
      if (__p)
      {
        v20 = (char *)v71[0];
        if ((void *)v71[0] == __p)
        {
          v71[0] = __p;
          operator delete(__p);
          if ((v17 & 1) == 0)
            goto LABEL_49;
        }
        else
        {
          do
          {
            v22 = (char *)*((_QWORD *)v20 - 10);
            v20 -= 80;
            v21 = v22;
            if (v20 + 16 != v22)
              free(v21);
          }
          while (v20 != v19);
          v71[0] = v19;
          operator delete(__p);
          if ((v17 & 1) == 0)
            goto LABEL_49;
        }
      }
      else if (!v17)
      {
        v61 = 0;
LABEL_72:
        v24 = v75;
        v23 = v74;
        if (!(_DWORD)v75)
          goto LABEL_78;
        goto LABEL_73;
      }
      v4 = (mlir::AffineExpr *)((char *)v4 + 8);
      if (v4 == v5)
        goto LABEL_29;
    }
    v14 = (char *)v74 + 64 * (unint64_t)v75;
    *v14 = v14 + 2;
    v14[1] = 0x600000000;
    v15 = (_BYTE *)v13 - (_BYTE *)v12;
    if ((unint64_t)((_BYTE *)v13 - (_BYTE *)v12) < 0x31)
    {
      v16 = 0;
      if (v12 == v13)
        goto LABEL_25;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v14, v14 + 2, v15 >> 3, 8);
      v16 = *((_DWORD *)v14 + 2);
      if (v12 == v13)
      {
LABEL_25:
        *((_DWORD *)v14 + 2) = v16 + ((unint64_t)v15 >> 3);
        LODWORD(v75) = v75 + 1;
        v17 = 1;
        v69 = off_1E0E47DA0;
        v18 = v72;
        if (v72 != v73)
          goto LABEL_13;
        goto LABEL_14;
      }
    }
    memcpy((void *)(*v14 + 8 * v16), v12, (_BYTE *)v13 - (_BYTE *)v12);
    v16 = *((_DWORD *)v14 + 2);
    goto LABEL_25;
  }
LABEL_29:
  v23 = v74;
  v24 = v75;
  v25 = (char *)v74 + 64 * (unint64_t)v75;
  if ((_DWORD)v75)
  {
    if ((_DWORD)v75 == 1)
    {
      v61 = 0;
LABEL_73:
      v62 = (unint64_t)v24 << 6;
      do
      {
        v63 = *(char **)((char *)v23 + v62 - 64);
        if ((char *)v23 + v62 - 48 != v63)
          free(v63);
        v62 -= 64;
      }
      while (v62);
      v23 = v74;
      goto LABEL_78;
    }
    v27 = (char *)v74 + 64;
    v26 = *(uint64_t **)v74;
    while (1)
    {
      v28 = v27;
      v29 = *((unsigned int *)v23 + 2);
      if ((_DWORD)v29)
        break;
LABEL_33:
      v61 = 0;
      v27 = v28 + 64;
      v26 = (uint64_t *)v23[8];
      v23 = v28;
      if (v28 + 64 == v25)
        goto LABEL_72;
    }
    v30 = 8 * *((unsigned int *)v23 + 18);
    v31 = 8 * v29 - 8;
    v32 = (uint64_t *)v23[8];
    while (v30)
    {
      v33 = *v32;
      v34 = *v26;
      if (*v32 < *v26)
        break;
      ++v32;
      ++v26;
      v30 -= 8;
      v35 = v34 < v33 || v31 == 0;
      v31 -= 8;
      if (v35)
        goto LABEL_33;
    }
    v23 = v28;
  }
  if (v23 == (_QWORD *)v25)
  {
LABEL_49:
    v61 = 0;
    v24 = v75;
    v23 = v74;
    if (!(_DWORD)v75)
      goto LABEL_78;
    goto LABEL_73;
  }
  Kind = mlir::AffineExpr::getKind(a1);
  v37 = Kind;
  v69 = v71;
  __p = (void *)0xC00000000;
  if (Kind >= 0xD)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, Kind, 4);
    v38 = v69;
    v39 = (int32x4_t *)((char *)v69 + 4 * __p);
    if (v37 < 8)
    {
LABEL_48:
      v40 = 0;
      v41 = (char *)v39;
      do
      {
LABEL_56:
        *(_DWORD *)v41 = v40;
        v41 += 4;
        ++v40;
      }
      while (v37 != v40);
LABEL_57:
      v47 = (int)__p;
      goto LABEL_58;
    }
LABEL_53:
    v40 = v37 & 0xFFFFFFF8;
    v41 = &v39->i8[4 * v40];
    v42 = v39 + 1;
    v43 = (int32x4_t)xmmword_181235170;
    v44.i64[0] = 0x400000004;
    v44.i64[1] = 0x400000004;
    v45.i64[0] = 0x800000008;
    v45.i64[1] = 0x800000008;
    v46 = v40;
    do
    {
      v42[-1] = v43;
      *v42 = vaddq_s32(v43, v44);
      v43 = vaddq_s32(v43, v45);
      v42 += 2;
      v46 -= 8;
    }
    while (v46);
    if (v40 == v37)
      goto LABEL_57;
    goto LABEL_56;
  }
  if (Kind)
  {
    v38 = v71;
    v39 = (int32x4_t *)v71;
    if (v37 < 8)
      goto LABEL_48;
    goto LABEL_53;
  }
  v47 = 0;
  v38 = v71;
LABEL_58:
  v48 = (v47 + v37);
  v35 = (_DWORD)v48 == 0;
  LODWORD(__p) = v48;
  v49 = (unsigned int *)v38 + v48;
  v66 = &v74;
  v50 = 126 - 2 * __clz(v48);
  if (v35)
    v51 = 0;
  else
    v51 = v50;
  std::__introsort<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,false>((int64_t)v38, v49, (uint64_t **)&v66, v51, 1);
  v66 = v68;
  v67 = 0x600000000;
  if ((_DWORD)__p)
  {
    v52 = (unsigned int *)v69;
    v53 = 4 * __p;
    do
    {
      v54 = mlir::AffineMap::getResult(a1, *v52);
      v55 = v67;
      if (v67 >= (unint64_t)HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
        v55 = v67;
      }
      *((_QWORD *)v66 + v55) = v54;
      LODWORD(v67) = v67 + 1;
      ++v52;
      v53 -= 4;
    }
    while (v53);
  }
  v56 = mlir::AffineMap::getNumDims(a1);
  v57 = mlir::AffineMap::getNumSymbols(a1);
  v58 = v66;
  v59 = v67;
  LHS = (_QWORD *)mlir::AffineBinaryOpExpr::getLHS(a1);
  *(_QWORD *)a1 = mlir::AffineMap::get(v56, v57, (uint64_t)v58, v59, LHS);
  if (v66 != v68)
    free(v66);
  if (v69 != v71)
    free(v69);
  v61 = 1;
  v24 = v75;
  v23 = v74;
  if ((_DWORD)v75)
    goto LABEL_73;
LABEL_78:
  if (v23 != v76)
    free(v23);
  return v61;
}

int64_t std::__introsort<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,false>(int64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;
  BOOL v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t *v37;
  int64_t v38;
  int64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  int64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  BOOL v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  int64_t *v88;
  int64_t v89;
  BOOL v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t v95;
  int64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  int64_t v100;
  BOOL v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  unsigned int v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  unsigned int *v135;
  BOOL v136;
  unsigned int v137;
  unint64_t v138;
  uint64_t v139;
  int64_t *v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  int64_t v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t *v159;
  unsigned int *v160;
  uint64_t v161;
  unsigned int *v162;
  char *v163;
  unsigned int *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  int64_t *v171;
  uint64_t v172;
  uint64_t v173;
  int64_t v174;
  int64_t v175;
  BOOL v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  BOOL v186;
  int64_t v187;
  int64_t v188;
  int64_t v189;
  uint64_t v190;
  unsigned int *v191;
  uint64_t v192;
  unsigned int *v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  BOOL v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  BOOL v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  BOOL v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  BOOL v237;
  uint64_t v238;
  uint64_t v240;
  unsigned int v241;
  uint64_t *v242;
  unsigned int *v243;
  unsigned int *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  int64_t *v249;
  uint64_t v250;
  uint64_t v251;
  int64_t v252;
  int64_t v253;
  BOOL v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unsigned int *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int64_t *v266;
  uint64_t v267;
  uint64_t v268;
  int64_t *v269;
  int64_t v270;
  int64_t v271;
  BOOL v272;
  uint64_t v273;
  unint64_t v274;
  unsigned int *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int64_t *v280;
  int64_t v281;
  int64_t v282;
  BOOL v283;
  unsigned int *v284;
  uint64_t v285;
  unsigned int *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int64_t *v292;
  int64_t *v293;
  uint64_t v294;
  uint64_t v295;
  int64_t *v296;
  int64_t v297;
  BOOL v298;
  uint64_t v299;
  unsigned int *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int *v307;
  uint64_t v308;
  uint64_t v309;
  int64_t v310;
  int64_t v311;
  BOOL v312;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = (char *)v9;
  while (2)
  {
    v9 = (unsigned int *)v11;
    v12 = (char *)a2 - v11;
    v13 = ((char *)a2 - v11) >> 2;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v146 = *(unsigned int *)v11;
        v147 = **a3;
        v148 = v147 + (v146 << 6);
        v149 = *(unsigned int *)(v148 + 8);
        if (!(_DWORD)v149)
          return result;
        v150 = *(a2 - 1);
        v151 = v147 + (v150 << 6);
        v152 = *(uint64_t **)v151;
        v153 = *(uint64_t **)v148;
        v154 = 8 * *(unsigned int *)(v151 + 8);
        v155 = 8 * v149 - 8;
        while (v154)
        {
          v156 = *v152;
          v157 = *v153;
          if (*v152 < *v153)
            break;
          ++v152;
          ++v153;
          v154 -= 8;
          v158 = v157 < v156 || v155 == 0;
          v155 -= 8;
          if (v158)
            return result;
        }
        *(_DWORD *)v11 = v150;
        *(a2 - 1) = v146;
        return result;
      case 3:
        return (int64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v11, (_DWORD *)v11 + 1, v10, **a3);
      case 4:
        return (int64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v11, (_DWORD *)v11 + 1, (_DWORD *)v11 + 2, v10, a3);
      case 5:
        return (int64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,0>(v11, (_DWORD *)v11 + 1, (_DWORD *)v11 + 2, (_DWORD *)v11 + 3, v10, a3);
      default:
        if (v12 <= 95)
        {
          v159 = *a3;
          if ((a5 & 1) != 0)
          {
            if (v11 == (char *)a2)
              return result;
            v160 = (unsigned int *)(v11 + 4);
            if (v11 + 4 == (char *)a2)
              return result;
            v161 = *v159;
            v162 = (unsigned int *)v11;
            while (1)
            {
              v164 = v162;
              v162 = v160;
              v165 = *v164;
              v166 = v161 + (v165 << 6);
              v167 = *(unsigned int *)(v166 + 8);
              if ((_DWORD)v167)
              {
                v168 = v164[1];
                v169 = v161 + (v168 << 6);
                v170 = *(uint64_t **)v169;
                v171 = *(int64_t **)v166;
                v172 = 8 * *(unsigned int *)(v169 + 8);
                v173 = 8 * v167 - 8;
                result = *(_QWORD *)v169;
                while (v172)
                {
                  v174 = *(_QWORD *)result;
                  v175 = *v171;
                  if (*(_QWORD *)result < *v171)
                    break;
                  result += 8;
                  ++v171;
                  v172 -= 8;
                  v176 = v175 < v174 || v173 == 0;
                  v173 -= 8;
                  if (v176)
                    goto LABEL_182;
                }
                v164[1] = v165;
                v163 = v11;
                if (v164 != (unsigned int *)v11)
                {
                  v177 = v164;
                  do
                  {
                    v179 = *--v177;
                    v178 = v179;
                    v180 = v161 + ((unint64_t)v179 << 6);
                    result = *(unsigned int *)(v180 + 8);
                    if (!(_DWORD)result)
                    {
LABEL_180:
                      v163 = (char *)v164;
                      goto LABEL_181;
                    }
                    v181 = *(uint64_t **)v180;
                    v182 = 8 * *(unsigned int *)(v169 + 8);
                    result = 8 * result - 8;
                    v183 = v170;
                    while (v182)
                    {
                      v184 = *v183;
                      v185 = *v181;
                      if (*v183 < *v181)
                        break;
                      ++v183;
                      ++v181;
                      v182 -= 8;
                      v186 = v185 < v184 || result == 0;
                      result -= 8;
                      if (v186)
                        goto LABEL_180;
                    }
                    *v164 = v178;
                    v164 = v177;
                  }
                  while (v177 != (unsigned int *)v11);
                  v163 = v11;
                }
LABEL_181:
                *(_DWORD *)v163 = v168;
              }
LABEL_182:
              v160 = v162 + 1;
              if (v162 + 1 == a2)
                return result;
            }
          }
          if (v11 == (char *)a2)
            return result;
          v284 = (unsigned int *)(v11 + 4);
          if (v11 + 4 == (char *)a2)
            return result;
          v285 = *v159;
LABEL_307:
          v286 = v9;
          v9 = v284;
          v287 = *v286;
          v288 = v285 + (v287 << 6);
          v289 = *(unsigned int *)(v288 + 8);
          if (!(_DWORD)v289)
            goto LABEL_306;
          v290 = v286[1];
          v291 = v285 + (v290 << 6);
          v292 = *(int64_t **)v291;
          v293 = *(int64_t **)v288;
          v294 = 8 * *(unsigned int *)(v291 + 8);
          v295 = 8 * v289 - 8;
          v296 = *(int64_t **)v291;
          while (v294)
          {
            result = *v296;
            v297 = *v293;
            if (*v296 < *v293)
              break;
            ++v296;
            ++v293;
            v294 -= 8;
            v298 = v297 < result || v295 == 0;
            v295 -= 8;
            if (v298)
              goto LABEL_306;
          }
          *v9 = v287;
          v300 = v286 - 1;
          v299 = *(v286 - 1);
          v301 = v285 + (v299 << 6);
          v302 = *(unsigned int *)(v301 + 8);
          if (!(_DWORD)v302)
            goto LABEL_305;
          v303 = *(_QWORD *)v301;
          v304 = *(_QWORD *)v301 + 8 * v302;
          while (1)
          {
            v307 = v286;
            v286 = v300;
            v308 = 8 * *(unsigned int *)(v291 + 8);
            v309 = v303 + 8;
            result = (int64_t)v292;
            while (v308)
            {
              v310 = *(_QWORD *)result;
              v311 = *(_QWORD *)(v309 - 8);
              if (*(_QWORD *)result < v311)
                break;
              result += 8;
              v308 -= 8;
              v312 = v311 < v310 || v309 == v304;
              v309 += 8;
              if (v312)
              {
                v286 = v307;
LABEL_305:
                *v286 = v290;
LABEL_306:
                v284 = v9 + 1;
                if (v9 + 1 == a2)
                  return result;
                goto LABEL_307;
              }
            }
            *v307 = v299;
            v300 = v286 - 1;
            v299 = *(v286 - 1);
            v305 = v285 + (v299 << 6);
            v303 = *(_QWORD *)v305;
            v306 = *(unsigned int *)(v305 + 8);
            v304 = *(_QWORD *)v305 + 8 * v306;
            if (!(_DWORD)v306)
              goto LABEL_305;
          }
        }
        if (a4)
        {
          v14 = (unint64_t)v13 >> 1;
          v15 = (unsigned int *)&v11[4 * ((unint64_t)v13 >> 1)];
          v16 = **a3;
          if ((unint64_t)v12 >= 0x201)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v9, v15, v10, v16);
            v17 = &v9[v14];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v9 + 1, v17 - 1, a2 - 2, **a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, **a3);
            result = (int64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v17 - 1, v15, &v9[v14 + 1], **a3);
            v18 = *v9;
            *v9 = *v17;
            *v17 = v18;
            v10 = a2 - 1;
            --a4;
            v19 = *v9;
            v20 = **a3;
            if ((a5 & 1) != 0)
              goto LABEL_44;
LABEL_8:
            v21 = v20 + (v19 << 6);
            v22 = *(uint64_t **)v21;
            v23 = *(unsigned int *)(v21 + 8);
            v24 = 8 * v23;
            if ((_DWORD)v23)
            {
              v25 = 0;
              v26 = v20 + ((unint64_t)*(v9 - 1) << 6);
              v27 = *(_QWORD *)v26;
              v28 = &v22[v23];
              v29 = 8 * *(unsigned int *)(v26 + 8);
              while (v29 != v25)
              {
                result = *(_QWORD *)(v27 + v25);
                v30 = v22[v25 / 8];
                if (result < v30)
                  break;
                v31 = v30 < result || v24 - 8 == v25;
                v25 += 8;
                if (v31)
                  goto LABEL_17;
              }
              v52 = (unsigned int *)(v20 + (v19 << 6) + 8);
              v55 = v9 + 1;
              v56 = v9[1];
LABEL_47:
              v57 = v9;
LABEL_49:
              v59 = 0;
              v60 = v20 + (v56 << 6);
              v61 = *(_QWORD *)v60;
              v62 = 8 * *(unsigned int *)(v60 + 8);
              do
              {
                if (v62 == v59 || (v63 = *(_QWORD *)(v61 + v59), v64 = v22[v59 / 8], v63 < v64))
                {
                  v57 = v55;
                  v58 = v55[1];
                  ++v55;
                  v56 = v58;
                  goto LABEL_49;
                }
                v59 += 8;
              }
              while (v64 >= v63 && &v22[v59 / 8] != v28);
              v66 = a2;
              if (v57 == v9)
              {
                v66 = a2;
                if (v55 >= a2)
                {
                  v66 = a2;
                }
                else
                {
LABEL_68:
                  v75 = 0;
                  v76 = *--v66;
                  v77 = v20 + ((unint64_t)v76 << 6);
                  v78 = *(_QWORD *)v77;
                  v79 = 8 * *(unsigned int *)(v77 + 8);
                  while (v79 != v75)
                  {
                    v80 = *(_QWORD *)(v78 + v75);
                    v81 = v22[v75 / 8];
                    if (v80 < v81)
                      break;
                    v75 += 8;
                    if (v81 < v80 || &v22[v75 / 8] == v28)
                    {
                      if (v55 < v66)
                        goto LABEL_68;
                      break;
                    }
                  }
                }
              }
              else
              {
LABEL_58:
                v67 = 0;
                v68 = *--v66;
                v69 = v20 + ((unint64_t)v68 << 6);
                v70 = *(_QWORD *)v69;
                v71 = 8 * *(unsigned int *)(v69 + 8);
                while (v71 != v67)
                {
                  v72 = *(_QWORD *)(v70 + v67);
                  v73 = v22[v67 / 8];
                  if (v72 < v73)
                    break;
                  v67 += 8;
                  if (v73 < v72 || &v22[v67 / 8] == v28)
                    goto LABEL_58;
                }
              }
              v11 = (char *)v55;
              if (v55 < v66)
                goto LABEL_121;
              goto LABEL_142;
            }
LABEL_17:
            v32 = v20 + ((unint64_t)*v10 << 6);
            v33 = *(_QWORD *)v32;
            v34 = *(unsigned int *)(v32 + 8);
            if ((_DWORD)v34)
            {
              v35 = 8 * v34 - 8;
              v36 = v24;
              v37 = *(int64_t **)v21;
              result = v33;
              while (v36)
              {
                v38 = *v37;
                v39 = *(_QWORD *)result;
                if (*v37 < *(_QWORD *)result)
                  break;
                ++v37;
                result += 8;
                v36 -= 8;
                v40 = v39 < v38 || v35 == 0;
                v35 -= 8;
                if (v40)
                  goto LABEL_26;
              }
              v11 = (char *)v9;
              do
              {
LABEL_149:
                v137 = *((_DWORD *)v11 + 1);
                v11 += 4;
                v138 = v20 + ((unint64_t)v137 << 6);
                v139 = *(unsigned int *)(v138 + 8);
              }
              while (!(_DWORD)v139);
              v140 = *(int64_t **)v138;
              v141 = 8 * v139 - 8;
              v142 = v24;
              result = *(_QWORD *)v21;
              while (v142)
              {
                v143 = *(_QWORD *)result;
                v144 = *v140;
                if (*(_QWORD *)result < *v140)
                  break;
                result += 8;
                ++v140;
                v142 -= 8;
                v145 = v144 < v143 || v141 == 0;
                v141 -= 8;
                if (v145)
                  goto LABEL_149;
              }
            }
            else
            {
LABEL_26:
              v11 = (char *)(v9 + 1);
              if (v9 + 1 < a2)
              {
                while (1)
                {
                  v41 = v20 + ((unint64_t)*(unsigned int *)v11 << 6);
                  v42 = *(unsigned int *)(v41 + 8);
                  if ((_DWORD)v42)
                    break;
LABEL_36:
                  v11 += 4;
                  if (v11 >= (char *)a2)
                    goto LABEL_37;
                }
                v43 = *(int64_t **)v41;
                v44 = 8 * v42 - 8;
                v45 = v24;
                result = *(_QWORD *)v21;
                while (v45)
                {
                  v46 = *(_QWORD *)result;
                  v47 = *v43;
                  if (*(_QWORD *)result < *v43)
                    break;
                  result += 8;
                  ++v43;
                  v45 -= 8;
                  v48 = v47 < v46 || v44 == 0;
                  v44 -= 8;
                  if (v48)
                    goto LABEL_36;
                }
              }
            }
LABEL_37:
            if (v11 < (char *)a2)
              v49 = v10;
            else
              v49 = a2;
            if ((_DWORD)v34 && v11 < (char *)a2)
            {
              v50 = v33 + 8 * v34;
              v49 = v10;
              do
              {
                v86 = v33 + 8;
                v87 = v24;
                v88 = *(int64_t **)v21;
                while (v87)
                {
                  result = *v88;
                  v89 = *(_QWORD *)(v86 - 8);
                  if (*v88 < v89)
                    break;
                  ++v88;
                  v87 -= 8;
                  v90 = v89 < result || v86 == v50;
                  v86 += 8;
                  if (v90)
                    goto LABEL_90;
                }
                v83 = *--v49;
                v84 = v20 + ((unint64_t)v83 << 6);
                v33 = *(_QWORD *)v84;
                v85 = *(unsigned int *)(v84 + 8);
                v50 = *(_QWORD *)v84 + 8 * v85;
              }
              while ((_DWORD)v85);
            }
LABEL_90:
            if (v11 < (char *)v49)
            {
              v91 = *(_DWORD *)v11;
              v92 = *v49;
              do
              {
                *(_DWORD *)v11 = v92;
                *v49 = v91;
                do
                {
LABEL_94:
                  v93 = *((_DWORD *)v11 + 1);
                  v11 += 4;
                  v91 = v93;
                  v94 = v20 + ((unint64_t)v93 << 6);
                  v95 = *(unsigned int *)(v94 + 8);
                }
                while (!(_DWORD)v95);
                v96 = *(int64_t **)v94;
                v97 = 8 * v95 - 8;
                v98 = 8 * *(unsigned int *)(v21 + 8);
                result = (int64_t)v22;
                while (v98)
                {
                  v99 = *(_QWORD *)result;
                  v100 = *v96;
                  if (*(_QWORD *)result < *v96)
                    break;
                  result += 8;
                  ++v96;
                  v98 -= 8;
                  v101 = v100 < v99 || v97 == 0;
                  v97 -= 8;
                  if (v101)
                    goto LABEL_94;
                }
                v102 = *--v49;
                v92 = v102;
                v103 = v20 + ((unint64_t)v102 << 6);
                v104 = *(unsigned int *)(v103 + 8);
                if ((_DWORD)v104)
                {
                  v105 = *(_QWORD *)v103;
                  v106 = v105 + 8 * v104;
                  do
                  {
                    v109 = v105 + 8;
                    result = 8 * *(unsigned int *)(v21 + 8);
                    v110 = v22;
                    while (result)
                    {
                      v111 = *v110;
                      v112 = *(_QWORD *)(v109 - 8);
                      if (*v110 < v112)
                        break;
                      ++v110;
                      result -= 8;
                      v113 = v112 < v111 || v109 == v106;
                      v109 += 8;
                      if (v113)
                        goto LABEL_92;
                    }
                    v107 = *--v49;
                    v92 = v107;
                    v108 = v20 + ((unint64_t)v107 << 6);
                    v105 = *(_QWORD *)v108;
                    result = *(unsigned int *)(v108 + 8);
                    v106 = *(_QWORD *)v108 + 8 * result;
                  }
                  while ((_DWORD)result);
                }
LABEL_92:
                ;
              }
              while (v11 < (char *)v49);
            }
            v114 = (unsigned int *)(v11 - 4);
            if (v11 - 4 != (char *)v9)
              *v9 = *v114;
            a5 = 0;
            *v114 = v19;
            continue;
          }
          result = (int64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v15, v9, v10, v16);
          --a4;
          v19 = *v9;
          v20 = **a3;
          if ((a5 & 1) == 0)
            goto LABEL_8;
LABEL_44:
          v22 = *(uint64_t **)(v20 + (v19 << 6));
          v51 = v20 + (v19 << 6);
          v54 = *(_DWORD *)(v51 + 8);
          v52 = (unsigned int *)(v51 + 8);
          v53 = v54;
          v55 = v9 + 1;
          v56 = v9[1];
          if (v54)
          {
            v28 = &v22[v53];
            goto LABEL_47;
          }
          if (v55 >= a2)
          {
            v66 = a2;
            v11 = (char *)(v9 + 1);
            goto LABEL_142;
          }
          v66 = (unsigned int *)((char *)a2 + (((char *)v55 - (char *)a2) & 0xFFFFFFFFFFFFFFFCLL));
          v11 = (char *)(v9 + 1);
          if (v55 < v66)
          {
LABEL_121:
            v115 = *v66;
            v11 = (char *)v55;
            v116 = v66;
            do
            {
              *(_DWORD *)v11 = v115;
              *v116 = v56;
LABEL_124:
              v117 = *((_DWORD *)v11 + 1);
              v11 += 4;
              LODWORD(v56) = v117;
              v118 = v20 + ((unint64_t)v117 << 6);
              v119 = *(uint64_t **)v118;
              v120 = 8 * *(unsigned int *)(v118 + 8);
              v121 = 8 * *v52 - 8;
              v122 = v22;
              do
              {
                if (!v120)
                  goto LABEL_124;
                v123 = *v119;
                v124 = *v122;
                if (*v119 < *v122)
                  goto LABEL_124;
                ++v119;
                ++v122;
                v120 -= 8;
                v125 = v124 < v123 || v121 == 0;
                v121 -= 8;
              }
              while (!v125);
LABEL_132:
              v126 = *--v116;
              v115 = v126;
              v127 = v20 + ((unint64_t)v126 << 6);
              v128 = *(uint64_t **)v127;
              v129 = 8 * *(unsigned int *)(v127 + 8);
              v130 = 8 * *v52 - 8;
              v131 = v22;
              while (v129)
              {
                v132 = *v128;
                v133 = *v131;
                if (*v128 < *v131)
                  break;
                ++v128;
                ++v131;
                v129 -= 8;
                v134 = v133 < v132 || v130 == 0;
                v130 -= 8;
                if (v134)
                  goto LABEL_132;
              }
            }
            while (v11 < (char *)v116);
          }
LABEL_142:
          v135 = (unsigned int *)(v11 - 4);
          if (v11 - 4 != (char *)v9)
            *v9 = *v135;
          *v135 = v19;
          if (v55 < v66)
            goto LABEL_147;
          v136 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v9, (unsigned int *)v11 - 1, a3);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>((unsigned int *)v11, a2, a3);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_147:
            result = std::__introsort<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,false>(v9, v11 - 4, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (unsigned int *)(v11 - 4);
          if (v136)
            return result;
          goto LABEL_2;
        }
        if (v11 == (char *)a2)
          return result;
        v187 = (unint64_t)(v13 - 2) >> 1;
        v188 = v187;
        while (2)
        {
          v189 = v188;
          if (v187 >= v188)
          {
            v190 = (2 * v188) | 1;
            v191 = (unsigned int *)&v11[4 * v190];
            v192 = **a3;
            if (2 * v189 + 2 < v13
              && (v193 = v191 + 1,
                  v194 = v192 + ((unint64_t)v191[1] << 6),
                  v195 = *(unsigned int *)(v194 + 8),
                  (_DWORD)v195))
            {
              v196 = v192 + ((unint64_t)*v191 << 6);
              v197 = *(uint64_t **)v196;
              v198 = *(uint64_t **)v194;
              v199 = 8 * *(unsigned int *)(v196 + 8);
              v200 = 8 * v195 - 8;
              while (v199)
              {
                v201 = *v197;
                v202 = *v198;
                if (*v197 < *v198)
                  break;
                ++v197;
                ++v198;
                v199 -= 8;
                v203 = v202 < v201 || v200 == 0;
                v200 -= 8;
                if (v203)
                  goto LABEL_223;
              }
              ++v191;
              v190 = 2 * v189 + 2;
              result = *v193;
              v204 = *(unsigned int *)&v11[4 * v189];
              v205 = v192 + (v204 << 6);
              v206 = *(uint64_t **)v205;
              v207 = *(unsigned int *)(v205 + 8);
              if (!(_DWORD)v207)
              {
LABEL_234:
                *(_DWORD *)&v11[4 * v189] = result;
                if (v187 >= v190)
                {
                  while (1)
                  {
                    v216 = 2 * v190;
                    v190 = (2 * v190) | 1;
                    result = (int64_t)&v11[4 * v190];
                    v217 = v216 + 2;
                    if (v217 < v13)
                    {
                      v218 = v192 + ((unint64_t)*(unsigned int *)(result + 4) << 6);
                      v219 = *(unsigned int *)(v218 + 8);
                      if ((_DWORD)v219)
                      {
                        v220 = v192 + ((unint64_t)*(unsigned int *)result << 6);
                        v221 = *(uint64_t **)v220;
                        v222 = *(uint64_t **)v218;
                        v223 = 8 * *(unsigned int *)(v220 + 8);
                        v224 = 8 * v219 - 8;
                        while (v223)
                        {
                          v225 = *v221;
                          v226 = *v222;
                          if (*v221 < *v222)
                            break;
                          ++v221;
                          ++v222;
                          v223 -= 8;
                          v227 = v226 < v225 || v224 == 0;
                          v224 -= 8;
                          if (v227)
                            goto LABEL_249;
                        }
                        result += 4;
                        v190 = v217;
                      }
                    }
LABEL_249:
                    v228 = *(unsigned int *)result;
                    v229 = *(unsigned int *)(v205 + 8);
                    if ((_DWORD)v229)
                      break;
LABEL_236:
                    *v191 = v228;
                    v191 = (unsigned int *)result;
                    if (v187 < v190)
                      goto LABEL_210;
                  }
                  v230 = v192 + (v228 << 6);
                  v231 = *(uint64_t **)v230;
                  v232 = 8 * *(unsigned int *)(v230 + 8);
                  v233 = 8 * v229 - 8;
                  v234 = v206;
                  while (v232)
                  {
                    v235 = *v231;
                    v236 = *v234;
                    if (*v231 < *v234)
                      break;
                    ++v231;
                    ++v234;
                    v232 -= 8;
                    v237 = v236 < v235 || v233 == 0;
                    v233 -= 8;
                    if (v237)
                      goto LABEL_236;
                  }
                }
                result = (int64_t)v191;
LABEL_210:
                *(_DWORD *)result = v204;
                goto LABEL_211;
              }
            }
            else
            {
LABEL_223:
              result = *v191;
              v204 = *(unsigned int *)&v11[4 * v189];
              v205 = v192 + (v204 << 6);
              v206 = *(uint64_t **)v205;
              v207 = *(unsigned int *)(v205 + 8);
              if (!(_DWORD)v207)
                goto LABEL_234;
            }
            v208 = v192 + (result << 6);
            v209 = *(uint64_t **)v208;
            v210 = 8 * *(unsigned int *)(v208 + 8);
            v211 = 8 * v207 - 8;
            v212 = v206;
            while (v210)
            {
              v213 = *v209;
              v214 = *v212;
              if (*v209 < *v212)
                break;
              ++v209;
              ++v212;
              v210 -= 8;
              v215 = v214 < v213 || v211 == 0;
              v211 -= 8;
              if (v215)
                goto LABEL_234;
            }
          }
LABEL_211:
          v188 = v189 - 1;
          if (v189)
            continue;
          break;
        }
        v238 = (unint64_t)v12 >> 2;
        do
        {
          v240 = 0;
          v241 = *(_DWORD *)v11;
          v242 = *a3;
          v243 = (unsigned int *)v11;
          do
          {
            v244 = v243;
            v243 += v240 + 1;
            v245 = 2 * v240;
            v240 = (2 * v240) | 1;
            v246 = v245 + 2;
            if (v246 < v238)
            {
              result = *v242 + ((unint64_t)v243[1] << 6);
              v247 = *(unsigned int *)(result + 8);
              if ((_DWORD)v247)
              {
                v248 = *v242 + ((unint64_t)*v243 << 6);
                v249 = *(int64_t **)v248;
                result = *(_QWORD *)result;
                v250 = 8 * *(unsigned int *)(v248 + 8);
                v251 = 8 * v247 - 8;
                while (v250)
                {
                  v252 = *v249;
                  v253 = *(_QWORD *)result;
                  if (*v249 < *(_QWORD *)result)
                    break;
                  ++v249;
                  result += 8;
                  v250 -= 8;
                  v254 = v253 < v252 || v251 == 0;
                  v251 -= 8;
                  if (v254)
                    goto LABEL_264;
                }
                ++v243;
                v240 = v246;
              }
            }
LABEL_264:
            *v244 = *v243;
          }
          while (v240 <= (uint64_t)((unint64_t)(v238 - 2) >> 1));
          if (v243 == --a2)
          {
            *v243 = v241;
          }
          else
          {
            *v243 = *a2;
            *a2 = v241;
            v255 = (char *)v243 - v11 + 4;
            if (v255 >= 5)
            {
              v256 = *v243;
              v257 = **a3;
              v258 = v257 + (v256 << 6);
              v259 = *(unsigned int *)(v258 + 8);
              if ((_DWORD)v259)
              {
                v260 = ((unint64_t)v255 >> 2) - 2;
                v261 = v260 >> 1;
                v262 = (unsigned int *)&v11[4 * (v260 >> 1)];
                v263 = *v262;
                v264 = v257 + (v263 << 6);
                result = *(_QWORD *)v264;
                v265 = *(unsigned int *)(v264 + 8);
                v266 = *(int64_t **)v258;
                v267 = 8 * v265;
                v268 = 8 * v259 - 8;
                v269 = *(int64_t **)v258;
                while (v267)
                {
                  v270 = *(_QWORD *)result;
                  v271 = *v269;
                  if (*(_QWORD *)result < *v269)
                    break;
                  result += 8;
                  ++v269;
                  v267 -= 8;
                  v272 = v271 < v270 || v268 == 0;
                  v268 -= 8;
                  if (v272)
                    goto LABEL_261;
                }
                *v243 = v263;
                if (v260 >= 2)
                {
                  while (1)
                  {
                    v273 = *(unsigned int *)(v258 + 8);
                    if (!(_DWORD)v273)
                      break;
                    v274 = v261 - 1;
                    v261 = (v261 - 1) >> 1;
                    v275 = (unsigned int *)&v11[4 * v261];
                    v276 = *v275;
                    v277 = v257 + (v276 << 6);
                    result = *(_QWORD *)v277;
                    v278 = 8 * *(unsigned int *)(v277 + 8);
                    v279 = 8 * v273 - 8;
                    v280 = v266;
                    while (v278)
                    {
                      v281 = *(_QWORD *)result;
                      v282 = *v280;
                      if (*(_QWORD *)result < *v280)
                        break;
                      result += 8;
                      ++v280;
                      v278 -= 8;
                      v283 = v282 < v281 || v279 == 0;
                      v279 -= 8;
                      if (v283)
                        goto LABEL_300;
                    }
                    *v262 = v276;
                    v262 = (unsigned int *)&v11[4 * v261];
                    if (v274 <= 1)
                      goto LABEL_301;
                  }
                }
LABEL_300:
                v275 = v262;
LABEL_301:
                *v275 = v256;
              }
            }
          }
LABEL_261:
          ;
        }
        while (v238-- > 2);
        return result;
    }
  }
}

_DWORD *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t **a6)
{
  _DWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = **a6;
  v15 = v14 + (v13 << 6);
  v16 = *(unsigned int *)(v15 + 8);
  if ((_DWORD)v16)
  {
    v17 = *a5;
    v18 = v14 + (v17 << 6);
    v19 = *(uint64_t **)v18;
    v20 = *(uint64_t **)v15;
    v21 = 8 * *(unsigned int *)(v18 + 8);
    v22 = 8 * v16 - 8;
    while (v21)
    {
      v23 = *v19;
      v24 = *v20;
      if (*v19 < *v20)
        break;
      ++v19;
      ++v20;
      v21 -= 8;
      v25 = v24 < v23 || v22 == 0;
      v22 -= 8;
      if (v25)
        return result;
    }
    *a4 = v17;
    *a5 = v13;
    v26 = *a3;
    v27 = v14 + (v26 << 6);
    v28 = *(unsigned int *)(v27 + 8);
    if ((_DWORD)v28)
    {
      v29 = *a4;
      v30 = v14 + (v29 << 6);
      v31 = *(uint64_t **)v30;
      v32 = *(uint64_t **)v27;
      v33 = 8 * *(unsigned int *)(v30 + 8);
      v34 = 8 * v28 - 8;
      while (v33)
      {
        v35 = *v31;
        v36 = *v32;
        if (*v31 < *v32)
          break;
        ++v31;
        ++v32;
        v33 -= 8;
        v37 = v36 < v35 || v34 == 0;
        v34 -= 8;
        if (v37)
          return result;
      }
      *a3 = v29;
      *a4 = v26;
      v38 = *a2;
      v39 = v14 + (v38 << 6);
      v40 = *(unsigned int *)(v39 + 8);
      if ((_DWORD)v40)
      {
        v41 = *a3;
        v42 = v14 + (v41 << 6);
        v43 = *(uint64_t **)v42;
        v44 = *(uint64_t **)v39;
        v45 = 8 * *(unsigned int *)(v42 + 8);
        v46 = 8 * v40 - 8;
        while (v45)
        {
          v47 = *v43;
          v48 = *v44;
          if (*v43 < *v44)
            break;
          ++v43;
          ++v44;
          v45 -= 8;
          v49 = v48 < v47 || v46 == 0;
          v46 -= 8;
          if (v49)
            return result;
        }
        *a2 = v41;
        *a3 = v38;
        v50 = *a1;
        v51 = v14 + (v50 << 6);
        v52 = *(unsigned int *)(v51 + 8);
        if ((_DWORD)v52)
        {
          v53 = *a2;
          v54 = v14 + (v53 << 6);
          v55 = *(uint64_t **)v54;
          v56 = *(uint64_t **)v51;
          v57 = 8 * *(unsigned int *)(v54 + 8);
          v58 = 8 * v52 - 8;
          while (v57)
          {
            v59 = *v55;
            v60 = *v56;
            if (*v55 < *v56)
              break;
            ++v55;
            ++v56;
            v57 -= 8;
            v61 = v60 < v59 || v58 == 0;
            v58 -= 8;
            if (v61)
              return result;
          }
          *a1 = v53;
          *a2 = v50;
        }
      }
    }
  }
  return result;
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;

  v4 = *a2;
  v5 = *result;
  v6 = a4 + (v4 << 6);
  v7 = a4 + (v5 << 6);
  v8 = *(uint64_t **)v6;
  v9 = *(unsigned int *)(v6 + 8);
  v10 = *(unsigned int *)(v7 + 8);
  if ((_DWORD)v10)
  {
    v11 = 8 * v9;
    v12 = 8 * v10;
    v13 = *(uint64_t **)v7;
    v14 = v12 - 8;
    v15 = 8 * v9;
    v16 = v8;
    v17 = *(uint64_t **)v7;
    while (v15)
    {
      v18 = *v16;
      v19 = *v17;
      if (*v16 < *v17)
        break;
      ++v16;
      ++v17;
      v15 -= 8;
      v20 = v19 < v18 || v14 == 0;
      v14 -= 8;
      if (v20)
        goto LABEL_10;
    }
    if ((_DWORD)v9)
    {
      v29 = *a3;
      v30 = a4 + (v29 << 6);
      v31 = *(uint64_t **)v30;
      v32 = 8 * *(unsigned int *)(v30 + 8);
      v33 = v11 - 8;
      while (v32)
      {
        v34 = *v31;
        v35 = *v8;
        if (*v31 < *v8)
          break;
        ++v31;
        ++v8;
        v32 -= 8;
        v36 = v35 < v34 || v33 == 0;
        v33 -= 8;
        if (v36)
          goto LABEL_29;
      }
      *result = v29;
      *a3 = v5;
    }
    else
    {
LABEL_29:
      *result = v4;
      *a2 = v5;
      v37 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v37)
      {
        v38 = *a3;
        v39 = a4 + (v38 << 6);
        v40 = *(uint64_t **)v39;
        v41 = 8 * *(unsigned int *)(v39 + 8);
        v42 = 8 * v37 - 8;
        while (v41)
        {
          v43 = *v40;
          v44 = *v13;
          if (*v40 < *v13)
            break;
          ++v40;
          ++v13;
          v41 -= 8;
          v45 = v44 < v43 || v42 == 0;
          v42 -= 8;
          if (v45)
            return result;
        }
        *a2 = v38;
        *a3 = v5;
      }
    }
  }
  else
  {
LABEL_10:
    if ((_DWORD)v9)
    {
      v21 = *a3;
      v22 = a4 + (v21 << 6);
      v23 = *(uint64_t **)v22;
      v24 = 8 * *(unsigned int *)(v22 + 8);
      v25 = 8 * v9 - 8;
      while (v24)
      {
        v26 = *v23;
        v27 = *v8;
        if (*v23 < *v8)
          break;
        ++v23;
        ++v8;
        v24 -= 8;
        v28 = v27 < v26 || v25 == 0;
        v25 -= 8;
        if (v28)
          return result;
      }
      *a2 = v21;
      *a3 = v4;
      v46 = *result;
      v47 = a4 + (v46 << 6);
      v48 = *(unsigned int *)(v47 + 8);
      if ((_DWORD)v48)
      {
        v49 = *a2;
        v50 = a4 + (v49 << 6);
        v51 = *(uint64_t **)v50;
        v52 = *(uint64_t **)v47;
        v53 = 8 * *(unsigned int *)(v50 + 8);
        v54 = 8 * v48 - 8;
        while (v53)
        {
          v55 = *v51;
          v56 = *v52;
          if (*v51 < *v52)
            break;
          ++v51;
          ++v52;
          v53 -= 8;
          v57 = v56 < v55 || v54 == 0;
          v54 -= 8;
          if (v57)
            return result;
        }
        *result = v49;
        *a2 = v46;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v38 = *a1;
      v39 = **a3;
      v40 = v39 + (v38 << 6);
      v41 = *(unsigned int *)(v40 + 8);
      if ((_DWORD)v41)
      {
        v42 = *(a2 - 1);
        v43 = v39 + (v42 << 6);
        v44 = *(uint64_t **)v43;
        v45 = *(uint64_t **)v40;
        v46 = 8 * *(unsigned int *)(v43 + 8);
        v47 = 8 * v41 - 8;
        while (v46)
        {
          v48 = *v44;
          v49 = *v45;
          if (*v44 < *v45)
            break;
          ++v44;
          ++v45;
          v46 -= 8;
          v50 = v49 < v48 || v47 == 0;
          v47 -= 8;
          if (v50)
            return result;
        }
        *a1 = v42;
        *(a2 - 1) = v38;
        result = 1;
      }
      break;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a1 + 1, a2 - 1, **a3);
      result = 1;
      break;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      result = 1;
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      result = 1;
      break;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, **a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_45:
        result = 1;
      }
      else
      {
        v10 = 0;
        v11 = **a3;
        while (1)
        {
          v13 = *v8;
          v14 = v11 + (v13 << 6);
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = *v9;
            v17 = v11 + (v16 << 6);
            v18 = *(uint64_t **)v17;
            v19 = *(uint64_t **)v14;
            v20 = 8 * *(unsigned int *)(v17 + 8);
            v21 = 8 * v15 - 8;
            v22 = *(uint64_t **)v17;
            while (v20)
            {
              v23 = *v22;
              v24 = *v19;
              if (*v22 < *v19)
                break;
              ++v22;
              ++v19;
              v20 -= 8;
              v25 = v24 < v23 || v21 == 0;
              v21 -= 8;
              if (v25)
                goto LABEL_7;
            }
            *v9 = v13;
            v12 = a1;
            if (v8 != a1)
            {
              v26 = v8;
              do
              {
                v28 = *--v26;
                v27 = v28;
                v29 = v11 + ((unint64_t)v28 << 6);
                v30 = *(unsigned int *)(v29 + 8);
                if (!(_DWORD)v30)
                {
LABEL_5:
                  v12 = v8;
                  goto LABEL_6;
                }
                v31 = *(uint64_t **)v29;
                v32 = 8 * *(unsigned int *)(v17 + 8);
                v33 = 8 * v30 - 8;
                v34 = v18;
                while (v32)
                {
                  v35 = *v34;
                  v36 = *v31;
                  if (*v34 < *v31)
                    break;
                  ++v34;
                  ++v31;
                  v32 -= 8;
                  v37 = v36 < v35 || v33 == 0;
                  v33 -= 8;
                  if (v37)
                    goto LABEL_5;
                }
                *v8 = v27;
                v8 = v26;
              }
              while (v26 != a1);
              v12 = a1;
            }
LABEL_6:
            *v12 = v16;
            if (++v10 == 8)
              break;
          }
LABEL_7:
          v8 = v9++;
          if (v9 == a2)
            goto LABEL_45;
        }
        result = v9 + 1 == a2;
      }
      break;
  }
  return result;
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t **a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a2, a3, **a5);
  v11 = *a3;
  v12 = **a5;
  v13 = v12 + (v11 << 6);
  v14 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v14)
  {
    v15 = *a4;
    v16 = v12 + (v15 << 6);
    v17 = *(uint64_t **)v16;
    v18 = *(uint64_t **)v13;
    v19 = 8 * *(unsigned int *)(v16 + 8);
    v20 = 8 * v14 - 8;
    while (v19)
    {
      v21 = *v17;
      v22 = *v18;
      if (*v17 < *v18)
        break;
      ++v17;
      ++v18;
      v19 -= 8;
      v23 = v22 < v21 || v20 == 0;
      v20 -= 8;
      if (v23)
        return result;
    }
    *a3 = v15;
    *a4 = v11;
    v24 = *a2;
    v25 = v12 + (v24 << 6);
    v26 = *(unsigned int *)(v25 + 8);
    if ((_DWORD)v26)
    {
      v27 = *a3;
      v28 = v12 + (v27 << 6);
      v29 = *(uint64_t **)v28;
      v30 = *(uint64_t **)v25;
      v31 = 8 * *(unsigned int *)(v28 + 8);
      v32 = 8 * v26 - 8;
      while (v31)
      {
        v33 = *v29;
        v34 = *v30;
        if (*v29 < *v30)
          break;
        ++v29;
        ++v30;
        v31 -= 8;
        v35 = v34 < v33 || v32 == 0;
        v32 -= 8;
        if (v35)
          return result;
      }
      *a2 = v27;
      *a3 = v24;
      v36 = *a1;
      v37 = v12 + (v36 << 6);
      v38 = *(unsigned int *)(v37 + 8);
      if ((_DWORD)v38)
      {
        v39 = *a2;
        v40 = v12 + (v39 << 6);
        v41 = *(uint64_t **)v40;
        v42 = *(uint64_t **)v37;
        v43 = 8 * *(unsigned int *)(v40 + 8);
        v44 = 8 * v38 - 8;
        while (v43)
        {
          v45 = *v41;
          v46 = *v42;
          if (*v41 < *v42)
            break;
          ++v41;
          ++v42;
          v43 -= 8;
          v47 = v46 < v45 || v44 == 0;
          v44 -= 8;
          if (v47)
            return result;
        }
        *a1 = v39;
        *a2 = v36;
      }
    }
  }
  return result;
}

void mlir::RewritePatternSet::addImpl<CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.max", 10, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E13DA8;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>]";
    v25 = 115;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.max", 10, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E13CF8;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>]";
    v25 = 111;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.max", 10, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E135B0;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>]";
    v25 = 96;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.max", 10, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E13E58;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>]";
    v25 = 119;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>::~CanonicalizeSingleResultAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>::~CanonicalizeSingleResultAffineMinMaxOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMaxOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMaxOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  mlir::GenericProgramPoint *v8;
  _QWORD v10[2];
  uint64_t Value;

  v5 = a2 + 64;
  v10[0] = *(_QWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  v10[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v10) != 1)
    return 0;
  v10[0] = *(_QWORD *)(v5 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    v7 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v10[0] = v7;
  v10[1] = v6;
  v8 = mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap,mlir::OperandRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&Value, (uint64_t)v10);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v8);
  return 1;
}

_QWORD *DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>::~DeduplicateAffineMinMaxExpressions(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>::~DeduplicateAffineMinMaxExpressions(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t Results;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int NumDims;
  int NumSymbols;
  unint64_t v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  uint64_t v23;
  uint64_t Value;
  void *v25;
  uint64_t v26;
  _BYTE v27[32];
  unint64_t v28[3];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v25);
  v25 = v27;
  v26 = 0x400000000;
  Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  v7 = v26;
  if (v6)
  {
    v8 = (uint64_t *)Results;
    v9 = (uint64_t *)(Results + 8 * v6);
    do
    {
      v10 = *v8;
      v11 = v25;
      v12 = v7;
      v13 = (char *)v25;
      if (v7)
      {
        v14 = 8 * v7;
        v13 = (char *)v25;
        while (*(_QWORD *)v13 != v10)
        {
          v13 += 8;
          v14 -= 8;
          if (!v14)
          {
            v13 = (char *)v25 + 8 * v7;
            break;
          }
        }
      }
      if (v7 == (v13 - (_BYTE *)v25) >> 3)
      {
        if (v7 >= HIDWORD(v26))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v7 + 1, 8);
          v12 = v26;
          v11 = v25;
        }
        v11[v12] = v10;
        v7 = v26 + 1;
        LODWORD(v26) = v26 + 1;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  if (v7 == mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value))
  {
    v15 = 0;
    v16 = v25;
    if (v25 == v27)
      return v15;
    goto LABEL_19;
  }
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  v23 = mlir::AffineMap::get(NumDims, NumSymbols, (uint64_t)v25, v26, a3[1]);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v19 = *(unsigned int *)(a2 + 68);
    v20 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  mlir::ValueRange::ValueRange(v28, v20, v19);
  v21 = mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,mlir::ValueRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&v23, (uint64_t *)v28);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v21);
  v15 = 1;
  v16 = v25;
  if (v25 != v27)
LABEL_19:
    free(v16);
  return v15;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,mlir::ValueRange>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  _QWORD v26[8];
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD v30[29];

  v30[28] = *MEMORY[0x1E0C80C00];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.max", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.max";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v9);
  v11 = *a3;
  v12 = *a4;
  v13 = a4[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v26, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(v26) = v16;
  v17 = v28;
  if (v28 >= v29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v28 + 1, 8);
    v17 = v28;
  }
  *(_QWORD *)(v27 + 8 * v17) = IndexType;
  ++v28;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v19;
}

_QWORD *MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>::~MergeAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>::~MergeAffineMinMaxOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  unint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t NumDims;
  unint64_t v10;
  uint64_t v11;
  unint64_t NumSymbols;
  void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t *v19;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t *v25;
  int v27;
  uint64_t Results;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  uint64_t DefiningOp;
  unsigned int Position;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  mlir::GenericProgramPoint *v69;
  uint64_t v70;
  void *v71;
  mlir::IndexType **v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t Value;
  mlir::MLIRContext **v78[4];
  _QWORD v79[2];
  mlir::MLIRContext **v80;
  mlir::MLIRContext **v81;
  void *v82;
  unint64_t v83;
  _BYTE v84[64];
  void *v85;
  uint64_t v86;
  _BYTE v87[32];
  void *v88;
  uint64_t v89;
  _BYTE v90[32];
  void *v91;
  uint64_t v92;
  _BYTE v93[64];
  char *v94;
  unint64_t v95;
  _BYTE v96[64];
  void *v97;
  unint64_t v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v94 = *(char **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    v6 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v94, v6, v5);
  v7 = v94;
  v8 = v95;
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (v8 < NumDims)
    NumDims = v8;
  v99 = v7;
  v100 = NumDims;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v10 = *(unsigned int *)(a2 + 68);
    v11 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v94, v11, v10);
  NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  if (v95 <= NumSymbols)
  {
    v13 = v94;
    NumSymbols = v95;
  }
  else
  {
    v13 = (void *)mlir::ValueRange::offset_base(&v94, v95 - NumSymbols);
  }
  v97 = v13;
  v98 = NumSymbols;
  v14 = v99;
  v15 = v100;
  v94 = v96;
  v95 = 0x800000000;
  if (v100 < 9)
  {
    v16 = 0;
    v91 = v99;
    v92 = 0;
    v17 = v96;
    if (!v100)
    {
      v21 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v100, 8);
    v16 = v95;
    v17 = v94;
    v91 = v14;
    v92 = 0;
  }
  v18 = 0;
  v19 = (uint64_t *)&v17[8 * v16];
  do
  {
    *v19++ = mlir::ValueRange::dereference_iterator(&v91, v18);
    v18 = ++v92;
  }
  while (v91 != v14 || v18 != v15);
  v21 = v95;
  v13 = v97;
  NumSymbols = v98;
LABEL_20:
  LODWORD(v95) = v21 + v15;
  v91 = v93;
  v92 = 0x800000000;
  if (NumSymbols < 9)
  {
    v22 = 0;
    v82 = v13;
    v83 = 0;
    v23 = v93;
    if (!NumSymbols)
    {
      v27 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, NumSymbols, 8);
    v22 = v92;
    v23 = v91;
    v82 = v13;
    v83 = 0;
  }
  v24 = 0;
  v25 = (uint64_t *)&v23[8 * v22];
  do
  {
    *v25++ = mlir::ValueRange::dereference_iterator(&v82, v24);
    v24 = ++v83;
  }
  while (v82 != v13 || v24 != NumSymbols);
  v27 = v92;
LABEL_30:
  LODWORD(v92) = v27 + NumSymbols;
  v88 = v90;
  v89 = 0x400000000;
  v85 = v87;
  v86 = 0x400000000;
  Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  if (v29)
  {
    v30 = (void **)Results;
    v31 = 8 * v29;
    while (1)
    {
      v33 = *v30;
      v82 = *v30;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v82) == 7)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, (uint64_t)v33);
        v79[0] = v82;
        if (v82)
          goto LABEL_37;
LABEL_40:
        v82 = v33;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v82) == 6)
        {
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, (uint64_t)v33);
          v78[0] = (mlir::MLIRContext **)v82;
          if (!v82)
            goto LABEL_32;
        }
        else
        {
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, 0);
          v78[0] = (mlir::MLIRContext **)v82;
          if (!v82)
            goto LABEL_32;
        }
        Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v78);
        v82 = (void *)mlir::ValueRange::dereference_iterator(&v99, Position);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v82);
        if (DefiningOp)
          goto LABEL_45;
LABEL_32:
        v32 = v89;
        if (v89 >= (unint64_t)HIDWORD(v89))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v89 + 1, 8);
          v32 = v89;
        }
        *((_QWORD *)v88 + v32) = v33;
        LODWORD(v89) = v89 + 1;
        ++v30;
        v31 -= 8;
        if (!v31)
          break;
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, 0);
        v79[0] = v82;
        if (!v82)
          goto LABEL_40;
LABEL_37:
        v34 = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v79);
        v82 = (void *)mlir::ValueRange::dereference_iterator(&v97, v34);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v82);
        if (!DefiningOp)
          goto LABEL_32;
LABEL_45:
        v37 = DefiningOp;
        if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id)
          goto LABEL_32;
        v38 = v86;
        if (v86 >= (unint64_t)HIDWORD(v86))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v87, v86 + 1, 8);
          v38 = v86;
        }
        *((_QWORD *)v85 + v38) = v37;
        LODWORD(v86) = v86 + 1;
        ++v30;
        v31 -= 8;
        if (!v31)
          break;
      }
    }
  }
  if ((_DWORD)v86)
  {
    v74 = a2;
    v73 = a3;
    v39 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
    v40 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
    if ((_DWORD)v86)
    {
      v41 = (char *)v85;
      v75 = (char *)v85 + 8 * v86;
      while (1)
      {
        v42 = *(_QWORD *)v41;
        v82 = *(void **)(*(_QWORD *)v41
                       + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)v41 + 44) >> 23) & 1)
                       + 64);
        v79[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v82);
        v43 = mlir::AffineMap::getNumDims((mlir::AffineMap *)v79);
        v44 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v79);
        if ((*(_BYTE *)(v42 + 46) & 0x80) != 0)
        {
          v45 = *(unsigned int *)(v42 + 68);
          v46 = *(_QWORD *)(v42 + 72);
        }
        else
        {
          v46 = 0;
          v45 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v82, v46, v45);
        v47 = v82;
        v48 = v83 >= v43 ? v43 : v83;
        if ((*(_BYTE *)(v42 + 46) & 0x80) != 0)
        {
          v49 = *(unsigned int *)(v42 + 68);
          v50 = *(_QWORD *)(v42 + 72);
        }
        else
        {
          v50 = 0;
          v49 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v82, v50, v49);
        v51 = v82;
        v52 = v44;
        if (v83 > v44)
          break;
        v52 = v83;
        v53 = v95;
        v54 = v48 + v95;
        if (v54 > HIDWORD(v95))
          goto LABEL_64;
LABEL_65:
        v82 = v47;
        v83 = 0;
        if (v48)
        {
          v55 = 0;
          v56 = (uint64_t *)&v94[8 * v53];
          do
          {
            *v56++ = mlir::ValueRange::dereference_iterator(&v82, v55);
            v55 = ++v83;
          }
          while (v82 != v47 || v55 != v48);
          LODWORD(v53) = v95;
        }
        LODWORD(v95) = v53 + v48;
        v58 = v92;
        v59 = v52 + v92;
        if (v59 > HIDWORD(v92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, v59, 8);
          v58 = v92;
        }
        v82 = v51;
        v83 = 0;
        if (v52)
        {
          v60 = 0;
          v61 = (uint64_t *)((char *)v91 + 8 * v58);
          do
          {
            *v61++ = mlir::ValueRange::dereference_iterator(&v82, v60);
            v60 = ++v83;
          }
          while (v82 != v51 || v60 != v52);
          LODWORD(v58) = v92;
        }
        LODWORD(v92) = v58 + v52;
        v63 = mlir::AffineMap::getResults((mlir::AffineMap *)v79);
        if (v64)
        {
          v65 = (void **)v63;
          v66 = 8 * v64;
          do
          {
            v82 = *v65;
            v78[0] = (mlir::MLIRContext **)mlir::AffineExpr::shiftDims((mlir::MLIRContext ***)&v82, v43, v39, 0);
            v67 = mlir::AffineExpr::shiftSymbols(v78, v44, v40, 0);
            v68 = v89;
            if (v89 >= (unint64_t)HIDWORD(v89))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v89 + 1, 8);
              v68 = v89;
            }
            *((_QWORD *)v88 + v68) = v67;
            LODWORD(v89) = v89 + 1;
            ++v65;
            v66 -= 8;
          }
          while (v66);
        }
        v39 += v43;
        v40 += v44;
        v41 += 8;
        if (v41 == v75)
          goto LABEL_91;
      }
      v51 = (void *)mlir::ValueRange::offset_base(&v82, v83 - v44);
      v53 = v95;
      v54 = v48 + v95;
      if (v54 <= HIDWORD(v95))
        goto LABEL_65;
LABEL_64:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v54, 8);
      v53 = v95;
      goto LABEL_65;
    }
LABEL_91:
    v76 = mlir::AffineMap::get(v39, v40, (uint64_t)v88, v89, v73[1]);
    v81 = (mlir::MLIRContext **)((char *)v91 + 8 * v92);
    v82 = v84;
    v83 = 0x800000000;
    v79[0] = v94;
    v79[1] = v91;
    v80 = (mlir::MLIRContext **)&v94[8 * v95];
    v78[0] = v80;
    v78[1] = v81;
    v78[2] = v80;
    v78[3] = v81;
    llvm::SmallVectorImpl<mlir::Type>::append<llvm::concat_iterator<mlir::Type,mlir::Type*,mlir::Type*>,void>((uint64_t)&v82, v79, v78);
    v69 = mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,llvm::SmallVector<mlir::Value,8u> &>(v73 + 1, *(_QWORD *)(v74 + 24), (unint64_t *)&v76, (uint64_t)&v82);
    (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*v73 + 4))(v73, v74, v69);
    if (v82 != v84)
      free(v82);
    v70 = 1;
    v71 = v85;
    if (v85 != v87)
      goto LABEL_94;
  }
  else
  {
    v70 = 0;
    v71 = v85;
    if (v85 != v87)
LABEL_94:
      free(v71);
  }
  if (v88 != v90)
    free(v88);
  if (v91 != v93)
    free(v91);
  if (v94 != v96)
    free(v94);
  return v70;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,llvm::SmallVector<mlir::Value,8u> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x1E0C80C00];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.max", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.max";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMaxOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMaxOp>::~SimplifyAffineOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t Value;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;
  int v15;
  unint64_t v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[64];
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  v24 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    v7 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v26, v7, v6);
  v9 = v26;
  v8 = v27;
  v26 = v28;
  v27 = 0x800000000;
  if (v8 < 9)
  {
    v10 = 0;
    v29 = v9;
    v30 = 0;
    v11 = v28;
    if (!v8)
    {
      v15 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v8, 8);
    v10 = v27;
    v11 = v26;
    v29 = v9;
    v30 = 0;
  }
  v12 = 0;
  v13 = (uint64_t *)&v11[8 * v10];
  do
  {
    *v13++ = mlir::ValueRange::dereference_iterator(&v29, v12);
    v12 = ++v30;
  }
  while (v29 != v9 || v12 != v8);
  v15 = v27;
LABEL_13:
  LODWORD(v27) = v15 + v8;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v24, (uint64_t)&v26);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v24, (uint64_t)&v26);
  simplifyMapWithOperands((mlir::AffineExpr *)&v24, (uint64_t *)v26, v27);
  v16 = v24;
  if (v24 == Value)
  {
    v21 = v26;
    v29 = v9;
    v30 = 0;
    if (!v8)
    {
LABEL_25:
      v18 = 0;
      v19 = v26;
      if (v26 == v28)
        return v18;
      goto LABEL_15;
    }
    v22 = 0;
    while (*v21 == mlir::ValueRange::dereference_iterator(&v29, v22))
    {
      v22 = ++v30;
      ++v21;
      if (v29 == v9 && v22 == v8)
        goto LABEL_25;
    }
    v16 = v24;
  }
  v25 = v16;
  v29 = v26;
  v30 = v27;
  v17 = mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(a3 + 1, *(_QWORD *)(a2 + 24), &v25, (uint64_t)&v29);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v17);
  v18 = 1;
  v19 = v26;
  if (v26 != v28)
LABEL_15:
    free(v19);
  return v18;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x1E0C80C00];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.max", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.max";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

_QWORD *CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>::~CanonicalizeAffineMinMaxOpExprAndTermOrder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>::~CanonicalizeAffineMinMaxOpExprAndTermOrder(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  unint64_t v5;
  uint64_t v6;
  mlir::GenericProgramPoint *v7;
  uint64_t Value;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10[0] = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if (!canonicalizeMapExprAndTermOrder((mlir::AffineMap *)&Value))
    return 0;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    v6 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v6, v5);
  v7 = mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,mlir::ValueRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&Value, (uint64_t *)v10);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v7);
  return 1;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>::~SimplifyAffineOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffinePrefetchOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffinePrefetchOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffinePrefetchOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t Value;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  const double *v16;
  unsigned __int128 *v17;
  unint64_t v18;
  const double *v19;
  unsigned __int128 v20;
  unsigned __int128 v21;
  uint64_t v22;
  int v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  mlir::GenericProgramPoint *v29;
  uint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39[2];
  unint64_t v40;
  void *__p;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[9];

  v46[8] = *MEMORY[0x1E0C80C00];
  v5 = a2 + 64;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  else
    v6 = 0;
  v44 = *(void **)(v6 + 24);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
  v36 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v44 = v46;
    v45 = 0x800000000;
    v9 = -1;
    v10 = 32;
LABEL_6:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, v9, 8);
    v11 = v45;
    v12 = v44;
    v13 = (char *)v44 + 8 * v45;
    if (v9 < 0xD)
      goto LABEL_12;
    goto LABEL_10;
  }
  v8 = *(unsigned int *)(a2 + 68);
  v9 = v8 - 1;
  v10 = *(_QWORD *)(a2 + 72) + 32;
  v44 = v46;
  v45 = 0x800000000;
  if ((unint64_t)(v8 - 1) >= 9)
    goto LABEL_6;
  v11 = 0;
  if (v8 == 1)
  {
    v23 = 0;
    goto LABEL_20;
  }
  v12 = v46;
  v13 = v46;
  if (v9 < 0xD)
    goto LABEL_12;
LABEL_10:
  if ((unint64_t)v13 >= v10 + 32 * v9 || v10 + 24 >= (unint64_t)&v12[v9 + v11])
  {
    v15 = v9 & 3;
    if ((v9 & 3) == 0)
      v15 = 4;
    v14 = v9 - v15;
    v13 += v14;
    v16 = (const double *)(v10 + 88);
    v17 = (unsigned __int128 *)&v12[v11 + 2];
    v18 = v14;
    do
    {
      v19 = v16 - 8;
      v20 = (unsigned __int128)vld4q_f64(v19);
      v21 = (unsigned __int128)vld4q_f64(v16);
      *(v17 - 1) = v20;
      *v17 = v21;
      v16 += 16;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    goto LABEL_17;
  }
LABEL_12:
  v14 = 0;
LABEL_17:
  v22 = (32 * v14) | 0x18;
  do
  {
    *v13++ = *(_QWORD *)(v10 + v22);
    ++v14;
    v22 += 32;
  }
  while (v9 != v14);
  v23 = v45;
  v11 = v9;
LABEL_20:
  LODWORD(v45) = v23 + v11;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v36, (uint64_t)&v44);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v36, (uint64_t)&v44);
  simplifyMapWithOperands((mlir::AffineExpr *)&v36, (uint64_t *)v44, v45);
  if (v36 != Value)
  {
    v24 = v44;
    goto LABEL_22;
  }
  v24 = v44;
  if (!v11)
  {
LABEL_41:
    v30 = 0;
    if (v44 == v46)
      return v30;
    goto LABEL_32;
  }
  if (*(_QWORD *)(v10 + 24) == *(_QWORD *)v44)
  {
    v32 = (uint64_t *)(v10 + 56);
    v33 = 1;
    while (v11 != v33)
    {
      v34 = *v32;
      v32 += 4;
      v35 = *((_QWORD *)v44 + v33++);
      if (v34 != v35)
        goto LABEL_22;
    }
    goto LABEL_41;
  }
LABEL_22:
  v39[1] = v45;
  v40 = v36;
  v25 = *(unsigned __int8 *)(a2 + 47);
  v38 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v39[0] = (uint64_t)v24;
  if (v25)
    v26 = a2 + 80;
  else
    v26 = 0;
  v43 = *(_QWORD *)(v26 + 16);
  mlir::IntegerAttr::getValue(&v43, (llvm::APInt *)&__p);
  if (v42 > 0x40)
  {
    v27 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v27) = (_DWORD)__p;
  }
  LODWORD(v43) = v27;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v28 = v5 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  else
    v28 = 0;
  __p = *(void **)(v28 + 8);
  v37 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&__p);
  __p = *(void **)(v5 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  LOBYTE(__p) = mlir::BoolAttr::getValue((mlir::BoolAttr *)&__p);
  v29 = mlir::OpBuilder::create<mlir::affine::AffinePrefetchOp,mlir::detail::TypedValue<mlir::MemRefType>,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &,unsigned int,BOOL,BOOL>((mlir::Builder *)(a3 + 8), *(_QWORD *)(a2 + 24), &v38, &v40, v39, &v43, (unsigned __int8 *)&v37, (unsigned __int8 *)&__p);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v29);
  v30 = 1;
  v24 = v44;
  if (v44 != v46)
LABEL_32:
    free(v24);
  return v30;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffinePrefetchOp,mlir::detail::TypedValue<mlir::MemRefType>,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &,unsigned int,BOOL,BOOL>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, _DWORD *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t *Context;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  unsigned int v24;
  mlir::MLIRContext *v25;
  uint64_t I32IntegerAttr;
  uint64_t BoolAttr;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  mlir::GenericProgramPoint *v31;
  mlir::GenericProgramPoint *v32;
  uint64_t v34;
  uint64_t v35[4];
  __int16 v36;
  _QWORD v37[38];
  uint64_t v38[4];
  __int16 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v34 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v34);
  v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.prefetch", (const unsigned __int8 *)0xF, Context);
  if (!v18)
  {
    v39 = 1283;
    v38[2] = (uint64_t)"affine.prefetch";
    v38[3] = 15;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v36 = 259;
    llvm::operator+(v38, v35, (uint64_t)v37);
    llvm::report_fatal_error((llvm::Twine *)v37, 1);
  }
  mlir::OperationState::OperationState(v37, a2, v17);
  v19 = *a3;
  v20 = *a4;
  v22 = *a5;
  v21 = a5[1];
  v23 = *a6 != 0;
  v24 = *a7;
  v25 = (mlir::MLIRContext *)*a8;
  v35[0] = v19;
  I32IntegerAttr = mlir::Builder::getI32IntegerAttr(a1, v24);
  BoolAttr = mlir::Builder::getBoolAttr((mlir::BoolAttr **)a1, (mlir::MLIRContext *)v23);
  v28 = mlir::Builder::getBoolAttr((mlir::BoolAttr **)a1, v25);
  mlir::OperationState::addOperands((uint64_t)v37, (uint64_t)v35, 1);
  mlir::ValueRange::ValueRange((unint64_t *)v38, v22, v21);
  mlir::OperationState::addOperands((uint64_t)v37, v38[0], v38[1]);
  v29 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(v37);
  v30 = mlir::AffineMapAttr::get(v20);
  v29[2] = I32IntegerAttr;
  v29[3] = v30;
  *v29 = v28;
  v29[1] = BoolAttr;
  v31 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v37);
  if (*(_UNKNOWN **)(*((_QWORD *)v31 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffinePrefetchOp,void>::id)
    v32 = v31;
  else
    v32 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v37);
  return v32;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineParallelOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[38];
  unint64_t v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"affine.yield", 12);
  mlir::ValueRange::ValueRange(v6, 0, 0);
  mlir::OperationState::addOperands((uint64_t)v5, v6[0], v6[1]);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

llvm::raw_ostream *mlir::affine::AffineParallelOp::print(mlir::OpAsmPrinter &)::$_1::operator()<mlir::Attribute const>(uint64_t *a1, uint64_t a2)
{
  unint64_t Int;
  unint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  const char *v8;
  size_t v9;
  size_t v10;
  llvm::raw_ostream *v11;
  void *v12;
  llvm::raw_ostream *result;
  _BYTE *v14;
  uint64_t v15;

  v15 = a2;
  Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v15);
  v4 = mlir::arith::symbolizeAtomicRMWKind(Int);
  v5 = *a1;
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "\"", 1uLL);
  }
  else
  {
    *v7 = 34;
    ++*((_QWORD *)v6 + 4);
  }
  v8 = mlir::arith::stringifyAtomicRMWKind(v4);
  v10 = v9;
  v11 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v12 = (void *)*((_QWORD *)v11 + 4);
  if (v10 <= *((_QWORD *)v11 + 3) - (_QWORD)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((_QWORD *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, v8, v10);
  }
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v14 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v14)
    return llvm::raw_ostream::write(result, "\"", 1uLL);
  *v14 = 34;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::affine::AffineParallelOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  mlir::MLIRContext *v4;
  uint64_t NoneType;
  uint64_t AttrData;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t I64IntegerAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void *__p;
  _QWORD **v34;
  char v35;
  void *v36[2];
  _QWORD v37[10];

  v37[9] = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v36[0] = v37;
  v36[1] = (void *)0x400000000;
  v37[8] = 4;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
  v3 = *a1;
  NoneType = mlir::Builder::getNoneType((mlir::NoneType **)a1[1], v4);
  if (mlir::AsmParser::parseAttribute<mlir::StringAttr>(v3, &v26, NoneType, (uint64_t)"reduce", 6, (uint64_t)v36))
  {
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v26);
    v8 = (void *)mlir::arith::symbolizeAtomicRMWKind(AttrData, v7);
    if (v9)
    {
      v10 = a1[2];
      I64IntegerAttr = mlir::Builder::getI64IntegerAttr((mlir::Builder *)a1[1], v8);
      v12 = *(unsigned int *)(v10 + 8);
      if (v12 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v10 + 16), v12 + 1, 8);
        LODWORD(v12) = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v12) = I64IntegerAttr;
      ++*(_DWORD *)(v10 + 8);
      v13 = 1;
    }
    else
    {
      v15 = *a1;
      v24 = "invalid reduction value: ";
      v25 = 259;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)v15 + 24))(&v27, v15, v2, &v24);
      if (v27)
        mlir::Diagnostic::operator<<((uint64_t)&v28, v26);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v27);
      if (v27)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
      if (v35)
      {
        v16 = (_QWORD **)__p;
        if (__p)
        {
          v17 = v34;
          v18 = __p;
          if (v34 != __p)
          {
            do
              v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
            while (v17 != v16);
            v18 = __p;
          }
          v34 = v16;
          operator delete(v18);
        }
        v19 = v31;
        if (v31)
        {
          v20 = v32;
          v21 = v31;
          if (v32 != v31)
          {
            do
            {
              v23 = (void *)*--v20;
              v22 = v23;
              *v20 = 0;
              if (v23)
                operator delete[](v22);
            }
            while (v20 != v19);
            v21 = v31;
          }
          v32 = v19;
          operator delete(v21);
        }
        if (v29 != &v30)
          free(v29);
      }
    }
  }
  else
  {
    v13 = 0;
  }
  if (v36[0] != v37)
    free(v36[0]);
  return v13;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::StringAttr>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD **v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v26, a3))
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    v13 = v26;
  else
    v13 = 0;
  *a2 = v13;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    v24 = "invalid kind of attribute specified";
    v25 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v27, a1, v12, &v24);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    if (v34)
    {
      v16 = (_QWORD **)__p;
      if (__p)
      {
        v17 = v33;
        v18 = __p;
        if (v33 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v33 = v16;
        operator delete(v18);
      }
      v19 = v30;
      if (v30)
      {
        v20 = v31;
        v21 = v30;
        if (v31 != v30)
        {
          do
          {
            v23 = (void *)*--v20;
            v22 = v23;
            *v20 = 0;
            if (v23)
              operator delete[](v22);
          }
          while (v20 != v19);
          v21 = v30;
        }
        v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29)
        free(v28);
    }
  }
  return v14;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>::~SimplifyAffineOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorLoadOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorLoadOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorLoadOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  const double *v14;
  unsigned __int128 *v15;
  unint64_t v16;
  const double *v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  mlir::GenericProgramPoint *v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD v35[2];
  unint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x1E0C80C00];
  v37 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v37);
  v32 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v37 = v39;
    v38 = 0x800000000;
    v7 = -1;
    v8 = 32;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v7, 8);
    v9 = v38;
    v10 = v37;
    v11 = (char *)v37 + 8 * v38;
    if (v7 < 0xD)
      goto LABEL_9;
    goto LABEL_7;
  }
  v6 = *(unsigned int *)(a2 + 68);
  v7 = v6 - 1;
  v8 = *(_QWORD *)(a2 + 72) + 32;
  v37 = v39;
  v38 = 0x800000000;
  if ((unint64_t)(v6 - 1) >= 9)
    goto LABEL_3;
  v9 = 0;
  if (v6 == 1)
  {
    v21 = 0;
    goto LABEL_17;
  }
  v10 = v39;
  v11 = v39;
  if (v7 < 0xD)
    goto LABEL_9;
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    v13 = v7 & 3;
    if ((v7 & 3) == 0)
      v13 = 4;
    v12 = v7 - v13;
    v11 += v12;
    v14 = (const double *)(v8 + 88);
    v15 = (unsigned __int128 *)&v10[v9 + 2];
    v16 = v12;
    do
    {
      v17 = v14 - 8;
      v18 = (unsigned __int128)vld4q_f64(v17);
      v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      *v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  v12 = 0;
LABEL_14:
  v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(_QWORD *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  v21 = v38;
  v9 = v7;
LABEL_17:
  LODWORD(v38) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v32, (uint64_t)&v37);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v32, (uint64_t)&v37);
  simplifyMapWithOperands((mlir::AffineExpr *)&v32, (uint64_t *)v37, v38);
  if (v32 != Value)
  {
    v22 = v37;
    goto LABEL_19;
  }
  v22 = v37;
  if (!v9)
  {
LABEL_32:
    v26 = 0;
    if (v37 == v39)
      return v26;
    goto LABEL_23;
  }
  if (*(_QWORD *)(v8 + 24) == *(_QWORD *)v37)
  {
    v28 = (uint64_t *)(v8 + 56);
    v29 = 1;
    while (v9 != v29)
    {
      v30 = *v28;
      v28 += 4;
      v31 = *((_QWORD *)v37 + v29++);
      if (v30 != v31)
        goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_19:
  v35[1] = v38;
  v36 = v32;
  v35[0] = v22;
  if (*(_DWORD *)(a2 + 36))
    v23 = a2 - 16;
  else
    v23 = 0;
  v24 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v23, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v34 = v24;
  v25 = mlir::OpBuilder::create<mlir::affine::AffineVectorLoadOp,mlir::VectorType,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v34, &v33, &v36, (uint64_t)v35);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v25);
  v26 = 1;
  v22 = v37;
  if (v37 != v39)
LABEL_23:
    free(v22);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineVectorLoadOp,mlir::VectorType,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  mlir::GenericProgramPoint *v19;
  mlir::GenericProgramPoint *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  unint64_t v27[2];
  _QWORD v28[39];

  v28[38] = *MEMORY[0x1E0C80C00];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.vector_load", (const unsigned __int8 *)0x12, Context);
  if (!v14)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"affine.vector_load";
    v25[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  v18 = mlir::ValueRange::ValueRange(v27, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  mlir::affine::AffineVectorLoadOp::build((uint64_t)v18, (uint64_t)v28, v15, v16, v17, v27[0], v27[1]);
  v19 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineVectorLoadOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>::~SimplifyAffineOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorStoreOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorStoreOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorStoreOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  const double *v14;
  unsigned __int128 *v15;
  unint64_t v16;
  const double *v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  mlir::GenericProgramPoint *v24;
  uint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  unint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[9];

  v38[8] = *MEMORY[0x1E0C80C00];
  v36 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  v31 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v36 = v38;
    v37 = 0x800000000;
    v7 = -2;
    v8 = 64;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v7, 8);
    v9 = v37;
    v10 = v36;
    v11 = (char *)v36 + 8 * v37;
    if (v7 < 0xD)
      goto LABEL_9;
    goto LABEL_7;
  }
  v6 = *(unsigned int *)(a2 + 68);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(a2 + 72) + 64;
  v36 = v38;
  v37 = 0x800000000;
  if ((unint64_t)(v6 - 2) >= 9)
    goto LABEL_3;
  v9 = 0;
  if (v6 == 2)
  {
    v21 = 0;
    goto LABEL_17;
  }
  v10 = v38;
  v11 = v38;
  if (v7 < 0xD)
    goto LABEL_9;
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    v13 = v7 & 3;
    if ((v7 & 3) == 0)
      v13 = 4;
    v12 = v7 - v13;
    v11 += v12;
    v14 = (const double *)(v8 + 88);
    v15 = (unsigned __int128 *)&v10[v9 + 2];
    v16 = v12;
    do
    {
      v17 = v14 - 8;
      v18 = (unsigned __int128)vld4q_f64(v17);
      v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      *v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  v12 = 0;
LABEL_14:
  v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(_QWORD *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  v21 = v37;
  v9 = v7;
LABEL_17:
  LODWORD(v37) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  simplifyMapWithOperands((mlir::AffineExpr *)&v31, (uint64_t *)v36, v37);
  if (v31 != Value)
  {
    v22 = v36;
    goto LABEL_19;
  }
  v22 = v36;
  if (!v9)
  {
LABEL_29:
    v25 = 0;
    if (v36 == v38)
      return v25;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v8 + 24) == *(_QWORD *)v36)
  {
    v27 = (uint64_t *)(v8 + 56);
    v28 = 1;
    while (v9 != v28)
    {
      v29 = *v27;
      v27 += 4;
      v30 = *((_QWORD *)v36 + v28++);
      if (v29 != v30)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v34[1] = v37;
  v35 = v31;
  v23 = *(_QWORD *)(a2 + 72);
  v33 = *(_QWORD *)(v23 + 24);
  v34[0] = v22;
  v32 = *(_QWORD *)(v23 + 56);
  v24 = mlir::OpBuilder::create<mlir::affine::AffineVectorStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), &v33, &v32, &v35, (uint64_t)v34);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v24);
  v25 = 1;
  v22 = v36;
  if (v36 != v38)
LABEL_20:
    free(v22);
  return v25;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineVectorStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::StringAttr *v21;
  uint64_t v22;
  mlir::GenericProgramPoint *v23;
  mlir::GenericProgramPoint *v24;
  uint64_t v26;
  uint64_t v27[4];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[4];
  __int16 v32;
  unint64_t v33[2];
  _QWORD v34[14];
  _QWORD v35[25];

  v35[24] = *MEMORY[0x1E0C80C00];
  v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.vector_store", (const unsigned __int8 *)0x13, Context);
  if (!v14)
  {
    v32 = 1283;
    v31[2] = (uint64_t)"affine.vector_store";
    v31[3] = 19;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v28 = 259;
    llvm::operator+(v31, v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  mlir::ValueRange::ValueRange(v33, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  v18 = v33[0];
  v19 = v33[1];
  v29 = v16;
  v30 = v15;
  mlir::OperationState::addOperands((uint64_t)v34, (uint64_t)&v30, 1);
  mlir::OperationState::addOperands((uint64_t)v34, (uint64_t)&v29, 1);
  mlir::OperationState::addOperands((uint64_t)v34, v18, v19);
  v20 = mlir::AffineMapAttr::get(v17);
  v21 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)v34);
  v32 = 261;
  v31[0] = (uint64_t)"map";
  v31[1] = 3;
  v22 = mlir::StringAttr::get(v21, (mlir::MLIRContext *)v31);
  mlir::NamedAttribute::NamedAttribute(v27, v22, v20);
  mlir::NamedAttrList::push_back((uint64_t)v35, v27[0], v27[1]);
  v23 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((_QWORD *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineVectorStoreOp,void>::id)
    v24 = v23;
  else
    v24 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v24;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t mlir::affine::AffineValueMap::AffineValueMap(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v11 = mlir::MutableAffineMap::MutableAffineMap((_QWORD *)a1, a2);
  v12 = (char *)(v11 + 14);
  v11[12] = v11 + 14;
  v13 = (uint64_t)(v11 + 12);
  *(_QWORD *)(v13 + 8) = 0x400000000;
  if (a4 < 5)
  {
    v14 = 0;
    v26 = a3;
    v27 = 0;
    if (!a4)
    {
      v18 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, a4, 8);
    v14 = *(unsigned int *)(a1 + 104);
    v12 = *(char **)(a1 + 96);
    v26 = a3;
    v27 = 0;
  }
  v15 = 0;
  v16 = (uint64_t *)&v12[8 * v14];
  do
  {
    *v16++ = mlir::ValueRange::dereference_iterator(&v26, v15);
    v15 = ++v27;
  }
  while (v26 != a3 || v15 != a4);
  v18 = *(_DWORD *)(a1 + 104);
LABEL_11:
  v19 = (char *)(a1 + 160);
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_DWORD *)(a1 + 104) = v18 + a4;
  *(_QWORD *)(a1 + 152) = 0x400000000;
  if (a6 < 5)
  {
    v20 = 0;
    v26 = a5;
    v27 = 0;
    if (!a6)
    {
      v24 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 144, v19, a6, 8);
    v20 = *(unsigned int *)(a1 + 152);
    v19 = *(char **)(a1 + 144);
    v26 = a5;
    v27 = 0;
  }
  v21 = 0;
  v22 = (uint64_t *)&v19[8 * v20];
  do
  {
    *v22++ = mlir::ValueRange::dereference_iterator(&v26, v21);
    v21 = ++v27;
  }
  while (v26 != a5 || v21 != a6);
  v24 = *(_DWORD *)(a1 + 152);
LABEL_21:
  *(_DWORD *)(a1 + 152) = v24 + a6;
  return a1;
}

uint64_t *mlir::affine::AffineValueMap::reset(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v17;
  uint64_t *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  mlir::MutableAffineMap::reset(a1, a2);
  v11 = (uint64_t *)(a1 + 96);
  *(_DWORD *)(a1 + 104) = 0;
  if (a4 <= *(unsigned int *)(a1 + 108))
  {
    v13 = *v11;
    v25 = a3;
    v26 = 0;
    if (!a4)
    {
      v17 = 0;
      goto LABEL_12;
    }
    v12 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, (void *)(a1 + 112), a4, 8);
    v12 = *(unsigned int *)(a1 + 104);
    v13 = *(_QWORD *)(a1 + 96);
    v25 = a3;
    v26 = 0;
  }
  v14 = 0;
  v15 = (uint64_t *)(v13 + 8 * v12);
  do
  {
    *v15++ = mlir::ValueRange::dereference_iterator(&v25, v14);
    v14 = ++v26;
  }
  while (v25 != a3 || v14 != a4);
  v17 = *(_DWORD *)(a1 + 104);
LABEL_12:
  *(_DWORD *)(a1 + 104) = v17 + a4;
  result = (uint64_t *)(a1 + 144);
  *(_DWORD *)(a1 + 152) = 0;
  if (a6 <= *(unsigned int *)(a1 + 156))
  {
    v20 = *result;
    v25 = a5;
    v26 = 0;
    if (!a6)
    {
      v24 = 0;
      goto LABEL_23;
    }
    v19 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (void *)(a1 + 160), a6, 8);
    v19 = *(unsigned int *)(a1 + 152);
    v20 = *(_QWORD *)(a1 + 144);
    v25 = a5;
    v26 = 0;
  }
  v21 = 0;
  v22 = (uint64_t **)(v20 + 8 * v19);
  do
  {
    result = (uint64_t *)mlir::ValueRange::dereference_iterator(&v25, v21);
    *v22++ = result;
    v21 = ++v26;
  }
  while (v25 != a5 || v21 != a6);
  v24 = *(_DWORD *)(a1 + 152);
LABEL_23:
  *(_DWORD *)(a1 + 152) = v24 + a6;
  return result;
}

uint64_t mlir::affine::AffineValueMap::getOperands(mlir::affine::AffineValueMap *this)
{
  return *((_QWORD *)this + 12);
}

void mlir::affine::AffineValueMap::~AffineValueMap(mlir::affine::AffineValueMap *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 18);
  if (v2 != (char *)this + 160)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 12);
  if (v3 != (char *)this + 112)
    free(v3);
  if (*(mlir::affine::AffineValueMap **)this != (mlir::affine::AffineValueMap *)((char *)this + 16))
    free(*(void **)this);
}

uint64_t mlir::detail::verifyShapedDimOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 9) == 1)
  {
    v21[0] = *((_QWORD *)this - 1) & 0xFFFFFFFFFFFFFFF8;
    if (mlir::Type::isIndex((mlir::Type *)v21))
      return 1;
    v19[0] = "expect index result type";
    v20 = 259;
    mlir::Operation::emitError((uint64_t *)this, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v27;
        v14 = __p;
        if (v27 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v27 = v12;
        operator delete(v14);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v15 = v25;
      v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23)
          free(v22);
        return v3;
      }
      do
      {
        v17 = (void *)*--v15;
        v16 = v17;
        *v15 = 0;
        if (v17)
          operator delete[](v16);
      }
      while (v15 != v7);
LABEL_32:
      v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "expected single op result";
    v20 = 259;
    mlir::Operation::emitError((uint64_t *)this, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v27;
        v6 = __p;
        if (v27 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v27 = v4;
        operator delete(v6);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v8 = v25;
      v9 = v24;
      if (v25 == v24)
        goto LABEL_33;
      do
      {
        v11 = (void *)*--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          operator delete[](v10);
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

unint64_t mlir::detail::verifyDestinationStyleOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  unint64_t v2;
  void (**InterfaceFor)(const void ***__return_ptr, void *, mlir::detail *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  const void **v12;
  const void **v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int OperandNumber;
  uint64_t *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  int v44;
  unsigned int v45;
  mlir::detail *v46;
  const char *v47;
  char *v48;
  const void **v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  unsigned int v53;
  const void ***v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  const void ***v59;
  char *v60;
  char *v61;
  __int128 v62;
  const void ***v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  const void ***v68;
  char *v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  const void ***v73;
  char *v74;
  char *v75;
  __int128 v76;
  const void ***v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  const void ***v82;
  char *v83;
  char *v84;
  __int128 v85;
  _QWORD **v86;
  _QWORD **v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  const void ***v96;
  char *v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  const void ***v101;
  char *v102;
  char *v103;
  __int128 v104;
  uint64_t v105;
  const void ***v106;
  char *v107;
  char *v108;
  __int128 v109;
  uint64_t v110;
  const void ***v111;
  char *v112;
  char *v113;
  __int128 v114;
  _QWORD **v115;
  _QWORD **v116;
  void *v117;
  _QWORD *v118;
  _QWORD *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  unint64_t v125;
  unint64_t v126;
  BOOL v127;
  unint64_t v128;
  unint64_t v129;
  BOOL v130;
  unint64_t v131;
  unint64_t v132;
  BOOL v133;
  unint64_t v134;
  BOOL v135;
  unint64_t v136;
  BOOL v137;
  unint64_t v138;
  unint64_t v139;
  BOOL v140;
  unint64_t v141;
  BOOL v142;
  unint64_t v143;
  unint64_t v144;
  BOOL v145;
  int64_t v146;
  int64_t v147;
  int64_t v148;
  int64_t v149;
  int64_t v150;
  int64_t v151;
  int64_t v152;
  int64_t v153;
  int64_t v154;
  int64_t v155;
  int64_t v156;
  int64_t v157;
  int64_t v158;
  const void **v159;
  const char *v160;
  uint64_t v161;
  const char *v162;
  __int16 v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  unsigned int v171;
  unsigned int v172;
  _BYTE v173[96];
  void *v174;
  _QWORD *v175;
  void *__p;
  _QWORD **v177;
  char v178;
  const void **v179[2];
  _WORD *v180;
  _WORD v181[12];
  unint64_t *v182;
  uint64_t v183;
  _QWORD v184[8];

  v184[6] = *MEMORY[0x1E0C80C00];
  if (this)
    InterfaceFor = (void (**)(const void ***__return_ptr, void *, mlir::detail *))mlir::OpInterface<mlir::DestinationStyleOpInterface,mlir::detail::DestinationStyleOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this);
  else
    InterfaceFor = 0;
  v182 = v184;
  v183 = 0x600000000;
  (*InterfaceFor)(v179, InterfaceFor, this);
  v5 = mlir::MutableOperandRange::begin((mlir::MutableOperandRange *)v179);
  v6 = mlir::MutableOperandRange::end((mlir::MutableOperandRange *)v179);
  if (v5 == v6)
  {
LABEL_12:
    v10 = 1;
    v11 = v180;
    if (v180 == v181)
      goto LABEL_14;
    goto LABEL_13;
  }
  v7 = v6;
  v2 = v5;
  while (1)
  {
    while (1)
    {
      v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      if (v8 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        break;
      v9 = v183;
      if (v183 >= (unint64_t)HIDWORD(v183))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, v184, v183 + 1, 8);
        v9 = v183;
      }
      v182[v9] = v5;
      LODWORD(v183) = v183 + 1;
      v2 += 32;
      v5 += 32;
      if (v2 == v7)
        goto LABEL_12;
    }
    if (v8 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      break;
    v2 += 32;
    v5 += 32;
    if (v2 == v7)
      goto LABEL_12;
  }
  v159 = (const void **)"expected that operand #";
  v163 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v159, (uint64_t)&v167);
  OperandNumber = mlir::OpOperand::getOperandNumber(v2);
  if (v167)
  {
    LODWORD(v164) = 5;
    v165 = OperandNumber;
    v19 = (uint64_t *)&v164;
    v20 = (char *)v170;
    if (v171 >= v172)
    {
      v125 = v171 + 1;
      if (v170 <= &v164 && (char *)v170 + 24 * v171 > (char *)&v164)
      {
        v146 = (char *)&v164 - (_BYTE *)v170;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v125, 24);
        v20 = (char *)v170;
        v19 = (uint64_t *)((char *)v170 + v146);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v125, 24);
        v19 = (uint64_t *)&v164;
        v20 = (char *)v170;
      }
    }
    v21 = &v20[24 * v171];
    v22 = *(_OWORD *)v19;
    *((_QWORD *)v21 + 2) = v19[2];
    *(_OWORD *)v21 = v22;
    v23 = ++v171;
    if (v167)
    {
      LODWORD(v164) = 3;
      v165 = (unint64_t)" is a ranked tensor or a ranked memref";
      v166 = 38;
      v24 = (uint64_t *)&v164;
      v25 = (char *)v170;
      if (v23 >= v172)
      {
        v126 = v23 + 1;
        v127 = (char *)v170 + 24 * v23 > (char *)&v164;
        if (v170 <= &v164 && v127)
        {
          v147 = (char *)&v164 - (_BYTE *)v170;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v126, 24);
          v25 = (char *)v170;
          v24 = (uint64_t *)((char *)v170 + v147);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v126, 24);
          v24 = (uint64_t *)&v164;
          v25 = (char *)v170;
        }
      }
      v26 = &v25[24 * v171];
      v27 = *(_OWORD *)v24;
      *((_QWORD *)v26 + 2) = v24[2];
      *(_OWORD *)v26 = v27;
      ++v171;
    }
  }
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v167);
  if (v167)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v167);
  if (v178)
  {
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v177;
      v30 = __p;
      if (v177 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v177 = v28;
      operator delete(v30);
    }
    v31 = v174;
    if (v174)
    {
      v32 = v175;
      v33 = v174;
      if (v175 != v174)
      {
        do
        {
          v35 = (void *)*--v32;
          v34 = v35;
          *v32 = 0;
          if (v35)
            operator delete[](v34);
        }
        while (v32 != v31);
        v33 = v174;
      }
      v175 = v31;
      operator delete(v33);
    }
    if (v170 != v173)
      free(v170);
  }
  v10 = 0;
  v11 = v180;
  if (v180 != v181)
LABEL_13:
    free(v11);
LABEL_14:
  if (!v10)
    goto LABEL_136;
  v12 = (const void **)*((unsigned int *)this + 9);
  if ((_DWORD)v12)
    v13 = (const void **)((char *)this - 16);
  else
    v13 = 0;
  v179[0] = v13;
  v179[1] = v12;
  mlir::OperandRange::getTypes((uint64_t *)v179, (uint64_t *)&v167);
  v14 = (uint64_t)v167;
  v15 = (uint64_t)v168;
  v16 = v170;
  if (v167 != v169 || (v17 = 0, v168 != v170))
  {
    if (v167 != v169)
    {
      while (1)
        mlir::detail::OpResultImpl::getNextResultAtOffset(v14, v15++);
    }
    v17 = 0;
    do
    {
      v36 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, v15) + 8) & 0xFFFFFFFFFFFFFFF8)
                     + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v36 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        ++v17;
      }
      ++v15;
    }
    while (v16 != (void *)v15);
  }
  if (v17 != v183)
  {
    v179[0] = (const void **)"expected the number of tensor results (";
    v181[0] = 259;
    mlir::Operation::emitOpError((uint64_t *)this, v179, (uint64_t)&v167);
    v47 = (const char *)*((unsigned int *)this + 9);
    if ((_DWORD)v47)
      v48 = (char *)this - 16;
    else
      v48 = 0;
    v164 = v48;
    v165 = (unint64_t)v47;
    mlir::OperandRange::getTypes((uint64_t *)&v164, (uint64_t *)&v159);
    v49 = v159;
    v50 = (uint64_t)v160;
    v51 = v162;
    if (v159 != (const void **)v161 || (v52 = 0, v160 != v162))
    {
      if (v159 != (const void **)v161)
      {
        while (1)
          mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v49, v50++);
      }
      v52 = 0;
      do
      {
        v94 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v49, v50) + 8) & 0xFFFFFFFFFFFFFFF8)
                       + 136);
        if (v94 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || v94 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          ++v52;
        }
        ++v50;
      }
      while (v51 != (const char *)v50);
    }
    if (v167)
    {
      LODWORD(v159) = 5;
      v160 = v52;
      v96 = &v159;
      v97 = (char *)v170;
      if (v171 >= v172)
      {
        v128 = v171 + 1;
        if (v170 <= &v159 && (char *)v170 + 24 * v171 > (char *)&v159)
        {
          v148 = (char *)&v159 - (_BYTE *)v170;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v128, 24);
          v97 = (char *)v170;
          v96 = (const void ***)((char *)v170 + v148);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v128, 24);
          v96 = &v159;
          v97 = (char *)v170;
        }
      }
      v98 = &v97[24 * v171];
      v99 = *(_OWORD *)v96;
      *((_QWORD *)v98 + 2) = v96[2];
      *(_OWORD *)v98 = v99;
      v100 = ++v171;
      if (v167)
      {
        LODWORD(v159) = 3;
        v160 = ") to be equal to the number of output tensors (";
        v161 = 47;
        v101 = &v159;
        v102 = (char *)v170;
        if (v100 >= v172)
        {
          v129 = v100 + 1;
          v130 = (char *)v170 + 24 * v100 > (char *)&v159;
          if (v170 <= &v159 && v130)
          {
            v149 = (char *)&v159 - (_BYTE *)v170;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v129, 24);
            v102 = (char *)v170;
            v101 = (const void ***)((char *)v170 + v149);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v129, 24);
            v101 = &v159;
            v102 = (char *)v170;
          }
        }
        v103 = &v102[24 * v171];
        v104 = *(_OWORD *)v101;
        *((_QWORD *)v103 + 2) = v101[2];
        *(_OWORD *)v103 = v104;
        v105 = ++v171;
        if (v167)
        {
          LODWORD(v159) = 5;
          v160 = (const char *)v183;
          v106 = &v159;
          v107 = (char *)v170;
          if (v105 >= v172)
          {
            v132 = v105 + 1;
            v133 = (char *)v170 + 24 * v105 > (char *)&v159;
            if (v170 <= &v159 && v133)
            {
              v151 = (char *)&v159 - (_BYTE *)v170;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v132, 24);
              v107 = (char *)v170;
              v106 = (const void ***)((char *)v170 + v151);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v132, 24);
              v106 = &v159;
              v107 = (char *)v170;
            }
          }
          v108 = &v107[24 * v171];
          v109 = *(_OWORD *)v106;
          *((_QWORD *)v108 + 2) = v106[2];
          *(_OWORD *)v108 = v109;
          v110 = ++v171;
          if (v167)
          {
            LODWORD(v159) = 3;
            v160 = ")";
            v161 = 1;
            v111 = &v159;
            v112 = (char *)v170;
            if (v110 >= v172)
            {
              v136 = v110 + 1;
              v137 = (char *)v170 + 24 * v110 > (char *)&v159;
              if (v170 <= &v159 && v137)
              {
                v153 = (char *)&v159 - (_BYTE *)v170;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v136, 24);
                v112 = (char *)v170;
                v111 = (const void ***)((char *)v170 + v153);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v136, 24);
                v111 = &v159;
                v112 = (char *)v170;
              }
            }
            v113 = &v112[24 * v171];
            v114 = *(_OWORD *)v111;
            *((_QWORD *)v113 + 2) = v111[2];
            *(_OWORD *)v113 = v114;
            ++v171;
          }
        }
      }
    }
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v167);
    if (v167)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v167);
    if (!v178)
      goto LABEL_136;
    v115 = (_QWORD **)__p;
    if (__p)
    {
      v116 = v177;
      v117 = __p;
      if (v177 != __p)
      {
        do
          v116 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v116 - 1);
        while (v116 != v115);
        v117 = __p;
      }
      v177 = v115;
      operator delete(v117);
    }
    v118 = v174;
    if (v174)
    {
      v119 = v175;
      v120 = v174;
      if (v175 != v174)
      {
        do
        {
          v122 = (void *)*--v119;
          v121 = v122;
          *v119 = 0;
          if (v122)
            operator delete[](v121);
        }
        while (v119 != v118);
        v120 = v174;
      }
      v175 = v118;
      operator delete(v120);
    }
    v123 = v170;
    if (v170 == v173)
      goto LABEL_136;
LABEL_135:
    free(v123);
    goto LABEL_136;
  }
  if (!(_DWORD)v183)
  {
    v2 = 1;
    goto LABEL_136;
  }
  v38 = v182;
  v39 = 8 * v17;
  while (1)
  {
    v40 = *v38;
    (*InterfaceFor)((const void ***)&v167, InterfaceFor, this);
    v41 = (void *)mlir::MutableOperandRange::operator mlir::OperandRange((unsigned int *)&v167);
    v43 = v42;
    if (v169 != &v171)
      free(v169);
    v167 = v41;
    v168 = v43;
    v44 = mlir::OpOperand::getOperandNumber(v40);
    v45 = v44 - mlir::OperandRange::getBeginOperandIndex((mlir::OperandRange *)&v167);
    v46 = v45 <= 5 ? (mlir::detail *)((char *)this - 16 * v45 - 16) : (mlir::detail *)((char *)this - 24 * v45 + 24);
    if ((*((_QWORD *)v46 + 1) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)(v40 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      break;
    ++v38;
    v39 -= 8;
    if (!v39)
    {
      v2 = 1;
      goto LABEL_136;
    }
  }
  v179[0] = (const void **)"expected type of operand #";
  v181[0] = 259;
  mlir::Operation::emitOpError((uint64_t *)this, v179, (uint64_t)&v167);
  v53 = mlir::OpOperand::getOperandNumber(v40);
  if (v167)
  {
    LODWORD(v159) = 5;
    v160 = (const char *)v53;
    v54 = &v159;
    v55 = (char *)v170;
    if (v171 >= v172)
    {
      v131 = v171 + 1;
      if (v170 <= &v159 && (char *)v170 + 24 * v171 > (char *)&v159)
      {
        v150 = (char *)&v159 - (_BYTE *)v170;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v131, 24);
        v55 = (char *)v170;
        v54 = (const void ***)((char *)v170 + v150);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v131, 24);
        v54 = &v159;
        v55 = (char *)v170;
      }
    }
    v56 = &v55[24 * v171];
    v57 = *(_OWORD *)v54;
    *((_QWORD *)v56 + 2) = v54[2];
    *(_OWORD *)v56 = v57;
    v58 = ++v171;
    if (v167)
    {
      LODWORD(v159) = 3;
      v160 = " (";
      v161 = 2;
      v59 = &v159;
      v60 = (char *)v170;
      if (v58 >= v172)
      {
        v134 = v58 + 1;
        v135 = (char *)v170 + 24 * v58 > (char *)&v159;
        if (v170 <= &v159 && v135)
        {
          v152 = (char *)&v159 - (_BYTE *)v170;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v134, 24);
          v60 = (char *)v170;
          v59 = (const void ***)((char *)v170 + v152);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v134, 24);
          v59 = &v159;
          v60 = (char *)v170;
        }
      }
      v61 = &v60[24 * v171];
      v62 = *(_OWORD *)v59;
      *((_QWORD *)v61 + 2) = v59[2];
      *(_OWORD *)v61 = v62;
      ++v171;
      if (v167)
      {
        v63 = &v159;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v159, *(_QWORD *)(*(_QWORD *)(v40 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        v64 = (char *)v170;
        if (v171 >= v172)
        {
          v138 = v171 + 1;
          if (v170 <= &v159 && (char *)v170 + 24 * v171 > (char *)&v159)
          {
            v154 = (char *)&v159 - (_BYTE *)v170;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v138, 24);
            v64 = (char *)v170;
            v63 = (const void ***)((char *)v170 + v154);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v138, 24);
            v63 = &v159;
            v64 = (char *)v170;
          }
        }
        v65 = &v64[24 * v171];
        v66 = *(_OWORD *)v63;
        *((_QWORD *)v65 + 2) = v63[2];
        *(_OWORD *)v65 = v66;
        v67 = ++v171;
        if (v167)
        {
          LODWORD(v159) = 3;
          v160 = ")";
          v161 = 1;
          v68 = &v159;
          v69 = (char *)v170;
          if (v67 >= v172)
          {
            v139 = v67 + 1;
            v140 = (char *)v170 + 24 * v67 > (char *)&v159;
            if (v170 <= &v159 && v140)
            {
              v155 = (char *)&v159 - (_BYTE *)v170;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v139, 24);
              v69 = (char *)v170;
              v68 = (const void ***)((char *)v170 + v155);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v139, 24);
              v68 = &v159;
              v69 = (char *)v170;
            }
          }
          v70 = &v69[24 * v171];
          v71 = *(_OWORD *)v68;
          *((_QWORD *)v70 + 2) = v68[2];
          *(_OWORD *)v70 = v71;
          v72 = ++v171;
          if (v167)
          {
            LODWORD(v159) = 3;
            v160 = " to match type of corresponding result (";
            v161 = 40;
            v73 = &v159;
            v74 = (char *)v170;
            if (v72 >= v172)
            {
              v141 = v72 + 1;
              v142 = (char *)v170 + 24 * v72 > (char *)&v159;
              if (v170 <= &v159 && v142)
              {
                v156 = (char *)&v159 - (_BYTE *)v170;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v141, 24);
                v74 = (char *)v170;
                v73 = (const void ***)((char *)v170 + v156);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v141, 24);
                v73 = &v159;
                v74 = (char *)v170;
              }
            }
            v75 = &v74[24 * v171];
            v76 = *(_OWORD *)v73;
            *((_QWORD *)v75 + 2) = v73[2];
            *(_OWORD *)v75 = v76;
            ++v171;
            if (v167)
            {
              v77 = &v159;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v159, *((_QWORD *)v46 + 1) & 0xFFFFFFFFFFFFFFF8);
              v78 = (char *)v170;
              if (v171 >= v172)
              {
                v143 = v171 + 1;
                if (v170 <= &v159 && (char *)v170 + 24 * v171 > (char *)&v159)
                {
                  v157 = (char *)&v159 - (_BYTE *)v170;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v143, 24);
                  v78 = (char *)v170;
                  v77 = (const void ***)((char *)v170 + v157);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v143, 24);
                  v77 = &v159;
                  v78 = (char *)v170;
                }
              }
              v79 = &v78[24 * v171];
              v80 = *(_OWORD *)v77;
              *((_QWORD *)v79 + 2) = v77[2];
              *(_OWORD *)v79 = v80;
              v81 = ++v171;
              if (v167)
              {
                LODWORD(v159) = 3;
                v160 = ")";
                v161 = 1;
                v82 = &v159;
                v83 = (char *)v170;
                if (v81 >= v172)
                {
                  v144 = v81 + 1;
                  v145 = (char *)v170 + 24 * v81 > (char *)&v159;
                  if (v170 <= &v159 && v145)
                  {
                    v158 = (char *)&v159 - (_BYTE *)v170;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v144, 24);
                    v83 = (char *)v170;
                    v82 = (const void ***)((char *)v170 + v158);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v144, 24);
                    v82 = &v159;
                    v83 = (char *)v170;
                  }
                }
                v84 = &v83[24 * v171];
                v85 = *(_OWORD *)v82;
                *((_QWORD *)v84 + 2) = v82[2];
                *(_OWORD *)v84 = v85;
                ++v171;
              }
            }
          }
        }
      }
    }
  }
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v167);
  if (v167)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v167);
  if (v178)
  {
    v86 = (_QWORD **)__p;
    if (__p)
    {
      v87 = v177;
      v88 = __p;
      if (v177 != __p)
      {
        do
          v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
        while (v87 != v86);
        v88 = __p;
      }
      v177 = v86;
      operator delete(v88);
    }
    v89 = v174;
    if (v174)
    {
      v90 = v175;
      v91 = v174;
      if (v175 != v174)
      {
        do
        {
          v93 = (void *)*--v90;
          v92 = v93;
          *v90 = 0;
          if (v93)
            operator delete[](v92);
        }
        while (v90 != v89);
        v91 = v174;
      }
      v175 = v89;
      operator delete(v91);
    }
    v123 = v170;
    if (v170 != v173)
      goto LABEL_135;
  }
LABEL_136:
  if (v182 != v184)
    free(v182);
  return v2;
}

void mlir::intrange::truncRange(mlir::intrange *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  char *v12;
  char *v13;
  void *v14;
  void **v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  char *v32;
  char *v33;
  unsigned int v34;
  llvm::APInt *v35;
  unsigned int v36;
  llvm::APInt *v37;
  unsigned int v38;
  llvm::APInt *v39;
  unsigned int v40;
  void **v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  void *v46;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  void *v50;
  unsigned int v51;
  void *v52;
  unsigned int v53;
  void *__p;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;

  v3 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  v7 = *(_DWORD *)(v6 + 8);
  v57 = v7;
  if (v7 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v56, (const void **)v6);
    v7 = v57;
    if (v57 > 0x40)
    {
      llvm::APInt::lshrSlowCase((void **)&v56, v3);
      goto LABEL_8;
    }
  }
  else
  {
    v56 = *(_QWORD *)v6;
  }
  if (v7 == v3)
    v56 = 0;
  else
    v56 >>= v3;
LABEL_8:
  v8 = mlir::ConstantIntRanges::umax(this);
  v9 = *(_DWORD *)(v8 + 8);
  v55 = v9;
  if (v9 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v8);
    v9 = v55;
    if (v55 > 0x40)
    {
      llvm::APInt::lshrSlowCase(&__p, v3);
      v10 = v57;
      if (v57 > 0x40)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    __p = *(void **)v8;
  }
  if (v9 == v3)
  {
    __p = 0;
    v10 = v57;
    if (v57 > 0x40)
    {
LABEL_18:
      v11 = llvm::APInt::equalSlowCase((const void **)&v56, (const void **)&__p);
      if (v55 < 0x41)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    __p = (void *)((unint64_t)__p >> v3);
    v10 = v57;
    if (v57 > 0x40)
      goto LABEL_18;
  }
LABEL_15:
  v11 = v56 == (_QWORD)__p;
  if (v55 < 0x41)
    goto LABEL_21;
LABEL_19:
  if (__p)
  {
    operator delete[](__p);
    v10 = v57;
  }
LABEL_21:
  if (v10 >= 0x41 && v56)
    operator delete[]((void *)v56);
  if (v11)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
    llvm::APInt::trunc(v12, v3, (uint64_t)&v56);
    v13 = (char *)mlir::ConstantIntRanges::umax(this);
    llvm::APInt::trunc(v13, v3, (uint64_t)&__p);
  }
  else
  {
    v57 = v3;
    if (v3 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v56, 0, 0);
      v55 = v3;
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, -1, 1);
    }
    else
    {
      v56 = 0;
      v55 = v3;
      v14 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v3);
      if (!v3)
        v14 = 0;
      __p = v14;
    }
  }
  v15 = (void **)mlir::ConstantIntRanges::smin(this);
  v16 = v3 - 1;
  v17 = *((_DWORD *)v15 + 2);
  v53 = v17;
  if (v17 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v52, (const void **)v15);
    v17 = v53;
    if (v53 > 0x40)
    {
      llvm::APInt::ashrSlowCase((unsigned int *)&v52, v3 - 1);
      goto LABEL_42;
    }
    v15 = &v52;
  }
  if (v17 == v16)
    v18 = 63;
  else
    v18 = v3 - 1;
  v19 = (uint64_t)((_QWORD)*v15 << -(char)v17) >> -(char)v17 >> v18;
  if (v17)
    v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
  else
    v20 = 0;
  v52 = (void *)(v20 & v19);
LABEL_42:
  v21 = (void **)mlir::ConstantIntRanges::smax(this);
  v22 = *((_DWORD *)v21 + 2);
  v51 = v22;
  if (v22 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v50, (const void **)v21);
    v22 = v51;
    if (v51 > 0x40)
    {
      llvm::APInt::ashrSlowCase((unsigned int *)&v50, v3 - 1);
      v26 = v53;
      if (v53 <= 0x40)
        goto LABEL_52;
LABEL_58:
      if (llvm::APInt::equalSlowCase((const void **)&v52, (const void **)&v50))
        goto LABEL_80;
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v52) != v26)
        goto LABEL_70;
      goto LABEL_60;
    }
    v21 = &v50;
  }
  if (v22 == v16)
    v23 = 63;
  else
    v23 = v3 - 1;
  v24 = (uint64_t)((_QWORD)*v21 << -(char)v22) >> -(char)v22 >> v23;
  if (v22)
    v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
  else
    v25 = 0;
  v50 = (void *)(v25 & v24);
  v26 = v53;
  if (v53 > 0x40)
    goto LABEL_58;
LABEL_52:
  if (v52 == v50)
    goto LABEL_80;
  if (v26 && v52 != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v26))
  {
    if (v52)
      goto LABEL_73;
    goto LABEL_71;
  }
LABEL_60:
  v27 = v51;
  if (!v51)
    goto LABEL_80;
  if (v51 > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v50) == v27
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v50) == v27)
    {
      goto LABEL_80;
    }
  }
  else if (v50 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v51) || !v50)
  {
    goto LABEL_80;
  }
  if (v26 <= 0x40)
  {
    if (v52)
      goto LABEL_73;
    goto LABEL_71;
  }
LABEL_70:
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v52) != v26)
    goto LABEL_73;
LABEL_71:
  v28 = v51;
  if (v51 <= 0x40)
  {
    if (v50)
      goto LABEL_73;
LABEL_80:
    v32 = (char *)mlir::ConstantIntRanges::smin(this);
    llvm::APInt::trunc(v32, v3, (uint64_t)&v48);
    v33 = (char *)mlir::ConstantIntRanges::smax(this);
    llvm::APInt::trunc(v33, v3, (uint64_t)&v46);
    v34 = v57;
    a3[2] = v57;
    if (v34 > 0x40)
      goto LABEL_92;
LABEL_81:
    *(_QWORD *)a3 = v56;
    v35 = (llvm::APInt *)(a3 + 4);
    v36 = v55;
    a3[6] = v55;
    if (v36 <= 0x40)
      goto LABEL_93;
LABEL_82:
    llvm::APInt::initSlowCase(v35, (const void **)&__p);
    v37 = (llvm::APInt *)(a3 + 8);
    v38 = v49;
    a3[10] = v49;
    if (v38 <= 0x40)
      goto LABEL_94;
    goto LABEL_83;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v50) == v28)
    goto LABEL_80;
LABEL_73:
  v49 = v3;
  if (v3 < 0x41)
  {
    v29 = 1 << v16;
    v48 = (void *)(1 << v16);
    v47 = v3;
    v30 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v3);
    if (!v3)
      v30 = 0;
    v46 = v30;
    goto LABEL_89;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v48, 0, 0);
  v29 = 1 << v16;
  v31 = v16 >> 6;
  if (v49 >= 0x41)
    *((_QWORD *)v48 + v31) |= v29;
  else
    v48 = (void *)((unint64_t)v48 | v29);
  v47 = v3;
  llvm::APInt::initSlowCase((llvm::APInt *)&v46, -1, 1);
  if (v47 <= 0x40)
  {
LABEL_89:
    v41 = &v46;
    goto LABEL_91;
  }
  v41 = (void **)((char *)v46 + 8 * v31);
LABEL_91:
  *v41 = (void *)((unint64_t)*v41 & ~v29);
  v42 = v57;
  a3[2] = v57;
  if (v42 <= 0x40)
    goto LABEL_81;
LABEL_92:
  llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)&v56);
  v35 = (llvm::APInt *)(a3 + 4);
  v43 = v55;
  a3[6] = v55;
  if (v43 > 0x40)
    goto LABEL_82;
LABEL_93:
  *(_QWORD *)v35 = __p;
  v37 = (llvm::APInt *)(a3 + 8);
  v44 = v49;
  a3[10] = v49;
  if (v44 <= 0x40)
  {
LABEL_94:
    *(_QWORD *)v37 = v48;
    v39 = (llvm::APInt *)(a3 + 12);
    v45 = v47;
    a3[14] = v47;
    if (v45 <= 0x40)
      goto LABEL_95;
    goto LABEL_84;
  }
LABEL_83:
  llvm::APInt::initSlowCase(v37, (const void **)&v48);
  v39 = (llvm::APInt *)(a3 + 12);
  v40 = v47;
  a3[14] = v47;
  if (v40 <= 0x40)
  {
LABEL_95:
    *(_QWORD *)v39 = v46;
    goto LABEL_96;
  }
LABEL_84:
  llvm::APInt::initSlowCase(v39, (const void **)&v46);
  if (v47 >= 0x41 && v46)
    operator delete[](v46);
LABEL_96:
  if (v49 >= 0x41 && v48)
    operator delete[](v48);
  if (v51 >= 0x41 && v50)
    operator delete[](v50);
  if (v53 >= 0x41 && v52)
    operator delete[](v52);
  if (v55 >= 0x41 && __p)
    operator delete[](__p);
  if (v57 >= 0x41)
  {
    if (v56)
      operator delete[]((void *)v56);
  }
}

