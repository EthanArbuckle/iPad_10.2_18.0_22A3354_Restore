uint64_t mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel(uint64_t result, int a2, double a3)
{
  *(_DWORD *)(result + 16) = a2;
  *(double *)(result + 24) = a3;
  *(_QWORD *)result = mlir::mps::CPUNDArrayArithmeticUnaryKernel::arithmeticUnaryTileKernel;
  *(_QWORD *)(result + 8) = 4;
  return result;
}

void *mlir::mps::recurseTransposeImpl(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, size_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unsigned int v25;

  v25 = result;
  v16 = *(unsigned int *)(a4 + 8 * a11);
  if (*(_DWORD *)(a4 + 8 * a11))
  {
    v17 = *(_QWORD *)(a9 + 8 * *(_QWORD *)(a6 + 8 * a11));
    v18 = a12;
    v19 = a16 * a12;
    do
    {
      if ((int)(v25 - 1) <= a11)
      {
        result = memcpy(*a15, (const void *)(*(_QWORD *)(a13 + 40) + v19), a16);
        *a15 = (char *)*a15 + a16;
      }
      else
      {
        result = (void *)mlir::mps::recurseTransposeImpl(v25, a2, a3, a4, a5, a6, a7);
      }
      v19 += v17 * a16;
      v18 += v17;
      --v16;
    }
    while (v16);
  }
  return result;
}

void mlir::mps::transpose(mlir::AffineBinaryOpExpr *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int8x16_t *v15;
  int64x2_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *RHS;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  size_t ElementDataSize;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void *__p[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[4];

  v4 = *((_QWORD *)this + 2);
  if (!v4)
    return;
  v9 = *((_QWORD *)this + 3);
  v10 = *((_QWORD *)this + 4);
  v11 = *(_QWORD *)(a2 + 32);
  v56 = *(_QWORD *)(a2 + 24);
  if (*((unsigned __int8 *)this + 49) | *(unsigned __int8 *)(a2 + 49)
    || *(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS(this) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a2) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    goto LABEL_50;
  }
  v90 = 0u;
  memset(v91, 0, 48);
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v79 = 0u;
  v12 = *((_QWORD *)this + 2);
  if (v12 < 1)
    goto LABEL_13;
  if ((unint64_t)v12 < 4)
  {
    v13 = 0;
LABEL_11:
    v20 = v12 - v13;
    v21 = (_QWORD *)&v91[-1] + v13;
    do
      *v21++ = v12 + ~*(_QWORD *)(a3 - 8 + 8 * v20--);
    while (v20);
    goto LABEL_13;
  }
  v14 = vdupq_n_s64(v12);
  v13 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  v15 = (int8x16_t *)(a3 + 8 * v12 - 16);
  v16 = (int64x2_t *)v91;
  v17 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v18 = vmvnq_s8(*v15);
    v19 = vmvnq_s8(v15[-1]);
    v16[-1] = vaddq_s64(v14, (int64x2_t)vextq_s8(v18, v18, 8uLL));
    *v16 = vaddq_s64(v14, (int64x2_t)vextq_s8(v19, v19, 8uLL));
    v15 -= 2;
    v16 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v12 != v13)
    goto LABEL_11;
LABEL_13:
  v55 = v10;
  RHS = (_QWORD *)mlir::AffineBinaryOpExpr::getRHS(this);
  v24 = *((_QWORD *)this + 3);
  v23 = *((_QWORD *)this + 4);
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  if (v23 <= 8)
  {
    v25 = RHS;
    DWORD1(v57) = ((unsigned __int16)v23 << 16) | 0x8000;
    LODWORD(v66) = mlir::mps::getBNNSDataType(RHS);
    mlir::mps::getDataSize(v25);
    if (v23)
    {
      v26 = v24 + 8 * v23;
      *((_QWORD *)&v57 + 1) = *(_QWORD *)(v26 - 8);
      v27 = v23 - 1;
      if (v23 != 1)
      {
        *(_QWORD *)&v58 = *(_QWORD *)(v26 - 16);
        if (v23 != 2)
        {
          v28 = v24 + 8 * v23;
          *((_QWORD *)&v58 + 1) = *(_QWORD *)(v28 - 24);
          if (v23 != 3)
          {
            *(_QWORD *)&v59 = *(_QWORD *)(v28 - 32);
            if (v23 != 4)
            {
              v29 = v24 + 8 * v23;
              *((_QWORD *)&v59 + 1) = *(_QWORD *)(v29 - 40);
              if (v23 != 5)
              {
                *(_QWORD *)&v60 = *(_QWORD *)(v29 - 48);
                if (v23 != 6)
                {
                  v30 = v24 + 8 * v23;
                  *((_QWORD *)&v60 + 1) = *(_QWORD *)(v30 - 56);
                  if (v23 != 7)
                    *(_QWORD *)&v61 = *(_QWORD *)(v30 - 64);
                }
              }
            }
          }
        }
      }
      *((_QWORD *)&v61 + 1) = 1;
      if (v23 >= 2)
      {
        v31 = (uint64_t *)&v62;
        v32 = 1;
        do
        {
          v32 *= *(v31 - 9);
          *v31++ = v32;
          --v27;
        }
        while (v27);
      }
    }
    else
    {
      *((_QWORD *)&v61 + 1) = 1;
    }
    *((_QWORD *)&v65 + 1) = 0;
    *(_QWORD *)((char *)&v67 + 4) = 1065353216;
    if (*((_QWORD *)this + 4) <= 3uLL)
      DWORD1(v57) = (_DWORD)v23 << 16;
  }
  v54 = v11;
  v76 = v65;
  v77 = v66;
  v78 = v67;
  v72 = v61;
  v73 = v62;
  v74 = v63;
  v75 = v64;
  *(_OWORD *)__p = v57;
  v69 = v58;
  v70 = v59;
  v71 = v60;
  v33 = (_QWORD *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a2);
  v35 = *(_QWORD *)(a2 + 24);
  v34 = *(_QWORD *)(a2 + 32);
  v36 = 0uLL;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  if (v34 <= 8)
  {
    v37 = v33;
    DWORD1(v57) = ((unsigned __int16)v34 << 16) | 0x8000;
    LODWORD(v66) = mlir::mps::getBNNSDataType(v33);
    mlir::mps::getDataSize(v37);
    if (v34)
    {
      v38 = v35 + 8 * v34;
      *((_QWORD *)&v57 + 1) = *(_QWORD *)(v38 - 8);
      v39 = v34 - 1;
      if (v34 != 1)
      {
        *(_QWORD *)&v58 = *(_QWORD *)(v38 - 16);
        if (v34 != 2)
        {
          v40 = v35 + 8 * v34;
          *((_QWORD *)&v58 + 1) = *(_QWORD *)(v40 - 24);
          if (v34 != 3)
          {
            *(_QWORD *)&v59 = *(_QWORD *)(v40 - 32);
            if (v34 != 4)
            {
              v41 = v35 + 8 * v34;
              *((_QWORD *)&v59 + 1) = *(_QWORD *)(v41 - 40);
              if (v34 != 5)
              {
                *(_QWORD *)&v60 = *(_QWORD *)(v41 - 48);
                if (v34 != 6)
                {
                  v42 = v35 + 8 * v34;
                  *((_QWORD *)&v60 + 1) = *(_QWORD *)(v42 - 56);
                  if (v34 != 7)
                    *(_QWORD *)&v61 = *(_QWORD *)(v42 - 64);
                }
              }
            }
          }
        }
      }
      *((_QWORD *)&v61 + 1) = 1;
      v36 = 0uLL;
      if (v34 >= 2)
      {
        v43 = (uint64_t *)&v62;
        v44 = 1;
        do
        {
          v44 *= *(v43 - 9);
          *v43++ = v44;
          --v39;
        }
        while (v39);
      }
    }
    else
    {
      *((_QWORD *)&v61 + 1) = 1;
      v36 = 0uLL;
    }
    *((_QWORD *)&v65 + 1) = 0;
    *(_QWORD *)((char *)&v67 + 4) = 1065353216;
    if (*(_QWORD *)(a2 + 32) <= 3uLL)
      DWORD1(v57) = (_DWORD)v34 << 16;
  }
  v87 = v65;
  v88 = v66;
  v89 = v67;
  v83 = v61;
  v84 = v62;
  v85 = v63;
  v86 = v64;
  v79 = v57;
  v80 = v58;
  v81 = v59;
  v82 = v60;
  v57 = v36;
  v58 = v36;
  LODWORD(v57) = 1;
  v45 = (void *)MEMORY[0x186DA084C](__p, &v57);
  if (!v45
    || (v46 = v45,
        v47 = BNNSFilterApply(v45, *((const void **)this + 5), *(void **)(a2 + 40)),
        BNNSFilterDestroy(v46),
        v47))
  {
    v11 = v54;
    v10 = v55;
LABEL_50:
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v69 = 0;
    std::vector<long long>::__append((uint64_t)__p, v4);
    v48 = __p[0];
    if (v4 >= 1)
    {
      v49 = 1;
      v50 = v4;
      do
      {
        v48[v50 - 1] = v49;
        v49 *= *(_QWORD *)(v9 - 8 + 8 * v50--);
      }
      while (v50);
    }
    *(_QWORD *)&v57 = *(_QWORD *)(a2 + 40);
    v51 = ((char *)__p[1] - (char *)v48) >> 3;
    ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize(this);
    mlir::mps::recurseTransposeImpl((void *)v4, v9, v10, v56, v11, a3, a4, v53, (uint64_t)v48, v51, 0, 0, (uint64_t)this, a2, (void **)&v57, ElementDataSize);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

BOOL mlir::mps::doBNNSConv2D(const void **this, uint64_t **a2, void **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15)
{
  BOOL v23;
  _BOOL8 result;
  int BNNSDataType;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t *v40;
  void *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t batch_size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[4];
  int64x2_t v54;
  int64x2_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int64x2_t v71;
  int64x2_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64x2_t v86;
  int64x2_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _DWORD v126[10];

  if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)this) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a2) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    return 0;
  }
  v23 = *(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a3) + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
     && *((_BYTE *)this + 49) == 0;
  if (!v23 || *((_BYTE *)a2 + 49) != 0)
    return 0;
  BNNSDataType = mlir::mps::getBNNSDataType(*this);
  v27 = mlir::mps::getBNNSDataType(*a2);
  v28 = mlir::mps::getBNNSDataType(*a3);
  result = 0;
  if (BNNSDataType == v27 && BNNSDataType == v28)
  {
    if (this[2])
    {
      v29 = (uint64_t *)this[3];
      v51 = v29[3];
      v52 = v29[2];
      v30 = *v29;
      v50 = *((_QWORD *)this[3] + 1);
    }
    else
    {
      v52 = 1;
      v50 = 1;
      v51 = 1;
      v30 = 1;
    }
    batch_size = v30;
    if (a3[2])
    {
      v31 = a3[3];
      v32 = v31[3];
      v34 = v31[1];
      v33 = v31[2];
      v46 = v34;
      v47 = v32;
    }
    else
    {
      v47 = 1;
      v46 = 1;
      v33 = 1;
    }
    v49 = v33;
    if (a2[2])
    {
      v35 = a2[3];
      v45 = *v35;
      v44 = v35[3];
      v36 = v35[1];
      v37 = v35[2];
    }
    else
    {
      v44 = 1;
      v45 = 1;
      v36 = 1;
      v37 = 1;
    }
    v43 = v37;
    v38 = v36 * a4;
    memset(v126, 0, 32);
    v126[0] = 1;
    bzero(&v62, 0x230uLL);
    v39 = mlir::mps::getBNNSDataType(*this);
    v53[0] = 0x3000000000000;
    v53[1] = v51;
    v53[2] = v52;
    v53[3] = v50;
    v54 = vdupq_n_s64(1uLL);
    v55 = v54;
    v56 = 1;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0;
    v62 = v39;
    v63 = 0;
    v64 = 65568;
    v65 = 1065353216;
    v40 = a2[5];
    v66 = 0x4000000000000;
    v67 = v44;
    v68 = v43;
    v69 = v38 / a4;
    v70 = v45;
    v71 = v54;
    v72 = v54;
    v76 = 0u;
    v75 = 0u;
    v74 = 0u;
    v73 = 0u;
    v77 = v40;
    v78 = BNNSDataType;
    v79 = 0;
    v80 = BNNSDataType;
    v81 = 1065353216;
    v82 = 0x3000000000000;
    v83 = v47;
    v84 = v49;
    v85 = v46;
    v86 = v54;
    v87 = v54;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v88 = 1;
    v93 = 0;
    v94 = BNNSDataType;
    v95 = 0;
    v96 = BNNSDataType;
    v97 = 1065353216;
    v98 = 0x1000000000000;
    v99 = v45;
    v100 = v54;
    v101 = v54;
    v102 = v54;
    v103 = 1;
    v107 = 0u;
    v106 = 0u;
    v105 = 0u;
    v104 = 0u;
    v108 = 0;
    v109 = BNNSDataType;
    v110 = 0;
    v111 = BNNSDataType;
    v112 = 1065353216;
    v114 = 0u;
    v115 = 0u;
    v113 = 0u;
    v116 = a7;
    v117 = a8;
    v118 = a5;
    v119 = a6;
    v120 = 0u;
    v121 = a4;
    v122 = a11;
    v123 = a12;
    v124 = a13;
    v125 = a14;
    v41 = (void *)MEMORY[0x186DA0840](v53, v126);
    v42 = BNNSFilterApplyBatch(v41, batch_size, this[5], v50 * v52 * v51, a3[5], v46 * v47 * v49);
    BNNSFilterDestroy(v41);
    return v42 == 0;
  }
  return result;
}

void mlir::mps::recurseNonZeroImpl(mlir::mps::CPUNDArray *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  size_t ElementDataSize;
  uint64_t v33;
  int *v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t __dst;

  v8 = 0;
  v9 = a2 + 1;
  v10 = (void *)(a4 + 16);
  while (1)
  {
    v11 = *((_QWORD *)a1 + 2);
    v12 = 1;
    v13 = (v11 & (a2 >> 63)) + a2;
    if (v13 >= 0 && v11)
      v12 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v13);
    if (v8 >= v12)
      break;
    v14 = *(int **)a3;
    *(_QWORD *)(*(_QWORD *)a3 + 8 * a2) = v8;
    if (*((_QWORD *)a1 + 2) - 1 == a2)
    {
      __dst = 0;
      v15 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = 0;
        v18 = *((_QWORD *)a1 + 7);
        if ((_DWORD)v15 == 1)
          goto LABEL_14;
        v19 = 0;
        v20 = 0;
        v16 = v15 & 0xFFFFFFFE;
        v21 = v14 + 2;
        v22 = (_QWORD *)(v18 + 8);
        v23 = v16;
        do
        {
          v19 += *(v22 - 1) * *(v21 - 1);
          v20 += *v22 * *v21;
          v21 += 2;
          v22 += 2;
          v23 -= 2;
        }
        while (v23);
        v17 = v20 + v19;
        if (v16 != v15)
        {
LABEL_14:
          v24 = v15 - v16;
          v25 = 2 * v16;
          v26 = (uint64_t *)(v18 + v25 * 4);
          v27 = (uint64_t *)&v14[v25];
          do
          {
            v29 = *v27++;
            v28 = v29;
            v30 = *v26++;
            v17 += v30 * v28;
            --v24;
          }
          while (v24);
        }
      }
      else
      {
        v17 = *(unsigned int *)(a3 + 8);
      }
      v31 = (const void *)(*((_QWORD *)a1 + 5) + v17);
      ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize(a1);
      memcpy(&__dst, v31, ElementDataSize);
      if (__dst)
      {
        v33 = *(unsigned int *)(a3 + 8);
        if ((_DWORD)v33)
        {
          v34 = *(int **)a3;
          v35 = *(_DWORD *)(a4 + 8);
          v36 = 8 * v33;
          do
          {
            v37 = *v34;
            if (v35 >= *(_DWORD *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v10, v35 + 1, 4);
              v35 = *(_DWORD *)(a4 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v35) = v37;
            v35 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v35;
            v34 += 2;
            v36 -= 8;
          }
          while (v36);
        }
      }
    }
    else
    {
      mlir::mps::recurseNonZeroImpl(a1, v9, a3, a4);
    }
    ++v8;
  }
}

void mlir::mps::computeNonZeroIndices(mlir::mps *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5;
  _BYTE *v6;
  size_t v7;
  int v8;
  int v9;
  unsigned int v10;
  void *v11;
  int v12;
  int v13;
  _BYTE v14[32];
  void *__src;
  uint64_t v16;
  _QWORD v17[33];

  v17[32] = *MEMORY[0x1E0C80C00];
  if ((unint64_t)mlir::mps::CPUNDArray::getElementDataSize(this) >= 9)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 272) = 0;
    return;
  }
  __src = v17;
  v16 = 0x4000000000;
  v5 = *((_QWORD *)this + 2);
  v11 = v14;
  v13 = 4;
  if (v5 < 5)
  {
    if (!v5)
      goto LABEL_8;
    v7 = 8 * v5;
    v6 = v14;
  }
  else
  {
    v12 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v14, v5, 8);
    v6 = v11;
    v7 = 8 * v5;
  }
  bzero(v6, v7);
LABEL_8:
  v12 = v5;
  mlir::mps::recurseNonZeroImpl(this, 0, (uint64_t)&v11, (uint64_t)&__src);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x4000000000;
  v8 = v16;
  if ((_DWORD)v16 && &__src != (void **)a2)
  {
    if (__src == v17)
    {
      v10 = v16;
      if (v16 < 0x41
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 4),
            (v10 = v16) != 0))
      {
        memcpy(*(void **)a2, __src, 4 * v10);
      }
      *(_DWORD *)(a2 + 8) = v8;
    }
    else
    {
      *(_QWORD *)a2 = __src;
      v9 = HIDWORD(v16);
      *(_DWORD *)(a2 + 8) = v8;
      *(_DWORD *)(a2 + 12) = v9;
      __src = v17;
      HIDWORD(v16) = 0;
    }
    LODWORD(v16) = 0;
  }
  *(_BYTE *)(a2 + 272) = 1;
  if (v11 != v14)
    free(v11);
  if (__src != v17)
    free(__src);
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t *v41;
  float32x2_t *v42;
  float32x2_t *v43;
  uint64_t v44;
  float32x2_t *v45;
  float32x2_t *v46;
  float32x2_t *v47;
  uint64_t v48;
  float32x2_t *v49;
  float32x2_t *v50;
  float32x2_t *v51;
  uint64_t v52;
  float32x2_t *v53;
  float32x2_t *v54;
  float32x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v40 = 0;
    v41 = (float32x2_t *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float32x2_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float32x2_t *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  *v55 = vadd_f32(*v53, *v54);
                  v55 = (float32x2_t *)((char *)v55 + v39);
                  v54 = (float32x2_t *)((char *)v54 + v34);
                  v53 = (float32x2_t *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float32x2_t *)((char *)v51 + v38);
              v50 = (float32x2_t *)((char *)v50 + v31);
              v49 = (float32x2_t *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float32x2_t *)((char *)v47 + v37);
          v46 = (float32x2_t *)((char *)v46 + v32);
          v45 = (float32x2_t *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float32x2_t *)((char *)v43 + v36);
      v42 = (float32x2_t *)((char *)v42 + v56);
      v41 = (float32x2_t *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  *v55 = *v53 + *v54;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v56);
      v41 = (float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, float16x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int32 *v42;
  float32x2_t *v43;
  double *v44;
  uint64_t v45;
  __int32 *v46;
  float32x2_t *v47;
  double *v48;
  uint64_t v49;
  __int32 *v50;
  float32x2_t *v51;
  double *v52;
  uint64_t v53;
  __int32 *v54;
  float32x2_t *v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = **a1;
  v6 = (*a1)[1];
  v7 = **a2;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v8 - 1;
  if (v8 <= 0)
  {
    v12 = v8 - 2;
    v11 = 1;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    v12 = -1;
LABEL_5:
    v13 = v8 - 3;
    v14 = 1;
    v15 = 1;
LABEL_6:
    v16 = v8 - 4;
    v17 = 1;
    v18 = 1;
    v19 = 1;
LABEL_7:
    v20 = 1;
    goto LABEL_8;
  }
  v12 = v8 - 2;
  v14 = *(_QWORD *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    v12 = 0;
    v15 = 0;
    v13 = -1;
    goto LABEL_6;
  }
  v13 = v8 - 3;
  v18 = *(_QWORD *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    v15 = 0;
    v13 = 0;
    v19 = 0;
    v16 = -1;
    v12 = 1;
    v17 = 1;
    goto LABEL_7;
  }
  v17 = 0;
  v15 = 0;
  v19 = 0;
  v16 = v8 - 4;
  v20 = *(_QWORD *)(v10 + 8 * (v8 - 4));
LABEL_8:
  v59 = v20;
  if (*(_BYTE *)(v5 + 49))
  {
    v21 = 0;
    v58 = 0;
    result = 0;
    goto LABEL_37;
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_26;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v58 = 0;
LABEL_26:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_31;
  }
  if (v23 < 2)
  {
    v26 = 0;
    v21 = 0;
    v58 = 0;
    result = 0;
    v27 = 0;
    if (v23 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v28 = 0;
  result = 0;
  v58 = 0;
LABEL_31:
  if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
    v21 = 0;
  else
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
  v26 = v23 - 1;
LABEL_36:
  if (v26 > (int)v23 - 1)
  {
LABEL_37:
    v27 = 0;
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_38;
LABEL_47:
    v32 = 0;
    v57 = 0;
    v33 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
    if (*(_BYTE *)(v6 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v27 = 0;
LABEL_46:
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_47;
LABEL_38:
  v29 = *(_QWORD *)(v6 + 16);
  v30 = v29 - 4;
  if (v29 >= 4)
  {
    if (v30 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v30) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v30);
    v31 = v29 - 3;
    goto LABEL_56;
  }
  if (v29 == 3)
  {
    v31 = 0;
    v57 = 0;
LABEL_56:
    if (v31 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v31) == 1)
      v33 = 0;
    else
      v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v31);
    v36 = v29 - 2;
    goto LABEL_61;
  }
  if (v29 >= 2)
  {
    v36 = 0;
    v33 = 0;
    v57 = 0;
LABEL_61:
    if (v36 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v36) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v36);
    v34 = v29 - 1;
    goto LABEL_66;
  }
  v34 = 0;
  v32 = 0;
  v57 = 0;
  v33 = 0;
  v35 = 0;
  if (v29 != 1)
    goto LABEL_78;
LABEL_66:
  if (v34 <= (int)v29 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v34) != 1)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v34);
      if (!*(_BYTE *)(v7 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v35 = 0;
LABEL_78:
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_68;
LABEL_79:
    v39 = 0;
    v37 = 0;
    v38 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v35 = 0;
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v17 & 1) != 0 || v16 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v16) == 1)
  {
    v37 = 0;
    if ((v19 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16);
    if ((v19 & 1) != 0)
      goto LABEL_98;
  }
  if (v13 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    v38 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v38 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13);
  if ((v15 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v12 <= (int)v8 - 1 && *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v12) != 1)
  {
    v39 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v12);
    if (v8 >= 1)
      goto LABEL_102;
LABEL_80:
    v40 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v39 = 0;
  if (v8 < 1)
    goto LABEL_80;
LABEL_102:
  if (v9 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) == 1)
    goto LABEL_80;
  v40 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v59 >= 1)
  {
    v41 = 0;
    v42 = (__int32 *)(**(_QWORD **)a3 + *(_QWORD *)(v5 + 40));
    v43 = (float32x2_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v6 + 40));
    v44 = (double *)(**a4 + *(_QWORD *)(v7 + 40));
    do
    {
      if (v18 >= 1)
      {
        v45 = 0;
        v46 = v42;
        v47 = v43;
        v48 = v44;
        do
        {
          if (v14 >= 1)
          {
            v49 = 0;
            v50 = v46;
            v51 = v47;
            v52 = v48;
            do
            {
              v53 = v11;
              v54 = v50;
              v55 = v51;
              v56 = v52;
              if (v11 >= 1)
              {
                do
                {
                  a5.i32[0] = *v54;
                  a5 = (float16x4_t)vadd_f32(*v55, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a5));
                  *v56 = *(double *)&a5;
                  v56 = (double *)((char *)v56 + v40);
                  v55 = (float32x2_t *)((char *)v55 + v35);
                  v54 = (__int32 *)((char *)v54 + v27);
                  --v53;
                }
                while (v53);
              }
              ++v49;
              v52 = (double *)((char *)v52 + v39);
              v51 = (float32x2_t *)((char *)v51 + v32);
              v50 = (__int32 *)((char *)v50 + v21);
            }
            while (v49 != v14);
          }
          ++v45;
          v48 = (double *)((char *)v48 + v38);
          v47 = (float32x2_t *)((char *)v47 + v33);
          v46 = (__int32 *)((char *)v46 + result);
        }
        while (v45 != v18);
      }
      ++v41;
      v44 = (double *)((char *)v44 + v37);
      v43 = (float32x2_t *)((char *)v43 + v57);
      v42 = (__int32 *)((char *)v42 + v58);
    }
    while (v41 != v59);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  __int16 *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  __int16 *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  __int16 *v53;
  float *v54;
  float *v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v64 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v63 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v63 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v62 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v62 = 0;
    else
      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v62 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  *v55 = *v54 + _S0;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v62);
      v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, double a5, float16x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x2_t *v43;
  __int32 *v44;
  float32x2_t *v45;
  uint64_t v46;
  float32x2_t *v47;
  __int32 *v48;
  float32x2_t *v49;
  uint64_t v50;
  float32x2_t *v51;
  __int32 *v52;
  float32x2_t *v53;
  uint64_t v54;
  float32x2_t *v55;
  __int32 *v56;
  float32x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v6 = **a1;
  v7 = (*a1)[1];
  v8 = **a2;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v9 - 1;
  if (v9 <= 0)
  {
    v13 = v9 - 2;
    v12 = 1;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    v13 = -1;
LABEL_5:
    v14 = v9 - 3;
    v15 = 1;
    v16 = 1;
LABEL_6:
    v17 = v9 - 4;
    v18 = 1;
    v19 = 1;
    v20 = 1;
LABEL_7:
    v21 = 1;
    goto LABEL_8;
  }
  v13 = v9 - 2;
  v15 = *(_QWORD *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    v13 = 0;
    v16 = 0;
    v14 = -1;
    goto LABEL_6;
  }
  v14 = v9 - 3;
  v19 = *(_QWORD *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    v16 = 0;
    v14 = 0;
    v20 = 0;
    v17 = -1;
    v13 = 1;
    v18 = 1;
    goto LABEL_7;
  }
  v18 = 0;
  v16 = 0;
  v20 = 0;
  v17 = v9 - 4;
  v21 = *(_QWORD *)(v11 + 8 * (v9 - 4));
LABEL_8:
  v60 = v21;
  if (*(_BYTE *)(v6 + 49))
  {
    v22 = 0;
    v59 = 0;
    result = 0;
    goto LABEL_37;
  }
  v24 = *(_QWORD *)(v6 + 16);
  v25 = v24 - 4;
  if (v24 >= 4)
  {
    if (v25 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v25) == 1)
      v59 = 0;
    else
      v59 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v25);
    v26 = v24 - 3;
    goto LABEL_26;
  }
  if (v24 == 3)
  {
    v26 = 0;
    v59 = 0;
LABEL_26:
    if (v26 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v26) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v26);
    v29 = v24 - 2;
    goto LABEL_31;
  }
  if (v24 < 2)
  {
    v27 = 0;
    v22 = 0;
    v59 = 0;
    result = 0;
    v28 = 0;
    if (v24 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v29 = 0;
  result = 0;
  v59 = 0;
LABEL_31:
  if (v29 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v29) == 1)
    v22 = 0;
  else
    v22 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v29);
  v27 = v24 - 1;
LABEL_36:
  if (v27 > (int)v24 - 1)
  {
LABEL_37:
    v28 = 0;
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_38;
LABEL_47:
    v33 = 0;
    v58 = 0;
    v34 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v27) != 1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v27);
    if (*(_BYTE *)(v7 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v28 = 0;
LABEL_46:
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_47;
LABEL_38:
  v30 = *(_QWORD *)(v7 + 16);
  v31 = v30 - 4;
  if (v30 >= 4)
  {
    if (v31 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v31) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v31);
    v32 = v30 - 3;
    goto LABEL_56;
  }
  if (v30 == 3)
  {
    v32 = 0;
    v58 = 0;
LABEL_56:
    if (v32 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v32) == 1)
      v34 = 0;
    else
      v34 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v32);
    v37 = v30 - 2;
    goto LABEL_61;
  }
  if (v30 >= 2)
  {
    v37 = 0;
    v34 = 0;
    v58 = 0;
LABEL_61:
    if (v37 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v37) == 1)
      v33 = 0;
    else
      v33 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v37);
    v35 = v30 - 1;
    goto LABEL_66;
  }
  v35 = 0;
  v33 = 0;
  v58 = 0;
  v34 = 0;
  v36 = 0;
  if (v30 != 1)
    goto LABEL_78;
LABEL_66:
  if (v35 <= (int)v30 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v35) != 1)
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v35);
      if (!*(_BYTE *)(v8 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v36 = 0;
LABEL_78:
    if (!*(_BYTE *)(v8 + 49))
      goto LABEL_68;
LABEL_79:
    v40 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v36 = 0;
  if (*(_BYTE *)(v8 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v18 & 1) != 0 || v17 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v17) == 1)
  {
    v38 = 0;
    if ((v20 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17);
    if ((v20 & 1) != 0)
      goto LABEL_98;
  }
  if (v14 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v14) == 1)
  {
LABEL_98:
    v39 = 0;
    if ((v16 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v39 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14);
  if ((v16 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v13 <= (int)v9 - 1 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v13) != 1)
  {
    v40 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v13);
    if (v9 >= 1)
      goto LABEL_102;
LABEL_80:
    v41 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v40 = 0;
  if (v9 < 1)
    goto LABEL_80;
LABEL_102:
  if (v10 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v10) == 1)
    goto LABEL_80;
  v41 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v60 >= 1)
  {
    v42 = 0;
    v43 = (float32x2_t *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v44 = (__int32 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v7 + 40));
    v45 = (float32x2_t *)(**a4 + *(_QWORD *)(v8 + 40));
    do
    {
      if (v19 >= 1)
      {
        v46 = 0;
        v47 = v43;
        v48 = v44;
        v49 = v45;
        do
        {
          if (v15 >= 1)
          {
            v50 = 0;
            v51 = v47;
            v52 = v48;
            v53 = v49;
            do
            {
              v54 = v12;
              v55 = v51;
              v56 = v52;
              v57 = v53;
              if (v12 >= 1)
              {
                do
                {
                  a6.i32[0] = *v56;
                  a6 = (float16x4_t)vcvtq_f32_f16(a6).u64[0];
                  *v57 = vadd_f32(*v55, (float32x2_t)a6);
                  v57 = (float32x2_t *)((char *)v57 + v41);
                  v56 = (__int32 *)((char *)v56 + v36);
                  v55 = (float32x2_t *)((char *)v55 + v28);
                  --v54;
                }
                while (v54);
              }
              ++v50;
              v53 = (float32x2_t *)((char *)v53 + v40);
              v52 = (__int32 *)((char *)v52 + v33);
              v51 = (float32x2_t *)((char *)v51 + v22);
            }
            while (v50 != v15);
          }
          ++v46;
          v49 = (float32x2_t *)((char *)v49 + v39);
          v48 = (__int32 *)((char *)v48 + v34);
          v47 = (float32x2_t *)((char *)v47 + result);
        }
        while (v46 != v19);
      }
      ++v42;
      v45 = (float32x2_t *)((char *)v45 + v38);
      v44 = (__int32 *)((char *)v44 + v58);
      v43 = (float32x2_t *)((char *)v43 + v59);
    }
    while (v42 != v60);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  __int16 *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  __int16 *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  __int16 *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  __int16 *v54;
  float *v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v64 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v63 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v63 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v62 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v62 = 0;
    else
      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v62 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  *v55 = *v53 + _S1;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v62);
      v41 = (float *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  float *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v56 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v55 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v55 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v57 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v39 = 0;
    v40 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  *v54 = *v53 + COERCE_FLOAT(*v52 << 16);
                  v54 = (float *)((char *)v54 + v38);
                  v53 = (float *)((char *)v53 + v34);
                  v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (float *)((char *)v50 + v37);
              v49 = (float *)((char *)v49 + v31);
              v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (float *)((char *)v46 + v36);
          v45 = (float *)((char *)v45 + v32);
          v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (float *)((char *)v42 + v57);
      v41 = (float *)((char *)v41 + v55);
      v40 = (unsigned __int16 *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  unsigned __int16 *v41;
  float *v42;
  uint64_t v43;
  float *v44;
  unsigned __int16 *v45;
  float *v46;
  uint64_t v47;
  float *v48;
  unsigned __int16 *v49;
  float *v50;
  uint64_t v51;
  float *v52;
  unsigned __int16 *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v56 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v55 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v55 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v57 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v39 = 0;
    v40 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  *v54 = *v52 + COERCE_FLOAT(*v53 << 16);
                  v54 = (float *)((char *)v54 + v38);
                  v53 = (unsigned __int16 *)((char *)v53 + v34);
                  v52 = (float *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (float *)((char *)v50 + v37);
              v49 = (unsigned __int16 *)((char *)v49 + v31);
              v48 = (float *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (float *)((char *)v46 + v36);
          v45 = (unsigned __int16 *)((char *)v45 + v32);
          v44 = (float *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (float *)((char *)v42 + v57);
      v41 = (unsigned __int16 *)((char *)v41 + v55);
      v40 = (float *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  __int16 *v42;
  _WORD *v43;
  uint64_t v44;
  __int16 *v45;
  __int16 *v46;
  _WORD *v47;
  uint64_t v48;
  __int16 *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 *v53;
  __int16 *v54;
  _WORD *v55;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v72 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v71 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v71 = 0;
    else
      v71 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v71 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v71 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v71 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v70 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v70 = 0;
    else
      v70 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v70 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v70 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v70 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v72 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  _H1 = v53[1];
                  _H2 = *v54;
                  _H3 = v54[1];
                  __asm
                  {
                    FCVT            S2, H2
                    FCVT            S0, H0
                  }
                  _S0 = _S0 + _S2;
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            S2, H3
                    FCVT            S1, H1
                  }
                  _S1 = _S1 + _S2;
                  __asm { FCVT            H1, S1 }
                  *v55 = LOWORD(_S0);
                  v55[1] = LOWORD(_S1);
                  v55 = (_WORD *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (_WORD *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (_WORD *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (_WORD *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v70);
      v41 = (__int16 *)((char *)v41 + v71);
    }
    while (v40 != v72);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  __int16 *v42;
  _WORD *v43;
  uint64_t v44;
  __int16 *v45;
  __int16 *v46;
  _WORD *v47;
  uint64_t v48;
  __int16 *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 *v53;
  __int16 *v54;
  _WORD *v55;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v67 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v66 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v66 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v66 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v66 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v65 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v65 = 0;
    else
      v65 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v65 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v65 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v65 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v67 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  _H1 = *v54;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  _S0 = _S0 + _S1;
                  __asm { FCVT            H0, S0 }
                  *v55 = LOWORD(_S0);
                  v55 = (_WORD *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (_WORD *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (_WORD *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (_WORD *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v65);
      v41 = (__int16 *)((char *)v41 + v66);
    }
    while (v40 != v67);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  _WORD *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  _WORD *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  _WORD *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  _WORD *v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v38 = 0;
    v39 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = COERCE_FLOAT(*v51 << 16) + COERCE_FLOAT(*v52 << 16);
                  *v53 = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000) * 0.0039062)));
                  v53 = (_WORD *)((char *)v53 + v37);
                  v52 = (unsigned __int16 *)((char *)v52 + v33);
                  v51 = (unsigned __int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_WORD *)((char *)v49 + v36);
              v48 = (unsigned __int16 *)((char *)v48 + v30);
              v47 = (unsigned __int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_WORD *)((char *)v45 + v35);
          v44 = (unsigned __int16 *)((char *)v44 + v31);
          v43 = (unsigned __int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      v41 = (_WORD *)((char *)v41 + v57);
      v40 = (unsigned __int16 *)((char *)v40 + v55);
      v39 = (unsigned __int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_QWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_QWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v52 + *v51;
                  v53 = (_QWORD *)((char *)v53 + v37);
                  v52 = (_QWORD *)((char *)v52 + v33);
                  v51 = (_QWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_QWORD *)((char *)v49 + v36);
              v48 = (_QWORD *)((char *)v48 + v30);
              v47 = (_QWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_QWORD *)((char *)v45 + v35);
          v44 = (_QWORD *)((char *)v44 + v31);
          v43 = (_QWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (_QWORD *)((char *)v41 + v56);
      v40 = (_QWORD *)((char *)v40 + v54);
      v39 = (_QWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_DWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_DWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v52 + *v51;
                  v53 = (_DWORD *)((char *)v53 + v37);
                  v52 = (_DWORD *)((char *)v52 + v33);
                  v51 = (_DWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_DWORD *)((char *)v49 + v36);
              v48 = (_DWORD *)((char *)v48 + v30);
              v47 = (_DWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_DWORD *)((char *)v45 + v35);
          v44 = (_DWORD *)((char *)v44 + v31);
          v43 = (_DWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (_DWORD *)((char *)v41 + v56);
      v40 = (_DWORD *)((char *)v40 + v54);
      v39 = (_DWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  _WORD *v40;
  _WORD *v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  _WORD *v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  _WORD *v49;
  uint64_t v50;
  _WORD *v51;
  _WORD *v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_WORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_WORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v52 + *v51;
                  v53 = (_WORD *)((char *)v53 + v37);
                  v52 = (_WORD *)((char *)v52 + v33);
                  v51 = (_WORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_WORD *)((char *)v49 + v36);
              v48 = (_WORD *)((char *)v48 + v30);
              v47 = (_WORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_WORD *)((char *)v45 + v35);
          v44 = (_WORD *)((char *)v44 + v31);
          v43 = (_WORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (_WORD *)((char *)v41 + v56);
      v40 = (_WORD *)((char *)v40 + v54);
      v39 = (_WORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_BYTE *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_BYTE *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v52 + *v51;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v57);
      }
      ++v38;
      v41 += v56;
      v40 += v54;
      v39 += v55;
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t *v41;
  float32x2_t *v42;
  float32x2_t *v43;
  uint64_t v44;
  float32x2_t *v45;
  float32x2_t *v46;
  float32x2_t *v47;
  uint64_t v48;
  float32x2_t *v49;
  float32x2_t *v50;
  float32x2_t *v51;
  uint64_t v52;
  float32x2_t *v53;
  float32x2_t *v54;
  float32x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v40 = 0;
    v41 = (float32x2_t *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float32x2_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float32x2_t *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  *v55 = vsub_f32(*v53, *v54);
                  v55 = (float32x2_t *)((char *)v55 + v39);
                  v54 = (float32x2_t *)((char *)v54 + v34);
                  v53 = (float32x2_t *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float32x2_t *)((char *)v51 + v38);
              v50 = (float32x2_t *)((char *)v50 + v31);
              v49 = (float32x2_t *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float32x2_t *)((char *)v47 + v37);
          v46 = (float32x2_t *)((char *)v46 + v32);
          v45 = (float32x2_t *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float32x2_t *)((char *)v43 + v36);
      v42 = (float32x2_t *)((char *)v42 + v56);
      v41 = (float32x2_t *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  *v55 = *v53 - *v54;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v56);
      v41 = (float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, float16x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int32 *v42;
  float32x2_t *v43;
  double *v44;
  uint64_t v45;
  __int32 *v46;
  float32x2_t *v47;
  double *v48;
  uint64_t v49;
  __int32 *v50;
  float32x2_t *v51;
  double *v52;
  uint64_t v53;
  __int32 *v54;
  float32x2_t *v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = **a1;
  v6 = (*a1)[1];
  v7 = **a2;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v8 - 1;
  if (v8 <= 0)
  {
    v12 = v8 - 2;
    v11 = 1;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    v12 = -1;
LABEL_5:
    v13 = v8 - 3;
    v14 = 1;
    v15 = 1;
LABEL_6:
    v16 = v8 - 4;
    v17 = 1;
    v18 = 1;
    v19 = 1;
LABEL_7:
    v20 = 1;
    goto LABEL_8;
  }
  v12 = v8 - 2;
  v14 = *(_QWORD *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    v12 = 0;
    v15 = 0;
    v13 = -1;
    goto LABEL_6;
  }
  v13 = v8 - 3;
  v18 = *(_QWORD *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    v15 = 0;
    v13 = 0;
    v19 = 0;
    v16 = -1;
    v12 = 1;
    v17 = 1;
    goto LABEL_7;
  }
  v17 = 0;
  v15 = 0;
  v19 = 0;
  v16 = v8 - 4;
  v20 = *(_QWORD *)(v10 + 8 * (v8 - 4));
LABEL_8:
  v59 = v20;
  if (*(_BYTE *)(v5 + 49))
  {
    v21 = 0;
    v58 = 0;
    result = 0;
    goto LABEL_37;
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_26;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v58 = 0;
LABEL_26:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_31;
  }
  if (v23 < 2)
  {
    v26 = 0;
    v21 = 0;
    v58 = 0;
    result = 0;
    v27 = 0;
    if (v23 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v28 = 0;
  result = 0;
  v58 = 0;
LABEL_31:
  if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
    v21 = 0;
  else
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
  v26 = v23 - 1;
LABEL_36:
  if (v26 > (int)v23 - 1)
  {
LABEL_37:
    v27 = 0;
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_38;
LABEL_47:
    v32 = 0;
    v57 = 0;
    v33 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
    if (*(_BYTE *)(v6 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v27 = 0;
LABEL_46:
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_47;
LABEL_38:
  v29 = *(_QWORD *)(v6 + 16);
  v30 = v29 - 4;
  if (v29 >= 4)
  {
    if (v30 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v30) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v30);
    v31 = v29 - 3;
    goto LABEL_56;
  }
  if (v29 == 3)
  {
    v31 = 0;
    v57 = 0;
LABEL_56:
    if (v31 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v31) == 1)
      v33 = 0;
    else
      v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v31);
    v36 = v29 - 2;
    goto LABEL_61;
  }
  if (v29 >= 2)
  {
    v36 = 0;
    v33 = 0;
    v57 = 0;
LABEL_61:
    if (v36 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v36) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v36);
    v34 = v29 - 1;
    goto LABEL_66;
  }
  v34 = 0;
  v32 = 0;
  v57 = 0;
  v33 = 0;
  v35 = 0;
  if (v29 != 1)
    goto LABEL_78;
LABEL_66:
  if (v34 <= (int)v29 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v34) != 1)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v34);
      if (!*(_BYTE *)(v7 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v35 = 0;
LABEL_78:
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_68;
LABEL_79:
    v39 = 0;
    v37 = 0;
    v38 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v35 = 0;
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v17 & 1) != 0 || v16 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v16) == 1)
  {
    v37 = 0;
    if ((v19 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16);
    if ((v19 & 1) != 0)
      goto LABEL_98;
  }
  if (v13 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    v38 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v38 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13);
  if ((v15 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v12 <= (int)v8 - 1 && *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v12) != 1)
  {
    v39 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v12);
    if (v8 >= 1)
      goto LABEL_102;
LABEL_80:
    v40 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v39 = 0;
  if (v8 < 1)
    goto LABEL_80;
LABEL_102:
  if (v9 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) == 1)
    goto LABEL_80;
  v40 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v59 >= 1)
  {
    v41 = 0;
    v42 = (__int32 *)(**(_QWORD **)a3 + *(_QWORD *)(v5 + 40));
    v43 = (float32x2_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v6 + 40));
    v44 = (double *)(**a4 + *(_QWORD *)(v7 + 40));
    do
    {
      if (v18 >= 1)
      {
        v45 = 0;
        v46 = v42;
        v47 = v43;
        v48 = v44;
        do
        {
          if (v14 >= 1)
          {
            v49 = 0;
            v50 = v46;
            v51 = v47;
            v52 = v48;
            do
            {
              v53 = v11;
              v54 = v50;
              v55 = v51;
              v56 = v52;
              if (v11 >= 1)
              {
                do
                {
                  a5.i32[0] = *v54;
                  a5 = (float16x4_t)vsub_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a5), *v55);
                  *v56 = *(double *)&a5;
                  v56 = (double *)((char *)v56 + v40);
                  v55 = (float32x2_t *)((char *)v55 + v35);
                  v54 = (__int32 *)((char *)v54 + v27);
                  --v53;
                }
                while (v53);
              }
              ++v49;
              v52 = (double *)((char *)v52 + v39);
              v51 = (float32x2_t *)((char *)v51 + v32);
              v50 = (__int32 *)((char *)v50 + v21);
            }
            while (v49 != v14);
          }
          ++v45;
          v48 = (double *)((char *)v48 + v38);
          v47 = (float32x2_t *)((char *)v47 + v33);
          v46 = (__int32 *)((char *)v46 + result);
        }
        while (v45 != v18);
      }
      ++v41;
      v44 = (double *)((char *)v44 + v37);
      v43 = (float32x2_t *)((char *)v43 + v57);
      v42 = (__int32 *)((char *)v42 + v58);
    }
    while (v41 != v59);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  __int16 *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  __int16 *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  __int16 *v53;
  float *v54;
  float *v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v64 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v63 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v63 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v62 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v62 = 0;
    else
      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v62 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  *v55 = _S0 - *v54;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v62);
      v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, double a5, float16x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x2_t *v43;
  __int32 *v44;
  float32x2_t *v45;
  uint64_t v46;
  float32x2_t *v47;
  __int32 *v48;
  float32x2_t *v49;
  uint64_t v50;
  float32x2_t *v51;
  __int32 *v52;
  float32x2_t *v53;
  uint64_t v54;
  float32x2_t *v55;
  __int32 *v56;
  float32x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v6 = **a1;
  v7 = (*a1)[1];
  v8 = **a2;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v9 - 1;
  if (v9 <= 0)
  {
    v13 = v9 - 2;
    v12 = 1;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    v13 = -1;
LABEL_5:
    v14 = v9 - 3;
    v15 = 1;
    v16 = 1;
LABEL_6:
    v17 = v9 - 4;
    v18 = 1;
    v19 = 1;
    v20 = 1;
LABEL_7:
    v21 = 1;
    goto LABEL_8;
  }
  v13 = v9 - 2;
  v15 = *(_QWORD *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    v13 = 0;
    v16 = 0;
    v14 = -1;
    goto LABEL_6;
  }
  v14 = v9 - 3;
  v19 = *(_QWORD *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    v16 = 0;
    v14 = 0;
    v20 = 0;
    v17 = -1;
    v13 = 1;
    v18 = 1;
    goto LABEL_7;
  }
  v18 = 0;
  v16 = 0;
  v20 = 0;
  v17 = v9 - 4;
  v21 = *(_QWORD *)(v11 + 8 * (v9 - 4));
LABEL_8:
  v60 = v21;
  if (*(_BYTE *)(v6 + 49))
  {
    v22 = 0;
    v59 = 0;
    result = 0;
    goto LABEL_37;
  }
  v24 = *(_QWORD *)(v6 + 16);
  v25 = v24 - 4;
  if (v24 >= 4)
  {
    if (v25 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v25) == 1)
      v59 = 0;
    else
      v59 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v25);
    v26 = v24 - 3;
    goto LABEL_26;
  }
  if (v24 == 3)
  {
    v26 = 0;
    v59 = 0;
LABEL_26:
    if (v26 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v26) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v26);
    v29 = v24 - 2;
    goto LABEL_31;
  }
  if (v24 < 2)
  {
    v27 = 0;
    v22 = 0;
    v59 = 0;
    result = 0;
    v28 = 0;
    if (v24 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v29 = 0;
  result = 0;
  v59 = 0;
LABEL_31:
  if (v29 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v29) == 1)
    v22 = 0;
  else
    v22 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v29);
  v27 = v24 - 1;
LABEL_36:
  if (v27 > (int)v24 - 1)
  {
LABEL_37:
    v28 = 0;
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_38;
LABEL_47:
    v33 = 0;
    v58 = 0;
    v34 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v27) != 1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v27);
    if (*(_BYTE *)(v7 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v28 = 0;
LABEL_46:
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_47;
LABEL_38:
  v30 = *(_QWORD *)(v7 + 16);
  v31 = v30 - 4;
  if (v30 >= 4)
  {
    if (v31 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v31) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v31);
    v32 = v30 - 3;
    goto LABEL_56;
  }
  if (v30 == 3)
  {
    v32 = 0;
    v58 = 0;
LABEL_56:
    if (v32 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v32) == 1)
      v34 = 0;
    else
      v34 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v32);
    v37 = v30 - 2;
    goto LABEL_61;
  }
  if (v30 >= 2)
  {
    v37 = 0;
    v34 = 0;
    v58 = 0;
LABEL_61:
    if (v37 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v37) == 1)
      v33 = 0;
    else
      v33 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v37);
    v35 = v30 - 1;
    goto LABEL_66;
  }
  v35 = 0;
  v33 = 0;
  v58 = 0;
  v34 = 0;
  v36 = 0;
  if (v30 != 1)
    goto LABEL_78;
LABEL_66:
  if (v35 <= (int)v30 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v35) != 1)
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v35);
      if (!*(_BYTE *)(v8 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v36 = 0;
LABEL_78:
    if (!*(_BYTE *)(v8 + 49))
      goto LABEL_68;
LABEL_79:
    v40 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v36 = 0;
  if (*(_BYTE *)(v8 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v18 & 1) != 0 || v17 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v17) == 1)
  {
    v38 = 0;
    if ((v20 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17);
    if ((v20 & 1) != 0)
      goto LABEL_98;
  }
  if (v14 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v14) == 1)
  {
LABEL_98:
    v39 = 0;
    if ((v16 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v39 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14);
  if ((v16 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v13 <= (int)v9 - 1 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v13) != 1)
  {
    v40 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v13);
    if (v9 >= 1)
      goto LABEL_102;
LABEL_80:
    v41 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v40 = 0;
  if (v9 < 1)
    goto LABEL_80;
LABEL_102:
  if (v10 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v10) == 1)
    goto LABEL_80;
  v41 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v60 >= 1)
  {
    v42 = 0;
    v43 = (float32x2_t *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v44 = (__int32 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v7 + 40));
    v45 = (float32x2_t *)(**a4 + *(_QWORD *)(v8 + 40));
    do
    {
      if (v19 >= 1)
      {
        v46 = 0;
        v47 = v43;
        v48 = v44;
        v49 = v45;
        do
        {
          if (v15 >= 1)
          {
            v50 = 0;
            v51 = v47;
            v52 = v48;
            v53 = v49;
            do
            {
              v54 = v12;
              v55 = v51;
              v56 = v52;
              v57 = v53;
              if (v12 >= 1)
              {
                do
                {
                  a6.i32[0] = *v56;
                  a6 = (float16x4_t)vcvtq_f32_f16(a6).u64[0];
                  *v57 = vsub_f32(*v55, (float32x2_t)a6);
                  v57 = (float32x2_t *)((char *)v57 + v41);
                  v56 = (__int32 *)((char *)v56 + v36);
                  v55 = (float32x2_t *)((char *)v55 + v28);
                  --v54;
                }
                while (v54);
              }
              ++v50;
              v53 = (float32x2_t *)((char *)v53 + v40);
              v52 = (__int32 *)((char *)v52 + v33);
              v51 = (float32x2_t *)((char *)v51 + v22);
            }
            while (v50 != v15);
          }
          ++v46;
          v49 = (float32x2_t *)((char *)v49 + v39);
          v48 = (__int32 *)((char *)v48 + v34);
          v47 = (float32x2_t *)((char *)v47 + result);
        }
        while (v46 != v19);
      }
      ++v42;
      v45 = (float32x2_t *)((char *)v45 + v38);
      v44 = (__int32 *)((char *)v44 + v58);
      v43 = (float32x2_t *)((char *)v43 + v59);
    }
    while (v42 != v60);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  __int16 *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  __int16 *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  __int16 *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  __int16 *v54;
  float *v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v64 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v63 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v63 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v62 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v62 = 0;
    else
      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v62 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  *v55 = *v53 - _S1;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v62);
      v41 = (float *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  float *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v56 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v55 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v55 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v57 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v39 = 0;
    v40 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  *v54 = COERCE_FLOAT(*v52 << 16) - *v53;
                  v54 = (float *)((char *)v54 + v38);
                  v53 = (float *)((char *)v53 + v34);
                  v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (float *)((char *)v50 + v37);
              v49 = (float *)((char *)v49 + v31);
              v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (float *)((char *)v46 + v36);
          v45 = (float *)((char *)v45 + v32);
          v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (float *)((char *)v42 + v57);
      v41 = (float *)((char *)v41 + v55);
      v40 = (unsigned __int16 *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  unsigned __int16 *v41;
  float *v42;
  uint64_t v43;
  float *v44;
  unsigned __int16 *v45;
  float *v46;
  uint64_t v47;
  float *v48;
  unsigned __int16 *v49;
  float *v50;
  uint64_t v51;
  float *v52;
  unsigned __int16 *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v56 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v55 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v55 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v57 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v39 = 0;
    v40 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  *v54 = *v52 - COERCE_FLOAT(*v53 << 16);
                  v54 = (float *)((char *)v54 + v38);
                  v53 = (unsigned __int16 *)((char *)v53 + v34);
                  v52 = (float *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (float *)((char *)v50 + v37);
              v49 = (unsigned __int16 *)((char *)v49 + v31);
              v48 = (float *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (float *)((char *)v46 + v36);
          v45 = (unsigned __int16 *)((char *)v45 + v32);
          v44 = (float *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (float *)((char *)v42 + v57);
      v41 = (unsigned __int16 *)((char *)v41 + v55);
      v40 = (float *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  __int16 *v42;
  _WORD *v43;
  uint64_t v44;
  __int16 *v45;
  __int16 *v46;
  _WORD *v47;
  uint64_t v48;
  __int16 *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 *v53;
  __int16 *v54;
  _WORD *v55;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v72 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v71 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v71 = 0;
    else
      v71 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v71 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v71 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v71 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v70 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v70 = 0;
    else
      v70 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v70 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v70 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v70 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v72 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  _H1 = v53[1];
                  _H2 = *v54;
                  _H3 = v54[1];
                  __asm
                  {
                    FCVT            S2, H2
                    FCVT            S0, H0
                  }
                  _S0 = _S0 - _S2;
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            S2, H3
                    FCVT            S1, H1
                  }
                  _S1 = _S1 - _S2;
                  __asm { FCVT            H1, S1 }
                  *v55 = LOWORD(_S0);
                  v55[1] = LOWORD(_S1);
                  v55 = (_WORD *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (_WORD *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (_WORD *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (_WORD *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v70);
      v41 = (__int16 *)((char *)v41 + v71);
    }
    while (v40 != v72);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  __int16 *v42;
  _WORD *v43;
  uint64_t v44;
  __int16 *v45;
  __int16 *v46;
  _WORD *v47;
  uint64_t v48;
  __int16 *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 *v53;
  __int16 *v54;
  _WORD *v55;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v67 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v66 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v66 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v66 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v66 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v65 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v65 = 0;
    else
      v65 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v65 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v65 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v65 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v67 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  _H1 = *v54;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  _S0 = _S0 - _S1;
                  __asm { FCVT            H0, S0 }
                  *v55 = LOWORD(_S0);
                  v55 = (_WORD *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (_WORD *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (_WORD *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (_WORD *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v65);
      v41 = (__int16 *)((char *)v41 + v66);
    }
    while (v40 != v67);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  _WORD *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  _WORD *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  _WORD *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  _WORD *v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v38 = 0;
    v39 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = COERCE_FLOAT(*v51 << 16) - COERCE_FLOAT(*v52 << 16);
                  *v53 = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000) * 0.0039062)));
                  v53 = (_WORD *)((char *)v53 + v37);
                  v52 = (unsigned __int16 *)((char *)v52 + v33);
                  v51 = (unsigned __int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_WORD *)((char *)v49 + v36);
              v48 = (unsigned __int16 *)((char *)v48 + v30);
              v47 = (unsigned __int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_WORD *)((char *)v45 + v35);
          v44 = (unsigned __int16 *)((char *)v44 + v31);
          v43 = (unsigned __int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      v41 = (_WORD *)((char *)v41 + v57);
      v40 = (unsigned __int16 *)((char *)v40 + v55);
      v39 = (unsigned __int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_QWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_QWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v51 - *v52;
                  v53 = (_QWORD *)((char *)v53 + v37);
                  v52 = (_QWORD *)((char *)v52 + v33);
                  v51 = (_QWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_QWORD *)((char *)v49 + v36);
              v48 = (_QWORD *)((char *)v48 + v30);
              v47 = (_QWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_QWORD *)((char *)v45 + v35);
          v44 = (_QWORD *)((char *)v44 + v31);
          v43 = (_QWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (_QWORD *)((char *)v41 + v56);
      v40 = (_QWORD *)((char *)v40 + v54);
      v39 = (_QWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_DWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_DWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v51 - *v52;
                  v53 = (_DWORD *)((char *)v53 + v37);
                  v52 = (_DWORD *)((char *)v52 + v33);
                  v51 = (_DWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_DWORD *)((char *)v49 + v36);
              v48 = (_DWORD *)((char *)v48 + v30);
              v47 = (_DWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_DWORD *)((char *)v45 + v35);
          v44 = (_DWORD *)((char *)v44 + v31);
          v43 = (_DWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (_DWORD *)((char *)v41 + v56);
      v40 = (_DWORD *)((char *)v40 + v54);
      v39 = (_DWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  _WORD *v40;
  _WORD *v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  _WORD *v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  _WORD *v49;
  uint64_t v50;
  _WORD *v51;
  _WORD *v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_WORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_WORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v51 - *v52;
                  v53 = (_WORD *)((char *)v53 + v37);
                  v52 = (_WORD *)((char *)v52 + v33);
                  v51 = (_WORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_WORD *)((char *)v49 + v36);
              v48 = (_WORD *)((char *)v48 + v30);
              v47 = (_WORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_WORD *)((char *)v45 + v35);
          v44 = (_WORD *)((char *)v44 + v31);
          v43 = (_WORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (_WORD *)((char *)v41 + v56);
      v40 = (_WORD *)((char *)v40 + v54);
      v39 = (_WORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_BYTE *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_BYTE *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v51 - *v52;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v57);
      }
      ++v38;
      v41 += v56;
      v40 += v54;
      v39 += v55;
    }
    while (v38 != v18);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v61 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v61 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v62 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v53 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v62 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v53 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v45 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v60 = 0;
    v43 = 0;
    v51 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v43 = 0;
    else
      v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v43 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v51 = 0;
    else
      v51 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v60 = 0;
    v43 = 0;
    v51 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v51 = 0;
  v43 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v60 = 0;
  else
    v60 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v59 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v42 = 0;
    else
      v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v42 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v50 = 0;
    else
      v50 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v50 = 0;
    v42 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v59 = 0;
    else
      v59 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v59 = 0;
  v42 = 0;
  v50 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v58 = 0;
    v44 = 0;
    v52 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v44 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v44 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v52 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v52 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v58 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v45 >= 1)
  {
    v30 = 0;
    v49 = (uint64_t *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v48 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v47 = **a4 + *(_QWORD *)(v6 + 40);
    do
    {
      v46 = v30;
      if (v53 >= 1)
      {
        v31 = 0;
        v56 = v48;
        v57 = v49;
        v55 = v47;
        do
        {
          v54 = v31;
          if (v62 >= 1)
          {
            v32 = 0;
            v33 = v56;
            v34 = v57;
            v35 = v55;
            do
            {
              v63 = v32;
              v36 = v61;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v61 >= 1)
              {
                do
                {
                  v40 = *v37;
                  v64 = *v38;
                  v65 = v40;
                  *(float *)v39 = std::operator*[abi:nn180100]<float>((float *)&v65, (float *)&v64);
                  *(_DWORD *)(v39 + 4) = v41;
                  v39 += v29;
                  v38 = (uint64_t *)((char *)v38 + v27);
                  v37 = (uint64_t *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v63 + 1;
              v35 += v58;
              v33 = (uint64_t *)((char *)v33 + v59);
              v34 = (uint64_t *)((char *)v34 + v60);
            }
            while (v63 + 1 != v62);
          }
          v31 = v54 + 1;
          v55 += v52;
          v56 = (uint64_t *)((char *)v56 + v50);
          v57 = (uint64_t *)((char *)v57 + v51);
        }
        while (v54 + 1 != v53);
      }
      v30 = v46 + 1;
      v47 += v44;
      v48 = (uint64_t *)((char *)v48 + v42);
      v49 = (uint64_t *)((char *)v49 + v43);
    }
    while (v46 + 1 != v45);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  *v55 = *v53 * *v54;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v56);
      v41 = (float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, float16x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  __int32 *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  __int32 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  __int32 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  v5 = **a1;
  v6 = (*a1)[1];
  v7 = **a2;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v8 - 1;
  if (v8 <= 0)
  {
    v11 = v8 - 2;
    v61 = 1;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v7 + 24);
  v61 = *(_QWORD *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v8 - 3;
    v62 = 1;
    v13 = 1;
LABEL_6:
    v14 = v8 - 4;
    v15 = 1;
    v53 = 1;
    v16 = 1;
LABEL_7:
    v17 = 1;
    goto LABEL_8;
  }
  v11 = v8 - 2;
  v62 = *(_QWORD *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    v11 = 0;
    v13 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v8 - 3;
  v53 = *(_QWORD *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    v13 = 0;
    v12 = 0;
    v16 = 0;
    v14 = -1;
    v11 = 1;
    v15 = 1;
    goto LABEL_7;
  }
  v15 = 0;
  v13 = 0;
  v16 = 0;
  v14 = v8 - 4;
  v17 = *(_QWORD *)(v10 + 8 * (v8 - 4));
LABEL_8:
  v45 = v17;
  if (*(_BYTE *)(v5 + 49))
  {
    v60 = 0;
    v43 = 0;
    v51 = 0;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v5 + 16);
  v19 = v18 - 4;
  if (v18 >= 4)
  {
    if (v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
      v43 = 0;
    else
      v43 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    v20 = v18 - 3;
    goto LABEL_26;
  }
  if (v18 == 3)
  {
    v20 = 0;
    v43 = 0;
LABEL_26:
    if (v20 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v20) == 1)
      v51 = 0;
    else
      v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    v23 = v18 - 2;
    goto LABEL_31;
  }
  if (v18 < 2)
  {
    v21 = 0;
    v60 = 0;
    v43 = 0;
    v51 = 0;
    v22 = 0;
    if (v18 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v23 = 0;
  v51 = 0;
  v43 = 0;
LABEL_31:
  if (v23 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v23) == 1)
    v60 = 0;
  else
    v60 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v23);
  v21 = v18 - 1;
LABEL_36:
  if (v21 > (int)v18 - 1)
  {
LABEL_37:
    v22 = 0;
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_38;
LABEL_47:
    v59 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v21) != 1)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if (*(_BYTE *)(v6 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v22 = 0;
LABEL_46:
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_47;
LABEL_38:
  v24 = *(_QWORD *)(v6 + 16);
  v25 = v24 - 4;
  if (v24 >= 4)
  {
    if (v25 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v25) == 1)
      v42 = 0;
    else
      v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v25);
    v26 = v24 - 3;
    goto LABEL_56;
  }
  if (v24 == 3)
  {
    v26 = 0;
    v42 = 0;
LABEL_56:
    if (v26 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v26) == 1)
      v50 = 0;
    else
      v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v26);
    v29 = v24 - 2;
    goto LABEL_61;
  }
  if (v24 >= 2)
  {
    v29 = 0;
    v50 = 0;
    v42 = 0;
LABEL_61:
    if (v29 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v29) == 1)
      v59 = 0;
    else
      v59 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v29);
    v27 = v24 - 1;
    goto LABEL_66;
  }
  v27 = 0;
  v59 = 0;
  v42 = 0;
  v50 = 0;
  v28 = 0;
  if (v24 != 1)
    goto LABEL_78;
LABEL_66:
  if (v27 <= (int)v24 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v27) != 1)
    {
      v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v27);
      if (!*(_BYTE *)(v7 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v28 = 0;
LABEL_78:
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_68;
LABEL_79:
    v58 = 0;
    v44 = 0;
    v52 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v28 = 0;
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v15 & 1) != 0 || v14 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v14) == 1)
  {
    v44 = 0;
    if ((v16 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v44 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14);
    if ((v16 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v52 = 0;
    if ((v13 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v52 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v12);
  if ((v13 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v8 - 1 && *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v11) != 1)
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v11);
    if (v8 >= 1)
      goto LABEL_102;
LABEL_80:
    v30 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v58 = 0;
  if (v8 < 1)
    goto LABEL_80;
LABEL_102:
  if (v9 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) == 1)
    goto LABEL_80;
  v30 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v45 >= 1)
  {
    v31 = 0;
    v49 = (__int32 *)(**(_QWORD **)a3 + *(_QWORD *)(v5 + 40));
    v48 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v6 + 40));
    v47 = **a4 + *(_QWORD *)(v7 + 40);
    do
    {
      v46 = v31;
      if (v53 >= 1)
      {
        v32 = 0;
        v56 = v48;
        v57 = v49;
        v55 = v47;
        do
        {
          v54 = v32;
          if (v62 >= 1)
          {
            v33 = 0;
            v34 = v56;
            v35 = v57;
            v36 = v55;
            do
            {
              v63 = v33;
              v37 = v61;
              v38 = v35;
              v39 = v34;
              v40 = v36;
              if (v61 >= 1)
              {
                do
                {
                  a5.i32[0] = *v38;
                  v64 = *v39;
                  v65 = vcvtq_f32_f16(a5).u64[0];
                  *(float *)v40 = std::operator*[abi:nn180100]<float>((float *)&v65, (float *)&v64);
                  *(_DWORD *)(v40 + 4) = v41;
                  v40 += v30;
                  v39 = (uint64_t *)((char *)v39 + v28);
                  v38 = (__int32 *)((char *)v38 + v22);
                  --v37;
                }
                while (v37);
              }
              v33 = v63 + 1;
              v36 += v58;
              v34 = (uint64_t *)((char *)v34 + v59);
              v35 = (__int32 *)((char *)v35 + v60);
            }
            while (v63 + 1 != v62);
          }
          v32 = v54 + 1;
          v55 += v52;
          v56 = (uint64_t *)((char *)v56 + v50);
          v57 = (__int32 *)((char *)v57 + v51);
        }
        while (v54 + 1 != v53);
      }
      v31 = v46 + 1;
      v47 += v44;
      v48 = (uint64_t *)((char *)v48 + v42);
      v49 = (__int32 *)((char *)v49 + v43);
    }
    while (v46 + 1 != v45);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  __int16 *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  __int16 *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  __int16 *v53;
  float *v54;
  float *v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v64 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v63 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v63 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v62 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v62 = 0;
    else
      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v62 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  *v55 = *v54 * _S0;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v62);
      v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, double a5, float16x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int32 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int32 *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int32 *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v6 = **a1;
  v7 = (*a1)[1];
  v8 = **a2;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v9 - 1;
  if (v9 <= 0)
  {
    v12 = v9 - 2;
    v62 = 1;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v8 + 24);
  v62 = *(_QWORD *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    v12 = -1;
LABEL_5:
    v13 = v9 - 3;
    v63 = 1;
    v14 = 1;
LABEL_6:
    v15 = v9 - 4;
    v16 = 1;
    v54 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v12 = v9 - 2;
  v63 = *(_QWORD *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    v12 = 0;
    v14 = 0;
    v13 = -1;
    goto LABEL_6;
  }
  v13 = v9 - 3;
  v54 = *(_QWORD *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    v14 = 0;
    v13 = 0;
    v17 = 0;
    v15 = -1;
    v12 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v9 - 4;
  v18 = *(_QWORD *)(v11 + 8 * (v9 - 4));
LABEL_8:
  v46 = v18;
  if (*(_BYTE *)(v6 + 49))
  {
    v61 = 0;
    v44 = 0;
    v52 = 0;
    goto LABEL_37;
  }
  v19 = *(_QWORD *)(v6 + 16);
  v20 = v19 - 4;
  if (v19 >= 4)
  {
    if (v20 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) == 1)
      v44 = 0;
    else
      v44 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
    v21 = v19 - 3;
    goto LABEL_26;
  }
  if (v19 == 3)
  {
    v21 = 0;
    v44 = 0;
LABEL_26:
    if (v21 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v21) == 1)
      v52 = 0;
    else
      v52 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    v24 = v19 - 2;
    goto LABEL_31;
  }
  if (v19 < 2)
  {
    v22 = 0;
    v61 = 0;
    v44 = 0;
    v52 = 0;
    v23 = 0;
    if (v19 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v24 = 0;
  v52 = 0;
  v44 = 0;
LABEL_31:
  if (v24 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v24) == 1)
    v61 = 0;
  else
    v61 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v24);
  v22 = v19 - 1;
LABEL_36:
  if (v22 > (int)v19 - 1)
  {
LABEL_37:
    v23 = 0;
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_38;
LABEL_47:
    v60 = 0;
    v43 = 0;
    v51 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v22) != 1)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if (*(_BYTE *)(v7 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v23 = 0;
LABEL_46:
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_47;
LABEL_38:
  v25 = *(_QWORD *)(v7 + 16);
  v26 = v25 - 4;
  if (v25 >= 4)
  {
    if (v26 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v26) == 1)
      v43 = 0;
    else
      v43 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v26);
    v27 = v25 - 3;
    goto LABEL_56;
  }
  if (v25 == 3)
  {
    v27 = 0;
    v43 = 0;
LABEL_56:
    if (v27 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v27) == 1)
      v51 = 0;
    else
      v51 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v27);
    v30 = v25 - 2;
    goto LABEL_61;
  }
  if (v25 >= 2)
  {
    v30 = 0;
    v51 = 0;
    v43 = 0;
LABEL_61:
    if (v30 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v30) == 1)
      v60 = 0;
    else
      v60 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v30);
    v28 = v25 - 1;
    goto LABEL_66;
  }
  v28 = 0;
  v60 = 0;
  v43 = 0;
  v51 = 0;
  v29 = 0;
  if (v25 != 1)
    goto LABEL_78;
LABEL_66:
  if (v28 <= (int)v25 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v28) != 1)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v28);
      if (!*(_BYTE *)(v8 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v29 = 0;
LABEL_78:
    if (!*(_BYTE *)(v8 + 49))
      goto LABEL_68;
LABEL_79:
    v59 = 0;
    v45 = 0;
    v53 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v29 = 0;
  if (*(_BYTE *)(v8 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v15) == 1)
  {
    v45 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v45 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v13 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    v53 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v53 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v13);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v12 <= (int)v9 - 1 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v12) != 1)
  {
    v59 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v12);
    if (v9 >= 1)
      goto LABEL_102;
LABEL_80:
    v31 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v59 = 0;
  if (v9 < 1)
    goto LABEL_80;
LABEL_102:
  if (v10 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v10) == 1)
    goto LABEL_80;
  v31 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v46 >= 1)
  {
    v32 = 0;
    v50 = (uint64_t *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v49 = (__int32 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v7 + 40));
    v48 = **a4 + *(_QWORD *)(v8 + 40);
    do
    {
      v47 = v32;
      if (v54 >= 1)
      {
        v33 = 0;
        v57 = v49;
        v58 = v50;
        v56 = v48;
        do
        {
          v55 = v33;
          if (v63 >= 1)
          {
            v34 = 0;
            v35 = v57;
            v36 = v58;
            v37 = v56;
            do
            {
              v64 = v34;
              v38 = v62;
              v39 = v36;
              v40 = v35;
              v41 = v37;
              if (v62 >= 1)
              {
                do
                {
                  v42 = *v39;
                  a6.i32[0] = *v40;
                  v65 = vcvtq_f32_f16(a6).u64[0];
                  v66 = v42;
                  *(float *)v41 = std::operator*[abi:nn180100]<float>((float *)&v66, (float *)&v65);
                  *(_DWORD *)(v41 + 4) = a6.i32[0];
                  v41 += v31;
                  v40 = (__int32 *)((char *)v40 + v29);
                  v39 = (uint64_t *)((char *)v39 + v23);
                  --v38;
                }
                while (v38);
              }
              v34 = v64 + 1;
              v37 += v59;
              v35 = (__int32 *)((char *)v35 + v60);
              v36 = (uint64_t *)((char *)v36 + v61);
            }
            while (v64 + 1 != v63);
          }
          v33 = v55 + 1;
          v56 += v53;
          v57 = (__int32 *)((char *)v57 + v51);
          v58 = (uint64_t *)((char *)v58 + v52);
        }
        while (v55 + 1 != v54);
      }
      v32 = v47 + 1;
      v48 += v45;
      v49 = (__int32 *)((char *)v49 + v43);
      v50 = (uint64_t *)((char *)v50 + v44);
    }
    while (v47 + 1 != v46);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  __int16 *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  __int16 *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  __int16 *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  __int16 *v54;
  float *v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v64 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v63 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v63 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v62 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v62 = 0;
    else
      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v62 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  *v55 = *v53 * _S1;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v62);
      v41 = (float *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  float *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v56 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v55 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v55 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v57 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v39 = 0;
    v40 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  *v54 = *v53 * COERCE_FLOAT(*v52 << 16);
                  v54 = (float *)((char *)v54 + v38);
                  v53 = (float *)((char *)v53 + v34);
                  v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (float *)((char *)v50 + v37);
              v49 = (float *)((char *)v49 + v31);
              v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (float *)((char *)v46 + v36);
          v45 = (float *)((char *)v45 + v32);
          v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (float *)((char *)v42 + v57);
      v41 = (float *)((char *)v41 + v55);
      v40 = (unsigned __int16 *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  unsigned __int16 *v41;
  float *v42;
  uint64_t v43;
  float *v44;
  unsigned __int16 *v45;
  float *v46;
  uint64_t v47;
  float *v48;
  unsigned __int16 *v49;
  float *v50;
  uint64_t v51;
  float *v52;
  unsigned __int16 *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v56 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v55 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v55 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v57 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v39 = 0;
    v40 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  *v54 = *v52 * COERCE_FLOAT(*v53 << 16);
                  v54 = (float *)((char *)v54 + v38);
                  v53 = (unsigned __int16 *)((char *)v53 + v34);
                  v52 = (float *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (float *)((char *)v50 + v37);
              v49 = (unsigned __int16 *)((char *)v49 + v31);
              v48 = (float *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (float *)((char *)v46 + v36);
          v45 = (unsigned __int16 *)((char *)v45 + v32);
          v44 = (float *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (float *)((char *)v42 + v57);
      v41 = (unsigned __int16 *)((char *)v41 + v55);
      v40 = (float *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, double _D0, float16x4_t _D1)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int32 *v35;
  _DWORD *v36;
  _WORD *v37;
  uint64_t v38;
  _DWORD *v39;
  __int32 *v40;
  _WORD *v41;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  __int32 *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  __int32 *v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;

  v6 = **a1;
  v7 = (*a1)[1];
  v8 = **a2;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v9 - 1;
  if (v9 <= 0)
  {
    v12 = v9 - 2;
    v65 = 1;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v8 + 24);
  v65 = *(_QWORD *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    v12 = -1;
LABEL_5:
    v13 = v9 - 3;
    v66 = 1;
    v14 = 1;
LABEL_6:
    v15 = v9 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v12 = v9 - 2;
  v66 = *(_QWORD *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    v12 = 0;
    v14 = 0;
    v13 = -1;
    goto LABEL_6;
  }
  v13 = v9 - 3;
  v57 = *(_QWORD *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    v14 = 0;
    v13 = 0;
    v17 = 0;
    v15 = -1;
    v12 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v9 - 4;
  v18 = *(_QWORD *)(v11 + 8 * (v9 - 4));
LABEL_8:
  v49 = v18;
  if (*(_BYTE *)(v6 + 49))
  {
    v64 = 0;
    v47 = 0;
    v55 = 0;
    goto LABEL_37;
  }
  v19 = *(_QWORD *)(v6 + 16);
  v20 = v19 - 4;
  if (v19 >= 4)
  {
    if (v20 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) == 1)
      v47 = 0;
    else
      v47 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
    v21 = v19 - 3;
    goto LABEL_26;
  }
  if (v19 == 3)
  {
    v21 = 0;
    v47 = 0;
LABEL_26:
    if (v21 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v21) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    v24 = v19 - 2;
    goto LABEL_31;
  }
  if (v19 < 2)
  {
    v22 = 0;
    v64 = 0;
    v47 = 0;
    v55 = 0;
    v23 = 0;
    if (v19 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v24 = 0;
  v55 = 0;
  v47 = 0;
LABEL_31:
  if (v24 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v24) == 1)
    v64 = 0;
  else
    v64 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v24);
  v22 = v19 - 1;
LABEL_36:
  if (v22 > (int)v19 - 1)
  {
LABEL_37:
    v23 = 0;
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_38;
LABEL_47:
    v63 = 0;
    v46 = 0;
    v54 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v22) != 1)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if (*(_BYTE *)(v7 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v23 = 0;
LABEL_46:
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_47;
LABEL_38:
  v25 = *(_QWORD *)(v7 + 16);
  v26 = v25 - 4;
  if (v25 >= 4)
  {
    if (v26 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v26) == 1)
      v46 = 0;
    else
      v46 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v26);
    v27 = v25 - 3;
    goto LABEL_56;
  }
  if (v25 == 3)
  {
    v27 = 0;
    v46 = 0;
LABEL_56:
    if (v27 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v27) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v27);
    v30 = v25 - 2;
    goto LABEL_61;
  }
  if (v25 >= 2)
  {
    v30 = 0;
    v54 = 0;
    v46 = 0;
LABEL_61:
    if (v30 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v30) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v30);
    v28 = v25 - 1;
    goto LABEL_66;
  }
  v28 = 0;
  v63 = 0;
  v46 = 0;
  v54 = 0;
  v29 = 0;
  if (v25 != 1)
    goto LABEL_78;
LABEL_66:
  if (v28 <= (int)v25 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v28) != 1)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v28);
      if (!*(_BYTE *)(v8 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v29 = 0;
LABEL_78:
    if (!*(_BYTE *)(v8 + 49))
      goto LABEL_68;
LABEL_79:
    v62 = 0;
    v48 = 0;
    v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v29 = 0;
  if (*(_BYTE *)(v8 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v15) == 1)
  {
    v48 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v13 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    v56 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v56 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v13);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v12 <= (int)v9 - 1 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v12) != 1)
  {
    v62 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v12);
    if (v9 >= 1)
      goto LABEL_102;
LABEL_80:
    v31 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v62 = 0;
  if (v9 < 1)
    goto LABEL_80;
LABEL_102:
  if (v10 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v10) == 1)
    goto LABEL_80;
  v31 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v49 >= 1)
  {
    v32 = 0;
    v53 = (_DWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v52 = (__int32 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v7 + 40));
    v51 = (_WORD *)(**a4 + *(_QWORD *)(v8 + 40));
    do
    {
      v50 = v32;
      if (v57 >= 1)
      {
        v33 = 0;
        v60 = v52;
        v61 = v53;
        v59 = v51;
        do
        {
          v58 = v33;
          if (v66 >= 1)
          {
            v34 = 0;
            v35 = v60;
            v36 = v61;
            v37 = v59;
            do
            {
              v67 = v34;
              v38 = v65;
              v39 = v36;
              v40 = v35;
              v41 = v37;
              if (v65 >= 1)
              {
                do
                {
                  LODWORD(_D0) = *v39;
                  _D1.i32[0] = *v40;
                  v68 = vcvtq_f32_f16(_D1).u64[0];
                  v69 = vcvtq_f32_f16(*(float16x4_t *)&_D0).u64[0];
                  *(float *)&_D0 = std::operator*[abi:nn180100]<float>((float *)&v69, (float *)&v68);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            H1, S1
                  }
                  *v41 = LOWORD(_D0);
                  v41[1] = _D1.i16[0];
                  v41 = (_WORD *)((char *)v41 + v31);
                  v40 = (__int32 *)((char *)v40 + v29);
                  v39 = (_DWORD *)((char *)v39 + v23);
                  --v38;
                }
                while (v38);
              }
              v34 = v67 + 1;
              v37 = (_WORD *)((char *)v37 + v62);
              v35 = (__int32 *)((char *)v35 + v63);
              v36 = (_DWORD *)((char *)v36 + v64);
            }
            while (v67 + 1 != v66);
          }
          v33 = v58 + 1;
          v59 = (_WORD *)((char *)v59 + v56);
          v60 = (__int32 *)((char *)v60 + v54);
          v61 = (_DWORD *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      v32 = v50 + 1;
      v51 = (_WORD *)((char *)v51 + v48);
      v52 = (__int32 *)((char *)v52 + v46);
      v53 = (_DWORD *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  __int16 *v42;
  _WORD *v43;
  uint64_t v44;
  __int16 *v45;
  __int16 *v46;
  _WORD *v47;
  uint64_t v48;
  __int16 *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 *v53;
  __int16 *v54;
  _WORD *v55;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v67 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v66 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v66 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v66 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v66 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v65 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v65 = 0;
    else
      v65 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v65 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v65 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v65 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v67 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  _H1 = *v54;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  _S0 = _S0 * _S1;
                  __asm { FCVT            H0, S0 }
                  *v55 = LOWORD(_S0);
                  v55 = (_WORD *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (_WORD *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (_WORD *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (_WORD *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v65);
      v41 = (__int16 *)((char *)v41 + v66);
    }
    while (v40 != v67);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  _WORD *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  _WORD *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  _WORD *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  _WORD *v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v38 = 0;
    v39 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = COERCE_FLOAT(*v51 << 16) * COERCE_FLOAT(*v52 << 16);
                  *v53 = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000) * 0.0039062)));
                  v53 = (_WORD *)((char *)v53 + v37);
                  v52 = (unsigned __int16 *)((char *)v52 + v33);
                  v51 = (unsigned __int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_WORD *)((char *)v49 + v36);
              v48 = (unsigned __int16 *)((char *)v48 + v30);
              v47 = (unsigned __int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_WORD *)((char *)v45 + v35);
          v44 = (unsigned __int16 *)((char *)v44 + v31);
          v43 = (unsigned __int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      v41 = (_WORD *)((char *)v41 + v57);
      v40 = (unsigned __int16 *)((char *)v40 + v55);
      v39 = (unsigned __int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_QWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_QWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v52 * *v51;
                  v53 = (_QWORD *)((char *)v53 + v37);
                  v52 = (_QWORD *)((char *)v52 + v33);
                  v51 = (_QWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_QWORD *)((char *)v49 + v36);
              v48 = (_QWORD *)((char *)v48 + v30);
              v47 = (_QWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_QWORD *)((char *)v45 + v35);
          v44 = (_QWORD *)((char *)v44 + v31);
          v43 = (_QWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (_QWORD *)((char *)v41 + v56);
      v40 = (_QWORD *)((char *)v40 + v54);
      v39 = (_QWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_DWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_DWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v52 * *v51;
                  v53 = (_DWORD *)((char *)v53 + v37);
                  v52 = (_DWORD *)((char *)v52 + v33);
                  v51 = (_DWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_DWORD *)((char *)v49 + v36);
              v48 = (_DWORD *)((char *)v48 + v30);
              v47 = (_DWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_DWORD *)((char *)v45 + v35);
          v44 = (_DWORD *)((char *)v44 + v31);
          v43 = (_DWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (_DWORD *)((char *)v41 + v56);
      v40 = (_DWORD *)((char *)v40 + v54);
      v39 = (_DWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  _WORD *v40;
  _WORD *v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  _WORD *v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  _WORD *v49;
  uint64_t v50;
  _WORD *v51;
  _WORD *v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_WORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_WORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v52 * *v51;
                  v53 = (_WORD *)((char *)v53 + v37);
                  v52 = (_WORD *)((char *)v52 + v33);
                  v51 = (_WORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_WORD *)((char *)v49 + v36);
              v48 = (_WORD *)((char *)v48 + v30);
              v47 = (_WORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_WORD *)((char *)v45 + v35);
          v44 = (_WORD *)((char *)v44 + v31);
          v43 = (_WORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (_WORD *)((char *)v41 + v56);
      v40 = (_WORD *)((char *)v40 + v54);
      v39 = (_WORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_BYTE *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_BYTE *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v52 * *v51;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v57);
      }
      ++v38;
      v41 += v56;
      v40 += v54;
      v39 += v55;
    }
    while (v38 != v18);
  }
  return result;
}

float std::operator*[abi:nn180100]<float>(float *a1, float *a2)
{
  return (float)(*a1 * *a2) - (float)(a1[1] * a2[1]);
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v61 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v61 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v62 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v53 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v62 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v53 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v45 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v60 = 0;
    v43 = 0;
    v51 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v43 = 0;
    else
      v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v43 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v51 = 0;
    else
      v51 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v60 = 0;
    v43 = 0;
    v51 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v51 = 0;
  v43 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v60 = 0;
  else
    v60 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v59 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v42 = 0;
    else
      v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v42 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v50 = 0;
    else
      v50 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v50 = 0;
    v42 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v59 = 0;
    else
      v59 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v59 = 0;
  v42 = 0;
  v50 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v58 = 0;
    v44 = 0;
    v52 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v44 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v44 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v52 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v52 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v58 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v45 >= 1)
  {
    v30 = 0;
    v49 = (uint64_t *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v48 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v47 = **a4 + *(_QWORD *)(v6 + 40);
    do
    {
      v46 = v30;
      if (v53 >= 1)
      {
        v31 = 0;
        v56 = v48;
        v57 = v49;
        v55 = v47;
        do
        {
          v54 = v31;
          if (v62 >= 1)
          {
            v32 = 0;
            v33 = v56;
            v34 = v57;
            v35 = v55;
            do
            {
              v63 = v32;
              v36 = v61;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v61 >= 1)
              {
                do
                {
                  v40 = *v37;
                  v64 = *v38;
                  v65 = v40;
                  *(float *)v39 = std::operator/[abi:nn180100]<float>((float *)&v65, (float *)&v64);
                  *(_DWORD *)(v39 + 4) = v41;
                  v39 += v29;
                  v38 = (uint64_t *)((char *)v38 + v27);
                  v37 = (uint64_t *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v63 + 1;
              v35 += v58;
              v33 = (uint64_t *)((char *)v33 + v59);
              v34 = (uint64_t *)((char *)v34 + v60);
            }
            while (v63 + 1 != v62);
          }
          v31 = v54 + 1;
          v55 += v52;
          v56 = (uint64_t *)((char *)v56 + v50);
          v57 = (uint64_t *)((char *)v57 + v51);
        }
        while (v54 + 1 != v53);
      }
      v30 = v46 + 1;
      v47 += v44;
      v48 = (uint64_t *)((char *)v48 + v42);
      v49 = (uint64_t *)((char *)v49 + v43);
    }
    while (v46 + 1 != v45);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  *v55 = *v53 / *v54;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v56);
      v41 = (float *)((char *)v41 + v57);
    }
    while (v40 != v58);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, float16x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  __int32 *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  __int32 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  __int32 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  v5 = **a1;
  v6 = (*a1)[1];
  v7 = **a2;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v8 - 1;
  if (v8 <= 0)
  {
    v11 = v8 - 2;
    v61 = 1;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v7 + 24);
  v61 = *(_QWORD *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v8 - 3;
    v62 = 1;
    v13 = 1;
LABEL_6:
    v14 = v8 - 4;
    v15 = 1;
    v53 = 1;
    v16 = 1;
LABEL_7:
    v17 = 1;
    goto LABEL_8;
  }
  v11 = v8 - 2;
  v62 = *(_QWORD *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    v11 = 0;
    v13 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v8 - 3;
  v53 = *(_QWORD *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    v13 = 0;
    v12 = 0;
    v16 = 0;
    v14 = -1;
    v11 = 1;
    v15 = 1;
    goto LABEL_7;
  }
  v15 = 0;
  v13 = 0;
  v16 = 0;
  v14 = v8 - 4;
  v17 = *(_QWORD *)(v10 + 8 * (v8 - 4));
LABEL_8:
  v45 = v17;
  if (*(_BYTE *)(v5 + 49))
  {
    v60 = 0;
    v43 = 0;
    v51 = 0;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v5 + 16);
  v19 = v18 - 4;
  if (v18 >= 4)
  {
    if (v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
      v43 = 0;
    else
      v43 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    v20 = v18 - 3;
    goto LABEL_26;
  }
  if (v18 == 3)
  {
    v20 = 0;
    v43 = 0;
LABEL_26:
    if (v20 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v20) == 1)
      v51 = 0;
    else
      v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    v23 = v18 - 2;
    goto LABEL_31;
  }
  if (v18 < 2)
  {
    v21 = 0;
    v60 = 0;
    v43 = 0;
    v51 = 0;
    v22 = 0;
    if (v18 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v23 = 0;
  v51 = 0;
  v43 = 0;
LABEL_31:
  if (v23 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v23) == 1)
    v60 = 0;
  else
    v60 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v23);
  v21 = v18 - 1;
LABEL_36:
  if (v21 > (int)v18 - 1)
  {
LABEL_37:
    v22 = 0;
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_38;
LABEL_47:
    v59 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v21) != 1)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if (*(_BYTE *)(v6 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v22 = 0;
LABEL_46:
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_47;
LABEL_38:
  v24 = *(_QWORD *)(v6 + 16);
  v25 = v24 - 4;
  if (v24 >= 4)
  {
    if (v25 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v25) == 1)
      v42 = 0;
    else
      v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v25);
    v26 = v24 - 3;
    goto LABEL_56;
  }
  if (v24 == 3)
  {
    v26 = 0;
    v42 = 0;
LABEL_56:
    if (v26 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v26) == 1)
      v50 = 0;
    else
      v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v26);
    v29 = v24 - 2;
    goto LABEL_61;
  }
  if (v24 >= 2)
  {
    v29 = 0;
    v50 = 0;
    v42 = 0;
LABEL_61:
    if (v29 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v29) == 1)
      v59 = 0;
    else
      v59 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v29);
    v27 = v24 - 1;
    goto LABEL_66;
  }
  v27 = 0;
  v59 = 0;
  v42 = 0;
  v50 = 0;
  v28 = 0;
  if (v24 != 1)
    goto LABEL_78;
LABEL_66:
  if (v27 <= (int)v24 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v27) != 1)
    {
      v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v27);
      if (!*(_BYTE *)(v7 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v28 = 0;
LABEL_78:
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_68;
LABEL_79:
    v58 = 0;
    v44 = 0;
    v52 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v28 = 0;
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v15 & 1) != 0 || v14 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v14) == 1)
  {
    v44 = 0;
    if ((v16 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v44 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14);
    if ((v16 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v52 = 0;
    if ((v13 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v52 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v12);
  if ((v13 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v8 - 1 && *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v11) != 1)
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v11);
    if (v8 >= 1)
      goto LABEL_102;
LABEL_80:
    v30 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v58 = 0;
  if (v8 < 1)
    goto LABEL_80;
LABEL_102:
  if (v9 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) == 1)
    goto LABEL_80;
  v30 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v45 >= 1)
  {
    v31 = 0;
    v49 = (__int32 *)(**(_QWORD **)a3 + *(_QWORD *)(v5 + 40));
    v48 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v6 + 40));
    v47 = **a4 + *(_QWORD *)(v7 + 40);
    do
    {
      v46 = v31;
      if (v53 >= 1)
      {
        v32 = 0;
        v56 = v48;
        v57 = v49;
        v55 = v47;
        do
        {
          v54 = v32;
          if (v62 >= 1)
          {
            v33 = 0;
            v34 = v56;
            v35 = v57;
            v36 = v55;
            do
            {
              v63 = v33;
              v37 = v61;
              v38 = v35;
              v39 = v34;
              v40 = v36;
              if (v61 >= 1)
              {
                do
                {
                  a5.i32[0] = *v38;
                  v64 = *v39;
                  v65 = vcvtq_f32_f16(a5).u64[0];
                  *(float *)v40 = std::operator/[abi:nn180100]<float>((float *)&v65, (float *)&v64);
                  *(_DWORD *)(v40 + 4) = v41;
                  v40 += v30;
                  v39 = (uint64_t *)((char *)v39 + v28);
                  v38 = (__int32 *)((char *)v38 + v22);
                  --v37;
                }
                while (v37);
              }
              v33 = v63 + 1;
              v36 += v58;
              v34 = (uint64_t *)((char *)v34 + v59);
              v35 = (__int32 *)((char *)v35 + v60);
            }
            while (v63 + 1 != v62);
          }
          v32 = v54 + 1;
          v55 += v52;
          v56 = (uint64_t *)((char *)v56 + v50);
          v57 = (__int32 *)((char *)v57 + v51);
        }
        while (v54 + 1 != v53);
      }
      v31 = v46 + 1;
      v47 += v44;
      v48 = (uint64_t *)((char *)v48 + v42);
      v49 = (__int32 *)((char *)v49 + v43);
    }
    while (v46 + 1 != v45);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  __int16 *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  __int16 *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  __int16 *v53;
  float *v54;
  float *v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v64 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v63 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v63 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v62 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v62 = 0;
    else
      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v62 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  *v55 = _S0 / *v54;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v62);
      v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, double a5, float16x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int32 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int32 *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int32 *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v6 = **a1;
  v7 = (*a1)[1];
  v8 = **a2;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v9 - 1;
  if (v9 <= 0)
  {
    v12 = v9 - 2;
    v62 = 1;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v8 + 24);
  v62 = *(_QWORD *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    v12 = -1;
LABEL_5:
    v13 = v9 - 3;
    v63 = 1;
    v14 = 1;
LABEL_6:
    v15 = v9 - 4;
    v16 = 1;
    v54 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v12 = v9 - 2;
  v63 = *(_QWORD *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    v12 = 0;
    v14 = 0;
    v13 = -1;
    goto LABEL_6;
  }
  v13 = v9 - 3;
  v54 = *(_QWORD *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    v14 = 0;
    v13 = 0;
    v17 = 0;
    v15 = -1;
    v12 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v9 - 4;
  v18 = *(_QWORD *)(v11 + 8 * (v9 - 4));
LABEL_8:
  v46 = v18;
  if (*(_BYTE *)(v6 + 49))
  {
    v61 = 0;
    v44 = 0;
    v52 = 0;
    goto LABEL_37;
  }
  v19 = *(_QWORD *)(v6 + 16);
  v20 = v19 - 4;
  if (v19 >= 4)
  {
    if (v20 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) == 1)
      v44 = 0;
    else
      v44 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
    v21 = v19 - 3;
    goto LABEL_26;
  }
  if (v19 == 3)
  {
    v21 = 0;
    v44 = 0;
LABEL_26:
    if (v21 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v21) == 1)
      v52 = 0;
    else
      v52 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    v24 = v19 - 2;
    goto LABEL_31;
  }
  if (v19 < 2)
  {
    v22 = 0;
    v61 = 0;
    v44 = 0;
    v52 = 0;
    v23 = 0;
    if (v19 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v24 = 0;
  v52 = 0;
  v44 = 0;
LABEL_31:
  if (v24 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v24) == 1)
    v61 = 0;
  else
    v61 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v24);
  v22 = v19 - 1;
LABEL_36:
  if (v22 > (int)v19 - 1)
  {
LABEL_37:
    v23 = 0;
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_38;
LABEL_47:
    v60 = 0;
    v43 = 0;
    v51 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v22) != 1)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if (*(_BYTE *)(v7 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v23 = 0;
LABEL_46:
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_47;
LABEL_38:
  v25 = *(_QWORD *)(v7 + 16);
  v26 = v25 - 4;
  if (v25 >= 4)
  {
    if (v26 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v26) == 1)
      v43 = 0;
    else
      v43 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v26);
    v27 = v25 - 3;
    goto LABEL_56;
  }
  if (v25 == 3)
  {
    v27 = 0;
    v43 = 0;
LABEL_56:
    if (v27 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v27) == 1)
      v51 = 0;
    else
      v51 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v27);
    v30 = v25 - 2;
    goto LABEL_61;
  }
  if (v25 >= 2)
  {
    v30 = 0;
    v51 = 0;
    v43 = 0;
LABEL_61:
    if (v30 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v30) == 1)
      v60 = 0;
    else
      v60 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v30);
    v28 = v25 - 1;
    goto LABEL_66;
  }
  v28 = 0;
  v60 = 0;
  v43 = 0;
  v51 = 0;
  v29 = 0;
  if (v25 != 1)
    goto LABEL_78;
LABEL_66:
  if (v28 <= (int)v25 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v28) != 1)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v28);
      if (!*(_BYTE *)(v8 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v29 = 0;
LABEL_78:
    if (!*(_BYTE *)(v8 + 49))
      goto LABEL_68;
LABEL_79:
    v59 = 0;
    v45 = 0;
    v53 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v29 = 0;
  if (*(_BYTE *)(v8 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v15) == 1)
  {
    v45 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v45 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v13 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    v53 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v53 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v13);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v12 <= (int)v9 - 1 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v12) != 1)
  {
    v59 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v12);
    if (v9 >= 1)
      goto LABEL_102;
LABEL_80:
    v31 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v59 = 0;
  if (v9 < 1)
    goto LABEL_80;
LABEL_102:
  if (v10 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v10) == 1)
    goto LABEL_80;
  v31 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v46 >= 1)
  {
    v32 = 0;
    v50 = (uint64_t *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v49 = (__int32 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v7 + 40));
    v48 = **a4 + *(_QWORD *)(v8 + 40);
    do
    {
      v47 = v32;
      if (v54 >= 1)
      {
        v33 = 0;
        v57 = v49;
        v58 = v50;
        v56 = v48;
        do
        {
          v55 = v33;
          if (v63 >= 1)
          {
            v34 = 0;
            v35 = v57;
            v36 = v58;
            v37 = v56;
            do
            {
              v64 = v34;
              v38 = v62;
              v39 = v36;
              v40 = v35;
              v41 = v37;
              if (v62 >= 1)
              {
                do
                {
                  v42 = *v39;
                  a6.i32[0] = *v40;
                  v65 = vcvtq_f32_f16(a6).u64[0];
                  v66 = v42;
                  *(float *)v41 = std::operator/[abi:nn180100]<float>((float *)&v66, (float *)&v65);
                  *(_DWORD *)(v41 + 4) = a6.i32[0];
                  v41 += v31;
                  v40 = (__int32 *)((char *)v40 + v29);
                  v39 = (uint64_t *)((char *)v39 + v23);
                  --v38;
                }
                while (v38);
              }
              v34 = v64 + 1;
              v37 += v59;
              v35 = (__int32 *)((char *)v35 + v60);
              v36 = (uint64_t *)((char *)v36 + v61);
            }
            while (v64 + 1 != v63);
          }
          v33 = v55 + 1;
          v56 += v53;
          v57 = (__int32 *)((char *)v57 + v51);
          v58 = (uint64_t *)((char *)v58 + v52);
        }
        while (v55 + 1 != v54);
      }
      v32 = v47 + 1;
      v48 += v45;
      v49 = (__int32 *)((char *)v49 + v43);
      v50 = (uint64_t *)((char *)v50 + v44);
    }
    while (v47 + 1 != v46);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  __int16 *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  __int16 *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  __int16 *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  __int16 *v54;
  float *v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v64 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v63 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v63 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v62 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v62 = 0;
    else
      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v62 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  *v55 = *v53 / _S1;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v62);
      v41 = (float *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  float *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v56 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v55 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v55 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v57 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v39 = 0;
    v40 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  *v54 = COERCE_FLOAT(*v52 << 16) / *v53;
                  v54 = (float *)((char *)v54 + v38);
                  v53 = (float *)((char *)v53 + v34);
                  v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (float *)((char *)v50 + v37);
              v49 = (float *)((char *)v49 + v31);
              v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (float *)((char *)v46 + v36);
          v45 = (float *)((char *)v45 + v32);
          v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (float *)((char *)v42 + v57);
      v41 = (float *)((char *)v41 + v55);
      v40 = (unsigned __int16 *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  unsigned __int16 *v41;
  float *v42;
  uint64_t v43;
  float *v44;
  unsigned __int16 *v45;
  float *v46;
  uint64_t v47;
  float *v48;
  unsigned __int16 *v49;
  float *v50;
  uint64_t v51;
  float *v52;
  unsigned __int16 *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v56 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v56 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v55 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v55 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v55 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v55 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v57 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v39 = 0;
    v40 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  *v54 = *v52 / COERCE_FLOAT(*v53 << 16);
                  v54 = (float *)((char *)v54 + v38);
                  v53 = (unsigned __int16 *)((char *)v53 + v34);
                  v52 = (float *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (float *)((char *)v50 + v37);
              v49 = (unsigned __int16 *)((char *)v49 + v31);
              v48 = (float *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (float *)((char *)v46 + v36);
          v45 = (unsigned __int16 *)((char *)v45 + v32);
          v44 = (float *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (float *)((char *)v42 + v57);
      v41 = (unsigned __int16 *)((char *)v41 + v55);
      v40 = (float *)((char *)v40 + v56);
    }
    while (v39 != v58);
  }
  return result;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, double _D0, float16x4_t _D1)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int32 *v35;
  _DWORD *v36;
  _WORD *v37;
  uint64_t v38;
  _DWORD *v39;
  __int32 *v40;
  _WORD *v41;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  __int32 *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  __int32 *v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;

  v6 = **a1;
  v7 = (*a1)[1];
  v8 = **a2;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v9 - 1;
  if (v9 <= 0)
  {
    v12 = v9 - 2;
    v65 = 1;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v8 + 24);
  v65 = *(_QWORD *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    v12 = -1;
LABEL_5:
    v13 = v9 - 3;
    v66 = 1;
    v14 = 1;
LABEL_6:
    v15 = v9 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v12 = v9 - 2;
  v66 = *(_QWORD *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    v12 = 0;
    v14 = 0;
    v13 = -1;
    goto LABEL_6;
  }
  v13 = v9 - 3;
  v57 = *(_QWORD *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    v14 = 0;
    v13 = 0;
    v17 = 0;
    v15 = -1;
    v12 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v9 - 4;
  v18 = *(_QWORD *)(v11 + 8 * (v9 - 4));
LABEL_8:
  v49 = v18;
  if (*(_BYTE *)(v6 + 49))
  {
    v64 = 0;
    v47 = 0;
    v55 = 0;
    goto LABEL_37;
  }
  v19 = *(_QWORD *)(v6 + 16);
  v20 = v19 - 4;
  if (v19 >= 4)
  {
    if (v20 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) == 1)
      v47 = 0;
    else
      v47 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
    v21 = v19 - 3;
    goto LABEL_26;
  }
  if (v19 == 3)
  {
    v21 = 0;
    v47 = 0;
LABEL_26:
    if (v21 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v21) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    v24 = v19 - 2;
    goto LABEL_31;
  }
  if (v19 < 2)
  {
    v22 = 0;
    v64 = 0;
    v47 = 0;
    v55 = 0;
    v23 = 0;
    if (v19 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v24 = 0;
  v55 = 0;
  v47 = 0;
LABEL_31:
  if (v24 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v24) == 1)
    v64 = 0;
  else
    v64 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v24);
  v22 = v19 - 1;
LABEL_36:
  if (v22 > (int)v19 - 1)
  {
LABEL_37:
    v23 = 0;
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_38;
LABEL_47:
    v63 = 0;
    v46 = 0;
    v54 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v22) != 1)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if (*(_BYTE *)(v7 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v23 = 0;
LABEL_46:
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_47;
LABEL_38:
  v25 = *(_QWORD *)(v7 + 16);
  v26 = v25 - 4;
  if (v25 >= 4)
  {
    if (v26 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v26) == 1)
      v46 = 0;
    else
      v46 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v26);
    v27 = v25 - 3;
    goto LABEL_56;
  }
  if (v25 == 3)
  {
    v27 = 0;
    v46 = 0;
LABEL_56:
    if (v27 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v27) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v27);
    v30 = v25 - 2;
    goto LABEL_61;
  }
  if (v25 >= 2)
  {
    v30 = 0;
    v54 = 0;
    v46 = 0;
LABEL_61:
    if (v30 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v30) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v30);
    v28 = v25 - 1;
    goto LABEL_66;
  }
  v28 = 0;
  v63 = 0;
  v46 = 0;
  v54 = 0;
  v29 = 0;
  if (v25 != 1)
    goto LABEL_78;
LABEL_66:
  if (v28 <= (int)v25 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v28) != 1)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v28);
      if (!*(_BYTE *)(v8 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v29 = 0;
LABEL_78:
    if (!*(_BYTE *)(v8 + 49))
      goto LABEL_68;
LABEL_79:
    v62 = 0;
    v48 = 0;
    v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v29 = 0;
  if (*(_BYTE *)(v8 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v15) == 1)
  {
    v48 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v13 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    v56 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v56 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v13);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v12 <= (int)v9 - 1 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v12) != 1)
  {
    v62 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v12);
    if (v9 >= 1)
      goto LABEL_102;
LABEL_80:
    v31 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v62 = 0;
  if (v9 < 1)
    goto LABEL_80;
LABEL_102:
  if (v10 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v10) == 1)
    goto LABEL_80;
  v31 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v49 >= 1)
  {
    v32 = 0;
    v53 = (_DWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v52 = (__int32 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v7 + 40));
    v51 = (_WORD *)(**a4 + *(_QWORD *)(v8 + 40));
    do
    {
      v50 = v32;
      if (v57 >= 1)
      {
        v33 = 0;
        v60 = v52;
        v61 = v53;
        v59 = v51;
        do
        {
          v58 = v33;
          if (v66 >= 1)
          {
            v34 = 0;
            v35 = v60;
            v36 = v61;
            v37 = v59;
            do
            {
              v67 = v34;
              v38 = v65;
              v39 = v36;
              v40 = v35;
              v41 = v37;
              if (v65 >= 1)
              {
                do
                {
                  LODWORD(_D0) = *v39;
                  _D1.i32[0] = *v40;
                  v68 = vcvtq_f32_f16(_D1).u64[0];
                  v69 = vcvtq_f32_f16(*(float16x4_t *)&_D0).u64[0];
                  *(float *)&_D0 = std::operator/[abi:nn180100]<float>((float *)&v69, (float *)&v68);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            H1, S1
                  }
                  *v41 = LOWORD(_D0);
                  v41[1] = _D1.i16[0];
                  v41 = (_WORD *)((char *)v41 + v31);
                  v40 = (__int32 *)((char *)v40 + v29);
                  v39 = (_DWORD *)((char *)v39 + v23);
                  --v38;
                }
                while (v38);
              }
              v34 = v67 + 1;
              v37 = (_WORD *)((char *)v37 + v62);
              v35 = (__int32 *)((char *)v35 + v63);
              v36 = (_DWORD *)((char *)v36 + v64);
            }
            while (v67 + 1 != v66);
          }
          v33 = v58 + 1;
          v59 = (_WORD *)((char *)v59 + v56);
          v60 = (__int32 *)((char *)v60 + v54);
          v61 = (_DWORD *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      v32 = v50 + 1;
      v51 = (_WORD *)((char *)v51 + v48);
      v52 = (__int32 *)((char *)v52 + v46);
      v53 = (_DWORD *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  __int16 *v42;
  _WORD *v43;
  uint64_t v44;
  __int16 *v45;
  __int16 *v46;
  _WORD *v47;
  uint64_t v48;
  __int16 *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 *v53;
  __int16 *v54;
  _WORD *v55;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v67 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v66 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v66 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v66 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v66 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v65 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v65 = 0;
    else
      v65 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v65 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v65 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v65 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v67 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  _H1 = *v54;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  _S0 = _S0 / _S1;
                  __asm { FCVT            H0, S0 }
                  *v55 = LOWORD(_S0);
                  v55 = (_WORD *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (_WORD *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (_WORD *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (_WORD *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v65);
      v41 = (__int16 *)((char *)v41 + v66);
    }
    while (v40 != v67);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  _WORD *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  _WORD *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  _WORD *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  _WORD *v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v38 = 0;
    v39 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = COERCE_FLOAT(*v51 << 16) / COERCE_FLOAT(*v52 << 16);
                  *v53 = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000) * 0.0039062)));
                  v53 = (_WORD *)((char *)v53 + v37);
                  v52 = (unsigned __int16 *)((char *)v52 + v33);
                  v51 = (unsigned __int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_WORD *)((char *)v49 + v36);
              v48 = (unsigned __int16 *)((char *)v48 + v30);
              v47 = (unsigned __int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_WORD *)((char *)v45 + v35);
          v44 = (unsigned __int16 *)((char *)v44 + v31);
          v43 = (unsigned __int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      v41 = (_WORD *)((char *)v41 + v57);
      v40 = (unsigned __int16 *)((char *)v40 + v55);
      v39 = (unsigned __int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_QWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (uint64_t *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v51 / *v52;
                  v53 = (uint64_t *)((char *)v53 + v37);
                  v52 = (uint64_t *)((char *)v52 + v33);
                  v51 = (_QWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (uint64_t *)((char *)v49 + v36);
              v48 = (uint64_t *)((char *)v48 + v30);
              v47 = (_QWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (uint64_t *)((char *)v45 + v35);
          v44 = (uint64_t *)((char *)v44 + v31);
          v43 = (_QWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (uint64_t *)((char *)v41 + v56);
      v40 = (uint64_t *)((char *)v40 + v54);
      v39 = (_QWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  int *v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  int *v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  int *v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_DWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (int *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v51 / *v52;
                  v53 = (int *)((char *)v53 + v37);
                  v52 = (_DWORD *)((char *)v52 + v33);
                  v51 = (_DWORD *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (int *)((char *)v49 + v36);
              v48 = (_DWORD *)((char *)v48 + v30);
              v47 = (_DWORD *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (int *)((char *)v45 + v35);
          v44 = (_DWORD *)((char *)v44 + v31);
          v43 = (_DWORD *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (int *)((char *)v41 + v56);
      v40 = (_DWORD *)((char *)v40 + v54);
      v39 = (_DWORD *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 *v39;
  __int16 *v40;
  _WORD *v41;
  uint64_t v42;
  __int16 *v43;
  __int16 *v44;
  _WORD *v45;
  uint64_t v46;
  __int16 *v47;
  __int16 *v48;
  _WORD *v49;
  uint64_t v50;
  __int16 *v51;
  __int16 *v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v51 / *v52;
                  v53 = (_WORD *)((char *)v53 + v37);
                  v52 = (__int16 *)((char *)v52 + v33);
                  v51 = (__int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_WORD *)((char *)v49 + v36);
              v48 = (__int16 *)((char *)v48 + v30);
              v47 = (__int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_WORD *)((char *)v45 + v35);
          v44 = (__int16 *)((char *)v44 + v31);
          v43 = (__int16 *)((char *)v43 + result);
        }
        while (v42 != v57);
      }
      ++v38;
      v41 = (_WORD *)((char *)v41 + v56);
      v40 = (__int16 *)((char *)v40 + v54);
      v39 = (__int16 *)((char *)v39 + v55);
    }
    while (v38 != v18);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  _BYTE *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  _BYTE *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v55 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v55 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v55 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v54 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v54 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v54 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v54 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v56 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (char *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (char *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_BYTE *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  *v53 = *v51 / *v52;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v57);
      }
      ++v38;
      v41 += v56;
      v40 += v54;
      v39 += v55;
    }
    while (v38 != v18);
  }
  return result;
}

float std::operator/[abi:nn180100]<float>(float *a1, float *a2)
{
  float v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v10 = *a1;
  v9 = a1[1];
  v11 = a2[1];
  v13 = *a2;
  v2 = logb(fmaxf(fabsf(*a2), fabsf(v11)));
  if ((LODWORD(v2) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    v3 = 0;
    v5 = v11;
  }
  else
  {
    v3 = (int)v2;
    v4 = scalbn(v13, -(int)v2);
    v13 = v4;
    v5 = scalbn(v11, -(int)v2);
  }
  v12 = v5;
  v6 = (float)(v5 * v5) + (float)(v13 * v13);
  v7 = scalbn((float)((float)((float)(v9 * v5) + (float)(v10 * v13)) / v6), -v3);
  scalbn((float)((float)((float)(v9 * v13) - (float)(v10 * v12)) / v6), -v3);
  return v7;
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  uint64_t *v37;
  uint64_t v38;
  float v39;
  int8x16_t v40;
  int8x16_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  __float2 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  float *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  float v72;
  uint64_t v73;
  float v74[4];

  v5 = **a1;
  v4 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v68 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v68 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v69 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v60 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v69 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v52 = v16;
  if (*(_BYTE *)(v5 + 49))
  {
    v67 = 0;
    v50 = 0;
    v58 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v5 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v18) == 1)
      v50 = 0;
    else
      v50 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v50 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    v21 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v67 = 0;
    v50 = 0;
    v58 = 0;
    v70 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v21 = 0;
  v58 = 0;
  v50 = 0;
LABEL_31:
  if (v21 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v21) == 1)
    v67 = 0;
  else
    v67 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v70 = 0;
    if (!*(_BYTE *)(v4 + 49))
      goto LABEL_38;
LABEL_47:
    v66 = 0;
    v49 = 0;
    v57 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v20) != 1)
  {
    v70 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if (*(_BYTE *)(v4 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v70 = 0;
LABEL_46:
  if (*(_BYTE *)(v4 + 49))
    goto LABEL_47;
LABEL_38:
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_56;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v49 = 0;
LABEL_56:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_61;
  }
  if (v22 >= 2)
  {
    v27 = 0;
    v57 = 0;
    v49 = 0;
LABEL_61:
    if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
    v25 = v22 - 1;
    goto LABEL_66;
  }
  v25 = 0;
  v66 = 0;
  v49 = 0;
  v57 = 0;
  v26 = 0;
  if (v22 != 1)
    goto LABEL_78;
LABEL_66:
  if (v25 <= (int)v22 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v26 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v65 = 0;
    v51 = 0;
    v59 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v26 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v51 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_110;
  }
  else
  {
    v51 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_110;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_110:
    v59 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_113;
    goto LABEL_111;
  }
  v59 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_113;
LABEL_111:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v65 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_114;
LABEL_80:
    v28 = 0;
    goto LABEL_81;
  }
LABEL_113:
  v65 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_114:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v52 >= 1)
  {
    v29 = 0;
    v56 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v5 + 40));
    v55 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v4 + 40));
    v54 = **a4 + *(_QWORD *)(v6 + 40);
    while (1)
    {
      v53 = v29;
      if (v60 >= 1)
        break;
LABEL_83:
      v29 = v53 + 1;
      v54 += v51;
      v55 = (uint64_t *)((char *)v55 + v49);
      v56 = (float *)((char *)v56 + v50);
      if (v53 + 1 == v52)
        return;
    }
    v30 = 0;
    v63 = v55;
    v64 = v56;
    v62 = v54;
    while (1)
    {
      v61 = v30;
      if (v69 >= 1)
        break;
LABEL_86:
      v30 = v61 + 1;
      v62 += v59;
      v63 = (uint64_t *)((char *)v63 + v57);
      v64 = (float *)((char *)v64 + v58);
      if (v61 + 1 == v60)
        goto LABEL_83;
    }
    v31 = 0;
    v33 = v63;
    v32 = v64;
    v34 = v62;
    while (1)
    {
      v35 = v68;
      v36 = v32;
      v37 = v33;
      v38 = v34;
      if (v68 >= 1)
        break;
LABEL_89:
      ++v31;
      v34 += v65;
      v33 = (uint64_t *)((char *)v33 + v66);
      v32 = (float *)((char *)v32 + v67);
      if (v31 == v69)
        goto LABEL_86;
    }
    while (1)
    {
      v42 = *v36;
      v43 = v36[1];
      v73 = *v37;
      v44 = hypotf(v42, v43);
      v45 = logf(v44);
      v46 = atan2f(v43, v42);
      v74[0] = v45;
      v74[1] = v46;
      v39 = std::operator*[abi:nn180100]<float>((float *)&v73, v74);
      if (*(float *)v41.i32 == 0.0)
      {
        v71 = v41;
        v39 = expf(v39);
        v41.i32[0] = 0;
        v40.i64[0] = 0x8000000080000000;
        v40.i64[1] = 0x8000000080000000;
        v41.i32[0] = vbslq_s8(v40, v41, v71).u32[0];
      }
      else
      {
        if (fabsf(v39) == INFINITY)
        {
          if (v39 >= 0.0)
          {
            if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
            {
              if (fabsf(*(float *)v41.i32) == INFINITY)
                *(float *)v41.i32 = NAN;
              goto LABEL_93;
            }
          }
          else if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
          {
            *(float *)v41.i32 = 1.0;
          }
        }
        v72 = *(float *)v41.i32;
        v47 = expf(v39);
        v48 = __sincosf_stret(v72);
        v39 = v47 * v48.__cosval;
        *(float *)v41.i32 = v47 * v48.__sinval;
      }
LABEL_93:
      *(float *)v38 = v39;
      *(_DWORD *)(v38 + 4) = v41.i32[0];
      v38 += v28;
      v37 = (uint64_t *)((char *)v37 + v26);
      v36 = (float *)((char *)v36 + v70);
      if (!--v35)
        goto LABEL_89;
    }
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v59 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v59 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v60 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v51 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v51 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v43 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v58 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v41 = 0;
    else
      v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v58 = 0;
    v41 = 0;
    v49 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v49 = 0;
  v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v58 = 0;
  else
    v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v48 = 0;
    v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v57 = 0;
  v40 = 0;
  v48 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v56 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v42 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v50 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v56 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    v30 = 0;
    v47 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v46 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v45 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v44 = v30;
      if (v51 >= 1)
      {
        v31 = 0;
        v54 = v46;
        v55 = v47;
        v53 = v45;
        do
        {
          v52 = v31;
          if (v60 >= 1)
          {
            v32 = 0;
            v33 = v54;
            v34 = v55;
            v35 = v53;
            do
            {
              v61 = v32;
              v36 = v59;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *v39 = powf(*v37, *v38);
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (float *)((char *)v38 + v27);
                  v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v61 + 1;
              v35 = (float *)((char *)v35 + v56);
              v33 = (float *)((char *)v33 + v57);
              v34 = (float *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          v31 = v52 + 1;
          v53 = (float *)((char *)v53 + v50);
          v54 = (float *)((char *)v54 + v48);
          v55 = (float *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      v30 = v44 + 1;
      v45 = (float *)((char *)v45 + v42);
      v46 = (float *)((char *)v46 + v40);
      v47 = (float *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int16 *v36;
  uint64_t *v37;
  uint64_t v38;
  float v39;
  int8x16_t v40;
  int8x16_t v41;
  float v50;
  float v51;
  float v52;
  float v53;
  __float2 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t v77;
  float v78;
  uint64_t v79;
  float v80[4];

  v5 = **a1;
  v4 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v74 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v74 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v75 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v66 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v75 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v66 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v16;
  if (*(_BYTE *)(v5 + 49))
  {
    v73 = 0;
    v56 = 0;
    v64 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v5 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v18) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v56 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
      v64 = 0;
    else
      v64 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    v21 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v73 = 0;
    v56 = 0;
    v64 = 0;
    v76 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v21 = 0;
  v64 = 0;
  v56 = 0;
LABEL_31:
  if (v21 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v21) == 1)
    v73 = 0;
  else
    v73 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v76 = 0;
    if (!*(_BYTE *)(v4 + 49))
      goto LABEL_38;
LABEL_47:
    v72 = 0;
    v55 = 0;
    v63 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v20) != 1)
  {
    v76 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if (*(_BYTE *)(v4 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v76 = 0;
LABEL_46:
  if (*(_BYTE *)(v4 + 49))
    goto LABEL_47;
LABEL_38:
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_56;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v55 = 0;
LABEL_56:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_61;
  }
  if (v22 >= 2)
  {
    v27 = 0;
    v63 = 0;
    v55 = 0;
LABEL_61:
    if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
      v72 = 0;
    else
      v72 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
    v25 = v22 - 1;
    goto LABEL_66;
  }
  v25 = 0;
  v72 = 0;
  v55 = 0;
  v63 = 0;
  v26 = 0;
  if (v22 != 1)
    goto LABEL_78;
LABEL_66:
  if (v25 <= (int)v22 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v26 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v71 = 0;
    v57 = 0;
    v65 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v26 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v57 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_110;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_110;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_110:
    v65 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_113;
    goto LABEL_111;
  }
  v65 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_113;
LABEL_111:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v71 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_114;
LABEL_80:
    v28 = 0;
    goto LABEL_81;
  }
LABEL_113:
  v71 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_114:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v58 >= 1)
  {
    v29 = 0;
    v62 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v5 + 40));
    v61 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v4 + 40));
    v60 = **a4 + *(_QWORD *)(v6 + 40);
    while (1)
    {
      v59 = v29;
      if (v66 >= 1)
        break;
LABEL_83:
      v29 = v59 + 1;
      v60 += v57;
      v61 = (uint64_t *)((char *)v61 + v55);
      v62 = (__int16 *)((char *)v62 + v56);
      if (v59 + 1 == v58)
        return;
    }
    v30 = 0;
    v69 = v61;
    v70 = v62;
    v68 = v60;
    while (1)
    {
      v67 = v30;
      if (v75 >= 1)
        break;
LABEL_86:
      v30 = v67 + 1;
      v68 += v65;
      v69 = (uint64_t *)((char *)v69 + v63);
      v70 = (__int16 *)((char *)v70 + v64);
      if (v67 + 1 == v66)
        goto LABEL_83;
    }
    v31 = 0;
    v33 = v69;
    v32 = v70;
    v34 = v68;
    while (1)
    {
      v35 = v74;
      v36 = v32;
      v37 = v33;
      v38 = v34;
      if (v74 >= 1)
        break;
LABEL_89:
      ++v31;
      v34 += v71;
      v33 = (uint64_t *)((char *)v33 + v72);
      v32 = (__int16 *)((char *)v32 + v73);
      if (v31 == v75)
        goto LABEL_86;
    }
    while (1)
    {
      _H0 = *v36;
      __asm { FCVT            S8, H0 }
      _H0 = v36[1];
      __asm { FCVT            S9, H0 }
      v79 = *v37;
      v50 = hypotf(_S8, _S9);
      v51 = logf(v50);
      v52 = atan2f(_S9, _S8);
      v80[0] = v51;
      v80[1] = v52;
      v39 = std::operator*[abi:nn180100]<float>((float *)&v79, v80);
      if (*(float *)v41.i32 == 0.0)
      {
        v77 = v41;
        v39 = expf(v39);
        v41.i32[0] = 0;
        v40.i64[0] = 0x8000000080000000;
        v40.i64[1] = 0x8000000080000000;
        v41.i32[0] = vbslq_s8(v40, v41, v77).u32[0];
      }
      else
      {
        if (fabsf(v39) == INFINITY)
        {
          if (v39 >= 0.0)
          {
            if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
            {
              if (fabsf(*(float *)v41.i32) == INFINITY)
                *(float *)v41.i32 = NAN;
              goto LABEL_93;
            }
          }
          else if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
          {
            *(float *)v41.i32 = 1.0;
          }
        }
        v78 = *(float *)v41.i32;
        v53 = expf(v39);
        v54 = __sincosf_stret(v78);
        v39 = v53 * v54.__cosval;
        *(float *)v41.i32 = v53 * v54.__sinval;
      }
LABEL_93:
      *(float *)v38 = v39;
      *(_DWORD *)(v38 + 4) = v41.i32[0];
      v38 += v28;
      v37 = (uint64_t *)((char *)v37 + v26);
      v36 = (__int16 *)((char *)v36 + v76);
      if (!--v35)
        goto LABEL_89;
    }
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  __int16 *v34;
  float *v35;
  uint64_t v36;
  __int16 *v37;
  float *v38;
  float *v39;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  float *v60;
  __int16 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v65 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v65 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v66 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v57 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v66 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v49 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v64 = 0;
    v47 = 0;
    v55 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v47 = 0;
    else
      v47 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v47 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v64 = 0;
    v47 = 0;
    v55 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v55 = 0;
  v47 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v64 = 0;
  else
    v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v63 = 0;
    v46 = 0;
    v54 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v46 = 0;
    else
      v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v46 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v54 = 0;
    v46 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v63 = 0;
  v46 = 0;
  v54 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v62 = 0;
    v48 = 0;
    v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v48 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v56 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v62 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v62 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v49 >= 1)
  {
    v30 = 0;
    v53 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v52 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v51 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v50 = v30;
      if (v57 >= 1)
      {
        v31 = 0;
        v60 = v52;
        v61 = v53;
        v59 = v51;
        do
        {
          v58 = v31;
          if (v66 >= 1)
          {
            v32 = 0;
            v33 = v60;
            v34 = v61;
            v35 = v59;
            do
            {
              v67 = v32;
              v36 = v65;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v65 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  __asm { FCVT            S0, H0; float }
                  *v39 = powf(_S0, *v38);
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (float *)((char *)v38 + v27);
                  v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v67 + 1;
              v35 = (float *)((char *)v35 + v62);
              v33 = (float *)((char *)v33 + v63);
              v34 = (__int16 *)((char *)v34 + v64);
            }
            while (v67 + 1 != v66);
          }
          v31 = v58 + 1;
          v59 = (float *)((char *)v59 + v56);
          v60 = (float *)((char *)v60 + v54);
          v61 = (__int16 *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      v30 = v50 + 1;
      v51 = (float *)((char *)v51 + v48);
      v52 = (float *)((char *)v52 + v46);
      v53 = (__int16 *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  float *v37;
  _DWORD *v38;
  _DWORD *v39;
  int8x16_t v40;
  int8x16_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  __float2 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  float *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  float v72;
  unint64_t v73;
  float v74[4];

  v6 = **a1;
  v5 = (*a1)[1];
  v7 = **a2;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v8 - 1;
  if (v8 <= 0)
  {
    v11 = v8 - 2;
    v68 = 1;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v7 + 24);
  v68 = *(_QWORD *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v8 - 3;
    v69 = 1;
    v13 = 1;
LABEL_6:
    v14 = v8 - 4;
    v15 = 1;
    v60 = 1;
    v16 = 1;
LABEL_7:
    v17 = 1;
    goto LABEL_8;
  }
  v11 = v8 - 2;
  v69 = *(_QWORD *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    v11 = 0;
    v13 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v8 - 3;
  v60 = *(_QWORD *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    v13 = 0;
    v12 = 0;
    v16 = 0;
    v14 = -1;
    v11 = 1;
    v15 = 1;
    goto LABEL_7;
  }
  v15 = 0;
  v13 = 0;
  v16 = 0;
  v14 = v8 - 4;
  v17 = *(_QWORD *)(v10 + 8 * (v8 - 4));
LABEL_8:
  v52 = v17;
  if (*(_BYTE *)(v6 + 49))
  {
    v67 = 0;
    v50 = 0;
    v58 = 0;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 16);
  v19 = v18 - 4;
  if (v18 >= 4)
  {
    if (v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v19) == 1)
      v50 = 0;
    else
      v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v19);
    v20 = v18 - 3;
    goto LABEL_26;
  }
  if (v18 == 3)
  {
    v20 = 0;
    v50 = 0;
LABEL_26:
    if (v20 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
    v22 = v18 - 2;
    goto LABEL_31;
  }
  if (v18 < 2)
  {
    v21 = 0;
    v67 = 0;
    v50 = 0;
    v58 = 0;
    v70 = 0;
    if (v18 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v58 = 0;
  v50 = 0;
LABEL_31:
  if (v22 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v22) == 1)
    v67 = 0;
  else
    v67 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
  v21 = v18 - 1;
LABEL_36:
  if (v21 > (int)v18 - 1)
  {
LABEL_37:
    v70 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v66 = 0;
    v49 = 0;
    v57 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v21) != 1)
  {
    v70 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v70 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v49 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v57 = 0;
    v49 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v66 = 0;
  v49 = 0;
  v57 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v7 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_68;
LABEL_79:
    v65 = 0;
    v51 = 0;
    v59 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v15 & 1) != 0 || v14 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v14) == 1)
  {
    v51 = 0;
    if ((v16 & 1) != 0)
      goto LABEL_110;
  }
  else
  {
    v51 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14);
    if ((v16 & 1) != 0)
      goto LABEL_110;
  }
  if (v12 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v12) == 1)
  {
LABEL_110:
    v59 = 0;
    if ((v13 & 1) != 0)
      goto LABEL_113;
    goto LABEL_111;
  }
  v59 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v12);
  if ((v13 & 1) != 0)
    goto LABEL_113;
LABEL_111:
  if (v11 <= (int)v8 - 1 && *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v11) != 1)
  {
    v65 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v11);
    if (v8 >= 1)
      goto LABEL_114;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_113:
  v65 = 0;
  if (v8 < 1)
    goto LABEL_80;
LABEL_114:
  if (v9 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v52 >= 1)
  {
    v30 = 0;
    v56 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v55 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v54 = (_DWORD *)(**a4 + *(_QWORD *)(v7 + 40));
    while (1)
    {
      v53 = v30;
      if (v60 >= 1)
        break;
LABEL_83:
      v30 = v53 + 1;
      v54 = (_DWORD *)((char *)v54 + v51);
      v55 = (_DWORD *)((char *)v55 + v49);
      v56 = (float *)((char *)v56 + v50);
      if (v53 + 1 == v52)
        return;
    }
    v31 = 0;
    v63 = v55;
    v64 = v56;
    v62 = v54;
    while (1)
    {
      v61 = v31;
      if (v69 >= 1)
        break;
LABEL_86:
      v31 = v61 + 1;
      v62 = (_DWORD *)((char *)v62 + v59);
      v63 = (_DWORD *)((char *)v63 + v57);
      v64 = (float *)((char *)v64 + v58);
      if (v61 + 1 == v60)
        goto LABEL_83;
    }
    v32 = 0;
    v34 = v63;
    v33 = v64;
    v35 = v62;
    while (1)
    {
      v36 = v68;
      v37 = v33;
      v38 = v34;
      v39 = v35;
      if (v68 >= 1)
        break;
LABEL_89:
      ++v32;
      v35 = (_DWORD *)((char *)v35 + v65);
      v34 = (_DWORD *)((char *)v34 + v66);
      v33 = (float *)((char *)v33 + v67);
      if (v32 == v69)
        goto LABEL_86;
    }
    while (1)
    {
      v42 = *v37;
      v43 = v37[1];
      LODWORD(a5) = *v38;
      v73 = vcvtq_f32_f16(*(float16x4_t *)&a5).u64[0];
      v44 = hypotf(v42, v43);
      v45 = logf(v44);
      v46 = atan2f(v43, v42);
      v74[0] = v45;
      v74[1] = v46;
      *(float *)&a5 = std::operator*[abi:nn180100]<float>((float *)&v73, v74);
      if (*(float *)v41.i32 == 0.0)
      {
        v71 = v41;
        *(float *)&a5 = expf(*(float *)&a5);
        v41.i32[0] = 0;
        v40.i64[0] = 0x8000000080000000;
        v40.i64[1] = 0x8000000080000000;
        v41.i32[0] = vbslq_s8(v40, v41, v71).u32[0];
      }
      else
      {
        if (fabsf(*(float *)&a5) == INFINITY)
        {
          if (*(float *)&a5 >= 0.0)
          {
            if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
            {
              if (fabsf(*(float *)v41.i32) == INFINITY)
                *(float *)v41.i32 = NAN;
              goto LABEL_93;
            }
          }
          else if ((v41.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
          {
            *(float *)v41.i32 = 1.0;
          }
        }
        v72 = *(float *)v41.i32;
        v47 = expf(*(float *)&a5);
        v48 = __sincosf_stret(v72);
        *(float *)&a5 = v47 * v48.__cosval;
        *(float *)v41.i32 = v47 * v48.__sinval;
      }
LABEL_93:
      *v39 = LODWORD(a5);
      v39[1] = v41.i32[0];
      v39 = (_DWORD *)((char *)v39 + v29);
      v38 = (_DWORD *)((char *)v38 + v27);
      v37 = (float *)((char *)v37 + v70);
      if (!--v36)
        goto LABEL_89;
    }
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float *v37;
  __int16 *v38;
  float *v39;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  __int16 *v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  __int16 *v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v65 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v65 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v66 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v57 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v66 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v49 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v64 = 0;
    v47 = 0;
    v55 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v47 = 0;
    else
      v47 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v47 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v64 = 0;
    v47 = 0;
    v55 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v55 = 0;
  v47 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v64 = 0;
  else
    v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v63 = 0;
    v46 = 0;
    v54 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v46 = 0;
    else
      v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v46 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v54 = 0;
    v46 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v63 = 0;
  v46 = 0;
  v54 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v62 = 0;
    v48 = 0;
    v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v48 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v56 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v62 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v62 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v49 >= 1)
  {
    v30 = 0;
    v53 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v52 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v51 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v50 = v30;
      if (v57 >= 1)
      {
        v31 = 0;
        v60 = v52;
        v61 = v53;
        v59 = v51;
        do
        {
          v58 = v31;
          if (v66 >= 1)
          {
            v32 = 0;
            v33 = v60;
            v34 = v61;
            v35 = v59;
            do
            {
              v67 = v32;
              v36 = v65;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v65 >= 1)
              {
                do
                {
                  _H1 = *v38;
                  __asm { FCVT            S1, H1; float }
                  *v39 = powf(*v37, _S1);
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (__int16 *)((char *)v38 + v27);
                  v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v67 + 1;
              v35 = (float *)((char *)v35 + v62);
              v33 = (__int16 *)((char *)v33 + v63);
              v34 = (float *)((char *)v34 + v64);
            }
            while (v67 + 1 != v66);
          }
          v31 = v58 + 1;
          v59 = (float *)((char *)v59 + v56);
          v60 = (__int16 *)((char *)v60 + v54);
          v61 = (float *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      v30 = v50 + 1;
      v51 = (float *)((char *)v51 + v48);
      v52 = (__int16 *)((char *)v52 + v46);
      v53 = (float *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  unsigned __int16 *v34;
  float *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  float *v46;
  unsigned __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v59 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v59 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v60 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v51 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v51 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v43 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v58 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v41 = 0;
    else
      v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v58 = 0;
    v41 = 0;
    v49 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v49 = 0;
  v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v58 = 0;
  else
    v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v48 = 0;
    v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v57 = 0;
  v40 = 0;
  v48 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v56 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v42 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v50 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v56 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    v30 = 0;
    v47 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v46 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v45 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v44 = v30;
      if (v51 >= 1)
      {
        v31 = 0;
        v54 = v46;
        v55 = v47;
        v53 = v45;
        do
        {
          v52 = v31;
          if (v60 >= 1)
          {
            v32 = 0;
            v33 = v54;
            v34 = v55;
            v35 = v53;
            do
            {
              v61 = v32;
              v36 = v59;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *v39 = powf(COERCE_FLOAT(*v37 << 16), *v38);
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (float *)((char *)v38 + v27);
                  v37 = (unsigned __int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v61 + 1;
              v35 = (float *)((char *)v35 + v56);
              v33 = (float *)((char *)v33 + v57);
              v34 = (unsigned __int16 *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          v31 = v52 + 1;
          v53 = (float *)((char *)v53 + v50);
          v54 = (float *)((char *)v54 + v48);
          v55 = (unsigned __int16 *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      v30 = v44 + 1;
      v45 = (float *)((char *)v45 + v42);
      v46 = (float *)((char *)v46 + v40);
      v47 = (unsigned __int16 *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float *v37;
  unsigned __int16 *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  unsigned __int16 *v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  unsigned __int16 *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v59 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v59 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v60 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v51 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v51 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v43 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v58 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v41 = 0;
    else
      v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v58 = 0;
    v41 = 0;
    v49 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v49 = 0;
  v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v58 = 0;
  else
    v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v48 = 0;
    v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v57 = 0;
  v40 = 0;
  v48 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v56 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v42 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v50 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v56 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    v30 = 0;
    v47 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v46 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v45 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v44 = v30;
      if (v51 >= 1)
      {
        v31 = 0;
        v54 = v46;
        v55 = v47;
        v53 = v45;
        do
        {
          v52 = v31;
          if (v60 >= 1)
          {
            v32 = 0;
            v33 = v54;
            v34 = v55;
            v35 = v53;
            do
            {
              v61 = v32;
              v36 = v59;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *v39 = powf(*v37, COERCE_FLOAT(*v38 << 16));
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (unsigned __int16 *)((char *)v38 + v27);
                  v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v61 + 1;
              v35 = (float *)((char *)v35 + v56);
              v33 = (unsigned __int16 *)((char *)v33 + v57);
              v34 = (float *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          v31 = v52 + 1;
          v53 = (float *)((char *)v53 + v50);
          v54 = (unsigned __int16 *)((char *)v54 + v48);
          v55 = (float *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      v30 = v44 + 1;
      v45 = (float *)((char *)v45 + v42);
      v46 = (unsigned __int16 *)((char *)v46 + v40);
      v47 = (float *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, double _D0)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  _DWORD *v34;
  _WORD *v35;
  uint64_t v36;
  _WORD *v37;
  _DWORD *v38;
  _WORD *v39;
  int8x16_t v40;
  float v51;
  float v52;
  float v53;
  float v54;
  __float2 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  _DWORD *v62;
  _WORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _WORD *v69;
  _DWORD *v70;
  _WORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  float v79;
  unint64_t v80;
  float v81[4];

  v6 = **a1;
  v5 = (*a1)[1];
  v7 = **a2;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v8 - 1;
  if (v8 <= 0)
  {
    v11 = v8 - 2;
    v75 = 1;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v7 + 24);
  v75 = *(_QWORD *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v8 - 3;
    v76 = 1;
    v13 = 1;
LABEL_6:
    v14 = v8 - 4;
    v15 = 1;
    v67 = 1;
    v16 = 1;
LABEL_7:
    v17 = 1;
    goto LABEL_8;
  }
  v11 = v8 - 2;
  v76 = *(_QWORD *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    v11 = 0;
    v13 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v8 - 3;
  v67 = *(_QWORD *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    v13 = 0;
    v12 = 0;
    v16 = 0;
    v14 = -1;
    v11 = 1;
    v15 = 1;
    goto LABEL_7;
  }
  v15 = 0;
  v13 = 0;
  v16 = 0;
  v14 = v8 - 4;
  v17 = *(_QWORD *)(v10 + 8 * (v8 - 4));
LABEL_8:
  v59 = v17;
  if (*(_BYTE *)(v6 + 49))
  {
    v74 = 0;
    v57 = 0;
    v65 = 0;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 16);
  v19 = v18 - 4;
  if (v18 >= 4)
  {
    if (v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v19) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v19);
    v20 = v18 - 3;
    goto LABEL_26;
  }
  if (v18 == 3)
  {
    v20 = 0;
    v57 = 0;
LABEL_26:
    if (v20 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) == 1)
      v65 = 0;
    else
      v65 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
    v22 = v18 - 2;
    goto LABEL_31;
  }
  if (v18 < 2)
  {
    v21 = 0;
    v74 = 0;
    v57 = 0;
    v65 = 0;
    v77 = 0;
    if (v18 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v65 = 0;
  v57 = 0;
LABEL_31:
  if (v22 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v22) == 1)
    v74 = 0;
  else
    v74 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
  v21 = v18 - 1;
LABEL_36:
  if (v21 > (int)v18 - 1)
  {
LABEL_37:
    v77 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v73 = 0;
    v56 = 0;
    v64 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v21) != 1)
  {
    v77 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v77 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v56 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v64 = 0;
    else
      v64 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v64 = 0;
    v56 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v73 = 0;
    else
      v73 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v73 = 0;
  v56 = 0;
  v64 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v7 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_68;
LABEL_79:
    v72 = 0;
    v58 = 0;
    v66 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v15 & 1) != 0 || v14 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v14) == 1)
  {
    v58 = 0;
    if ((v16 & 1) != 0)
      goto LABEL_110;
  }
  else
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14);
    if ((v16 & 1) != 0)
      goto LABEL_110;
  }
  if (v12 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v12) == 1)
  {
LABEL_110:
    v66 = 0;
    if ((v13 & 1) != 0)
      goto LABEL_113;
    goto LABEL_111;
  }
  v66 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v12);
  if ((v13 & 1) != 0)
    goto LABEL_113;
LABEL_111:
  if (v11 <= (int)v8 - 1 && *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v11) != 1)
  {
    v72 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v11);
    if (v8 >= 1)
      goto LABEL_114;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_113:
  v72 = 0;
  if (v8 < 1)
    goto LABEL_80;
LABEL_114:
  if (v9 > (int)v8 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
LABEL_81:
  if (v59 >= 1)
  {
    v30 = 0;
    v63 = (_WORD *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v62 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v61 = (_WORD *)(**a4 + *(_QWORD *)(v7 + 40));
    while (1)
    {
      v60 = v30;
      if (v67 >= 1)
        break;
LABEL_83:
      v30 = v60 + 1;
      v61 = (_WORD *)((char *)v61 + v58);
      v62 = (_DWORD *)((char *)v62 + v56);
      v63 = (_WORD *)((char *)v63 + v57);
      if (v60 + 1 == v59)
        return;
    }
    v31 = 0;
    v70 = v62;
    v71 = v63;
    v69 = v61;
    while (1)
    {
      v68 = v31;
      if (v76 >= 1)
        break;
LABEL_86:
      v31 = v68 + 1;
      v69 = (_WORD *)((char *)v69 + v66);
      v70 = (_DWORD *)((char *)v70 + v64);
      v71 = (_WORD *)((char *)v71 + v65);
      if (v68 + 1 == v67)
        goto LABEL_83;
    }
    v32 = 0;
    v34 = v70;
    v33 = v71;
    v35 = v69;
    while (1)
    {
      v36 = v75;
      v37 = v33;
      v38 = v34;
      v39 = v35;
      if (v75 >= 1)
        break;
LABEL_89:
      ++v32;
      v35 = (_WORD *)((char *)v35 + v72);
      v34 = (_DWORD *)((char *)v34 + v73);
      v33 = (_WORD *)((char *)v33 + v74);
      if (v32 == v76)
        goto LABEL_86;
    }
    while (1)
    {
      LOWORD(_D0) = *v37;
      _H1 = v37[1];
      __asm
      {
        FCVT            S8, H0
        FCVT            S9, H1
      }
      LODWORD(_D0) = *v38;
      v80 = vcvtq_f32_f16(*(float16x4_t *)&_D0).u64[0];
      v51 = hypotf(_S8, _S9);
      v52 = logf(v51);
      v53 = atan2f(_S9, _S8);
      v81[0] = v52;
      v81[1] = v53;
      *(float *)&_D0 = std::operator*[abi:nn180100]<float>((float *)&v80, v81);
      if (*(float *)_Q1.i32 == 0.0)
      {
        v78 = _Q1;
        *(float *)&_D0 = expf(*(float *)&_D0);
        _Q1.i32[0] = 0;
        v40.i64[0] = 0x8000000080000000;
        v40.i64[1] = 0x8000000080000000;
        _Q1.i32[0] = vbslq_s8(v40, _Q1, v78).u32[0];
      }
      else
      {
        if (fabsf(*(float *)&_D0) == INFINITY)
        {
          if (*(float *)&_D0 >= 0.0)
          {
            if ((_Q1.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
            {
              if (fabsf(*(float *)_Q1.i32) == INFINITY)
                *(float *)_Q1.i32 = NAN;
              goto LABEL_93;
            }
          }
          else if ((_Q1.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
          {
            *(float *)_Q1.i32 = 1.0;
          }
        }
        v79 = *(float *)_Q1.i32;
        v54 = expf(*(float *)&_D0);
        v55 = __sincosf_stret(v79);
        *(float *)&_D0 = v54 * v55.__cosval;
        *(float *)_Q1.i32 = v54 * v55.__sinval;
      }
LABEL_93:
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      *v39 = _H0;
      v39[1] = _H1;
      v39 = (_WORD *)((char *)v39 + v29);
      v38 = (_DWORD *)((char *)v38 + v27);
      v37 = (_WORD *)((char *)v37 + v77);
      if (!--v36)
        goto LABEL_89;
    }
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  __int16 *v34;
  _WORD *v35;
  uint64_t v36;
  __int16 *v37;
  __int16 *v38;
  _WORD *v39;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  __int16 *v55;
  __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _WORD *v62;
  __int16 *v63;
  __int16 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v68 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v68 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v69 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v60 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v69 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v52 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v67 = 0;
    v50 = 0;
    v58 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v50 = 0;
    else
      v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v50 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v67 = 0;
    v50 = 0;
    v58 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v58 = 0;
  v50 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v67 = 0;
  else
    v67 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v66 = 0;
    v49 = 0;
    v57 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v49 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v57 = 0;
    v49 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v66 = 0;
  v49 = 0;
  v57 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v65 = 0;
    v51 = 0;
    v59 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v51 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v51 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v59 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v59 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v65 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v65 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v52 >= 1)
  {
    v30 = 0;
    v56 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v55 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v54 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v53 = v30;
      if (v60 >= 1)
      {
        v31 = 0;
        v63 = v55;
        v64 = v56;
        v62 = v54;
        do
        {
          v61 = v31;
          if (v69 >= 1)
          {
            v32 = 0;
            v33 = v63;
            v34 = v64;
            v35 = v62;
            do
            {
              v70 = v32;
              v36 = v68;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v68 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  _H1 = *v38;
                  __asm
                  {
                    FCVT            S0, H0; float
                    FCVT            S1, H1; float
                  }
                  _S0 = powf(_S0, _S1);
                  __asm { FCVT            H0, S0 }
                  *v39 = LOWORD(_S0);
                  v39 = (_WORD *)((char *)v39 + v29);
                  v38 = (__int16 *)((char *)v38 + v27);
                  v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v70 + 1;
              v35 = (_WORD *)((char *)v35 + v65);
              v33 = (__int16 *)((char *)v33 + v66);
              v34 = (__int16 *)((char *)v34 + v67);
            }
            while (v70 + 1 != v69);
          }
          v31 = v61 + 1;
          v62 = (_WORD *)((char *)v62 + v59);
          v63 = (__int16 *)((char *)v63 + v57);
          v64 = (__int16 *)((char *)v64 + v58);
        }
        while (v61 + 1 != v60);
      }
      v30 = v53 + 1;
      v54 = (_WORD *)((char *)v54 + v51);
      v55 = (__int16 *)((char *)v55 + v49);
      v56 = (__int16 *)((char *)v56 + v50);
    }
    while (v53 + 1 != v52);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  _WORD *v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  _WORD *v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v58 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v58 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v59 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v50 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v50 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v42 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v40 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v21 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v57 = 0;
    v40 = 0;
    v48 = 0;
    v61 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v21 = 0;
  v48 = 0;
  v40 = 0;
LABEL_31:
  if (v21 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
    v57 = 0;
  else
    v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v61 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v56 = 0;
    v39 = 0;
    v47 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v61 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v61 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v22 = *(_QWORD *)(v5 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v23) == 1)
      v39 = 0;
    else
      v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_56;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v39 = 0;
LABEL_56:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v47 = 0;
    else
      v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v26 = v22 - 2;
    goto LABEL_61;
  }
  if (v22 >= 2)
  {
    v26 = 0;
    v47 = 0;
    v39 = 0;
LABEL_61:
    if (v26 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
    v25 = v22 - 1;
    goto LABEL_66;
  }
  v25 = 0;
  v56 = 0;
  v39 = 0;
  v47 = 0;
  v60 = 0;
  if (v22 != 1)
    goto LABEL_78;
LABEL_66:
  if (v25 <= (int)v22 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) != 1)
    {
      v60 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v60 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v55 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v60 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v41 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v41 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v49 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v49 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v55 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v27 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v55 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v27 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v42 >= 1)
  {
    v28 = 0;
    v46 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v45 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v44 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v43 = v28;
      if (v50 >= 1)
      {
        v29 = 0;
        v53 = v45;
        v54 = v46;
        v52 = v44;
        do
        {
          v51 = v29;
          if (v59 >= 1)
          {
            v30 = 0;
            v32 = v53;
            v31 = v54;
            v33 = v52;
            do
            {
              v34 = v58;
              v35 = v31;
              v36 = v32;
              v37 = v33;
              if (v58 >= 1)
              {
                do
                {
                  v38 = powf(COERCE_FLOAT(*v35 << 16), COERCE_FLOAT(*v36 << 16));
                  *v37 = HIWORD(COERCE_UNSIGNED_INT(v38 + (float)(COERCE_FLOAT(LODWORD(v38) & 0xFF800000) * 0.0039062)));
                  v37 = (_WORD *)((char *)v37 + v27);
                  v36 = (unsigned __int16 *)((char *)v36 + v60);
                  v35 = (unsigned __int16 *)((char *)v35 + v61);
                  --v34;
                }
                while (v34);
              }
              ++v30;
              v33 = (_WORD *)((char *)v33 + v55);
              v32 = (unsigned __int16 *)((char *)v32 + v56);
              v31 = (unsigned __int16 *)((char *)v31 + v57);
            }
            while (v30 != v59);
          }
          v29 = v51 + 1;
          v52 = (_WORD *)((char *)v52 + v49);
          v53 = (unsigned __int16 *)((char *)v53 + v47);
          v54 = (unsigned __int16 *)((char *)v54 + v48);
        }
        while (v51 + 1 != v50);
      }
      v28 = v43 + 1;
      v44 = (_WORD *)((char *)v44 + v41);
      v45 = (unsigned __int16 *)((char *)v45 + v39);
      v46 = (unsigned __int16 *)((char *)v46 + v40);
    }
    while (v43 + 1 != v42);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v59 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v59 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v60 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v51 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v51 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v43 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v58 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v41 = 0;
    else
      v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v58 = 0;
    v41 = 0;
    v49 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v49 = 0;
  v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v58 = 0;
  else
    v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v48 = 0;
    v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v57 = 0;
  v40 = 0;
  v48 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v56 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v42 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v50 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v56 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    v30 = 0;
    v47 = (uint64_t *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v46 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v45 = (_QWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v44 = v30;
      if (v51 >= 1)
      {
        v31 = 0;
        v54 = v46;
        v55 = v47;
        v53 = v45;
        do
        {
          v52 = v31;
          if (v60 >= 1)
          {
            v32 = 0;
            v33 = v54;
            v34 = v55;
            v35 = v53;
            do
            {
              v61 = v32;
              v36 = v59;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *v39 = (uint64_t)pow((double)*v37, (double)*v38);
                  v39 = (_QWORD *)((char *)v39 + v29);
                  v38 = (uint64_t *)((char *)v38 + v27);
                  v37 = (uint64_t *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v61 + 1;
              v35 = (_QWORD *)((char *)v35 + v56);
              v33 = (uint64_t *)((char *)v33 + v57);
              v34 = (uint64_t *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          v31 = v52 + 1;
          v53 = (_QWORD *)((char *)v53 + v50);
          v54 = (uint64_t *)((char *)v54 + v48);
          v55 = (uint64_t *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      v30 = v44 + 1;
      v45 = (_QWORD *)((char *)v45 + v42);
      v46 = (uint64_t *)((char *)v46 + v40);
      v47 = (uint64_t *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  _DWORD *v35;
  uint64_t v36;
  int *v37;
  int *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  int *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v59 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v59 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v60 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v51 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v51 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v43 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v58 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v41 = 0;
    else
      v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v58 = 0;
    v41 = 0;
    v49 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v49 = 0;
  v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v58 = 0;
  else
    v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v48 = 0;
    v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v57 = 0;
  v40 = 0;
  v48 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v56 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v42 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v50 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v56 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    v30 = 0;
    v47 = (int *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v46 = (int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v45 = (_DWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v44 = v30;
      if (v51 >= 1)
      {
        v31 = 0;
        v54 = v46;
        v55 = v47;
        v53 = v45;
        do
        {
          v52 = v31;
          if (v60 >= 1)
          {
            v32 = 0;
            v33 = v54;
            v34 = v55;
            v35 = v53;
            do
            {
              v61 = v32;
              v36 = v59;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *v39 = (int)pow((double)*v37, (double)*v38);
                  v39 = (_DWORD *)((char *)v39 + v29);
                  v38 = (int *)((char *)v38 + v27);
                  v37 = (int *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v61 + 1;
              v35 = (_DWORD *)((char *)v35 + v56);
              v33 = (int *)((char *)v33 + v57);
              v34 = (int *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          v31 = v52 + 1;
          v53 = (_DWORD *)((char *)v53 + v50);
          v54 = (int *)((char *)v54 + v48);
          v55 = (int *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      v30 = v44 + 1;
      v45 = (_DWORD *)((char *)v45 + v42);
      v46 = (int *)((char *)v46 + v40);
      v47 = (int *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, long double a5, int16x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 *v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  _WORD *v39;
  __int16 *v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  __int16 *v48;
  _WORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  __int16 *v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v6 = **a1;
  v7 = (*a1)[1];
  v8 = **a2;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v9 - 1;
  if (v9 <= 0)
  {
    v12 = v9 - 2;
    v61 = 1;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v8 + 24);
  v61 = *(_QWORD *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    v12 = -1;
LABEL_5:
    v13 = v9 - 3;
    v62 = 1;
    v14 = 1;
LABEL_6:
    v15 = v9 - 4;
    v16 = 1;
    v53 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v12 = v9 - 2;
  v62 = *(_QWORD *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    v12 = 0;
    v14 = 0;
    v13 = -1;
    goto LABEL_6;
  }
  v13 = v9 - 3;
  v53 = *(_QWORD *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    v14 = 0;
    v13 = 0;
    v17 = 0;
    v15 = -1;
    v12 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v9 - 4;
  v18 = *(_QWORD *)(v11 + 8 * (v9 - 4));
LABEL_8:
  v45 = v18;
  if (*(_BYTE *)(v6 + 49))
  {
    v60 = 0;
    v43 = 0;
    v51 = 0;
    goto LABEL_37;
  }
  v19 = *(_QWORD *)(v6 + 16);
  v20 = v19 - 4;
  if (v19 >= 4)
  {
    if (v20 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) == 1)
      v43 = 0;
    else
      v43 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
    v21 = v19 - 3;
    goto LABEL_26;
  }
  if (v19 == 3)
  {
    v21 = 0;
    v43 = 0;
LABEL_26:
    if (v21 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v21) == 1)
      v51 = 0;
    else
      v51 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    v24 = v19 - 2;
    goto LABEL_31;
  }
  if (v19 < 2)
  {
    v22 = 0;
    v60 = 0;
    v43 = 0;
    v51 = 0;
    v23 = 0;
    if (v19 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v24 = 0;
  v51 = 0;
  v43 = 0;
LABEL_31:
  if (v24 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v24) == 1)
    v60 = 0;
  else
    v60 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v24);
  v22 = v19 - 1;
LABEL_36:
  if (v22 > (int)v19 - 1)
  {
LABEL_37:
    v23 = 0;
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_38;
LABEL_47:
    v59 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v22) != 1)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if (*(_BYTE *)(v7 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v23 = 0;
LABEL_46:
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_47;
LABEL_38:
  v25 = *(_QWORD *)(v7 + 16);
  v26 = v25 - 4;
  if (v25 >= 4)
  {
    if (v26 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v26) == 1)
      v42 = 0;
    else
      v42 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v26);
    v27 = v25 - 3;
    goto LABEL_56;
  }
  if (v25 == 3)
  {
    v27 = 0;
    v42 = 0;
LABEL_56:
    if (v27 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v27) == 1)
      v50 = 0;
    else
      v50 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v27);
    v30 = v25 - 2;
    goto LABEL_61;
  }
  if (v25 >= 2)
  {
    v30 = 0;
    v50 = 0;
    v42 = 0;
LABEL_61:
    if (v30 > (int)v25 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v30) == 1)
      v59 = 0;
    else
      v59 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v30);
    v28 = v25 - 1;
    goto LABEL_66;
  }
  v28 = 0;
  v59 = 0;
  v42 = 0;
  v50 = 0;
  v29 = 0;
  if (v25 != 1)
    goto LABEL_78;
LABEL_66:
  if (v28 <= (int)v25 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v28) != 1)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v28);
      if (!*(_BYTE *)(v8 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v29 = 0;
LABEL_78:
    if (!*(_BYTE *)(v8 + 49))
      goto LABEL_68;
LABEL_79:
    v58 = 0;
    v44 = 0;
    v52 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v29 = 0;
  if (*(_BYTE *)(v8 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v15) == 1)
  {
    v44 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v44 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v13 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v13) == 1)
  {
LABEL_98:
    v52 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v52 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v13);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v12 <= (int)v9 - 1 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v12) != 1)
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v12);
    if (v9 >= 1)
      goto LABEL_102;
LABEL_80:
    v31 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v58 = 0;
  if (v9 < 1)
    goto LABEL_80;
LABEL_102:
  if (v10 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v10) == 1)
    goto LABEL_80;
  v31 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v45 >= 1)
  {
    v32 = 0;
    v49 = (_WORD *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v48 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v7 + 40));
    v47 = (_WORD *)(**a4 + *(_QWORD *)(v8 + 40));
    do
    {
      v46 = v32;
      if (v53 >= 1)
      {
        v33 = 0;
        v56 = v48;
        v57 = v49;
        v55 = v47;
        do
        {
          v54 = v33;
          if (v62 >= 1)
          {
            v34 = 0;
            v35 = v56;
            v36 = v57;
            v37 = v55;
            do
            {
              v63 = v34;
              v38 = v61;
              v39 = v36;
              v40 = v35;
              v41 = v37;
              if (v61 >= 1)
              {
                do
                {
                  LOWORD(a5) = *v39;
                  a6.i16[0] = *v40;
                  a5 = pow((double)vmovl_s16(*(int16x4_t *)&a5).i32[0], (double)vmovl_s16(a6).i32[0]);
                  *v41 = (int)a5;
                  v41 = (_WORD *)((char *)v41 + v31);
                  v40 = (__int16 *)((char *)v40 + v29);
                  v39 = (_WORD *)((char *)v39 + v23);
                  --v38;
                }
                while (v38);
              }
              v34 = v63 + 1;
              v37 = (_WORD *)((char *)v37 + v58);
              v35 = (__int16 *)((char *)v35 + v59);
              v36 = (_WORD *)((char *)v36 + v60);
            }
            while (v63 + 1 != v62);
          }
          v33 = v54 + 1;
          v55 = (_WORD *)((char *)v55 + v52);
          v56 = (__int16 *)((char *)v56 + v50);
          v57 = (_WORD *)((char *)v57 + v51);
        }
        while (v54 + 1 != v53);
      }
      v32 = v46 + 1;
      v47 = (_WORD *)((char *)v47 + v44);
      v48 = (__int16 *)((char *)v48 + v42);
      v49 = (_WORD *)((char *)v49 + v43);
    }
    while (v46 + 1 != v45);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v59 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v59 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v60 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v51 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v51 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v43 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v58 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v41 = 0;
    else
      v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v58 = 0;
    v41 = 0;
    v49 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v49 = 0;
  v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v58 = 0;
  else
    v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v48 = 0;
    v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v57 = 0;
  v40 = 0;
  v48 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v56 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v42 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v50 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v56 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    v30 = 0;
    v47 = (char *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v46 = (char *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v45 = (_BYTE *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v44 = v30;
      if (v51 >= 1)
      {
        v31 = 0;
        v54 = v46;
        v55 = v47;
        v53 = v45;
        do
        {
          v52 = v31;
          if (v60 >= 1)
          {
            v32 = 0;
            v33 = v54;
            v34 = v55;
            v35 = v53;
            do
            {
              v61 = v32;
              v36 = v59;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *v39 = (int)pow((double)*v37, (double)*v38);
                  v39 += v29;
                  v38 += v27;
                  v37 += v21;
                  --v36;
                }
                while (v36);
              }
              v32 = v61 + 1;
              v35 += v56;
              v33 += v57;
              v34 += v58;
            }
            while (v61 + 1 != v60);
          }
          v31 = v52 + 1;
          v53 += v50;
          v54 += v48;
          v55 += v49;
        }
        while (v52 + 1 != v51);
      }
      v30 = v44 + 1;
      v45 += v42;
      v46 += v40;
      v47 += v41;
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float *v37;
  int *v38;
  float *v39;
  float v40;
  float v41;
  int v42;
  int v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  int *v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  int *v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  float v70;
  float v71;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v65 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v65 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v66 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v57 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v66 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v49 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v64 = 0;
    v47 = 0;
    v55 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v47 = 0;
    else
      v47 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v47 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v64 = 0;
    v47 = 0;
    v55 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v55 = 0;
  v47 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v64 = 0;
  else
    v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v63 = 0;
    v46 = 0;
    v54 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v46 = 0;
    else
      v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v46 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v54 = 0;
    v46 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v63 = 0;
  v46 = 0;
  v54 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v62 = 0;
    v48 = 0;
    v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v48 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v56 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v62 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v62 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v49 >= 1)
  {
    v30 = 0;
    v52 = (int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v53 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    v51 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    do
    {
      v50 = v30;
      if (v57 >= 1)
      {
        v31 = 0;
        v60 = v52;
        v61 = v51;
        v59 = v53;
        do
        {
          v58 = v31;
          if (v66 >= 1)
          {
            v32 = 0;
            v33 = v60;
            v34 = v61;
            v35 = v59;
            do
            {
              v67 = v32;
              v36 = v65;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v65 >= 1)
              {
                do
                {
                  v41 = v37[1];
                  v42 = *v38;
                  v43 = v38[1];
                  v70 = *v37;
                  v40 = v70;
                  v71 = v41;
                  v68 = v42;
                  v69 = v43;
                  v70 = truncf(std::operator/[abi:nn180100]<float>(&v70, (float *)&v68));
                  v71 = truncf(v44);
                  v68 = v42;
                  v69 = v43;
                  *v39 = v40 - std::operator*[abi:nn180100]<float>(&v70, (float *)&v68);
                  v39[1] = v41 - v45;
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (int *)((char *)v38 + v27);
                  v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v67 + 1;
              v35 = (float *)((char *)v35 + v62);
              v33 = (int *)((char *)v33 + v63);
              v34 = (float *)((char *)v34 + v64);
            }
            while (v67 + 1 != v66);
          }
          v31 = v58 + 1;
          v59 = (float *)((char *)v59 + v56);
          v60 = (int *)((char *)v60 + v54);
          v61 = (float *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      v30 = v50 + 1;
      v53 = (float *)((char *)v53 + v48);
      v52 = (int *)((char *)v52 + v46);
      v51 = (float *)((char *)v51 + v47);
    }
    while (v50 + 1 != v49);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v59 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v59 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v60 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v51 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v51 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v43 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v58 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v41 = 0;
    else
      v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v58 = 0;
    v41 = 0;
    v49 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v49 = 0;
  v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v58 = 0;
  else
    v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v48 = 0;
    v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v57 = 0;
  v40 = 0;
  v48 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v56 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v42 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v50 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v56 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    v30 = 0;
    v47 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v46 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v45 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v44 = v30;
      if (v51 >= 1)
      {
        v31 = 0;
        v54 = v46;
        v55 = v47;
        v53 = v45;
        do
        {
          v52 = v31;
          if (v60 >= 1)
          {
            v32 = 0;
            v33 = v54;
            v34 = v55;
            v35 = v53;
            do
            {
              v61 = v32;
              v36 = v59;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *v39 = fmodf(*v37, *v38);
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (float *)((char *)v38 + v27);
                  v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v61 + 1;
              v35 = (float *)((char *)v35 + v56);
              v33 = (float *)((char *)v33 + v57);
              v34 = (float *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          v31 = v52 + 1;
          v53 = (float *)((char *)v53 + v50);
          v54 = (float *)((char *)v54 + v48);
          v55 = (float *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      v30 = v44 + 1;
      v45 = (float *)((char *)v45 + v42);
      v46 = (float *)((char *)v46 + v40);
      v47 = (float *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  __int16 *v34;
  float *v35;
  uint64_t v36;
  __int16 *v37;
  int *v38;
  float *v39;
  int v48;
  int v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  int *v58;
  float *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  int *v66;
  __int16 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  float v76;
  float v77;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v71 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v71 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v72 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v63 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v72 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v63 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v55 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v70 = 0;
    v53 = 0;
    v61 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v53 = 0;
    else
      v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v53 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v61 = 0;
    else
      v61 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v70 = 0;
    v53 = 0;
    v61 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v61 = 0;
  v53 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v70 = 0;
  else
    v70 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v69 = 0;
    v52 = 0;
    v60 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v52 = 0;
    else
      v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v52 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v60 = 0;
    else
      v60 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v60 = 0;
    v52 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v69 = 0;
    else
      v69 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v69 = 0;
  v52 = 0;
  v60 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v68 = 0;
    v54 = 0;
    v62 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v54 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v54 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v62 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v62 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v68 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v68 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v55 >= 1)
  {
    v30 = 0;
    v58 = (int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v59 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    v57 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    do
    {
      v56 = v30;
      if (v63 >= 1)
      {
        v31 = 0;
        v66 = v58;
        v67 = v57;
        v65 = v59;
        do
        {
          v64 = v31;
          if (v72 >= 1)
          {
            v32 = 0;
            v33 = v66;
            v34 = v67;
            v35 = v65;
            do
            {
              v73 = v32;
              v36 = v71;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v71 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  __asm { FCVT            S8, H0 }
                  _H0 = v37[1];
                  __asm { FCVT            S9, H0 }
                  v48 = *v38;
                  v49 = v38[1];
                  v76 = _S8;
                  v77 = _S9;
                  v74 = v48;
                  v75 = v49;
                  v76 = truncf(std::operator/[abi:nn180100]<float>(&v76, (float *)&v74));
                  v77 = truncf(v50);
                  v74 = v48;
                  v75 = v49;
                  *v39 = _S8 - std::operator*[abi:nn180100]<float>(&v76, (float *)&v74);
                  v39[1] = _S9 - v51;
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (int *)((char *)v38 + v27);
                  v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v73 + 1;
              v35 = (float *)((char *)v35 + v68);
              v33 = (int *)((char *)v33 + v69);
              v34 = (__int16 *)((char *)v34 + v70);
            }
            while (v73 + 1 != v72);
          }
          v31 = v64 + 1;
          v65 = (float *)((char *)v65 + v62);
          v66 = (int *)((char *)v66 + v60);
          v67 = (__int16 *)((char *)v67 + v61);
        }
        while (v64 + 1 != v63);
      }
      v30 = v56 + 1;
      v59 = (float *)((char *)v59 + v54);
      v58 = (int *)((char *)v58 + v52);
      v57 = (__int16 *)((char *)v57 + v53);
    }
    while (v56 + 1 != v55);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  __int16 *v34;
  float *v35;
  uint64_t v36;
  __int16 *v37;
  float *v38;
  float *v39;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  float *v60;
  __int16 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v65 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v65 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v66 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v57 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v66 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v49 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v64 = 0;
    v47 = 0;
    v55 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v47 = 0;
    else
      v47 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v47 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v64 = 0;
    v47 = 0;
    v55 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v55 = 0;
  v47 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v64 = 0;
  else
    v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v63 = 0;
    v46 = 0;
    v54 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v46 = 0;
    else
      v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v46 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v54 = 0;
    v46 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v63 = 0;
  v46 = 0;
  v54 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v62 = 0;
    v48 = 0;
    v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v48 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v56 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v62 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v62 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v49 >= 1)
  {
    v30 = 0;
    v53 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v52 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v51 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v50 = v30;
      if (v57 >= 1)
      {
        v31 = 0;
        v60 = v52;
        v61 = v53;
        v59 = v51;
        do
        {
          v58 = v31;
          if (v66 >= 1)
          {
            v32 = 0;
            v33 = v60;
            v34 = v61;
            v35 = v59;
            do
            {
              v67 = v32;
              v36 = v65;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v65 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  __asm { FCVT            S0, H0; float }
                  *v39 = fmodf(_S0, *v38);
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (float *)((char *)v38 + v27);
                  v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v67 + 1;
              v35 = (float *)((char *)v35 + v62);
              v33 = (float *)((char *)v33 + v63);
              v34 = (__int16 *)((char *)v34 + v64);
            }
            while (v67 + 1 != v66);
          }
          v31 = v58 + 1;
          v59 = (float *)((char *)v59 + v56);
          v60 = (float *)((char *)v60 + v54);
          v61 = (__int16 *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      v30 = v50 + 1;
      v51 = (float *)((char *)v51 + v48);
      v52 = (float *)((char *)v52 + v46);
      v53 = (__int16 *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float *v37;
  __int16 *v38;
  float *v39;
  float v40;
  float v41;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  __int16 *v58;
  float *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  __int16 *v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  float v76;
  float v77;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v71 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v71 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v72 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v63 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v72 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v63 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v55 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v70 = 0;
    v53 = 0;
    v61 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v53 = 0;
    else
      v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v53 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v61 = 0;
    else
      v61 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v70 = 0;
    v53 = 0;
    v61 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v61 = 0;
  v53 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v70 = 0;
  else
    v70 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v69 = 0;
    v52 = 0;
    v60 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v52 = 0;
    else
      v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v52 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v60 = 0;
    else
      v60 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v60 = 0;
    v52 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v69 = 0;
    else
      v69 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v69 = 0;
  v52 = 0;
  v60 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v68 = 0;
    v54 = 0;
    v62 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v54 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v54 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v62 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v62 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v68 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v68 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v55 >= 1)
  {
    v30 = 0;
    v58 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v59 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    v57 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    do
    {
      v56 = v30;
      if (v63 >= 1)
      {
        v31 = 0;
        v66 = v58;
        v67 = v57;
        v65 = v59;
        do
        {
          v64 = v31;
          if (v72 >= 1)
          {
            v32 = 0;
            v33 = v66;
            v34 = v67;
            v35 = v65;
            do
            {
              v73 = v32;
              v36 = v71;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v71 >= 1)
              {
                do
                {
                  v41 = v37[1];
                  _H0 = *v38;
                  __asm { FCVT            S10, H0 }
                  _H0 = v38[1];
                  __asm { FCVT            S11, H0 }
                  v76 = *v37;
                  v40 = v76;
                  v77 = v41;
                  v74 = _S10;
                  v75 = _S11;
                  v76 = truncf(std::operator/[abi:nn180100]<float>(&v76, (float *)&v74));
                  v77 = truncf(v50);
                  v74 = _S10;
                  v75 = _S11;
                  *v39 = v40 - std::operator*[abi:nn180100]<float>(&v76, (float *)&v74);
                  v39[1] = v41 - v51;
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (__int16 *)((char *)v38 + v27);
                  v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v73 + 1;
              v35 = (float *)((char *)v35 + v68);
              v33 = (__int16 *)((char *)v33 + v69);
              v34 = (float *)((char *)v34 + v70);
            }
            while (v73 + 1 != v72);
          }
          v31 = v64 + 1;
          v65 = (float *)((char *)v65 + v62);
          v66 = (__int16 *)((char *)v66 + v60);
          v67 = (float *)((char *)v67 + v61);
        }
        while (v64 + 1 != v63);
      }
      v30 = v56 + 1;
      v59 = (float *)((char *)v59 + v54);
      v58 = (__int16 *)((char *)v58 + v52);
      v57 = (float *)((char *)v57 + v53);
    }
    while (v56 + 1 != v55);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float *v37;
  __int16 *v38;
  float *v39;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  __int16 *v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  __int16 *v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v65 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v65 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v66 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v57 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v66 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v49 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v64 = 0;
    v47 = 0;
    v55 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v47 = 0;
    else
      v47 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v47 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v64 = 0;
    v47 = 0;
    v55 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v55 = 0;
  v47 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v64 = 0;
  else
    v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v63 = 0;
    v46 = 0;
    v54 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v46 = 0;
    else
      v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v46 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v54 = 0;
    v46 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v63 = 0;
  v46 = 0;
  v54 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v62 = 0;
    v48 = 0;
    v56 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v48 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v56 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v62 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v62 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v49 >= 1)
  {
    v30 = 0;
    v53 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v52 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v51 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v50 = v30;
      if (v57 >= 1)
      {
        v31 = 0;
        v60 = v52;
        v61 = v53;
        v59 = v51;
        do
        {
          v58 = v31;
          if (v66 >= 1)
          {
            v32 = 0;
            v33 = v60;
            v34 = v61;
            v35 = v59;
            do
            {
              v67 = v32;
              v36 = v65;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v65 >= 1)
              {
                do
                {
                  _H1 = *v38;
                  __asm { FCVT            S1, H1; float }
                  *v39 = fmodf(*v37, _S1);
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (__int16 *)((char *)v38 + v27);
                  v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v67 + 1;
              v35 = (float *)((char *)v35 + v62);
              v33 = (__int16 *)((char *)v33 + v63);
              v34 = (float *)((char *)v34 + v64);
            }
            while (v67 + 1 != v66);
          }
          v31 = v58 + 1;
          v59 = (float *)((char *)v59 + v56);
          v60 = (__int16 *)((char *)v60 + v54);
          v61 = (float *)((char *)v61 + v55);
        }
        while (v58 + 1 != v57);
      }
      v30 = v50 + 1;
      v51 = (float *)((char *)v51 + v48);
      v52 = (__int16 *)((char *)v52 + v46);
      v53 = (float *)((char *)v53 + v47);
    }
    while (v50 + 1 != v49);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  unsigned __int16 *v34;
  float *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  float *v46;
  unsigned __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v59 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v59 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v60 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v51 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v51 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v43 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v58 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v41 = 0;
    else
      v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v58 = 0;
    v41 = 0;
    v49 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v49 = 0;
  v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v58 = 0;
  else
    v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v48 = 0;
    v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v57 = 0;
  v40 = 0;
  v48 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v56 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v42 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v50 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v56 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    v30 = 0;
    v47 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v46 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v45 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v44 = v30;
      if (v51 >= 1)
      {
        v31 = 0;
        v54 = v46;
        v55 = v47;
        v53 = v45;
        do
        {
          v52 = v31;
          if (v60 >= 1)
          {
            v32 = 0;
            v33 = v54;
            v34 = v55;
            v35 = v53;
            do
            {
              v61 = v32;
              v36 = v59;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *v39 = fmodf(COERCE_FLOAT(*v37 << 16), *v38);
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (float *)((char *)v38 + v27);
                  v37 = (unsigned __int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v61 + 1;
              v35 = (float *)((char *)v35 + v56);
              v33 = (float *)((char *)v33 + v57);
              v34 = (unsigned __int16 *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          v31 = v52 + 1;
          v53 = (float *)((char *)v53 + v50);
          v54 = (float *)((char *)v54 + v48);
          v55 = (unsigned __int16 *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      v30 = v44 + 1;
      v45 = (float *)((char *)v45 + v42);
      v46 = (float *)((char *)v46 + v40);
      v47 = (unsigned __int16 *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float *v37;
  unsigned __int16 *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  unsigned __int16 *v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  unsigned __int16 *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v59 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v59 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v60 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v51 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v51 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v43 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v58 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v41 = 0;
    else
      v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v41 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v58 = 0;
    v41 = 0;
    v49 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v49 = 0;
  v41 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v58 = 0;
  else
    v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v40 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v48 = 0;
    v40 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v57 = 0;
  v40 = 0;
  v48 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v56 = 0;
    v42 = 0;
    v50 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v42 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v50 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v56 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v43 >= 1)
  {
    v30 = 0;
    v47 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v46 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v45 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v44 = v30;
      if (v51 >= 1)
      {
        v31 = 0;
        v54 = v46;
        v55 = v47;
        v53 = v45;
        do
        {
          v52 = v31;
          if (v60 >= 1)
          {
            v32 = 0;
            v33 = v54;
            v34 = v55;
            v35 = v53;
            do
            {
              v61 = v32;
              v36 = v59;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v59 >= 1)
              {
                do
                {
                  *v39 = fmodf(*v37, COERCE_FLOAT(*v38 << 16));
                  v39 = (float *)((char *)v39 + v29);
                  v38 = (unsigned __int16 *)((char *)v38 + v27);
                  v37 = (float *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v61 + 1;
              v35 = (float *)((char *)v35 + v56);
              v33 = (unsigned __int16 *)((char *)v33 + v57);
              v34 = (float *)((char *)v34 + v58);
            }
            while (v61 + 1 != v60);
          }
          v31 = v52 + 1;
          v53 = (float *)((char *)v53 + v50);
          v54 = (unsigned __int16 *)((char *)v54 + v48);
          v55 = (float *)((char *)v55 + v49);
        }
        while (v52 + 1 != v51);
      }
      v30 = v44 + 1;
      v45 = (float *)((char *)v45 + v42);
      v46 = (unsigned __int16 *)((char *)v46 + v40);
      v47 = (float *)((char *)v47 + v41);
    }
    while (v44 + 1 != v43);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  __int16 *v34;
  _WORD *v35;
  uint64_t v36;
  __int16 *v37;
  __int16 *v38;
  _WORD *v39;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 *v71;
  __int16 *v72;
  _WORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  __int16 *v80;
  __int16 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  float v90;
  float v91;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v85 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v85 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v86 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v77 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v86 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v77 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v69 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v84 = 0;
    v67 = 0;
    v75 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v67 = 0;
    else
      v67 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v67 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v75 = 0;
    else
      v75 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v84 = 0;
    v67 = 0;
    v75 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v75 = 0;
  v67 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v84 = 0;
  else
    v84 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v83 = 0;
    v66 = 0;
    v74 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v66 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v74 = 0;
    else
      v74 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v74 = 0;
    v66 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v83 = 0;
    else
      v83 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v83 = 0;
  v66 = 0;
  v74 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v82 = 0;
    v68 = 0;
    v76 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v68 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v68 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v76 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v76 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v82 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v82 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v69 >= 1)
  {
    v30 = 0;
    v72 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v73 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    v71 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    do
    {
      v70 = v30;
      if (v77 >= 1)
      {
        v31 = 0;
        v80 = v72;
        v81 = v71;
        v79 = v73;
        do
        {
          v78 = v31;
          if (v86 >= 1)
          {
            v32 = 0;
            v33 = v80;
            v34 = v81;
            v35 = v79;
            do
            {
              v87 = v32;
              v36 = v85;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v85 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  _H1 = v37[1];
                  _H2 = *v38;
                  _H3 = v38[1];
                  __asm
                  {
                    FCVT            S8, H0
                    FCVT            S9, H1
                  }
                  v90 = _S8;
                  v91 = _S9;
                  __asm
                  {
                    FCVT            S10, H2
                    FCVT            S11, H3
                  }
                  v88 = _S10;
                  v89 = _S11;
                  _S0 = std::operator/[abi:nn180100]<float>(&v90, (float *)&v88);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            H1, S1
                    FCVT            S0, H0
                  }
                  _S0 = truncf(_S0);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            S1, H1
                  }
                  _S1 = truncf(_S1);
                  __asm
                  {
                    FCVT            H1, S1
                    FCVT            S0, H0
                    FCVT            S1, H1
                  }
                  v90 = _S0;
                  v91 = _S1;
                  v88 = _S10;
                  v89 = _S11;
                  _S0 = std::operator*[abi:nn180100]<float>(&v90, (float *)&v88);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            H1, S1
                    FCVT            S0, H0
                  }
                  _S0 = _S8 - _S0;
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            S1, H1
                  }
                  _S1 = _S9 - _S1;
                  __asm { FCVT            H1, S1 }
                  *v39 = LOWORD(_S0);
                  v39[1] = LOWORD(_S1);
                  v39 = (_WORD *)((char *)v39 + v29);
                  v38 = (__int16 *)((char *)v38 + v27);
                  v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v87 + 1;
              v35 = (_WORD *)((char *)v35 + v82);
              v33 = (__int16 *)((char *)v33 + v83);
              v34 = (__int16 *)((char *)v34 + v84);
            }
            while (v87 + 1 != v86);
          }
          v31 = v78 + 1;
          v79 = (_WORD *)((char *)v79 + v76);
          v80 = (__int16 *)((char *)v80 + v74);
          v81 = (__int16 *)((char *)v81 + v75);
        }
        while (v78 + 1 != v77);
      }
      v30 = v70 + 1;
      v73 = (_WORD *)((char *)v73 + v68);
      v72 = (__int16 *)((char *)v72 + v66);
      v71 = (__int16 *)((char *)v71 + v67);
    }
    while (v70 + 1 != v69);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  __int16 *v34;
  _WORD *v35;
  uint64_t v36;
  __int16 *v37;
  __int16 *v38;
  _WORD *v39;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  __int16 *v55;
  __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _WORD *v62;
  __int16 *v63;
  __int16 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v68 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v68 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v69 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v60 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v69 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v52 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v67 = 0;
    v50 = 0;
    v58 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v50 = 0;
    else
      v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v50 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v22 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v67 = 0;
    v50 = 0;
    v58 = 0;
    v21 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v22 = 0;
  v58 = 0;
  v50 = 0;
LABEL_31:
  if (v22 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
    v67 = 0;
  else
    v67 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v21 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v66 = 0;
    v49 = 0;
    v57 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 - 4;
  if (v23 >= 4)
  {
    if (v24 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v25 = v23 - 3;
    goto LABEL_56;
  }
  if (v23 == 3)
  {
    v25 = 0;
    v49 = 0;
LABEL_56:
    if (v25 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v28 = v23 - 2;
    goto LABEL_61;
  }
  if (v23 >= 2)
  {
    v28 = 0;
    v57 = 0;
    v49 = 0;
LABEL_61:
    if (v28 > (int)v23 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v26 = v23 - 1;
    goto LABEL_66;
  }
  v26 = 0;
  v66 = 0;
  v49 = 0;
  v57 = 0;
  v27 = 0;
  if (v23 != 1)
    goto LABEL_78;
LABEL_66:
  if (v26 <= (int)v23 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) != 1)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v27 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v65 = 0;
    v51 = 0;
    v59 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v27 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v51 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v51 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v59 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v59 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v65 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v29 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v65 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v52 >= 1)
  {
    v30 = 0;
    v56 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v55 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v54 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v53 = v30;
      if (v60 >= 1)
      {
        v31 = 0;
        v63 = v55;
        v64 = v56;
        v62 = v54;
        do
        {
          v61 = v31;
          if (v69 >= 1)
          {
            v32 = 0;
            v33 = v63;
            v34 = v64;
            v35 = v62;
            do
            {
              v70 = v32;
              v36 = v68;
              v37 = v34;
              v38 = v33;
              v39 = v35;
              if (v68 >= 1)
              {
                do
                {
                  _H0 = *v37;
                  _H1 = *v38;
                  __asm
                  {
                    FCVT            S0, H0; float
                    FCVT            S1, H1; float
                  }
                  _S0 = fmodf(_S0, _S1);
                  __asm { FCVT            H0, S0 }
                  *v39 = LOWORD(_S0);
                  v39 = (_WORD *)((char *)v39 + v29);
                  v38 = (__int16 *)((char *)v38 + v27);
                  v37 = (__int16 *)((char *)v37 + v21);
                  --v36;
                }
                while (v36);
              }
              v32 = v70 + 1;
              v35 = (_WORD *)((char *)v35 + v65);
              v33 = (__int16 *)((char *)v33 + v66);
              v34 = (__int16 *)((char *)v34 + v67);
            }
            while (v70 + 1 != v69);
          }
          v31 = v61 + 1;
          v62 = (_WORD *)((char *)v62 + v59);
          v63 = (__int16 *)((char *)v63 + v57);
          v64 = (__int16 *)((char *)v64 + v58);
        }
        while (v61 + 1 != v60);
      }
      v30 = v53 + 1;
      v54 = (_WORD *)((char *)v54 + v51);
      v55 = (__int16 *)((char *)v55 + v49);
      v56 = (__int16 *)((char *)v56 + v50);
    }
    while (v53 + 1 != v52);
  }
}

void mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  _WORD *v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  _WORD *v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v10 = v7 - 2;
    v58 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v58 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v7 - 3;
    v59 = 1;
    v12 = 1;
LABEL_6:
    v13 = v7 - 4;
    v14 = 1;
    v50 = 1;
    v15 = 1;
LABEL_7:
    v16 = 1;
    goto LABEL_8;
  }
  v10 = v7 - 2;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v10 = 0;
    v12 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v7 - 3;
  v50 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v13 = -1;
    v10 = 1;
    v14 = 1;
    goto LABEL_7;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v13 = v7 - 4;
  v16 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v42 = v16;
  if (*(_BYTE *)(v4 + 49))
  {
    v57 = 0;
    v40 = 0;
    v48 = 0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v4 + 16);
  v18 = v17 - 4;
  if (v17 >= 4)
  {
    if (v18 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
    v19 = v17 - 3;
    goto LABEL_26;
  }
  if (v17 == 3)
  {
    v19 = 0;
    v40 = 0;
LABEL_26:
    if (v19 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v19) == 1)
      v48 = 0;
    else
      v48 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
    v21 = v17 - 2;
    goto LABEL_31;
  }
  if (v17 < 2)
  {
    v20 = 0;
    v57 = 0;
    v40 = 0;
    v48 = 0;
    v61 = 0;
    if (v17 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v21 = 0;
  v48 = 0;
  v40 = 0;
LABEL_31:
  if (v21 > (int)v17 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
    v57 = 0;
  else
    v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
  v20 = v17 - 1;
LABEL_36:
  if (v20 > (int)v17 - 1)
  {
LABEL_37:
    v61 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v56 = 0;
    v39 = 0;
    v47 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v20) != 1)
  {
    v61 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v20);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v61 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v22 = *(_QWORD *)(v5 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v23) == 1)
      v39 = 0;
    else
      v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_56;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v39 = 0;
LABEL_56:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v24) == 1)
      v47 = 0;
    else
      v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
    v26 = v22 - 2;
    goto LABEL_61;
  }
  if (v22 >= 2)
  {
    v26 = 0;
    v47 = 0;
    v39 = 0;
LABEL_61:
    if (v26 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v26) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
    v25 = v22 - 1;
    goto LABEL_66;
  }
  v25 = 0;
  v56 = 0;
  v39 = 0;
  v47 = 0;
  v60 = 0;
  if (v22 != 1)
    goto LABEL_78;
LABEL_66:
  if (v25 <= (int)v22 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) != 1)
    {
      v60 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v60 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v55 = 0;
    v41 = 0;
    v49 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v60 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v14 & 1) != 0 || v13 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v13) == 1)
  {
    v41 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v41 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    if ((v15 & 1) != 0)
      goto LABEL_98;
  }
  if (v11 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
  {
LABEL_98:
    v49 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v49 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
  if ((v12 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v10 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) != 1)
  {
    v55 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v27 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v55 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v27 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v42 >= 1)
  {
    v28 = 0;
    v46 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v45 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v44 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v43 = v28;
      if (v50 >= 1)
      {
        v29 = 0;
        v53 = v45;
        v54 = v46;
        v52 = v44;
        do
        {
          v51 = v29;
          if (v59 >= 1)
          {
            v30 = 0;
            v32 = v53;
            v31 = v54;
            v33 = v52;
            do
            {
              v34 = v58;
              v35 = v31;
              v36 = v32;
              v37 = v33;
              if (v58 >= 1)
              {
                do
                {
                  v38 = fmodf(COERCE_FLOAT(*v35 << 16), COERCE_FLOAT(*v36 << 16));
                  *v37 = HIWORD(COERCE_UNSIGNED_INT(v38 + (float)(COERCE_FLOAT(LODWORD(v38) & 0xFF800000) * 0.0039062)));
                  v37 = (_WORD *)((char *)v37 + v27);
                  v36 = (unsigned __int16 *)((char *)v36 + v60);
                  v35 = (unsigned __int16 *)((char *)v35 + v61);
                  --v34;
                }
                while (v34);
              }
              ++v30;
              v33 = (_WORD *)((char *)v33 + v55);
              v32 = (unsigned __int16 *)((char *)v32 + v56);
              v31 = (unsigned __int16 *)((char *)v31 + v57);
            }
            while (v30 != v59);
          }
          v29 = v51 + 1;
          v52 = (_WORD *)((char *)v52 + v49);
          v53 = (unsigned __int16 *)((char *)v53 + v47);
          v54 = (unsigned __int16 *)((char *)v54 + v48);
        }
        while (v51 + 1 != v50);
      }
      v28 = v43 + 1;
      v44 = (_WORD *)((char *)v44 + v41);
      v45 = (unsigned __int16 *)((char *)v45 + v39);
      v46 = (unsigned __int16 *)((char *)v46 + v40);
    }
    while (v43 + 1 != v42);
  }
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)5>(uint64_t result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **(_QWORD **)result;
  v5 = *(_QWORD *)(*(_QWORD *)result + 8);
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v54 = 0;
    v56 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v54 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v54 = 0;
    v56 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v56 = 0;
  v54 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v53 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v53 = 0;
    else
      v53 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v53 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v53 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v53 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v55 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v55 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v55 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (_QWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (uint64_t *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  result = *v50 / *v51;
                  *v52 = *v50 % *v51;
                  v52 = (uint64_t *)((char *)v52 + v36);
                  v51 = (uint64_t *)((char *)v51 + v32);
                  v50 = (_QWORD *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (uint64_t *)((char *)v48 + v35);
              v47 = (uint64_t *)((char *)v47 + v29);
              v46 = (_QWORD *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (uint64_t *)((char *)v44 + v34);
          v43 = (uint64_t *)((char *)v43 + v30);
          v42 = (_QWORD *)((char *)v42 + v56);
        }
        while (v41 != v57);
      }
      ++v37;
      v40 = (uint64_t *)((char *)v40 + v55);
      v39 = (uint64_t *)((char *)v39 + v53);
      v38 = (_QWORD *)((char *)v38 + v54);
    }
    while (v37 != v18);
  }
  return result;
}

unint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)5>(unint64_t result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  int *v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  int *v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  int *v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **(_QWORD **)result;
  v5 = *(_QWORD *)(*(_QWORD *)result + 8);
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v57 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v57 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v54 = 0;
    v56 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v54 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v54 = 0;
    v56 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v56 = 0;
  v54 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v53 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v53 = 0;
    else
      v53 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v53 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v53 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v53 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v55 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v55 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v55 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (_DWORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (int *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v57 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  result = (*v50 / *v51);
                  *v52 = *v50 % *v51;
                  v52 = (int *)((char *)v52 + v36);
                  v51 = (_DWORD *)((char *)v51 + v32);
                  v50 = (_DWORD *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (int *)((char *)v48 + v35);
              v47 = (_DWORD *)((char *)v47 + v29);
              v46 = (_DWORD *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (int *)((char *)v44 + v34);
          v43 = (_DWORD *)((char *)v43 + v30);
          v42 = (_DWORD *)((char *)v42 + v56);
        }
        while (v41 != v57);
      }
      ++v37;
      v40 = (int *)((char *)v40 + v55);
      v39 = (_DWORD *)((char *)v39 + v53);
      v38 = (_DWORD *)((char *)v38 + v54);
    }
    while (v37 != v18);
  }
  return result;
}

unint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)5>(unint64_t result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  _WORD *v40;
  uint64_t v41;
  __int16 *v42;
  __int16 *v43;
  _WORD *v44;
  uint64_t v45;
  __int16 *v46;
  __int16 *v47;
  _WORD *v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  _WORD *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = **(_QWORD **)result;
  v5 = *(_QWORD *)(*(_QWORD *)result + 8);
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v60 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    v59 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v56 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v59 = 0;
    else
      v59 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v56 = 0;
    v59 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v59 = 0;
  v56 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v55 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v55 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v55 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v55 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v57 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v60 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  v53 = *v50;
                  v54 = *v51;
                  result = (v53 / v54);
                  *v52 = v53 % v54;
                  v52 = (_WORD *)((char *)v52 + v36);
                  v51 = (__int16 *)((char *)v51 + v32);
                  v50 = (__int16 *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (_WORD *)((char *)v48 + v35);
              v47 = (__int16 *)((char *)v47 + v29);
              v46 = (__int16 *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (_WORD *)((char *)v44 + v34);
          v43 = (__int16 *)((char *)v43 + v30);
          v42 = (__int16 *)((char *)v42 + v59);
        }
        while (v41 != v60);
      }
      ++v37;
      v40 = (_WORD *)((char *)v40 + v57);
      v39 = (__int16 *)((char *)v39 + v55);
      v38 = (__int16 *)((char *)v38 + v56);
    }
    while (v37 != v58);
  }
  return result;
}

unint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)5>(unint64_t result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _BYTE *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  _BYTE *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  _BYTE *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = **(_QWORD **)result;
  v5 = *(_QWORD *)(*(_QWORD *)result + 8);
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v60 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v60 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    v59 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v56 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v59 = 0;
    else
      v59 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v56 = 0;
    v59 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v59 = 0;
  v56 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v55 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v55 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v55 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v55 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v57 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_98;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_98:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_101;
    goto LABEL_99;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_101;
LABEL_99:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_102;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_101:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_102:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (char *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (char *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (_BYTE *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v60 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  v53 = *v50;
                  v54 = *v51;
                  result = (v53 / v54);
                  *v52 = v53 % v54;
                  v52 += v36;
                  v51 += v32;
                  v50 += v24;
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 += v35;
              v47 += v29;
              v46 += v19;
            }
            while (v45 != v13);
          }
          ++v41;
          v44 += v34;
          v43 += v30;
          v42 += v59;
        }
        while (v41 != v60);
      }
      ++v37;
      v40 += v57;
      v39 += v55;
      v38 += v56;
    }
    while (v37 != v58);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(uint64_t **result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  unint64_t *v40;
  uint64_t v41;
  float *v42;
  float *v43;
  unint64_t *v44;
  uint64_t v45;
  float *v46;
  float *v47;
  unint64_t *v48;
  uint64_t v49;
  float *v50;
  float *v51;
  unint64_t *v52;
  _BOOL4 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **result;
  v5 = (*result)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v61 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v61 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    v60 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v56 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v60 = 0;
    else
      v60 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v56 = 0;
    v60 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v60 = 0;
  v56 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v55 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v55 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v55 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v55 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v57 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_106;
    goto LABEL_104;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_106;
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_107;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_107:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (unint64_t *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v59 = v37;
      if (v61 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  result = (uint64_t **)(*(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32));
                  v53 = v50[1] < v51[1];
                  if (*v50 != *v51)
                    v53 = *v50 < *v51;
                  if (v53)
                    v54 = *(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32);
                  else
                    v54 = *(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32);
                  *v52 = v54;
                  v52 = (unint64_t *)((char *)v52 + v36);
                  v51 = (float *)((char *)v51 + v32);
                  v50 = (float *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (unint64_t *)((char *)v48 + v35);
              v47 = (float *)((char *)v47 + v29);
              v46 = (float *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (unint64_t *)((char *)v44 + v34);
          v43 = (float *)((char *)v43 + v30);
          v42 = (float *)((char *)v42 + v60);
        }
        while (v41 != v61);
      }
      ++v37;
      v40 = (unint64_t *)((char *)v40 + v57);
      v39 = (float *)((char *)v39 + v55);
      v38 = (float *)((char *)v38 + v56);
    }
    while (v59 + 1 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v59 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v58 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v58 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v58 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v58 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v57 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v57 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v57 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v57 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  v56 = *v53;
                  if (*v54 < *v53)
                    v56 = *v54;
                  *v55 = v56;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v57);
      v41 = (float *)((char *)v41 + v58);
    }
    while (v40 != v59);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(uint64_t **result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  float *v39;
  unint64_t *v40;
  uint64_t v41;
  __int16 *v42;
  float *v43;
  unint64_t *v44;
  uint64_t v45;
  __int16 *v46;
  float *v47;
  unint64_t *v48;
  uint64_t v49;
  __int16 *v50;
  float *v51;
  unint64_t *v52;
  _BOOL4 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = **result;
  v5 = (*result)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v69 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v69 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v66 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v64 = 0;
    v68 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v64 = 0;
    else
      v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v64 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v68 = 0;
    else
      v68 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v64 = 0;
    v68 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v68 = 0;
  v64 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v63 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v63 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v63 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v63 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v65 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v65 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v65 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_106;
    goto LABEL_104;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_106;
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_107;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_107:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (unint64_t *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v67 = v37;
      if (v69 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v50;
                  __asm { FCVT            S0, H0 }
                  _H1 = v50[1];
                  __asm { FCVT            S1, H1 }
                  result = (uint64_t **)(*(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32));
                  v61 = v51[1] > _S1;
                  if (*v51 != _S0)
                    v61 = *v51 > _S0;
                  if (v61)
                    v62 = LODWORD(_S0) | ((unint64_t)LODWORD(_S1) << 32);
                  else
                    v62 = *(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32);
                  *v52 = v62;
                  v52 = (unint64_t *)((char *)v52 + v36);
                  v51 = (float *)((char *)v51 + v32);
                  v50 = (__int16 *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (unint64_t *)((char *)v48 + v35);
              v47 = (float *)((char *)v47 + v29);
              v46 = (__int16 *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (unint64_t *)((char *)v44 + v34);
          v43 = (float *)((char *)v43 + v30);
          v42 = (__int16 *)((char *)v42 + v68);
        }
        while (v41 != v69);
      }
      ++v37;
      v40 = (unint64_t *)((char *)v40 + v65);
      v39 = (float *)((char *)v39 + v63);
      v38 = (__int16 *)((char *)v38 + v64);
    }
    while (v67 + 1 != v66);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  __int16 *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  __int16 *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  __int16 *v53;
  float *v54;
  float *v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v64 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v63 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v63 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v62 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v62 = 0;
    else
      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v62 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  if (*v54 < _S0)
                    _S0 = *v54;
                  *v55 = _S0;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v62);
      v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(uint64_t **result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  __int16 *v39;
  unint64_t *v40;
  uint64_t v41;
  float *v42;
  __int16 *v43;
  unint64_t *v44;
  uint64_t v45;
  float *v46;
  __int16 *v47;
  unint64_t *v48;
  uint64_t v49;
  float *v50;
  __int16 *v51;
  unint64_t *v52;
  _BOOL4 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = **result;
  v5 = (*result)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v69 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v69 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v66 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v64 = 0;
    v68 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v64 = 0;
    else
      v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v64 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v68 = 0;
    else
      v68 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v64 = 0;
    v68 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v68 = 0;
  v64 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v63 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v63 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v63 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v63 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v65 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v65 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v65 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_106;
    goto LABEL_104;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_106;
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_107;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_107:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (unint64_t *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v67 = v37;
      if (v69 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  result = (uint64_t **)(*(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32));
                  _H2 = *v51;
                  __asm { FCVT            S2, H2 }
                  _H3 = v51[1];
                  __asm { FCVT            S3, H3 }
                  v61 = v50[1] < _S3;
                  if (*v50 != _S2)
                    v61 = *v50 < _S2;
                  if (v61)
                    v62 = *(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32);
                  else
                    v62 = LODWORD(_S2) | ((unint64_t)LODWORD(_S3) << 32);
                  *v52 = v62;
                  v52 = (unint64_t *)((char *)v52 + v36);
                  v51 = (__int16 *)((char *)v51 + v32);
                  v50 = (float *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (unint64_t *)((char *)v48 + v35);
              v47 = (__int16 *)((char *)v47 + v29);
              v46 = (float *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (unint64_t *)((char *)v44 + v34);
          v43 = (__int16 *)((char *)v43 + v30);
          v42 = (float *)((char *)v42 + v68);
        }
        while (v41 != v69);
      }
      ++v37;
      v40 = (unint64_t *)((char *)v40 + v65);
      v39 = (__int16 *)((char *)v39 + v63);
      v38 = (float *)((char *)v38 + v64);
    }
    while (v67 + 1 != v66);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  __int16 *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  __int16 *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  __int16 *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  __int16 *v54;
  float *v55;
  float v56;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v65 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v64 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v64 = 0;
    else
      v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v64 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v64 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v64 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v63 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v63 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v63 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v63 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v65 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  v56 = *v53;
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  if (*v53 > _S1)
                    v56 = _S1;
                  *v55 = v56;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v63);
      v41 = (float *)((char *)v41 + v64);
    }
    while (v40 != v65);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  float *v53;
  float *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v59 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v58 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v58 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    v39 = 0;
    v40 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  LODWORD(v55) = *v52 << 16;
                  if (*v53 < v55)
                    v55 = *v53;
                  *v54 = v55;
                  v54 = (float *)((char *)v54 + v38);
                  v53 = (float *)((char *)v53 + v34);
                  v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (float *)((char *)v50 + v37);
              v49 = (float *)((char *)v49 + v31);
              v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (float *)((char *)v46 + v36);
          v45 = (float *)((char *)v45 + v32);
          v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (float *)((char *)v42 + v58);
      v41 = (float *)((char *)v41 + v56);
      v40 = (unsigned __int16 *)((char *)v40 + v57);
    }
    while (v39 != v59);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  unsigned __int16 *v41;
  int *v42;
  uint64_t v43;
  int *v44;
  unsigned __int16 *v45;
  int *v46;
  uint64_t v47;
  int *v48;
  unsigned __int16 *v49;
  int *v50;
  uint64_t v51;
  int *v52;
  unsigned __int16 *v53;
  int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v59 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v58 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v58 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    v39 = 0;
    v40 = (int *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (int *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  v55 = *v52;
                  if (*(float *)v52 > COERCE_FLOAT(*v53 << 16))
                    v55 = *v53 << 16;
                  *v54 = v55;
                  v54 = (int *)((char *)v54 + v38);
                  v53 = (unsigned __int16 *)((char *)v53 + v34);
                  v52 = (int *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (int *)((char *)v50 + v37);
              v49 = (unsigned __int16 *)((char *)v49 + v31);
              v48 = (int *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (int *)((char *)v46 + v36);
          v45 = (unsigned __int16 *)((char *)v45 + v32);
          v44 = (int *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (int *)((char *)v42 + v58);
      v41 = (unsigned __int16 *)((char *)v41 + v56);
      v40 = (int *)((char *)v40 + v57);
    }
    while (v39 != v59);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)15>(uint64_t **result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  int *v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  int *v44;
  uint64_t v45;
  unsigned __int16 *v46;
  unsigned __int16 *v47;
  int *v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int *v52;
  _BOOL4 v63;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v4 = **result;
  v5 = (*result)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v73 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v73 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v70 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v68 = 0;
    v72 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v68 = 0;
    else
      v68 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v68 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v72 = 0;
    else
      v72 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v68 = 0;
    v72 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v72 = 0;
  v68 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v67 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v67 = 0;
    else
      v67 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v67 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v67 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v67 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v69 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v69 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v69 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_106;
    goto LABEL_104;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_106;
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_107;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_107:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (int *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v71 = v37;
      if (v73 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  result = (uint64_t **)(*v50 | (v50[1] << 16));
                  _H0 = *v50;
                  _H1 = v50[1];
                  _H2 = *v51;
                  _H3 = v51[1];
                  __asm
                  {
                    FCVT            S3, H3
                    FCVT            S1, H1
                  }
                  v63 = _S1 < _S3;
                  __asm
                  {
                    FCVT            S1, H2
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    v63 = _S0 < _S1;
                  if (v63)
                    v66 = *v50 | (v50[1] << 16);
                  else
                    v66 = *v51 | (v51[1] << 16);
                  *v52 = v66;
                  v52 = (int *)((char *)v52 + v36);
                  v51 = (unsigned __int16 *)((char *)v51 + v32);
                  v50 = (unsigned __int16 *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (int *)((char *)v48 + v35);
              v47 = (unsigned __int16 *)((char *)v47 + v29);
              v46 = (unsigned __int16 *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (int *)((char *)v44 + v34);
          v43 = (unsigned __int16 *)((char *)v43 + v30);
          v42 = (unsigned __int16 *)((char *)v42 + v72);
        }
        while (v41 != v73);
      }
      ++v37;
      v40 = (int *)((char *)v40 + v69);
      v39 = (unsigned __int16 *)((char *)v39 + v67);
      v38 = (unsigned __int16 *)((char *)v38 + v68);
    }
    while (v71 + 1 != v70);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, double a5, float _S1)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  _WORD *v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  _WORD *v49;
  uint64_t v50;
  _WORD *v51;
  _WORD *v52;
  _WORD *v53;
  uint64_t v54;
  _WORD *v55;
  _WORD *v56;
  _WORD *v57;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v6 = **a1;
  v7 = (*a1)[1];
  v8 = **a2;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v9 - 1;
  if (v9 <= 0)
  {
    v13 = v9 - 2;
    v12 = 1;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    v13 = -1;
LABEL_5:
    v14 = v9 - 3;
    v15 = 1;
    v16 = 1;
LABEL_6:
    v17 = v9 - 4;
    v18 = 1;
    v19 = 1;
    v20 = 1;
LABEL_7:
    v21 = 1;
    goto LABEL_8;
  }
  v13 = v9 - 2;
  v15 = *(_QWORD *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    v13 = 0;
    v16 = 0;
    v14 = -1;
    goto LABEL_6;
  }
  v14 = v9 - 3;
  v19 = *(_QWORD *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    v16 = 0;
    v14 = 0;
    v20 = 0;
    v17 = -1;
    v13 = 1;
    v18 = 1;
    goto LABEL_7;
  }
  v18 = 0;
  v16 = 0;
  v20 = 0;
  v17 = v9 - 4;
  v21 = *(_QWORD *)(v11 + 8 * (v9 - 4));
LABEL_8:
  v67 = v21;
  if (*(_BYTE *)(v6 + 49))
  {
    v22 = 0;
    v66 = 0;
    result = 0;
    goto LABEL_37;
  }
  v24 = *(_QWORD *)(v6 + 16);
  v25 = v24 - 4;
  if (v24 >= 4)
  {
    if (v25 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v25) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v25);
    v26 = v24 - 3;
    goto LABEL_26;
  }
  if (v24 == 3)
  {
    v26 = 0;
    v66 = 0;
LABEL_26:
    if (v26 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v26) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v26);
    v29 = v24 - 2;
    goto LABEL_31;
  }
  if (v24 < 2)
  {
    v27 = 0;
    v22 = 0;
    v66 = 0;
    result = 0;
    v28 = 0;
    if (v24 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v29 = 0;
  result = 0;
  v66 = 0;
LABEL_31:
  if (v29 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v29) == 1)
    v22 = 0;
  else
    v22 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v29);
  v27 = v24 - 1;
LABEL_36:
  if (v27 > (int)v24 - 1)
  {
LABEL_37:
    v28 = 0;
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_38;
LABEL_47:
    v33 = 0;
    v65 = 0;
    v34 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v27) != 1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v27);
    if (*(_BYTE *)(v7 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v28 = 0;
LABEL_46:
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_47;
LABEL_38:
  v30 = *(_QWORD *)(v7 + 16);
  v31 = v30 - 4;
  if (v30 >= 4)
  {
    if (v31 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v31) == 1)
      v65 = 0;
    else
      v65 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v31);
    v32 = v30 - 3;
    goto LABEL_56;
  }
  if (v30 == 3)
  {
    v32 = 0;
    v65 = 0;
LABEL_56:
    if (v32 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v32) == 1)
      v34 = 0;
    else
      v34 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v32);
    v37 = v30 - 2;
    goto LABEL_61;
  }
  if (v30 >= 2)
  {
    v37 = 0;
    v34 = 0;
    v65 = 0;
LABEL_61:
    if (v37 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v37) == 1)
      v33 = 0;
    else
      v33 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v37);
    v35 = v30 - 1;
    goto LABEL_66;
  }
  v35 = 0;
  v33 = 0;
  v65 = 0;
  v34 = 0;
  v36 = 0;
  if (v30 != 1)
    goto LABEL_78;
LABEL_66:
  if (v35 <= (int)v30 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v35) != 1)
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v35);
      if (!*(_BYTE *)(v8 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v36 = 0;
LABEL_78:
    if (!*(_BYTE *)(v8 + 49))
      goto LABEL_68;
LABEL_79:
    v40 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v36 = 0;
  if (*(_BYTE *)(v8 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v18 & 1) != 0 || v17 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v17) == 1)
  {
    v38 = 0;
    if ((v20 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17);
    if ((v20 & 1) != 0)
      goto LABEL_100;
  }
  if (v14 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v14) == 1)
  {
LABEL_100:
    v39 = 0;
    if ((v16 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v39 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14);
  if ((v16 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v13 <= (int)v9 - 1 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v13) != 1)
  {
    v40 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v13);
    if (v9 >= 1)
      goto LABEL_104;
LABEL_80:
    v41 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v40 = 0;
  if (v9 < 1)
    goto LABEL_80;
LABEL_104:
  if (v10 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v10) == 1)
    goto LABEL_80;
  v41 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v67 >= 1)
  {
    v42 = 0;
    v43 = (_WORD *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v44 = (_WORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v7 + 40));
    v45 = (_WORD *)(**a4 + *(_QWORD *)(v8 + 40));
    do
    {
      if (v19 >= 1)
      {
        v46 = 0;
        v47 = v43;
        v48 = v44;
        v49 = v45;
        do
        {
          if (v15 >= 1)
          {
            v50 = 0;
            v51 = v47;
            v52 = v48;
            v53 = v49;
            do
            {
              v54 = v12;
              v55 = v51;
              v56 = v52;
              v57 = v53;
              if (v12 >= 1)
              {
                do
                {
                  LOWORD(_S0) = *v55;
                  LOWORD(_S1) = *v56;
                  __asm
                  {
                    FCVT            S2, H0
                    FCVT            S3, H1
                  }
                  if (_S3 < _S2)
                    _S0 = _S1;
                  *v57 = LOWORD(_S0);
                  v57 = (_WORD *)((char *)v57 + v41);
                  v56 = (_WORD *)((char *)v56 + v36);
                  v55 = (_WORD *)((char *)v55 + v28);
                  --v54;
                }
                while (v54);
              }
              ++v50;
              v53 = (_WORD *)((char *)v53 + v40);
              v52 = (_WORD *)((char *)v52 + v33);
              v51 = (_WORD *)((char *)v51 + v22);
            }
            while (v50 != v15);
          }
          ++v46;
          v49 = (_WORD *)((char *)v49 + v39);
          v48 = (_WORD *)((char *)v48 + v34);
          v47 = (_WORD *)((char *)v47 + result);
        }
        while (v46 != v19);
      }
      ++v42;
      v45 = (_WORD *)((char *)v45 + v38);
      v44 = (_WORD *)((char *)v44 + v65);
      v43 = (_WORD *)((char *)v43 + v66);
    }
    while (v42 != v67);
  }
  return result;
}

unint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)15>(unint64_t result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  _WORD *v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  _WORD *v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  _WORD *v48;
  uint64_t v49;
  unsigned __int16 *v50;
  _WORD *v51;
  _WORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **(_QWORD **)result;
  v5 = *(_QWORD *)(*(_QWORD *)result + 8);
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v57 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    v58 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v55 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v55 = 0;
    v58 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v58 = 0;
  v55 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v54 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v54 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v54 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v54 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v56 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (_WORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  v53 = *v50;
                  result = (v53 << 16);
                  if (COERCE_FLOAT((unsigned __int16)*v51 << 16) < COERCE_FLOAT(v53 << 16))
                    LOWORD(v53) = *v51;
                  *v52 = v53;
                  v52 = (_WORD *)((char *)v52 + v36);
                  v51 = (_WORD *)((char *)v51 + v32);
                  v50 = (unsigned __int16 *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (_WORD *)((char *)v48 + v35);
              v47 = (_WORD *)((char *)v47 + v29);
              v46 = (unsigned __int16 *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (_WORD *)((char *)v44 + v34);
          v43 = (_WORD *)((char *)v43 + v30);
          v42 = (unsigned __int16 *)((char *)v42 + v58);
        }
        while (v41 != v59);
      }
      ++v37;
      v40 = (_WORD *)((char *)v40 + v56);
      v39 = (_WORD *)((char *)v39 + v54);
      v38 = (unsigned __int16 *)((char *)v38 + v55);
    }
    while (v37 != v57);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (uint64_t *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_QWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = *v52;
                  if (*v52 >= *v51)
                    v54 = *v51;
                  *v53 = v54;
                  v53 = (_QWORD *)((char *)v53 + v37);
                  v52 = (uint64_t *)((char *)v52 + v33);
                  v51 = (uint64_t *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_QWORD *)((char *)v49 + v36);
              v48 = (uint64_t *)((char *)v48 + v30);
              v47 = (uint64_t *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_QWORD *)((char *)v45 + v35);
          v44 = (uint64_t *)((char *)v44 + v31);
          v43 = (uint64_t *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      v41 = (_QWORD *)((char *)v41 + v57);
      v40 = (uint64_t *)((char *)v40 + v55);
      v39 = (uint64_t *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int *v40;
  _DWORD *v41;
  uint64_t v42;
  int *v43;
  int *v44;
  _DWORD *v45;
  uint64_t v46;
  int *v47;
  int *v48;
  _DWORD *v49;
  uint64_t v50;
  int *v51;
  int *v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (int *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_DWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = *v52;
                  if (*v52 >= *v51)
                    v54 = *v51;
                  *v53 = v54;
                  v53 = (_DWORD *)((char *)v53 + v37);
                  v52 = (int *)((char *)v52 + v33);
                  v51 = (int *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_DWORD *)((char *)v49 + v36);
              v48 = (int *)((char *)v48 + v30);
              v47 = (int *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_DWORD *)((char *)v45 + v35);
          v44 = (int *)((char *)v44 + v31);
          v43 = (int *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      v41 = (_DWORD *)((char *)v41 + v57);
      v40 = (int *)((char *)v40 + v55);
      v39 = (int *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 *v39;
  __int16 *v40;
  _WORD *v41;
  uint64_t v42;
  __int16 *v43;
  __int16 *v44;
  _WORD *v45;
  uint64_t v46;
  __int16 *v47;
  __int16 *v48;
  _WORD *v49;
  uint64_t v50;
  __int16 *v51;
  __int16 *v52;
  _WORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = *v52;
                  if (v54 >= *v51)
                    LOWORD(v54) = *v51;
                  *v53 = v54;
                  v53 = (_WORD *)((char *)v53 + v37);
                  v52 = (__int16 *)((char *)v52 + v33);
                  v51 = (__int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_WORD *)((char *)v49 + v36);
              v48 = (__int16 *)((char *)v48 + v30);
              v47 = (__int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_WORD *)((char *)v45 + v35);
          v44 = (__int16 *)((char *)v44 + v31);
          v43 = (__int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      v41 = (_WORD *)((char *)v41 + v57);
      v40 = (__int16 *)((char *)v40 + v55);
      v39 = (__int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  char *v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_BYTE *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (char *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_BYTE *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = *v52;
                  if (v54 >= (char)*v51)
                    LOBYTE(v54) = *v51;
                  *v53 = v54;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v59);
      }
      ++v38;
      v41 += v57;
      v40 += v55;
      v39 += v56;
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(uint64_t **result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  unint64_t *v40;
  uint64_t v41;
  float *v42;
  float *v43;
  unint64_t *v44;
  uint64_t v45;
  float *v46;
  float *v47;
  unint64_t *v48;
  uint64_t v49;
  float *v50;
  float *v51;
  unint64_t *v52;
  _BOOL4 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = **result;
  v5 = (*result)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v61 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v61 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    v60 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v56 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v60 = 0;
    else
      v60 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v56 = 0;
    v60 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v60 = 0;
  v56 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v55 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v55 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v55 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v55 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v57 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_106;
    goto LABEL_104;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_106;
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_107;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_107:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (unint64_t *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v59 = v37;
      if (v61 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  result = (uint64_t **)(*(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32));
                  v53 = v50[1] > v51[1];
                  if (*v50 != *v51)
                    v53 = *v50 > *v51;
                  if (v53)
                    v54 = *(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32);
                  else
                    v54 = *(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32);
                  *v52 = v54;
                  v52 = (unint64_t *)((char *)v52 + v36);
                  v51 = (float *)((char *)v51 + v32);
                  v50 = (float *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (unint64_t *)((char *)v48 + v35);
              v47 = (float *)((char *)v47 + v29);
              v46 = (float *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (unint64_t *)((char *)v44 + v34);
          v43 = (float *)((char *)v43 + v30);
          v42 = (float *)((char *)v42 + v60);
        }
        while (v41 != v61);
      }
      ++v37;
      v40 = (unint64_t *)((char *)v40 + v57);
      v39 = (float *)((char *)v39 + v55);
      v38 = (float *)((char *)v38 + v56);
    }
    while (v59 + 1 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v59 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v58 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v58 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v58 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v58 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v57 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v57 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v57 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v57 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  v56 = *v53;
                  if (*v53 < *v54)
                    v56 = *v54;
                  *v55 = v56;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v57);
      v41 = (float *)((char *)v41 + v58);
    }
    while (v40 != v59);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(uint64_t **result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  float *v39;
  unint64_t *v40;
  uint64_t v41;
  __int16 *v42;
  float *v43;
  unint64_t *v44;
  uint64_t v45;
  __int16 *v46;
  float *v47;
  unint64_t *v48;
  uint64_t v49;
  __int16 *v50;
  float *v51;
  unint64_t *v52;
  _BOOL4 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = **result;
  v5 = (*result)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v69 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v69 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v66 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v64 = 0;
    v68 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v64 = 0;
    else
      v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v64 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v68 = 0;
    else
      v68 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v64 = 0;
    v68 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v68 = 0;
  v64 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v63 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v63 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v63 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v63 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v65 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v65 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v65 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_106;
    goto LABEL_104;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_106;
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_107;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_107:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (unint64_t *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v67 = v37;
      if (v69 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v50;
                  __asm { FCVT            S0, H0 }
                  _H1 = v50[1];
                  __asm { FCVT            S1, H1 }
                  result = (uint64_t **)(*(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32));
                  v61 = v51[1] < _S1;
                  if (*v51 != _S0)
                    v61 = *v51 < _S0;
                  if (v61)
                    v62 = LODWORD(_S0) | ((unint64_t)LODWORD(_S1) << 32);
                  else
                    v62 = *(unsigned int *)v51 | ((unint64_t)*((unsigned int *)v51 + 1) << 32);
                  *v52 = v62;
                  v52 = (unint64_t *)((char *)v52 + v36);
                  v51 = (float *)((char *)v51 + v32);
                  v50 = (__int16 *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (unint64_t *)((char *)v48 + v35);
              v47 = (float *)((char *)v47 + v29);
              v46 = (__int16 *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (unint64_t *)((char *)v44 + v34);
          v43 = (float *)((char *)v43 + v30);
          v42 = (__int16 *)((char *)v42 + v68);
        }
        while (v41 != v69);
      }
      ++v37;
      v40 = (unint64_t *)((char *)v40 + v65);
      v39 = (float *)((char *)v39 + v63);
      v38 = (__int16 *)((char *)v38 + v64);
    }
    while (v67 + 1 != v66);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  __int16 *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  __int16 *v49;
  float *v50;
  float *v51;
  uint64_t v52;
  __int16 *v53;
  float *v54;
  float *v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v64 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v63 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v63 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v63 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v63 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v62 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v62 = 0;
    else
      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v62 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v62 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v62 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v64 >= 1)
  {
    v40 = 0;
    v41 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  _H0 = *v53;
                  __asm { FCVT            S0, H0 }
                  if (*v54 > _S0)
                    _S0 = *v54;
                  *v55 = _S0;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (float *)((char *)v54 + v34);
                  v53 = (__int16 *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (float *)((char *)v50 + v31);
              v49 = (__int16 *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (float *)((char *)v46 + v32);
          v45 = (__int16 *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (float *)((char *)v42 + v62);
      v41 = (__int16 *)((char *)v41 + v63);
    }
    while (v40 != v64);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(uint64_t **result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  __int16 *v39;
  unint64_t *v40;
  uint64_t v41;
  float *v42;
  __int16 *v43;
  unint64_t *v44;
  uint64_t v45;
  float *v46;
  __int16 *v47;
  unint64_t *v48;
  uint64_t v49;
  float *v50;
  __int16 *v51;
  unint64_t *v52;
  _BOOL4 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = **result;
  v5 = (*result)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v69 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v69 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v66 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v64 = 0;
    v68 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v64 = 0;
    else
      v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v64 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v68 = 0;
    else
      v68 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v64 = 0;
    v68 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v68 = 0;
  v64 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v63 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v63 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v63 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v63 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v65 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v65 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v65 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_106;
    goto LABEL_104;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_106;
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_107;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_107:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (unint64_t *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v67 = v37;
      if (v69 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  result = (uint64_t **)(*(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32));
                  _H2 = *v51;
                  __asm { FCVT            S2, H2 }
                  _H3 = v51[1];
                  __asm { FCVT            S3, H3 }
                  v61 = v50[1] > _S3;
                  if (*v50 != _S2)
                    v61 = *v50 > _S2;
                  if (v61)
                    v62 = *(unsigned int *)v50 | ((unint64_t)*((unsigned int *)v50 + 1) << 32);
                  else
                    v62 = LODWORD(_S2) | ((unint64_t)LODWORD(_S3) << 32);
                  *v52 = v62;
                  v52 = (unint64_t *)((char *)v52 + v36);
                  v51 = (__int16 *)((char *)v51 + v32);
                  v50 = (float *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (unint64_t *)((char *)v48 + v35);
              v47 = (__int16 *)((char *)v47 + v29);
              v46 = (float *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (unint64_t *)((char *)v44 + v34);
          v43 = (__int16 *)((char *)v43 + v30);
          v42 = (float *)((char *)v42 + v68);
        }
        while (v41 != v69);
      }
      ++v37;
      v40 = (unint64_t *)((char *)v40 + v65);
      v39 = (__int16 *)((char *)v39 + v63);
      v38 = (float *)((char *)v38 + v64);
    }
    while (v67 + 1 != v66);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  __int16 *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  __int16 *v46;
  float *v47;
  uint64_t v48;
  float *v49;
  __int16 *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  __int16 *v54;
  float *v55;
  float v56;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v65 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v64 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v64 = 0;
    else
      v64 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v64 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v64 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v64 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v63 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v63 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v63 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v63 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v38 = 0;
    v36 = 0;
    v37 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v36 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v37 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v39 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v38 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v65 >= 1)
  {
    v40 = 0;
    v41 = (float *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v42 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v43 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v44 = 0;
        v45 = v41;
        v46 = v42;
        v47 = v43;
        do
        {
          if (v13 >= 1)
          {
            v48 = 0;
            v49 = v45;
            v50 = v46;
            v51 = v47;
            do
            {
              v52 = v10;
              v53 = v49;
              v54 = v50;
              v55 = v51;
              if (v10 >= 1)
              {
                do
                {
                  v56 = *v53;
                  _H1 = *v54;
                  __asm { FCVT            S1, H1 }
                  if (*v53 < _S1)
                    v56 = _S1;
                  *v55 = v56;
                  v55 = (float *)((char *)v55 + v39);
                  v54 = (__int16 *)((char *)v54 + v34);
                  v53 = (float *)((char *)v53 + v26);
                  --v52;
                }
                while (v52);
              }
              ++v48;
              v51 = (float *)((char *)v51 + v38);
              v50 = (__int16 *)((char *)v50 + v31);
              v49 = (float *)((char *)v49 + v20);
            }
            while (v48 != v13);
          }
          ++v44;
          v47 = (float *)((char *)v47 + v37);
          v46 = (__int16 *)((char *)v46 + v32);
          v45 = (float *)((char *)v45 + result);
        }
        while (v44 != v17);
      }
      ++v40;
      v43 = (float *)((char *)v43 + v36);
      v42 = (__int16 *)((char *)v42 + v63);
      v41 = (float *)((char *)v41 + v64);
    }
    while (v40 != v65);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  float *v53;
  float *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v59 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v58 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v58 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    v39 = 0;
    v40 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (float *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  LODWORD(v55) = *v52 << 16;
                  if (*v53 > v55)
                    v55 = *v53;
                  *v54 = v55;
                  v54 = (float *)((char *)v54 + v38);
                  v53 = (float *)((char *)v53 + v34);
                  v52 = (unsigned __int16 *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (float *)((char *)v50 + v37);
              v49 = (float *)((char *)v49 + v31);
              v48 = (unsigned __int16 *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (float *)((char *)v46 + v36);
          v45 = (float *)((char *)v45 + v32);
          v44 = (unsigned __int16 *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (float *)((char *)v42 + v58);
      v41 = (float *)((char *)v41 + v56);
      v40 = (unsigned __int16 *)((char *)v40 + v57);
    }
    while (v39 != v59);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  unsigned __int16 *v41;
  int *v42;
  uint64_t v43;
  int *v44;
  unsigned __int16 *v45;
  int *v46;
  uint64_t v47;
  int *v48;
  unsigned __int16 *v49;
  int *v50;
  uint64_t v51;
  int *v52;
  unsigned __int16 *v53;
  int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v17 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v18 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v18 = 0;
  v15 = v7 - 4;
  v19 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v59 = v19;
  if (*(_BYTE *)(v4 + 49))
  {
    v20 = 0;
    v57 = 0;
    result = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v4 + 16);
  v23 = v22 - 4;
  if (v22 >= 4)
  {
    if (v23 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v24 = v22 - 3;
    goto LABEL_26;
  }
  if (v22 == 3)
  {
    v24 = 0;
    v57 = 0;
LABEL_26:
    if (v24 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    v27 = v22 - 2;
    goto LABEL_31;
  }
  if (v22 < 2)
  {
    v25 = 0;
    v20 = 0;
    v57 = 0;
    result = 0;
    v26 = 0;
    if (v22 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v27 = 0;
  result = 0;
  v57 = 0;
LABEL_31:
  if (v27 > (int)v22 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  v25 = v22 - 1;
LABEL_36:
  if (v25 > (int)v22 - 1)
  {
LABEL_37:
    v26 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v31 = 0;
    v56 = 0;
    v32 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) != 1)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v26 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v28 = *(_QWORD *)(v5 + 16);
  v29 = v28 - 4;
  if (v28 >= 4)
  {
    if (v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v30 = v28 - 3;
    goto LABEL_56;
  }
  if (v28 == 3)
  {
    v30 = 0;
    v56 = 0;
LABEL_56:
    if (v30 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      v32 = 0;
    else
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
    v35 = v28 - 2;
    goto LABEL_61;
  }
  if (v28 >= 2)
  {
    v35 = 0;
    v32 = 0;
    v56 = 0;
LABEL_61:
    if (v35 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v35) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v35);
    v33 = v28 - 1;
    goto LABEL_66;
  }
  v33 = 0;
  v31 = 0;
  v56 = 0;
  v32 = 0;
  v34 = 0;
  if (v28 != 1)
    goto LABEL_78;
LABEL_66:
  if (v33 <= (int)v28 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) != 1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v34 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v37 = 0;
    v58 = 0;
    v36 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v34 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v58 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v18 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v36 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v38 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v37 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v59 >= 1)
  {
    v39 = 0;
    v40 = (int *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v41 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v42 = (int *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v17 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v41;
        v46 = v42;
        do
        {
          if (v13 >= 1)
          {
            v47 = 0;
            v48 = v44;
            v49 = v45;
            v50 = v46;
            do
            {
              v51 = v10;
              v52 = v48;
              v53 = v49;
              v54 = v50;
              if (v10 >= 1)
              {
                do
                {
                  v55 = *v52;
                  if (*(float *)v52 < COERCE_FLOAT(*v53 << 16))
                    v55 = *v53 << 16;
                  *v54 = v55;
                  v54 = (int *)((char *)v54 + v38);
                  v53 = (unsigned __int16 *)((char *)v53 + v34);
                  v52 = (int *)((char *)v52 + v26);
                  --v51;
                }
                while (v51);
              }
              ++v47;
              v50 = (int *)((char *)v50 + v37);
              v49 = (unsigned __int16 *)((char *)v49 + v31);
              v48 = (int *)((char *)v48 + v20);
            }
            while (v47 != v13);
          }
          ++v43;
          v46 = (int *)((char *)v46 + v36);
          v45 = (unsigned __int16 *)((char *)v45 + v32);
          v44 = (int *)((char *)v44 + result);
        }
        while (v43 != v17);
      }
      ++v39;
      v42 = (int *)((char *)v42 + v58);
      v41 = (unsigned __int16 *)((char *)v41 + v56);
      v40 = (int *)((char *)v40 + v57);
    }
    while (v39 != v59);
  }
  return result;
}

uint64_t **mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)16>(uint64_t **result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  int *v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  int *v44;
  uint64_t v45;
  unsigned __int16 *v46;
  unsigned __int16 *v47;
  int *v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int *v52;
  _BOOL4 v63;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v4 = **result;
  v5 = (*result)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v73 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v73 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v70 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v68 = 0;
    v72 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v68 = 0;
    else
      v68 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v68 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v72 = 0;
    else
      v72 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v68 = 0;
    v72 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v72 = 0;
  v68 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v67 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v67 = 0;
    else
      v67 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v67 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v67 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v67 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v69 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v69 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v69 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_103:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_106;
    goto LABEL_104;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_106;
LABEL_104:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_107;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_106:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_107:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (unsigned __int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (int *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      v71 = v37;
      if (v73 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  result = (uint64_t **)(*v50 | (v50[1] << 16));
                  _H0 = *v50;
                  _H1 = v50[1];
                  _H2 = *v51;
                  _H3 = v51[1];
                  __asm
                  {
                    FCVT            S3, H3
                    FCVT            S1, H1
                  }
                  v63 = _S1 > _S3;
                  __asm
                  {
                    FCVT            S1, H2
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    v63 = _S0 > _S1;
                  if (v63)
                    v66 = *v50 | (v50[1] << 16);
                  else
                    v66 = *v51 | (v51[1] << 16);
                  *v52 = v66;
                  v52 = (int *)((char *)v52 + v36);
                  v51 = (unsigned __int16 *)((char *)v51 + v32);
                  v50 = (unsigned __int16 *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (int *)((char *)v48 + v35);
              v47 = (unsigned __int16 *)((char *)v47 + v29);
              v46 = (unsigned __int16 *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (int *)((char *)v44 + v34);
          v43 = (unsigned __int16 *)((char *)v43 + v30);
          v42 = (unsigned __int16 *)((char *)v42 + v72);
        }
        while (v41 != v73);
      }
      ++v37;
      v40 = (int *)((char *)v40 + v69);
      v39 = (unsigned __int16 *)((char *)v39 + v67);
      v38 = (unsigned __int16 *)((char *)v38 + v68);
    }
    while (v71 + 1 != v70);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4, double a5, float _S1)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  _WORD *v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  _WORD *v49;
  uint64_t v50;
  _WORD *v51;
  _WORD *v52;
  _WORD *v53;
  uint64_t v54;
  _WORD *v55;
  _WORD *v56;
  _WORD *v57;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v6 = **a1;
  v7 = (*a1)[1];
  v8 = **a2;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v9 - 1;
  if (v9 <= 0)
  {
    v13 = v9 - 2;
    v12 = 1;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  if (v9 == 1)
  {
    v13 = -1;
LABEL_5:
    v14 = v9 - 3;
    v15 = 1;
    v16 = 1;
LABEL_6:
    v17 = v9 - 4;
    v18 = 1;
    v19 = 1;
    v20 = 1;
LABEL_7:
    v21 = 1;
    goto LABEL_8;
  }
  v13 = v9 - 2;
  v15 = *(_QWORD *)(v11 + 8 * (v9 - 2));
  if ((unint64_t)v9 <= 2)
  {
    v13 = 0;
    v16 = 0;
    v14 = -1;
    goto LABEL_6;
  }
  v14 = v9 - 3;
  v19 = *(_QWORD *)(v11 + 8 * (v9 - 3));
  if (v9 == 3)
  {
    v16 = 0;
    v14 = 0;
    v20 = 0;
    v17 = -1;
    v13 = 1;
    v18 = 1;
    goto LABEL_7;
  }
  v18 = 0;
  v16 = 0;
  v20 = 0;
  v17 = v9 - 4;
  v21 = *(_QWORD *)(v11 + 8 * (v9 - 4));
LABEL_8:
  v67 = v21;
  if (*(_BYTE *)(v6 + 49))
  {
    v22 = 0;
    v66 = 0;
    result = 0;
    goto LABEL_37;
  }
  v24 = *(_QWORD *)(v6 + 16);
  v25 = v24 - 4;
  if (v24 >= 4)
  {
    if (v25 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v25) == 1)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v25);
    v26 = v24 - 3;
    goto LABEL_26;
  }
  if (v24 == 3)
  {
    v26 = 0;
    v66 = 0;
LABEL_26:
    if (v26 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v26) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v26);
    v29 = v24 - 2;
    goto LABEL_31;
  }
  if (v24 < 2)
  {
    v27 = 0;
    v22 = 0;
    v66 = 0;
    result = 0;
    v28 = 0;
    if (v24 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v29 = 0;
  result = 0;
  v66 = 0;
LABEL_31:
  if (v29 > (int)v24 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v29) == 1)
    v22 = 0;
  else
    v22 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v29);
  v27 = v24 - 1;
LABEL_36:
  if (v27 > (int)v24 - 1)
  {
LABEL_37:
    v28 = 0;
    if (!*(_BYTE *)(v7 + 49))
      goto LABEL_38;
LABEL_47:
    v33 = 0;
    v65 = 0;
    v34 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v27) != 1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v27);
    if (*(_BYTE *)(v7 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v28 = 0;
LABEL_46:
  if (*(_BYTE *)(v7 + 49))
    goto LABEL_47;
LABEL_38:
  v30 = *(_QWORD *)(v7 + 16);
  v31 = v30 - 4;
  if (v30 >= 4)
  {
    if (v31 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v31) == 1)
      v65 = 0;
    else
      v65 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v31);
    v32 = v30 - 3;
    goto LABEL_56;
  }
  if (v30 == 3)
  {
    v32 = 0;
    v65 = 0;
LABEL_56:
    if (v32 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v32) == 1)
      v34 = 0;
    else
      v34 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v32);
    v37 = v30 - 2;
    goto LABEL_61;
  }
  if (v30 >= 2)
  {
    v37 = 0;
    v34 = 0;
    v65 = 0;
LABEL_61:
    if (v37 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v37) == 1)
      v33 = 0;
    else
      v33 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v37);
    v35 = v30 - 1;
    goto LABEL_66;
  }
  v35 = 0;
  v33 = 0;
  v65 = 0;
  v34 = 0;
  v36 = 0;
  if (v30 != 1)
    goto LABEL_78;
LABEL_66:
  if (v35 <= (int)v30 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v35) != 1)
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v35);
      if (!*(_BYTE *)(v8 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v36 = 0;
LABEL_78:
    if (!*(_BYTE *)(v8 + 49))
      goto LABEL_68;
LABEL_79:
    v40 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v36 = 0;
  if (*(_BYTE *)(v8 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v18 & 1) != 0 || v17 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v17) == 1)
  {
    v38 = 0;
    if ((v20 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17);
    if ((v20 & 1) != 0)
      goto LABEL_100;
  }
  if (v14 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v14) == 1)
  {
LABEL_100:
    v39 = 0;
    if ((v16 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v39 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14);
  if ((v16 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v13 <= (int)v9 - 1 && *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v13) != 1)
  {
    v40 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v13);
    if (v9 >= 1)
      goto LABEL_104;
LABEL_80:
    v41 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v40 = 0;
  if (v9 < 1)
    goto LABEL_80;
LABEL_104:
  if (v10 > (int)v9 - 1 || *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v10) == 1)
    goto LABEL_80;
  v41 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
LABEL_81:
  if (v67 >= 1)
  {
    v42 = 0;
    v43 = (_WORD *)(**(_QWORD **)a3 + *(_QWORD *)(v6 + 40));
    v44 = (_WORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v7 + 40));
    v45 = (_WORD *)(**a4 + *(_QWORD *)(v8 + 40));
    do
    {
      if (v19 >= 1)
      {
        v46 = 0;
        v47 = v43;
        v48 = v44;
        v49 = v45;
        do
        {
          if (v15 >= 1)
          {
            v50 = 0;
            v51 = v47;
            v52 = v48;
            v53 = v49;
            do
            {
              v54 = v12;
              v55 = v51;
              v56 = v52;
              v57 = v53;
              if (v12 >= 1)
              {
                do
                {
                  LOWORD(_S0) = *v55;
                  LOWORD(_S1) = *v56;
                  __asm
                  {
                    FCVT            S2, H1
                    FCVT            S3, H0
                  }
                  if (_S3 < _S2)
                    _S0 = _S1;
                  *v57 = LOWORD(_S0);
                  v57 = (_WORD *)((char *)v57 + v41);
                  v56 = (_WORD *)((char *)v56 + v36);
                  v55 = (_WORD *)((char *)v55 + v28);
                  --v54;
                }
                while (v54);
              }
              ++v50;
              v53 = (_WORD *)((char *)v53 + v40);
              v52 = (_WORD *)((char *)v52 + v33);
              v51 = (_WORD *)((char *)v51 + v22);
            }
            while (v50 != v15);
          }
          ++v46;
          v49 = (_WORD *)((char *)v49 + v39);
          v48 = (_WORD *)((char *)v48 + v34);
          v47 = (_WORD *)((char *)v47 + result);
        }
        while (v46 != v19);
      }
      ++v42;
      v45 = (_WORD *)((char *)v45 + v38);
      v44 = (_WORD *)((char *)v44 + v65);
      v43 = (_WORD *)((char *)v43 + v66);
    }
    while (v42 != v67);
  }
  return result;
}

unint64_t mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)16>(unint64_t result, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  unsigned __int16 *v39;
  _WORD *v40;
  uint64_t v41;
  _WORD *v42;
  unsigned __int16 *v43;
  _WORD *v44;
  uint64_t v45;
  _WORD *v46;
  unsigned __int16 *v47;
  _WORD *v48;
  uint64_t v49;
  _WORD *v50;
  unsigned __int16 *v51;
  _WORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **(_QWORD **)result;
  v5 = *(_QWORD *)(*(_QWORD *)result + 8);
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v57 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v55 = 0;
    v58 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v4 + 16);
  v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v21) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
    v22 = v20 - 3;
    goto LABEL_26;
  }
  if (v20 == 3)
  {
    v22 = 0;
    v55 = 0;
LABEL_26:
    if (v22 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v25 = v20 - 2;
    goto LABEL_31;
  }
  if (v20 < 2)
  {
    v23 = 0;
    v19 = 0;
    v55 = 0;
    v58 = 0;
    v24 = 0;
    if (v20 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v25 = 0;
  v58 = 0;
  v55 = 0;
LABEL_31:
  if (v25 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
  v23 = v20 - 1;
LABEL_36:
  if (v23 > (int)v20 - 1)
  {
LABEL_37:
    v24 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v29 = 0;
    v54 = 0;
    v30 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) != 1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v24 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = v26 - 4;
  if (v26 >= 4)
  {
    if (v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
      v54 = 0;
    else
      v54 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
    v28 = v26 - 3;
    goto LABEL_56;
  }
  if (v26 == 3)
  {
    v28 = 0;
    v54 = 0;
LABEL_56:
    if (v28 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v33 = v26 - 2;
    goto LABEL_61;
  }
  if (v26 >= 2)
  {
    v33 = 0;
    v30 = 0;
    v54 = 0;
LABEL_61:
    if (v33 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v33) == 1)
      v29 = 0;
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33);
    v31 = v26 - 1;
    goto LABEL_66;
  }
  v31 = 0;
  v29 = 0;
  v54 = 0;
  v30 = 0;
  v32 = 0;
  if (v26 != 1)
    goto LABEL_78;
LABEL_66:
  if (v31 <= (int)v26 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) != 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v32 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v35 = 0;
    v56 = 0;
    v34 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v32 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v56 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v34 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v36 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v35 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v37 = 0;
    v38 = (_WORD *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v39 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v40 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v41 = 0;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        do
        {
          if (v13 >= 1)
          {
            v45 = 0;
            v46 = v42;
            v47 = v43;
            v48 = v44;
            do
            {
              v49 = v10;
              v50 = v46;
              v51 = v47;
              v52 = v48;
              if (v10 >= 1)
              {
                do
                {
                  v53 = *v51;
                  result = (v53 << 16);
                  if (COERCE_FLOAT((unsigned __int16)*v50 << 16) >= COERCE_FLOAT(v53 << 16))
                    LOWORD(v53) = *v50;
                  *v52 = v53;
                  v52 = (_WORD *)((char *)v52 + v36);
                  v51 = (unsigned __int16 *)((char *)v51 + v32);
                  v50 = (_WORD *)((char *)v50 + v24);
                  --v49;
                }
                while (v49);
              }
              ++v45;
              v48 = (_WORD *)((char *)v48 + v35);
              v47 = (unsigned __int16 *)((char *)v47 + v29);
              v46 = (_WORD *)((char *)v46 + v19);
            }
            while (v45 != v13);
          }
          ++v41;
          v44 = (_WORD *)((char *)v44 + v34);
          v43 = (unsigned __int16 *)((char *)v43 + v30);
          v42 = (_WORD *)((char *)v42 + v58);
        }
        while (v41 != v59);
      }
      ++v37;
      v40 = (_WORD *)((char *)v40 + v56);
      v39 = (unsigned __int16 *)((char *)v39 + v54);
      v38 = (_WORD *)((char *)v38 + v55);
    }
    while (v37 != v57);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (uint64_t *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_QWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = *v52;
                  if (*v51 > *v52)
                    v54 = *v51;
                  *v53 = v54;
                  v53 = (_QWORD *)((char *)v53 + v37);
                  v52 = (uint64_t *)((char *)v52 + v33);
                  v51 = (uint64_t *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_QWORD *)((char *)v49 + v36);
              v48 = (uint64_t *)((char *)v48 + v30);
              v47 = (uint64_t *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_QWORD *)((char *)v45 + v35);
          v44 = (uint64_t *)((char *)v44 + v31);
          v43 = (uint64_t *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      v41 = (_QWORD *)((char *)v41 + v57);
      v40 = (uint64_t *)((char *)v40 + v55);
      v39 = (uint64_t *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int *v40;
  _DWORD *v41;
  uint64_t v42;
  int *v43;
  int *v44;
  _DWORD *v45;
  uint64_t v46;
  int *v47;
  int *v48;
  _DWORD *v49;
  uint64_t v50;
  int *v51;
  int *v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (int *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_DWORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = *v52;
                  if (*v51 > *v52)
                    v54 = *v51;
                  *v53 = v54;
                  v53 = (_DWORD *)((char *)v53 + v37);
                  v52 = (int *)((char *)v52 + v33);
                  v51 = (int *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_DWORD *)((char *)v49 + v36);
              v48 = (int *)((char *)v48 + v30);
              v47 = (int *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_DWORD *)((char *)v45 + v35);
          v44 = (int *)((char *)v44 + v31);
          v43 = (int *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      v41 = (_DWORD *)((char *)v41 + v57);
      v40 = (int *)((char *)v40 + v55);
      v39 = (int *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 *v39;
  __int16 *v40;
  _WORD *v41;
  uint64_t v42;
  __int16 *v43;
  __int16 *v44;
  _WORD *v45;
  uint64_t v46;
  __int16 *v47;
  __int16 *v48;
  _WORD *v49;
  uint64_t v50;
  __int16 *v51;
  __int16 *v52;
  _WORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (__int16 *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (__int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_WORD *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = *v52;
                  if (*v51 > v54)
                    LOWORD(v54) = *v51;
                  *v53 = v54;
                  v53 = (_WORD *)((char *)v53 + v37);
                  v52 = (__int16 *)((char *)v52 + v33);
                  v51 = (__int16 *)((char *)v51 + v25);
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 = (_WORD *)((char *)v49 + v36);
              v48 = (__int16 *)((char *)v48 + v30);
              v47 = (__int16 *)((char *)v47 + v19);
            }
            while (v46 != v13);
          }
          ++v42;
          v45 = (_WORD *)((char *)v45 + v35);
          v44 = (__int16 *)((char *)v44 + v31);
          v43 = (__int16 *)((char *)v43 + result);
        }
        while (v42 != v59);
      }
      ++v38;
      v41 = (_WORD *)((char *)v41 + v57);
      v40 = (__int16 *)((char *)v40 + v55);
      v39 = (__int16 *)((char *)v39 + v56);
    }
    while (v38 != v58);
  }
  return result;
}

uint64_t mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  char *v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = (*a1)[1];
  v6 = **a2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    v16 = 1;
    v59 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v59 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v14 = 0;
    v12 = 0;
    v17 = 0;
    v15 = -1;
    v11 = 1;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v15 = v7 - 4;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 4));
LABEL_8:
  v58 = v18;
  if (*(_BYTE *)(v4 + 49))
  {
    v19 = 0;
    v56 = 0;
    result = 0;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v4 + 16);
  v22 = v21 - 4;
  if (v21 >= 4)
  {
    if (v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22) == 1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
    v23 = v21 - 3;
    goto LABEL_26;
  }
  if (v21 == 3)
  {
    v23 = 0;
    v56 = 0;
LABEL_26:
    if (v23 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v23) == 1)
      result = 0;
    else
      result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v23);
    v26 = v21 - 2;
    goto LABEL_31;
  }
  if (v21 < 2)
  {
    v24 = 0;
    v19 = 0;
    v56 = 0;
    result = 0;
    v25 = 0;
    if (v21 != 1)
      goto LABEL_46;
    goto LABEL_36;
  }
  v26 = 0;
  result = 0;
  v56 = 0;
LABEL_31:
  if (v26 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
  v24 = v21 - 1;
LABEL_36:
  if (v24 > (int)v21 - 1)
  {
LABEL_37:
    v25 = 0;
    if (!*(_BYTE *)(v5 + 49))
      goto LABEL_38;
LABEL_47:
    v30 = 0;
    v55 = 0;
    v31 = 0;
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) != 1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
    if (*(_BYTE *)(v5 + 49))
      goto LABEL_47;
    goto LABEL_38;
  }
  v25 = 0;
LABEL_46:
  if (*(_BYTE *)(v5 + 49))
    goto LABEL_47;
LABEL_38:
  v27 = *(_QWORD *)(v5 + 16);
  v28 = v27 - 4;
  if (v27 >= 4)
  {
    if (v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      v55 = 0;
    else
      v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
    v29 = v27 - 3;
    goto LABEL_56;
  }
  if (v27 == 3)
  {
    v29 = 0;
    v55 = 0;
LABEL_56:
    if (v29 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      v31 = 0;
    else
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
    v34 = v27 - 2;
    goto LABEL_61;
  }
  if (v27 >= 2)
  {
    v34 = 0;
    v31 = 0;
    v55 = 0;
LABEL_61:
    if (v34 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      v30 = 0;
    else
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
    v32 = v27 - 1;
    goto LABEL_66;
  }
  v32 = 0;
  v30 = 0;
  v55 = 0;
  v31 = 0;
  v33 = 0;
  if (v27 != 1)
    goto LABEL_78;
LABEL_66:
  if (v32 <= (int)v27 - 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) != 1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
      if (!*(_BYTE *)(v6 + 49))
        goto LABEL_68;
      goto LABEL_79;
    }
    v33 = 0;
LABEL_78:
    if (!*(_BYTE *)(v6 + 49))
      goto LABEL_68;
LABEL_79:
    v36 = 0;
    v57 = 0;
    v35 = 0;
    goto LABEL_80;
  }
LABEL_67:
  v33 = 0;
  if (*(_BYTE *)(v6 + 49))
    goto LABEL_79;
LABEL_68:
  if ((v16 & 1) != 0 || v15 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) == 1)
  {
    v57 = 0;
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
    if ((v17 & 1) != 0)
      goto LABEL_100;
  }
  if (v12 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
  {
LABEL_100:
    v35 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_103;
    goto LABEL_101;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
  if ((v14 & 1) != 0)
    goto LABEL_103;
LABEL_101:
  if (v11 <= (int)v7 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) != 1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v7 >= 1)
      goto LABEL_104;
LABEL_80:
    v37 = 0;
    goto LABEL_81;
  }
LABEL_103:
  v36 = 0;
  if (v7 < 1)
    goto LABEL_80;
LABEL_104:
  if (v8 > (int)v7 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
    goto LABEL_80;
  v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_81:
  if (v18 >= 1)
  {
    v38 = 0;
    v39 = (_BYTE *)(**(_QWORD **)a3 + *(_QWORD *)(v4 + 40));
    v40 = (char *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + *(_QWORD *)(v5 + 40));
    v41 = (_BYTE *)(**a4 + *(_QWORD *)(v6 + 40));
    do
    {
      if (v59 >= 1)
      {
        v42 = 0;
        v43 = v39;
        v44 = v40;
        v45 = v41;
        do
        {
          if (v13 >= 1)
          {
            v46 = 0;
            v47 = v43;
            v48 = v44;
            v49 = v45;
            do
            {
              v50 = v10;
              v51 = v47;
              v52 = v48;
              v53 = v49;
              if (v10 >= 1)
              {
                do
                {
                  v54 = *v52;
                  if ((char)*v51 > v54)
                    LOBYTE(v54) = *v51;
                  *v53 = v54;
                  v53 += v37;
                  v52 += v33;
                  v51 += v25;
                  --v50;
                }
                while (v50);
              }
              ++v46;
              v49 += v36;
              v48 += v30;
              v47 += v19;
            }
            while (v46 != v13);
          }
          ++v42;
          v45 += v35;
          v44 += v31;
          v43 += result;
        }
        while (v42 != v59);
      }
      ++v38;
      v41 += v57;
      v40 += v55;
      v39 += v56;
    }
    while (v38 != v58);
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56[2];
  float32x2_t v57;

  v5 = **a1;
  v6 = **a2;
  v47 = **a4;
  v48 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 < 1)
  {
    v49 = 1;
    v55 = 1;
    v10 = 1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v6 + 24);
  v9 = v8 + 8 * v7;
  v10 = *(_QWORD *)(v9 - 8);
  if (v7 == 1)
  {
    v49 = 1;
    v55 = 1;
LABEL_7:
    v53 = 1;
LABEL_8:
    v50 = 0;
    *(float *)&a5 = a5;
    v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v12 = *(_QWORD *)(v5 + 16), v13 = v12 - 4, v12 < 4)
        || v13 > (int)v12 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v13) == 1)
      {
        v14 = 0;
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      else
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13);
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      v15 = *(_QWORD *)(v6 + 16);
      v16 = v15 - 4;
      if (v15 >= 4 && v16 <= (int)v15 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v16) != 1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v16);
        goto LABEL_21;
      }
LABEL_20:
      v17 = 0;
LABEL_21:
      if (v53 >= 1)
      {
        v54 = 0;
        v52 = v48 + v14 * v50;
        v51 = v47 + v17 * v50;
        do
        {
          if (*(_BYTE *)(v5 + 49)
            || (v18 = *(_QWORD *)(v5 + 16), v19 = v18 - 3, v18 < 3)
            || v19 > (int)v18 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
          {
            v20 = 0;
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          else
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          v21 = *(_QWORD *)(v6 + 16);
          v22 = v21 - 3;
          if (v21 >= 3 && v22 <= (int)v21 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v22) != 1)
          {
            v23 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
            goto LABEL_35;
          }
LABEL_34:
          v23 = 0;
LABEL_35:
          if (v55 >= 1)
          {
            v24 = 0;
            v25 = v52 + v20 * v54;
            v26 = v51 + v23 * v54;
            while (1)
            {
              if (*(_BYTE *)(v5 + 49)
                || (v27 = *(_QWORD *)(v5 + 16), v28 = v27 - 2, v27 < 2)
                || v28 > (int)v27 - 1
                || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
              {
                v29 = 0;
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              else
              {
                v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              v30 = *(_QWORD *)(v6 + 16);
              v31 = v30 - 2;
              if (v30 < 2 || v31 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v31) == 1)
                break;
              v32 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v31);
              if (v10 >= 1)
                goto LABEL_50;
LABEL_37:
              if (++v24 == v55)
                goto LABEL_23;
            }
            v32 = 0;
            if (v10 < 1)
              goto LABEL_37;
LABEL_50:
            v33 = 0;
            v34 = v25 + v29 * v24;
            v35 = v26 + v32 * v24;
            while (2)
            {
              if (!*(_BYTE *)(v5 + 49))
              {
                v42 = *(_QWORD *)(v5 + 16);
                v43 = v42 - 1;
                if (v42 >= 1 && v43 <= (int)v42 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v43) != 1)
                {
                  v36 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v43);
                  if (!*(_BYTE *)(v6 + 49))
                    goto LABEL_60;
                  goto LABEL_53;
                }
              }
              v36 = 0;
              if (*(_BYTE *)(v6 + 49))
                goto LABEL_53;
LABEL_60:
              v44 = *(_QWORD *)(v6 + 16);
              v45 = v44 - 1;
              if (v44 < 1 || v45 > (int)v44 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v45) == 1)
LABEL_53:
                v37 = 0;
              else
                v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v45);
              v38 = v35 + v37 * v33 + *(_QWORD *)(v6 + 40);
              v57 = vadd_f32(*(float32x2_t *)(v34 + v36 * v33 + *(_QWORD *)(v5 + 40)), v11);
              v39 = std::sqrt[abi:nn180100]<float>((float *)&v57);
              v57 = (float32x2_t)1065353216;
              v56[0] = v39;
              v56[1] = v40;
              *(float *)v38 = std::operator/[abi:nn180100]<float>((float *)&v57, v56);
              *(_DWORD *)(v38 + 4) = v41;
              if (v10 == ++v33)
                goto LABEL_37;
              continue;
            }
          }
LABEL_23:
          ++v54;
        }
        while (v54 != v53);
      }
      if (++v50 == v49)
        return;
    }
  }
  v55 = *(_QWORD *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    v49 = 1;
    goto LABEL_7;
  }
  v46 = v8 + 8 * v7;
  v53 = *(_QWORD *)(v46 - 24);
  if (v7 == 3)
  {
    v49 = 1;
    goto LABEL_8;
  }
  v49 = *(_QWORD *)(v46 - 32);
  if (v49 >= 1)
    goto LABEL_8;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  float v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = **a1;
  v6 = **a2;
  v58 = **a4;
  v59 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    result = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    v21 = v7 < 1;
    v22 = *(unsigned __int8 *)(v5 + 49);
    v23 = v7 - 1;
    if (*(_BYTE *)(v6 + 49))
      v19 = 1;
    v24 = v23;
    if (*(_BYTE *)(v6 + 49))
    {
      v17 = 1;
      v25 = 1;
    }
    else
    {
      v25 = v14;
    }
    if (*(_BYTE *)(v6 + 49))
      v21 = 1;
    if (v15 > v23)
      v26 = 1;
    else
      v26 = v19;
    if (v12 > v24)
      v27 = 1;
    else
      v27 = v17;
    if (v11 > v24)
      v28 = 1;
    else
      v28 = v25;
    v29 = a5;
    v30 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (v31 = *(_QWORD *)(v5 + 16), v32 = v31 - 4, v31 < 4)
        || v32 > (int)v31 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) == 1)
      {
        v33 = 0;
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) != 1)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
        if (v18 < 1)
          goto LABEL_27;
LABEL_37:
        v35 = 0;
        v36 = v59 + v33 * v20;
        v37 = v58 + v34 * v20;
        while (2)
        {
          if (v22
            || (v38 = *(_QWORD *)(v5 + 16), v39 = v38 - 3, v38 < 3)
            || v39 > (int)v38 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v39) == 1)
          {
            v40 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v39);
          if ((v27 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_45:
            v41 = 0;
            if (v13 >= 1)
              break;
            goto LABEL_38;
          }
          v41 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_38:
            if (++v35 == v18)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v42 = 0;
        v43 = v36 + v40 * v35;
        v44 = v37 + v41 * v35;
        while (2)
        {
          if (v22
            || (v45 = *(_QWORD *)(v5 + 16), v46 = v45 - 2, v45 < 2)
            || v46 > (int)v45 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) == 1)
          {
            v47 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
          if ((v28 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_56:
            v48 = 0;
            if (v10 >= 1)
              break;
            goto LABEL_49;
          }
          v48 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_49:
            if (++v42 == v13)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v49 = 0;
        v50 = v43 + v47 * v42;
        v51 = *(_QWORD *)(v5 + 40);
        v52 = *(_QWORD *)(v6 + 40);
        v53 = v44 + v48 * v42;
        while (2)
        {
          if (v22
            || (v56 = *(_QWORD *)(v5 + 16), v57 = v56 - 1, v56 < 1)
            || v57 > (int)v56 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v57) == 1)
          {
            v55 = 0;
            if ((v30 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v57);
            if ((v30 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) != 1)
              {
                v54 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_61:
                *(float *)(v53 + v54 * v49 + v52) = 1.0 / sqrtf(*(float *)(v50 + v55 * v49 + v51) + v29);
                if (v10 == ++v49)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v54 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v34 = 0;
      if (v18 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v20 == result)
        return result;
    }
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v17 = 0;
    v12 = 0;
    v14 = 0;
    result = 1;
    v15 = -1;
    v11 = 1;
    goto LABEL_7;
  }
  v15 = v7 - 4;
  result = *(_QWORD *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    v17 = 0;
    v14 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  float v64[2];
  unint64_t v65;

  v5 = **a1;
  v6 = **a2;
  v54 = **a4;
  v55 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 < 1)
  {
    v56 = 1;
    v62 = 1;
    v10 = 1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v6 + 24);
  v9 = v8 + 8 * v7;
  v10 = *(_QWORD *)(v9 - 8);
  if (v7 == 1)
  {
    v56 = 1;
    v62 = 1;
LABEL_7:
    v60 = 1;
LABEL_8:
    v57 = 0;
    *(float *)&_D0 = _D0;
    __asm { FCVT            H0, S0 }
    _Q0 = vcvtq_f32_f16((float16x4_t)vdup_lane_s16(*(int16x4_t *)&_D0, 0));
    v63 = _Q0;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v16 = *(_QWORD *)(v5 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v17) == 1)
      {
        v18 = 0;
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      else
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      v19 = *(_QWORD *)(v6 + 16);
      v20 = v19 - 4;
      if (v19 >= 4 && v20 <= (int)v19 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) != 1)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
        goto LABEL_21;
      }
LABEL_20:
      v21 = 0;
LABEL_21:
      if (v60 >= 1)
      {
        v61 = 0;
        v59 = v55 + v18 * v57;
        v58 = v54 + v21 * v57;
        do
        {
          if (*(_BYTE *)(v5 + 49)
            || (v22 = *(_QWORD *)(v5 + 16), v23 = v22 - 3, v22 < 3)
            || v23 > (int)v22 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v23) == 1)
          {
            v24 = 0;
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          else
          {
            v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v23);
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          v25 = *(_QWORD *)(v6 + 16);
          v26 = v25 - 3;
          if (v25 >= 3 && v26 <= (int)v25 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v26) != 1)
          {
            v27 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v26);
            goto LABEL_35;
          }
LABEL_34:
          v27 = 0;
LABEL_35:
          if (v62 >= 1)
          {
            v28 = 0;
            v29 = v59 + v24 * v61;
            v30 = v58 + v27 * v61;
            while (1)
            {
              if (*(_BYTE *)(v5 + 49)
                || (v31 = *(_QWORD *)(v5 + 16), v32 = v31 - 2, v31 < 2)
                || v32 > (int)v31 - 1
                || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) == 1)
              {
                v33 = 0;
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              else
              {
                v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              v34 = *(_QWORD *)(v6 + 16);
              v35 = v34 - 2;
              if (v34 < 2 || v35 > (int)v34 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v35) == 1)
                break;
              v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v35);
              if (v10 >= 1)
                goto LABEL_50;
LABEL_37:
              if (++v28 == v62)
                goto LABEL_23;
            }
            v36 = 0;
            if (v10 < 1)
              goto LABEL_37;
LABEL_50:
            v37 = 0;
            v38 = v29 + v33 * v28;
            v39 = v30 + v36 * v28;
            while (2)
            {
              if (!*(_BYTE *)(v5 + 49))
              {
                v49 = *(_QWORD *)(v5 + 16);
                v50 = v49 - 1;
                if (v49 >= 1 && v50 <= (int)v49 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v50) != 1)
                {
                  v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v50);
                  if (!*(_BYTE *)(v6 + 49))
                    goto LABEL_60;
                  goto LABEL_53;
                }
              }
              v40 = 0;
              if (*(_BYTE *)(v6 + 49))
                goto LABEL_53;
LABEL_60:
              v51 = *(_QWORD *)(v6 + 16);
              v52 = v51 - 1;
              if (v51 < 1 || v52 > (int)v51 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v52) == 1)
LABEL_53:
                v41 = 0;
              else
                v41 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v52);
              _Q0.i32[0] = *(_DWORD *)(v38 + v40 * v37 + *(_QWORD *)(v5 + 40));
              v42 = (_DWORD *)(v39 + v41 * v37 + *(_QWORD *)(v6 + 40));
              v65 = vcvtq_f32_f16(vcvt_f16_f32(vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q0.f32), v63))).u64[0];
              _S0 = std::sqrt[abi:nn180100]<float>((float *)&v65);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              v65 = 1065353216;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              v64[0] = _S0;
              v64[1] = _S1;
              _Q0.f32[0] = std::operator/[abi:nn180100]<float>((float *)&v65, v64);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
                FCVT            S0, H0
                FCVT            S1, H1
              }
              *v42 = _Q0.i32[0];
              v42[1] = _S1;
              if (v10 == ++v37)
                goto LABEL_37;
              continue;
            }
          }
LABEL_23:
          ++v61;
        }
        while (v61 != v60);
      }
      if (++v57 == v56)
        return;
    }
  }
  v62 = *(_QWORD *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    v56 = 1;
    goto LABEL_7;
  }
  v53 = v8 + 8 * v7;
  v60 = *(_QWORD *)(v53 - 24);
  if (v7 == 3)
  {
    v56 = 1;
    goto LABEL_8;
  }
  v56 = *(_QWORD *)(v53 - 32);
  if (v56 >= 1)
    goto LABEL_8;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v5 = **a1;
  v6 = **a2;
  v65 = **a4;
  v66 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    result = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    v21 = v7 < 1;
    v22 = *(unsigned __int8 *)(v5 + 49);
    v23 = v7 - 1;
    if (*(_BYTE *)(v6 + 49))
      v19 = 1;
    v24 = v23;
    if (*(_BYTE *)(v6 + 49))
    {
      v17 = 1;
      v25 = 1;
    }
    else
    {
      v25 = v14;
    }
    if (*(_BYTE *)(v6 + 49))
      v21 = 1;
    if (v15 > v23)
      v26 = 1;
    else
      v26 = v19;
    if (v12 > v24)
      v27 = 1;
    else
      v27 = v17;
    if (v11 > v24)
      v28 = 1;
    else
      v28 = v25;
    __asm
    {
      FCVT            H0, D0
      FCVT            S0, H0
    }
    if (_NF ^ _VF | _ZF)
      v35 = v21;
    else
      v35 = 1;
    while (1)
    {
      if (v22
        || (v36 = *(_QWORD *)(v5 + 16), v37 = v36 - 4, v36 < 4)
        || v37 > (int)v36 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v37) == 1)
      {
        v38 = 0;
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v37);
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) != 1)
      {
        v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
        if (v18 < 1)
          goto LABEL_27;
LABEL_37:
        v40 = 0;
        v41 = v66 + v38 * v20;
        v42 = v65 + v39 * v20;
        while (2)
        {
          if (v22
            || (v43 = *(_QWORD *)(v5 + 16), v44 = v43 - 3, v43 < 3)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_45:
            v46 = 0;
            if (v13 >= 1)
              break;
            goto LABEL_38;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_38:
            if (++v40 == v18)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = v42 + v46 * v40;
        while (2)
        {
          if (v22
            || (v50 = *(_QWORD *)(v5 + 16), v51 = v50 - 2, v50 < 2)
            || v51 > (int)v50 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v51) == 1)
          {
            v52 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v51);
          if ((v28 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_56:
            v53 = 0;
            if (v10 >= 1)
              break;
            goto LABEL_49;
          }
          v53 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_49:
            if (++v47 == v13)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v54 = 0;
        v55 = v48 + v52 * v47;
        v56 = *(_QWORD *)(v5 + 40);
        v57 = *(_QWORD *)(v6 + 40);
        v58 = v49 + v53 * v47;
        while (2)
        {
          if (v22
            || (v63 = *(_QWORD *)(v5 + 16), v64 = v63 - 1, v63 < 1)
            || v64 > (int)v63 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v64) == 1)
          {
            v62 = 0;
            if ((v35 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v62 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v64);
            if ((v35 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) != 1)
              {
                v59 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_61:
                _H2 = *(_WORD *)(v55 + v62 * v54 + v56);
                __asm { FCVT            S2, H2 }
                *(float *)(v58 + v59 * v54++ + v57) = 1.0 / sqrtf(_S0 + _S2);
                if (v10 == v54)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v59 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v39 = 0;
      if (v18 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v20 == result)
        return result;
    }
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v17 = 0;
    v12 = 0;
    v14 = 0;
    result = 1;
    v15 = -1;
    v11 = 1;
    goto LABEL_7;
  }
  v15 = v7 - 4;
  result = *(_QWORD *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    v17 = 0;
    v14 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  float v63[2];
  unint64_t v64;

  v5 = **a1;
  v6 = **a2;
  v53 = **a4;
  v54 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 < 1)
  {
    v55 = 1;
    v61 = 1;
    v10 = 1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v6 + 24);
  v9 = v8 + 8 * v7;
  v10 = *(_QWORD *)(v9 - 8);
  if (v7 == 1)
  {
    v55 = 1;
    v61 = 1;
LABEL_7:
    v59 = 1;
LABEL_8:
    v56 = 0;
    *(float *)&_D0 = _D0;
    __asm { FCVT            H0, S0 }
    _Q0 = vcvtq_f32_f16((float16x4_t)vdup_lane_s16(*(int16x4_t *)&_D0, 0));
    v62 = _Q0;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v16 = *(_QWORD *)(v5 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v17) == 1)
      {
        v18 = 0;
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      else
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      v19 = *(_QWORD *)(v6 + 16);
      v20 = v19 - 4;
      if (v19 >= 4 && v20 <= (int)v19 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) != 1)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
        goto LABEL_21;
      }
LABEL_20:
      v21 = 0;
LABEL_21:
      if (v59 >= 1)
      {
        v60 = 0;
        v58 = v54 + v18 * v56;
        v57 = v53 + v21 * v56;
        do
        {
          if (*(_BYTE *)(v5 + 49)
            || (v22 = *(_QWORD *)(v5 + 16), v23 = v22 - 3, v22 < 3)
            || v23 > (int)v22 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v23) == 1)
          {
            v24 = 0;
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          else
          {
            v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v23);
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          v25 = *(_QWORD *)(v6 + 16);
          v26 = v25 - 3;
          if (v25 >= 3 && v26 <= (int)v25 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v26) != 1)
          {
            v27 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v26);
            goto LABEL_35;
          }
LABEL_34:
          v27 = 0;
LABEL_35:
          if (v61 >= 1)
          {
            v28 = 0;
            v29 = v58 + v24 * v60;
            v30 = v57 + v27 * v60;
            while (1)
            {
              if (*(_BYTE *)(v5 + 49)
                || (v31 = *(_QWORD *)(v5 + 16), v32 = v31 - 2, v31 < 2)
                || v32 > (int)v31 - 1
                || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) == 1)
              {
                v33 = 0;
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              else
              {
                v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              v34 = *(_QWORD *)(v6 + 16);
              v35 = v34 - 2;
              if (v34 < 2 || v35 > (int)v34 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v35) == 1)
                break;
              v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v35);
              if (v10 >= 1)
                goto LABEL_50;
LABEL_37:
              if (++v28 == v61)
                goto LABEL_23;
            }
            v36 = 0;
            if (v10 < 1)
              goto LABEL_37;
LABEL_50:
            v37 = 0;
            v38 = v29 + v33 * v28;
            v39 = v30 + v36 * v28;
            while (2)
            {
              if (!*(_BYTE *)(v5 + 49))
              {
                v48 = *(_QWORD *)(v5 + 16);
                v49 = v48 - 1;
                if (v48 >= 1 && v49 <= (int)v48 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v49) != 1)
                {
                  v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v49);
                  if (!*(_BYTE *)(v6 + 49))
                    goto LABEL_60;
                  goto LABEL_53;
                }
              }
              v40 = 0;
              if (*(_BYTE *)(v6 + 49))
                goto LABEL_53;
LABEL_60:
              v50 = *(_QWORD *)(v6 + 16);
              v51 = v50 - 1;
              if (v50 < 1 || v51 > (int)v50 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v51) == 1)
LABEL_53:
                v41 = 0;
              else
                v41 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v51);
              _Q0.i32[0] = *(_DWORD *)(v38 + v40 * v37 + *(_QWORD *)(v5 + 40));
              v42 = (_WORD *)(v39 + v41 * v37 + *(_QWORD *)(v6 + 40));
              v64 = vcvtq_f32_f16(vcvt_f16_f32(vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q0.f32), v62))).u64[0];
              _S0 = std::sqrt[abi:nn180100]<float>((float *)&v64);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              v64 = 1065353216;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              v63[0] = _S0;
              v63[1] = _S1;
              _Q0.f32[0] = std::operator/[abi:nn180100]<float>((float *)&v64, v63);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              *v42 = _Q0.i16[0];
              v42[1] = _S1;
              if (v10 == ++v37)
                goto LABEL_37;
              continue;
            }
          }
LABEL_23:
          ++v60;
        }
        while (v60 != v59);
      }
      if (++v56 == v55)
        return;
    }
  }
  v61 = *(_QWORD *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    v55 = 1;
    goto LABEL_7;
  }
  v52 = v8 + 8 * v7;
  v59 = *(_QWORD *)(v52 - 24);
  if (v7 == 3)
  {
    v55 = 1;
    goto LABEL_8;
  }
  v55 = *(_QWORD *)(v52 - 32);
  if (v55 >= 1)
    goto LABEL_8;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = **a1;
  v6 = **a2;
  v66 = **a4;
  v67 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    result = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    v21 = v7 < 1;
    v22 = *(unsigned __int8 *)(v5 + 49);
    v23 = v7 - 1;
    if (*(_BYTE *)(v6 + 49))
      v19 = 1;
    v24 = v23;
    if (*(_BYTE *)(v6 + 49))
    {
      v17 = 1;
      v25 = 1;
    }
    else
    {
      v25 = v14;
    }
    if (*(_BYTE *)(v6 + 49))
      v21 = 1;
    if (v15 > v23)
      v26 = 1;
    else
      v26 = v19;
    if (v12 > v24)
      v27 = 1;
    else
      v27 = v17;
    if (v11 > v24)
      v28 = 1;
    else
      v28 = v25;
    __asm
    {
      FCVT            H0, D0
      FCVT            S0, H0
    }
    if (_NF ^ _VF | _ZF)
      v35 = v21;
    else
      v35 = 1;
    while (1)
    {
      if (v22
        || (v36 = *(_QWORD *)(v5 + 16), v37 = v36 - 4, v36 < 4)
        || v37 > (int)v36 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v37) == 1)
      {
        v38 = 0;
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v37);
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) != 1)
      {
        v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
        if (v18 < 1)
          goto LABEL_27;
LABEL_37:
        v40 = 0;
        v41 = v67 + v38 * v20;
        v42 = v66 + v39 * v20;
        while (2)
        {
          if (v22
            || (v43 = *(_QWORD *)(v5 + 16), v44 = v43 - 3, v43 < 3)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_45:
            v46 = 0;
            if (v13 >= 1)
              break;
            goto LABEL_38;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_38:
            if (++v40 == v18)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = v42 + v46 * v40;
        while (2)
        {
          if (v22
            || (v50 = *(_QWORD *)(v5 + 16), v51 = v50 - 2, v50 < 2)
            || v51 > (int)v50 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v51) == 1)
          {
            v52 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v51);
          if ((v28 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_56:
            v53 = 0;
            if (v10 >= 1)
              break;
            goto LABEL_49;
          }
          v53 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_49:
            if (++v47 == v13)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v54 = 0;
        v55 = v48 + v52 * v47;
        v56 = *(_QWORD *)(v5 + 40);
        v57 = *(_QWORD *)(v6 + 40);
        v58 = v49 + v53 * v47;
        while (2)
        {
          if (v22
            || (v64 = *(_QWORD *)(v5 + 16), v65 = v64 - 1, v64 < 1)
            || v65 > (int)v64 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v65) == 1)
          {
            v63 = 0;
            if ((v35 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v63 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v65);
            if ((v35 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) != 1)
              {
                v59 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_61:
                _H2 = *(_WORD *)(v55 + v63 * v54 + v56);
                __asm { FCVT            S2, H2 }
                _S2 = 1.0 / sqrtf(_S0 + _S2);
                __asm { FCVT            H2, S2 }
                *(_WORD *)(v58 + v59 * v54++ + v57) = LOWORD(_S2);
                if (v10 == v54)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v59 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v39 = 0;
      if (v18 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v20 == result)
        return result;
    }
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v17 = 0;
    v12 = 0;
    v14 = 0;
    result = 1;
    v15 = -1;
    v11 = 1;
    goto LABEL_7;
  }
  v15 = v7 - 4;
  result = *(_QWORD *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    v17 = 0;
    v14 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  float v39;
  float v40;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61[2];
  float32x2_t v62;

  v5 = **a1;
  v6 = **a2;
  v52 = **a4;
  v53 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 < 1)
  {
    v54 = 1;
    v60 = 1;
    v10 = 1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v6 + 24);
  v9 = v8 + 8 * v7;
  v10 = *(_QWORD *)(v9 - 8);
  if (v7 == 1)
  {
    v54 = 1;
    v60 = 1;
LABEL_7:
    v58 = 1;
LABEL_8:
    v55 = 0;
    *(float *)&a5 = a5;
    v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v12 = *(_QWORD *)(v5 + 16), v13 = v12 - 4, v12 < 4)
        || v13 > (int)v12 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v13) == 1)
      {
        v14 = 0;
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      else
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13);
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      v15 = *(_QWORD *)(v6 + 16);
      v16 = v15 - 4;
      if (v15 >= 4 && v16 <= (int)v15 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v16) != 1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v16);
        goto LABEL_21;
      }
LABEL_20:
      v17 = 0;
LABEL_21:
      if (v58 >= 1)
      {
        v59 = 0;
        v57 = v53 + v14 * v55;
        v56 = v52 + v17 * v55;
        do
        {
          if (*(_BYTE *)(v5 + 49)
            || (v18 = *(_QWORD *)(v5 + 16), v19 = v18 - 3, v18 < 3)
            || v19 > (int)v18 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
          {
            v20 = 0;
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          else
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          v21 = *(_QWORD *)(v6 + 16);
          v22 = v21 - 3;
          if (v21 >= 3 && v22 <= (int)v21 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v22) != 1)
          {
            v23 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
            goto LABEL_35;
          }
LABEL_34:
          v23 = 0;
LABEL_35:
          if (v60 >= 1)
          {
            v24 = 0;
            v25 = v57 + v20 * v59;
            v26 = v56 + v23 * v59;
            while (1)
            {
              if (*(_BYTE *)(v5 + 49)
                || (v27 = *(_QWORD *)(v5 + 16), v28 = v27 - 2, v27 < 2)
                || v28 > (int)v27 - 1
                || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
              {
                v29 = 0;
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              else
              {
                v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              v30 = *(_QWORD *)(v6 + 16);
              v31 = v30 - 2;
              if (v30 < 2 || v31 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v31) == 1)
                break;
              v32 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v31);
              if (v10 >= 1)
                goto LABEL_50;
LABEL_37:
              if (++v24 == v60)
                goto LABEL_23;
            }
            v32 = 0;
            if (v10 < 1)
              goto LABEL_37;
LABEL_50:
            v33 = 0;
            v34 = v25 + v29 * v24;
            v35 = v26 + v32 * v24;
            while (2)
            {
              if (!*(_BYTE *)(v5 + 49))
              {
                v47 = *(_QWORD *)(v5 + 16);
                v48 = v47 - 1;
                if (v47 >= 1 && v48 <= (int)v47 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v48) != 1)
                {
                  v36 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v48);
                  if (!*(_BYTE *)(v6 + 49))
                    goto LABEL_60;
                  goto LABEL_53;
                }
              }
              v36 = 0;
              if (*(_BYTE *)(v6 + 49))
                goto LABEL_53;
LABEL_60:
              v49 = *(_QWORD *)(v6 + 16);
              v50 = v49 - 1;
              if (v49 < 1 || v50 > (int)v49 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v50) == 1)
LABEL_53:
                v37 = 0;
              else
                v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v50);
              v38 = (_WORD *)(v35 + v37 * v33 + *(_QWORD *)(v6 + 40));
              v62 = vadd_f32(*(float32x2_t *)(v34 + v36 * v33 + *(_QWORD *)(v5 + 40)), v11);
              v39 = std::sqrt[abi:nn180100]<float>((float *)&v62);
              v62 = (float32x2_t)1065353216;
              v61[0] = v39;
              v61[1] = v40;
              _S0 = std::operator/[abi:nn180100]<float>((float *)&v62, v61);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              *v38 = LOWORD(_S0);
              v38[1] = _S1;
              if (v10 == ++v33)
                goto LABEL_37;
              continue;
            }
          }
LABEL_23:
          ++v59;
        }
        while (v59 != v58);
      }
      if (++v55 == v54)
        return;
    }
  }
  v60 = *(_QWORD *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    v54 = 1;
    goto LABEL_7;
  }
  v51 = v8 + 8 * v7;
  v58 = *(_QWORD *)(v51 - 24);
  if (v7 == 3)
  {
    v54 = 1;
    goto LABEL_8;
  }
  v54 = *(_QWORD *)(v51 - 32);
  if (v54 >= 1)
    goto LABEL_8;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  float v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v5 = **a1;
  v6 = **a2;
  v63 = **a4;
  v64 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    result = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    v21 = v7 < 1;
    v22 = *(unsigned __int8 *)(v5 + 49);
    v23 = v7 - 1;
    if (*(_BYTE *)(v6 + 49))
      v19 = 1;
    v24 = v23;
    if (*(_BYTE *)(v6 + 49))
    {
      v17 = 1;
      v25 = 1;
    }
    else
    {
      v25 = v14;
    }
    if (*(_BYTE *)(v6 + 49))
      v21 = 1;
    if (v15 > v23)
      v26 = 1;
    else
      v26 = v19;
    if (v12 > v24)
      v27 = 1;
    else
      v27 = v17;
    if (v11 > v24)
      v28 = 1;
    else
      v28 = v25;
    v29 = a5;
    v30 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (v31 = *(_QWORD *)(v5 + 16), v32 = v31 - 4, v31 < 4)
        || v32 > (int)v31 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) == 1)
      {
        v33 = 0;
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) != 1)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
        if (v18 < 1)
          goto LABEL_27;
LABEL_37:
        v35 = 0;
        v36 = v64 + v33 * v20;
        v37 = v63 + v34 * v20;
        while (2)
        {
          if (v22
            || (v38 = *(_QWORD *)(v5 + 16), v39 = v38 - 3, v38 < 3)
            || v39 > (int)v38 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v39) == 1)
          {
            v40 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v39);
          if ((v27 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_45:
            v41 = 0;
            if (v13 >= 1)
              break;
            goto LABEL_38;
          }
          v41 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_38:
            if (++v35 == v18)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v42 = 0;
        v43 = v36 + v40 * v35;
        v44 = v37 + v41 * v35;
        while (2)
        {
          if (v22
            || (v45 = *(_QWORD *)(v5 + 16), v46 = v45 - 2, v45 < 2)
            || v46 > (int)v45 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) == 1)
          {
            v47 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
          if ((v28 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_56:
            v48 = 0;
            if (v10 >= 1)
              break;
            goto LABEL_49;
          }
          v48 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_49:
            if (++v42 == v13)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v49 = 0;
        v50 = v43 + v47 * v42;
        v51 = *(_QWORD *)(v5 + 40);
        v52 = *(_QWORD *)(v6 + 40);
        v53 = v44 + v48 * v42;
        while (2)
        {
          if (v22
            || (v61 = *(_QWORD *)(v5 + 16), v62 = v61 - 1, v61 < 1)
            || v62 > (int)v61 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v62) == 1)
          {
            v60 = 0;
            if ((v30 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v60 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v62);
            if ((v30 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) != 1)
              {
                v54 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_61:
                _S2 = 1.0 / sqrtf(*(float *)(v50 + v60 * v49 + v51) + v29);
                __asm { FCVT            H2, S2 }
                *(_WORD *)(v53 + v54 * v49++ + v52) = LOWORD(_S2);
                if (v10 == v49)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v54 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v34 = 0;
      if (v18 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v20 == result)
        return result;
    }
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v17 = 0;
    v12 = 0;
    v14 = 0;
    result = 1;
    v15 = -1;
    v11 = 1;
    goto LABEL_7;
  }
  v15 = v7 - 4;
  result = *(_QWORD *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    v17 = 0;
    v14 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  float v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = **a1;
  v6 = **a2;
  v58 = **a4;
  v59 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    result = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    v21 = v7 < 1;
    v22 = *(unsigned __int8 *)(v5 + 49);
    v23 = v7 - 1;
    if (*(_BYTE *)(v6 + 49))
      v19 = 1;
    v24 = v23;
    if (*(_BYTE *)(v6 + 49))
    {
      v17 = 1;
      v25 = 1;
    }
    else
    {
      v25 = v14;
    }
    if (*(_BYTE *)(v6 + 49))
      v21 = 1;
    if (v15 > v23)
      v26 = 1;
    else
      v26 = v19;
    if (v12 > v24)
      v27 = 1;
    else
      v27 = v17;
    if (v11 > v24)
      v28 = 1;
    else
      v28 = v25;
    v29 = a5;
    v30 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (v31 = *(_QWORD *)(v5 + 16), v32 = v31 - 4, v31 < 4)
        || v32 > (int)v31 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v32) == 1)
      {
        v33 = 0;
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v32);
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) != 1)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
        if (v18 < 1)
          goto LABEL_27;
LABEL_37:
        v35 = 0;
        v36 = v59 + v33 * v20;
        v37 = v58 + v34 * v20;
        while (2)
        {
          if (v22
            || (v38 = *(_QWORD *)(v5 + 16), v39 = v38 - 3, v38 < 3)
            || v39 > (int)v38 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v39) == 1)
          {
            v40 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v39);
          if ((v27 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_45:
            v41 = 0;
            if (v13 >= 1)
              break;
            goto LABEL_38;
          }
          v41 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_38:
            if (++v35 == v18)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v42 = 0;
        v43 = v36 + v40 * v35;
        v44 = v37 + v41 * v35;
        while (2)
        {
          if (v22
            || (v45 = *(_QWORD *)(v5 + 16), v46 = v45 - 2, v45 < 2)
            || v46 > (int)v45 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) == 1)
          {
            v47 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
          if ((v28 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_56:
            v48 = 0;
            if (v10 >= 1)
              break;
            goto LABEL_49;
          }
          v48 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_49:
            if (++v42 == v13)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v49 = 0;
        v50 = v43 + v47 * v42;
        v51 = *(_QWORD *)(v5 + 40);
        v52 = *(_QWORD *)(v6 + 40);
        v53 = v44 + v48 * v42;
        while (2)
        {
          if (v22
            || (v56 = *(_QWORD *)(v5 + 16), v57 = v56 - 1, v56 < 1)
            || v57 > (int)v56 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v57) == 1)
          {
            v55 = 0;
            if ((v30 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v55 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v57);
            if ((v30 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) != 1)
              {
                v54 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_61:
                *(float *)(v53 + v54 * v49 + v52) = 1.0
                                                  / sqrtf(COERCE_FLOAT(COERCE_UNSIGNED_INT(v29+ (float)(COERCE_FLOAT(LODWORD(v29) & 0xFF800000)* 0.0039062)) & 0xFFFF0000)+ COERCE_FLOAT(*(unsigned __int16 *)(v50 + v55 * v49 + v51) << 16));
                if (v10 == ++v49)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v54 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v34 = 0;
      if (v18 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v20 == result)
        return result;
    }
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v17 = 0;
    v12 = 0;
    v14 = 0;
    result = 1;
    v15 = -1;
    v11 = 1;
    goto LABEL_7;
  }
  v15 = v7 - 4;
  result = *(_QWORD *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    v17 = 0;
    v14 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  float v26;
  int v27;
  char v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v5 = **a1;
  v6 = **a2;
  v59 = **a4;
  v60 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    result = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    v21 = v7 < 1;
    v22 = v7 - 1;
    if (*(_BYTE *)(v6 + 49))
      v19 = 1;
    v23 = v22;
    if (*(_BYTE *)(v6 + 49))
    {
      v17 = 1;
      v14 = 1;
      v21 = 1;
    }
    v58 = v15;
    if (v15 > v22)
      v24 = 1;
    else
      v24 = v19;
    if (v12 > v23)
      v17 = 1;
    if (v11 > v23)
      v25 = 1;
    else
      v25 = v14;
    v26 = a5;
    v27 = *(unsigned __int8 *)(v5 + 49);
    v28 = v8 > v23 || v21;
    LODWORD(v29) = COERCE_UNSIGNED_INT(v26 + (float)(COERCE_FLOAT(LODWORD(v26) & 0xFF800000) * 0.0039062)) & 0xFFFF0000;
    while (1)
    {
      if (v27
        || (v30 = *(_QWORD *)(v5 + 16), v31 = v30 - 4, v30 < 4)
        || v31 > (int)v30 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v31) == 1)
      {
        v32 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
        if ((v24 & 1) != 0)
          goto LABEL_31;
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v58) != 1)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v58);
        if (v18 < 1)
          goto LABEL_24;
LABEL_34:
        v34 = 0;
        v35 = v60 + v32 * v20;
        v36 = v59 + v33 * v20;
        while (2)
        {
          if (v27
            || (v37 = *(_QWORD *)(v5 + 16), v38 = v37 - 3, v37 < 3)
            || v38 > (int)v37 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v38) == 1)
          {
            v39 = 0;
            if ((v17 & 1) == 0)
              goto LABEL_41;
            goto LABEL_42;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v38);
          if ((v17 & 1) != 0)
            goto LABEL_42;
LABEL_41:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_42:
            v40 = 0;
            if (v13 >= 1)
              break;
            goto LABEL_35;
          }
          v40 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_35:
            if (++v34 == v18)
              goto LABEL_24;
            continue;
          }
          break;
        }
        v41 = 0;
        v42 = v35 + v39 * v34;
        v43 = v36 + v40 * v34;
        while (2)
        {
          if (v27
            || (v44 = *(_QWORD *)(v5 + 16), v45 = v44 - 2, v44 < 2)
            || v45 > (int)v44 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v45) == 1)
          {
            v46 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_52;
            goto LABEL_53;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v45);
          if ((v25 & 1) != 0)
            goto LABEL_53;
LABEL_52:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_53:
            v47 = 0;
            if (v10 >= 1)
              break;
            goto LABEL_46;
          }
          v47 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_46:
            if (++v41 == v13)
              goto LABEL_35;
            continue;
          }
          break;
        }
        v48 = 0;
        v49 = v42 + v46 * v41;
        v50 = *(_QWORD *)(v5 + 40);
        v51 = *(_QWORD *)(v6 + 40);
        v52 = v43 + v47 * v41;
        while (2)
        {
          if (v27
            || (v55 = *(_QWORD *)(v5 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v56) == 1)
          {
            v53 = 0;
            if ((v28 & 1) != 0)
              goto LABEL_60;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v56);
            if ((v28 & 1) != 0)
            {
LABEL_60:
              v54 = 0;
              goto LABEL_67;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
            goto LABEL_60;
          v54 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_67:
          v57 = 1.0 / sqrtf(v29 + COERCE_FLOAT(*(unsigned __int16 *)(v49 + v53 * v48 + v50) << 16));
          *(_WORD *)(v51 + v52 + v54 * v48++) = HIWORD(COERCE_UNSIGNED_INT(v57 + (float)(COERCE_FLOAT(LODWORD(v57) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v10 == v48)
            goto LABEL_46;
          continue;
        }
      }
LABEL_31:
      v33 = 0;
      if (v18 >= 1)
        goto LABEL_34;
LABEL_24:
      if (++v20 == result)
        return result;
    }
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v17 = 0;
    v12 = 0;
    v14 = 0;
    result = 1;
    v15 = -1;
    v11 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    v15 = v7 - 4;
    v17 = 0;
    v14 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  float v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = **a1;
  v6 = **a2;
  v58 = **a4;
  v59 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    result = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    v21 = v7 < 1;
    v22 = *(unsigned __int8 *)(v5 + 49);
    v23 = v7 - 1;
    if (*(_BYTE *)(v6 + 49))
      v19 = 1;
    v24 = v23;
    if (*(_BYTE *)(v6 + 49))
    {
      v17 = 1;
      v14 = 1;
      v21 = 1;
    }
    v57 = v15;
    if (v15 > v23)
      v25 = 1;
    else
      v25 = v19;
    if (v12 > v24)
      v17 = 1;
    if (v11 > v24)
      v26 = 1;
    else
      v26 = v14;
    v27 = a5;
    v28 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (v29 = *(_QWORD *)(v5 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v57) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v57);
        if (v18 < 1)
          goto LABEL_23;
LABEL_33:
        v33 = 0;
        v34 = v59 + v31 * v20;
        v35 = v58 + v32 * v20;
        while (2)
        {
          if (v22
            || (v36 = *(_QWORD *)(v5 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v17 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v37);
          if ((v17 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_41:
            v39 = 0;
            if (v13 >= 1)
              break;
            goto LABEL_34;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_34:
            if (++v33 == v18)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v22
            || (v43 = *(_QWORD *)(v5 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v44);
          if ((v26 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_52:
            v46 = 0;
            if (v10 >= 1)
              break;
            goto LABEL_45;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_45:
            if (++v40 == v13)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v5 + 40);
        v50 = *(_QWORD *)(v6 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v22
            || (v54 = *(_QWORD *)(v5 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v55) == 1)
          {
            v52 = 0;
            if ((v28 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v55);
            if ((v28 & 1) != 0)
            {
LABEL_59:
              v53 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) == 1)
            goto LABEL_59;
          v53 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_66:
          v56 = 1.0 / sqrtf(*(float *)(v48 + v52 * v47 + v49) + v27);
          *(_WORD *)(v50 + v51 + v53 * v47++) = HIWORD(COERCE_UNSIGNED_INT(v56 + (float)(COERCE_FLOAT(LODWORD(v56) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v10 == v47)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v32 = 0;
      if (v18 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v20 == result)
        return result;
    }
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v17 = 0;
    v12 = 0;
    v14 = 0;
    result = 1;
    v15 = -1;
    v11 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    v15 = v7 - 4;
    v17 = 0;
    v14 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)6>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v5 = **result;
  v6 = **a2;
  v7 = **a3;
  v8 = **a4;
  v9 = *(_QWORD *)(v6 + 16);
  if (v9 < 1)
  {
    v9 = 1;
    v13 = 1;
    v12 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(v6 + 24);
  v11 = v10 + 8 * v9;
  v12 = *(_QWORD *)(v11 - 8);
  if (v9 == 1)
  {
    v13 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    v9 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v15 = v10 + 8 * v9;
  v14 = *(_QWORD *)(v15 - 24);
  if (v9 == 3)
  {
    v9 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    v16 = 0;
    v17 = *(unsigned __int8 *)(v5 + 49);
    result = (uint64_t **)*(unsigned __int8 *)(v6 + 49);
    while (1)
    {
      if (v17
        || (v18 = *(_QWORD *)(v5 + 16), v19 = v18 - 4, v18 < 4)
        || v19 > (int)v18 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
      {
        v20 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
        if ((_DWORD)result)
          break;
      }
      v21 = *(_QWORD *)(v6 + 16);
      v22 = v21 - 4;
      if (v21 < 4 || v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v22) == 1)
        break;
      v23 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
      if (v14 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v16 == v9)
        return result;
    }
    v23 = 0;
    if (v14 < 1)
      goto LABEL_11;
LABEL_24:
    v24 = 0;
    v25 = v7 + v20 * v16;
    v26 = v8 + v23 * v16;
    while (1)
    {
      if (v17
        || (v27 = *(_QWORD *)(v5 + 16), v28 = v27 - 3, v27 < 3)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
        if ((_DWORD)result)
          break;
      }
      v30 = *(_QWORD *)(v6 + 16);
      v31 = v30 - 3;
      if (v30 < 3 || v31 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v31) == 1)
        break;
      v32 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v31);
      if (v13 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v24 == v14)
        goto LABEL_11;
    }
    v32 = 0;
    if (v13 < 1)
      goto LABEL_25;
LABEL_38:
    v33 = 0;
    v34 = v25 + v29 * v24;
    v35 = v26 + v32 * v24;
    while (1)
    {
      if (v17
        || (v36 = *(_QWORD *)(v5 + 16), v37 = v36 - 2, v36 < 2)
        || v37 > (int)v36 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v37) == 1)
      {
        v38 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v37);
        if ((_DWORD)result)
          break;
      }
      v39 = *(_QWORD *)(v6 + 16);
      v40 = v39 - 2;
      if (v39 < 2 || v40 > (int)v39 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v40) == 1)
        break;
      v41 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v40);
      if (v12 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v33 == v13)
        goto LABEL_25;
    }
    v41 = 0;
    if (v12 < 1)
      goto LABEL_39;
LABEL_52:
    v42 = 0;
    v43 = v34 + v38 * v33;
    v44 = *(_QWORD *)(v5 + 40);
    v45 = *(_QWORD *)(v6 + 40);
    v46 = v35 + v41 * v33;
    while (1)
    {
      if (v17
        || (v49 = *(_QWORD *)(v5 + 16), v50 = v49 - 1, v49 < 1)
        || v50 > (int)v49 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v50) == 1)
      {
        v47 = 0;
        if ((_DWORD)result)
          goto LABEL_55;
      }
      else
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v50);
        if ((_DWORD)result)
          goto LABEL_55;
      }
      v51 = *(_QWORD *)(v6 + 16);
      v52 = v51 - 1;
      if (v51 >= 1 && v52 <= (int)v51 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v52) != 1)
      {
        v48 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v52);
        goto LABEL_56;
      }
LABEL_55:
      v48 = 0;
LABEL_56:
      *(_QWORD *)(v46 + v48 * v42 + v45) = (uint64_t)(1.0
                                                   / sqrt((double)(*(_QWORD *)(v43 + v47 * v42 + v44) + (uint64_t)a5)));
      if (v12 == ++v42)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v5 = **a1;
  v6 = **a2;
  v56 = **a4;
  v57 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    result = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    v21 = v7 < 1;
    v22 = *(unsigned __int8 *)(v5 + 49);
    v23 = v7 - 1;
    if (*(_BYTE *)(v6 + 49))
      v19 = 1;
    v24 = v23;
    if (*(_BYTE *)(v6 + 49))
    {
      v17 = 1;
      v14 = 1;
      v21 = 1;
    }
    v55 = v15;
    if (v15 > v23)
      v25 = 1;
    else
      v25 = v19;
    if (v12 > v24)
      v17 = 1;
    if (v11 > v24)
      v26 = 1;
    else
      v26 = v14;
    v27 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (v28 = *(_QWORD *)(v5 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      {
        v30 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
        if ((v25 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v55) != 1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v55);
        if (v18 < 1)
          goto LABEL_23;
LABEL_33:
        v32 = 0;
        v33 = v57 + v30 * v20;
        v34 = v56 + v31 * v20;
        while (2)
        {
          if (v22
            || (v35 = *(_QWORD *)(v5 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
          {
            v37 = 0;
            if ((v17 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
          if ((v17 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_41:
            v38 = 0;
            if (v13 >= 1)
              break;
            goto LABEL_34;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_34:
            if (++v32 == v18)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v39 = 0;
        v40 = v33 + v37 * v32;
        v41 = v34 + v38 * v32;
        while (2)
        {
          if (v22
            || (v42 = *(_QWORD *)(v5 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v43) == 1)
          {
            v44 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v43);
          if ((v26 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_52:
            v45 = 0;
            if (v10 >= 1)
              break;
            goto LABEL_45;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_45:
            if (++v39 == v13)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v46 = 0;
        v47 = v40 + v44 * v39;
        v48 = *(_QWORD *)(v5 + 40);
        v49 = *(_QWORD *)(v6 + 40);
        v50 = v41 + v45 * v39;
        while (2)
        {
          if (v22
            || (v53 = *(_QWORD *)(v5 + 16), v54 = v53 - 1, v53 < 1)
            || v54 > (int)v53 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v54) == 1)
          {
            v52 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_60;
          }
          else
          {
            v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v54);
            if ((v27 & 1) == 0)
            {
LABEL_60:
              if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) != 1)
              {
                v51 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_57:
                *(_DWORD *)(v50 + v51 * v46 + v49) = (int)(1.0
                                                         / sqrt((double)(*(_DWORD *)(v47 + v52 * v46 + v48) + (int)a5)));
                if (v10 == ++v46)
                  goto LABEL_45;
                continue;
              }
            }
          }
          break;
        }
        v51 = 0;
        goto LABEL_57;
      }
LABEL_30:
      v31 = 0;
      if (v18 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v20 == result)
        return result;
    }
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v17 = 0;
    v12 = 0;
    v14 = 0;
    result = 1;
    v15 = -1;
    v11 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    v15 = v7 - 4;
    v17 = 0;
    v14 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v5 = **a1;
  v6 = **a2;
  v56 = **a4;
  v57 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    result = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    v21 = v7 < 1;
    v22 = *(unsigned __int8 *)(v5 + 49);
    v23 = v7 - 1;
    if (*(_BYTE *)(v6 + 49))
      v19 = 1;
    v24 = v23;
    if (*(_BYTE *)(v6 + 49))
    {
      v17 = 1;
      v14 = 1;
      v21 = 1;
    }
    v55 = v15;
    if (v15 > v23)
      v25 = 1;
    else
      v25 = v19;
    if (v12 > v24)
      v17 = 1;
    if (v11 > v24)
      v26 = 1;
    else
      v26 = v14;
    v27 = v8 > v24 || v21;
    while (1)
    {
      if (v22
        || (v28 = *(_QWORD *)(v5 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      {
        v30 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
        if ((v25 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v55) != 1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v55);
        if (v18 < 1)
          goto LABEL_23;
LABEL_33:
        v32 = 0;
        v33 = v57 + v30 * v20;
        v34 = v56 + v31 * v20;
        while (2)
        {
          if (v22
            || (v35 = *(_QWORD *)(v5 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
          {
            v37 = 0;
            if ((v17 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
          if ((v17 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_41:
            v38 = 0;
            if (v13 >= 1)
              break;
            goto LABEL_34;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_34:
            if (++v32 == v18)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v39 = 0;
        v40 = v33 + v37 * v32;
        v41 = v34 + v38 * v32;
        while (2)
        {
          if (v22
            || (v42 = *(_QWORD *)(v5 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v43) == 1)
          {
            v44 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v43);
          if ((v26 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_52:
            v45 = 0;
            if (v10 >= 1)
              break;
            goto LABEL_45;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_45:
            if (++v39 == v13)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v46 = 0;
        v47 = v40 + v44 * v39;
        v48 = *(_QWORD *)(v5 + 40);
        v49 = *(_QWORD *)(v6 + 40);
        v50 = v41 + v45 * v39;
        while (2)
        {
          if (v22
            || (v53 = *(_QWORD *)(v5 + 16), v54 = v53 - 1, v53 < 1)
            || v54 > (int)v53 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v54) == 1)
          {
            v52 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_60;
          }
          else
          {
            v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v54);
            if ((v27 & 1) == 0)
            {
LABEL_60:
              if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) != 1)
              {
                v51 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_57:
                *(_WORD *)(v50 + v51 * v46 + v49) = (int)(1.0
                                                        / sqrt((double)(*(__int16 *)(v47 + v52 * v46 + v48) + (int)a5)));
                if (v10 == ++v46)
                  goto LABEL_45;
                continue;
              }
            }
          }
          break;
        }
        v51 = 0;
        goto LABEL_57;
      }
LABEL_30:
      v31 = 0;
      if (v18 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v20 == result)
        return result;
    }
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v17 = 0;
    v12 = 0;
    v14 = 0;
    result = 1;
    v15 = -1;
    v11 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    v15 = v7 - 4;
    v17 = 0;
    v14 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)6>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v5 = **(_QWORD **)result;
  v6 = **a2;
  v7 = **a3;
  v8 = **a4;
  v9 = *(_QWORD *)(v6 + 16);
  if (v9 < 1)
  {
    v9 = 1;
    v13 = 1;
    v12 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(v6 + 24);
  v11 = v10 + 8 * v9;
  v12 = *(_QWORD *)(v11 - 8);
  if (v9 == 1)
  {
    v13 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    v9 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v15 = v10 + 8 * v9;
  v14 = *(_QWORD *)(v15 - 24);
  if (v9 == 3)
  {
    v9 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    v16 = 0;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v17 = *(_QWORD *)(v5 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v18) == 1)
      {
        v19 = 0;
        result = *(unsigned __int8 *)(v6 + 49);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
        result = *(unsigned __int8 *)(v6 + 49);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v20 = *(_QWORD *)(v6 + 16);
      result = v20 - 4;
      if (v20 < 4 || result > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * result) == 1)
        break;
      v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
      if (v14 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v16 == v9)
        return result;
    }
    v21 = 0;
    if (v14 < 1)
      goto LABEL_11;
LABEL_24:
    result = 0;
    v22 = v7 + v19 * v16;
    v23 = v8 + v21 * v16;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v24 = *(_QWORD *)(v5 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      {
        v26 = 0;
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v27 = *(_QWORD *)(v6 + 16);
      v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v28) == 1)
        break;
      v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v28);
      if (v13 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++result == v14)
        goto LABEL_11;
    }
    v29 = 0;
    if (v13 < 1)
      goto LABEL_25;
LABEL_38:
    v30 = 0;
    v31 = v22 + v26 * result;
    v32 = v23 + v29 * result;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v33 = *(_QWORD *)(v5 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      {
        v35 = 0;
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v36 = *(_QWORD *)(v6 + 16);
      v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v37) == 1)
        break;
      v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v37);
      if (v12 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v30 == v13)
        goto LABEL_25;
    }
    v38 = 0;
    if (v12 < 1)
      goto LABEL_39;
LABEL_52:
    v39 = 0;
    v40 = v31 + v35 * v30;
    v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v44 = *(_QWORD *)(v5 + 16), v45 = v44 - 1, v44 < 1)
        || v45 > (int)v44 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v45) == 1)
      {
        v42 = 0;
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_55;
      }
      else
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v45);
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_55;
      }
      v46 = *(_QWORD *)(v6 + 16);
      v47 = v46 - 1;
      if (v46 >= 1 && v47 <= (int)v46 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v47) != 1)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v47);
        goto LABEL_56;
      }
LABEL_55:
      v43 = 0;
LABEL_56:
      *(_BYTE *)(v41 + v43 * v39 + *(_QWORD *)(v6 + 40)) = (int)(1.0
                                                               / sqrt((double)(*(char *)(v40
                                                                                       + v42 * v39
                                                                                       + *(_QWORD *)(v5 + 40))
                                                                             + (int)a5)));
      if (v12 == ++v39)
        goto LABEL_39;
    }
  }
  return result;
}

float std::sqrt[abi:nn180100]<float>(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v6;
  float v7;

  v1 = a1[1];
  v2 = INFINITY;
  if (fabsf(v1) != INFINITY)
  {
    v2 = *a1;
    if (fabsf(*a1) == INFINITY)
    {
      if (v2 <= 0.0)
        return 0.0;
    }
    else
    {
      v6 = a1[1];
      v7 = *a1;
      v3 = sqrtf(hypotf(*a1, v1));
      v4 = atan2f(v6, v7);
      v2 = NAN;
      if ((LODWORD(v3) & 0x80000000) == 0)
      {
        if (fabsf(v4 * 0.5) == INFINITY)
        {
          if (v3 == INFINITY)
            return v3;
          else
            return NAN;
        }
        else
        {
          return v3 * __sincosf_stret(v4 * 0.5).__cosval;
        }
      }
    }
  }
  return v2;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v45 = *(_QWORD *)(v5 + 16);
      v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      *(float32x2_t *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40)) = vrndp_f32(*(float32x2_t *)&v39[v41 * v38
                                                                                              + *(_QWORD *)(v4 + 40)]);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = ceilf(*(float *)(v48 + v53 * v47 + v49));
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _DWORD *v44;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v57 = *(_QWORD *)(v4 + 16), v58 = v57 - 1, v57 < 1)
        || v58 > (int)v57 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v58) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v58);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v59 = *(_QWORD *)(v5 + 16);
      v60 = v59 - 1;
      if (v59 >= 1 && v60 <= (int)v59 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v60) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v60);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_DWORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _H0 = *(_WORD *)v43;
      _H1 = *((_WORD *)v43 + 1);
      __asm { FCVT            S0, H0 }
      _S0 = ceilf(_S0);
      __asm
      {
        FCVT            H0, S0
        FCVT            S1, H1
      }
      _S1 = ceilf(_S1);
      __asm
      {
        FCVT            H1, S1
        FCVT            S0, H0
        FCVT            S1, H1
      }
      *v44 = _S0;
      v44[1] = _S1;
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = **a1;
  v5 = **a2;
  v64 = **a4;
  v65 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v65 + v31 * v19;
        v35 = v64 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v62 = *(_QWORD *)(v4 + 16), v63 = v62 - 1, v62 < 1)
            || v63 > (int)v62 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v63) == 1)
          {
            v61 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v61 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v63);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v61 * v47 + v49);
                __asm { FCVT            S0, H0 }
                _S0 = ceilf(_S0);
                __asm
                {
                  FCVT            H0, S0
                  FCVT            S0, H0
                }
                *(_DWORD *)(v51 + v52 * v47++ + v50) = _S0;
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _WORD *v44;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v55 = *(_QWORD *)(v4 + 16), v56 = v55 - 1, v55 < 1)
        || v56 > (int)v55 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v56) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v57 = *(_QWORD *)(v5 + 16);
      v58 = v57 - 1;
      if (v57 >= 1 && v58 <= (int)v57 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v58) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v58);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_WORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _H0 = *(_WORD *)v43;
      _H1 = *((_WORD *)v43 + 1);
      __asm { FCVT            S0, H0 }
      _S0 = ceilf(_S0);
      __asm
      {
        FCVT            H0, S0
        FCVT            S1, H1
      }
      _S1 = ceilf(_S1);
      __asm { FCVT            H1, S1 }
      *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = **a2;
  v63 = **a4;
  v64 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v64 + v31 * v19;
        v35 = v63 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v61 = *(_QWORD *)(v4 + 16), v62 = v61 - 1, v61 < 1)
            || v62 > (int)v61 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v62) == 1)
          {
            v60 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v60 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v62);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v60 * v47 + v49);
                __asm { FCVT            S0, H0 }
                _S0 = ceilf(_S0);
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  _WORD *v44;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v51 = *(_QWORD *)(v4 + 16), v52 = v51 - 1, v51 < 1)
        || v52 > (int)v51 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v52) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v52);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v53 = *(_QWORD *)(v5 + 16);
      v54 = v53 - 1;
      if (v53 >= 1 && v54 <= (int)v53 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v54) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v54);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = (float *)&v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_WORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _S0 = ceilf(*v43);
      _S1 = ceilf(v43[1]);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = **a1;
  v5 = **a2;
  v61 = **a4;
  v62 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v62 + v31 * v19;
        v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v59 = *(_QWORD *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v60) == 1)
          {
            v58 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S0 = ceilf(*(float *)(v48 + v58 * v47 + v49));
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = ceilf(COERCE_FLOAT(*(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16));
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v55 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v55) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v55);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v57 + v29 * v19;
        v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          v54 = ceilf(COERCE_FLOAT(*(unsigned __int16 *)(v46 + v50 * v45 + v47) << 16));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v55 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v55) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v55);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v57 + v29 * v19;
        v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          v54 = ceilf(*(float *)(v46 + v50 * v45 + v47));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    v16 = *(unsigned __int8 *)(v4 + 49);
    result = (uint64_t **)*(unsigned __int8 *)(v5 + 49);
    while (1)
    {
      if (v16
        || (v17 = *(_QWORD *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      {
        v19 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
        if ((_DWORD)result)
          break;
      }
      v20 = *(_QWORD *)(v5 + 16);
      v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v21) == 1)
        break;
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v22 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v23 = 0;
    v24 = v6 + v19 * v15;
    v25 = v7 + v22 * v15;
    while (1)
    {
      if (v16
        || (v26 = *(_QWORD *)(v4 + 16), v27 = v26 - 3, v26 < 3)
        || v27 > (int)v26 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
      {
        v28 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
        if ((_DWORD)result)
          break;
      }
      v29 = *(_QWORD *)(v5 + 16);
      v30 = v29 - 3;
      if (v29 < 3 || v30 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
        break;
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v23 == v13)
        goto LABEL_11;
    }
    v31 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v32 = 0;
    v33 = v24 + v28 * v23;
    v34 = v25 + v31 * v23;
    while (1)
    {
      if (v16
        || (v35 = *(_QWORD *)(v4 + 16), v36 = v35 - 2, v35 < 2)
        || v36 > (int)v35 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v36) == 1)
      {
        v37 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v36);
        if ((_DWORD)result)
          break;
      }
      v38 = *(_QWORD *)(v5 + 16);
      v39 = v38 - 2;
      if (v38 < 2 || v39 > (int)v38 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v39) == 1)
        break;
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v39);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v32 == v12)
        goto LABEL_25;
    }
    v40 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v41 = 0;
    v42 = v33 + v37 * v32;
    v43 = *(_QWORD *)(v4 + 40);
    v44 = *(_QWORD *)(v5 + 40);
    v45 = v34 + v40 * v32;
    while (1)
    {
      if (v16
        || (v48 = *(_QWORD *)(v4 + 16), v49 = v48 - 1, v48 < 1)
        || v49 > (int)v48 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v49) == 1)
      {
        v46 = 0;
        if ((_DWORD)result)
          goto LABEL_55;
      }
      else
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v49);
        if ((_DWORD)result)
          goto LABEL_55;
      }
      v50 = *(_QWORD *)(v5 + 16);
      v51 = v50 - 1;
      if (v50 >= 1 && v51 <= (int)v50 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v51) != 1)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v51);
        goto LABEL_56;
      }
LABEL_55:
      v47 = 0;
LABEL_56:
      *(_QWORD *)(v45 + v47 * v41 + v44) = (uint64_t)(double)*(uint64_t *)(v42 + v46 * v41 + v43);
      if (v11 == ++v41)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = *(_DWORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_WORD *)(v51 + v52 * v47 + v50) = *(_WORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v45 = *(_QWORD *)(v5 + 16);
      v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      *(_BYTE *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40)) = v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)8>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v45 = *(_QWORD *)(v5 + 16);
      v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      *(float32x2_t *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40)) = vrndm_f32(*(float32x2_t *)&v39[v41 * v38
                                                                                              + *(_QWORD *)(v4 + 40)]);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = floorf(*(float *)(v48 + v53 * v47 + v49));
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)8>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _DWORD *v44;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v57 = *(_QWORD *)(v4 + 16), v58 = v57 - 1, v57 < 1)
        || v58 > (int)v57 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v58) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v58);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v59 = *(_QWORD *)(v5 + 16);
      v60 = v59 - 1;
      if (v59 >= 1 && v60 <= (int)v59 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v60) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v60);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_DWORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _H0 = *(_WORD *)v43;
      _H1 = *((_WORD *)v43 + 1);
      __asm { FCVT            S0, H0 }
      _S0 = floorf(_S0);
      __asm
      {
        FCVT            H0, S0
        FCVT            S1, H1
      }
      _S1 = floorf(_S1);
      __asm
      {
        FCVT            H1, S1
        FCVT            S0, H0
        FCVT            S1, H1
      }
      *v44 = _S0;
      v44[1] = _S1;
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = **a1;
  v5 = **a2;
  v64 = **a4;
  v65 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v65 + v31 * v19;
        v35 = v64 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v62 = *(_QWORD *)(v4 + 16), v63 = v62 - 1, v62 < 1)
            || v63 > (int)v62 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v63) == 1)
          {
            v61 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v61 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v63);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v61 * v47 + v49);
                __asm { FCVT            S0, H0 }
                _S0 = floorf(_S0);
                __asm
                {
                  FCVT            H0, S0
                  FCVT            S0, H0
                }
                *(_DWORD *)(v51 + v52 * v47++ + v50) = _S0;
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)8>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _WORD *v44;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v55 = *(_QWORD *)(v4 + 16), v56 = v55 - 1, v55 < 1)
        || v56 > (int)v55 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v56) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v57 = *(_QWORD *)(v5 + 16);
      v58 = v57 - 1;
      if (v57 >= 1 && v58 <= (int)v57 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v58) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v58);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_WORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _H0 = *(_WORD *)v43;
      _H1 = *((_WORD *)v43 + 1);
      __asm { FCVT            S0, H0 }
      _S0 = floorf(_S0);
      __asm
      {
        FCVT            H0, S0
        FCVT            S1, H1
      }
      _S1 = floorf(_S1);
      __asm { FCVT            H1, S1 }
      *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = **a2;
  v63 = **a4;
  v64 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v64 + v31 * v19;
        v35 = v63 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v61 = *(_QWORD *)(v4 + 16), v62 = v61 - 1, v61 < 1)
            || v62 > (int)v61 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v62) == 1)
          {
            v60 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v60 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v62);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v60 * v47 + v49);
                __asm { FCVT            S0, H0 }
                _S0 = floorf(_S0);
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)8>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  _WORD *v44;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v51 = *(_QWORD *)(v4 + 16), v52 = v51 - 1, v51 < 1)
        || v52 > (int)v51 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v52) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v52);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v53 = *(_QWORD *)(v5 + 16);
      v54 = v53 - 1;
      if (v53 >= 1 && v54 <= (int)v53 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v54) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v54);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = (float *)&v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_WORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _S0 = floorf(*v43);
      _S1 = floorf(v43[1]);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = **a1;
  v5 = **a2;
  v61 = **a4;
  v62 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v62 + v31 * v19;
        v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v59 = *(_QWORD *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v60) == 1)
          {
            v58 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S0 = floorf(*(float *)(v48 + v58 * v47 + v49));
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = floorf(COERCE_FLOAT(*(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16));
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v55 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v55) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v55);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v57 + v29 * v19;
        v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          v54 = floorf(COERCE_FLOAT(*(unsigned __int16 *)(v46 + v50 * v45 + v47) << 16));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v55 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v55) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v55);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v57 + v29 * v19;
        v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          v54 = floorf(*(float *)(v46 + v50 * v45 + v47));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v45 = *(_QWORD *)(v5 + 16);
      v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      *(float32x2_t *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40)) = vneg_f32(*(float32x2_t *)&v39[v41 * v38
                                                                                             + *(_QWORD *)(v4 + 40)]);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = -*(float *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v5 = **result;
  v6 = **a2;
  v7 = **a3;
  v8 = **a4;
  v9 = *(_QWORD *)(v6 + 16);
  if (v9 < 1)
  {
    v9 = 1;
    v13 = 1;
    v12 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(v6 + 24);
  v11 = v10 + 8 * v9;
  v12 = *(_QWORD *)(v11 - 8);
  if (v9 == 1)
  {
    v13 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    v9 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v15 = v10 + 8 * v9;
  v14 = *(_QWORD *)(v15 - 24);
  if (v9 == 3)
  {
    v9 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    v16 = 0;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v17 = *(_QWORD *)(v5 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v18) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v5 + 56) + 8 * v18);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v19 = *(_QWORD *)(v6 + 16);
      v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) == 1)
        break;
      v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
      if (v14 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v16 == v9)
        return result;
    }
    v21 = 0;
    if (v14 < 1)
      goto LABEL_11;
LABEL_24:
    v22 = 0;
    result = (uint64_t **)(v7 + (_QWORD)result * v16);
    v23 = v8 + v21 * v16;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v24 = *(_QWORD *)(v5 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      {
        v26 = 0;
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v27 = *(_QWORD *)(v6 + 16);
      v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v28) == 1)
        break;
      v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v28);
      if (v13 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v22 == v14)
        goto LABEL_11;
    }
    v29 = 0;
    if (v13 < 1)
      goto LABEL_25;
LABEL_38:
    v30 = 0;
    v31 = (char *)result + v26 * v22;
    v32 = v23 + v29 * v22;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v33 = *(_QWORD *)(v5 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      {
        v35 = 0;
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v36 = *(_QWORD *)(v6 + 16);
      v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v37) == 1)
        break;
      v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v37);
      if (v12 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v30 == v13)
        goto LABEL_25;
    }
    v38 = 0;
    if (v12 < 1)
      goto LABEL_39;
LABEL_52:
    v39 = 0;
    v40 = &v31[v35 * v30];
    v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v58 = *(_QWORD *)(v5 + 16), v59 = v58 - 1, v58 < 1)
        || v59 > (int)v58 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v59) == 1)
      {
        v42 = 0;
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_55;
      }
      else
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v59);
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_55;
      }
      v60 = *(_QWORD *)(v6 + 16);
      v61 = v60 - 1;
      if (v60 >= 1 && v61 <= (int)v60 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v61) != 1)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v61);
        goto LABEL_56;
      }
LABEL_55:
      v43 = 0;
LABEL_56:
      LODWORD(_D0) = *(_DWORD *)&v40[v42 * v39 + *(_QWORD *)(v5 + 40)];
      _H1 = WORD1(_D0);
      __asm { FCVT            S1, H1 }
      _S1 = -_S1;
      __asm
      {
        FCVT            H1, S1
        FCVT            S2, H0
      }
      *(float *)_D2.i32 = -_S2;
      __asm { FCVT            H2, S2 }
      _D2.i16[1] = LOWORD(_S1);
      LOWORD(_S1) = WORD2(_D0);
      __asm { FCVT            S1, H1 }
      _S1 = -_S1;
      __asm { FCVT            H1, S1 }
      _D2.i16[2] = LOWORD(_S1);
      _H0 = HIWORD(_D0);
      __asm { FCVT            S0, H0 }
      _S0 = -_S0;
      __asm { FCVT            H0, S0 }
      _D2.i16[3] = LOWORD(_S0);
      *(_QWORD *)&_D0 = vcvtq_f32_f16(_D2).u64[0];
      *(double *)(v41 + v43 * v39++ + *(_QWORD *)(v6 + 40)) = _D0;
      if (v12 == v39)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = **a1;
  v5 = **a2;
  v62 = **a4;
  v63 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v63 + v31 * v19;
        v35 = v62 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v60 = *(_QWORD *)(v4 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v61) == 1)
          {
            v59 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v59 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v61);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v59 * v47 + v49);
                __asm { FCVT            S0, H0 }
                *(float *)(v51 + v52 * v47++ + v50) = -_S0;
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _WORD *v44;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v55 = *(_QWORD *)(v4 + 16), v56 = v55 - 1, v55 < 1)
        || v56 > (int)v55 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v56) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v57 = *(_QWORD *)(v5 + 16);
      v58 = v57 - 1;
      if (v57 >= 1 && v58 <= (int)v57 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v58) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v58);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_WORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _H0 = *(_WORD *)v43;
      _H1 = *((_WORD *)v43 + 1);
      __asm { FCVT            S0, H0 }
      _S0 = -_S0;
      __asm
      {
        FCVT            H0, S0
        FCVT            S1, H1
      }
      _S1 = -_S1;
      __asm { FCVT            H1, S1 }
      *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = **a2;
  v63 = **a4;
  v64 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v64 + v31 * v19;
        v35 = v63 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v61 = *(_QWORD *)(v4 + 16), v62 = v61 - 1, v61 < 1)
            || v62 > (int)v61 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v62) == 1)
          {
            v60 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v60 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v62);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v60 * v47 + v49);
                __asm { FCVT            S0, H0 }
                _S0 = -_S0;
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _WORD *v44;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v55 = *(_QWORD *)(v4 + 16), v56 = v55 - 1, v55 < 1)
        || v56 > (int)v55 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v56) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v57 = *(_QWORD *)(v5 + 16);
      v58 = v57 - 1;
      if (v57 >= 1 && v58 <= (int)v57 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v58) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v58);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_WORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _S0 = *(_DWORD *)v43;
      _S1 = *((_DWORD *)v43 + 1);
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      _S0 = -_S0;
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
        FCVT            S1, H1
      }
      _S1 = -_S1;
      __asm { FCVT            H1, S1 }
      *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = **a2;
  v63 = **a4;
  v64 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v64 + v31 * v19;
        v35 = v63 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v61 = *(_QWORD *)(v4 + 16), v62 = v61 - 1, v61 < 1)
            || v62 > (int)v61 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v62) == 1)
          {
            v60 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v60 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v62);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S0 = *(_DWORD *)(v48 + v60 * v47 + v49);
                __asm
                {
                  FCVT            H0, S0
                  FCVT            S0, H0
                }
                _S0 = -_S0;
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = (*(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16) ^ 0x80000000;
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v55 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v55) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v55);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v57 + v29 * v19;
        v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          LODWORD(v54) = *(unsigned __int16 *)(v46 + v50 * v45 + v47) << 16;
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(-(float)(v54
                                                                                  - (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(-v54) & 0xFF800000)
                                                                                          * 0.0039062))));
          if (v9 == v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = **a1;
  v5 = **a2;
  v55 = **a4;
  v56 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v54 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v54) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v54);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v56 + v29 * v19;
        v33 = v55 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          *(_WORD *)(v48 + v49 + v51 * v45) = HIWORD(COERCE_UNSIGNED_INT(-(float)(*(float *)(v46 + v50 * v45 + v47)
                                                                                - (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(-*(float *)(v46 + v50 * v45 + v47)) & 0xFF800000)
                                                                                        * 0.0039062))));
          if (v9 == ++v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    v16 = *(unsigned __int8 *)(v4 + 49);
    result = (uint64_t **)*(unsigned __int8 *)(v5 + 49);
    while (1)
    {
      if (v16
        || (v17 = *(_QWORD *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      {
        v19 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
        if ((_DWORD)result)
          break;
      }
      v20 = *(_QWORD *)(v5 + 16);
      v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v21) == 1)
        break;
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v22 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v23 = 0;
    v24 = v6 + v19 * v15;
    v25 = v7 + v22 * v15;
    while (1)
    {
      if (v16
        || (v26 = *(_QWORD *)(v4 + 16), v27 = v26 - 3, v26 < 3)
        || v27 > (int)v26 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
      {
        v28 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
        if ((_DWORD)result)
          break;
      }
      v29 = *(_QWORD *)(v5 + 16);
      v30 = v29 - 3;
      if (v29 < 3 || v30 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
        break;
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v23 == v13)
        goto LABEL_11;
    }
    v31 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v32 = 0;
    v33 = v24 + v28 * v23;
    v34 = v25 + v31 * v23;
    while (1)
    {
      if (v16
        || (v35 = *(_QWORD *)(v4 + 16), v36 = v35 - 2, v35 < 2)
        || v36 > (int)v35 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v36) == 1)
      {
        v37 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v36);
        if ((_DWORD)result)
          break;
      }
      v38 = *(_QWORD *)(v5 + 16);
      v39 = v38 - 2;
      if (v38 < 2 || v39 > (int)v38 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v39) == 1)
        break;
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v39);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v32 == v12)
        goto LABEL_25;
    }
    v40 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v41 = 0;
    v42 = v33 + v37 * v32;
    v43 = *(_QWORD *)(v4 + 40);
    v44 = *(_QWORD *)(v5 + 40);
    v45 = v34 + v40 * v32;
    while (1)
    {
      if (v16
        || (v48 = *(_QWORD *)(v4 + 16), v49 = v48 - 1, v48 < 1)
        || v49 > (int)v48 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v49) == 1)
      {
        v46 = 0;
        if ((_DWORD)result)
          goto LABEL_55;
      }
      else
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v49);
        if ((_DWORD)result)
          goto LABEL_55;
      }
      v50 = *(_QWORD *)(v5 + 16);
      v51 = v50 - 1;
      if (v50 >= 1 && v51 <= (int)v50 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v51) != 1)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v51);
        goto LABEL_56;
      }
LABEL_55:
      v47 = 0;
LABEL_56:
      *(_QWORD *)(v45 + v47 * v41 + v44) = -*(_QWORD *)(v42 + v46 * v41 + v43);
      if (v11 == ++v41)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = -*(_DWORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_WORD *)(v51 + v52 * v47 + v50) = -*(_WORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)9>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v45 = *(_QWORD *)(v5 + 16);
      v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      *(_BYTE *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40)) = -v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  uint64_t v44;
  float v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v47 = *(_QWORD *)(v4 + 16), v48 = v47 - 1, v47 < 1)
        || v48 > (int)v47 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v48) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v48);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v49 = *(_QWORD *)(v5 + 16);
      v50 = v49 - 1;
      if (v49 >= 1 && v50 <= (int)v49 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v50) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v50);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = (float *)&v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = v40 + v42 * v38 + *(_QWORD *)(v5 + 40);
      v45 = v43[1];
      v46 = *v43 == 0.0;
      if (v45 != 0.0)
        v46 = 0;
      *(float *)v44 = (float)v46;
      *(_DWORD *)(v44 + 4) = 0;
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = **a2;
  v58 = **a4;
  v59 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v59 + v31 * v19;
        v35 = v58 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v56 = *(_QWORD *)(v4 + 16), v57 = v56 - 1, v56 < 1)
            || v57 > (int)v56 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v57) == 1)
          {
            v55 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_67;
          }
          else
          {
            v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v57);
            if ((v28 & 1) == 0)
            {
LABEL_67:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                v53 = v51 + v52 * v47;
                if (*(float *)(v48 + v55 * v47 + v49) == 0.0)
                  v54 = 1.0;
                else
                  v54 = 0.0;
                *(float *)(v53 + v50) = v54;
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _BOOL4 v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
        || v55 > (int)v54 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v56 = *(_QWORD *)(v5 + 16);
      v57 = v56 - 1;
      if (v56 >= 1 && v57 <= (int)v56 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v57) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v57);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = v40 + v42 * v38 + *(_QWORD *)(v5 + 40);
      _H0 = *(_WORD *)v43;
      _H1 = *((_WORD *)v43 + 1);
      __asm { FCVT            S0, H0 }
      v52 = _S0 == 0.0;
      __asm { FCVT            S0, H1 }
      if (_S0 != 0.0)
        v52 = 0;
      *(float *)v44 = (float)v52;
      *(_DWORD *)(v44 + 4) = 0;
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = **a1;
  v5 = **a2;
  v64 = **a4;
  v65 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v65 + v31 * v19;
        v35 = v64 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v62 = *(_QWORD *)(v4 + 16), v63 = v62 - 1, v62 < 1)
            || v63 > (int)v62 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v63) == 1)
          {
            v61 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_67;
          }
          else
          {
            v61 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v63);
            if ((v28 & 1) == 0)
            {
LABEL_67:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                v53 = v51 + v52 * v47;
                _H2 = *(_WORD *)(v48 + v61 * v47 + v49);
                __asm { FCVT            S2, H2 }
                if (_S2 == 0.0)
                  v60 = 1.0;
                else
                  v60 = 0.0;
                *(float *)(v53 + v50) = v60;
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _BOOL4 v52;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v56 = *(_QWORD *)(v4 + 16), v57 = v56 - 1, v56 < 1)
        || v57 > (int)v56 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v57) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v57);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v58 = *(_QWORD *)(v5 + 16);
      v59 = v58 - 1;
      if (v58 >= 1 && v59 <= (int)v58 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v59) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v59);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = v40 + v42 * v38;
      v44 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      _H0 = *(_WORD *)v44;
      _H1 = *((_WORD *)v44 + 1);
      __asm { FCVT            S0, H0 }
      v52 = _S0 == 0.0;
      __asm { FCVT            S0, H1 }
      if (_S0 != 0.0)
        v52 = 0;
      _S0 = (float)v52;
      v55 = (_WORD *)(v43 + *(_QWORD *)(v5 + 40));
      __asm { FCVT            H0, S0 }
      *v55 = LOWORD(_S0);
      v55[1] = 0;
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v6 = **a1;
  v7 = **a2;
  v66 = **a4;
  v67 = **a3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v8 - 1;
  if (v8 <= 0)
  {
    v12 = v8 - 2;
    v11 = 1;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    v12 = -1;
LABEL_5:
    v13 = v8 - 3;
    v14 = 1;
    v15 = 1;
LABEL_6:
    v16 = v8 - 4;
    result = 1;
    v18 = 1;
    v19 = 1;
LABEL_7:
    v20 = 1;
LABEL_8:
    v21 = 0;
    v22 = v8 < 1;
    v23 = *(unsigned __int8 *)(v6 + 49);
    v24 = v8 - 1;
    if (*(_BYTE *)(v7 + 49))
      v20 = 1;
    v25 = v24;
    if (*(_BYTE *)(v7 + 49))
    {
      v18 = 1;
      v26 = 1;
    }
    else
    {
      v26 = v15;
    }
    if (*(_BYTE *)(v7 + 49))
      v22 = 1;
    if (v16 > v24)
      v27 = 1;
    else
      v27 = v20;
    if (v13 > v25)
      v28 = 1;
    else
      v28 = v18;
    if (v12 > v25)
      v29 = 1;
    else
      v29 = v26;
    v30 = v9 > v25 || v22;
    LOWORD(a6) = 15360;
    while (1)
    {
      if (v23
        || (v31 = *(_QWORD *)(v6 + 16), v32 = v31 - 4, v31 < 4)
        || v32 > (int)v31 - 1
        || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v32) == 1)
      {
        v33 = 0;
        if ((v27 & 1) != 0)
          goto LABEL_35;
      }
      else
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v32);
        if ((v27 & 1) != 0)
          goto LABEL_35;
      }
      if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v16) != 1)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16);
        if (v19 < 1)
          goto LABEL_28;
LABEL_38:
        v35 = 0;
        v36 = v67 + v33 * v21;
        v37 = v66 + v34 * v21;
        while (2)
        {
          if (v23
            || (v38 = *(_QWORD *)(v6 + 16), v39 = v38 - 3, v38 < 3)
            || v39 > (int)v38 - 1
            || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v39) == 1)
          {
            v40 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_45;
            goto LABEL_46;
          }
          v40 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v39);
          if ((v28 & 1) != 0)
            goto LABEL_46;
LABEL_45:
          if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v13) == 1)
          {
LABEL_46:
            v41 = 0;
            if (v14 >= 1)
              break;
            goto LABEL_39;
          }
          v41 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13);
          if (v14 < 1)
          {
LABEL_39:
            if (++v35 == v19)
              goto LABEL_28;
            continue;
          }
          break;
        }
        v42 = 0;
        v43 = v36 + v40 * v35;
        v44 = v37 + v41 * v35;
        while (2)
        {
          if (v23
            || (v45 = *(_QWORD *)(v6 + 16), v46 = v45 - 2, v45 < 2)
            || v46 > (int)v45 - 1
            || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v46) == 1)
          {
            v47 = 0;
            if ((v29 & 1) == 0)
              goto LABEL_56;
            goto LABEL_57;
          }
          v47 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v46);
          if ((v29 & 1) != 0)
            goto LABEL_57;
LABEL_56:
          if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v12) == 1)
          {
LABEL_57:
            v48 = 0;
            if (v11 >= 1)
              break;
            goto LABEL_50;
          }
          v48 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v12);
          if (v11 < 1)
          {
LABEL_50:
            if (++v42 == v14)
              goto LABEL_39;
            continue;
          }
          break;
        }
        v49 = 0;
        v50 = v43 + v47 * v42;
        v51 = *(_QWORD *)(v6 + 40);
        v52 = *(_QWORD *)(v7 + 40);
        v53 = v44 + v48 * v42;
        while (2)
        {
          if (v23
            || (v64 = *(_QWORD *)(v6 + 16), v65 = v64 - 1, v64 < 1)
            || v65 > (int)v64 - 1
            || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v65) == 1)
          {
            v63 = 0;
            if ((v30 & 1) == 0)
              goto LABEL_68;
          }
          else
          {
            v63 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v65);
            if ((v30 & 1) == 0)
            {
LABEL_68:
              if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) != 1)
              {
                v54 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
LABEL_62:
                v55 = v53 + v54 * v49;
                _H2 = *(_WORD *)(v50 + v63 * v49 + v51);
                __asm { FCVT            S2, H2 }
                if (_S2 == 0.0)
                  v62 = a6;
                else
                  v62 = 0.0;
                *(_WORD *)(v55 + v52) = LOWORD(v62);
                if (v11 == ++v49)
                  goto LABEL_50;
                continue;
              }
            }
          }
          break;
        }
        v54 = 0;
        goto LABEL_62;
      }
LABEL_35:
      v34 = 0;
      if (v19 >= 1)
        goto LABEL_38;
LABEL_28:
      if (++v21 == result)
        return result;
    }
  }
  v12 = v8 - 2;
  v14 = *(_QWORD *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    v12 = 0;
    v15 = 0;
    v13 = -1;
    goto LABEL_6;
  }
  v13 = v8 - 3;
  v19 = *(_QWORD *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    v18 = 0;
    v13 = 0;
    v15 = 0;
    result = 1;
    v16 = -1;
    v12 = 1;
    goto LABEL_7;
  }
  v16 = v8 - 4;
  result = *(_QWORD *)(v10 + 8 * (v8 - 4));
  if (result >= 1)
  {
    v18 = 0;
    v15 = 0;
    v20 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  float v45;
  _BOOL4 v46;
  _WORD *v48;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v53 = *(_QWORD *)(v4 + 16), v54 = v53 - 1, v53 < 1)
        || v54 > (int)v53 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v54) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v54);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v55 = *(_QWORD *)(v5 + 16);
      v56 = v55 - 1;
      if (v55 >= 1 && v56 <= (int)v55 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v56) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v56);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = v40 + v42 * v38;
      v44 = (float *)&v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v45 = v44[1];
      v46 = *v44 == 0.0;
      if (v45 != 0.0)
        v46 = 0;
      _S0 = (float)v46;
      v48 = (_WORD *)(v43 + *(_QWORD *)(v5 + 40));
      __asm { FCVT            H0, S0 }
      *v48 = LOWORD(_S0);
      v48[1] = 0;
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v6 = **a1;
  v7 = **a2;
  v60 = **a4;
  v61 = **a3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v8 - 1;
  if (v8 <= 0)
  {
    v12 = v8 - 2;
    v11 = 1;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    v12 = -1;
LABEL_5:
    v13 = v8 - 3;
    v14 = 1;
    v15 = 1;
LABEL_6:
    v16 = v8 - 4;
    result = 1;
    v18 = 1;
    v19 = 1;
LABEL_7:
    v20 = 1;
LABEL_8:
    v21 = 0;
    v22 = v8 < 1;
    v23 = *(unsigned __int8 *)(v6 + 49);
    v24 = v8 - 1;
    if (*(_BYTE *)(v7 + 49))
      v20 = 1;
    v25 = v24;
    if (*(_BYTE *)(v7 + 49))
    {
      v18 = 1;
      v26 = 1;
    }
    else
    {
      v26 = v15;
    }
    if (*(_BYTE *)(v7 + 49))
      v22 = 1;
    if (v16 > v24)
      v27 = 1;
    else
      v27 = v20;
    if (v13 > v25)
      v28 = 1;
    else
      v28 = v18;
    if (v12 > v25)
      v29 = 1;
    else
      v29 = v26;
    v30 = v9 > v25 || v22;
    LOWORD(a6) = 15360;
    while (1)
    {
      if (v23
        || (v31 = *(_QWORD *)(v6 + 16), v32 = v31 - 4, v31 < 4)
        || v32 > (int)v31 - 1
        || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v32) == 1)
      {
        v33 = 0;
        if ((v27 & 1) != 0)
          goto LABEL_35;
      }
      else
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v32);
        if ((v27 & 1) != 0)
          goto LABEL_35;
      }
      if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v16) != 1)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16);
        if (v19 < 1)
          goto LABEL_28;
LABEL_38:
        v35 = 0;
        v36 = v61 + v33 * v21;
        v37 = v60 + v34 * v21;
        while (2)
        {
          if (v23
            || (v38 = *(_QWORD *)(v6 + 16), v39 = v38 - 3, v38 < 3)
            || v39 > (int)v38 - 1
            || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v39) == 1)
          {
            v40 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_45;
            goto LABEL_46;
          }
          v40 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v39);
          if ((v28 & 1) != 0)
            goto LABEL_46;
LABEL_45:
          if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v13) == 1)
          {
LABEL_46:
            v41 = 0;
            if (v14 >= 1)
              break;
            goto LABEL_39;
          }
          v41 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13);
          if (v14 < 1)
          {
LABEL_39:
            if (++v35 == v19)
              goto LABEL_28;
            continue;
          }
          break;
        }
        v42 = 0;
        v43 = v36 + v40 * v35;
        v44 = v37 + v41 * v35;
        while (2)
        {
          if (v23
            || (v45 = *(_QWORD *)(v6 + 16), v46 = v45 - 2, v45 < 2)
            || v46 > (int)v45 - 1
            || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v46) == 1)
          {
            v47 = 0;
            if ((v29 & 1) == 0)
              goto LABEL_56;
            goto LABEL_57;
          }
          v47 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v46);
          if ((v29 & 1) != 0)
            goto LABEL_57;
LABEL_56:
          if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v12) == 1)
          {
LABEL_57:
            v48 = 0;
            if (v11 >= 1)
              break;
            goto LABEL_50;
          }
          v48 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v12);
          if (v11 < 1)
          {
LABEL_50:
            if (++v42 == v14)
              goto LABEL_39;
            continue;
          }
          break;
        }
        v49 = 0;
        v50 = v43 + v47 * v42;
        v51 = *(_QWORD *)(v6 + 40);
        v52 = *(_QWORD *)(v7 + 40);
        v53 = v44 + v48 * v42;
        while (2)
        {
          if (v23
            || (v58 = *(_QWORD *)(v6 + 16), v59 = v58 - 1, v58 < 1)
            || v59 > (int)v58 - 1
            || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v59) == 1)
          {
            v57 = 0;
            if ((v30 & 1) == 0)
              goto LABEL_68;
          }
          else
          {
            v57 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v59);
            if ((v30 & 1) == 0)
            {
LABEL_68:
              if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) != 1)
              {
                v54 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
LABEL_62:
                v55 = v53 + v54 * v49;
                if (*(float *)(v50 + v57 * v49 + v51) == 0.0)
                  v56 = a6;
                else
                  v56 = 0.0;
                *(_WORD *)(v55 + v52) = LOWORD(v56);
                if (v11 == ++v49)
                  goto LABEL_50;
                continue;
              }
            }
          }
          break;
        }
        v54 = 0;
        goto LABEL_62;
      }
LABEL_35:
      v34 = 0;
      if (v19 >= 1)
        goto LABEL_38;
LABEL_28:
      if (++v21 == result)
        return result;
    }
  }
  v12 = v8 - 2;
  v14 = *(_QWORD *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    v12 = 0;
    v15 = 0;
    v13 = -1;
    goto LABEL_6;
  }
  v13 = v8 - 3;
  v19 = *(_QWORD *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    v18 = 0;
    v13 = 0;
    v15 = 0;
    result = 1;
    v16 = -1;
    v12 = 1;
    goto LABEL_7;
  }
  v16 = v8 - 4;
  result = *(_QWORD *)(v10 + 8 * (v8 - 4));
  if (result >= 1)
  {
    v18 = 0;
    v15 = 0;
    v20 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = **a2;
  v58 = **a4;
  v59 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v59 + v31 * v19;
        v35 = v58 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v56 = *(_QWORD *)(v4 + 16), v57 = v56 - 1, v56 < 1)
            || v57 > (int)v56 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v57) == 1)
          {
            v55 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_67;
          }
          else
          {
            v55 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v57);
            if ((v28 & 1) == 0)
            {
LABEL_67:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                v53 = v51 + v52 * v47;
                if ((*(_WORD *)(v48 + v55 * v47 + v49) & 0x7FFF) != 0)
                  v54 = 0.0;
                else
                  v54 = 1.0;
                *(float *)(v53 + v50) = v54;
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = **a2;
  v58 = **a4;
  v59 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v57 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v57) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v57);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v59 + v29 * v19;
        v33 = v58 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v55 = *(_QWORD *)(v4 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v56) == 1)
          {
            v54 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_63;
          }
          else
          {
            v54 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
            if ((v26 & 1) == 0)
            {
LABEL_63:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v50 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_57:
                v51 = v49 + v50 * v45;
                if ((*(_WORD *)(v46 + v54 * v45 + v47) & 0x7FFF) != 0)
                  v52 = 0.0;
                else
                  v52 = 1.0;
                v53 = v52 + (float)(v52 * 0.0039062);
                *(_WORD *)(v51 + v48) = HIWORD(v53);
                if (v9 == ++v45)
                  goto LABEL_45;
                continue;
              }
            }
          }
          break;
        }
        v50 = 0;
        goto LABEL_57;
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **a1;
  v5 = **a2;
  v58 = **a4;
  v59 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v57 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v57) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v57);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v59 + v29 * v19;
        v33 = v58 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v55 = *(_QWORD *)(v4 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v56) == 1)
          {
            v54 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_63;
          }
          else
          {
            v54 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
            if ((v26 & 1) == 0)
            {
LABEL_63:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v50 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_57:
                v51 = v49 + v50 * v45;
                if (*(float *)(v46 + v54 * v45 + v47) == 0.0)
                  v52 = 1.0;
                else
                  v52 = 0.0;
                v53 = v52 + (float)(v52 * 0.0039062);
                *(_WORD *)(v51 + v48) = HIWORD(v53);
                if (v9 == ++v45)
                  goto LABEL_45;
                continue;
              }
            }
          }
          break;
        }
        v50 = 0;
        goto LABEL_57;
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    v16 = *(unsigned __int8 *)(v4 + 49);
    result = (uint64_t **)*(unsigned __int8 *)(v5 + 49);
    while (1)
    {
      if (v16
        || (v17 = *(_QWORD *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      {
        v19 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
        if ((_DWORD)result)
          break;
      }
      v20 = *(_QWORD *)(v5 + 16);
      v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v21) == 1)
        break;
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v22 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v23 = 0;
    v24 = v6 + v19 * v15;
    v25 = v7 + v22 * v15;
    while (1)
    {
      if (v16
        || (v26 = *(_QWORD *)(v4 + 16), v27 = v26 - 3, v26 < 3)
        || v27 > (int)v26 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
      {
        v28 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
        if ((_DWORD)result)
          break;
      }
      v29 = *(_QWORD *)(v5 + 16);
      v30 = v29 - 3;
      if (v29 < 3 || v30 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
        break;
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v23 == v13)
        goto LABEL_11;
    }
    v31 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v32 = 0;
    v33 = v24 + v28 * v23;
    v34 = v25 + v31 * v23;
    while (1)
    {
      if (v16
        || (v35 = *(_QWORD *)(v4 + 16), v36 = v35 - 2, v35 < 2)
        || v36 > (int)v35 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v36) == 1)
      {
        v37 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v36);
        if ((_DWORD)result)
          break;
      }
      v38 = *(_QWORD *)(v5 + 16);
      v39 = v38 - 2;
      if (v38 < 2 || v39 > (int)v38 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v39) == 1)
        break;
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v39);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v32 == v12)
        goto LABEL_25;
    }
    v40 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v41 = 0;
    v42 = v33 + v37 * v32;
    v43 = *(_QWORD *)(v4 + 40);
    v44 = *(_QWORD *)(v5 + 40);
    v45 = v34 + v40 * v32;
    while (1)
    {
      if (v16
        || (v48 = *(_QWORD *)(v4 + 16), v49 = v48 - 1, v48 < 1)
        || v49 > (int)v48 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v49) == 1)
      {
        v46 = 0;
        if ((_DWORD)result)
          goto LABEL_55;
      }
      else
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v49);
        if ((_DWORD)result)
          goto LABEL_55;
      }
      v50 = *(_QWORD *)(v5 + 16);
      v51 = v50 - 1;
      if (v50 >= 1 && v51 <= (int)v50 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v51) != 1)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v51);
        goto LABEL_56;
      }
LABEL_55:
      v47 = 0;
LABEL_56:
      *(_QWORD *)(v45 + v47 * v41 + v44) = *(_QWORD *)(v42 + v46 * v41 + v43) == 0;
      if (v11 == ++v41)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = *(_DWORD *)(v48 + v53 * v47 + v49) == 0;
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_WORD *)(v51 + v52 * v47 + v50) = *(_WORD *)(v48 + v53 * v47 + v49) == 0;
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)10>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v45 = *(_QWORD *)(v5 + 16);
      v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      *(_BYTE *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40)) = v39[v41 * v38 + *(_QWORD *)(v4 + 40)] == 0;
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)11>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v45 = *(_QWORD *)(v5 + 16);
      v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      *(float32x2_t *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40)) = vrnda_f32(*(float32x2_t *)&v39[v41 * v38
                                                                                              + *(_QWORD *)(v4 + 40)]);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = roundf(*(float *)(v48 + v53 * v47 + v49));
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)11>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _DWORD *v44;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v57 = *(_QWORD *)(v4 + 16), v58 = v57 - 1, v57 < 1)
        || v58 > (int)v57 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v58) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v58);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v59 = *(_QWORD *)(v5 + 16);
      v60 = v59 - 1;
      if (v59 >= 1 && v60 <= (int)v59 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v60) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v60);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_DWORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _H0 = *(_WORD *)v43;
      _H1 = *((_WORD *)v43 + 1);
      __asm { FCVT            S0, H0 }
      _S0 = roundf(_S0);
      __asm
      {
        FCVT            H0, S0
        FCVT            S1, H1
      }
      _S1 = roundf(_S1);
      __asm
      {
        FCVT            H1, S1
        FCVT            S0, H0
        FCVT            S1, H1
      }
      *v44 = _S0;
      v44[1] = _S1;
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = **a1;
  v5 = **a2;
  v64 = **a4;
  v65 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v65 + v31 * v19;
        v35 = v64 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v62 = *(_QWORD *)(v4 + 16), v63 = v62 - 1, v62 < 1)
            || v63 > (int)v62 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v63) == 1)
          {
            v61 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v61 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v63);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v61 * v47 + v49);
                __asm { FCVT            S0, H0 }
                _S0 = roundf(_S0);
                __asm
                {
                  FCVT            H0, S0
                  FCVT            S0, H0
                }
                *(_DWORD *)(v51 + v52 * v47++ + v50) = _S0;
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)11>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _WORD *v44;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v55 = *(_QWORD *)(v4 + 16), v56 = v55 - 1, v55 < 1)
        || v56 > (int)v55 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v56) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v57 = *(_QWORD *)(v5 + 16);
      v58 = v57 - 1;
      if (v57 >= 1 && v58 <= (int)v57 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v58) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v58);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_WORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _H0 = *(_WORD *)v43;
      _H1 = *((_WORD *)v43 + 1);
      __asm { FCVT            S0, H0 }
      _S0 = roundf(_S0);
      __asm
      {
        FCVT            H0, S0
        FCVT            S1, H1
      }
      _S1 = roundf(_S1);
      __asm { FCVT            H1, S1 }
      *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = **a2;
  v63 = **a4;
  v64 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v64 + v31 * v19;
        v35 = v63 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v61 = *(_QWORD *)(v4 + 16), v62 = v61 - 1, v61 < 1)
            || v62 > (int)v61 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v62) == 1)
          {
            v60 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v60 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v62);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v60 * v47 + v49);
                __asm { FCVT            S0, H0 }
                _S0 = roundf(_S0);
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)11>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  _WORD *v44;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v51 = *(_QWORD *)(v4 + 16), v52 = v51 - 1, v51 < 1)
        || v52 > (int)v51 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v52) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v52);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v53 = *(_QWORD *)(v5 + 16);
      v54 = v53 - 1;
      if (v53 >= 1 && v54 <= (int)v53 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v54) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v54);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = (float *)&v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_WORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _S0 = roundf(*v43);
      _S1 = roundf(v43[1]);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      *v44 = LOWORD(_S0);
      v44[1] = LOWORD(_S1);
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = **a1;
  v5 = **a2;
  v61 = **a4;
  v62 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v62 + v31 * v19;
        v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v59 = *(_QWORD *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v60) == 1)
          {
            v58 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S0 = roundf(*(float *)(v48 + v58 * v47 + v49));
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S0);
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = roundf(COERCE_FLOAT(*(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16));
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v55 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v55) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v55);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v57 + v29 * v19;
        v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          v54 = roundf(COERCE_FLOAT(*(unsigned __int16 *)(v46 + v50 * v45 + v47) << 16));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v55 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v55) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v55);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v57 + v29 * v19;
        v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          v54 = roundf(*(float *)(v46 + v50 * v45 + v47));
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = **a1;
  v5 = **a2;
  v43 = **a4;
  v44 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 < 1)
  {
    v45 = 1;
    v51 = 1;
    v9 = 1;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v8 = v7 + 8 * v6;
  v9 = *(_QWORD *)(v8 - 8);
  if (v6 == 1)
  {
    v45 = 1;
    v51 = 1;
LABEL_7:
    v49 = 1;
LABEL_8:
    v46 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v10 = *(_QWORD *)(v4 + 16), v11 = v10 - 4, v10 < 4)
        || v11 > (int)v10 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v11) == 1)
      {
        v12 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_20;
      }
      else
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v11);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_20;
      }
      v13 = *(_QWORD *)(v5 + 16);
      v14 = v13 - 4;
      if (v13 >= 4 && v14 <= (int)v13 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        goto LABEL_21;
      }
LABEL_20:
      v15 = 0;
LABEL_21:
      if (v49 >= 1)
      {
        v50 = 0;
        v48 = v44 + v12 * v46;
        v47 = v43 + v15 * v46;
        do
        {
          if (*(_BYTE *)(v4 + 49)
            || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 3, v16 < 3)
            || v17 > (int)v16 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
          {
            v18 = 0;
            if (*(_BYTE *)(v5 + 49))
              goto LABEL_34;
          }
          else
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v17);
            if (*(_BYTE *)(v5 + 49))
              goto LABEL_34;
          }
          v19 = *(_QWORD *)(v5 + 16);
          v20 = v19 - 3;
          if (v19 >= 3 && v20 <= (int)v19 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v20) != 1)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
            goto LABEL_35;
          }
LABEL_34:
          v21 = 0;
LABEL_35:
          if (v51 >= 1)
          {
            v22 = 0;
            v23 = v48 + v18 * v50;
            v24 = v47 + v21 * v50;
            while (1)
            {
              if (*(_BYTE *)(v4 + 49)
                || (v25 = *(_QWORD *)(v4 + 16), v26 = v25 - 2, v25 < 2)
                || v26 > (int)v25 - 1
                || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
              {
                v27 = 0;
                if (*(_BYTE *)(v5 + 49))
                  break;
              }
              else
              {
                v27 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
                if (*(_BYTE *)(v5 + 49))
                  break;
              }
              v28 = *(_QWORD *)(v5 + 16);
              v29 = v28 - 2;
              if (v28 < 2 || v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
                break;
              v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
              if (v9 >= 1)
                goto LABEL_50;
LABEL_37:
              if (++v22 == v51)
                goto LABEL_23;
            }
            v30 = 0;
            if (v9 < 1)
              goto LABEL_37;
LABEL_50:
            v31 = 0;
            v32 = v23 + v27 * v22;
            v33 = v24 + v30 * v22;
            while (2)
            {
              if (!*(_BYTE *)(v4 + 49))
              {
                v38 = *(_QWORD *)(v4 + 16);
                v39 = v38 - 1;
                if (v38 >= 1 && v39 <= (int)v38 - 1 && *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v39) != 1)
                {
                  v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v39);
                  if (!*(_BYTE *)(v5 + 49))
                    goto LABEL_60;
                  goto LABEL_53;
                }
              }
              v34 = 0;
              if (*(_BYTE *)(v5 + 49))
                goto LABEL_53;
LABEL_60:
              v40 = *(_QWORD *)(v5 + 16);
              v41 = v40 - 1;
              if (v40 < 1 || v41 > (int)v40 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v41) == 1)
LABEL_53:
                v35 = 0;
              else
                v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v41);
              v36 = v33 + v35 * v31 + *(_QWORD *)(v5 + 40);
              v52 = *(_QWORD *)(v32 + v34 * v31 + *(_QWORD *)(v4 + 40));
              v53 = 1065353216;
              *(float *)v36 = std::operator/[abi:nn180100]<float>((float *)&v53, (float *)&v52);
              *(_DWORD *)(v36 + 4) = v37;
              if (v9 == ++v31)
                goto LABEL_37;
              continue;
            }
          }
LABEL_23:
          ++v50;
        }
        while (v50 != v49);
      }
      if (++v46 == v45)
        return;
    }
  }
  v51 = *(_QWORD *)(v8 - 16);
  if ((unint64_t)v6 < 3)
  {
    v45 = 1;
    goto LABEL_7;
  }
  v42 = v7 + 8 * v6;
  v49 = *(_QWORD *)(v42 - 24);
  if (v6 == 3)
  {
    v45 = 1;
    goto LABEL_8;
  }
  v45 = *(_QWORD *)(v42 - 32);
  if (v45 >= 1)
    goto LABEL_8;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = 1.0 / *(float *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;

  v5 = **a1;
  v6 = **a2;
  v49 = **a4;
  v50 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 < 1)
  {
    v51 = 1;
    v57 = 1;
    v10 = 1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v6 + 24);
  v9 = v8 + 8 * v7;
  v10 = *(_QWORD *)(v9 - 8);
  if (v7 == 1)
  {
    v51 = 1;
    v57 = 1;
LABEL_7:
    v55 = 1;
LABEL_8:
    v52 = 0;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v11 = *(_QWORD *)(v5 + 16), v12 = v11 - 4, v11 < 4)
        || v12 > (int)v11 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v12) == 1)
      {
        v13 = 0;
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      else
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v12);
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      v14 = *(_QWORD *)(v6 + 16);
      v15 = v14 - 4;
      if (v14 >= 4 && v15 <= (int)v14 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) != 1)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
        goto LABEL_21;
      }
LABEL_20:
      v16 = 0;
LABEL_21:
      if (v55 >= 1)
      {
        v56 = 0;
        v54 = v50 + v13 * v52;
        v53 = v49 + v16 * v52;
        do
        {
          if (*(_BYTE *)(v5 + 49)
            || (v17 = *(_QWORD *)(v5 + 16), v18 = v17 - 3, v17 < 3)
            || v18 > (int)v17 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v18) == 1)
          {
            v19 = 0;
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          else
          {
            v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          v20 = *(_QWORD *)(v6 + 16);
          v21 = v20 - 3;
          if (v20 >= 3 && v21 <= (int)v20 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v21) != 1)
          {
            v22 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
            goto LABEL_35;
          }
LABEL_34:
          v22 = 0;
LABEL_35:
          if (v57 >= 1)
          {
            v23 = 0;
            v24 = v54 + v19 * v56;
            v25 = v53 + v22 * v56;
            while (1)
            {
              if (*(_BYTE *)(v5 + 49)
                || (v26 = *(_QWORD *)(v5 + 16), v27 = v26 - 2, v26 < 2)
                || v27 > (int)v26 - 1
                || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
              {
                v28 = 0;
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              else
              {
                v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              v29 = *(_QWORD *)(v6 + 16);
              v30 = v29 - 2;
              if (v29 < 2 || v30 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v30) == 1)
                break;
              v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v30);
              if (v10 >= 1)
                goto LABEL_50;
LABEL_37:
              if (++v23 == v57)
                goto LABEL_23;
            }
            v31 = 0;
            if (v10 < 1)
              goto LABEL_37;
LABEL_50:
            v32 = 0;
            v33 = v24 + v28 * v23;
            v34 = v25 + v31 * v23;
            while (2)
            {
              if (!*(_BYTE *)(v5 + 49))
              {
                v44 = *(_QWORD *)(v5 + 16);
                v45 = v44 - 1;
                if (v44 >= 1 && v45 <= (int)v44 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v45) != 1)
                {
                  v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v45);
                  if (!*(_BYTE *)(v6 + 49))
                    goto LABEL_60;
                  goto LABEL_53;
                }
              }
              v35 = 0;
              if (*(_BYTE *)(v6 + 49))
                goto LABEL_53;
LABEL_60:
              v46 = *(_QWORD *)(v6 + 16);
              v47 = v46 - 1;
              if (v46 < 1 || v47 > (int)v46 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v47) == 1)
LABEL_53:
                v36 = 0;
              else
                v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v47);
              v37 = (_DWORD *)(v34 + v36 * v32 + *(_QWORD *)(v6 + 40));
              LODWORD(_D0) = *(_DWORD *)(v33 + v35 * v32 + *(_QWORD *)(v5 + 40));
              v58 = vcvtq_f32_f16(*(float16x4_t *)&_D0).u64[0];
              v59 = 1065353216;
              *(float *)&_D0 = std::operator/[abi:nn180100]<float>((float *)&v59, (float *)&v58);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
                FCVT            S0, H0
                FCVT            S1, H1
              }
              *v37 = LODWORD(_D0);
              v37[1] = _S1;
              if (v10 == ++v32)
                goto LABEL_37;
              continue;
            }
          }
LABEL_23:
          ++v56;
        }
        while (v56 != v55);
      }
      if (++v52 == v51)
        return;
    }
  }
  v57 = *(_QWORD *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    v51 = 1;
    goto LABEL_7;
  }
  v48 = v8 + 8 * v7;
  v55 = *(_QWORD *)(v48 - 24);
  if (v7 == 3)
  {
    v51 = 1;
    goto LABEL_8;
  }
  v51 = *(_QWORD *)(v48 - 32);
  if (v51 >= 1)
    goto LABEL_8;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = **a1;
  v5 = **a2;
  v62 = **a4;
  v63 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v63 + v31 * v19;
        v35 = v62 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v60 = *(_QWORD *)(v4 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v61) == 1)
          {
            v59 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v59 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v61);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H1 = *(_WORD *)(v48 + v59 * v47 + v49);
                __asm { FCVT            S1, H1 }
                *(float *)(v51 + v52 * v47++ + v50) = 1.0 / _S1;
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, double _D0)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v5 = **a1;
  v6 = **a2;
  v48 = **a4;
  v49 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 < 1)
  {
    v50 = 1;
    v56 = 1;
    v10 = 1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v6 + 24);
  v9 = v8 + 8 * v7;
  v10 = *(_QWORD *)(v9 - 8);
  if (v7 == 1)
  {
    v50 = 1;
    v56 = 1;
LABEL_7:
    v54 = 1;
LABEL_8:
    v51 = 0;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v11 = *(_QWORD *)(v5 + 16), v12 = v11 - 4, v11 < 4)
        || v12 > (int)v11 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v12) == 1)
      {
        v13 = 0;
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      else
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v12);
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_20;
      }
      v14 = *(_QWORD *)(v6 + 16);
      v15 = v14 - 4;
      if (v14 >= 4 && v15 <= (int)v14 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v15) != 1)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
        goto LABEL_21;
      }
LABEL_20:
      v16 = 0;
LABEL_21:
      if (v54 >= 1)
      {
        v55 = 0;
        v53 = v49 + v13 * v51;
        v52 = v48 + v16 * v51;
        do
        {
          if (*(_BYTE *)(v5 + 49)
            || (v17 = *(_QWORD *)(v5 + 16), v18 = v17 - 3, v17 < 3)
            || v18 > (int)v17 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v18) == 1)
          {
            v19 = 0;
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          else
          {
            v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
            if (*(_BYTE *)(v6 + 49))
              goto LABEL_34;
          }
          v20 = *(_QWORD *)(v6 + 16);
          v21 = v20 - 3;
          if (v20 >= 3 && v21 <= (int)v20 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v21) != 1)
          {
            v22 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
            goto LABEL_35;
          }
LABEL_34:
          v22 = 0;
LABEL_35:
          if (v56 >= 1)
          {
            v23 = 0;
            v24 = v53 + v19 * v55;
            v25 = v52 + v22 * v55;
            while (1)
            {
              if (*(_BYTE *)(v5 + 49)
                || (v26 = *(_QWORD *)(v5 + 16), v27 = v26 - 2, v26 < 2)
                || v27 > (int)v26 - 1
                || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
              {
                v28 = 0;
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              else
              {
                v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
                if (*(_BYTE *)(v6 + 49))
                  break;
              }
              v29 = *(_QWORD *)(v6 + 16);
              v30 = v29 - 2;
              if (v29 < 2 || v30 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v30) == 1)
                break;
              v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v30);
              if (v10 >= 1)
                goto LABEL_50;
LABEL_37:
              if (++v23 == v56)
                goto LABEL_23;
            }
            v31 = 0;
            if (v10 < 1)
              goto LABEL_37;
LABEL_50:
            v32 = 0;
            v33 = v24 + v28 * v23;
            v34 = v25 + v31 * v23;
            while (2)
            {
              if (!*(_BYTE *)(v5 + 49))
              {
                v43 = *(_QWORD *)(v5 + 16);
                v44 = v43 - 1;
                if (v43 >= 1 && v44 <= (int)v43 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v44) != 1)
                {
                  v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v44);
                  if (!*(_BYTE *)(v6 + 49))
                    goto LABEL_60;
                  goto LABEL_53;
                }
              }
              v35 = 0;
              if (*(_BYTE *)(v6 + 49))
                goto LABEL_53;
LABEL_60:
              v45 = *(_QWORD *)(v6 + 16);
              v46 = v45 - 1;
              if (v45 < 1 || v46 > (int)v45 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v46) == 1)
LABEL_53:
                v36 = 0;
              else
                v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v46);
              v37 = (_WORD *)(v34 + v36 * v32 + *(_QWORD *)(v6 + 40));
              LODWORD(_D0) = *(_DWORD *)(v33 + v35 * v32 + *(_QWORD *)(v5 + 40));
              v57 = vcvtq_f32_f16(*(float16x4_t *)&_D0).u64[0];
              v58 = 1065353216;
              *(float *)&_D0 = std::operator/[abi:nn180100]<float>((float *)&v58, (float *)&v57);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              *v37 = LOWORD(_D0);
              v37[1] = _S1;
              if (v10 == ++v32)
                goto LABEL_37;
              continue;
            }
          }
LABEL_23:
          ++v55;
        }
        while (v55 != v54);
      }
      if (++v51 == v50)
        return;
    }
  }
  v56 = *(_QWORD *)(v9 - 16);
  if ((unint64_t)v7 < 3)
  {
    v50 = 1;
    goto LABEL_7;
  }
  v47 = v8 + 8 * v7;
  v54 = *(_QWORD *)(v47 - 24);
  if (v7 == 3)
  {
    v50 = 1;
    goto LABEL_8;
  }
  v50 = *(_QWORD *)(v47 - 32);
  if (v50 >= 1)
    goto LABEL_8;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = **a1;
  v5 = **a2;
  v63 = **a4;
  v64 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v64 + v31 * v19;
        v35 = v63 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v61 = *(_QWORD *)(v4 + 16), v62 = v61 - 1, v61 < 1)
            || v62 > (int)v61 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v62) == 1)
          {
            v60 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v60 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v62);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H1 = *(_WORD *)(v48 + v60 * v47 + v49);
                __asm { FCVT            S1, H1 }
                _S1 = 1.0 / _S1;
                __asm { FCVT            H1, S1 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S1);
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = **a1;
  v5 = **a2;
  v48 = **a4;
  v49 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 < 1)
  {
    v50 = 1;
    v56 = 1;
    v9 = 1;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v8 = v7 + 8 * v6;
  v9 = *(_QWORD *)(v8 - 8);
  if (v6 == 1)
  {
    v50 = 1;
    v56 = 1;
LABEL_7:
    v54 = 1;
LABEL_8:
    v51 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v10 = *(_QWORD *)(v4 + 16), v11 = v10 - 4, v10 < 4)
        || v11 > (int)v10 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v11) == 1)
      {
        v12 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_20;
      }
      else
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v11);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_20;
      }
      v13 = *(_QWORD *)(v5 + 16);
      v14 = v13 - 4;
      if (v13 >= 4 && v14 <= (int)v13 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        goto LABEL_21;
      }
LABEL_20:
      v15 = 0;
LABEL_21:
      if (v54 >= 1)
      {
        v55 = 0;
        v53 = v49 + v12 * v51;
        v52 = v48 + v15 * v51;
        do
        {
          if (*(_BYTE *)(v4 + 49)
            || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 3, v16 < 3)
            || v17 > (int)v16 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
          {
            v18 = 0;
            if (*(_BYTE *)(v5 + 49))
              goto LABEL_34;
          }
          else
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v17);
            if (*(_BYTE *)(v5 + 49))
              goto LABEL_34;
          }
          v19 = *(_QWORD *)(v5 + 16);
          v20 = v19 - 3;
          if (v19 >= 3 && v20 <= (int)v19 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v20) != 1)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
            goto LABEL_35;
          }
LABEL_34:
          v21 = 0;
LABEL_35:
          if (v56 >= 1)
          {
            v22 = 0;
            v23 = v53 + v18 * v55;
            v24 = v52 + v21 * v55;
            while (1)
            {
              if (*(_BYTE *)(v4 + 49)
                || (v25 = *(_QWORD *)(v4 + 16), v26 = v25 - 2, v25 < 2)
                || v26 > (int)v25 - 1
                || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
              {
                v27 = 0;
                if (*(_BYTE *)(v5 + 49))
                  break;
              }
              else
              {
                v27 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
                if (*(_BYTE *)(v5 + 49))
                  break;
              }
              v28 = *(_QWORD *)(v5 + 16);
              v29 = v28 - 2;
              if (v28 < 2 || v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
                break;
              v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
              if (v9 >= 1)
                goto LABEL_50;
LABEL_37:
              if (++v22 == v56)
                goto LABEL_23;
            }
            v30 = 0;
            if (v9 < 1)
              goto LABEL_37;
LABEL_50:
            v31 = 0;
            v32 = v23 + v27 * v22;
            v33 = v24 + v30 * v22;
            while (2)
            {
              if (!*(_BYTE *)(v4 + 49))
              {
                v43 = *(_QWORD *)(v4 + 16);
                v44 = v43 - 1;
                if (v43 >= 1 && v44 <= (int)v43 - 1 && *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) != 1)
                {
                  v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
                  if (!*(_BYTE *)(v5 + 49))
                    goto LABEL_60;
                  goto LABEL_53;
                }
              }
              v34 = 0;
              if (*(_BYTE *)(v5 + 49))
                goto LABEL_53;
LABEL_60:
              v45 = *(_QWORD *)(v5 + 16);
              v46 = v45 - 1;
              if (v45 < 1 || v46 > (int)v45 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) == 1)
LABEL_53:
                v35 = 0;
              else
                v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
              v36 = (_WORD *)(v33 + v35 * v31 + *(_QWORD *)(v5 + 40));
              v57 = *(_QWORD *)(v32 + v34 * v31 + *(_QWORD *)(v4 + 40));
              v58 = 1065353216;
              _S0 = std::operator/[abi:nn180100]<float>((float *)&v58, (float *)&v57);
              __asm
              {
                FCVT            H0, S0
                FCVT            H1, S1
              }
              *v36 = LOWORD(_S0);
              v36[1] = _S1;
              if (v9 == ++v31)
                goto LABEL_37;
              continue;
            }
          }
LABEL_23:
          ++v55;
        }
        while (v55 != v54);
      }
      if (++v51 == v50)
        return;
    }
  }
  v56 = *(_QWORD *)(v8 - 16);
  if ((unint64_t)v6 < 3)
  {
    v50 = 1;
    goto LABEL_7;
  }
  v47 = v7 + 8 * v6;
  v54 = *(_QWORD *)(v47 - 24);
  if (v6 == 3)
  {
    v50 = 1;
    goto LABEL_8;
  }
  v50 = *(_QWORD *)(v47 - 32);
  if (v50 >= 1)
    goto LABEL_8;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = **a1;
  v5 = **a2;
  v61 = **a4;
  v62 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v62 + v31 * v19;
        v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v59 = *(_QWORD *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v60) == 1)
          {
            v58 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S1 = 1.0 / *(float *)(v48 + v58 * v47 + v49);
                __asm { FCVT            H1, S1 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = LOWORD(_S1);
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(float *)(v51 + v52 * v47 + v50) = 1.0
                                                  / COERCE_FLOAT(*(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16);
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v55 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v55) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v55);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v57 + v29 * v19;
        v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          v54 = 1.0 / COERCE_FLOAT(*(unsigned __int16 *)(v46 + v50 * v45 + v47) << 16);
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v55 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v55) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v55);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v57 + v29 * v19;
        v33 = v56 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          v54 = 1.0 / *(float *)(v46 + v50 * v45 + v47);
          *(_WORD *)(v48 + v49 + v51 * v45++) = HIWORD(COERCE_UNSIGNED_INT(v54 + (float)(COERCE_FLOAT(LODWORD(v54) & 0xFF800000)
                                                                                       * 0.0039062)));
          if (v9 == v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)12>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    v16 = *(unsigned __int8 *)(v4 + 49);
    result = (uint64_t **)*(unsigned __int8 *)(v5 + 49);
    while (1)
    {
      if (v16
        || (v17 = *(_QWORD *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      {
        v19 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
        if ((_DWORD)result)
          break;
      }
      v20 = *(_QWORD *)(v5 + 16);
      v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v21) == 1)
        break;
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v22 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v23 = 0;
    v24 = v6 + v19 * v15;
    v25 = v7 + v22 * v15;
    while (1)
    {
      if (v16
        || (v26 = *(_QWORD *)(v4 + 16), v27 = v26 - 3, v26 < 3)
        || v27 > (int)v26 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
      {
        v28 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
        if ((_DWORD)result)
          break;
      }
      v29 = *(_QWORD *)(v5 + 16);
      v30 = v29 - 3;
      if (v29 < 3 || v30 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
        break;
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v23 == v13)
        goto LABEL_11;
    }
    v31 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v32 = 0;
    v33 = v24 + v28 * v23;
    v34 = v25 + v31 * v23;
    while (1)
    {
      if (v16
        || (v35 = *(_QWORD *)(v4 + 16), v36 = v35 - 2, v35 < 2)
        || v36 > (int)v35 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v36) == 1)
      {
        v37 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v36);
        if ((_DWORD)result)
          break;
      }
      v38 = *(_QWORD *)(v5 + 16);
      v39 = v38 - 2;
      if (v38 < 2 || v39 > (int)v38 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v39) == 1)
        break;
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v39);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v32 == v12)
        goto LABEL_25;
    }
    v40 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v41 = 0;
    v42 = v33 + v37 * v32;
    v43 = *(_QWORD *)(v4 + 40);
    v44 = *(_QWORD *)(v5 + 40);
    v45 = v34 + v40 * v32;
    while (1)
    {
      if (v16
        || (v50 = *(_QWORD *)(v4 + 16), v51 = v50 - 1, v50 < 1)
        || v51 > (int)v50 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v51) == 1)
      {
        v46 = 0;
        if ((_DWORD)result)
          goto LABEL_55;
      }
      else
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v51);
        if ((_DWORD)result)
          goto LABEL_55;
      }
      v52 = *(_QWORD *)(v5 + 16);
      v53 = v52 - 1;
      if (v52 >= 1 && v53 <= (int)v52 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v53) != 1)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v53);
        goto LABEL_56;
      }
LABEL_55:
      v47 = 0;
LABEL_56:
      v48 = v45 + v47 * v41;
      v49 = *(_QWORD *)(v42 + v46 * v41 + v43);
      if ((unint64_t)(v49 + 1) >= 3)
        v49 = 0;
      *(_QWORD *)(v48 + v44) = v49;
      if (v11 == ++v41)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)12>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **result;
  v5 = **a2;
  v57 = **a4;
  v58 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    v59 = 1;
    v15 = 1;
    v16 = 1;
LABEL_7:
    v17 = 1;
LABEL_8:
    v18 = 0;
    v19 = v6 < 1;
    v20 = *(unsigned __int8 *)(v4 + 49);
    v21 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v17 = 1;
    v22 = v21;
    if (*(_BYTE *)(v5 + 49))
    {
      v15 = 1;
      v23 = 1;
    }
    else
    {
      v23 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v19 = 1;
    if (v14 > v21)
      v24 = 1;
    else
      v24 = v17;
    if (v11 > v22)
      v25 = 1;
    else
      v25 = v15;
    if (v10 > v22)
      v26 = 1;
    else
      v26 = v23;
    v27 = v7 > v22 || v19;
    result = (uint64_t **)v14;
    while (1)
    {
      if (v20
        || (v28 = *(_QWORD *)(v4 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v29) == 1)
      {
        v30 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_35;
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v29);
        if ((v24 & 1) != 0)
          goto LABEL_35;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v16 < 1)
          goto LABEL_28;
LABEL_38:
        v32 = 0;
        v33 = v58 + v30 * v18;
        v34 = v57 + v31 * v18;
        while (2)
        {
          if (v20
            || (v35 = *(_QWORD *)(v4 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v36) == 1)
          {
            v37 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_45;
            goto LABEL_46;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v36);
          if ((v25 & 1) != 0)
            goto LABEL_46;
LABEL_45:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_46:
            v38 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_39;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_39:
            if (++v32 == v16)
              goto LABEL_28;
            continue;
          }
          break;
        }
        v39 = 0;
        v40 = v33 + v37 * v32;
        v41 = v34 + v38 * v32;
        while (2)
        {
          if (v20
            || (v42 = *(_QWORD *)(v4 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v43) == 1)
          {
            v44 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_56;
            goto LABEL_57;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v43);
          if ((v26 & 1) != 0)
            goto LABEL_57;
LABEL_56:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_57:
            v45 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_50;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_50:
            if (++v39 == v12)
              goto LABEL_39;
            continue;
          }
          break;
        }
        v46 = 0;
        v47 = v40 + v44 * v39;
        v48 = *(_QWORD *)(v4 + 40);
        v49 = *(_QWORD *)(v5 + 40);
        v50 = v41 + v45 * v39;
        while (2)
        {
          if (v20
            || (v55 = *(_QWORD *)(v4 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v56) == 1)
          {
            v54 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_67;
          }
          else
          {
            v54 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
            if ((v27 & 1) == 0)
            {
LABEL_67:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_62:
                v52 = v50 + v51 * v46;
                v53 = *(_DWORD *)(v47 + v54 * v46 + v48);
                if ((v53 + 1) >= 3)
                  v53 = 0;
                *(_DWORD *)(v52 + v49) = v53;
                if (v9 == ++v46)
                  goto LABEL_50;
                continue;
              }
            }
          }
          break;
        }
        v51 = 0;
        goto LABEL_62;
      }
LABEL_35:
      v31 = 0;
      if (v16 >= 1)
        goto LABEL_38;
LABEL_28:
      ++v18;
      v14 = (uint64_t)result;
      if (v18 == v59)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v16 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v15 = 0;
    v11 = 0;
    v13 = 0;
    v59 = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  v59 = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (v59 >= 1)
  {
    v15 = 0;
    v13 = 0;
    v17 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)12>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **result;
  v5 = **a2;
  v57 = **a4;
  v58 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    v59 = 1;
    v15 = 1;
    v16 = 1;
LABEL_7:
    v17 = 1;
LABEL_8:
    v18 = 0;
    v19 = v6 < 1;
    v20 = *(unsigned __int8 *)(v4 + 49);
    v21 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v17 = 1;
    v22 = v21;
    if (*(_BYTE *)(v5 + 49))
    {
      v15 = 1;
      v23 = 1;
    }
    else
    {
      v23 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v19 = 1;
    if (v14 > v21)
      v24 = 1;
    else
      v24 = v17;
    if (v11 > v22)
      v25 = 1;
    else
      v25 = v15;
    if (v10 > v22)
      v26 = 1;
    else
      v26 = v23;
    v27 = v7 > v22 || v19;
    result = (uint64_t **)v14;
    while (1)
    {
      if (v20
        || (v28 = *(_QWORD *)(v4 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v29) == 1)
      {
        v30 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_35;
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v29);
        if ((v24 & 1) != 0)
          goto LABEL_35;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v16 < 1)
          goto LABEL_28;
LABEL_38:
        v32 = 0;
        v33 = v58 + v30 * v18;
        v34 = v57 + v31 * v18;
        while (2)
        {
          if (v20
            || (v35 = *(_QWORD *)(v4 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v36) == 1)
          {
            v37 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_45;
            goto LABEL_46;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v36);
          if ((v25 & 1) != 0)
            goto LABEL_46;
LABEL_45:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_46:
            v38 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_39;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_39:
            if (++v32 == v16)
              goto LABEL_28;
            continue;
          }
          break;
        }
        v39 = 0;
        v40 = v33 + v37 * v32;
        v41 = v34 + v38 * v32;
        while (2)
        {
          if (v20
            || (v42 = *(_QWORD *)(v4 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v43) == 1)
          {
            v44 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_56;
            goto LABEL_57;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v43);
          if ((v26 & 1) != 0)
            goto LABEL_57;
LABEL_56:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_57:
            v45 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_50;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_50:
            if (++v39 == v12)
              goto LABEL_39;
            continue;
          }
          break;
        }
        v46 = 0;
        v47 = v40 + v44 * v39;
        v48 = *(_QWORD *)(v4 + 40);
        v49 = *(_QWORD *)(v5 + 40);
        v50 = v41 + v45 * v39;
        while (2)
        {
          if (v20
            || (v55 = *(_QWORD *)(v4 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v56) == 1)
          {
            v54 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_67;
          }
          else
          {
            v54 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
            if ((v27 & 1) == 0)
            {
LABEL_67:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_62:
                v52 = v50 + v51 * v46;
                v53 = *(_WORD *)(v47 + v54 * v46 + v48);
                if ((v53 + 1) >= 3)
                  v53 = 0;
                *(_WORD *)(v52 + v49) = v53;
                if (v9 == ++v46)
                  goto LABEL_50;
                continue;
              }
            }
          }
          break;
        }
        v51 = 0;
        goto LABEL_62;
      }
LABEL_35:
      v31 = 0;
      if (v16 >= 1)
        goto LABEL_38;
LABEL_28:
      ++v18;
      v14 = (uint64_t)result;
      if (v18 == v59)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v16 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v15 = 0;
    v11 = 0;
    v13 = 0;
    v59 = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  v59 = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (v59 >= 1)
  {
    v15 = 0;
    v13 = 0;
    v17 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)12>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v45 = *(_QWORD *)(v4 + 16), v46 = v45 - 1, v45 < 1)
        || v46 > (int)v45 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v46) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v46);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v47 = *(_QWORD *)(v5 + 16);
      v48 = v47 - 1;
      if (v47 >= 1 && v48 <= (int)v47 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v48) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v48);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = v40 + v42 * v38;
      v44 = v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      if ((v44 + 1) >= 3)
        v44 = 0;
      *(_BYTE *)(v43 + *(_QWORD *)(v5 + 40)) = v44;
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)13>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v45 = *(_QWORD *)(v5 + 16);
      v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      *(_QWORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40)) = *(_QWORD *)&v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = *(_DWORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)13>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4, float16x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v5 = **result;
  v6 = **a2;
  v7 = **a3;
  v8 = **a4;
  v9 = *(_QWORD *)(v6 + 16);
  if (v9 < 1)
  {
    v9 = 1;
    v13 = 1;
    v12 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(v6 + 24);
  v11 = v10 + 8 * v9;
  v12 = *(_QWORD *)(v11 - 8);
  if (v9 == 1)
  {
    v13 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    v9 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v15 = v10 + 8 * v9;
  v14 = *(_QWORD *)(v15 - 24);
  if (v9 == 3)
  {
    v9 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    v16 = 0;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v17 = *(_QWORD *)(v5 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v18) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v5 + 56) + 8 * v18);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v19 = *(_QWORD *)(v6 + 16);
      v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v20) == 1)
        break;
      v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
      if (v14 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v16 == v9)
        return result;
    }
    v21 = 0;
    if (v14 < 1)
      goto LABEL_11;
LABEL_24:
    v22 = 0;
    result = (uint64_t **)(v7 + (_QWORD)result * v16);
    v23 = v8 + v21 * v16;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v24 = *(_QWORD *)(v5 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      {
        v26 = 0;
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v27 = *(_QWORD *)(v6 + 16);
      v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v28) == 1)
        break;
      v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v28);
      if (v13 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v22 == v14)
        goto LABEL_11;
    }
    v29 = 0;
    if (v13 < 1)
      goto LABEL_25;
LABEL_38:
    v30 = 0;
    v31 = (char *)result + v26 * v22;
    v32 = v23 + v29 * v22;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v33 = *(_QWORD *)(v5 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      {
        v35 = 0;
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v36 = *(_QWORD *)(v6 + 16);
      v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v37) == 1)
        break;
      v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v37);
      if (v12 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v30 == v13)
        goto LABEL_25;
    }
    v38 = 0;
    if (v12 < 1)
      goto LABEL_39;
LABEL_52:
    v39 = 0;
    v40 = &v31[v35 * v30];
    v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v44 = *(_QWORD *)(v5 + 16), v45 = v44 - 1, v44 < 1)
        || v45 > (int)v44 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v45) == 1)
      {
        v42 = 0;
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_55;
      }
      else
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v45);
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_55;
      }
      v46 = *(_QWORD *)(v6 + 16);
      v47 = v46 - 1;
      if (v46 >= 1 && v47 <= (int)v46 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v47) != 1)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v47);
        goto LABEL_56;
      }
LABEL_55:
      v43 = 0;
LABEL_56:
      a5.i32[0] = *(_DWORD *)&v40[v42 * v39 + *(_QWORD *)(v5 + 40)];
      a5 = (float16x4_t)vcvtq_f32_f16(a5).u64[0];
      *(double *)(v41 + v43 * v39++ + *(_QWORD *)(v6 + 40)) = *(double *)&a5;
      if (v12 == v39)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = **a1;
  v5 = **a2;
  v62 = **a4;
  v63 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v63 + v31 * v19;
        v35 = v62 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v60 = *(_QWORD *)(v4 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v61) == 1)
          {
            v59 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v59 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v61);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _H0 = *(_WORD *)(v48 + v59 * v47 + v49);
                __asm { FCVT            S0, H0 }
                *(_DWORD *)(v51 + v52 * v47++ + v50) = _S0;
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)13>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 1, v43 < 1)
        || v44 > (int)v43 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v45 = *(_QWORD *)(v5 + 16);
      v46 = v45 - 1;
      if (v45 >= 1 && v46 <= (int)v45 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v46) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v46);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      *(_DWORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40)) = *(_DWORD *)&v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_WORD *)(v51 + v52 * v47 + v50) = *(_WORD *)(v48 + v53 * v47 + v49);
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)13>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _WORD *v44;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v18 = *(_QWORD *)(v5 + 16);
      v19 = v18 - 4;
      if (v18 < 4 || v19 > (int)v18 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v19) == 1)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v20 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v21 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v22 = v7 + v20 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v23 = *(_QWORD *)(v4 + 16), v24 = v23 - 3, v23 < 3)
        || v24 > (int)v23 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v24) == 1)
      {
        v25 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v24);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v26 = *(_QWORD *)(v5 + 16);
      v27 = v26 - 3;
      if (v26 < 3 || v27 > (int)v26 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v27) == 1)
        break;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v27);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v21 == v13)
        goto LABEL_11;
    }
    v28 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v29 = 0;
    v30 = (char *)result + v25 * v21;
    v31 = v22 + v28 * v21;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v32 = *(_QWORD *)(v4 + 16), v33 = v32 - 2, v32 < 2)
        || v33 > (int)v32 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v33) == 1)
      {
        v34 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v33);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v35 = *(_QWORD *)(v5 + 16);
      v36 = v35 - 2;
      if (v35 < 2 || v36 > (int)v35 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
        break;
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v29 == v12)
        goto LABEL_25;
    }
    v37 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v38 = 0;
    v39 = &v30[v34 * v29];
    v40 = v31 + v37 * v29;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v51 = *(_QWORD *)(v4 + 16), v52 = v51 - 1, v51 < 1)
        || v52 > (int)v51 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v52) == 1)
      {
        v41 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v52);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v53 = *(_QWORD *)(v5 + 16);
      v54 = v53 - 1;
      if (v53 >= 1 && v54 <= (int)v53 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v54) != 1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v54);
        goto LABEL_56;
      }
LABEL_55:
      v42 = 0;
LABEL_56:
      v43 = &v39[v41 * v38 + *(_QWORD *)(v4 + 40)];
      v44 = (_WORD *)(v40 + v42 * v38 + *(_QWORD *)(v5 + 40));
      _S0 = *(_DWORD *)v43;
      _S1 = *((_DWORD *)v43 + 1);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      *v44 = _S0;
      v44[1] = _S1;
      if (v11 == ++v38)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = **a1;
  v5 = **a2;
  v61 = **a4;
  v62 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v62 + v31 * v19;
        v35 = v61 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v59 = *(_QWORD *)(v4 + 16), v60 = v59 - 1, v59 < 1)
            || v60 > (int)v59 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v60) == 1)
          {
            v58 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v60);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                _S0 = *(_DWORD *)(v48 + v58 * v47 + v49);
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v51 + v52 * v47++ + v50) = _S0;
                if (v9 == v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **a1;
  v5 = **a2;
  v56 = **a4;
  v57 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v24 = 1;
    }
    else
    {
      v24 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v20 = 1;
    if (v14 > v22)
      v25 = 1;
    else
      v25 = v18;
    if (v11 > v23)
      v26 = 1;
    else
      v26 = v16;
    if (v10 > v23)
      v27 = 1;
    else
      v27 = v24;
    v28 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v29 = *(_QWORD *)(v4 + 16), v30 = v29 - 4, v29 < 4)
        || v30 > (int)v29 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v30) == 1)
      {
        v31 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v30);
        if ((v25 & 1) != 0)
          goto LABEL_34;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v17 < 1)
          goto LABEL_27;
LABEL_37:
        v33 = 0;
        v34 = v57 + v31 * v19;
        v35 = v56 + v32 * v19;
        while (2)
        {
          if (v21
            || (v36 = *(_QWORD *)(v4 + 16), v37 = v36 - 3, v36 < 3)
            || v37 > (int)v36 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v37) == 1)
          {
            v38 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_44;
            goto LABEL_45;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v37);
          if ((v26 & 1) != 0)
            goto LABEL_45;
LABEL_44:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_45:
            v39 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_38;
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_38:
            if (++v33 == v17)
              goto LABEL_27;
            continue;
          }
          break;
        }
        v40 = 0;
        v41 = v34 + v38 * v33;
        v42 = v35 + v39 * v33;
        while (2)
        {
          if (v21
            || (v43 = *(_QWORD *)(v4 + 16), v44 = v43 - 2, v43 < 2)
            || v44 > (int)v43 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v44) == 1)
          {
            v45 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_55;
            goto LABEL_56;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v44);
          if ((v27 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_56:
            v46 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_49;
          }
          v46 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_49:
            if (++v40 == v12)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v47 = 0;
        v48 = v41 + v45 * v40;
        v49 = *(_QWORD *)(v4 + 40);
        v50 = *(_QWORD *)(v5 + 40);
        v51 = v42 + v46 * v40;
        while (2)
        {
          if (v21
            || (v54 = *(_QWORD *)(v4 + 16), v55 = v54 - 1, v54 < 1)
            || v55 > (int)v54 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v55) == 1)
          {
            v53 = 0;
            if ((v28 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v55);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_61:
                *(_DWORD *)(v51 + v52 * v47 + v50) = *(unsigned __int16 *)(v48 + v53 * v47 + v49) << 16;
                if (v9 == ++v47)
                  goto LABEL_49;
                continue;
              }
            }
          }
          break;
        }
        v52 = 0;
        goto LABEL_61;
      }
LABEL_34:
      v32 = 0;
      if (v17 >= 1)
        goto LABEL_37;
LABEL_27:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = **a1;
  v5 = **a2;
  v55 = **a4;
  v56 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v54 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v54) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v54);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v56 + v29 * v19;
        v33 = v55 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v50 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v50 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) != 0)
            {
LABEL_59:
              v51 = 0;
              goto LABEL_66;
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) == 1)
            goto LABEL_59;
          v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_66:
          *(_WORD *)(v48 + v49 + v51 * v45) = HIWORD(COERCE_UNSIGNED_INT(*(float *)(v46 + v50 * v45 + v47)+ (float)(COERCE_FLOAT(*(_DWORD *)(v46 + v50 * v45 + v47) & 0xFF800000)* 0.0039062)));
          if (v9 == ++v45)
            goto LABEL_45;
          continue;
        }
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)13>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    v16 = *(unsigned __int8 *)(v4 + 49);
    result = (uint64_t **)*(unsigned __int8 *)(v5 + 49);
    while (1)
    {
      if (v16
        || (v17 = *(_QWORD *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      {
        v19 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
        if ((_DWORD)result)
          break;
      }
      v20 = *(_QWORD *)(v5 + 16);
      v21 = v20 - 4;
      if (v20 < 4 || v21 > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v21) == 1)
        break;
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v22 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v23 = 0;
    v24 = v6 + v19 * v15;
    v25 = v7 + v22 * v15;
    while (1)
    {
      if (v16
        || (v26 = *(_QWORD *)(v4 + 16), v27 = v26 - 3, v26 < 3)
        || v27 > (int)v26 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
      {
        v28 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
        if ((_DWORD)result)
          break;
      }
      v29 = *(_QWORD *)(v5 + 16);
      v30 = v29 - 3;
      if (v29 < 3 || v30 > (int)v29 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v30) == 1)
        break;
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v23 == v13)
        goto LABEL_11;
    }
    v31 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v32 = 0;
    v33 = v24 + v28 * v23;
    v34 = v25 + v31 * v23;
    while (1)
    {
      if (v16
        || (v35 = *(_QWORD *)(v4 + 16), v36 = v35 - 2, v35 < 2)
        || v36 > (int)v35 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v36) == 1)
      {
        v37 = 0;
        if ((_DWORD)result)
          break;
      }
      else
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v36);
        if ((_DWORD)result)
          break;
      }
      v38 = *(_QWORD *)(v5 + 16);
      v39 = v38 - 2;
      if (v38 < 2 || v39 > (int)v38 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v39) == 1)
        break;
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v39);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v32 == v12)
        goto LABEL_25;
    }
    v40 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v41 = 0;
    v42 = v33 + v37 * v32;
    v43 = *(_QWORD *)(v4 + 40);
    v44 = *(_QWORD *)(v5 + 40);
    v45 = v34 + v40 * v32;
    while (1)
    {
      if (v16
        || (v48 = *(_QWORD *)(v4 + 16), v49 = v48 - 1, v48 < 1)
        || v49 > (int)v48 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v49) == 1)
      {
        v46 = 0;
        if ((_DWORD)result)
          goto LABEL_55;
      }
      else
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v49);
        if ((_DWORD)result)
          goto LABEL_55;
      }
      v50 = *(_QWORD *)(v5 + 16);
      v51 = v50 - 1;
      if (v50 >= 1 && v51 <= (int)v50 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v51) != 1)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v51);
        goto LABEL_56;
      }
LABEL_55:
      v47 = 0;
LABEL_56:
      *(_QWORD *)(v45 + v47 * v41 + v44) = *(_QWORD *)(v42 + v46 * v41 + v43);
      if (v11 == ++v41)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)14>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = **result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    v16 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v17 = *(_QWORD *)(v4 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v18) == 1)
      {
        result = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        result = *(uint64_t ***)(*(_QWORD *)(v4 + 56) + 8 * v18);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v19 = *(_QWORD *)(v5 + 16);
      v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v20) == 1)
        break;
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v21 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v22 = 0;
    result = (uint64_t **)(v6 + (_QWORD)result * v15);
    v23 = v7 + v21 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v24 = *(_QWORD *)(v4 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v25) == 1)
      {
        v26 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v27 = *(_QWORD *)(v5 + 16);
      v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v28) == 1)
        break;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v28);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v22 == v13)
        goto LABEL_11;
    }
    v29 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v30 = 0;
    v31 = (char *)result + v26 * v22;
    v32 = v23 + v29 * v22;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v33 = *(_QWORD *)(v4 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v34) == 1)
      {
        v35 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v34);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v36 = *(_QWORD *)(v5 + 16);
      v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v37) == 1)
        break;
      v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v37);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v30 == v12)
        goto LABEL_25;
    }
    v38 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v39 = 0;
    v40 = &v31[v35 * v30];
    v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v45 = *(_QWORD *)(v4 + 16), v46 = v45 - 1, v45 < 1)
        || v46 > (int)v45 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v46) == 1)
      {
        v42 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v46);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v47 = *(_QWORD *)(v5 + 16);
      v48 = v47 - 1;
      if (v47 >= 1 && v48 <= (int)v47 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v48) != 1)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v48);
        goto LABEL_56;
      }
LABEL_55:
      v43 = 0;
LABEL_56:
      v44 = *(float32x2_t *)&v40[v42 * v39 + *(_QWORD *)(v4 + 40)];
      *(float32x2_t *)(v41 + v43 * v39++ + *(_QWORD *)(v5 + 40)) = vmaxnm_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v44, v16), (int8x8_t)v16, (int8x8_t)v44), (float32x2_t)0x80000000800000);
      if (v11 == v39)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)14>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = **(_QWORD **)result;
  v5 = **a2;
  v55 = **a4;
  v56 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    v57 = 1;
    v15 = 1;
    v16 = 1;
LABEL_7:
    v17 = 1;
LABEL_8:
    v18 = 0;
    LODWORD(result) = v6 < 1;
    v19 = *(unsigned __int8 *)(v4 + 49);
    v20 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v17 = 1;
    v21 = v20;
    if (*(_BYTE *)(v5 + 49))
    {
      v15 = 1;
      v13 = 1;
      result = 1;
    }
    else
    {
      result = result;
    }
    v54 = v14;
    if (v14 > v20)
      v22 = 1;
    else
      v22 = v17;
    if (v11 > v21)
      v23 = 1;
    else
      v23 = v15;
    if (v10 > v21)
      v24 = 1;
    else
      v24 = v13;
    if (v7 > v21)
      v25 = 1;
    else
      v25 = result;
    while (1)
    {
      if (v19
        || (v26 = *(_QWORD *)(v4 + 16), v27 = v26 - 4, v26 < 4)
        || v27 > (int)v26 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
      {
        v28 = 0;
        if ((v22 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
        if ((v22 & 1) != 0)
          goto LABEL_32;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v54) != 1)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v54);
        if (v16 < 1)
          goto LABEL_25;
LABEL_35:
        v30 = 0;
        v31 = v56 + v28 * v18;
        v32 = v55 + v29 * v18;
        while (2)
        {
          if (v19
            || (v33 = *(_QWORD *)(v4 + 16), v34 = v33 - 3, v33 < 3)
            || v34 > (int)v33 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v34) == 1)
          {
            v35 = 0;
            if ((v23 & 1) == 0)
              goto LABEL_42;
            goto LABEL_43;
          }
          v35 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v34);
          if ((v23 & 1) != 0)
            goto LABEL_43;
LABEL_42:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_43:
            v36 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_36;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_36:
            if (++v30 == v16)
              goto LABEL_25;
            continue;
          }
          break;
        }
        v37 = 0;
        v38 = v31 + v35 * v30;
        v39 = v32 + v36 * v30;
        while (2)
        {
          if (v19
            || (v40 = *(_QWORD *)(v4 + 16), v41 = v40 - 2, v40 < 2)
            || v41 > (int)v40 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v41) == 1)
          {
            v42 = 0;
            if ((v24 & 1) == 0)
              goto LABEL_53;
            goto LABEL_54;
          }
          v42 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v41);
          if ((v24 & 1) != 0)
            goto LABEL_54;
LABEL_53:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_54:
            v43 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_47;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_47:
            if (++v37 == v12)
              goto LABEL_36;
            continue;
          }
          break;
        }
        v44 = 0;
        v45 = v38 + v42 * v37;
        v46 = *(_QWORD *)(v4 + 40);
        v47 = *(_QWORD *)(v5 + 40);
        v48 = v39 + v43 * v37;
        while (2)
        {
          if (v19
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v51 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v51 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v25 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v49 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_59:
                result = v48 + v49 * v44;
                v50 = *(float *)(v45 + v51 * v44 + v46);
                if (v50 > 3.4028e38)
                  v50 = 3.4028e38;
                *(float *)(result + v47) = fmaxf(v50, -3.4028e38);
                if (v9 == ++v44)
                  goto LABEL_47;
                continue;
              }
            }
          }
          break;
        }
        v49 = 0;
        goto LABEL_59;
      }
LABEL_32:
      v29 = 0;
      if (v16 >= 1)
        goto LABEL_35;
LABEL_25:
      if (++v18 == v57)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v16 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v15 = 0;
    v11 = 0;
    v13 = 0;
    v57 = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v57 = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (v57 >= 1)
  {
    v14 = v6 - 4;
    v15 = 0;
    v13 = 0;
    v17 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)14>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _DWORD *v45;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = **(_QWORD **)result;
  v6 = **a2;
  v7 = **a3;
  v8 = **a4;
  v9 = *(_QWORD *)(v6 + 16);
  if (v9 < 1)
  {
    v9 = 1;
    v13 = 1;
    v12 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(v6 + 24);
  v11 = v10 + 8 * v9;
  v12 = *(_QWORD *)(v11 - 8);
  if (v9 == 1)
  {
    v13 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v11 - 16);
  if ((unint64_t)v9 < 3)
  {
    v9 = 1;
    v14 = 1;
    goto LABEL_10;
  }
  v15 = v10 + 8 * v9;
  v14 = *(_QWORD *)(v15 - 24);
  if (v9 == 3)
  {
    v9 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v15 - 32);
  if (v9 >= 1)
  {
LABEL_10:
    v16 = 0;
    LOWORD(a5) = -1024;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v17 = *(_QWORD *)(v5 + 16), v18 = v17 - 4, v17 < 4)
        || v18 > (int)v17 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v18) == 1)
      {
        v19 = 0;
        result = *(unsigned __int8 *)(v6 + 49);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
        result = *(unsigned __int8 *)(v6 + 49);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v20 = *(_QWORD *)(v6 + 16);
      result = v20 - 4;
      if (v20 < 4 || result > (int)v20 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * result) == 1)
        break;
      v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
      if (v14 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v16 == v9)
        return result;
    }
    v21 = 0;
    if (v14 < 1)
      goto LABEL_11;
LABEL_24:
    result = 0;
    v22 = v7 + v19 * v16;
    v23 = v8 + v21 * v16;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v24 = *(_QWORD *)(v5 + 16), v25 = v24 - 3, v24 < 3)
        || v25 > (int)v24 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v25) == 1)
      {
        v26 = 0;
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v27 = *(_QWORD *)(v6 + 16);
      v28 = v27 - 3;
      if (v27 < 3 || v28 > (int)v27 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v28) == 1)
        break;
      v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v28);
      if (v13 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++result == v14)
        goto LABEL_11;
    }
    v29 = 0;
    if (v13 < 1)
      goto LABEL_25;
LABEL_38:
    v30 = 0;
    v31 = v22 + v26 * result;
    v32 = v23 + v29 * result;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v33 = *(_QWORD *)(v5 + 16), v34 = v33 - 2, v33 < 2)
        || v34 > (int)v33 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v34) == 1)
      {
        v35 = 0;
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      else
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34);
        if (*(_BYTE *)(v6 + 49))
          break;
      }
      v36 = *(_QWORD *)(v6 + 16);
      v37 = v36 - 2;
      if (v36 < 2 || v37 > (int)v36 - 1 || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v37) == 1)
        break;
      v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v37);
      if (v12 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v30 == v13)
        goto LABEL_25;
    }
    v38 = 0;
    if (v12 < 1)
      goto LABEL_39;
LABEL_52:
    v39 = 0;
    v40 = v31 + v35 * v30;
    v41 = v32 + v38 * v30;
    while (1)
    {
      if (*(_BYTE *)(v5 + 49)
        || (v56 = *(_QWORD *)(v5 + 16), v57 = v56 - 1, v56 < 1)
        || v57 > (int)v56 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v57) == 1)
      {
        v42 = 0;
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_55;
      }
      else
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v57);
        if (*(_BYTE *)(v6 + 49))
          goto LABEL_55;
      }
      v58 = *(_QWORD *)(v6 + 16);
      v59 = v58 - 1;
      if (v58 >= 1 && v59 <= (int)v58 - 1 && *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v59) != 1)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v59);
        goto LABEL_56;
      }
LABEL_55:
      v43 = 0;
LABEL_56:
      v44 = (_WORD *)(v40 + v42 * v39 + *(_QWORD *)(v5 + 40));
      v45 = (_DWORD *)(v41 + v43 * v39 + *(_QWORD *)(v6 + 40));
      LOWORD(_S1) = *v44;
      LOWORD(_S2) = v44[1];
      __asm { FCVT            S3, H1 }
      if (_S3 <= -INFINITY)
        _S1 = a5;
      __asm { FCVT            S3, H2 }
      if (_S3 <= -INFINITY)
        _S2 = a5;
      __asm
      {
        FCVT            S1, H1
        FCVT            S2, H2
      }
      *v45 = _S1;
      v45[1] = _S2;
      if (v12 == ++v39)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)14>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v5 = **a1;
  v6 = **a2;
  v64 = **a4;
  v65 = **a3;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v7 - 1;
  if (v7 <= 0)
  {
    v11 = v7 - 2;
    v10 = 1;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(v9 + 8 * v8);
  if (v7 == 1)
  {
    v11 = -1;
LABEL_5:
    v12 = v7 - 3;
    v13 = 1;
    v14 = 1;
LABEL_6:
    v15 = v7 - 4;
    result = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    v21 = v7 < 1;
    v22 = *(unsigned __int8 *)(v5 + 49);
    v23 = v7 - 1;
    if (*(_BYTE *)(v6 + 49))
      v19 = 1;
    v24 = v23;
    if (*(_BYTE *)(v6 + 49))
    {
      v17 = 1;
      v14 = 1;
      v21 = 1;
    }
    v63 = v15;
    if (v15 > v23)
      v25 = 1;
    else
      v25 = v19;
    if (v12 > v24)
      v17 = 1;
    if (v11 > v24)
      v26 = 1;
    else
      v26 = v14;
    v27 = v8 > v24 || v21;
    LOWORD(a5) = -1024;
    while (1)
    {
      if (v22
        || (v28 = *(_QWORD *)(v5 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
      {
        v30 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
        if ((v25 & 1) != 0)
          goto LABEL_31;
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v63) != 1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v63);
        if (v18 < 1)
          goto LABEL_24;
LABEL_34:
        v32 = 0;
        v33 = v65 + v30 * v20;
        v34 = v64 + v31 * v20;
        while (2)
        {
          if (v22
            || (v35 = *(_QWORD *)(v5 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v36) == 1)
          {
            v37 = 0;
            if ((v17 & 1) == 0)
              goto LABEL_41;
            goto LABEL_42;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
          if ((v17 & 1) != 0)
            goto LABEL_42;
LABEL_41:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v12) == 1)
          {
LABEL_42:
            v38 = 0;
            if (v13 >= 1)
              break;
            goto LABEL_35;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12);
          if (v13 < 1)
          {
LABEL_35:
            if (++v32 == v18)
              goto LABEL_24;
            continue;
          }
          break;
        }
        v39 = 0;
        v40 = v33 + v37 * v32;
        v41 = v34 + v38 * v32;
        while (2)
        {
          if (v22
            || (v42 = *(_QWORD *)(v5 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v43) == 1)
          {
            v44 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_52;
            goto LABEL_53;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v43);
          if ((v26 & 1) != 0)
            goto LABEL_53;
LABEL_52:
          if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v11) == 1)
          {
LABEL_53:
            v45 = 0;
            if (v10 >= 1)
              break;
            goto LABEL_46;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
          if (v10 < 1)
          {
LABEL_46:
            if (++v39 == v13)
              goto LABEL_35;
            continue;
          }
          break;
        }
        v46 = 0;
        v47 = v40 + v44 * v39;
        v48 = *(_QWORD *)(v5 + 40);
        v49 = *(_QWORD *)(v6 + 40);
        v50 = v41 + v45 * v39;
        while (2)
        {
          if (v22
            || (v61 = *(_QWORD *)(v5 + 16), v62 = v61 - 1, v61 < 1)
            || v62 > (int)v61 - 1
            || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v62) == 1)
          {
            v60 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_63;
          }
          else
          {
            v60 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v62);
            if ((v27 & 1) == 0)
            {
LABEL_63:
              if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) != 1)
              {
                v51 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
LABEL_58:
                v52 = v50 + v51 * v46;
                LOWORD(_S1) = *(_WORD *)(v47 + v60 * v46 + v48);
                __asm { FCVT            S2, H1 }
                if (_S2 <= -INFINITY)
                  _S1 = a5;
                __asm { FCVT            S1, H1 }
                *(_DWORD *)(v52 + v49) = _S1;
                if (v10 == ++v46)
                  goto LABEL_46;
                continue;
              }
            }
          }
          break;
        }
        v51 = 0;
        goto LABEL_58;
      }
LABEL_31:
      v31 = 0;
      if (v18 >= 1)
        goto LABEL_34;
LABEL_24:
      if (++v20 == result)
        return result;
    }
  }
  v11 = v7 - 2;
  v13 = *(_QWORD *)(v9 + 8 * (v7 - 2));
  if ((unint64_t)v7 <= 2)
  {
    v11 = 0;
    v14 = 0;
    v12 = -1;
    goto LABEL_6;
  }
  v12 = v7 - 3;
  v18 = *(_QWORD *)(v9 + 8 * (v7 - 3));
  if (v7 == 3)
  {
    v17 = 0;
    v12 = 0;
    v14 = 0;
    result = 1;
    v15 = -1;
    v11 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v9 + 8 * (v7 - 4));
  if (result >= 1)
  {
    v15 = v7 - 4;
    v17 = 0;
    v14 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)14>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = **(_QWORD **)result;
  v7 = **a2;
  v8 = **a3;
  v9 = **a4;
  v10 = *(_QWORD *)(v7 + 16);
  if (v10 < 1)
  {
    v10 = 1;
    v14 = 1;
    v13 = 1;
    v15 = 1;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v7 + 24);
  v12 = v11 + 8 * v10;
  v13 = *(_QWORD *)(v12 - 8);
  if (v10 == 1)
  {
    v14 = 1;
    v15 = 1;
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(v12 - 16);
  if ((unint64_t)v10 < 3)
  {
    v10 = 1;
    v15 = 1;
    goto LABEL_10;
  }
  v16 = v11 + 8 * v10;
  v15 = *(_QWORD *)(v16 - 24);
  if (v10 == 3)
  {
    v10 = 1;
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(v16 - 32);
  if (v10 >= 1)
  {
LABEL_10:
    v17 = 0;
    LOWORD(a5) = 31743;
    LOWORD(a6) = -1025;
    result = 3347046400;
    while (1)
    {
      if (*(_BYTE *)(v6 + 49)
        || (v18 = *(_QWORD *)(v6 + 16), v19 = v18 - 4, v18 < 4)
        || v19 > (int)v18 - 1
        || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v19) == 1)
      {
        v20 = 0;
        if (*(_BYTE *)(v7 + 49))
          break;
      }
      else
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v19);
        if (*(_BYTE *)(v7 + 49))
          break;
      }
      v21 = *(_QWORD *)(v7 + 16);
      v22 = v21 - 4;
      if (v21 < 4 || v22 > (int)v21 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v22) == 1)
        break;
      v23 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v22);
      if (v15 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v17 == v10)
        return result;
    }
    v23 = 0;
    if (v15 < 1)
      goto LABEL_11;
LABEL_24:
    v24 = 0;
    v25 = v8 + v20 * v17;
    v26 = v9 + v23 * v17;
    while (1)
    {
      if (*(_BYTE *)(v6 + 49)
        || (v27 = *(_QWORD *)(v6 + 16), v28 = v27 - 3, v27 < 3)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if (*(_BYTE *)(v7 + 49))
          break;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v28);
        if (*(_BYTE *)(v7 + 49))
          break;
      }
      v30 = *(_QWORD *)(v7 + 16);
      v31 = v30 - 3;
      if (v30 < 3 || v31 > (int)v30 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v31) == 1)
        break;
      v32 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v31);
      if (v14 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v24 == v15)
        goto LABEL_11;
    }
    v32 = 0;
    if (v14 < 1)
      goto LABEL_25;
LABEL_38:
    v33 = 0;
    v34 = v25 + v29 * v24;
    v35 = v26 + v32 * v24;
    while (1)
    {
      if (*(_BYTE *)(v6 + 49)
        || (v36 = *(_QWORD *)(v6 + 16), v37 = v36 - 2, v36 < 2)
        || v37 > (int)v36 - 1
        || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v37) == 1)
      {
        v38 = 0;
        if (*(_BYTE *)(v7 + 49))
          break;
      }
      else
      {
        v38 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v37);
        if (*(_BYTE *)(v7 + 49))
          break;
      }
      v39 = *(_QWORD *)(v7 + 16);
      v40 = v39 - 2;
      if (v39 < 2 || v40 > (int)v39 - 1 || *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v40) == 1)
        break;
      v41 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v40);
      if (v13 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v33 == v14)
        goto LABEL_25;
    }
    v41 = 0;
    if (v13 < 1)
      goto LABEL_39;
LABEL_52:
    v42 = 0;
    v43 = v34 + v38 * v33;
    v44 = v35 + v41 * v33;
    while (1)
    {
      if (*(_BYTE *)(v6 + 49)
        || (v59 = *(_QWORD *)(v6 + 16), v60 = v59 - 1, v59 < 1)
        || v60 > (int)v59 - 1
        || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v60) == 1)
      {
        v45 = 0;
        if (*(_BYTE *)(v7 + 49))
          goto LABEL_55;
      }
      else
      {
        v45 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v60);
        if (*(_BYTE *)(v7 + 49))
          goto LABEL_55;
      }
      v61 = *(_QWORD *)(v7 + 16);
      v62 = v61 - 1;
      if (v61 >= 1 && v62 <= (int)v61 - 1 && *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v62) != 1)
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v62);
        goto LABEL_56;
      }
LABEL_55:
      v46 = 0;
LABEL_56:
      v47 = (_WORD *)(v43 + v45 * v42 + *(_QWORD *)(v6 + 40));
      v48 = (_WORD *)(v44 + v46 * v42 + *(_QWORD *)(v7 + 40));
      LOWORD(_S2) = *v47;
      LOWORD(_S3) = v47[1];
      __asm { FCVT            S4, H2 }
      if (_S4 > 65504.0)
        _S2 = a5;
      __asm { FCVT            S4, H2 }
      if (_S4 <= -65504.0)
        _S2 = a6;
      __asm { FCVT            S4, H3 }
      if (_S4 > 65504.0)
        _S3 = a5;
      __asm { FCVT            S4, H3 }
      if (_S4 <= -65504.0)
        _S3 = a6;
      *v48 = LOWORD(_S2);
      v48[1] = LOWORD(_S3);
      if (v13 == ++v42)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)14>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = **(_QWORD **)result;
  v7 = **a2;
  v63 = **a4;
  v64 = **a3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v8 - 1;
  if (v8 <= 0)
  {
    v12 = v8 - 2;
    v11 = 1;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  if (v8 == 1)
  {
    v12 = -1;
LABEL_5:
    v13 = v8 - 3;
    v14 = 1;
    v15 = 1;
LABEL_6:
    v16 = v8 - 4;
    v65 = 1;
    v17 = 1;
    v18 = 1;
LABEL_7:
    v19 = 1;
LABEL_8:
    v20 = 0;
    LODWORD(result) = v8 < 1;
    v21 = *(unsigned __int8 *)(v6 + 49);
    v22 = v8 - 1;
    if (*(_BYTE *)(v7 + 49))
      v19 = 1;
    v23 = v22;
    if (*(_BYTE *)(v7 + 49))
    {
      v17 = 1;
      v15 = 1;
      result = 1;
    }
    else
    {
      result = result;
    }
    v62 = v16;
    if (v16 > v22)
      v24 = 1;
    else
      v24 = v19;
    if (v13 > v23)
      v25 = 1;
    else
      v25 = v17;
    if (v12 > v23)
      v26 = 1;
    else
      v26 = v15;
    if (v9 > v23)
      v27 = 1;
    else
      v27 = result;
    LOWORD(a5) = 31743;
    LOWORD(a6) = -1025;
    while (1)
    {
      if (v21
        || (v28 = *(_QWORD *)(v6 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v29) == 1)
      {
        v30 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_33;
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v29);
        if ((v24 & 1) != 0)
          goto LABEL_33;
      }
      if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v62) != 1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v62);
        if (v18 < 1)
          goto LABEL_26;
LABEL_36:
        v32 = 0;
        v33 = v64 + v30 * v20;
        v34 = v63 + v31 * v20;
        while (2)
        {
          if (v21
            || (v35 = *(_QWORD *)(v6 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v36) == 1)
          {
            v37 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_43;
            goto LABEL_44;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v36);
          if ((v25 & 1) != 0)
            goto LABEL_44;
LABEL_43:
          if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v13) == 1)
          {
LABEL_44:
            v38 = 0;
            if (v14 >= 1)
              break;
            goto LABEL_37;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13);
          if (v14 < 1)
          {
LABEL_37:
            if (++v32 == v18)
              goto LABEL_26;
            continue;
          }
          break;
        }
        v39 = 0;
        v40 = v33 + v37 * v32;
        v41 = v34 + v38 * v32;
        while (2)
        {
          if (v21
            || (v42 = *(_QWORD *)(v6 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v43) == 1)
          {
            v44 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_54;
            goto LABEL_55;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v43);
          if ((v26 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v12) == 1)
          {
LABEL_55:
            v45 = 0;
            if (v11 >= 1)
              break;
            goto LABEL_48;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v12);
          if (v11 < 1)
          {
LABEL_48:
            if (++v39 == v14)
              goto LABEL_37;
            continue;
          }
          break;
        }
        v46 = 0;
        v47 = v40 + v44 * v39;
        v48 = *(_QWORD *)(v6 + 40);
        v49 = *(_QWORD *)(v7 + 40);
        v50 = v41 + v45 * v39;
        while (2)
        {
          if (v21
            || (v60 = *(_QWORD *)(v6 + 16), v61 = v60 - 1, v60 < 1)
            || v61 > (int)v60 - 1
            || *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v61) == 1)
          {
            v59 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_67;
          }
          else
          {
            v59 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v61);
            if ((v27 & 1) == 0)
            {
LABEL_67:
              if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) != 1)
              {
                v51 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
LABEL_60:
                result = v50 + v51 * v46;
                LOWORD(_S2) = *(_WORD *)(v47 + v59 * v46 + v48);
                __asm { FCVT            S3, H2 }
                if (_S3 > 65504.0)
                  _S2 = a5;
                __asm { FCVT            S3, H2 }
                if (_S3 <= -65504.0)
                  _S2 = a6;
                *(_WORD *)(result + v49) = LOWORD(_S2);
                if (v11 == ++v46)
                  goto LABEL_48;
                continue;
              }
            }
          }
          break;
        }
        v51 = 0;
        goto LABEL_60;
      }
LABEL_33:
      v31 = 0;
      if (v18 >= 1)
        goto LABEL_36;
LABEL_26:
      if (++v20 == v65)
        return result;
    }
  }
  v12 = v8 - 2;
  v14 = *(_QWORD *)(v10 + 8 * (v8 - 2));
  if ((unint64_t)v8 <= 2)
  {
    v12 = 0;
    v15 = 0;
    v13 = -1;
    goto LABEL_6;
  }
  v13 = v8 - 3;
  v18 = *(_QWORD *)(v10 + 8 * (v8 - 3));
  if (v8 == 3)
  {
    v17 = 0;
    v13 = 0;
    v15 = 0;
    v65 = 1;
    v16 = -1;
    v12 = 1;
    goto LABEL_7;
  }
  v65 = *(_QWORD *)(v10 + 8 * (v8 - 4));
  if (v65 >= 1)
  {
    v16 = v8 - 4;
    v17 = 0;
    v15 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)14>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  _WORD *v46;
  float v47;
  float v48;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **(_QWORD **)result;
  v5 = **a2;
  v6 = **a3;
  v7 = **a4;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 < 1)
  {
    v8 = 1;
    v12 = 1;
    v11 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 24);
  v10 = v9 + 8 * v8;
  v11 = *(_QWORD *)(v10 - 8);
  if (v8 == 1)
  {
    v12 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v10 - 16);
  if ((unint64_t)v8 < 3)
  {
    v8 = 1;
    v13 = 1;
    goto LABEL_10;
  }
  v14 = v9 + 8 * v8;
  v13 = *(_QWORD *)(v14 - 24);
  if (v8 == 3)
  {
    v8 = 1;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v14 - 32);
  if (v8 >= 1)
  {
LABEL_10:
    v15 = 0;
    result = 3347046400;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v16 = *(_QWORD *)(v4 + 16), v17 = v16 - 4, v16 < 4)
        || v17 > (int)v16 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v17) == 1)
      {
        v18 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v17);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v19 = *(_QWORD *)(v5 + 16);
      v20 = v19 - 4;
      if (v19 < 4 || v20 > (int)v19 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v20) == 1)
        break;
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if (v13 >= 1)
        goto LABEL_24;
LABEL_11:
      if (++v15 == v8)
        return result;
    }
    v21 = 0;
    if (v13 < 1)
      goto LABEL_11;
LABEL_24:
    v22 = 0;
    v23 = v6 + v18 * v15;
    v24 = v7 + v21 * v15;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v25 = *(_QWORD *)(v4 + 16), v26 = v25 - 3, v25 < 3)
        || v26 > (int)v25 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v26) == 1)
      {
        v27 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v28 = *(_QWORD *)(v5 + 16);
      v29 = v28 - 3;
      if (v28 < 3 || v29 > (int)v28 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v29) == 1)
        break;
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v29);
      if (v12 >= 1)
        goto LABEL_38;
LABEL_25:
      if (++v22 == v13)
        goto LABEL_11;
    }
    v30 = 0;
    if (v12 < 1)
      goto LABEL_25;
LABEL_38:
    v31 = 0;
    v32 = v23 + v27 * v22;
    v33 = v24 + v30 * v22;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 2, v34 < 2)
        || v35 > (int)v34 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
      {
        v36 = 0;
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      else
      {
        v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
        if (*(_BYTE *)(v5 + 49))
          break;
      }
      v37 = *(_QWORD *)(v5 + 16);
      v38 = v37 - 2;
      if (v37 < 2 || v38 > (int)v37 - 1 || *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v38) == 1)
        break;
      v39 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v38);
      if (v11 >= 1)
        goto LABEL_52;
LABEL_39:
      if (++v31 == v12)
        goto LABEL_25;
    }
    v39 = 0;
    if (v11 < 1)
      goto LABEL_39;
LABEL_52:
    v40 = 0;
    v41 = v32 + v36 * v31;
    v42 = v33 + v39 * v31;
    while (1)
    {
      if (*(_BYTE *)(v4 + 49)
        || (v56 = *(_QWORD *)(v4 + 16), v57 = v56 - 1, v56 < 1)
        || v57 > (int)v56 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v57) == 1)
      {
        v43 = 0;
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      else
      {
        v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v57);
        if (*(_BYTE *)(v5 + 49))
          goto LABEL_55;
      }
      v58 = *(_QWORD *)(v5 + 16);
      v59 = v58 - 1;
      if (v58 >= 1 && v59 <= (int)v58 - 1 && *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v59) != 1)
      {
        v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v59);
        goto LABEL_56;
      }
LABEL_55:
      v44 = 0;
LABEL_56:
      v45 = (float *)(v41 + v43 * v40 + *(_QWORD *)(v4 + 40));
      v46 = (_WORD *)(v42 + v44 * v40 + *(_QWORD *)(v5 + 40));
      v47 = *v45;
      v48 = v45[1];
      if (*v45 > 65504.0)
        v47 = 65504.0;
      _S0 = fmaxf(v47, -65504.0);
      if (v48 > 65504.0)
        v48 = 65504.0;
      _S1 = fmaxf(v48, -65504.0);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      *v46 = _H0;
      v46[1] = LOWORD(_S1);
      if (v11 == ++v40)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)14>(uint64_t result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = **(_QWORD **)result;
  v5 = **a2;
  v60 = **a4;
  v61 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    v62 = 1;
    v15 = 1;
    v16 = 1;
LABEL_7:
    v17 = 1;
LABEL_8:
    v18 = 0;
    LODWORD(result) = v6 < 1;
    v19 = *(unsigned __int8 *)(v4 + 49);
    v20 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v17 = 1;
    v21 = v20;
    if (*(_BYTE *)(v5 + 49))
    {
      v15 = 1;
      v13 = 1;
      result = 1;
    }
    else
    {
      result = result;
    }
    v59 = v14;
    if (v14 > v20)
      v22 = 1;
    else
      v22 = v17;
    if (v11 > v21)
      v23 = 1;
    else
      v23 = v15;
    if (v10 > v21)
      v24 = 1;
    else
      v24 = v13;
    if (v7 > v21)
      v25 = 1;
    else
      v25 = result;
    while (1)
    {
      if (v19
        || (v26 = *(_QWORD *)(v4 + 16), v27 = v26 - 4, v26 < 4)
        || v27 > (int)v26 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v27) == 1)
      {
        v28 = 0;
        if ((v22 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
        if ((v22 & 1) != 0)
          goto LABEL_32;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v59) != 1)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v59);
        if (v16 < 1)
          goto LABEL_25;
LABEL_35:
        v30 = 0;
        v31 = v61 + v28 * v18;
        v32 = v60 + v29 * v18;
        while (2)
        {
          if (v19
            || (v33 = *(_QWORD *)(v4 + 16), v34 = v33 - 3, v33 < 3)
            || v34 > (int)v33 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v34) == 1)
          {
            v35 = 0;
            if ((v23 & 1) == 0)
              goto LABEL_42;
            goto LABEL_43;
          }
          v35 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v34);
          if ((v23 & 1) != 0)
            goto LABEL_43;
LABEL_42:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_43:
            v36 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_36;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_36:
            if (++v30 == v16)
              goto LABEL_25;
            continue;
          }
          break;
        }
        v37 = 0;
        v38 = v31 + v35 * v30;
        v39 = v32 + v36 * v30;
        while (2)
        {
          if (v19
            || (v40 = *(_QWORD *)(v4 + 16), v41 = v40 - 2, v40 < 2)
            || v41 > (int)v40 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v41) == 1)
          {
            v42 = 0;
            if ((v24 & 1) == 0)
              goto LABEL_53;
            goto LABEL_54;
          }
          v42 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v41);
          if ((v24 & 1) != 0)
            goto LABEL_54;
LABEL_53:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_54:
            v43 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_47;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_47:
            if (++v37 == v12)
              goto LABEL_36;
            continue;
          }
          break;
        }
        v44 = 0;
        v45 = v38 + v42 * v37;
        v46 = *(_QWORD *)(v4 + 40);
        v47 = *(_QWORD *)(v5 + 40);
        v48 = v39 + v43 * v37;
        while (2)
        {
          if (v19
            || (v57 = *(_QWORD *)(v4 + 16), v58 = v57 - 1, v57 < 1)
            || v58 > (int)v57 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v58) == 1)
          {
            v56 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_64;
          }
          else
          {
            v56 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v58);
            if ((v25 & 1) == 0)
            {
LABEL_64:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v49 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_59:
                result = v48 + v49 * v44;
                v50 = *(float *)(v45 + v56 * v44 + v46);
                if (v50 > 65504.0)
                  v50 = 65504.0;
                _S0 = fmaxf(v50, -65504.0);
                __asm { FCVT            H0, S0 }
                *(_WORD *)(result + v47) = LOWORD(_S0);
                if (v9 == ++v44)
                  goto LABEL_47;
                continue;
              }
            }
          }
          break;
        }
        v49 = 0;
        goto LABEL_59;
      }
LABEL_32:
      v29 = 0;
      if (v16 >= 1)
        goto LABEL_35;
LABEL_25:
      if (++v18 == v62)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v16 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v15 = 0;
    v11 = 0;
    v13 = 0;
    v62 = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v62 = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (v62 >= 1)
  {
    v14 = v6 - 4;
    v15 = 0;
    v13 = 0;
    v17 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)14>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = **a1;
  v5 = **a2;
  v55 = **a4;
  v56 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    result = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = *(unsigned __int8 *)(v4 + 49);
    v22 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v18 = 1;
    v23 = v22;
    if (*(_BYTE *)(v5 + 49))
    {
      v16 = 1;
      v13 = 1;
      v20 = 1;
    }
    v54 = v14;
    if (v14 > v22)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v23)
      v16 = 1;
    if (v10 > v23)
      v25 = 1;
    else
      v25 = v13;
    v26 = v7 > v23 || v20;
    while (1)
    {
      if (v21
        || (v27 = *(_QWORD *)(v4 + 16), v28 = v27 - 4, v27 < 4)
        || v28 > (int)v27 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v28) == 1)
      {
        v29 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v28);
        if ((v24 & 1) != 0)
          goto LABEL_30;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v54) != 1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v54);
        if (v17 < 1)
          goto LABEL_23;
LABEL_33:
        v31 = 0;
        v32 = v56 + v29 * v19;
        v33 = v55 + v30 * v19;
        while (2)
        {
          if (v21
            || (v34 = *(_QWORD *)(v4 + 16), v35 = v34 - 3, v34 < 3)
            || v35 > (int)v34 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v35) == 1)
          {
            v36 = 0;
            if ((v16 & 1) == 0)
              goto LABEL_40;
            goto LABEL_41;
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v35);
          if ((v16 & 1) != 0)
            goto LABEL_41;
LABEL_40:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_41:
            v37 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_34;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_34:
            if (++v31 == v17)
              goto LABEL_23;
            continue;
          }
          break;
        }
        v38 = 0;
        v39 = v32 + v36 * v31;
        v40 = v33 + v37 * v31;
        while (2)
        {
          if (v21
            || (v41 = *(_QWORD *)(v4 + 16), v42 = v41 - 2, v41 < 2)
            || v42 > (int)v41 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v42) == 1)
          {
            v43 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_51;
            goto LABEL_52;
          }
          v43 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v42);
          if ((v25 & 1) != 0)
            goto LABEL_52;
LABEL_51:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_52:
            v44 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_45;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_45:
            if (++v38 == v12)
              goto LABEL_34;
            continue;
          }
          break;
        }
        v45 = 0;
        v46 = v39 + v43 * v38;
        v47 = *(_QWORD *)(v4 + 40);
        v48 = *(_QWORD *)(v5 + 40);
        v49 = v40 + v44 * v38;
        while (2)
        {
          if (v21
            || (v52 = *(_QWORD *)(v4 + 16), v53 = v52 - 1, v52 < 1)
            || v53 > (int)v52 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v53) == 1)
          {
            v51 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_60;
          }
          else
          {
            v51 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v53);
            if ((v26 & 1) == 0)
            {
LABEL_60:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v50 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_57:
                *(float *)(v49 + v50 * v45 + v48) = fmaxf(COERCE_FLOAT(*(unsigned __int16 *)(v46 + v51 * v45 + v47) << 16), -INFINITY);
                if (v9 == ++v45)
                  goto LABEL_45;
                continue;
              }
            }
          }
          break;
        }
        v50 = 0;
        goto LABEL_57;
      }
LABEL_30:
      v30 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_23:
      if (++v19 == result)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    result = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (result >= 1)
  {
    v14 = v6 - 4;
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t **mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)14>(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = **result;
  v5 = **a2;
  v57 = **a4;
  v58 = **a3;
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    v59 = 1;
    v15 = 1;
    v16 = 1;
LABEL_7:
    v17 = 1;
LABEL_8:
    v18 = 0;
    v19 = v6 < 1;
    v20 = *(unsigned __int8 *)(v4 + 49);
    v21 = v6 - 1;
    if (*(_BYTE *)(v5 + 49))
      v17 = 1;
    v22 = v21;
    if (*(_BYTE *)(v5 + 49))
    {
      v15 = 1;
      v23 = 1;
    }
    else
    {
      v23 = v13;
    }
    if (*(_BYTE *)(v5 + 49))
      v19 = 1;
    if (v14 > v21)
      v24 = 1;
    else
      v24 = v17;
    if (v11 > v22)
      v25 = 1;
    else
      v25 = v15;
    if (v10 > v22)
      v26 = 1;
    else
      v26 = v23;
    v27 = v7 > v22 || v19;
    result = (uint64_t **)v14;
    while (1)
    {
      if (v20
        || (v28 = *(_QWORD *)(v4 + 16), v29 = v28 - 4, v28 < 4)
        || v29 > (int)v28 - 1
        || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v29) == 1)
      {
        v30 = 0;
        if ((v24 & 1) != 0)
          goto LABEL_35;
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v29);
        if ((v24 & 1) != 0)
          goto LABEL_35;
      }
      if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v14) != 1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
        if (v16 < 1)
          goto LABEL_28;
LABEL_38:
        v32 = 0;
        v33 = v58 + v30 * v18;
        v34 = v57 + v31 * v18;
        while (2)
        {
          if (v20
            || (v35 = *(_QWORD *)(v4 + 16), v36 = v35 - 3, v35 < 3)
            || v36 > (int)v35 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v36) == 1)
          {
            v37 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_45;
            goto LABEL_46;
          }
          v37 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v36);
          if ((v25 & 1) != 0)
            goto LABEL_46;
LABEL_45:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v11) == 1)
          {
LABEL_46:
            v38 = 0;
            if (v12 >= 1)
              break;
            goto LABEL_39;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
          if (v12 < 1)
          {
LABEL_39:
            if (++v32 == v16)
              goto LABEL_28;
            continue;
          }
          break;
        }
        v39 = 0;
        v40 = v33 + v37 * v32;
        v41 = v34 + v38 * v32;
        while (2)
        {
          if (v20
            || (v42 = *(_QWORD *)(v4 + 16), v43 = v42 - 2, v42 < 2)
            || v43 > (int)v42 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v43) == 1)
          {
            v44 = 0;
            if ((v26 & 1) == 0)
              goto LABEL_56;
            goto LABEL_57;
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v43);
          if ((v26 & 1) != 0)
            goto LABEL_57;
LABEL_56:
          if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v10) == 1)
          {
LABEL_57:
            v45 = 0;
            if (v9 >= 1)
              break;
            goto LABEL_50;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
          if (v9 < 1)
          {
LABEL_50:
            if (++v39 == v12)
              goto LABEL_39;
            continue;
          }
          break;
        }
        v46 = 0;
        v47 = v40 + v44 * v39;
        v48 = *(_QWORD *)(v4 + 40);
        v49 = *(_QWORD *)(v5 + 40);
        v50 = v41 + v45 * v39;
        while (2)
        {
          if (v20
            || (v55 = *(_QWORD *)(v4 + 16), v56 = v55 - 1, v55 < 1)
            || v56 > (int)v55 - 1
            || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v56) == 1)
          {
            v54 = 0;
            if ((v27 & 1) == 0)
              goto LABEL_69;
          }
          else
          {
            v54 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
            if ((v27 & 1) == 0)
            {
LABEL_69:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) != 1)
              {
                v51 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
LABEL_62:
                v52 = v50 + v51 * v46;
                v53 = *(unsigned __int16 *)(v47 + v54 * v46 + v48);
                if (COERCE_FLOAT(v53 << 16) > 0.0)
                  v53 = 0;
                if (COERCE_FLOAT(v53 << 16) <= 0.0)
                  LOWORD(v53) = 0;
                *(_WORD *)(v52 + v49) = v53;
                if (v9 == ++v46)
                  goto LABEL_50;
                continue;
              }
            }
          }
          break;
        }
        v51 = 0;
        goto LABEL_62;
      }
LABEL_35:
      v31 = 0;
      if (v16 >= 1)
        goto LABEL_38;
LABEL_28:
      ++v18;
      v14 = (uint64_t)result;
      if (v18 == v59)
        return result;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v16 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v15 = 0;
    v11 = 0;
    v13 = 0;
    v59 = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  v59 = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (v59 >= 1)
  {
    v15 = 0;
    v13 = 0;
    v17 = 0;
    goto LABEL_8;
  }
  return result;
}

void mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)14>(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = **a2;
  v5 = **a4;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = v6 - 1;
  if (v6 <= 0)
  {
    v10 = v6 - 2;
    v9 = 1;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v6 == 1)
  {
    v10 = -1;
LABEL_5:
    v11 = v6 - 3;
    v12 = 1;
    v13 = 1;
LABEL_6:
    v14 = v6 - 4;
    v15 = 1;
    v16 = 1;
    v17 = 1;
LABEL_7:
    v18 = 1;
LABEL_8:
    v19 = 0;
    v20 = v6 < 1;
    v21 = v6 - 1;
    if (*(_BYTE *)(v4 + 49))
      v18 = 1;
    v22 = v21;
    if (*(_BYTE *)(v4 + 49))
    {
      v16 = 1;
      v23 = 1;
    }
    else
    {
      v23 = v13;
    }
    if (*(_BYTE *)(v4 + 49))
      v20 = 1;
    if (v14 > v21)
      v24 = 1;
    else
      v24 = v18;
    if (v11 > v22)
      v25 = 1;
    else
      v25 = v16;
    if (v10 > v22)
      v26 = 1;
    else
      v26 = v23;
    v27 = v7 > v22 || v20;
    while ((v24 & 1) != 0 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v14) == 1)
    {
      v28 = 0;
      if (v17 >= 1)
        goto LABEL_33;
LABEL_27:
      if (++v19 == v15)
        return;
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    if (v17 < 1)
      goto LABEL_27;
LABEL_33:
    v29 = 0;
    v30 = v5 + v28 * v19;
    while ((v25 & 1) != 0 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v11) == 1)
    {
      v31 = 0;
      if (v12 >= 1)
        goto LABEL_40;
LABEL_34:
      if (++v29 == v17)
        goto LABEL_27;
    }
    v31 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v11);
    if (v12 < 1)
      goto LABEL_34;
LABEL_40:
    v32 = 0;
    v33 = v30 + v31 * v29;
    while (1)
    {
      if ((v26 & 1) != 0 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v10) == 1)
      {
        v34 = 0;
        if (v9 >= 1)
          goto LABEL_47;
      }
      else
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v10);
        if (v9 >= 1)
        {
LABEL_47:
          v35 = 0;
          v36 = v33 + v34 * v32;
          v37 = *(_QWORD *)(v4 + 40);
          do
          {
            if ((v27 & 1) != 0 || *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v7) == 1)
              v38 = 0;
            else
              v38 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v7);
            *(_WORD *)(v36 + v38 * v35++ + v37) = 0;
          }
          while (v9 != v35);
        }
      }
      if (++v32 == v12)
        goto LABEL_34;
    }
  }
  v10 = v6 - 2;
  v12 = *(_QWORD *)(v8 + 8 * (v6 - 2));
  if ((unint64_t)v6 <= 2)
  {
    v10 = 0;
    v13 = 0;
    v11 = -1;
    goto LABEL_6;
  }
  v11 = v6 - 3;
  v17 = *(_QWORD *)(v8 + 8 * (v6 - 3));
  if (v6 == 3)
  {
    v16 = 0;
    v11 = 0;
    v13 = 0;
    v15 = 1;
    v14 = -1;
    v10 = 1;
    goto LABEL_7;
  }
  v14 = v6 - 4;
  v15 = *(_QWORD *)(v8 + 8 * (v6 - 4));
  if (v15 >= 1)
  {
    v16 = 0;
    v13 = 0;
    v18 = 0;
    goto LABEL_8;
  }
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return putchar(10);
}

llvm::raw_ostream *OUTLINED_FUNCTION_1()
{
  mlir::Type *v0;

  return mlir::Type::dump(v0);
}

size_t support::emitVarInt(support *this, unint64_t a2)
{
  _BYTE *v4;
  size_t v5;
  _BYTE *v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (a2 <= 0x7F)
  {
    v4 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v4 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, (2 * a2) | 1);
    }
    else
    {
      *((_QWORD *)this + 4) = v4 + 1;
      *v4 = (2 * a2) | 1;
    }
    return 1;
  }
  if (!(a2 >> 14))
  {
    v5 = 2;
LABEL_25:
    v8[0] = ((2 * a2) | 1) << (v5 - 1);
    llvm::raw_ostream::write(this, (const char *)v8, v5);
    return v5;
  }
  if (a2 < 0x200000)
  {
    v5 = 3;
    goto LABEL_25;
  }
  if (!(a2 >> 28))
  {
    v5 = 4;
    goto LABEL_25;
  }
  if (!(a2 >> 35))
  {
    v5 = 5;
    goto LABEL_25;
  }
  if (!(a2 >> 42))
  {
    v5 = 6;
    goto LABEL_25;
  }
  if (!(a2 >> 49))
  {
    v5 = 7;
    goto LABEL_25;
  }
  if (!HIBYTE(a2))
  {
    v5 = 8;
    goto LABEL_25;
  }
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v6 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 0);
  }
  else
  {
    *((_QWORD *)this + 4) = v6 + 1;
    *v6 = 0;
  }
  v8[0] = a2;
  llvm::raw_ostream::write(this, (const char *)v8, 8uLL);
  return 9;
}

unint64_t support::`anonymous namespace'::parseMultiByteVarInt(const void **this, unint64_t a2)
{
  unsigned __int8 v2;
  size_t v4;
  char *v5;
  unsigned int __dst;
  unsigned __int16 v8;
  unsigned __int8 v9;

  v2 = a2;
  v4 = __clz(__rbit32(a2));
  v9 = HIBYTE(a2);
  v8 = HIDWORD(a2) >> 8;
  __dst = a2 >> 8;
  v5 = (char *)*this;
  memcpy(&__dst, *this, v4);
  *this = &v5[v4];
  return (((unint64_t)__dst << 8) | ((unint64_t)(v8 | (v9 << 16)) << 40) | v2) >> (v4 + 1);
}

uint64_t support::ResourceStorage::add(_BYTE *a1, _QWORD *a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  const std::error_category *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *tv_nsec;
  const unsigned __int8 *tv_sec;
  const std::error_category *v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  stat *v25;
  __darwin_ino64_t st_gid_high;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v31[4];
  __int16 v32;
  _BYTE v33[96];
  uint64_t v34;
  const std::error_category *v35;
  stat v36;

  v36.st_birthtimespec.tv_nsec = *MEMORY[0x1E0C80C00];
  if (a3[1])
  {
    LODWORD(v34) = 0;
    v35 = std::system_category();
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v33, a1, (uint64_t)a2, (uint64_t)&v34, 3, 2, 4);
    if ((_DWORD)v34)
    {
      if (a5)
        MEMORY[0x186DA1314](a5, "Failed to open resource file.", 29);
      v10 = 0;
LABEL_40:
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v33);
      return v10;
    }
    llvm::raw_fd_ostream::lock((llvm::raw_fd_ostream *)v33, (uint64_t)&v36.st_ctimespec.tv_nsec);
    if ((v36.st_birthtimespec.tv_sec & 1) != 0)
    {
      tv_nsec = (_QWORD *)v36.st_ctimespec.tv_nsec;
      v36.st_ctimespec.tv_nsec = 0;
      v31[0] = tv_nsec;
      llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(v31, (uint64_t *)&v36.st_dev);
      if (v31[0])
        (*(void (**)(_QWORD *))(*v31[0] + 8))(v31[0]);
      if (a5)
      {
        v13 = "Failed to lock resource file.";
        v14 = a5;
        v15 = 29;
        goto LABEL_19;
      }
    }
    else
    {
      v32 = 261;
      v31[0] = a1;
      v31[1] = a2;
      memset(&v36, 0, 44);
      *(uint64_t *)((char *)&v36.st_atimespec.tv_nsec + 4) = 0xFFFFLL;
      WORD2(v36.st_mtimespec.tv_sec) = 0;
      v36.st_mtimespec.tv_nsec = 0;
      v11 = llvm::sys::fs::status((llvm::sys::fs *)v31, &v36, (llvm::sys::fs::file_status *)1);
      if (!(_DWORD)v11)
      {
        tv_sec = (const unsigned __int8 *)v36.st_atimespec.tv_sec;
        v18 = std::system_category();
        v34 = 0;
        v35 = v18;
        v19 = a3[1];
        if (v19)
        {
          v20 = *a3;
          v21 = 48 * (_QWORD)v19;
          do
          {
            if (*((char *)v20 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v36, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
            }
            else
            {
              v22 = *v20;
              *(_QWORD *)&v36.st_uid = *((_QWORD *)v20 + 2);
              *(_OWORD *)&v36.st_dev = v22;
            }
            v23 = *(__int128 *)((char *)v20 + 24);
            v36.st_atimespec.tv_nsec = *((_QWORD *)v20 + 5);
            *(_OWORD *)&v36.st_rdev = v23;
            v24 = v23;
            if ((v36.st_gid & 0x80000000) == 0)
              v25 = &v36;
            else
              v25 = *(stat **)&v36.st_dev;
            if ((v36.st_gid & 0x80000000) == 0)
              st_gid_high = HIBYTE(v36.st_gid);
            else
              st_gid_high = v36.st_ino;
            (*llvm::StringMap<support::ResourceStorage::ResourceReadInfo,llvm::MallocAllocator>::try_emplace<>(a4, (int8x16_t *)v25, (const unsigned __int8 *)st_gid_high))[1] = tv_sec;
            v27 = support::emitVarInt((support *)v33, *((unint64_t *)&v24 + 1));
            v28 = support::emitVarInt((support *)v33, v36.st_atimespec.tv_nsec);
            llvm::raw_ostream::write((llvm::raw_ostream *)v33, (const char *)v24, *((size_t *)&v24 + 1));
            if (SHIBYTE(v36.st_gid) < 0)
              operator delete(*(void **)&v36.st_dev);
            tv_sec += *((_QWORD *)&v24 + 1) + v27 + v28;
            v20 += 3;
            v21 -= 48;
          }
          while (v21);
        }
        v10 = 1;
        if ((v36.st_birthtimespec.tv_sec & 1) == 0)
          goto LABEL_21;
        goto LABEL_38;
      }
      v34 = v11;
      v35 = v12;
      if (a5)
      {
        v13 = "Failed to get the file size.";
        v14 = a5;
        v15 = 28;
LABEL_19:
        MEMORY[0x186DA1314](v14, v13, v15);
      }
    }
    v10 = 0;
    if ((v36.st_birthtimespec.tv_sec & 1) == 0)
    {
LABEL_21:
      if (LODWORD(v36.st_ctimespec.tv_nsec) != -1)
        llvm::sys::fs::unlockFile((llvm::sys::fs *)LODWORD(v36.st_ctimespec.tv_nsec));
      goto LABEL_40;
    }
LABEL_38:
    v29 = v36.st_ctimespec.tv_nsec;
    v36.st_ctimespec.tv_nsec = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    goto LABEL_40;
  }
  if (a5)
    MEMORY[0x186DA1314](a5, "No resources to write.", 22);
  return 0;
}

uint64_t support::ResourceStorage::read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, size_t, unint64_t), uint64_t a5, uint64_t a6)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t ***i;
  BOOL v19;
  uint64_t ***v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  char v41;
  size_t v42;
  unint64_t v43;
  const void *v44;
  unint64_t v45;
  void *v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v53;
  int v54[3];
  uint64_t *v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a3 + 12))
  {
    if (a6)
    {
      v10 = "No resources to read.";
      v11 = a6;
      v12 = 21;
      goto LABEL_7;
    }
    return 0;
  }
  std::system_category();
  v57 = 261;
  *(_QWORD *)&v54[1] = a1;
  v55 = a2;
  if (llvm::sys::fs::openFile((unsigned __int8 *)&v54[1], v54, 2, 1, 0, 438)
    || llvm::sys::fs::lockFile((llvm::sys::fs *)v54[0], 0))
  {
    if (a6)
    {
      v10 = "Failed to open resource file.";
      v11 = a6;
      v12 = 29;
LABEL_7:
      MEMORY[0x186DA1314](v11, v10, v12);
      return 0;
    }
    return 0;
  }
  v57 = 261;
  *(_QWORD *)&v54[1] = a1;
  v55 = a2;
  llvm::MemoryBuffer::getOpenFile((llvm::sys::fs *)v54[0], (llvm::sys::fs::file_status *)&v54[1], 0xFFFFFFFFFFFFFFFFLL, 1, 0, 0, (uint64_t)&v58);
  if ((v59 & 1) == 0)
  {
    std::system_category();
    v15 = v58;
    goto LABEL_18;
  }
  v15 = v58;
  if (!(_DWORD)v58)
  {
LABEL_18:
    v58 = 0;
    v55 = 0;
    v56 = 0;
    *(_QWORD *)&v54[1] = &v55;
    v16 = *(uint64_t ****)a3;
    v17 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v17)
    {
      for (i = *(uint64_t ****)a3; ; ++i)
      {
        v19 = !*i || *i + 1 == 0;
        if (!v19)
          break;
      }
    }
    else
    {
      i = *(uint64_t ****)a3;
    }
    v20 = &v16[v17];
    if (i != v20)
    {
      v50 = v15;
      v21 = *i;
      do
      {
        v22 = (uint64_t *)(v21 + 2);
        v23 = *v21;
        v26 = v21[1];
        v25 = (uint64_t *)(v21 + 1);
        v24 = v26;
        v27 = v55;
        v28 = &v55;
        v29 = &v55;
        if (v55)
        {
          while (1)
          {
            while (1)
            {
              v29 = (uint64_t **)v27;
              v30 = v27[4];
              if ((unint64_t)v24 >= v30)
                break;
              v27 = *v29;
              v28 = v29;
              if (!*v29)
                goto LABEL_37;
            }
            if (v30 >= (unint64_t)v24)
              break;
            v27 = v29[1];
            if (!v27)
            {
              v28 = v29 + 1;
              goto LABEL_37;
            }
          }
        }
        else
        {
LABEL_37:
          v31 = (uint64_t *)v29;
          v29 = (uint64_t **)operator new(0x40uLL);
          v29[4] = v24;
          v29[5] = 0;
          v29[6] = 0;
          v29[7] = 0;
          *v29 = 0;
          v29[1] = 0;
          v29[2] = v31;
          *v28 = (uint64_t *)v29;
          v32 = (uint64_t *)v29;
          if (**(_QWORD **)&v54[1])
          {
            *(_QWORD *)&v54[1] = **(_QWORD **)&v54[1];
            v32 = *v28;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v55, v32);
          ++v56;
        }
        v29[5] = v22;
        v29[6] = v23;
        ++i;
        v29[7] = v25;
        while (1)
        {
          v21 = *i;
          if (*i && v21 + 1 != 0)
            break;
          ++i;
        }
      }
      while (i != v20);
      v34 = *(uint64_t **)&v54[1];
      if (*(uint64_t ***)&v54[1] == &v55)
      {
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v54[1], v55);
        v15 = v50;
        goto LABEL_69;
      }
      v15 = v50;
      v35 = *(_QWORD *)(v50 + 8);
      do
      {
        v36 = v34[5];
        v37 = v34[6];
        v38 = (unsigned __int8 *)(v35 + v34[4]);
        v41 = *v38;
        v40 = v38 + 1;
        v39 = *v38;
        v53 = v38 + 1;
        if ((v41 & 1) != 0)
        {
          v42 = v39 >> 1;
        }
        else if ((_DWORD)v39)
        {
          v40 = v53;
        }
        else
        {
          v42 = *(_QWORD *)(v38 + 1);
          v40 = v38 + 9;
        }
        v44 = v40 + 1;
        v43 = *v40;
        v53 = v40 + 1;
        if ((v43 & 1) != 0)
        {
          v45 = v43 >> 1;
        }
        else if ((_DWORD)v43)
        {
          v44 = v53;
        }
        else
        {
          v45 = *(_QWORD *)(v40 + 1);
          v44 = v40 + 9;
        }
        v46 = (void *)a4(a5, v36, v37, v42, v45);
        memcpy(v46, v44, v42);
        v47 = (uint64_t *)v34[1];
        if (v47)
        {
          do
          {
            v48 = (uint64_t **)v47;
            v47 = (uint64_t *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            v48 = (uint64_t **)v34[2];
            v19 = *v48 == v34;
            v34 = (uint64_t *)v48;
          }
          while (!v19);
        }
        v34 = (uint64_t *)v48;
      }
      while (v48 != &v55);
    }
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v54[1], v55);
    if (!v15)
    {
LABEL_70:
      v13 = 1;
      if ((v59 & 1) != 0)
        return v13;
      goto LABEL_71;
    }
LABEL_69:
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    goto LABEL_70;
  }
  if (a6)
    MEMORY[0x186DA1314](a6, "Failed to read resource file.", 29);
  v13 = 0;
  if ((v59 & 1) == 0)
  {
LABEL_71:
    v49 = v58;
    v58 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  }
  return v13;
}

const unsigned __int8 ***llvm::StringMap<support::ResourceStorage::ResourceReadInfo,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  const unsigned __int8 ***i;
  const unsigned __int8 **v8;
  const unsigned __int8 **v9;
  _QWORD *buffer;
  const unsigned __int8 **v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (const unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (const unsigned __int8 **)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (const unsigned __int8 **)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
  v11 = (const unsigned __int8 **)buffer;
  v12 = (char *)(buffer + 2);
  if (a3)
    memcpy(buffer + 2, a2, (size_t)a3);
  a3[(_QWORD)v12] = 0;
  *v11 = a3;
  v11[1] = 0;
  *i = v11;
  ++*(_DWORD *)(a1 + 12);
  for (i = (const unsigned __int8 ***)(*(_QWORD *)a1
                                      + 8
                                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t mlir::ShapeEquivalence::ShapeEquivalence(uint64_t a1, mlir::ForwardIterator *a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  if (a2)
  {
    v4 = a1;
    mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ShapeEquivalence::compute(mlir::FunctionOpInterface)::$_0>, (uint64_t)&v4, 1);
  }
  return a1;
}

uint64_t mlir::ShapeEquivalence::makeEquivalent(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t result;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  char v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21[2];
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  v19 = a3;
  v20 = a2;
  v4 = (uint64_t *)(a1 + 208);
  v21[0] = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 208), &v19, v21);
  if ((result & 1) == 0)
  {
    v21[0] = 0;
    v6 = v21;
    if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v4, &v20, v21)|| v21[0] == (void *)(*(_QWORD *)(a1 + 208) + 16 * *(unsigned int *)(a1 + 224)))
    {
      v21[0] = v22;
      v22[0] = v20;
      v21[1] = (void *)0x400000001;
      v7 = *(unsigned int *)(a1 + 8);
      v9 = *(_QWORD *)a1;
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        v17 = v7 + 1;
        if (v9 <= (unint64_t)v21 && v9 + 48 * v7 > (unint64_t)v21)
        {
          v18 = (char *)v21 - v9;
          llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::Value,4u>,false>::grow(a1, v17);
          v9 = *(_QWORD *)a1;
          v6 = (void **)&v18[*(_QWORD *)a1];
        }
        else
        {
          llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::Value,4u>,false>::grow(a1, v17);
          v9 = *(_QWORD *)a1;
          v6 = v21;
        }
      }
      v10 = (_QWORD *)(v9 + 48 * *(unsigned int *)(a1 + 8));
      *v10 = v10 + 2;
      v10[1] = 0x400000000;
      if (*((_DWORD *)v6 + 2))
        llvm::SmallVectorImpl<mlir::Value>::operator=((uint64_t)v10, (uint64_t)v6);
      v11 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v11;
      if (v21[0] != v22)
      {
        free(v21[0]);
        v11 = *(_DWORD *)(a1 + 8);
      }
      v8 = *(_QWORD *)a1 + 48 * v11 - 48;
      v21[0] = 0;
      v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v4, &v20, v21);
      v13 = v21[0];
      if ((v12 & 1) == 0)
      {
        v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned long long,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned long long>>,mlir::Value,unsigned long long,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned long long>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v4, (uint64_t)&v20, &v20, (_QWORD *)v21[0]);
        *v13 = v20;
        v13[1] = 0;
      }
      v13[1] = v7;
    }
    else
    {
      v7 = *((_QWORD *)v21[0] + 1);
      v8 = *(_QWORD *)a1 + 48 * v7;
    }
    v14 = v19;
    v15 = *(unsigned int *)(v8 + 8);
    if (v15 >= *(_DWORD *)(v8 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v15) = v14;
    ++*(_DWORD *)(v8 + 8);
    v21[0] = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v4, &v19, v21);
    v16 = v21[0];
    if ((result & 1) == 0)
    {
      result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned long long,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned long long>>,mlir::Value,unsigned long long,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned long long>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v4, (uint64_t)&v19, &v19, (_QWORD *)v21[0]);
      v16 = (_QWORD *)result;
      *(_QWORD *)result = v19;
      *(_QWORD *)(result + 8) = 0;
    }
    v16[1] = v7;
  }
  return result;
}

uint64_t mlir::ShapeEquivalence::getSet(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 208), &v7, &v8))
  {
    v3 = v8;
    v4 = *(_QWORD *)(a1 + 208);
    v5 = *(unsigned int *)(a1 + 224);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 208);
    v5 = *(unsigned int *)(a1 + 224);
    v3 = v4 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(_QWORD *)a1 + 48 * *(_QWORD *)(v3 + 8);
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ShapeEquivalence::compute(mlir::FunctionOpInterface)::$_0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t InherentAttr;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *ArgAttrsAttr;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  __int128 *v54;
  char *v55;
  uint64_t v56;
  mlir::Block *v57;
  uint64_t ParentOp;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _QWORD v87[3];

  v87[2] = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    if (*(_DWORD *)(a2 + 68))
    {
      v4 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>>();
      if (((*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4) & 1) != 0
        || (v5 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>>(),
            (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v5)))
      {
        if (*(_DWORD *)(a2 + 36))
        {
          v6 = 0;
          do
          {
            v7 = a2 - 96 - 24 * (v6 - 5);
            v8 = v6 + 1;
            v9 = v6++ > 5;
            if (v9)
              v10 = v7;
            else
              v10 = a2 - 16 * v8;
            mlir::ShapeEquivalence::makeEquivalent(v3, *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24), v10);
          }
          while (v6 != *(_DWORD *)(a2 + 36));
        }
        return;
      }
    }
  }
  v11 = mlir::TypeID::get<mlir::OpTrait::ResultsBroadcastableShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ResultsBroadcastableShape>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v11))
  {
    v18 = *(void **)(*(_QWORD *)(a2 + 48) + 16);
    if (v18 != &mlir::detail::TypeIDResolver<mlir::mpsx::ReturnStitchedOp,void>::id)
    {
      if (v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::RMSNormOp,void>::id)
        mlir::ShapeEquivalence::makeEquivalent(v3, *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24), a2 - 16);
      return;
    }
    v56 = a2;
    while (1)
    {
      v57 = *(mlir::Block **)(v56 + 16);
      if (!v57)
        break;
      ParentOp = mlir::Block::getParentOp(v57);
      v56 = ParentOp;
      if (!ParentOp
        || *(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
      {
        goto LABEL_93;
      }
    }
    v56 = 0;
LABEL_93:
    v70 = 0;
    if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
      goto LABEL_99;
    while (1)
    {
      if (v70 == *(_DWORD *)(a2 + 68))
        return;
      while (1)
      {
        v71 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * v70 + 24);
        v72 = v56 - 96 - 24 * (v70 - 5);
        v73 = v70 + 1;
        v9 = v70++ > 5;
        v74 = v9 ? v72 : v56 - 16 * v73;
        mlir::ShapeEquivalence::makeEquivalent(v3, v71, v74);
        if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
          break;
LABEL_99:
        if (!v70)
          return;
      }
    }
  }
  if (*(_BYTE *)(a2 + 47)
    && (InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"__no_dynamic_broadcast", 22), v13))
  {
    if (InherentAttr)
      goto LABEL_16;
  }
  else if (mlir::DictionaryAttr::contains(a2 + 56, "__no_dynamic_broadcast", 0x16uLL))
  {
LABEL_16:
    if (*(_DWORD *)(a2 + 36))
    {
      v14 = 0;
      do
      {
        v15 = a2 - 96 - 24 * (v14 - 5);
        v16 = v14 + 1;
        v9 = v14++ > 5;
        if (v9)
          v17 = v15;
        else
          v17 = a2 - 16 * v16;
        mlir::ShapeEquivalence::makeEquivalent(v3, *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24), v17);
      }
      while (v14 != *(_DWORD *)(a2 + 36));
    }
    return;
  }
  v19 = 0;
  v85 = v87;
  v86 = 0x100000000;
  v82 = &v84;
  v83 = 0x100000000;
  while (1)
  {
    v22 = (*(_BYTE *)(a2 + 46) & 0x80) != 0 ? *(_DWORD *)(a2 + 68) : 0;
    if (v19 == v22 || v83 >= 2)
      break;
    v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * v19 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v23)
      goto LABEL_46;
    v24 = *v23;
    v25 = mlir::TypeID::get<mlir::ShapedType>();
    v26 = *(unsigned int *)(v24 + 16);
    if (!(_DWORD)v26)
      goto LABEL_46;
    v27 = *(_QWORD **)(v24 + 8);
    v28 = &v27[2 * v26];
    do
    {
      v29 = v26 >> 1;
      v30 = &v27[2 * (v26 >> 1)];
      v32 = *v30;
      v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25)
        v27 = v31;
      else
        v26 = v29;
    }
    while (v26);
    if (v27 != v28 && *v27 == v25)
      v33 = v27[1];
    else
LABEL_46:
      v33 = 0;
    *(_QWORD *)&v81 = v23;
    *((_QWORD *)&v81 + 1) = v33;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v81))
      goto LABEL_28;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v81);
    if (v35)
    {
      v36 = 8 * v35;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v36 -= 8;
        if (!v36)
          goto LABEL_52;
      }
LABEL_28:
      v20 = v83;
      if (v83 >= (unint64_t)HIDWORD(v83))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, &v84, v83 + 1, 4);
        v20 = v83;
      }
      *((_DWORD *)v82 + v20) = v19;
      v21 = &v83;
LABEL_31:
      ++*(_DWORD *)v21;
      goto LABEL_32;
    }
LABEL_52:
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v81)
      || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v81), v37))
    {
      v38 = v81;
      v39 = v86;
      if (v86 >= (unint64_t)HIDWORD(v86))
      {
        v79 = v81;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v87, v86 + 1, 16);
        v38 = v79;
        v39 = v86;
      }
      *((_OWORD *)v85 + v39) = v38;
      v21 = &v86;
      goto LABEL_31;
    }
LABEL_32:
    ++v19;
  }
  v40 = (uint64_t *)v82;
  if ((_DWORD)v83 != 1)
    goto LABEL_112;
  v41 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)v82 + 24);
  v42 = (uint64_t *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v42)
    goto LABEL_69;
  v43 = *v42;
  v44 = mlir::TypeID::get<mlir::ShapedType>();
  v45 = *(unsigned int *)(v43 + 16);
  if (!(_DWORD)v45)
    goto LABEL_69;
  v46 = *(_QWORD **)(v43 + 8);
  v47 = &v46[2 * v45];
  do
  {
    v48 = v45 >> 1;
    v49 = &v46[2 * (v45 >> 1)];
    v51 = *v49;
    v50 = v49 + 2;
    v45 += ~(v45 >> 1);
    if (v51 < v44)
      v46 = v50;
    else
      v45 = v48;
  }
  while (v45);
  if (v46 != v47 && *v46 == v44)
    v52 = v46[1];
  else
LABEL_69:
    v52 = 0;
  *(_QWORD *)&v81 = v42;
  *((_QWORD *)&v81 + 1) = v52;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v81))
  {
    if ((_DWORD)v86)
      goto LABEL_111;
    goto LABEL_105;
  }
  if (!(_DWORD)v86)
  {
LABEL_105:
    if (*(_DWORD *)(a2 + 36))
    {
      v75 = 0;
      do
      {
        v76 = a2 - 96 - 24 * (v75 - 5);
        v77 = v75 + 1;
        v9 = v75++ > 5;
        if (v9)
          v78 = v76;
        else
          v78 = a2 - 16 * v77;
        mlir::ShapeEquivalence::makeEquivalent(v3, v41, v78);
      }
      while (v75 != *(_DWORD *)(a2 + 36));
    }
    goto LABEL_111;
  }
  v53 = 0;
  v54 = (__int128 *)v85;
  v55 = (char *)v85 + 16 * v86;
  while (1)
  {
    v80 = *v54;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
    v60 = v59;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v81);
    if (v60 > v61)
      break;
    v62 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
    if (v63)
    {
      v64 = v62;
      v65 = 0;
      for (i = 8 * v63; i; i -= 8)
      {
        v68 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v81)
                        + 8 * v65);
        v69 = *(_QWORD *)(v64 + 8 * v65);
        if (v68 == 0x8000000000000000)
        {
          if (v69 != 1)
            goto LABEL_78;
        }
        else if (v69 != v68 && v69 != 1)
        {
LABEL_78:
          v53 = 1;
          break;
        }
        ++v65;
      }
    }
    if (++v54 == (__int128 *)v55)
    {
      if ((v53 & 1) != 0)
        break;
      goto LABEL_105;
    }
  }
LABEL_111:
  v40 = (uint64_t *)v82;
LABEL_112:
  if (v40 != &v84)
    free(v40);
  if (v85 != v87)
    free(v85);
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::Value,4u>,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 48, &v14);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = 48 * v7;
    v9 = v4;
    do
    {
      *v9 = v9 + 2;
      v9[1] = 0x400000000;
      if (v6[2])
        llvm::SmallVectorImpl<mlir::Value>::operator=((uint64_t)v9, (uint64_t)v6);
      v9 += 6;
      v6 += 12;
      v8 -= 48;
    }
    while (v8);
    v6 = *(_DWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        v12 = *(_DWORD **)&v6[v11 - 12];
        if (&v6[v11 - 8] != v12)
          free(v12);
        v11 -= 12;
      }
      while (v11 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t mlir::getBroadcastIndices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void **v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD v65[2];
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _BYTE v69[32];
  void *v70;
  uint64_t v71;
  _QWORD v72[5];

  v72[4] = *MEMORY[0x1E0C80C00];
  v65[0] = a1;
  v65[1] = a2;
  v64[0] = a3;
  v64[1] = a4;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
  if (!v6)
    return 1;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  if (!v7)
    return 1;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
  v9 = v8;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  if (v9 == 1)
  {
    if (v11)
    {
      v12 = ArgAttrsAttr;
      v13 = 0;
      v14 = 0;
      v15 = 8 * v11;
      do
      {
        if ((v13 & 1) == 0
          && (v16 = *(_QWORD *)(v12 + 8 * (_QWORD)v14),
              v16 == *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65)))
        {
          v13 = 1;
        }
        else
        {
          v70 = v14;
          v17 = *(unsigned int *)(a5 + 8);
          if (v17 >= *(_DWORD *)(a5 + 12))
          {
            llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>(a5, (uint64_t *)&v70);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a5 + 8 * v17) = v14;
            *(_DWORD *)(a5 + 8) = v17 + 1;
          }
        }
        v14 = (char *)v14 + 1;
        v15 -= 8;
      }
      while (v15);
    }
    return 1;
  }
  if (v11 == 1)
  {
    v18 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
    if (v19)
    {
      v20 = v18;
      v21 = 0;
      v22 = 0;
      v23 = 8 * v19;
      do
      {
        if ((v21 & 1) == 0
          && (v24 = *(_QWORD *)(v20 + 8 * (_QWORD)v22),
              v24 == *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64)))
        {
          v21 = 1;
        }
        else
        {
          v70 = v22;
          v25 = *(unsigned int *)(a5 + 8);
          if (v25 >= *(_DWORD *)(a5 + 12))
          {
            llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>(a5, (uint64_t *)&v70);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v22;
            *(_DWORD *)(a5 + 8) = v25 + 1;
          }
        }
        v22 = (char *)v22 + 1;
        v23 -= 8;
      }
      while (v23);
    }
    return 1;
  }
  v28 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
  v29 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
  v31 = (_BYTE *)(v29 + 8 * v30);
  v70 = v72;
  v71 = 0x400000000;
  v32 = v31 - v28;
  if ((unint64_t)(v31 - v28) < 0x21)
  {
    v33 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v32 >> 3, 8);
    v33 = v71;
  }
  if (v31 != v28)
  {
    memcpy((char *)v70 + 8 * v33, v28, v31 - v28);
    v33 = v71;
  }
  LODWORD(v71) = v33 + ((unint64_t)v32 >> 3);
  v34 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  v35 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  v37 = (_BYTE *)(v35 + 8 * v36);
  v67 = v69;
  v68 = 0x400000000;
  v38 = v37 - v34;
  if ((unint64_t)(v37 - v34) < 0x21)
  {
    v39 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, v38 >> 3, 8);
    v39 = v68;
  }
  if (v37 != v34)
  {
    memcpy((char *)v67 + 8 * v39, v34, v37 - v34);
    v39 = v68;
  }
  LODWORD(v68) = v39 + ((unint64_t)v38 >> 3);
  v40 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
  v42 = v41;
  v43 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  v45 = v42 == 0;
  if (v42 | v44)
  {
    v46 = v43;
    v47 = v43 + 8 * v44;
    v48 = v40 + 8 * v42;
    do
    {
      if (v45)
      {
        if (v47 != v46)
        {
          v49 = v70;
          v66 = 1;
          v50 = &v70;
LABEL_42:
          llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)v50, (uint64_t)v49, &v66);
        }
      }
      else if (v47 == v46)
      {
        v49 = v67;
        v66 = 1;
        v50 = &v67;
        goto LABEL_42;
      }
      if (v45)
        v48 = v40;
      else
        v48 -= 8;
      if (v47 == v46)
        v47 = v46;
      else
        v47 -= 8;
      v45 = v48 == v40;
    }
    while (v48 != v40 || v47 != v46);
  }
  v51 = mlir::OpTrait::util::staticallyKnownBroadcastable(v70, v71, (char *)v67, v68);
  v52 = v67;
  if ((v51 & 1) == 0)
  {
    v26 = 0;
    goto LABEL_68;
  }
  v26 = 1;
  if (!(_DWORD)v71 || !(_DWORD)v68)
  {
LABEL_68:
    if (v67 == v69)
      goto LABEL_70;
    goto LABEL_69;
  }
  v53 = 0;
  v54 = v70;
  v55 = 8 * v71 - 8;
  v56 = 8 * v68 - 8;
  do
  {
    v57 = v54[v53];
    v58 = v52[v53];
    if (v57 != v58 && (v57 == 1 || v58 == 1))
    {
      v60 = *(unsigned int *)(a5 + 8);
      if (v60 >= *(unsigned int *)(a5 + 12))
      {
        v62 = v52;
        v63 = v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v60 + 1, 8);
        v55 = v63;
        v52 = v62;
        v60 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v60) = v53;
      ++*(_DWORD *)(a5 + 8);
    }
    if (!v55)
      break;
    ++v53;
    v55 -= 8;
    v61 = v56;
    v56 -= 8;
  }
  while (v61);
  v26 = 1;
  v52 = v67;
  if (v67 == v69)
    goto LABEL_70;
LABEL_69:
  free(v52);
LABEL_70:
  if (v70 != v72)
    free(v70);
  return v26;
}

uint64_t mlir::getPositiveAxis(uint64_t this, uint64_t a2)
{
  return (a2 & (this >> 63)) + this;
}

uint64_t mlir::getNegativeAxis(mlir *this, uint64_t a2)
{
  uint64_t v2;

  if ((uint64_t)this >= 0)
    v2 = a2;
  else
    v2 = 0;
  return (uint64_t)this - v2;
}

unint64_t mlir::tryGetPositiveAxis(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  const void **v30[4];
  __int16 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD v40[20];

  v40[19] = *MEMORY[0x1E0C80C00];
  v32 = a1;
  v7 = -a2;
  if (-a2 > a1 || a2 <= a1)
  {
    if (a5)
    {
      v30[0] = (const void **)"invalid axis ";
      v31 = 259;
      mlir::Operation::emitOpError(a5, v30, (uint64_t)&v35);
      if (v35)
      {
        v33 = 2;
        v34 = a1;
        v9 = &v33;
        v10 = v37;
        if (v38 >= v39)
        {
          v24 = v38 + 1;
          if (v37 <= (unint64_t)&v33 && v37 + 24 * v38 > (unint64_t)&v33)
          {
            v27 = (char *)&v33 - v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v24, 24);
            v10 = v37;
            v9 = (int *)&v27[v37];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v24, 24);
            v9 = &v33;
            v10 = v37;
          }
        }
        v11 = v10 + 24 * v38;
        v12 = *(_OWORD *)v9;
        *(_QWORD *)(v11 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v11 = v12;
        ++v38;
        if (v35)
        {
          mlir::Diagnostic::operator<<((uint64_t)v36, " is outside of the range [");
          if (v35)
          {
            v33 = 2;
            v34 = v7;
            v13 = &v33;
            v14 = v37;
            if (v38 >= v39)
            {
              v25 = v38 + 1;
              if (v37 <= (unint64_t)&v33 && v37 + 24 * v38 > (unint64_t)&v33)
              {
                v28 = (char *)&v33 - v37;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v25, 24);
                v14 = v37;
                v13 = (int *)&v28[v37];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v25, 24);
                v13 = &v33;
                v14 = v37;
              }
            }
            v15 = v14 + 24 * v38;
            v16 = *(_OWORD *)v13;
            *(_QWORD *)(v15 + 16) = *((_QWORD *)v13 + 2);
            *(_OWORD *)v15 = v16;
            ++v38;
            if (v35)
            {
              mlir::Diagnostic::operator<<((uint64_t)v36, ", ");
              if (v35)
              {
                v33 = 2;
                v34 = a2 - 1;
                v17 = &v33;
                v18 = v37;
                if (v38 >= v39)
                {
                  v26 = v38 + 1;
                  if (v37 <= (unint64_t)&v33 && v37 + 24 * v38 > (unint64_t)&v33)
                  {
                    v29 = (char *)&v33 - v37;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v26, 24);
                    v18 = v37;
                    v17 = (int *)&v29[v37];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v26, 24);
                    v17 = &v33;
                    v18 = v37;
                  }
                }
                v19 = v18 + 24 * v38;
                v20 = *(_OWORD *)v17;
                *(_QWORD *)(v19 + 16) = *((_QWORD *)v17 + 2);
                *(_OWORD *)v19 = v20;
                ++v38;
                if (v35)
                {
                  mlir::Diagnostic::operator<<((uint64_t)v36, "].");
                  if (v35)
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
                }
              }
            }
          }
        }
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v36);
    }
    else
    {
      v35 = -a2;
      v30[0] = (const void **)(a2 - 1);
      mlir::emitOptionalError<char const(&)[14],long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(a3, a4, "invalid axis ", &v32, " is outside of the range [", &v35, ", ", (uint64_t *)v30, "]");
    }
    v22 = 0;
    v21 = 0;
  }
  else
  {
    v21 = ((a2 & (a1 >> 63)) + a1) & 0xFFFFFFFFFFFFFF00;
    v22 = ((a2 & (a1 >> 63)) + a1);
  }
  return v21 | v22;
}

uint64_t mlir::emitOptionalError<char const(&)[14],long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6, char *a7, uint64_t *a8, char *a9)
{
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[24];

  v18[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v17);
  if (v17)
  {
    mlir::Diagnostic::operator<<((uint64_t)v18, a3);
    mlir::Diagnostic::append<long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>((uint64_t)v18, a4, a5, a6, a7, a8, a9);
  }
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
  if (v17)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
  return v15;
}

uint64_t mlir::getPositiveAxes(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char **v16;
  uint64_t v17;
  unint64_t PositiveAxis;
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  const char **v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  const char **v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  _BYTE v45[16];
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[152];
  char *v50;
  uint64_t v51;
  _QWORD v52[8];

  v52[6] = *MEMORY[0x1E0C80C00];
  v50 = (char *)v52;
  v51 = 0x600000000;
  if (a2)
  {
    v40 = (void *)(a4 + 16);
    v13 = 8 * a2;
    do
    {
      v17 = *a1;
      PositiveAxis = mlir::tryGetPositiveAxis(*a1, a3, 0, 0, a7);
      if (v19)
      {
        v14 = PositiveAxis;
        v15 = *(unsigned int *)(a4 + 8);
        if (v15 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v40, v15 + 1, 8);
          v15 = *(unsigned int *)(a4 + 8);
        }
        v16 = (char **)a4;
      }
      else
      {
        v15 = v51;
        v16 = &v50;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, v51 + 1, 8);
          v15 = v51;
        }
        v14 = v17;
      }
      *(_QWORD *)&(*v16)[8 * v15] = v14;
      ++*((_DWORD *)v16 + 2);
      ++a1;
      v13 -= 8;
    }
    while (v13);
    if ((_DWORD)v51)
    {
      if (a6)
      {
        v41 = "invalid axes: ";
        v43 = 259;
        mlir::emitError(a5, (uint64_t)&v41, (uint64_t)&v44);
        v20 = v51;
        if ((_DWORD)v51)
        {
          v21 = v50;
          if (v44)
          {
            v22 = *(_QWORD *)v50;
            LODWORD(v41) = 2;
            v42 = v22;
            v23 = &v41;
            v24 = v46;
            if (v47 >= v48)
            {
              v38 = v47 + 1;
              if (v46 <= (unint64_t)&v41 && v46 + 24 * v47 > (unint64_t)&v41)
              {
                v39 = (char *)&v41 - v46;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v38, 24);
                v24 = v46;
                v23 = (const char **)&v39[v46];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v38, 24);
                v23 = &v41;
                v24 = v46;
              }
            }
            v25 = v24 + 24 * v47;
            v26 = *(_OWORD *)v23;
            *(_QWORD *)(v25 + 16) = v23[2];
            *(_OWORD *)v25 = v26;
            ++v47;
          }
          if ((_DWORD)v20 != 1)
          {
            v29 = (uint64_t *)(v21 + 8);
            v30 = 8 * v20 - 8;
            do
            {
              if (v44)
              {
                mlir::Diagnostic::operator<<((uint64_t)v45, ", ");
                if (v44)
                {
                  v34 = *v29;
                  LODWORD(v41) = 2;
                  v42 = v34;
                  v35 = v46;
                  if (v47 < v48)
                  {
                    v31 = &v41;
                  }
                  else
                  {
                    v36 = v47 + 1;
                    if (v46 <= (unint64_t)&v41 && v46 + 24 * v47 > (unint64_t)&v41)
                    {
                      v37 = (char *)&v41 - v46;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v36, 24);
                      v35 = v46;
                      v31 = (const char **)&v37[v46];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v36, 24);
                      v31 = &v41;
                      v35 = v46;
                    }
                  }
                  v32 = v35 + 24 * v47;
                  v33 = *(_OWORD *)v31;
                  *(_QWORD *)(v32 + 16) = v31[2];
                  *(_OWORD *)v32 = v33;
                  ++v47;
                }
              }
              ++v29;
              v30 -= 8;
            }
            while (v30);
          }
        }
        v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
        if (v44)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v45);
      }
      else
      {
        v27 = 0;
      }
    }
    else
    {
      v27 = 1;
    }
  }
  else
  {
    v27 = 1;
  }
  if (v50 != (char *)v52)
    free(v50);
  return v27;
}

uint64_t mlir::getPositiveAxes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t PositiveAxes;
  uint64_t v15;
  uint64_t v16;
  void *ArgOperands;
  uint64_t v18;
  _QWORD v19[23];

  v19[22] = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v16 = a2;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v15);
  v18 = v12;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    ArgOperands = v19;
    v18 = 0x600000000;
    mlir::getIntValues<long long>(v15, v16, (uint64_t)&ArgOperands, 1);
    PositiveAxes = mlir::getPositiveAxes((uint64_t *)ArgOperands, v18, a3, a4, a5, a6, a7);
    if (ArgOperands != v19)
      free(ArgOperands);
  }
  else if (a6)
  {
    mlir::emitError(a5, (uint64_t)&ArgOperands);
    if (ArgOperands)
      mlir::Diagnostic::operator<<((uint64_t)&v18, "attribute is not integer type");
    PositiveAxes = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ArgOperands);
    if (ArgOperands)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ArgOperands);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v18);
  }
  else
  {
    return 0;
  }
  return PositiveAxes;
}

uint64_t mlir::getPositiveAxes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t DefiningOp;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[23];

  v22[22] = *MEMORY[0x1E0C80C00];
  v19 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v19);
  if (!DefiningOp)
    goto LABEL_10;
  v12 = DefiningOp;
  v13 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v12 + 48) + 32))(*(_QWORD *)(v12 + 48), v13))
    goto LABEL_10;
  v20 = v22;
  v21 = 0x100000000;
  mlir::Operation::fold(v12, 0, 0, (uint64_t)&v20);
  v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8));
  if (v15)
    v16 = v14;
  else
    v16 = 0;
  if (v20 != v22)
    free(v20);
  if (v15)
    return mlir::getPositiveAxes((uint64_t)v15, v16, a2, a3, a4, a5, a6);
LABEL_10:
  if (!a5)
    return 0;
  mlir::emitError(a4, (uint64_t)&v20);
  if (v20)
    mlir::Diagnostic::operator<<((uint64_t)&v21, "axes is not a constant");
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if (v20)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v21);
  return v17;
}

void llvm::SmallSet<long long,4u,std::less<long long>>::insert(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  if (!*(_QWORD *)(a1 + 64))
  {
    v15 = *(uint64_t ***)a1;
    v16 = *(unsigned int *)(a1 + 8);
    v17 = *a2;
    if (!(_DWORD)v16)
      goto LABEL_21;
    v18 = 8 * v16;
    v9 = *(uint64_t ***)a1;
    while (*v9 != v17)
    {
      ++v9;
      v18 -= 8;
      if (!v18)
        goto LABEL_20;
    }
    if (v18)
    {
      v19 = 0;
      v14 = 1;
      goto LABEL_25;
    }
LABEL_20:
    if (v16 <= 3)
    {
LABEL_21:
      if (v16 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v16 + 1, 8);
        v16 = *(unsigned int *)(a1 + 8);
        v15 = *(uint64_t ***)a1;
      }
      v15[v16] = v17;
      v20 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v20;
      v9 = (uint64_t **)(*(_QWORD *)a1 + 8 * v20 - 8);
      v14 = 1;
      goto LABEL_24;
    }
    v7 = (uint64_t **)(a1 + 56);
    do
    {
      v22 = *(uint64_t **)(a1 + 56);
      v23 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v16 - 8);
      v24 = (uint64_t **)(a1 + 56);
      v25 = (uint64_t **)(a1 + 56);
      if (v22)
      {
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v22;
            v26 = v22[4];
            if (v23 >= v26)
              break;
            v22 = *v25;
            v24 = v25;
            if (!*v25)
              goto LABEL_37;
          }
          if (v26 >= v23)
            break;
          v22 = v25[1];
          if (!v22)
          {
            v24 = v25 + 1;
            goto LABEL_37;
          }
        }
      }
      else
      {
LABEL_37:
        v27 = (uint64_t *)operator new(0x28uLL);
        v27[4] = v23;
        *v27 = 0;
        v27[1] = 0;
        v27[2] = (uint64_t)v25;
        *v24 = v27;
        v28 = **(_QWORD **)(a1 + 48);
        if (v28)
        {
          *(_QWORD *)(a1 + 48) = v28;
          v21 = *v24;
        }
        else
        {
          v21 = v27;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v21);
        ++*(_QWORD *)(a1 + 64);
        LODWORD(v16) = *(_DWORD *)(a1 + 8);
      }
      LODWORD(v16) = v16 - 1;
      *(_DWORD *)(a1 + 8) = v16;
    }
    while ((_DWORD)v16);
    v8 = *a2;
    v29 = *v7;
    v9 = (uint64_t **)(a1 + 56);
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v29;
          v30 = v29[4];
          if ((uint64_t)v8 >= v30)
            break;
          v29 = *v9;
          v7 = v9;
          if (!*v9)
            goto LABEL_9;
        }
        if (v30 >= (uint64_t)v8)
          break;
        v29 = v9[1];
        if (!v29)
        {
LABEL_8:
          v7 = v9 + 1;
          goto LABEL_9;
        }
      }
      v14 = 0;
      goto LABEL_24;
    }
LABEL_9:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x28uLL);
    v9[4] = v8;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 48);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 48) = v12;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v13);
    v14 = 0;
    ++*(_QWORD *)(a1 + 64);
LABEL_24:
    v19 = 1;
    goto LABEL_25;
  }
  v7 = (uint64_t **)(a1 + 56);
  v6 = *(uint64_t **)(a1 + 56);
  v8 = *a2;
  if (!v6)
  {
    v9 = (uint64_t **)(a1 + 56);
    goto LABEL_9;
  }
  while (1)
  {
    while (1)
    {
      v9 = (uint64_t **)v6;
      v10 = (uint64_t *)v6[4];
      if ((uint64_t)v8 >= (uint64_t)v10)
        break;
      v6 = *v9;
      v7 = v9;
      if (!*v9)
        goto LABEL_9;
    }
    if ((uint64_t)v10 >= (uint64_t)v8)
      break;
    v6 = v9[1];
    if (!v6)
      goto LABEL_8;
  }
  v14 = 0;
  v19 = 0;
LABEL_25:
  *(_BYTE *)(a3 + 8) = v14;
  *(_QWORD *)a3 = v9;
  *(_BYTE *)(a3 + 16) = v19;
}

uint64_t mlir::getPositivePromotedAxes(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  void *ArgOperands;
  uint64_t v22;
  _QWORD v23[23];

  v23[22] = *MEMORY[0x1E0C80C00];
  v19 = a1;
  v20 = a2;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19);
  v22 = v10;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    ArgOperands = v23;
    v22 = 0x600000000;
    mlir::getIntValues<long long>(v19, v20, (uint64_t)&ArgOperands, 1);
    if (mlir::getPositiveAxes((uint64_t *)ArgOperands, v22, a3, a4, a5, a6, 0))
    {
      v12 = *(unsigned int *)(a4 + 8);
      if ((_DWORD)v12)
      {
        v13 = *(uint64_t **)a4;
        v14 = 8 * v12;
        do
        {
          v15 = *v13;
          if (*v13 == 2)
            v16 = 3;
          else
            v16 = *v13;
          if (v15)
            v17 = 3;
          else
            v17 = 1;
          if (a3 == 2)
            v15 = v17;
          if (a3 == 3)
            v15 = v16;
          if (a3 < 2)
            v15 = 3;
          *v13++ = v15;
          v14 -= 8;
        }
        while (v14);
      }
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
    if (ArgOperands != v23)
      free(ArgOperands);
  }
  else if (a6)
  {
    mlir::emitError(a5, (uint64_t)&ArgOperands);
    if (ArgOperands)
      mlir::Diagnostic::operator<<((uint64_t)&v22, "attribute is not integer type");
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ArgOperands);
    if (ArgOperands)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ArgOperands);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v22);
  }
  else
  {
    return 0;
  }
  return v11;
}

uint64_t mlir::getPositivePromotedAxes(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!mlir::getPositiveAxes(a1, a2, a3, a4, a5, a6, 0))
    return 0;
  v8 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)a4;
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      if (*v9 == 2)
        v12 = 3;
      else
        v12 = *v9;
      if (v11)
        v13 = 3;
      else
        v13 = 1;
      if (a3 == 2)
        v11 = v13;
      if (a3 == 3)
        v11 = v12;
      if (a3 < 2)
        v11 = 3;
      *v9++ = v11;
      v10 -= 8;
    }
    while (v10);
  }
  return 1;
}

uint64_t mlir::getPositivePromotedAxes(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;

  if (!a1)
    goto LABEL_10;
  v10 = *a1;
  v11 = mlir::TypeID::get<mlir::ElementsAttr>();
  v12 = *(unsigned int *)(v10 + 16);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = *(_QWORD **)(v10 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  return mlir::getPositivePromotedAxes((uint64_t)a1, v19, a2, a3, a4, a5);
}

unint64_t mlir::getSortedUniquePromotedPositiveAxesAttr(_QWORD *a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t DefiningOp;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  __int128 *v40;
  _OWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t Context;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t *v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _BYTE v64[48];
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *v68;
  uint64_t v69;
  _QWORD v70[23];

  v70[22] = *MEMORY[0x1E0C80C00];
  v65 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v65);
  if (DefiningOp)
  {
    v9 = DefiningOp;
    v10 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 48) + 32))(*(_QWORD *)(v9 + 48), v10))
    {
      v68 = v70;
      v69 = 0x100000000;
      mlir::Operation::fold(v9, 0, 0, (uint64_t)&v68);
      v12 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8));
      if (v12)
        v13 = v11;
      else
        v13 = 0;
      if (v68 != v70)
        free(v68);
      if (v12)
      {
        v68 = v70;
        v69 = 0x600000000;
        if (!mlir::getPositiveAxes((uint64_t)v12, v13, a2, (uint64_t)&v68, a3, a4, 0))
        {
          v22 = 0;
          v23 = 0;
LABEL_71:
          if (v68 != v70)
            free(v68);
          return v23 & 0xFFFFFFFFFFFFFF00 | v22;
        }
        v65 = v67;
        v66 = 0x600000000;
        if (!mlir::getPositiveAxes((uint64_t *)v68, v69, a2, (uint64_t)&v65, a3, a4, 0))
        {
          v22 = 0;
          v23 = 0;
LABEL_69:
          if (v65 != v67)
            free(v65);
          goto LABEL_71;
        }
        std::__sort<std::__less<long long,long long> &,long long *>();
        v14 = (char *)v65;
        v15 = (char *)v65;
        if ((_DWORD)v66)
        {
          v15 = (char *)v65 + 8 * v66;
          v16 = 8 * v66 - 16;
          v17 = (char *)v65;
          while (1)
          {
            v18 = v17;
            v17 += 8;
            if (v17 == v15)
              break;
            v19 = v16;
            v20 = *v18;
            v16 -= 8;
            if (*v18 == v18[1])
            {
              if (v18 + 2 != (_QWORD *)v15)
              {
                v21 = 8;
                do
                {
                  v25 = v20;
                  v20 = *(_QWORD *)&v17[v21];
                  if (v25 != v20)
                  {
                    v18[1] = v20;
                    ++v18;
                  }
                  v21 += 8;
                  v19 -= 8;
                }
                while (v19);
              }
              v15 = (char *)(v18 + 1);
              break;
            }
          }
        }
        v26 = (unint64_t)(v15 - v14) >> 3;
        LODWORD(v66) = v26;
        if ((_DWORD)v26)
        {
          v27 = 8 * v26;
          v28 = (uint64_t *)v14;
          do
          {
            v29 = *v28;
            if (*v28 == 2)
              v30 = 3;
            else
              v30 = *v28;
            if (v29)
              v31 = 3;
            else
              v31 = 1;
            if (a2 == 2)
              v29 = v31;
            if (a2 == 3)
              v29 = v30;
            if (a2 < 2)
              v29 = 3;
            *v28++ = v29;
            v27 -= 8;
          }
          while (v27);
        }
        v62 = v64;
        v63 = 0x600000000;
        if (v26 < 7uLL)
        {
          v32 = 0;
          if (!(_DWORD)v26)
            goto LABEL_57;
          v33 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v64, v26, 8);
          v32 = v63;
          v33 = v63;
        }
        v34 = (char *)v62 + 8 * v33;
        v35 = (v26 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v35 >= 7)
        {
          v37 = (char *)v62 + 8 * v33;
          v36 = v14;
          if ((unint64_t)(v37 - v14) >= 0x20)
          {
            v38 = v35 + 1;
            v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
            v34 = (_QWORD *)((char *)v34 + v39);
            v36 = &v14[v39];
            v40 = (__int128 *)(v14 + 16);
            v41 = v37 + 16;
            v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v43 = *v40;
              *(v41 - 1) = *(v40 - 1);
              *v41 = v43;
              v40 += 2;
              v41 += 2;
              v42 -= 4;
            }
            while (v42);
            if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_57:
              LODWORD(v63) = v32 + v26;
              v61 = v66;
              v60 = a1[1] & 0xFFFFFFFFFFFFFFF8;
              Context = mlir::Attribute::getContext((mlir::Attribute *)&v60);
              v46 = mlir::IntegerType::get(Context, 0x40u, 2u);
              v47 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v61, 1, v46, 0);
              v48 = v47;
              if (!v47)
                goto LABEL_66;
              v49 = *v47;
              v50 = mlir::TypeID::get<mlir::ShapedType>();
              v51 = *(unsigned int *)(v49 + 16);
              if (!(_DWORD)v51)
                goto LABEL_66;
              v52 = *(_QWORD **)(v49 + 8);
              v53 = &v52[2 * v51];
              do
              {
                v54 = v51 >> 1;
                v55 = &v52[2 * (v51 >> 1)];
                v57 = *v55;
                v56 = v55 + 2;
                v51 += ~(v51 >> 1);
                if (v57 < v50)
                  v52 = v56;
                else
                  v51 = v54;
              }
              while (v51);
              if (v52 != v53 && *v52 == v50)
                v58 = v52[1];
              else
LABEL_66:
                v58 = 0;
              v59 = mlir::DenseElementsAttr::getFromRawBuffer(v48, v58, v62, 8 * v63, 8, 1, 0);
              v22 = v59;
              v23 = v59 & 0xFFFFFFFFFFFFFF00;
              if (v62 != v64)
                free(v62);
              goto LABEL_69;
            }
          }
        }
        else
        {
          v36 = v14;
        }
        do
        {
          v44 = *(_QWORD *)v36;
          v36 += 8;
          *v34++ = v44;
        }
        while (v36 != &v14[8 * v26]);
        goto LABEL_57;
      }
    }
  }
  if (a4)
  {
    mlir::emitError(a3, (uint64_t)&v68);
    if (v68)
      mlir::Diagnostic::operator<<((uint64_t)&v69, "axes is not a constant");
    mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v68);
    if (v68)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v68);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v69);
  }
  v22 = 0;
  v23 = 0;
  return v23 & 0xFFFFFFFFFFFFFF00 | v22;
}

uint64_t mlir::getMostDefinedTypeForCPU(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *ArgAttrsAttr;
  uint64_t v18;
  uint64_t NumElements;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v27 = 0uLL;
  v28 = a1;
  v29 = 0;
  if (!a2)
    return 0;
  v4 = 0;
  do
  {
    v6 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v28, v4) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v6)
      goto LABEL_17;
    v7 = *v6;
    v8 = mlir::TypeID::get<mlir::ShapedType>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_17;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_17:
      v16 = 0;
    *(_QWORD *)&v26 = v6;
    *((_QWORD *)&v26 + 1) = v16;
    if (!(_QWORD)v27
      || (ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26),
          NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v18),
          v20 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v27),
          NumElements > mlir::ShapedType::getNumElements(v20, v21))
      || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26),
          v23 = v22,
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v27),
          v23 > v24))
    {
      v27 = v26;
    }
    v4 = ++v29;
  }
  while (v28 != a1 || v4 != a2);
  return v27;
}

void mlir::getRankPromotionShapeForANE(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  _BYTE *ArgAttrsAttr;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  __int128 v23;
  _QWORD v24[2];

  v24[0] = a1;
  v24[1] = a2;
  ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24);
  v5 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24);
  v7 = (_BYTE *)(v5 + 8 * v6);
  *a3 = (uint64_t *)(a3 + 2);
  a3[1] = (uint64_t *)0x500000000;
  v8 = v7 - ArgAttrsAttr;
  if ((unint64_t)(v7 - ArgAttrsAttr) < 0x29)
  {
    v9 = 0;
    if (v7 == ArgAttrsAttr)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, v8 >> 3, 8);
  v9 = *((_DWORD *)a3 + 2);
  if (v7 != ArgAttrsAttr)
  {
LABEL_5:
    memcpy(&(*a3)[v9], ArgAttrsAttr, v7 - ArgAttrsAttr);
    v9 = *((_DWORD *)a3 + 2);
  }
LABEL_6:
  v10 = v9 + ((unint64_t)v8 >> 3);
  *((_DWORD *)a3 + 2) = v10;
  switch(v10)
  {
    case 0:
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        v11 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        v11 = *((unsigned int *)a3 + 2);
      }
      v21 = &(*a3)[v11];
      *(_OWORD *)v21 = xmmword_181247B50;
      *((_OWORD *)v21 + 1) = unk_181247B60;
      goto LABEL_25;
    case 1:
      v19 = *a3;
      v13 = **a3;
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        v20 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        v20 = *((unsigned int *)a3 + 2);
        v19 = *a3;
      }
      v22 = &v19[v20];
      *v22 = 1;
      *(int64x2_t *)(v22 + 1) = vdupq_n_s64(1uLL);
      goto LABEL_24;
    case 2:
      v12 = *a3;
      v14 = **a3;
      v13 = (*a3)[1];
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        v15 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        v15 = *((unsigned int *)a3 + 2);
        v12 = *a3;
      }
      v22 = &v12[v15];
      *v22 = 1;
      v22[1] = v14;
      goto LABEL_21;
    case 3:
      v16 = *a3;
      v17 = *(_OWORD *)*a3;
      v13 = (*a3)[2];
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        v18 = 0;
      }
      else
      {
        v23 = v17;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        v17 = v23;
        v18 = *((unsigned int *)a3 + 2);
        v16 = *a3;
      }
      v22 = &v16[v18];
      *(_OWORD *)v22 = v17;
LABEL_21:
      v22[2] = 1;
LABEL_24:
      v22[3] = v13;
LABEL_25:
      *((_DWORD *)a3 + 2) += 4;
      break;
    default:
      return;
  }
}

uint64_t mlir::getRankPromotionTypeForANE(uint64_t a1, uint64_t a2)
{
  _QWORD *ArgAttrsAttr;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t OperandRange;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  mlir::AffineMap *v16;
  uint64_t RHS;
  uint64_t MemorySpace;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  void *__s2;
  unsigned int v34;
  _QWORD v35[6];

  v35[5] = *MEMORY[0x1E0C80C00];
  v29 = a1;
  v30 = a2;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v29))
    return v29;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v29);
  if (v3)
  {
    v4 = 8 * v3;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v4 -= 8;
      if (!v4)
        goto LABEL_6;
    }
    return v29;
  }
LABEL_6:
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v29) & 1) == 0)
    return v29;
  mlir::getRankPromotionShapeForANE(v29, v30, (uint64_t **)&__s2);
  v5 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v29);
  v6 = v34;
  if (v7 == v34 && !memcmp(v5, __s2, 8 * v34))
  {
    v12 = v29;
  }
  else
  {
    v8 = v29;
    v9 = *(void **)(*(_QWORD *)v29 + 136);
    if (v9 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v8 = 0;
    v28 = v8;
    if (v9 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      *(_QWORD *)&v31 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v28);
      *((_QWORD *)&v31 + 1) = v14;
      mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v31);
      v15 = __s2;
      v16 = (mlir::AffineMap *)v34;
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v28);
      MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v28);
      v19 = (uint64_t *)mlir::MemRefType::get(v15, v16, RHS, 0, MemorySpace);
      v12 = (uint64_t)v19;
      if (v19)
      {
        v20 = *v19;
        v21 = mlir::TypeID::get<mlir::ShapedType>();
        v22 = *(unsigned int *)(v20 + 16);
        if ((_DWORD)v22)
        {
          v23 = *(_QWORD **)(v20 + 8);
          do
          {
            v24 = v22 >> 1;
            v25 = &v23[2 * (v22 >> 1)];
            v27 = *v25;
            v26 = v25 + 2;
            v22 += ~(v22 >> 1);
            if (v27 < v21)
              v23 = v26;
            else
              v22 = v24;
          }
          while (v22);
        }
      }
    }
    else
    {
      v10 = __s2;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v29);
      *(_QWORD *)&v31 = v10;
      *((_QWORD *)&v31 + 1) = v6;
      v32 = 1;
      v12 = mlir::ShapedType::cloneWith(&v29, &v31, OperandRange);
    }
  }
  if (__s2 != v35)
    free(__s2);
  return v12;
}

uint64_t mlir::getMostDefinedTypeForANE(uint64_t a1, uint64_t a2)
{
  uint64_t MostDefinedTypeForCPU;
  uint64_t v3;

  MostDefinedTypeForCPU = mlir::getMostDefinedTypeForCPU(a1, a2);
  return mlir::getRankPromotionTypeForANE(MostDefinedTypeForCPU, v3);
}

double mlir::anec::getAllDims@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 32) = 4;
  *(_OWORD *)(a1 + 16) = xmmword_181247B70;
  *(_QWORD *)&result = 0x500000005;
  *(_QWORD *)(a1 + 8) = 0x500000005;
  return result;
}

unint64_t mlir::anec::getIndexFromDim(int a1, unint64_t a2)
{
  unsigned __int8 v2;
  unint64_t v3;
  BOOL v4;

  switch(a1)
  {
    case 0:
      v2 = 0;
      v3 = 0;
      break;
    case 1:
      v2 = a2 - 3;
      v3 = (a2 - 3) & 0xFFFFFFFFFFFFFF00;
      v4 = a2 >= 3;
      goto LABEL_7;
    case 2:
      v3 = 0;
      v2 = a2 > 4;
      break;
    case 3:
      v2 = a2 - 2;
      v3 = (a2 - 2) & 0xFFFFFFFFFFFFFF00;
      v4 = a2 >= 2;
LABEL_7:
      if (!v4)
      {
        v2 = 0;
        v3 = 0;
      }
      break;
    case 4:
      v2 = a2 - 1;
      v3 = (a2 - 1) & 0xFFFFFFFFFFFFFF00;
      if (!a2)
      {
        v2 = 0;
        v3 = 0;
      }
      break;
    default:
      v2 = 0;
      v3 = 0;
      break;
  }
  return v3 | v2;
}

uint64_t mlir::anec::getMaximumDimSize(unsigned int a1)
{
  if (a1 > 4)
    return 0x10000;
  else
    return qword_181247BA0[a1];
}

uint64_t mlir::anec::getDimFromIndex(mlir::anec *this, unint64_t a2)
{
  BOOL v3;
  uint64_t v4;

  if (a2 && (mlir::anec *)(a2 - 1) == this)
    return 0x100000004;
  if (a2 >= 2 && (mlir::anec *)(a2 - 2) == this)
    return 0x100000003;
  if (a2 >= 3 && (mlir::anec *)(a2 - 3) == this)
    return 0x100000001;
  if (a2 >= 4 && (mlir::anec *)(a2 - 4) == this)
    return (2 * (a2 > 4)) | 0x100000000;
  v3 = (mlir::anec *)(a2 - 5) == this && a2 > 4;
  v4 = 0x100000000;
  if (!v3)
    return 0;
  return v4;
}

uint64_t mlir::anec::getKernelDimFromIndex(unint64_t this, uint64_t a2)
{
  char v4;
  char *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  llvm *v28;
  unsigned int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  mlir::anec::getKernelDimMap(&v27);
  v4 = v27;
  v5 = (char *)&v28;
  if ((v27 & 1) != 0)
  {
    v7 = 4;
    v6 = &v28;
  }
  else
  {
    v6 = v28;
    v7 = v29;
    if (!v29)
    {
      v8 = 0;
LABEL_4:
      v9 = (char *)&v6[4 * v8];
      goto LABEL_7;
    }
  }
  v10 = v7 - 1;
  v9 = (char *)&v6[4 * (v10 & (37 * a2))];
  v11 = *(_QWORD *)v9;
  if (*(_QWORD *)v9 != a2)
  {
    v24 = 1;
    LODWORD(v25) = v10 & (37 * a2);
    while (v11 != -1)
    {
      v26 = v25 + v24++;
      v25 = v26 & v10;
      v11 = v6[4 * v25];
      if (v11 == a2)
      {
        v9 = (char *)&v6[4 * v25];
        goto LABEL_7;
      }
    }
    if ((v27 & 1) == 0)
    {
      v6 = v28;
      v8 = v29;
      goto LABEL_4;
    }
    v9 = (char *)&v30;
  }
LABEL_7:
  v12 = v29;
  v13 = (char *)v28 + 32 * v29;
  if ((v27 & 1) != 0)
    v13 = (char *)&v30;
  if (v9 == v13 || (v15 = v9 + 8, v14 = *((_QWORD *)v9 + 1), this >= (v15[1] - v14) >> 2))
  {
    v19 = 0;
    v18 = 0;
    v17 = 0;
    if ((v27 & 1) != 0)
      goto LABEL_12;
LABEL_14:
    v5 = (char *)v28;
    if (!v29)
      goto LABEL_21;
    goto LABEL_15;
  }
  v16 = *(_DWORD *)(v14 + 4 * this);
  v17 = v16 & 0xFFFFFF00;
  v18 = v16;
  v19 = 0x100000000;
  if ((v27 & 1) == 0)
    goto LABEL_14;
LABEL_12:
  v12 = 4;
LABEL_15:
  v20 = 32 * v12;
  v21 = v5 + 16;
  do
  {
    if (*(v21 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v22 = (void *)*(v21 - 1);
      if (v22)
      {
        *v21 = v22;
        operator delete(v22);
      }
    }
    v21 += 4;
    v20 -= 32;
  }
  while (v20);
  v4 = v27;
LABEL_21:
  if ((v4 & 1) == 0)
    llvm::deallocate_buffer(v28, (void *)(32 * v29));
  return v19 | v17 | v18;
}

void mlir::anec::getKernelDimMap(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _DWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _OWORD *v22;
  uint64_t v23;
  void *__p;
  void *v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v11 = 2;
  v3 = operator new(8uLL);
  v12 = v3;
  *v3 = 0x100000000;
  v13 = v3 + 1;
  v14 = v3 + 1;
  v4 = operator new(0xCuLL);
  *(_QWORD *)v4 = 0x100000000;
  v4[2] = 4;
  v15 = 3;
  v5 = operator new(0xCuLL);
  v17 = v5 + 3;
  v18 = (char *)(v5 + 3);
  *(_QWORD *)v5 = *(_QWORD *)v4;
  v5[2] = v4[2];
  v16 = v5;
  v6 = operator new(0x10uLL);
  *v6 = xmmword_181247B30;
  v19 = 4;
  v7 = operator new(0x10uLL);
  *v7 = *v6;
  v20 = v7;
  v21 = v7 + 1;
  v22 = v7 + 1;
  v23 = 5;
  v8 = operator new(0x14uLL);
  v25 = v8 + 5;
  v26 = (char *)(v8 + 5);
  v8[4] = 2;
  *(_OWORD *)v8 = xmmword_181247B88;
  __p = v8;
  v10 = &v11;
  v9 = &v27;
  llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::SmallDenseMap<llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>> const*>(a1, &v10, &v9);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  operator delete(v6);
  operator delete(v4);
}

unint64_t mlir::anec::getReferenceFormatIndex(mlir::anec *this, unint64_t a2, unint64_t a3)
{
  unsigned __int8 v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (a2 && (mlir::anec *)(a2 - 1) == this)
  {
    v3 = a3 - 1;
    v4 = (a3 - 1) & 0xFFFFFFFFFFFFFF00;
    if (!a3)
    {
      v3 = 0;
      v4 = 0;
    }
    return v4 | v3;
  }
  if (a2 >= 2 && (mlir::anec *)(a2 - 2) == this)
  {
    v3 = a3 - 2;
    v4 = (a3 - 2) & 0xFFFFFFFFFFFFFF00;
    v5 = a3 >= 2;
    goto LABEL_12;
  }
  if (a2 >= 3 && (mlir::anec *)(a2 - 3) == this)
  {
    v3 = a3 - 3;
    v4 = (a3 - 3) & 0xFFFFFFFFFFFFFF00;
    v5 = a3 >= 3;
LABEL_12:
    if (!v5)
    {
      v3 = 0;
      v4 = 0;
    }
    return v4 | v3;
  }
  if (a2 >= 4 && (mlir::anec *)(a2 - 4) == this)
  {
    if (a2 >= 5)
    {
      v4 = 0;
      v3 = a3 > 4;
      return v4 | v3;
    }
LABEL_22:
    v3 = 0;
    v4 = 0;
    return v4 | v3;
  }
  v6 = 0;
  if (a2 >= 5 && (mlir::anec *)(a2 - 5) == this)
    goto LABEL_22;
  return v6;
}

uint64_t mlir::anec::allElementsOnAxis(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t ArgAttrsAttr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v11;
  _BOOL4 v12;
  uint64_t result;
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
  if (v5)
  {
    v6 = ArgAttrsAttr;
    v7 = 0;
    v8 = 8 * v5;
    while (1)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
      if (v9 && v7 == v9 - 1)
        break;
      if (v9 >= 2 && v7 == v9 - 2)
      {
        v11 = 3;
LABEL_12:
        v12 = 1;
        goto LABEL_13;
      }
      if (v9 >= 3 && v7 == v9 - 3)
      {
        v12 = 1;
        v11 = 1;
        goto LABEL_13;
      }
      if (v9 >= 4 && v7 == v9 - 4)
      {
        v11 = 2 * (v9 > 4);
        goto LABEL_12;
      }
      v11 = 0;
      v12 = v9 > 4 && v7 == v9 - 5;
LABEL_13:
      if (*(_QWORD *)(v6 + 8 * v7) != 1)
      {
        result = 0;
        if (!v12 || v11 != a3)
          return result;
      }
      ++v7;
      v8 -= 8;
      if (!v8)
        return 1;
    }
    v11 = 4;
    goto LABEL_12;
  }
  return 1;
}

uint64_t mlir::anec::verifyCompatibilityWithFlatten(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *ArgAttrsAttr;
  uint64_t v12;
  uint64_t NumElements;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  _QWORD v18[2];
  _QWORD v19[2];

  v19[0] = a1;
  v19[1] = a2;
  v18[0] = a3;
  v18[1] = a4;
  result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v19);
  if ((_DWORD)result)
  {
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v18);
    if ((_DWORD)result)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19);
      v6 = v5;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v18);
      if (v6 == v7
        && (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19), v8 <= 4)
        && (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19), v9 >= 4)
        && (v10 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19),
            v10 == *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v18))
        && (ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19),
            NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v12),
            v14 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v18),
            NumElements == mlir::ShapedType::getNumElements(v14, v15)))
      {
        v17[0] = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v18);
        v17[1] = v16;
        return llvm::any_of<llvm::detail::zippy<llvm::detail::zip_enumerator,llvm::detail::index_stream,llvm::ArrayRef<long long>>,mlir::anec::verifyCompatibilityWithFlatten(mlir::ShapedType,mlir::ShapedType)::$_0>(v17, (mlir::CallableOpInterface *)v18) ^ 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t llvm::any_of<llvm::detail::zippy<llvm::detail::zip_enumerator,llvm::detail::index_stream,llvm::ArrayRef<long long>>,mlir::anec::verifyCompatibilityWithFlatten(mlir::ShapedType,mlir::ShapedType)::$_0>(uint64_t *a1, mlir::CallableOpInterface *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v4 = 0;
  v5 = *a1;
  v6 = 8 * v2;
  while (1)
  {
    mlir::CallableOpInterface::getArgAttrsAttr(this);
    if (v7)
    {
      if (v4 == v7 - 1)
        break;
    }
    if (v7 >= 2 && v4 == v7 - 2)
      break;
    if (v7 >= 3 && v4 == v7 - 3)
      goto LABEL_4;
    if (v7 >= 4 && v4 == v7 - 4)
    {
      if (v7 < 5)
        goto LABEL_4;
      break;
    }
    if (v7 < 5 || v4 != v7 - 5)
    {
      std::__throw_bad_optional_access[abi:nn180100]();
      return 0;
    }
LABEL_4:
    ++v4;
    v6 -= 8;
    if (!v6)
      return 0;
  }
  if (*(_QWORD *)(v5 + 8 * v4) == 1)
    goto LABEL_4;
  return 1;
}

uint64_t mlir::anec::verifyCompatibilityWithUnflatten(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::anec::verifyCompatibilityWithFlatten(a3, a4, a1, a2);
}

_QWORD *llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::SmallDenseMap<llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>> const*>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *buffer;
  int v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *i;
  int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  int v31;

  v6 = ((uint64_t)(*a3 - *a2) >> 5) | ((unint64_t)((uint64_t)(*a3 - *a2) >> 5) >> 1);
  v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  v9 = (HIDWORD(v8) | v8) + 1;
  v10 = a1 + 1;
  if (v9 <= 4)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    buffer = llvm::allocate_buffer(32 * ((HIDWORD(v8) | v8) + 1), (std::align_val_t)8uLL);
    a1[1] = buffer;
    a1[2] = v9;
    v12 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v12 & 1) == 0)
    {
      v13 = (char *)&buffer[4 * v9];
      goto LABEL_6;
    }
  }
  v13 = (char *)(a1 + 17);
  buffer = v10;
LABEL_6:
  v14 = v13 - (char *)buffer - 32;
  if (v14 < 0x20)
  {
    v15 = (char *)buffer;
    do
    {
LABEL_11:
      *(_QWORD *)v15 = -1;
      v15 += 32;
    }
    while (v15 != v13);
    goto LABEL_12;
  }
  v16 = (v14 >> 5) + 1;
  v15 = (char *)&buffer[4 * (v16 & 0xFFFFFFFFFFFFFFELL)];
  v17 = buffer + 4;
  v18 = v16 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v17 - 4) = -1;
    *v17 = -1;
    v17 += 8;
    v18 -= 2;
  }
  while (v18);
  if (v16 != (v16 & 0xFFFFFFFFFFFFFFELL))
    goto LABEL_11;
LABEL_12:
  v19 = (_QWORD *)*a2;
  for (i = (_QWORD *)*a3; v19 != i; v19 += 4)
  {
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v21 = 4;
      v22 = v10;
    }
    else
    {
      v21 = *((_DWORD *)a1 + 4);
      if (!v21)
      {
        v27 = 0;
LABEL_21:
        llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::InsertIntoBucket<unsigned long long const&,std::vector<mlir::anec::KernelDim> const&>((uint64_t)a1, v27, v19, (uint64_t)(v19 + 1));
        continue;
      }
      v22 = (_QWORD *)a1[1];
    }
    v23 = v21 - 1;
    v24 = (37 * *v19) & v23;
    v25 = &v22[4 * v24];
    v26 = *v25;
    if (*v19 != *v25)
    {
      v28 = 0;
      v29 = 1;
      while (v26 != -1)
      {
        if (v28)
          v30 = 0;
        else
          v30 = v26 == -2;
        if (v30)
          v28 = v25;
        v31 = v24 + v29++;
        v24 = v31 & v23;
        v25 = &v22[4 * v24];
        v26 = *v25;
        if (*v19 == *v25)
          goto LABEL_16;
      }
      if (v28)
        v27 = v28;
      else
        v27 = v25;
      goto LABEL_21;
    }
LABEL_16:
    ;
  }
  return a1;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::InsertIntoBucket<unsigned long long const&,std::vector<mlir::anec::KernelDim> const&>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  int v25;

  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v10 = 4;
  else
    v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::grow(a1, v10);
  v17 = a1 + 8;
  v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v18 = 4;
  }
  else
  {
    v18 = *(_DWORD *)(a1 + 16);
    if (!v18)
    {
      v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v17 = *(_QWORD *)(a1 + 8);
  }
  v11 = *(_DWORD *)a1 & 1;
  v19 = v18 - 1;
  v20 = (37 * *a3) & v19;
  a2 = (_QWORD *)(v17 + 32 * v20);
  v21 = *a2;
  if (*a3 != *a2)
  {
    v22 = 0;
    v23 = 1;
    while (v21 != -1)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v21 == -2;
      if (v24)
        v22 = a2;
      v25 = v20 + v23++;
      v20 = v25 & v19;
      a2 = (_QWORD *)(v17 + 32 * v20);
      v21 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v22)
      a2 = v22;
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*a2 != -1)
    --*(_DWORD *)(a1 + 4);
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  v12 = *(const void **)a4;
  v13 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v13)
  {
    if (v13 < 0)
      abort();
    v14 = (char *)operator new(v13);
    a2[1] = v14;
    a2[2] = v14;
    v15 = &v14[4 * (v13 >> 2)];
    a2[3] = v15;
    memcpy(v14, v12, v13);
    a2[2] = v15;
  }
  return a2;
}

void llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[13];

  v18[12] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(32 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v14 = (char *)(32 * v7);
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::moveFromOldBuckets((int *)a1, v6, (uint64_t *)&v14[(_QWORD)v6]);
    llvm::deallocate_buffer((llvm *)v6, v14);
  }
  v8 = &v15;
  if (*(_QWORD *)(a1 + 8) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_OWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v8 = v18;
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *v8 = v9;
    *(_OWORD *)(v8 + 1) = *(_OWORD *)(a1 + 48);
    v8[3] = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v8 += 4;
  }
  v10 = *(_QWORD *)(a1 + 72);
  if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *v8 = v10;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    *(_OWORD *)(v8 + 1) = *(_OWORD *)(a1 + 80);
    v8[3] = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    v8 += 4;
  }
  v11 = *(_QWORD *)(a1 + 104);
  if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *v8 = v11;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    *(_OWORD *)(v8 + 1) = *(_OWORD *)(a1 + 112);
    v8[3] = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    v8 += 4;
  }
  if (a2 >= 5)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(32 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::moveFromOldBuckets((int *)a1, &v15, v8);
}

void llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::moveFromOldBuckets(int *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  int v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  unint64_t *v24;
  int v25;
  BOOL v26;
  int v27;

  v4 = a2;
  v6 = *a1;
  *(_QWORD *)a1 = *a1 & 1;
  v7 = a1 + 2;
  if ((v6 & 1) != 0)
  {
    v10 = (char *)(a1 + 34);
    v9 = a1 + 2;
  }
  else
  {
    v8 = a1[4];
    if (!(_DWORD)v8)
      goto LABEL_11;
    v9 = (_QWORD *)*((_QWORD *)a1 + 1);
    v10 = (char *)&v9[4 * v8];
  }
  v11 = v10 - (char *)v9 - 32;
  if (v11 < 0x20)
  {
    v12 = (char *)v9;
    do
    {
LABEL_10:
      *(_QWORD *)v12 = -1;
      v12 += 32;
    }
    while (v12 != v10);
    goto LABEL_11;
  }
  v13 = (v11 >> 5) + 1;
  v12 = (char *)&v9[4 * (v13 & 0xFFFFFFFFFFFFFFELL)];
  v14 = v9 + 4;
  v15 = v13 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v14 - 4) = -1;
    *v14 = -1;
    v14 += 8;
    v15 -= 2;
  }
  while (v15);
  if (v13 != (v13 & 0xFFFFFFFFFFFFFFELL))
    goto LABEL_10;
LABEL_11:
  if (a2 != a3)
  {
    do
    {
      v16 = *v4;
      if ((unint64_t)*v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if ((*(_BYTE *)a1 & 1) != 0)
        {
          v18 = 4;
          v17 = v7;
        }
        else
        {
          v17 = (int *)*((_QWORD *)a1 + 1);
          v18 = a1[4];
        }
        v19 = v18 - 1;
        v20 = (v18 - 1) & (37 * v16);
        v21 = (unint64_t *)&v17[8 * v20];
        v22 = *v21;
        if (v16 != *v21)
        {
          v24 = 0;
          v25 = 1;
          while (v22 != -1)
          {
            if (v24)
              v26 = 0;
            else
              v26 = v22 == -2;
            if (v26)
              v24 = v21;
            v27 = v20 + v25++;
            v20 = v27 & v19;
            v21 = (unint64_t *)&v17[8 * v20];
            v22 = *v21;
            if (v16 == *v21)
              goto LABEL_19;
          }
          if (v24)
            v21 = v24;
        }
LABEL_19:
        *v21 = v16;
        v21[1] = 0;
        v21[2] = 0;
        v21[3] = 0;
        *(_OWORD *)(v21 + 1) = *(_OWORD *)(v4 + 1);
        v21[3] = v4[3];
        v4[1] = 0;
        v4[2] = 0;
        v4[3] = 0;
        *a1 += 2;
        v23 = (void *)v4[1];
        if (v23)
        {
          v4[2] = (uint64_t)v23;
          operator delete(v23);
        }
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::Diagnostic::append<long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(uint64_t a1, uint64_t *a2, char *__s, uint64_t *a4, char *a5, uint64_t *a6, char *a7)
{
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v22;
  BOOL v23;
  char *v24;
  int v25;
  uint64_t v26;

  v15 = *(_QWORD *)(a1 + 16);
  v13 = a1 + 16;
  v14 = v15;
  v16 = *a2;
  v25 = 2;
  v26 = v16;
  v17 = *(unsigned int *)(v13 + 8);
  v18 = &v25;
  if (v17 >= *(_DWORD *)(v13 + 12))
  {
    v22 = v17 + 1;
    v23 = v14 + 24 * v17 > (unint64_t)&v25;
    if (v14 <= (unint64_t)&v25 && v23)
    {
      v24 = (char *)&v25 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v22, 24);
      v14 = *(_QWORD *)(a1 + 16);
      v18 = (int *)&v24[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v22, 24);
      v14 = *(_QWORD *)(a1 + 16);
      v18 = &v25;
    }
  }
  v19 = v14 + 24 * *(unsigned int *)(a1 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = *((_QWORD *)v18 + 2);
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return mlir::Diagnostic::append<long long,char const(&)[3],long long,char const(&)[2]>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<long long,char const(&)[3],long long,char const(&)[2]>(uint64_t a1, uint64_t *a2, char *__s, uint64_t *a4, char *a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v18;
  BOOL v19;
  char *v20;
  int v21;
  uint64_t v22;

  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *a2;
  v21 = 2;
  v22 = v12;
  v13 = *(unsigned int *)(v9 + 8);
  v14 = &v21;
  if (v13 >= *(_DWORD *)(v9 + 12))
  {
    v18 = v13 + 1;
    v19 = v10 + 24 * v13 > (unint64_t)&v21;
    if (v10 <= (unint64_t)&v21 && v19)
    {
      v20 = (char *)&v21 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v14 = (int *)&v20[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v14 = &v21;
    }
  }
  v15 = v10 + 24 * *(unsigned int *)(a1 + 24);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)v14 + 2);
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return mlir::Diagnostic::append<long long,char const(&)[2]>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<long long,char const(&)[2]>(uint64_t a1, uint64_t *a2, char *__s)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;

  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 16;
  v6 = v7;
  v8 = *a2;
  v17 = 2;
  v18 = v8;
  v9 = *(unsigned int *)(v5 + 8);
  v10 = &v17;
  if (v9 >= *(_DWORD *)(v5 + 12))
  {
    v14 = v9 + 1;
    v15 = v6 + 24 * v9 > (unint64_t)&v17;
    if (v6 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v10 = (int *)&v16[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v10 = &v17;
    }
  }
  v11 = v6 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return a1;
}

uint64_t mlir::getStrideInBytes(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unsigned int IntOrFloatBitWidth;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;

  v20 = a1;
  *(_DWORD *)(a2 + 8) = 0;
  if (a3)
  {
    v19[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v20);
    v19[1] = v4;
    if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19) & 1) != 0)
      return 1;
    a1 = v20;
  }
  v18 = 0;
  if (!mlir::getStridesAndOffset(a1, a2, &v18))
    return 0;
  v19[0] = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v20);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v19);
  v6 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6)
  {
    v7 = IntOrFloatBitWidth >> 3;
    v8 = *(_QWORD **)a2;
    v9 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v9)
    {
      v10 = v9 + 1;
      v11 = (v9 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v12 = &v8[v11];
      v13 = v8 + 1;
      v14 = v11;
      do
      {
        v15 = *v13 * v7;
        *(v13 - 1) *= v7;
        *v13 = v15;
        v13 += 2;
        v14 -= 2;
      }
      while (v14);
      if (v10 == v11)
        return 1;
    }
    else
    {
      v12 = *(_QWORD **)a2;
    }
    v17 = &v8[v6];
    do
      *v12++ *= v7;
    while (v12 != v17);
  }
  return 1;
}

uint64_t mlir::cloneTypeWithStrideInBytes(uint64_t a1, const void *a2, uint64_t a3, mlir *a4)
{
  unsigned int IntOrFloatBitWidth;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *Value;
  mlir::AffineMap *v19;
  mlir::AffineMap *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  mlir::MLIRContext *Context;
  unint64_t StridedLinearLayoutMap;
  uint64_t v26;
  uint64_t v28;
  void *RHS;
  uint64_t v30;
  _QWORD v31[6];

  v31[5] = *MEMORY[0x1E0C80C00];
  v28 = a1;
  RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v28);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS);
  RHS = v31;
  v30 = 0x500000000;
  if ((unint64_t)(8 * a3) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&RHS, v31, (8 * a3) >> 3, 8);
    v8 = v30;
    v9 = (uint64_t *)RHS;
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = 0;
  v9 = v31;
  if (a3)
  {
LABEL_5:
    memcpy(&v9[v8], a2, 8 * a3);
    v8 = v30;
    v9 = (uint64_t *)RHS;
  }
LABEL_6:
  v10 = (v8 + a3);
  LODWORD(v30) = v8 + a3;
  if (v8 + (_DWORD)a3)
  {
    v11 = IntOrFloatBitWidth >> 3;
    v12 = v9;
    if (((v10 - 1) & 0x1FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_11;
    v13 = ((v10 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v12 = &v9[v13 & 0x3FFFFFFFFFFFFFFELL];
    v14 = v9 + 1;
    v15 = v13 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v16 = *v14;
      *(v14 - 1) /= v11;
      *v14 = v16 / v11;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_11:
      v17 = &v9[v10];
      do
        *v12++ /= v11;
      while (v12 != v17);
    }
  }
  Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
  v20 = v19;
  v21 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v28);
  v22 = RHS;
  v23 = v30;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  StridedLinearLayoutMap = mlir::makeStridedLinearLayoutMap((uint64_t)v22, v23, a4, Context);
  v26 = mlir::MemRefType::get(Value, v20, v21, StridedLinearLayoutMap, 0);
  if (RHS != v31)
    free(RHS);
  return v26;
}

void mlir::getRowBytesAlignedStrideInBytes(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v10 = *(unsigned int *)(a5 + 8);
  if (a2 != v10)
  {
    if (a2 >= v10)
    {
      if (a2 > *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), a2, 8);
        v10 = *(unsigned int *)(a5 + 8);
      }
      if (a2 != v10)
        bzero((void *)(*(_QWORD *)a5 + 8 * v10), 8 * (a2 - v10));
    }
    *(_DWORD *)(a5 + 8) = a2;
  }
  if (a2)
  {
    v11 = *(_QWORD *)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * a2 - 8) = a3;
    if (a2 != 1)
    {
      v12 = v11 - 16;
      v13 = a2;
      do
      {
        a3 = (a4 - 1 + *(_QWORD *)(a1 - 8 + 8 * v13) * a3) / a4 * a4;
        *(_QWORD *)(v12 + 8 * v13) = a3;
        v14 = v13 - 3;
        --v13;
      }
      while (v14 < a2);
    }
  }
}

uint64_t mlir::inferReturnTypesEqualToNthArgumentType(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[24];

  v16[23] = *MEMORY[0x1E0C80C00];
  v14[0] = a4;
  v14[1] = a5;
  if (a5 <= a10)
  {
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v15);
      if (v15)
        mlir::Diagnostic::operator<<((uint64_t)v16, "invalid number of operands");
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v15);
      if (v15)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v10 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v14, a10) + 8) & 0xFFFFFFFFFFFFFFF8;
    v11 = *(unsigned int *)(a9 + 8);
    if (v11 >= *(_DWORD *)(a9 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(a9 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a9 + 8 * v11) = v10;
    ++*(_DWORD *)(a9 + 8);
    return 1;
  }
  return v12;
}

uint64_t mlir::inferReturnTypesEqualToFirstArgumentType(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return mlir::inferReturnTypesEqualToNthArgumentType(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0);
}

uint64_t mlir::inferReductionOpReturnShape(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD **v20;
  _QWORD *v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  _BYTE v30[24];
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[32];
  _QWORD **v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[8];

  v40[6] = *MEMORY[0x1E0C80C00];
  v38 = v40;
  v39 = 0x600000000;
  if (mlir::getPositiveAxes(a5, a6, a4, (uint64_t)&v38, a1, a2, 0))
  {
    v32 = v34;
    v33 = 0x400000000;
    v36 = 0;
    v37 = 0;
    v35 = &v36;
    if ((_DWORD)v39)
    {
      v12 = (uint64_t **)v38;
      v13 = 8 * v39;
      do
      {
        v14 = *v12++;
        v31 = v14;
        llvm::SmallSet<long long,4u,std::less<long long>>::insert((uint64_t)&v32, &v31, (uint64_t)v30);
        v13 -= 8;
      }
      while (v13);
    }
    if (a4)
    {
      v15 = 0;
      v16 = (void *)(a8 + 16);
      do
      {
        if (v37)
        {
          v19 = v36;
          if (!v36)
            goto LABEL_7;
          v20 = &v36;
          do
          {
            v21 = v19;
            v22 = v20;
            v23 = v19[4];
            v24 = v19 + 1;
            if (v23 >= v15)
            {
              v24 = v21;
              v20 = (_QWORD **)v21;
            }
            v19 = (_QWORD *)*v24;
          }
          while (v19);
          if (v20 == &v36)
            goto LABEL_7;
          if (v23 < v15)
            v21 = v22;
          if (v15 < v21[4])
            goto LABEL_7;
        }
        else
        {
          if (!(_DWORD)v33)
            goto LABEL_7;
          v25 = v32;
          v26 = 8 * v33;
          while (*v25 != v15)
          {
            ++v25;
            v26 -= 8;
            if (!v26)
              goto LABEL_7;
          }
          if (!v26)
          {
LABEL_7:
            v17 = *(_QWORD *)(a3 + 8 * v15);
            v18 = *(unsigned int *)(a8 + 8);
            if (v18 >= *(unsigned int *)(a8 + 12))
              goto LABEL_29;
            goto LABEL_8;
          }
        }
        if (!a7)
          goto LABEL_9;
        v18 = *(unsigned int *)(a8 + 8);
        v17 = 1;
        if (v18 >= *(unsigned int *)(a8 + 12))
        {
LABEL_29:
          v29 = v16;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a8, v16, v18 + 1, 8);
          v16 = v29;
          v18 = *(unsigned int *)(a8 + 8);
        }
LABEL_8:
        *(_QWORD *)(*(_QWORD *)a8 + 8 * v18) = v17;
        ++*(_DWORD *)(a8 + 8);
LABEL_9:
        ++v15;
      }
      while (v15 != a4);
    }
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v35, v36);
    if (v32 != v34)
      free(v32);
    v27 = 1;
  }
  else
  {
    v27 = 0;
  }
  if (v38 != v40)
    free(v38);
  return v27;
}

uint64_t mlir::getElementBitWidth(_QWORD *a1)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v2;
  uint64_t Value;
  uint64_t v5;
  uint64_t v6;

  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  v6 = ElementTypeOrSelf;
  if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v2 = ElementTypeOrSelf;
  else
    v2 = 0;
  v5 = v2;
  if (!v2)
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v6);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v5);
  return 2 * mlir::getElementBitWidth(Value);
}

_QWORD *mlir::getElementTypeWithLargestPrecision(_QWORD **a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *ElementTypeOrSelf;
  _QWORD *v8;
  _QWORD *v10;
  unint64_t ElementBitWidth;

  if (a2)
  {
    v3 = 0;
    v4 = 8 * a2;
    while (1)
    {
      v5 = *(void **)(*(_QWORD *)mlir::getElementTypeOrSelf(a1[v3 / 8]) + 136);
      if (v5 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        break;
      v3 += 8;
      if (v4 == v3)
      {
        ElementTypeOrSelf = (_QWORD *)mlir::getElementTypeOrSelf(*a1);
        goto LABEL_9;
      }
    }
    ElementTypeOrSelf = (_QWORD *)mlir::getElementTypeOrSelf(*a1);
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(ElementTypeOrSelf) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
LABEL_9:
      while (1)
      {
        v8 = (_QWORD *)mlir::getElementTypeOrSelf(*a1);
        if (*(_UNKNOWN **)(*v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
          && ElementTypeOrSelf != v8)
        {
          break;
        }
        v10 = v8;
        if ((v5 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) != (*(_QWORD *)(*(_QWORD *)mlir::getElementTypeOrSelf(v8)
                                                                                             + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id))
          break;
        ElementBitWidth = mlir::getElementBitWidth(v10);
        if (ElementBitWidth > mlir::getElementBitWidth(ElementTypeOrSelf))
          ElementTypeOrSelf = v10;
        ++a1;
        v4 -= 8;
        if (!v4)
          return ElementTypeOrSelf;
      }
    }
  }
  return 0;
}

uint64_t mlir::isCompatibleWithDenseStorage(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;
  uint64_t result;
  unsigned int IntOrFloatBitWidth;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v1 = a1;
  else
    v1 = 0;
  v6 = v1;
  if (v1)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v6);
    return mlir::isCompatibleWithDenseStorage(Value);
  }
  else
  {
    result = mlir::Type::isIntOrFloat((mlir::Type *)&v7);
    if ((_DWORD)result)
    {
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v7);
      return IntOrFloatBitWidth == 1 || IntOrFloatBitWidth > 7;
    }
  }
  return result;
}

uint64_t mlir::mps::isMoreSpecializedShape(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  if (a2 != a4)
    return 0;
  if (!a2)
    return 1;
  v4 = 8 * a2 - 8;
  do
  {
    v5 = v4;
    v6 = *a1 == *a3 || *a3 == 0x8000000000000000;
    v7 = v6;
    if (!v6)
      break;
    ++a1;
    ++a3;
    v4 -= 8;
  }
  while (v5);
  return v7;
}

uint64_t mlir::mps::areMoreSpecializedTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 != a4)
    return 0;
  v18[0] = off_1E0DFB8F8;
  v18[1] = a5;
  v6 = v18;
  v19 = v18;
  if (!a2)
  {
    v13 = 1;
    v14 = 4;
    goto LABEL_16;
  }
  v8 = 0;
  v9 = a2 - 1;
  do
  {
    v10 = mlir::TypeRange::dereference_iterator(a1, v8);
    v16 = mlir::TypeRange::dereference_iterator(a3, v8);
    v17 = v10;
    if (!v19)
      std::__throw_bad_function_call[abi:nn180100]();
    v11 = (*(uint64_t (**)(_QWORD *, unint64_t *, unint64_t *))(*v19 + 48))(v19, &v17, &v16);
    if ((_DWORD)v11)
      v12 = v9 == v8;
    else
      v12 = 1;
    ++v8;
  }
  while (!v12);
  v13 = v11;
  v6 = v19;
  if (v19 == v18)
  {
    v14 = 4;
    v6 = v18;
    goto LABEL_16;
  }
  if (v19)
  {
    v14 = 5;
LABEL_16:
    (*(void (**)(void))(*v6 + 8 * v14))();
  }
  return v13;
}

_QWORD *std::__function::__func<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0DFB8F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0DFB8F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t OperandRange;
  uint64_t v11;
  _QWORD *ArgAttrsAttr;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  mlir::mps::MPSDialect *v22;
  _QWORD v23[2];
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v4 = *a3;
  v24[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(*a2);
  v24[1] = v5;
  v6 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v4);
  v23[0] = v6;
  v23[1] = v7;
  if (v24[0])
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v24);
  v25 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v23);
  v26 = OperandRange;
  v11 = *(_QWORD *)(v9 + 24);
  if (v11)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v26, &v25))
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v23))
        return 1;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v24))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24);
        v14 = v13;
        v15 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v23);
        if (v14 == v16)
        {
          if (v14)
          {
            v17 = 8 * v14 - 8;
            do
            {
              v18 = v17;
              v19 = *ArgAttrsAttr == *v15 || *v15 == 0x8000000000000000;
              v20 = v19;
              if (!v19)
                break;
              ++ArgAttrsAttr;
              ++v15;
              v17 -= 8;
            }
            while (v18);
            return v20;
          }
          return 1;
        }
      }
    }
    return 0;
  }
  v22 = (mlir::mps::MPSDialect *)std::__throw_bad_function_call[abi:nn180100]();
  return (uint64_t)mlir::mps::MPSDialect::initialize(v22);
}

_QWORD *mlir::mps::MPSDialect::initialize(mlir::mps::MPSDialect *this)
{
  mlir::mps::MPSResourceBlobManagerInterface *v2;
  uint64_t v3;
  uint64_t v5;

  _ZN4mlir7Dialect13addOperationsIJNS_3mps6ACosOpENS2_7ACoshOpENS2_6ASinOpENS2_7ASinhOpENS2_7ATan2OpENS2_6ATanOpENS2_7ATanhOpENS2_10AbsoluteOpENS2_16AbsoluteSquareOpENS2_5AddOpENS2_5AndOpENS2_16AssignVariableOpENS2_10BandPartOpENS2_14BatchToSpaceOpENS2_13BiasAddGradOpENS2_9BiasAddOpENS2_12BitwiseAndOpENS2_18BitwiseLeftShiftOpENS2_12BitwiseNotOpENS2_11BitwiseOrOpENS2_17BitwisePopcountOpENS2_19BitwiseRightShiftOpENS2_12BitwiseXorOpENS2_23BroadcastGradientArgsOpENS2_13BroadcastToOpENS2_6CallOpENS2_6CastOpENS2_6CeilOpENS2_7ClampOpENS2_9ColToImOpENS2_8ConcatOpENS2_11ConjugateOpENS2_10ConstantOpENS2_20Conv2DDataGradientOpENS2_8Conv2DOpENS2_23Conv2DWeightsGradientOpENS2_20Conv3DDataGradientOpENS2_8Conv3DOpENS2_23Conv3DWeightsGradientOpENS2_5CosOpENS2_6CoshOpENS2_12CostVolumeOpENS2_15CreateComplexOpENS2_21CreateTextureTensorOpENS2_6CropOpENS2_12CropResizeOpENS2_19CumulativeMaximumOpENS2_19CumulativeMinimumOpENS2_19CumulativeProductOpENS2_15CumulativeSumOpENS2_9DegammaOpENS2_16DepthToSpace2DOpENS2_29DepthwiseConv2DDataGradientOpENS2_17DepthwiseConv2DOpENS2_32DepthwiseConv2DWeightsGradientOpENS2_29DepthwiseConv3DDataGradientOpENS2_17DepthwiseConv3DOpENS2_32DepthwiseConv3DWeightsGradientOpENS2_15DequantizeLUTOpENS2_12DequantizeOpENS2_15DimensionSizeOpENS2_7DiracOpENS2_8DivideOpENS2_18DynamicShapeCastOpENS2_5EluOpENS2_9EqualToOpENS2_5ErfOpENS2_12ExpandDimsOpENS2_16ExponentBase10OpENS2_15ExponentBase2OpENS2_10ExponentOpENS2_22FastFourierTransformOpENS2_11Flatten2DOpENS2_13FloorDivideOpENS2_7FloorOpENS2_13GRUGradientOpENS2_5GRUOpENS2_17GatherAlongAxisOpENS2_10GatherNDOpENS2_8GatherOpENS2_6GeluOpENS2_10GetCoordOpENS2_13GreaterThanOpENS2_22GreaterThanOrEqualToOpENS2_17HammingDistanceOpENS2_20HermiteanToRealFFTOpENS2_10IdentityOpENS2_9ImToColOpENS2_15ImaginaryPartOpENS2_23InitRandomPhiloxStateOpENS2_14InstanceNormOpENS2_10IsFiniteOpENS2_12IsInfiniteOpENS2_7IsNaNOpENS2_8LPNormOpENS2_14LSTMGradientOpENS2_6LSTMOpENS2_11LeakyReluOpENS2_10LessThanOpENS2_19LessThanOrEqualToOpENS2_30LocalConvolutionDataGradientOpENS2_18LocalConvolutionOpENS2_32LocalConvolutionWeightGradientOpENS2_17LogarithmBase10OpENS2_16LogarithmBase2OpENS2_11LogarithmOpENS2_8MatMulOpENS2_25MaterializeSparseTensorOpENS2_23MatrixDecompositionLUOpENS2_15MatrixInverseOpENS2_16MatrixSolverLUOpENS2_9MaximumOpENS2_9MinimumOpENS2_8ModuloOpENS2_10MultiplyOpENS2_7NReluOpENS2_6NandOpENS2_10NegativeOpENS2_23NonMaximumSuppressionOpENS2_9NonZeroOpENS2_5NorOpENS2_15NormalizationOpENS2_12NotEqualToOpENS2_5NotOpENS2_8OneHotOpENS2_4OrOpENS2_7PReluOpENS2_13PadGradientOpENS2_5PadOpENS2_9PermuteOpENS2_13PlaceholderOpENS2_17PoolAvgGradientOpENS2_9PoolAvgOpENS2_20PoolL2NormGradientOpENS2_12PoolL2NormOpENS2_17PoolMaxGradientOpENS2_9PoolMaxOpENS2_7PowerOpENS2_17PruningGradientOpENS2_9PruningOpENS2_10QuantizeOpENS2_14RandomNormalOpENS2_23RandomTruncatedNormalOpENS2_15RandomUniformOpENS2_6RankOpENS2_14ReadVariableOpENS2_10RealPartOpENS2_20RealToHermiteanFFTOpENS2_12ReciprocalOpENS2_22ReciprocalSquareRootOpENS2_14ReductionAndOpENS2_17ReductionArgMaxOpENS2_17ReductionArgMinOpENS2_20ReductionLogSumExpOpENS2_14ReductionMaxOpENS2_15ReductionMeanOpENS2_14ReductionMinOpENS2_13ReductionOrOpENS2_15ReductionProdOpENS2_14ReductionSumOpENS2_19ReductionVarianceOpENS2_17ReinterpretCastOpENS2_7Relu6OpENS2_10ReluGradOpENS2_6ReluOpENS2_9ReshapeOpENS2_16ResizeGradientOpENS2_8ResizeOpENS2_9ReverseOpENS2_6RintOpENS2_7RoundOpENS2_24SampleGridDataGradientOpENS2_12SampleGridOpENS2_18ScatterAlongAxisOpENS2_11ScatterNDOpENS2_9ScatterOpENS2_8SelectOpENS2_7ShapeOpENS2_17SigmoidGradientOpENS2_28SigmoidGradientWithSigmoidOpENS2_13SigmoidHardOpENS2_9SigmoidOpENS2_6SignOpENS2_9SignbitOpENS2_5SinOpENS2_23SingleGateRNNGradientOpENS2_15SingleGateRNNOpENS2_6SinhOpENS2_6SizeOpENS2_7SliceOpENS2_9SoftmaxOpENS2_10SoftplusOpENS2_20SoftplusParametricOpENS2_10SoftsignOpENS2_6SortOpENS2_14SpaceToBatchOpENS2_16SpaceToDepth2DOpENS2_7SplitOpENS2_8SquareOpENS2_12SquareRootOpENS2_9SqueezeOpENS2_9StencilOpENS2_22StridedSliceGradientOpENS2_14StridedSliceOpENS2_20StridedSliceUpdateOpENS2_10SubtractOpENS2_7SwishOpENS2_5TanOpENS2_6TanhOpENS2_14TileGradientOpENS2_6TileOpENS2_14TopKGradientOpENS2_6TopKOpENS2_11TransposeOpENS2_10TruncateOpENS2_16TypeConstraintOpENS2_16UnrealizedFoldOpENS2_19UpdateRandomStateOpENS2_20VariableFromTensorOpENS2_6XnorOpENS2_5XorOpEEEEvv((uint64_t)this);
  mlir::Dialect::addOperations<mlir::mps::serialization::ConditionOp,mlir::mps::serialization::ForOp,mlir::mps::serialization::IfOp,mlir::mps::serialization::ExtractOp,mlir::mps::serialization::FromElementsOp,mlir::mps::serialization::FuncOp,mlir::mps::serialization::ModuleOp,mlir::mps::serialization::ReturnOp,mlir::mps::serialization::WhileOp,mlir::mps::serialization::YieldOp>((uint64_t)this);
  mlir::Dialect::addAttributes<mlir::mps::TensorDataLayoutAttr,mlir::mps::ReductionModeAttr,mlir::mps::DeviceHintAttr,mlir::mps::ScatterModeAttr,mlir::mps::PaddingModeAttr,mlir::mps::SamplingModeAttr,mlir::mps::NearestRoundingModeAttr,mlir::mps::SparseTensorStorageAttr,mlir::mps::MetalPixelFormatAttr,mlir::mps::NormalSamplingMethodAttr,mlir::mps::PaddingStyleAttr,mlir::mps::PoolIndicesModeAttr,mlir::mps::RNNActivationAttr,mlir::mps::LSTMGateLayoutAttr,mlir::mps::GRUGateLayoutAttr,mlir::mps::StencilPaddingModeAttr,mlir::mps::CropResizeAlignmentModeAttr,mlir::mps::CropResizeCoordinateModeAttr,mlir::mps::PruningMetricAttr,mlir::mps::PruningStructureAttr,mlir::mps::SimilarityTypeAttr,mlir::mps::FFTScalingModeAttr,mlir::mps::MPSBufferTensorAttr,mlir::mps::CallInlineModeAttr>((uint64_t)this);
  mlir::Dialect::addInterfaces<mlir::mps::MPSInlinerInterface,mlir::mps::MPSBytecodeDialectInterface>(this);
  v2 = (mlir::mps::MPSResourceBlobManagerInterface *)operator new(0x48uLL);
  v5 = mlir::mps::MPSResourceBlobManagerInterface::MPSResourceBlobManagerInterface(v2, this);
  mlir::Dialect::addInterface((uint64_t)this, &v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  mlir::Dialect::addInterface<mlir::mps::MPSOpAsmInterface,mlir::mps::MPSResourceBlobManagerInterface &>((uint64_t)this, (uint64_t)v2);
  return mlir::Dialect::addType<mlir::mps::NF4Type>((uint64_t)this);
}

uint64_t _ZN4mlir7Dialect13addOperationsIJNS_3mps6ACosOpENS2_7ACoshOpENS2_6ASinOpENS2_7ASinhOpENS2_7ATan2OpENS2_6ATanOpENS2_7ATanhOpENS2_10AbsoluteOpENS2_16AbsoluteSquareOpENS2_5AddOpENS2_5AndOpENS2_16AssignVariableOpENS2_10BandPartOpENS2_14BatchToSpaceOpENS2_13BiasAddGradOpENS2_9BiasAddOpENS2_12BitwiseAndOpENS2_18BitwiseLeftShiftOpENS2_12BitwiseNotOpENS2_11BitwiseOrOpENS2_17BitwisePopcountOpENS2_19BitwiseRightShiftOpENS2_12BitwiseXorOpENS2_23BroadcastGradientArgsOpENS2_13BroadcastToOpENS2_6CallOpENS2_6CastOpENS2_6CeilOpENS2_7ClampOpENS2_9ColToImOpENS2_8ConcatOpENS2_11ConjugateOpENS2_10ConstantOpENS2_20Conv2DDataGradientOpENS2_8Conv2DOpENS2_23Conv2DWeightsGradientOpENS2_20Conv3DDataGradientOpENS2_8Conv3DOpENS2_23Conv3DWeightsGradientOpENS2_5CosOpENS2_6CoshOpENS2_12CostVolumeOpENS2_15CreateComplexOpENS2_21CreateTextureTensorOpENS2_6CropOpENS2_12CropResizeOpENS2_19CumulativeMaximumOpENS2_19CumulativeMinimumOpENS2_19CumulativeProductOpENS2_15CumulativeSumOpENS2_9DegammaOpENS2_16DepthToSpace2DOpENS2_29DepthwiseConv2DDataGradientOpENS2_17DepthwiseConv2DOpENS2_32DepthwiseConv2DWeightsGradientOpENS2_29DepthwiseConv3DDataGradientOpENS2_17DepthwiseConv3DOpENS2_32DepthwiseConv3DWeightsGradientOpENS2_15DequantizeLUTOpENS2_12DequantizeOpENS2_15DimensionSizeOpENS2_7DiracOpENS2_8DivideOpENS2_18DynamicShapeCastOpENS2_5EluOpENS2_9EqualToOpENS2_5ErfOpENS2_12ExpandDimsOpENS2_16ExponentBase10OpENS2_15ExponentBase2OpENS2_10ExponentOpENS2_22FastFourierTransformOpENS2_11Flatten2DOpENS2_13FloorDivideOpENS2_7FloorOpENS2_13GRUGradientOpENS2_5GRUOpENS2_17GatherAlongAxisOpENS2_10GatherNDOpENS2_8GatherOpENS2_6GeluOpENS2_10GetCoordOpENS2_13GreaterThanOpENS2_22GreaterThanOrEqualToOpENS2_17HammingDistanceOpENS2_20HermiteanToRealFFTOpENS2_10IdentityOpENS2_9ImToColOpENS2_15ImaginaryPartOpENS2_23InitRandomPhiloxStateOpENS2_14InstanceNormOpENS2_10IsFiniteOpENS2_12IsInfiniteOpENS2_7IsNaNOpENS2_8LPNormOpENS2_14LSTMGradientOpENS2_6LSTMOpENS2_11LeakyReluOpENS2_10LessThanOpENS2_19LessThanOrEqualToOpENS2_30LocalConvolutionDataGradientOpENS2_18LocalConvolutionOpENS2_32LocalConvolutionWeightGradientOpENS2_17LogarithmBase10OpENS2_16LogarithmBase2OpENS2_11LogarithmOpENS2_8MatMulOpENS2_25MaterializeSparseTensorOpENS2_23MatrixDecompositionLUOpENS2_15MatrixInverseOpENS2_16MatrixSolverLUOpENS2_9MaximumOpENS2_9MinimumOpENS2_8ModuloOpENS2_10MultiplyOpENS2_7NReluOpENS2_6NandOpENS2_10NegativeOpENS2_23NonMaximumSuppressionOpENS2_9NonZeroOpENS2_5NorOpENS2_15NormalizationOpENS2_12NotEqualToOpENS2_5NotOpENS2_8OneHotOpENS2_4OrOpENS2_7PReluOpENS2_13PadGradientOpENS2_5PadOpENS2_9PermuteOpENS2_13PlaceholderOpENS2_17PoolAvgGradientOpENS2_9PoolAvgOpENS2_20PoolL2NormGradientOpENS2_12PoolL2NormOpENS2_17PoolMaxGradientOpENS2_9PoolMaxOpENS2_7PowerOpENS2_17PruningGradientOpENS2_9PruningOpENS2_10QuantizeOpENS2_14RandomNormalOpENS2_23RandomTruncatedNormalOpENS2_15RandomUniformOpENS2_6RankOpENS2_14ReadVariableOpENS2_10RealPartOpENS2_20RealToHermiteanFFTOpENS2_12ReciprocalOpENS2_22ReciprocalSquareRootOpENS2_14ReductionAndOpENS2_17ReductionArgMaxOpENS2_17ReductionArgMinOpENS2_20ReductionLogSumExpOpENS2_14ReductionMaxOpENS2_15ReductionMeanOpENS2_14ReductionMinOpENS2_13ReductionOrOpENS2_15ReductionProdOpENS2_14ReductionSumOpENS2_19ReductionVarianceOpENS2_17ReinterpretCastOpENS2_7Relu6OpENS2_10ReluGradOpENS2_6ReluOpENS2_9ReshapeOpENS2_16ResizeGradientOpENS2_8ResizeOpENS2_9ReverseOpENS2_6RintOpENS2_7RoundOpENS2_24SampleGridDataGradientOpENS2_12SampleGridOpENS2_18ScatterAlongAxisOpENS2_11ScatterNDOpENS2_9ScatterOpENS2_8SelectOpENS2_7ShapeOpENS2_17SigmoidGradientOpENS2_28SigmoidGradientWithSigmoidOpENS2_13SigmoidHardOpENS2_9SigmoidOpENS2_6SignOpENS2_9SignbitOpENS2_5SinOpENS2_23SingleGateRNNGradientOpENS2_15SingleGateRNNOpENS2_6SinhOpENS2_6SizeOpENS2_7SliceOpENS2_9SoftmaxOpENS2_10SoftplusOpENS2_20SoftplusParametricOpENS2_10SoftsignOpENS2_6SortOpENS2_14SpaceToBatchOpENS2_16SpaceToDepth2DOpENS2_7SplitOpENS2_8SquareOpENS2_12SquareRootOpENS2_9SqueezeOpENS2_9StencilOpENS2_22StridedSliceGradientOpENS2_14StridedSliceOpENS2_20StridedSliceUpdateOpENS2_10SubtractOpENS2_7SwishOpENS2_5TanOpENS2_6TanhOpENS2_14TileGradientOpENS2_6TileOpENS2_14TopKGradientOpENS2_6TopKOpENS2_11TransposeOpENS2_10TruncateOpENS2_16TypeConstraintOpENS2_16UnrealizedFoldOpENS2_19UpdateRandomStateOpENS2_20VariableFromTensorOpENS2_6XnorOpENS2_5XorOpEEEEvv(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  _QWORD *v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  _QWORD *v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  _QWORD *v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t result;
  _QWORD *v432;

  v2 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v3 = (uint64_t)v432;
  v432 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v5 = (uint64_t)v432;
  v432 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v7 = (uint64_t)v432;
  v432 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v9 = (uint64_t)v432;
  v432 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v11 = (uint64_t)v432;
  v432 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v13 = (uint64_t)v432;
  v432 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v15 = (uint64_t)v432;
  v432 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::Model(v16, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v17 = (uint64_t)v432;
  v432 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::Model(v18, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v19 = (uint64_t)v432;
  v432 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::Model(v20, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v21 = (uint64_t)v432;
  v432 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::Model(v22, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v23 = (uint64_t)v432;
  v432 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  mlir::RegisteredOperationName::insert<mlir::mps::AssignVariableOp>(a1);
  v24 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::Model(v24, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v25 = (uint64_t)v432;
  v432 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::Model(v26, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::BatchToSpaceOp::getAttributeNames(void)::attrNames, 1);
  v27 = (uint64_t)v432;
  v432 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::Model(v28, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::BiasAddGradOp::getAttributeNames(void)::attrNames, 1);
  v29 = (uint64_t)v432;
  v432 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::Model(v30, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::BiasAddOp::getAttributeNames(void)::attrNames, 1);
  v31 = (uint64_t)v432;
  v432 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseAndOp>::Model(v32, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v33 = (uint64_t)v432;
  v432 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseLeftShiftOp>::Model(v34, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v35 = (uint64_t)v432;
  v432 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseNotOp>::Model(v36, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v37 = (uint64_t)v432;
  v432 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseOrOp>::Model(v38, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v39 = (uint64_t)v432;
  v432 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BitwisePopcountOp>::Model(v40, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v41 = (uint64_t)v432;
  v432 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseRightShiftOp>::Model(v42, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v43 = (uint64_t)v432;
  v432 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseXorOp>::Model(v44, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v45 = (uint64_t)v432;
  v432 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BroadcastGradientArgsOp>::Model(v46, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v47 = (uint64_t)v432;
  v432 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::BroadcastToOp>::Model(v48, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v49 = (uint64_t)v432;
  v432 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  mlir::RegisteredOperationName::insert<mlir::mps::CallOp>(a1);
  v50 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CastOp>::Model(v50, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::CastOp::getAttributeNames(void)::attrNames, 1);
  v51 = (uint64_t)v432;
  v432 = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CeilOp>::Model(v52, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v53 = (uint64_t)v432;
  v432 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ClampOp>::Model(v54, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v55 = (uint64_t)v432;
  v432 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ColToImOp>::Model(v56, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ColToImOp::getAttributeNames(void)::attrNames, 5);
  v57 = (uint64_t)v432;
  v432 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ConcatOp>::Model(v58, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ConcatOp::getAttributeNames(void)::attrNames, 1);
  v59 = (uint64_t)v432;
  v432 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ConjugateOp>::Model(v60, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v61 = (uint64_t)v432;
  v432 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  mlir::RegisteredOperationName::insert<mlir::mps::ConstantOp>(a1);
  v62 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::Conv2DDataGradientOp>::Model(v62, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::Conv2DDataGradientOp::getAttributeNames(void)::attrNames, 7);
  v63 = (uint64_t)v432;
  v432 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::Conv2DOp>::Model(v64, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::Conv2DOp::getAttributeNames(void)::attrNames, 7);
  v65 = (uint64_t)v432;
  v432 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::Conv2DWeightsGradientOp>::Model(v66, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::Conv2DWeightsGradientOp::getAttributeNames(void)::attrNames, 7);
  v67 = (uint64_t)v432;
  v432 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::Conv3DDataGradientOp>::Model(v68, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::Conv3DDataGradientOp::getAttributeNames(void)::attrNames, 7);
  v69 = (uint64_t)v432;
  v432 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::Conv3DOp>::Model(v70, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::Conv3DOp::getAttributeNames(void)::attrNames, 7);
  v71 = (uint64_t)v432;
  v432 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::Conv3DWeightsGradientOp>::Model(v72, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::Conv3DWeightsGradientOp::getAttributeNames(void)::attrNames, 7);
  v73 = (uint64_t)v432;
  v432 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CosOp>::Model(v74, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v75 = (uint64_t)v432;
  v432 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CoshOp>::Model(v76, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v77 = (uint64_t)v432;
  v432 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CostVolumeOp>::Model(v78, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::CostVolumeOp::getAttributeNames(void)::attrNames, 7);
  v79 = (uint64_t)v432;
  v432 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CreateComplexOp>::Model(v80, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v81 = (uint64_t)v432;
  v432 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CreateTextureTensorOp>::Model(v82, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::CreateTextureTensorOp::getAttributeNames(void)::attrNames, 2);
  v83 = (uint64_t)v432;
  v432 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CropOp>::Model(v84, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v85 = (uint64_t)v432;
  v432 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CropResizeOp>::Model(v86, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::CropResizeOp::getAttributeNames(void)::attrNames, 7);
  v87 = (uint64_t)v432;
  v432 = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CumulativeMaximumOp>::Model(v88, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::CumulativeMaximumOp::getAttributeNames(void)::attrNames, 2);
  v89 = (uint64_t)v432;
  v432 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CumulativeMinimumOp>::Model(v90, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::CumulativeMinimumOp::getAttributeNames(void)::attrNames, 2);
  v91 = (uint64_t)v432;
  v432 = 0;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  v92 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CumulativeProductOp>::Model(v92, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::CumulativeProductOp::getAttributeNames(void)::attrNames, 2);
  v93 = (uint64_t)v432;
  v432 = 0;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v94 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::CumulativeSumOp>::Model(v94, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::CumulativeSumOp::getAttributeNames(void)::attrNames, 2);
  v95 = (uint64_t)v432;
  v432 = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v96 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DegammaOp>::Model(v96, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v97 = (uint64_t)v432;
  v432 = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DepthToSpace2DOp>::Model(v98, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::DepthToSpace2DOp::getAttributeNames(void)::attrNames, 2);
  v99 = (uint64_t)v432;
  v432 = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv2DDataGradientOp>::Model(v100, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::DepthwiseConv2DDataGradientOp::getAttributeNames(void)::attrNames, 6);
  v101 = (uint64_t)v432;
  v432 = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv2DOp>::Model(v102, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::DepthwiseConv2DOp::getAttributeNames(void)::attrNames, 6);
  v103 = (uint64_t)v432;
  v432 = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv2DWeightsGradientOp>::Model(v104, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::DepthwiseConv2DWeightsGradientOp::getAttributeNames(void)::attrNames, 6);
  v105 = (uint64_t)v432;
  v432 = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv3DDataGradientOp>::Model(v106, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::DepthwiseConv3DDataGradientOp::getAttributeNames(void)::attrNames, 5);
  v107 = (uint64_t)v432;
  v432 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv3DOp>::Model(v108, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::DepthwiseConv3DOp::getAttributeNames(void)::attrNames, 5);
  v109 = (uint64_t)v432;
  v432 = 0;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  v110 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv3DWeightsGradientOp>::Model(v110, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::DepthwiseConv3DWeightsGradientOp::getAttributeNames(void)::attrNames, 5);
  v111 = (uint64_t)v432;
  v432 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DequantizeLUTOp>::Model(v112, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::DequantizeLUTOp::getAttributeNames(void)::attrNames, 1);
  v113 = (uint64_t)v432;
  v432 = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v114 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DequantizeOp>::Model(v114, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::DequantizeOp::getAttributeNames(void)::attrNames, 2);
  v115 = (uint64_t)v432;
  v432 = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  v116 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DimensionSizeOp>::Model(v116, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v117 = (uint64_t)v432;
  v432 = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DiracOp>::Model(v118, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v119 = (uint64_t)v432;
  v432 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DivideOp>::Model(v120, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v121 = (uint64_t)v432;
  v432 = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::DynamicShapeCastOp>::Model(v122, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::DynamicShapeCastOp::getAttributeNames(void)::attrNames, 1);
  v123 = (uint64_t)v432;
  v432 = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::EluOp>::Model(v124, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v125 = (uint64_t)v432;
  v432 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::EqualToOp>::Model(v126, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v127 = (uint64_t)v432;
  v432 = 0;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  v128 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ErfOp>::Model(v128, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v129 = (uint64_t)v432;
  v432 = 0;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  v130 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ExpandDimsOp>::Model(v130, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v131 = (uint64_t)v432;
  v432 = 0;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  v132 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ExponentBase10Op>::Model(v132, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v133 = (uint64_t)v432;
  v432 = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  v134 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ExponentBase2Op>::Model(v134, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v135 = (uint64_t)v432;
  v432 = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  v136 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ExponentOp>::Model(v136, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v137 = (uint64_t)v432;
  v432 = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::FastFourierTransformOp>::Model(v138, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::FastFourierTransformOp::getAttributeNames(void)::attrNames, 2);
  v139 = (uint64_t)v432;
  v432 = 0;
  if (v139)
    (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  v140 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::Flatten2DOp>::Model(v140, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v141 = (uint64_t)v432;
  v432 = 0;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::FloorDivideOp>::Model(v142, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v143 = (uint64_t)v432;
  v432 = 0;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  v144 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::FloorOp>::Model(v144, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v145 = (uint64_t)v432;
  v432 = 0;
  if (v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  v146 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::GRUGradientOp>::Model(v146, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::GRUGradientOp::getAttributeNames(void)::attrNames, 7);
  v147 = (uint64_t)v432;
  v432 = 0;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  v148 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::GRUOp>::Model(v148, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::GRUOp::getAttributeNames(void)::attrNames, 8);
  v149 = (uint64_t)v432;
  v432 = 0;
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v150 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::GatherAlongAxisOp>::Model(v150, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::GatherAlongAxisOp::getAttributeNames(void)::attrNames, 1);
  v151 = (uint64_t)v432;
  v432 = 0;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  v152 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::GatherNDOp>::Model(v152, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::GatherNDOp::getAttributeNames(void)::attrNames, 2);
  v153 = (uint64_t)v432;
  v432 = 0;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  v154 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::GatherOp>::Model(v154, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::GatherOp::getAttributeNames(void)::attrNames, 2);
  v155 = (uint64_t)v432;
  v432 = 0;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::GeluOp>::Model(v156, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v157 = (uint64_t)v432;
  v432 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  v158 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::GetCoordOp>::Model(v158, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::GetCoordOp::getAttributeNames(void)::attrNames, 1);
  v159 = (uint64_t)v432;
  v432 = 0;
  if (v159)
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
  v160 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::GreaterThanOp>::Model(v160, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v161 = (uint64_t)v432;
  v432 = 0;
  if (v161)
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
  v162 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::GreaterThanOrEqualToOp>::Model(v162, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v163 = (uint64_t)v432;
  v432 = 0;
  if (v163)
    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  v164 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::HammingDistanceOp>::Model(v164, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::HammingDistanceOp::getAttributeNames(void)::attrNames, 1);
  v165 = (uint64_t)v432;
  v432 = 0;
  if (v165)
    (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  v166 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::HermiteanToRealFFTOp>::Model(v166, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::HermiteanToRealFFTOp::getAttributeNames(void)::attrNames, 3);
  v167 = (uint64_t)v432;
  v432 = 0;
  if (v167)
    (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
  v168 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::IdentityOp>::Model(v168, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v169 = (uint64_t)v432;
  v432 = 0;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ImToColOp>::Model(v170, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ImToColOp::getAttributeNames(void)::attrNames, 5);
  v171 = (uint64_t)v432;
  v432 = 0;
  if (v171)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  v172 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ImaginaryPartOp>::Model(v172, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v173 = (uint64_t)v432;
  v432 = 0;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  v174 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::InitRandomPhiloxStateOp>::Model(v174, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v175 = (uint64_t)v432;
  v432 = 0;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  v176 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::InstanceNormOp>::Model(v176, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::InstanceNormOp::getAttributeNames(void)::attrNames, 1);
  v177 = (uint64_t)v432;
  v432 = 0;
  if (v177)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  v178 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::IsFiniteOp>::Model(v178, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v179 = (uint64_t)v432;
  v432 = 0;
  if (v179)
    (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
  v180 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::IsInfiniteOp>::Model(v180, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v181 = (uint64_t)v432;
  v432 = 0;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  v182 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::IsNaNOp>::Model(v182, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v183 = (uint64_t)v432;
  v432 = 0;
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  v184 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LPNormOp>::Model(v184, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v185 = (uint64_t)v432;
  v432 = 0;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  v186 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LSTMGradientOp>::Model(v186, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::LSTMGradientOp::getAttributeNames(void)::attrNames, 7);
  v187 = (uint64_t)v432;
  v432 = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LSTMOp>::Model(v188, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::LSTMOp::getAttributeNames(void)::attrNames, 8);
  v189 = (uint64_t)v432;
  v432 = 0;
  if (v189)
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  v190 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LeakyReluOp>::Model(v190, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v191 = (uint64_t)v432;
  v432 = 0;
  if (v191)
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
  v192 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LessThanOp>::Model(v192, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v193 = (uint64_t)v432;
  v432 = 0;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  v194 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LessThanOrEqualToOp>::Model(v194, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v195 = (uint64_t)v432;
  v432 = 0;
  if (v195)
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
  v196 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LocalConvolutionDataGradientOp>::Model(v196, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::LocalConvolutionDataGradientOp::getAttributeNames(void)::attrNames, 3);
  v197 = (uint64_t)v432;
  v432 = 0;
  if (v197)
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  v198 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LocalConvolutionOp>::Model(v198, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::LocalConvolutionOp::getAttributeNames(void)::attrNames, 3);
  v199 = (uint64_t)v432;
  v432 = 0;
  if (v199)
    (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
  v200 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LocalConvolutionWeightGradientOp>::Model(v200, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::LocalConvolutionWeightGradientOp::getAttributeNames(void)::attrNames, 3);
  v201 = (uint64_t)v432;
  v432 = 0;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  v202 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LogarithmBase10Op>::Model(v202, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v203 = (uint64_t)v432;
  v432 = 0;
  if (v203)
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  v204 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LogarithmBase2Op>::Model(v204, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v205 = (uint64_t)v432;
  v432 = 0;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::LogarithmOp>::Model(v206, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v207 = (uint64_t)v432;
  v432 = 0;
  if (v207)
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  v208 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::MatMulOp>::Model(v208, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::MatMulOp::getAttributeNames(void)::attrNames, 2);
  v209 = (uint64_t)v432;
  v432 = 0;
  if (v209)
    (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
  mlir::RegisteredOperationName::insert<mlir::mps::MaterializeSparseTensorOp>(a1);
  v210 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::MatrixDecompositionLUOp>::Model(v210, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v211 = (uint64_t)v432;
  v432 = 0;
  if (v211)
    (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
  v212 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::MatrixInverseOp>::Model(v212, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v213 = (uint64_t)v432;
  v432 = 0;
  if (v213)
    (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
  v214 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::MatrixSolverLUOp>::Model(v214, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v215 = (uint64_t)v432;
  v432 = 0;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  v216 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::MaximumOp>::Model(v216, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v217 = (uint64_t)v432;
  v432 = 0;
  if (v217)
    (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
  v218 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::MinimumOp>::Model(v218, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v219 = (uint64_t)v432;
  v432 = 0;
  if (v219)
    (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
  v220 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ModuloOp>::Model(v220, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v221 = (uint64_t)v432;
  v432 = 0;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  v222 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::MultiplyOp>::Model(v222, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v223 = (uint64_t)v432;
  v432 = 0;
  if (v223)
    (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
  v224 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::NReluOp>::Model(v224, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v225 = (uint64_t)v432;
  v432 = 0;
  if (v225)
    (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
  v226 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::NandOp>::Model(v226, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v227 = (uint64_t)v432;
  v432 = 0;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  v228 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::NegativeOp>::Model(v228, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v229 = (uint64_t)v432;
  v432 = 0;
  if (v229)
    (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
  v230 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::NonMaximumSuppressionOp>::Model(v230, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::NonMaximumSuppressionOp::getAttributeNames(void)::attrNames, 3);
  v231 = (uint64_t)v432;
  v432 = 0;
  if (v231)
    (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
  v232 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::NonZeroOp>::Model(v232, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v233 = (uint64_t)v432;
  v432 = 0;
  if (v233)
    (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
  v234 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::NorOp>::Model(v234, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v235 = (uint64_t)v432;
  v432 = 0;
  if (v235)
    (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
  v236 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::NormalizationOp>::Model(v236, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::NormalizationOp::getAttributeNames(void)::attrNames, 1);
  v237 = (uint64_t)v432;
  v432 = 0;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v238 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::NotEqualToOp>::Model(v238, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v239 = (uint64_t)v432;
  v432 = 0;
  if (v239)
    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
  v240 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::NotOp>::Model(v240, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v241 = (uint64_t)v432;
  v432 = 0;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  v242 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::OneHotOp>::Model(v242, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::OneHotOp::getAttributeNames(void)::attrNames, 1);
  v243 = (uint64_t)v432;
  v432 = 0;
  if (v243)
    (*(void (**)(uint64_t))(*(_QWORD *)v243 + 8))(v243);
  v244 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::OrOp>::Model(v244, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v245 = (uint64_t)v432;
  v432 = 0;
  if (v245)
    (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
  v246 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PReluOp>::Model(v246, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v247 = (uint64_t)v432;
  v432 = 0;
  if (v247)
    (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
  v248 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PadGradientOp>::Model(v248, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::PadGradientOp::getAttributeNames(void)::attrNames, 1);
  v249 = (uint64_t)v432;
  v432 = 0;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  v250 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PadOp>::Model(v250, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::PadOp::getAttributeNames(void)::attrNames, 1);
  v251 = (uint64_t)v432;
  v432 = 0;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  v252 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PermuteOp>::Model(v252, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v253 = (uint64_t)v432;
  v432 = 0;
  if (v253)
    (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
  mlir::RegisteredOperationName::insert<mlir::mps::PlaceholderOp>(a1);
  v254 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PoolAvgGradientOp>::Model(v254, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::PoolAvgGradientOp::getAttributeNames(void)::attrNames, 7);
  v255 = (uint64_t)v432;
  v432 = 0;
  if (v255)
    (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
  v256 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PoolAvgOp>::Model(v256, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::PoolAvgOp::getAttributeNames(void)::attrNames, 7);
  v257 = (uint64_t)v432;
  v432 = 0;
  if (v257)
    (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  v258 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PoolL2NormGradientOp>::Model(v258, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::PoolL2NormGradientOp::getAttributeNames(void)::attrNames, 7);
  v259 = (uint64_t)v432;
  v432 = 0;
  if (v259)
    (*(void (**)(uint64_t))(*(_QWORD *)v259 + 8))(v259);
  v260 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PoolL2NormOp>::Model(v260, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::PoolL2NormOp::getAttributeNames(void)::attrNames, 7);
  v261 = (uint64_t)v432;
  v432 = 0;
  if (v261)
    (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  v262 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PoolMaxGradientOp>::Model(v262, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::PoolMaxGradientOp::getAttributeNames(void)::attrNames, 10);
  v263 = (uint64_t)v432;
  v432 = 0;
  if (v263)
    (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
  v264 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PoolMaxOp>::Model(v264, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::PoolMaxOp::getAttributeNames(void)::attrNames, 9);
  v265 = (uint64_t)v432;
  v432 = 0;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  v266 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PowerOp>::Model(v266, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v267 = (uint64_t)v432;
  v432 = 0;
  if (v267)
    (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  v268 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PruningGradientOp>::Model(v268, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::PruningGradientOp::getAttributeNames(void)::attrNames, 3);
  v269 = (uint64_t)v432;
  v432 = 0;
  if (v269)
    (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
  v270 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::PruningOp>::Model(v270, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::PruningOp::getAttributeNames(void)::attrNames, 3);
  v271 = (uint64_t)v432;
  v432 = 0;
  if (v271)
    (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
  v272 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::QuantizeOp>::Model(v272, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::QuantizeOp::getAttributeNames(void)::attrNames, 2);
  v273 = (uint64_t)v432;
  v432 = 0;
  if (v273)
    (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  v274 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::RandomNormalOp>::Model(v274, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::RandomNormalOp::getAttributeNames(void)::attrNames, 4);
  v275 = (uint64_t)v432;
  v432 = 0;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  v276 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::RandomTruncatedNormalOp>::Model(v276, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::RandomTruncatedNormalOp::getAttributeNames(void)::attrNames, 6);
  v277 = (uint64_t)v432;
  v432 = 0;
  if (v277)
    (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
  v278 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::RandomUniformOp>::Model(v278, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::RandomUniformOp::getAttributeNames(void)::attrNames, 1);
  v279 = (uint64_t)v432;
  v432 = 0;
  if (v279)
    (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
  v280 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::RankOp>::Model(v280, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v281 = (uint64_t)v432;
  v432 = 0;
  if (v281)
    (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  v282 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReadVariableOp>::Model(v282, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v283 = (uint64_t)v432;
  v432 = 0;
  if (v283)
    (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
  v284 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::RealPartOp>::Model(v284, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v285 = (uint64_t)v432;
  v432 = 0;
  if (v285)
    (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  v286 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::RealToHermiteanFFTOp>::Model(v286, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::RealToHermiteanFFTOp::getAttributeNames(void)::attrNames, 2);
  v287 = (uint64_t)v432;
  v432 = 0;
  if (v287)
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
  v288 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReciprocalOp>::Model(v288, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v289 = (uint64_t)v432;
  v432 = 0;
  if (v289)
    (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
  v290 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReciprocalSquareRootOp>::Model(v290, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v291 = (uint64_t)v432;
  v432 = 0;
  if (v291)
    (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
  v292 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionAndOp>::Model(v292, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionAndOp::getAttributeNames(void)::attrNames, 1);
  v293 = (uint64_t)v432;
  v432 = 0;
  if (v293)
    (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
  v294 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionArgMaxOp>::Model(v294, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionArgMaxOp::getAttributeNames(void)::attrNames, 1);
  v295 = (uint64_t)v432;
  v432 = 0;
  if (v295)
    (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
  v296 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionArgMinOp>::Model(v296, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionArgMinOp::getAttributeNames(void)::attrNames, 1);
  v297 = (uint64_t)v432;
  v432 = 0;
  if (v297)
    (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
  v298 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionLogSumExpOp>::Model(v298, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionLogSumExpOp::getAttributeNames(void)::attrNames, 1);
  v299 = (uint64_t)v432;
  v432 = 0;
  if (v299)
    (*(void (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
  v300 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionMaxOp>::Model(v300, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionMaxOp::getAttributeNames(void)::attrNames, 2);
  v301 = (uint64_t)v432;
  v432 = 0;
  if (v301)
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
  v302 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionMeanOp>::Model(v302, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionMeanOp::getAttributeNames(void)::attrNames, 1);
  v303 = (uint64_t)v432;
  v432 = 0;
  if (v303)
    (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
  v304 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionMinOp>::Model(v304, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionMinOp::getAttributeNames(void)::attrNames, 2);
  v305 = (uint64_t)v432;
  v432 = 0;
  if (v305)
    (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
  v306 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionOrOp>::Model(v306, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionOrOp::getAttributeNames(void)::attrNames, 1);
  v307 = (uint64_t)v432;
  v432 = 0;
  if (v307)
    (*(void (**)(uint64_t))(*(_QWORD *)v307 + 8))(v307);
  v308 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionProdOp>::Model(v308, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionProdOp::getAttributeNames(void)::attrNames, 1);
  v309 = (uint64_t)v432;
  v432 = 0;
  if (v309)
    (*(void (**)(uint64_t))(*(_QWORD *)v309 + 8))(v309);
  v310 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionSumOp>::Model(v310, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionSumOp::getAttributeNames(void)::attrNames, 1);
  v311 = (uint64_t)v432;
  v432 = 0;
  if (v311)
    (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
  v312 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionVarianceOp>::Model(v312, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReductionVarianceOp::getAttributeNames(void)::attrNames, 1);
  v313 = (uint64_t)v432;
  v432 = 0;
  if (v313)
    (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
  v314 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReinterpretCastOp>::Model(v314, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReinterpretCastOp::getAttributeNames(void)::attrNames, 1);
  v315 = (uint64_t)v432;
  v432 = 0;
  if (v315)
    (*(void (**)(uint64_t))(*(_QWORD *)v315 + 8))(v315);
  v316 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::Relu6Op>::Model(v316, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v317 = (uint64_t)v432;
  v432 = 0;
  if (v317)
    (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
  v318 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReluGradOp>::Model(v318, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v319 = (uint64_t)v432;
  v432 = 0;
  if (v319)
    (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
  v320 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReluOp>::Model(v320, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v321 = (uint64_t)v432;
  v432 = 0;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  v322 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReshapeOp>::Model(v322, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ReshapeOp::getAttributeNames(void)::attrNames, 1);
  v323 = (uint64_t)v432;
  v432 = 0;
  if (v323)
    (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
  v324 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ResizeGradientOp>::Model(v324, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ResizeGradientOp::getAttributeNames(void)::attrNames, 5);
  v325 = (uint64_t)v432;
  v432 = 0;
  if (v325)
    (*(void (**)(uint64_t))(*(_QWORD *)v325 + 8))(v325);
  v326 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ResizeOp>::Model(v326, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ResizeOp::getAttributeNames(void)::attrNames, 5);
  v327 = (uint64_t)v432;
  v432 = 0;
  if (v327)
    (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
  v328 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ReverseOp>::Model(v328, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v329 = (uint64_t)v432;
  v432 = 0;
  if (v329)
    (*(void (**)(uint64_t))(*(_QWORD *)v329 + 8))(v329);
  v330 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::RintOp>::Model(v330, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v331 = (uint64_t)v432;
  v432 = 0;
  if (v331)
    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
  v332 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::RoundOp>::Model(v332, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v333 = (uint64_t)v432;
  v432 = 0;
  if (v333)
    (*(void (**)(uint64_t))(*(_QWORD *)v333 + 8))(v333);
  v334 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SampleGridDataGradientOp>::Model(v334, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::SampleGridDataGradientOp::getAttributeNames(void)::attrNames, 4);
  v335 = (uint64_t)v432;
  v432 = 0;
  if (v335)
    (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
  v336 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SampleGridOp>::Model(v336, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::SampleGridOp::getAttributeNames(void)::attrNames, 7);
  v337 = (uint64_t)v432;
  v432 = 0;
  if (v337)
    (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  v338 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ScatterAlongAxisOp>::Model(v338, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ScatterAlongAxisOp::getAttributeNames(void)::attrNames, 1);
  v339 = (uint64_t)v432;
  v432 = 0;
  if (v339)
    (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
  v340 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ScatterNDOp>::Model(v340, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ScatterNDOp::getAttributeNames(void)::attrNames, 2);
  v341 = (uint64_t)v432;
  v432 = 0;
  if (v341)
    (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
  v342 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ScatterOp>::Model(v342, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::ScatterOp::getAttributeNames(void)::attrNames, 1);
  v343 = (uint64_t)v432;
  v432 = 0;
  if (v343)
    (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
  v344 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SelectOp>::Model(v344, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v345 = (uint64_t)v432;
  v432 = 0;
  if (v345)
    (*(void (**)(uint64_t))(*(_QWORD *)v345 + 8))(v345);
  v346 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::ShapeOp>::Model(v346, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v347 = (uint64_t)v432;
  v432 = 0;
  if (v347)
    (*(void (**)(uint64_t))(*(_QWORD *)v347 + 8))(v347);
  v348 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SigmoidGradientOp>::Model(v348, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v349 = (uint64_t)v432;
  v432 = 0;
  if (v349)
    (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
  v350 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SigmoidGradientWithSigmoidOp>::Model(v350, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v351 = (uint64_t)v432;
  v432 = 0;
  if (v351)
    (*(void (**)(uint64_t))(*(_QWORD *)v351 + 8))(v351);
  v352 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SigmoidHardOp>::Model(v352, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v353 = (uint64_t)v432;
  v432 = 0;
  if (v353)
    (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
  v354 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SigmoidOp>::Model(v354, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v355 = (uint64_t)v432;
  v432 = 0;
  if (v355)
    (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
  v356 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SignOp>::Model(v356, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v357 = (uint64_t)v432;
  v432 = 0;
  if (v357)
    (*(void (**)(uint64_t))(*(_QWORD *)v357 + 8))(v357);
  v358 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SignbitOp>::Model(v358, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v359 = (uint64_t)v432;
  v432 = 0;
  if (v359)
    (*(void (**)(uint64_t))(*(_QWORD *)v359 + 8))(v359);
  v360 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SinOp>::Model(v360, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v361 = (uint64_t)v432;
  v432 = 0;
  if (v361)
    (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
  v362 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SingleGateRNNGradientOp>::Model(v362, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::SingleGateRNNGradientOp::getAttributeNames(void)::attrNames, 3);
  v363 = (uint64_t)v432;
  v432 = 0;
  if (v363)
    (*(void (**)(uint64_t))(*(_QWORD *)v363 + 8))(v363);
  v364 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SingleGateRNNOp>::Model(v364, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::SingleGateRNNOp::getAttributeNames(void)::attrNames, 3);
  v365 = (uint64_t)v432;
  v432 = 0;
  if (v365)
    (*(void (**)(uint64_t))(*(_QWORD *)v365 + 8))(v365);
  v366 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SinhOp>::Model(v366, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v367 = (uint64_t)v432;
  v432 = 0;
  if (v367)
    (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
  v368 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SizeOp>::Model(v368, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v369 = (uint64_t)v432;
  v432 = 0;
  if (v369)
    (*(void (**)(uint64_t))(*(_QWORD *)v369 + 8))(v369);
  v370 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SliceOp>::Model(v370, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v371 = (uint64_t)v432;
  v432 = 0;
  if (v371)
    (*(void (**)(uint64_t))(*(_QWORD *)v371 + 8))(v371);
  v372 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SoftmaxOp>::Model(v372, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v373 = (uint64_t)v432;
  v432 = 0;
  if (v373)
    (*(void (**)(uint64_t))(*(_QWORD *)v373 + 8))(v373);
  v374 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SoftplusOp>::Model(v374, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v375 = (uint64_t)v432;
  v432 = 0;
  if (v375)
    (*(void (**)(uint64_t))(*(_QWORD *)v375 + 8))(v375);
  v376 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SoftplusParametricOp>::Model(v376, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v377 = (uint64_t)v432;
  v432 = 0;
  if (v377)
    (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
  v378 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SoftsignOp>::Model(v378, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v379 = (uint64_t)v432;
  v432 = 0;
  if (v379)
    (*(void (**)(uint64_t))(*(_QWORD *)v379 + 8))(v379);
  v380 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SortOp>::Model(v380, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::SortOp::getAttributeNames(void)::attrNames, 1);
  v381 = (uint64_t)v432;
  v432 = 0;
  if (v381)
    (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
  v382 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SpaceToBatchOp>::Model(v382, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::SpaceToBatchOp::getAttributeNames(void)::attrNames, 1);
  v383 = (uint64_t)v432;
  v432 = 0;
  if (v383)
    (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
  v384 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SpaceToDepth2DOp>::Model(v384, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::SpaceToDepth2DOp::getAttributeNames(void)::attrNames, 2);
  v385 = (uint64_t)v432;
  v432 = 0;
  if (v385)
    (*(void (**)(uint64_t))(*(_QWORD *)v385 + 8))(v385);
  v386 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SplitOp>::Model(v386, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::SplitOp::getAttributeNames(void)::attrNames, 1);
  v387 = (uint64_t)v432;
  v432 = 0;
  if (v387)
    (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
  v388 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SquareOp>::Model(v388, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v389 = (uint64_t)v432;
  v432 = 0;
  if (v389)
    (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
  v390 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SquareRootOp>::Model(v390, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v391 = (uint64_t)v432;
  v432 = 0;
  if (v391)
    (*(void (**)(uint64_t))(*(_QWORD *)v391 + 8))(v391);
  v392 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SqueezeOp>::Model(v392, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v393 = (uint64_t)v432;
  v432 = 0;
  if (v393)
    (*(void (**)(uint64_t))(*(_QWORD *)v393 + 8))(v393);
  v394 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::StencilOp>::Model(v394, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::StencilOp::getAttributeNames(void)::attrNames, 8);
  v395 = (uint64_t)v432;
  v432 = 0;
  if (v395)
    (*(void (**)(uint64_t))(*(_QWORD *)v395 + 8))(v395);
  v396 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::StridedSliceGradientOp>::Model(v396, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::StridedSliceGradientOp::getAttributeNames(void)::attrNames, 4);
  v397 = (uint64_t)v432;
  v432 = 0;
  if (v397)
    (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
  v398 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::StridedSliceOp>::Model(v398, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::StridedSliceOp::getAttributeNames(void)::attrNames, 4);
  v399 = (uint64_t)v432;
  v432 = 0;
  if (v399)
    (*(void (**)(uint64_t))(*(_QWORD *)v399 + 8))(v399);
  v400 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::StridedSliceUpdateOp>::Model(v400, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::StridedSliceUpdateOp::getAttributeNames(void)::attrNames, 4);
  v401 = (uint64_t)v432;
  v432 = 0;
  if (v401)
    (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
  v402 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SubtractOp>::Model(v402, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v403 = (uint64_t)v432;
  v432 = 0;
  if (v403)
    (*(void (**)(uint64_t))(*(_QWORD *)v403 + 8))(v403);
  v404 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::SwishOp>::Model(v404, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v405 = (uint64_t)v432;
  v432 = 0;
  if (v405)
    (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
  v406 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::TanOp>::Model(v406, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v407 = (uint64_t)v432;
  v432 = 0;
  if (v407)
    (*(void (**)(uint64_t))(*(_QWORD *)v407 + 8))(v407);
  v408 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::TanhOp>::Model(v408, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v409 = (uint64_t)v432;
  v432 = 0;
  if (v409)
    (*(void (**)(uint64_t))(*(_QWORD *)v409 + 8))(v409);
  v410 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::TileGradientOp>::Model(v410, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v411 = (uint64_t)v432;
  v432 = 0;
  if (v411)
    (*(void (**)(uint64_t))(*(_QWORD *)v411 + 8))(v411);
  v412 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::TileOp>::Model(v412, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v413 = (uint64_t)v432;
  v432 = 0;
  if (v413)
    (*(void (**)(uint64_t))(*(_QWORD *)v413 + 8))(v413);
  v414 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::TopKGradientOp>::Model(v414, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::TopKGradientOp::getAttributeNames(void)::attrNames, 1);
  v415 = (uint64_t)v432;
  v432 = 0;
  if (v415)
    (*(void (**)(uint64_t))(*(_QWORD *)v415 + 8))(v415);
  v416 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::TopKOp>::Model(v416, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::TopKOp::getAttributeNames(void)::attrNames, 1);
  v417 = (uint64_t)v432;
  v432 = 0;
  if (v417)
    (*(void (**)(uint64_t))(*(_QWORD *)v417 + 8))(v417);
  v418 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::TransposeOp>::Model(v418, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v419 = (uint64_t)v432;
  v432 = 0;
  if (v419)
    (*(void (**)(uint64_t))(*(_QWORD *)v419 + 8))(v419);
  v420 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::TruncateOp>::Model(v420, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v421 = (uint64_t)v432;
  v432 = 0;
  if (v421)
    (*(void (**)(uint64_t))(*(_QWORD *)v421 + 8))(v421);
  v422 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::TypeConstraintOp>::Model(v422, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, (uint64_t)&mlir::mps::TypeConstraintOp::getAttributeNames(void)::attrNames, 1);
  v423 = (uint64_t)v432;
  v432 = 0;
  if (v423)
    (*(void (**)(uint64_t))(*(_QWORD *)v423 + 8))(v423);
  mlir::RegisteredOperationName::insert<mlir::mps::UnrealizedFoldOp>(a1);
  v424 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::UpdateRandomStateOp>::Model(v424, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v425 = (uint64_t)v432;
  v432 = 0;
  if (v425)
    (*(void (**)(uint64_t))(*(_QWORD *)v425 + 8))(v425);
  v426 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::VariableFromTensorOp>::Model(v426, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v427 = (uint64_t)v432;
  v432 = 0;
  if (v427)
    (*(void (**)(uint64_t))(*(_QWORD *)v427 + 8))(v427);
  v428 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::XnorOp>::Model(v428, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  v429 = (uint64_t)v432;
  v432 = 0;
  if (v429)
    (*(void (**)(uint64_t))(*(_QWORD *)v429 + 8))(v429);
  v430 = operator new(0x70uLL);
  v432 = mlir::RegisteredOperationName::Model<mlir::mps::XorOp>::Model(v430, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v432, 0, 0);
  result = (uint64_t)v432;
  v432 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::Dialect::addOperations<mlir::mps::serialization::ConditionOp,mlir::mps::serialization::ForOp,mlir::mps::serialization::IfOp,mlir::mps::serialization::ExtractOp,mlir::mps::serialization::FromElementsOp,mlir::mps::serialization::FuncOp,mlir::mps::serialization::ModuleOp,mlir::mps::serialization::ReturnOp,mlir::mps::serialization::WhileOp,mlir::mps::serialization::YieldOp>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  _QWORD *v16;

  v2 = operator new(0x70uLL);
  v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::ConditionOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, 0, 0);
  v3 = (uint64_t)v16;
  v16 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  mlir::RegisteredOperationName::insert<mlir::mps::serialization::ForOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mps::serialization::IfOp>(a1);
  v4 = operator new(0x70uLL);
  v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::ExtractOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, 0, 0);
  v5 = (uint64_t)v16;
  v16 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new(0x70uLL);
  v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::FromElementsOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, 0, 0);
  v7 = (uint64_t)v16;
  v16 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = operator new(0x70uLL);
  v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::FuncOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, (uint64_t)&mlir::mps::serialization::FuncOp::getAttributeNames(void)::attrNames, 5);
  v9 = (uint64_t)v16;
  v16 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = operator new(0x70uLL);
  v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::ModuleOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, (uint64_t)&mlir::mps::serialization::ModuleOp::getAttributeNames(void)::attrNames, 2);
  v11 = (uint64_t)v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = operator new(0x70uLL);
  v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::ReturnOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, 0, 0);
  v13 = (uint64_t)v16;
  v16 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  mlir::RegisteredOperationName::insert<mlir::mps::serialization::WhileOp>(a1);
  v14 = operator new(0x70uLL);
  v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::YieldOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, 0, 0);
  result = (uint64_t)v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *mlir::Dialect::addAttributes<mlir::mps::TensorDataLayoutAttr,mlir::mps::ReductionModeAttr,mlir::mps::DeviceHintAttr,mlir::mps::ScatterModeAttr,mlir::mps::PaddingModeAttr,mlir::mps::SamplingModeAttr,mlir::mps::NearestRoundingModeAttr,mlir::mps::SparseTensorStorageAttr,mlir::mps::MetalPixelFormatAttr,mlir::mps::NormalSamplingMethodAttr,mlir::mps::PaddingStyleAttr,mlir::mps::PoolIndicesModeAttr,mlir::mps::RNNActivationAttr,mlir::mps::LSTMGateLayoutAttr,mlir::mps::GRUGateLayoutAttr,mlir::mps::StencilPaddingModeAttr,mlir::mps::CropResizeAlignmentModeAttr,mlir::mps::CropResizeCoordinateModeAttr,mlir::mps::PruningMetricAttr,mlir::mps::PruningStructureAttr,mlir::mps::SimilarityTypeAttr,mlir::mps::FFTScalingModeAttr,mlir::mps::MPSBufferTensorAttr,mlir::mps::CallInlineModeAttr>(uint64_t a1)
{
  mlir::Dialect::addAttribute<mlir::mps::TensorDataLayoutAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::ReductionModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::DeviceHintAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::ScatterModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::PaddingModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::SamplingModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::NearestRoundingModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::SparseTensorStorageAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::MetalPixelFormatAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::NormalSamplingMethodAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::PaddingStyleAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::PoolIndicesModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::RNNActivationAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::LSTMGateLayoutAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::GRUGateLayoutAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::StencilPaddingModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::CropResizeAlignmentModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::CropResizeCoordinateModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::PruningMetricAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::PruningStructureAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::SimilarityTypeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::FFTScalingModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::MPSBufferTensorAttr>(a1);
  return mlir::Dialect::addAttribute<mlir::mps::CallInlineModeAttr>(a1);
}

