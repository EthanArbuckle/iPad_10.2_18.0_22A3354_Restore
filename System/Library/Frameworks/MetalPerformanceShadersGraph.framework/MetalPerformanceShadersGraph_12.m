_BYTE *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(_BYTE *a1, uint64_t *a2)
{
  uint64_t Index;
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t IsNotNull;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  unsigned __int8 **v26;
  const char *v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  const char **v34;
  _QWORD *v35;
  const char **v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  char *v43;
  const char **v44;
  char *v45;
  __int128 v46;
  const char **v47;
  unsigned __int8 ***v48;
  char v49;
  uint64_t v50;
  unsigned __int8 ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  __int128 v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t Input;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  char v77;
  const char *v78;
  uint64_t v79;

  if (!a1[8]
    && *(_QWORD *)a1
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
  {
    v76 = *(_QWORD *)a1;
    Index = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&v76);
    if ((Index & 0xFF00000000) == 0)
      goto LABEL_23;
    v6 = *a2;
    v7 = (_QWORD *)a2[1];
    v8 = (uint64_t **)a2[2];
    IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v8);
    v10 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v8);
    v11 = v10;
    v13 = *(_QWORD **)(v6 + 8);
    v12 = *(_QWORD *)(v6 + 16);
    if ((unint64_t)v13 >= v12)
    {
      v73 = Index;
      v15 = *(_QWORD **)v6;
      v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(_QWORD *)v6) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_59;
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v15) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v17;
      if (v19 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_60;
      v20 = 24 * v19;
      v21 = (char *)operator new(24 * v19);
      v22 = &v21[24 * v16];
      v23 = &v21[v20];
      *(_QWORD *)v22 = *v7;
      *((_QWORD *)v22 + 1) = IsNotNull;
      *((_QWORD *)v22 + 2) = v11;
      v14 = v22 + 24;
      if (v13 == v15)
      {
        Index = v73;
        *(_QWORD *)v6 = v22;
        *(_QWORD *)(v6 + 8) = v14;
        *(_QWORD *)(v6 + 16) = v23;
        if (!v15)
          goto LABEL_22;
      }
      else
      {
        Index = v73;
        do
        {
          v24 = *(_OWORD *)(v13 - 3);
          v25 = v22 - 24;
          *((_QWORD *)v22 - 1) = *(v13 - 1);
          *(_OWORD *)(v22 - 24) = v24;
          v13 -= 3;
          v22 -= 24;
        }
        while (v13 != v15);
        *(_QWORD *)v6 = v25;
        *(_QWORD *)(v6 + 8) = v14;
        *(_QWORD *)(v6 + 16) = v23;
        if (!v15)
          goto LABEL_22;
      }
      operator delete(v15);
    }
    else
    {
      *v13 = *v7;
      v13[1] = IsNotNull;
      v13[2] = v10;
      v14 = v13 + 3;
    }
LABEL_22:
    *(_QWORD *)(v6 + 8) = v14;
LABEL_23:
    v26 = *(unsigned __int8 ***)a2[2];
    v79 = *(_QWORD *)a2[1];
    LODWORD(v78) = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v79) + 1;
    v27 = (const char *)mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v26, 0, 0, &v79, (unsigned int *)&v78);
    v28 = *a2;
    v29 = (uint64_t **)a2[2];
    v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v29);
    v31 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v29);
    v32 = v31;
    v34 = *(const char ***)(v28 + 8);
    v33 = *(_QWORD *)(v28 + 16);
    if ((unint64_t)v34 < v33)
    {
      *v34 = v27;
      v34[1] = (const char *)v30;
      v35 = v34 + 3;
      v34[2] = (const char *)v31;
      goto LABEL_37;
    }
    v74 = Index;
    v36 = *(const char ***)v28;
    v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v34 - *(_QWORD *)v28) >> 3);
    v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_59;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v36) >> 3);
    if (2 * v39 > v38)
      v38 = 2 * v39;
    if (v39 >= 0x555555555555555)
      v40 = 0xAAAAAAAAAAAAAAALL;
    else
      v40 = v38;
    if (v40 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_60;
    v41 = v27;
    v42 = 24 * v40;
    v43 = (char *)operator new(24 * v40);
    v44 = (const char **)&v43[24 * v37];
    v45 = &v43[v42];
    v27 = v41;
    *v44 = v41;
    v44[1] = (const char *)v30;
    v44[2] = (const char *)v32;
    v35 = v44 + 3;
    if (v34 == v36)
    {
      Index = v74;
      *(_QWORD *)v28 = v44;
      *(_QWORD *)(v28 + 8) = v35;
      *(_QWORD *)(v28 + 16) = v45;
      if (v36)
LABEL_36:
        operator delete(v36);
    }
    else
    {
      Index = v74;
      do
      {
        v46 = *(_OWORD *)(v34 - 3);
        v47 = v44 - 3;
        *(v44 - 1) = *(v34 - 1);
        *(_OWORD *)(v44 - 3) = v46;
        v34 -= 3;
        v44 -= 3;
      }
      while (v34 != v36);
      *(_QWORD *)v28 = v47;
      *(_QWORD *)(v28 + 8) = v35;
      *(_QWORD *)(v28 + 16) = v45;
      if (v36)
        goto LABEL_36;
    }
LABEL_37:
    *(_QWORD *)(v28 + 8) = v35;
    v48 = (unsigned __int8 ***)a2[2];
    v49 = *(_BYTE *)a2[3];
    v78 = v27;
    v79 = Index;
    v77 = v49;
    v50 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v48, 0, 0, &v78, (unint64_t *)&v79, &v77);
    v51 = (unsigned __int8 ***)a2[2];
    v52 = *a2;
    v79 = *(_QWORD *)a2[1];
    v53 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(*v51, 0, 0, &v79);
    v54 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*v51);
    v55 = v54;
    v57 = *(uint64_t **)(v52 + 8);
    v56 = *(_QWORD *)(v52 + 16);
    if ((unint64_t)v57 < v56)
    {
      *v57 = v50;
      v57[1] = v53;
      v58 = v57 + 3;
      v57[2] = v54;
      goto LABEL_51;
    }
    v59 = *(uint64_t **)v52;
    v60 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v57 - *(_QWORD *)v52) >> 3);
    v61 = v60 + 1;
    if (v60 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v75 = v27;
      v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)v59) >> 3);
      if (2 * v62 > v61)
        v61 = 2 * v62;
      if (v62 >= 0x555555555555555)
        v63 = 0xAAAAAAAAAAAAAAALL;
      else
        v63 = v61;
      if (v63 <= 0xAAAAAAAAAAAAAAALL)
      {
        v64 = 24 * v63;
        v65 = (char *)operator new(24 * v63);
        v66 = (uint64_t *)&v65[24 * v60];
        v67 = &v65[v64];
        *v66 = v50;
        v66[1] = v53;
        v66[2] = v55;
        v58 = v66 + 3;
        if (v57 == v59)
        {
          v27 = v75;
          *(_QWORD *)v52 = v66;
          *(_QWORD *)(v52 + 8) = v58;
          *(_QWORD *)(v52 + 16) = v67;
          if (!v59)
            goto LABEL_51;
        }
        else
        {
          v27 = v75;
          do
          {
            v68 = *(_OWORD *)(v57 - 3);
            v69 = v66 - 3;
            *(v66 - 1) = *(v57 - 1);
            *(_OWORD *)(v66 - 3) = v68;
            v57 -= 3;
            v66 -= 3;
          }
          while (v57 != v59);
          *(_QWORD *)v52 = v69;
          *(_QWORD *)(v52 + 8) = v58;
          *(_QWORD *)(v52 + 16) = v67;
          if (!v59)
            goto LABEL_51;
        }
        operator delete(v59);
LABEL_51:
        *(_QWORD *)(v52 + 8) = v58;
        v70 = *a2;
        Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v76);
        getTreePredicates(v70, Input, a2[2], a2[4], v27);
        a1[8] = 1;
        return a1;
      }
LABEL_60:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_59:
    abort();
  }
  return a1;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int *a5)
{
  _QWORD *v6;
  __guard *v7;
  unsigned __int8 v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v22;
  unsigned __int8 **v23;
  const char *v24;
  unint64_t v25;

  v6 = a4;
  if ((v8 & 1) != 0)
    return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(a1, a2, a3, v7[349], v6, a5);
  v22 = a5;
  v23 = a1;
  v20 = a3;
  v19 = a2;
  a2 = v19;
  a3 = v20;
  v6 = a4;
  a5 = v22;
  v11 = v10;
  a1 = v23;
  if (!v11)
    return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(a1, a2, a3, v7[349], v6, a5);
  v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationPosition]";
  v25 = 92;
  v12 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
  if (v25 >= v12)
    v13 = v12;
  else
    v13 = v25;
  v14 = &v24[v13];
  v15 = v25 - v13;
  if (v25 - v13 >= 0x12)
    v16 = 18;
  else
    v16 = v25 - v13;
  v17 = v15 - v16;
  if (v17 >= v17 - 1)
    v18 = v17 - 1;
  else
    v18 = v17;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
  return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v23, v19, v20, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id, a4, v22);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, unsigned int *a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 **v17;
  __int128 *v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 *v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = a4;
  v23 = *MEMORY[0x1E0C80C00];
  v20[0] = a2;
  v20[1] = a3;
  v7 = *a6;
  *(_QWORD *)&v19 = *a5;
  *((_QWORD *)&v19 + 1) = v7;
  LODWORD(v22) = 0;
  v21 = 0;
  v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v8 & 1) == 0)
  {
    v17 = a1;
    v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v14 = v13;
    v6 = a4;
    a1 = v17;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      v9 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = a4;
      a1 = v17;
    }
  }
  v10 = __ROR8__(*(_QWORD *)((char *)&v19 + 4) + 12, 12);
  v11 = 0x9DDFEA08EB382D69
      * (v10 ^ ((0x9DDFEA08EB382D69 * (v9[19] ^ (unint64_t)v19 ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                        * (v9[19] ^ v19 ^ v10)));
  v18 = &v19;
  v21 = &v19;
  v22 = v20;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, (-348639895 * ((v11 >> 47) ^ v11)) ^ DWORD1(v19), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v18, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v21);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **(_QWORD **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)0>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 32 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
LABEL_5:
      *a3 = v13;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 32 * v12);
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_5;
      }
      result = 0;
      if (v16)
        v13 = v16;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = (void *)(32 * v3);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v10 + (_QWORD)v4);
    llvm::deallocate_buffer(v4, v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = (v11 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v12)
    {
      v13 = v12 + 1;
      v14 = (v12 + 1) & 0xFFFFFFFFFFFFFFELL;
      v15 = &result[4 * v14];
      v16 = result + 4;
      v17 = v14;
      do
      {
        *(v16 - 4) = -4096;
        *v16 = -4096;
        v16 += 8;
        v17 -= 2;
      }
      while (v17);
      if (v13 == v14)
        return result;
    }
    else
    {
      v15 = result;
    }
    v18 = &result[4 * v11];
    do
    {
      *v15 = -4096;
      v15 += 4;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)result;
    v7 = (v5 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (!v7)
    {
      v10 = *(_QWORD **)result;
LABEL_8:
      v13 = (_QWORD *)(v6 + 32 * v5);
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v13);
      goto LABEL_12;
    }
    v8 = v7 + 1;
    v9 = (v7 + 1) & 0xFFFFFFFFFFFFFFELL;
    v10 = (_QWORD *)(v6 + 32 * v9);
    v11 = (_QWORD *)(v6 + 32);
    v12 = v9;
    do
    {
      *(v11 - 4) = -4096;
      *v11 = -4096;
      v11 += 8;
      v12 -= 2;
    }
    while (v12);
    if (v8 != v9)
      goto LABEL_8;
  }
LABEL_12:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v17 = 0;
      llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)result, (unint64_t *)a2, &v17);
      v14 = v17;
      v15 = *(_QWORD *)a2;
      *(_DWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)v14 = v15;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 0;
      LODWORD(v15) = *(_DWORD *)(v14 + 20);
      *(_DWORD *)(v14 + 20) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a2 + 20) = v15;
      v16 = *(unsigned int *)(v14 + 24);
      *(_DWORD *)(v14 + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v16;
      ++*(_DWORD *)(v4 + 8);
      llvm::deallocate_buffer(0, (void *)(24 * v16));
    }
    a2 += 32;
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::UsersPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position *&,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UsersPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **(_QWORD **)a1
      && *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::UsersPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position *&,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UsersPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>>(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;

  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 9;
  *(_QWORD *)v9 = &unk_1E0E2B8F8;
  *(_QWORD *)(v9 + 8) = 0;
  result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  v11 = a2->n128_u64[0];
  *(_QWORD *)v9 = &unk_1E0E2B9F8;
  *(_QWORD *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::UsersPosition::~UsersPosition(mlir::pdl_to_pdl_interp::UsersPosition *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::~PredicateBase(mlir::GenericProgramPoint *a1)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(a1);
  operator delete(v1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ForEachPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ForEachPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **(_QWORD **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ForEachPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ForEachPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;

  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 10;
  *(_QWORD *)v9 = &unk_1E0E2B938;
  *(_QWORD *)(v9 + 8) = 0;
  result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  v11 = a2->n128_u64[0];
  *(_QWORD *)v9 = &unk_1E0E2BA38;
  *(_QWORD *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::ForEachPosition::~ForEachPosition(mlir::pdl_to_pdl_interp::ForEachPosition *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::~PredicateBase(mlir::GenericProgramPoint *a1)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(a1);
  operator delete(v1);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 v4;
  __guard *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  if ((v4 & 1) == 0)
  {
    v21 = a3;
    v22 = a1;
    v19 = a4;
    v20 = a2;
    a4 = v19;
    a2 = v20;
    v11 = v10;
    a3 = v21;
    a1 = v22;
    if (v11)
    {
      v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeLiteralPosition]";
      v27 = 99;
      v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12)
        v13 = v12;
      else
        v13 = v27;
      v14 = &v26[v13];
      v15 = v27 - v13;
      if (v27 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v27 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      a4 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  v6 = v5[341];
  v7 = *a4;
  v8 = *a4 >> 4;
  v26 = a2;
  v27 = a3;
  v25 = v7;
  v23[0] = &v25;
  v23[1] = &v26;
  v24 = &v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8 ^ (v7 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)a1;
  *(_QWORD *)(a2 + 80) += 32;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 32 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 32;
  *(_DWORD *)(v10 + 16) = 7;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 24) = *v4;
  *(_QWORD *)v10 = &unk_1E0E2BB18;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*(_QWORD *)(v11 + 8), v10);
  return v10;
}

void mlir::pdl_to_pdl_interp::AttributeLiteralPosition::~AttributeLiteralPosition(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  _QWORD v21[2];
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[2];

  if ((v5 & 1) == 0)
  {
    v19 = a3;
    v20 = a4;
    v18 = a2;
    a2 = v18;
    a3 = v19;
    a4 = v20;
    if (v10)
    {
      *(_QWORD *)&v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ConstraintQuestion]";
      *((_QWORD *)&v23 + 1) = 93;
      v11 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v23 + 1) >= v11)
        v12 = v11;
      else
        v12 = *((_QWORD *)&v23 + 1);
      v13 = v23 + v12;
      v14 = *((_QWORD *)&v23 + 1) - v12;
      if (*((_QWORD *)&v23 + 1) - v12 >= 0x12)
        v15 = 18;
      else
        v15 = *((_QWORD *)&v23 + 1) - v12;
      v16 = v14 - v15;
      if (v16 >= v16 - 1)
        v17 = v16 - 1;
      else
        v17 = v16;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ConstraintQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v13 + v15, v17);
      a2 = v18;
      a3 = v19;
      a4 = v20;
    }
  }
  v6 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ConstraintQuestion,void>::resolveTypeID(void)::id;
  v26[0] = a2;
  v26[1] = a3;
  v7 = a4[1];
  v23 = *a4;
  v24 = v7;
  v25 = *((_QWORD *)a4 + 4);
  v8 = llvm::hash_combine<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>((uint64_t)&v23, (uint64_t)&v24, (char *)&v25);
  v21[0] = &v23;
  v21[1] = v26;
  v22 = &v23;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v22, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v21);
}

unint64_t llvm::hash_combine<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  if ((v5 & 1) == 0)
  {
    v10 = a1;
    a1 = v10;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      a1 = v10;
    }
  }
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v15[0] = llvm::hash_value(*(_QWORD **)a1, *(_QWORD *)(a1 + 8));
  v13 = 0;
  v6 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8));
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v13, (_QWORD *)v15 + 1, (unint64_t)v16, v6);
  v14 = v13;
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v15, (uint64_t *)&v14, v7, (unint64_t)v16, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v15, v14, v8, (char *)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;
  uint64_t v5;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 == *(_QWORD *)(*a1 + 8)
    && (!v3 || !memcmp(*(const void **)(a2 + 8), *(const void **)v2, v3))
    && (v5 = *(_QWORD *)(a2 + 32), v5 == *(_QWORD *)(v2 + 24))
    && !memcmp(*(const void **)(a2 + 24), *(const void **)(v2 + 16), 8 * v5))
  {
    return *(unsigned __int8 *)(a2 + 40) == *(unsigned __int8 *)(v2 + 32);
  }
  else
  {
    return 0;
  }
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__int128 **a1, size_t a2)
{
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  __int128 *v6;
  _OWORD v8[2];
  uint64_t v9;

  v3 = **a1;
  v4 = (*a1)[1];
  v9 = *((_QWORD *)*a1 + 4);
  v8[0] = v3;
  v8[1] = v4;
  v5 = mlir::pdl_to_pdl_interp::ConstraintQuestion::construct(a2, (uint64_t *)v8);
  v6 = a1[1];
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, unint64_t))v6)(*((_QWORD *)v6 + 1), v5);
  return v5;
}

unint64_t mlir::pdl_to_pdl_interp::ConstraintQuestion::construct(size_t __sz, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  char *buffer;
  uint64_t v39;
  unint64_t result;

  v4 = a2[1];
  if (v4)
  {
    v5 = *a2;
    v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v4 + 1, 0);
    v7 = v6;
    if (v4 < 8)
    {
      v8 = (_BYTE *)v6;
      v9 = (char *)v5;
      goto LABEL_18;
    }
    v8 = (_BYTE *)v6;
    v9 = (char *)v5;
    if ((unint64_t)(v6 - v5) < 0x20)
      goto LABEL_18;
    if (v4 >= 0x20)
    {
      v10 = v4 & 0xFFFFFFFFFFFFFFE0;
      v13 = (__int128 *)(v5 + 16);
      v14 = (_OWORD *)(v6 + 16);
      v15 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v4 == v10)
      {
LABEL_19:
        *(_BYTE *)(v6 + v4) = 0;
        v11 = a2[3];
        if (v11)
          goto LABEL_20;
LABEL_7:
        v12 = 0;
        goto LABEL_28;
      }
      if ((v4 & 0x18) == 0)
      {
        v9 = (char *)(v5 + v10);
        v8 = (_BYTE *)(v6 + v10);
        goto LABEL_18;
      }
    }
    else
    {
      v10 = 0;
    }
    v8 = (_BYTE *)(v6 + (v4 & 0xFFFFFFFFFFFFFFF8));
    v9 = (char *)(v5 + (v4 & 0xFFFFFFFFFFFFFFF8));
    v17 = (uint64_t *)(v5 + v10);
    v18 = (_QWORD *)(v6 + v10);
    v19 = v10 - (v4 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = *v17++;
      *v18++ = v20;
      v19 += 8;
    }
    while (v19);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_19;
    do
    {
LABEL_18:
      v21 = *v9++;
      *v8++ = v21;
    }
    while (v9 != (char *)(v5 + v4));
    goto LABEL_19;
  }
  v7 = 0;
  v11 = a2[3];
  if (!v11)
    goto LABEL_7;
LABEL_20:
  v22 = a2[2];
  v23 = 8 * v11;
  v24 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v11, 3);
  v12 = v24;
  if ((unint64_t)(8 * v11 - 8) < 0x18)
  {
    v25 = (_QWORD *)v24;
    v26 = (uint64_t *)v22;
  }
  else
  {
    v25 = (_QWORD *)v24;
    v26 = (uint64_t *)v22;
    if ((unint64_t)(v24 - v22) >= 0x20)
    {
      v27 = ((unint64_t)(v23 - 8) >> 3) + 1;
      v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = (_QWORD *)(v24 + v28);
      v26 = (uint64_t *)(v22 + v28);
      v29 = (__int128 *)(v22 + 16);
      v30 = (_OWORD *)(v24 + 16);
      v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = *v29;
        *(v30 - 1) = *(v29 - 1);
        *v30 = v32;
        v29 += 2;
        v30 += 2;
        v31 -= 4;
      }
      while (v31);
      if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_28;
    }
  }
  do
  {
    v33 = *v26++;
    *v25++ = v33;
  }
  while (v26 != (uint64_t *)(v22 + v23));
LABEL_28:
  v34 = *((_BYTE *)a2 + 32);
  *(_QWORD *)(__sz + 80) += 48;
  if (*(_QWORD *)__sz)
    v35 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 48 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v35 = 1;
  if (v35)
  {
    v36 = *(_DWORD *)(__sz + 24) >> 7;
    if (v36 >= 0x1E)
      LOBYTE(v36) = 30;
    v37 = 4096 << v36;
    buffer = (char *)llvm::allocate_buffer(4096 << v36, (std::align_val_t)8uLL);
    v39 = *(unsigned int *)(__sz + 24);
    if (v39 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v39 + 1, 8);
      LODWORD(v39) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v39) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v37];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    result = (*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)__sz = result + 48;
  *(_DWORD *)result = 20;
  *(_QWORD *)(result + 8) = v7;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v12;
  *(_QWORD *)(result + 32) = v11;
  *(_BYTE *)(result + 40) = v34;
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 v4;
  __guard *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  if ((v4 & 1) == 0)
  {
    v21 = a3;
    v22 = a1;
    v19 = a4;
    v20 = a2;
    a4 = v19;
    a2 = v20;
    v11 = v10;
    a3 = v21;
    a1 = v22;
    if (v11)
    {
      v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeLiteralPosition]";
      v27 = 94;
      v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12)
        v13 = v12;
      else
        v13 = v27;
      v14 = &v26[v13];
      v15 = v27 - v13;
      if (v27 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v27 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      a4 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  v6 = v5[357];
  v7 = *a4;
  v8 = *a4 >> 4;
  v26 = a2;
  v27 = a3;
  v25 = v7;
  v23[0] = &v25;
  v23[1] = &v26;
  v24 = &v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8 ^ (v7 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)a1;
  *(_QWORD *)(a2 + 80) += 32;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 32 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 32;
  *(_DWORD *)(v10 + 16) = 8;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 24) = *v4;
  *(_QWORD *)v10 = &unk_1E0E2BAD8;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*(_QWORD *)(v11 + 8), v10);
  return v10;
}

void mlir::pdl_to_pdl_interp::TypeLiteralPosition::~TypeLiteralPosition(mlir::pdl_to_pdl_interp::TypeLiteralPosition *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,0u>>::try_emplace<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  char **v52;
  unint64_t v53;

  v6 = *a2;
  v7 = *(_DWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_24;
  v8 = *(_QWORD *)a1;
  v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  v10 = (_QWORD *)(*(_QWORD *)a1 + 16 * v9);
  v11 = *v10;
  if (v6 == *v10)
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  v20 = 0;
  v21 = 1;
  while (v11 != -4096)
  {
    if (v20)
      v22 = 0;
    else
      v22 = v11 == -8192;
    if (v22)
      v20 = v10;
    v23 = v9 + v21++;
    v9 = v23 & (v7 - 1);
    v10 = (_QWORD *)(v8 + 16 * v9);
    v11 = *v10;
    if (v6 == *v10)
      return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  }
  v24 = (uint64_t)(v20 ? v20 : v10);
  v25 = *(_DWORD *)(a1 + 8);
  if (4 * v25 + 4 < 3 * v7)
  {
    if (v7 + ~v25 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_24:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v7);
  v26 = *(_DWORD *)(a1 + 16) - 1;
  v27 = v26 & ((v6 >> 4) ^ (v6 >> 9));
  v24 = *(_QWORD *)a1 + 16 * v27;
  v28 = *(_QWORD *)v24;
  if (v6 != *(_QWORD *)v24)
  {
    v48 = 0;
    v49 = 1;
    while (v28 != -4096)
    {
      if (v48)
        v50 = 0;
      else
        v50 = v28 == -8192;
      if (v50)
        v48 = v24;
      v51 = v27 + v49++;
      v27 = v51 & v26;
      v24 = *(_QWORD *)a1 + 16 * (v51 & v26);
      v28 = *(_QWORD *)v24;
      if (v6 == *(_QWORD *)v24)
        goto LABEL_26;
    }
    if (v48)
      v24 = v48;
LABEL_6:
    v13 = *(_QWORD *)v24;
    ++*(_DWORD *)(a1 + 8);
    if (v13 == -4096)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_26:
  ++*(_DWORD *)(a1 + 8);
  if (v6 != -4096)
LABEL_7:
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(_QWORD *)v24 = v6;
  *(_DWORD *)(v24 + 8) = 0;
  v14 = *(unsigned int *)(a1 + 32);
  v15 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v24 + 8) = v14;
  if (v14 >= v15)
  {
    v52 = (char **)(a1 + 24);
    v53 = 0;
    v19 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 24, (void *)(a1 + 40), 0, 16, &v53);
    v29 = *(unsigned int *)(a1 + 32);
    v30 = 16 * v29;
    v31 = &v19[16 * v29];
    *(_QWORD *)v31 = *a2;
    v32 = *a3;
    *a3 = 0;
    *((_QWORD *)v31 + 1) = v32;
    v33 = *(char **)(a1 + 24);
    if (!(_DWORD)v29)
    {
LABEL_39:
      v40 = v53;
      if (v33 != (char *)(a1 + 40))
        free(v33);
      *(_QWORD *)(a1 + 24) = v19;
      v18 = *(_DWORD *)(a1 + 32) + 1;
      *(_DWORD *)(a1 + 32) = v18;
      *(_DWORD *)(a1 + 36) = v40;
      return (uint64_t)&v19[16 * v18 - 16];
    }
    v34 = (v29 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v34 >= 7 && (v19 >= &v33[v30] || v33 >= &v19[v30]))
    {
      v41 = v34 + 1;
      v42 = (v34 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v35 = &v19[16 * v42];
      v36 = &v33[16 * v42];
      v43 = v42;
      v44 = v19;
      v45 = *(__int128 **)(a1 + 24);
      do
      {
        v46 = *v45;
        v47 = v45[1];
        *((_QWORD *)v45 + 1) = 0;
        *((_QWORD *)v45 + 3) = 0;
        *(_OWORD *)v44 = v46;
        *((_OWORD *)v44 + 1) = v47;
        v44 += 32;
        v45 += 2;
        v43 -= 2;
      }
      while (v43);
      if (v41 == v42)
      {
LABEL_34:
        v38 = (uint64_t)(*v52 - 8);
        do
        {
          v39 = *(_QWORD *)(v38 + v30);
          *(_QWORD *)(v38 + v30) = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          v30 -= 16;
        }
        while (v30);
        v33 = *v52;
        goto LABEL_39;
      }
    }
    else
    {
      v35 = v19;
      v36 = *(char **)(a1 + 24);
    }
    do
    {
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v37 = *((_QWORD *)v36 + 1);
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v35 + 1) = v37;
      v36 += 16;
      v35 += 16;
    }
    while (v36 != &v33[v30]);
    goto LABEL_34;
  }
  v16 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * v14);
  *v16 = *a2;
  v17 = *a3;
  *a3 = 0;
  v16[1] = v17;
  v18 = v14 + 1;
  *(_DWORD *)(a1 + 32) = v14 + 1;
  v19 = *(char **)(a1 + 24);
  return (uint64_t)&v19[16 * v18 - 16];
}

void mlir::pdl_to_pdl_interp::ExitNode::~ExitNode(mlir::pdl_to_pdl_interp::ExitNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E0E2B898;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E0E2B898;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(this);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<`anonymous namespace'::OrderedPredicate,llvm::detail::DenseSetEmpty,`anonymous namespace'::OrderedPredicateDenseInfo,llvm::detail::DenseSetPair<`anonymous namespace'::OrderedPredicate>>,`anonymous namespace'::OrderedPredicate,llvm::detail::DenseSetEmpty,`anonymous namespace'::OrderedPredicateDenseInfo,llvm::detail::DenseSetPair<`anonymous namespace'::OrderedPredicate>>::LookupBucketFor<`anonymous namespace'::OrderedPredicate>(uint64_t result, int a2, _QWORD *a3, _QWORD *a4)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v16;
  int v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;

  if (a2)
  {
    if ((v4 & 1) == 0)
    {
      v23 = result;
      v22 = a2;
      v21 = a3;
      a3 = v21;
      a2 = v22;
      v19 = v18;
      result = v23;
      if (v19)
      {
        v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v20 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        a3 = v21;
        a2 = v22;
        result = v23;
      }
    }
    v5 = a3[1];
    v6 = __ROR8__(v5 + 16, 16);
    v7 = (a2 - 1) & ((-348639895
                    * ((((0x9DDFEA08EB382D69
                                      * (v6 ^ ((0x9DDFEA08EB382D69
                                              * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v6)))) >> 32) >> 15) ^ (-348639895 * (v6 ^ (((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v6)) >> 32) >> 15) ^ (-348639895 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *(_DWORD *)a3 ^ v6)))))) ^ v5);
    v8 = (_QWORD *)(result + 56 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*a3 != *v8 || v5 != v10)
    {
      v12 = 0;
      v13 = 1;
      do
      {
        if (v9 == -4096 && v10 == -4096)
          break;
        if (v12)
          v14 = 0;
        else
          v14 = v10 == -8192;
        if (v14 && v9 == -8192)
          v12 = v8;
        v16 = v7 + v13++;
        v7 = v16 & (a2 - 1);
        v8 = (_QWORD *)(result + 56 * v7);
        v9 = *v8;
        v10 = v8[1];
      }
      while (*a3 != *v8 || v5 != v10);
    }
    llvm::deallocate_buffer(0, 0);
  }
  *a4 = 0;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,`anonymous namespace'::OrderedPredicate **,false>(uint64_t result, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t **v5;
  uint64_t **i;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t **k;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v67;
  uint64_t *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t **v82;
  uint64_t **v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t *v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t **v139;
  uint64_t **j;
  uint64_t *v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t **v183;
  uint64_t *v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  unsigned int OperationDepth;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t *v211;
  uint64_t **v212;
  BOOL v213;
  char v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t **v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  uint64_t *v229;
  uint64_t **v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v245;
  unsigned int v246;
  int64_t v248;
  int64_t v249;
  uint64_t **v250;
  int64_t v251;
  uint64_t v252;
  uint64_t **v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t *v256;
  uint64_t **v257;
  uint64_t v258;
  int64_t v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t **v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  uint64_t **v282;
  uint64_t v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  uint64_t v289;
  int64_t v290;
  uint64_t **v291;
  uint64_t *v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  BOOL v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  BOOL v307;
  unsigned int v308;
  unsigned int v309;
  BOOL v310;
  unsigned int v311;
  unsigned int v312;
  BOOL v313;
  uint64_t v314;
  uint64_t v316;
  int64_t v317;
  uint64_t **v318;
  uint64_t **v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t **v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  BOOL v333;
  uint64_t **v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t **v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t **v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t *v348;
  uint64_t **v349;
  unint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  BOOL v365;
  uint64_t **v366;
  uint64_t **v367;
  uint64_t *v368;
  uint64_t *v369;
  uint64_t v370;
  unsigned int v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  uint64_t *v379;
  uint64_t **v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v395;
  unsigned int v396;
  BOOL v397;
  unsigned int v398;
  unsigned int v399;
  BOOL v400;
  unint64_t v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  uint64_t *v405;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  uint64_t **v412;
  uint64_t **v413;
  int64_t v414;
  unsigned int v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t **v421;
  uint64_t **v422;
  unsigned int v423;
  unsigned int v424;
  uint64_t *v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unint64_t v429;
  unsigned int v430;
  unsigned int v431;
  uint64_t **v432;
  uint64_t **v433;
  uint64_t **v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t **v437;

  v437 = (uint64_t **)result;
LABEL_2:
  v5 = a2;
  v421 = a2 - 1;
  i = v437;
  while (2)
  {
    v7 = i;
    v8 = (char *)v5 - (char *)i;
    v9 = v5 - i;
    v437 = v7;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v200 = (uint64_t)*(a2 - 1);
        v201 = *v7;
        v202 = **v7;
        OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v202);
        v204 = *(_DWORD *)(v202 + 16);
        v205 = *(_DWORD *)v201[1];
        v207 = *(_DWORD *)(v200 + 16);
        v206 = *(_DWORD *)(v200 + 20);
        v208 = *((_DWORD *)v201 + 6);
        result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v200);
        v209 = *((_DWORD *)v201 + 4);
        if (v209 < v207
          || v207 >= v209
          && ((v210 = *((_DWORD *)v201 + 5), v210 < v206)
           || v206 >= v210
           && (result < OperationDepth
            || OperationDepth >= result
            && ((v398 = *(_DWORD *)(*(_QWORD *)v200 + 16), v398 < v204)
             || v204 >= v398
             && ((v399 = **(_DWORD **)(v200 + 8), v399 < v205)
              || (v205 >= v399 ? (v400 = *(_DWORD *)(v200 + 24) >= v208) : (v400 = 1), !v400))))))
        {
          v211 = *v7;
          *v7 = *(a2 - 1);
          *(a2 - 1) = v211;
        }
        return result;
      case 3:
      case 4:
      case 5:
      default:
        if (v8 > 191)
        {
          if (!a3)
          {
            if (v7 != a2)
            {
              v401 = v8;
              v248 = (unint64_t)(v9 - 2) >> 1;
              v249 = v248;
              v418 = v9;
              do
              {
                v251 = v249;
                if (v248 >= v249)
                {
                  v252 = (2 * v249) | 1;
                  v253 = &v437[v252];
                  v254 = 2 * v249 + 2;
                  if (v254 < v9)
                  {
                    v255 = *v253;
                    v257 = v253 + 1;
                    v256 = v253[1];
                    v258 = *v256;
                    v259 = v249;
                    v260 = (2 * v249) | 1;
                    v431 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v256);
                    v423 = *(_DWORD *)(v258 + 16);
                    v408 = *(_DWORD *)v256[1];
                    v262 = *((_DWORD *)v255 + 4);
                    v261 = *((_DWORD *)v255 + 5);
                    v403 = *((_DWORD *)v256 + 6);
                    v263 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v255);
                    v253 = &v437[v252];
                    v252 = v260;
                    v9 = v418;
                    v251 = v259;
                    v264 = *((_DWORD *)v256 + 4);
                    if (v264 < v262
                      || v262 >= v264
                      && ((v265 = *((_DWORD *)v256 + 5), v265 < v261)
                       || v261 >= v265
                       && (v263 < v431
                        || v431 >= v263
                        && ((v308 = *(_DWORD *)(*v255 + 16), v308 < v423)
                         || v423 >= v308
                         && ((v309 = *(_DWORD *)v255[1], v309 < v408)
                          || (v408 >= v309 ? (v310 = *((_DWORD *)v255 + 6) >= v403) : (v310 = 1), !v310))))))
                    {
                      v253 = v257;
                      v252 = v254;
                    }
                  }
                  v414 = v251;
                  v432 = v253;
                  v266 = *v253;
                  v267 = v437[v251];
                  v268 = *v267;
                  v269 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v267);
                  v270 = *(_DWORD *)(v268 + 16);
                  v424 = *(_DWORD *)v267[1];
                  v272 = *((_DWORD *)v266 + 4);
                  v271 = *((_DWORD *)v266 + 5);
                  v273 = *((_DWORD *)v267 + 6);
                  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v266);
                  v251 = v414;
                  v274 = *((_DWORD *)v267 + 4);
                  if (v274 >= v272)
                  {
                    if (v272 < v274
                      || (v275 = *((_DWORD *)v267 + 5), v275 >= v271)
                      && (v271 < v275
                       || result >= v269
                       && (v269 < result
                        || (v311 = *(_DWORD *)(*v266 + 16), v311 >= v270)
                        && (v270 < v311
                         || (v312 = *(_DWORD *)v266[1], v312 >= v424)
                         && (v424 >= v312 ? (v313 = *((_DWORD *)v266 + 6) >= v273) : (v313 = 1), v313)))))
                    {
                      v250 = v432;
                      v425 = v437[v414];
                      v437[v414] = *v432;
                      while (v248 >= v252)
                      {
                        v433 = v250;
                        v276 = 2 * v252;
                        v277 = (2 * v252) | 1;
                        v278 = &v437[v277];
                        v279 = v276 + 2;
                        if (v276 + 2 < v9)
                        {
                          v280 = *v278;
                          v282 = v278 + 1;
                          v281 = v278[1];
                          v283 = *v281;
                          v409 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v281);
                          v404 = *(_DWORD *)(v283 + 16);
                          v284 = *(_DWORD *)v281[1];
                          v286 = *((_DWORD *)v280 + 4);
                          v285 = *((_DWORD *)v280 + 5);
                          v402 = *((_DWORD *)v281 + 6);
                          v287 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v280);
                          v288 = *((_DWORD *)v281 + 4);
                          if (v288 < v286
                            || (v278 = &v437[v277], v286 >= v288)
                            && ((v304 = *((_DWORD *)v281 + 5), v304 < v285)
                             || v285 >= v304
                             && (v287 < v409
                              || v409 >= v287
                              && ((v305 = *(_DWORD *)(*v280 + 16), v305 < v404)
                               || v404 >= v305
                               && ((v306 = *(_DWORD *)v280[1], v306 < v284)
                                || (v284 >= v306 ? (v307 = *((_DWORD *)v280 + 6) >= v402) : (v307 = 1), !v307))))))
                          {
                            v278 = v282;
                            v277 = v279;
                          }
                        }
                        v289 = v277;
                        v290 = v248;
                        v291 = v278;
                        v292 = *v278;
                        v293 = *v425;
                        v294 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v425);
                        v295 = *(_DWORD *)(v293 + 16);
                        v296 = *(_DWORD *)v425[1];
                        v298 = *((_DWORD *)v292 + 4);
                        v297 = *((_DWORD *)v292 + 5);
                        v410 = *((_DWORD *)v425 + 6);
                        result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v292);
                        v299 = *((_DWORD *)v425 + 4);
                        if (v299 < v298)
                        {
                          v250 = v433;
                          v248 = v290;
                          v9 = v418;
                          break;
                        }
                        v48 = v298 >= v299;
                        v248 = v290;
                        v250 = v291;
                        v252 = v289;
                        v9 = v418;
                        if (v48)
                        {
                          v300 = *((_DWORD *)v425 + 5);
                          if (v300 < v297
                            || v297 >= v300
                            && (result < v294
                             || v294 >= result
                             && ((v301 = *(_DWORD *)(*v292 + 16), v301 < v295)
                              || v295 >= v301
                              && ((v302 = *(_DWORD *)v292[1], v302 < v296)
                               || (v296 >= v302 ? (v303 = *((_DWORD *)v292 + 6) >= v410) : (v303 = 1), !v303)))))
                          {
                            v250 = v433;
                            break;
                          }
                        }
                        *v433 = *v250;
                      }
                      *v250 = v425;
                      v251 = v414;
                    }
                  }
                }
                v249 = v251 - 1;
              }
              while (v251);
              v314 = v401 >> 3;
              do
              {
                v316 = 0;
                v405 = *v437;
                v317 = (unint64_t)(v314 - 2) >> 1;
                v318 = v437;
                do
                {
                  v319 = v318;
                  v318 += v316 + 1;
                  v320 = 2 * v316;
                  v316 = (2 * v316) | 1;
                  v321 = v320 + 2;
                  if (v320 + 2 < v314)
                  {
                    v322 = *v318;
                    v323 = v318[1];
                    v434 = v318 + 1;
                    v324 = *v323;
                    v325 = v314;
                    v326 = v318;
                    v426 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v323);
                    v419 = *(_DWORD *)(v324 + 16);
                    v328 = *((_DWORD *)v322 + 4);
                    v327 = *((_DWORD *)v322 + 5);
                    v411 = *((_DWORD *)v323 + 6);
                    v415 = *(_DWORD *)v323[1];
                    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v322);
                    v314 = v325;
                    v329 = *((_DWORD *)v323 + 4);
                    if (v329 < v328
                      || (v318 = v326, v328 >= v329)
                      && ((v330 = *((_DWORD *)v323 + 5), v330 < v327)
                       || v327 >= v330
                       && (result < v426
                        || v426 >= result
                        && ((v331 = *(_DWORD *)(*v322 + 16), v331 < v419)
                         || v419 >= v331
                         && ((v332 = *(_DWORD *)v322[1], v332 < v415)
                          || (v415 >= v332 ? (v333 = *((_DWORD *)v322 + 6) >= v411) : (v333 = 1), !v333))))))
                    {
                      v318 = v434;
                      v316 = v321;
                    }
                  }
                  *v319 = *v318;
                }
                while (v316 <= v317);
                v334 = a2 - 1;
                v213 = v318 == --a2;
                if (v213)
                {
                  *v318 = v405;
                }
                else
                {
                  *v318 = *v334;
                  *v334 = v405;
                  v335 = (char *)v318 - (char *)v437 + 8;
                  if (v335 >= 9)
                  {
                    v336 = ((unint64_t)v335 >> 3) - 2;
                    v337 = v336 >> 1;
                    v338 = &v437[v336 >> 1];
                    v339 = *v338;
                    v340 = *v318;
                    v341 = **v318;
                    v420 = v314;
                    v342 = v318;
                    v343 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v341);
                    v344 = *(_DWORD *)(v341 + 16);
                    v435 = *(_DWORD *)v340[1];
                    v346 = *((_DWORD *)v339 + 4);
                    v345 = *((_DWORD *)v339 + 5);
                    v427 = *((_DWORD *)v340 + 6);
                    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v339);
                    v314 = v420;
                    v347 = *((_DWORD *)v340 + 4);
                    if (v347 < v346
                      || v346 >= v347
                      && ((v362 = *((_DWORD *)v340 + 5), v362 < v345)
                       || v345 >= v362
                       && (result < v343
                        || v343 >= result
                        && ((v363 = *(_DWORD *)(*v339 + 16), v363 < v344)
                         || v344 >= v363
                         && ((v364 = *(_DWORD *)v339[1], v364 < v435)
                          || (v435 >= v364 ? (v365 = *((_DWORD *)v339 + 6) >= v427) : (v365 = 1), !v365))))))
                    {
                      v348 = *v342;
                      *v342 = *v338;
                      if (v336 >= 2)
                      {
                        while (1)
                        {
                          v350 = v337 - 1;
                          v337 = (v337 - 1) >> 1;
                          v349 = &v437[v337];
                          v351 = *v349;
                          v352 = *v348;
                          v353 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v348);
                          v354 = *(_DWORD *)(v352 + 16);
                          v436 = *(_DWORD *)v348[1];
                          v355 = *((_DWORD *)v351 + 4);
                          v356 = *((_DWORD *)v351 + 5);
                          v428 = *((_DWORD *)v348 + 6);
                          result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v351);
                          v357 = *((_DWORD *)v348 + 4);
                          if (v357 >= v355)
                          {
                            if (v355 < v357)
                              break;
                            v358 = *((_DWORD *)v348 + 5);
                            if (v358 >= v356)
                            {
                              if (v356 < v358)
                                break;
                              if (result >= v353)
                              {
                                if (v353 < result)
                                  break;
                                v359 = *(_DWORD *)(*v351 + 16);
                                if (v359 >= v354)
                                {
                                  if (v354 < v359)
                                    break;
                                  v360 = *(_DWORD *)v351[1];
                                  if (v360 >= v436 && (v436 < v360 || *((_DWORD *)v351 + 6) >= v428))
                                    break;
                                }
                              }
                            }
                          }
                          *v338 = *v349;
                          v338 = &v437[v337];
                          if (v350 <= 1)
                            goto LABEL_370;
                        }
                      }
                      v349 = v338;
LABEL_370:
                      *v349 = v348;
                      v314 = v420;
                    }
                  }
                }
              }
              while (v314-- > 2);
            }
            return result;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = &v7[(unint64_t)v9 >> 1];
          if ((unint64_t)v8 < 0x401)
          {
            v416 = a3 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_21;
          }
          else
          {
            v12 = v7 + 1;
            v13 = v10;
            v14 = &v7[v13];
            v15 = &v7[v13 - 1];
            v16 = &v12[v13];
            v17 = v15;
            v7 = v437;
            v18 = *v437;
            *v437 = *v14;
            *v14 = v18;
            v416 = a3 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_21;
          }
          v19 = (uint64_t)*(v7 - 1);
          v20 = *v7;
          v21 = **v7;
          v22 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v21);
          v23 = *(_DWORD *)(v21 + 16);
          v24 = *(_DWORD *)v20[1];
          v26 = *(_DWORD *)(v19 + 16);
          v25 = *(_DWORD *)(v19 + 20);
          v27 = *((_DWORD *)v20 + 6);
          v28 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v19);
          v29 = *((_DWORD *)v20 + 4);
          if (v29 >= v26)
          {
            if (v26 < v29
              || (v30 = *((_DWORD *)v20 + 5), v30 >= v25)
              && (v25 < v30
               || v28 >= v22
               && (v22 < v28
                || (v31 = *(_DWORD *)(*(_QWORD *)v19 + 16), v31 >= v23)
                && (v23 < v31
                 || (v32 = **(_DWORD **)(v19 + 8), v32 >= v24) && (v24 < v32 || *(_DWORD *)(v19 + 24) >= v27)))))
            {
              v116 = *v7;
              v117 = *v421;
              v118 = **v421;
              v119 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v118);
              v120 = *(_DWORD *)(v118 + 16);
              v121 = *(_DWORD *)v117[1];
              v123 = *((_DWORD *)v116 + 4);
              v122 = *((_DWORD *)v116 + 5);
              v124 = *((_DWORD *)v117 + 6);
              result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
              v125 = *((_DWORD *)v117 + 4);
              if (v125 < v123
                || v123 >= v125
                && ((v197 = *((_DWORD *)v117 + 5), v197 < v122)
                 || v122 >= v197
                 && (result < v119
                  || v119 >= result
                  && ((v198 = *(_DWORD *)(*v116 + 16), v198 < v120)
                   || v120 >= v198
                   && ((v199 = *(_DWORD *)v116[1], v199 < v121) || v121 >= v199 && *((_DWORD *)v116 + 6) < v124)))))
              {
                for (i = v437 + 1; ; ++i)
                {
                  v126 = *i;
                  v127 = **i;
                  v128 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v127);
                  v129 = *(_DWORD *)(v127 + 16);
                  v130 = *(_DWORD *)v126[1];
                  v132 = *((_DWORD *)v116 + 4);
                  v131 = *((_DWORD *)v116 + 5);
                  v133 = *((_DWORD *)v126 + 6);
                  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
                  v134 = *((_DWORD *)v126 + 4);
                  if (v134 < v132)
                    break;
                  if (v132 >= v134)
                  {
                    v135 = *((_DWORD *)v126 + 5);
                    if (v135 < v131)
                      break;
                    if (v131 >= v135)
                    {
                      if (result < v128)
                        break;
                      if (v128 >= result)
                      {
                        v136 = *(_DWORD *)(*v116 + 16);
                        if (v136 < v129)
                          break;
                        if (v129 >= v136)
                        {
                          v137 = *(_DWORD *)v116[1];
                          if (v137 < v130)
                            break;
                          if (v130 >= v137 && *((_DWORD *)v116 + 6) < v133)
                            break;
                        }
                      }
                    }
                  }
                }
LABEL_133:
                v139 = a2;
              }
              else
              {
                for (i = v437 + 1; ; ++i)
                {
                  v139 = a2;
                  if (i >= a2)
                    break;
                  v184 = *i;
                  v185 = **i;
                  v186 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v185);
                  v187 = *(_DWORD *)(v185 + 16);
                  v188 = *(_DWORD *)v184[1];
                  v190 = *((_DWORD *)v116 + 4);
                  v189 = *((_DWORD *)v116 + 5);
                  v191 = *((_DWORD *)v184 + 6);
                  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
                  v192 = *((_DWORD *)v184 + 4);
                  if (v192 < v190)
                    goto LABEL_133;
                  if (v190 >= v192)
                  {
                    v193 = *((_DWORD *)v184 + 5);
                    if (v193 < v189)
                      goto LABEL_133;
                    if (v189 >= v193)
                    {
                      if (result < v186)
                        goto LABEL_133;
                      if (v186 >= result)
                      {
                        v194 = *(_DWORD *)(*v116 + 16);
                        if (v194 < v187)
                          goto LABEL_133;
                        if (v187 >= v194)
                        {
                          v195 = *(_DWORD *)v116[1];
                          if (v195 < v188)
                            goto LABEL_133;
                          if (v188 >= v195 && *((_DWORD *)v116 + 6) < v191)
                            goto LABEL_133;
                        }
                      }
                    }
                  }
                }
              }
              j = v139;
              if (i < v139)
              {
                for (j = a2 - 1; ; --j)
                {
                  v141 = *j;
                  v142 = **j;
                  v143 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v142);
                  v144 = *(_DWORD *)(v142 + 16);
                  v145 = *(_DWORD *)v141[1];
                  v147 = *((_DWORD *)v116 + 4);
                  v146 = *((_DWORD *)v116 + 5);
                  v148 = *((_DWORD *)v141 + 6);
                  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
                  v149 = *((_DWORD *)v141 + 4);
                  if (v149 >= v147)
                  {
                    if (v147 < v149)
                      break;
                    v150 = *((_DWORD *)v141 + 5);
                    if (v150 >= v146)
                    {
                      if (v146 < v150)
                        break;
                      if (result >= v143)
                      {
                        if (v143 < result)
                          break;
                        v151 = *(_DWORD *)(*v116 + 16);
                        if (v151 >= v144)
                        {
                          if (v144 < v151)
                            break;
                          v152 = *(_DWORD *)v116[1];
                          if (v152 >= v145 && (v145 < v152 || *((_DWORD *)v116 + 6) >= v148))
                            break;
                        }
                      }
                    }
                  }
                }
              }
              while (i < j)
              {
                v154 = *i;
                *i++ = *j;
                *j = v154;
                while (1)
                {
                  v155 = *i;
                  v156 = **i;
                  v157 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v156);
                  v158 = *(_DWORD *)(v156 + 16);
                  v159 = *(_DWORD *)v155[1];
                  v161 = *((_DWORD *)v116 + 4);
                  v160 = *((_DWORD *)v116 + 5);
                  v162 = *((_DWORD *)v155 + 6);
                  v163 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
                  v164 = *((_DWORD *)v155 + 4);
                  if (v164 < v161)
                    break;
                  if (v161 >= v164)
                  {
                    v165 = *((_DWORD *)v155 + 5);
                    if (v165 < v160)
                      break;
                    if (v160 >= v165)
                    {
                      if (v163 < v157)
                        break;
                      if (v157 >= v163)
                      {
                        v166 = *(_DWORD *)(*v116 + 16);
                        if (v166 < v158)
                          break;
                        if (v158 >= v166)
                        {
                          v167 = *(_DWORD *)v116[1];
                          if (v167 < v159)
                            break;
                          if (v159 >= v167 && *((_DWORD *)v116 + 6) < v162)
                            break;
                        }
                      }
                    }
                  }
                  ++i;
                }
                while (1)
                {
                  do
                  {
                    v170 = (uint64_t)*--j;
                    v169 = v170;
                    v171 = *(_QWORD *)v170;
                    v172 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v170);
                    v173 = *(_DWORD *)(v171 + 16);
                    v174 = **(_DWORD **)(v170 + 8);
                    v176 = *((_DWORD *)v116 + 4);
                    v175 = *((_DWORD *)v116 + 5);
                    v177 = *(_DWORD *)(v170 + 24);
                    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
                    v178 = *(_DWORD *)(v170 + 16);
                  }
                  while (v178 < v176);
                  if (v176 < v178)
                    break;
                  v179 = *(_DWORD *)(v169 + 20);
                  if (v179 >= v175)
                  {
                    if (v175 < v179)
                      break;
                    if (result >= v172)
                    {
                      if (v172 < result)
                        break;
                      v180 = *(_DWORD *)(*v116 + 16);
                      if (v180 >= v173)
                      {
                        if (v173 < v180)
                          break;
                        v181 = *(_DWORD *)v116[1];
                        if (v181 >= v174 && (v174 < v181 || *((_DWORD *)v116 + 6) >= v177))
                          break;
                      }
                    }
                  }
                }
              }
              v183 = i - 1;
              if (i - 1 != v437)
                *v437 = *v183;
              a4 = 0;
              *v183 = v116;
              v5 = a2;
              a3 = v416;
              continue;
            }
          }
LABEL_21:
          v33 = 0;
          v34 = *v7;
          while (1)
          {
            v35 = v7[v33 + 1];
            v36 = *v34;
            v37 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v34);
            v38 = *(_DWORD *)(v36 + 16);
            v39 = *(_DWORD *)v34[1];
            v41 = *((_DWORD *)v35 + 4);
            v40 = *((_DWORD *)v35 + 5);
            v42 = *((_DWORD *)v34 + 6);
            v43 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v35);
            v44 = *((_DWORD *)v34 + 4);
            if (v44 >= v41)
            {
              if (v41 < v44)
                break;
              v45 = *((_DWORD *)v34 + 5);
              if (v45 >= v40)
              {
                if (v40 < v45)
                  break;
                if (v43 >= v37)
                {
                  if (v37 < v43)
                    break;
                  v46 = *(_DWORD *)(*v35 + 16);
                  if (v46 >= v38)
                  {
                    if (v38 < v46)
                      break;
                    v47 = *(_DWORD *)v35[1];
                    if (v47 >= v39)
                    {
                      v48 = v39 < v47 || *((_DWORD *)v35 + 6) >= v42;
                      if (v48)
                        break;
                    }
                  }
                }
              }
            }
            ++v33;
          }
          v412 = &v7[v33];
          v429 = (unint64_t)&v7[v33 + 1];
          v49 = a2 - 1;
          if (v33 * 8)
          {
            while (1)
            {
              v52 = v49;
              v68 = *v49;
              v69 = *v34;
              v70 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v34);
              v71 = *(_DWORD *)(v69 + 16);
              v72 = *(_DWORD *)v34[1];
              v73 = *((_DWORD *)v68 + 4);
              v74 = *((_DWORD *)v68 + 5);
              v75 = *((_DWORD *)v34 + 6);
              v76 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v68);
              v77 = *((_DWORD *)v34 + 4);
              if (v77 < v73)
                break;
              v7 = v437;
              if (v73 >= v77)
              {
                v78 = *((_DWORD *)v34 + 5);
                if (v78 < v74)
                  goto LABEL_76;
                if (v74 >= v78)
                {
                  if (v76 < v70)
                    goto LABEL_76;
                  if (v70 >= v76)
                  {
                    v79 = *(_DWORD *)(*v68 + 16);
                    if (v79 < v71)
                      goto LABEL_76;
                    if (v71 >= v79)
                    {
                      v80 = *(_DWORD *)v68[1];
                      if (v80 < v72)
                        goto LABEL_76;
                      if (v72 >= v80 && *((_DWORD *)v68 + 6) < v75)
                        goto LABEL_76;
                    }
                  }
                }
              }
              v49 = v52 - 1;
            }
LABEL_75:
            v7 = v437;
LABEL_76:
            v50 = v52;
          }
          else
          {
            v50 = a2;
            if (v429 < (unint64_t)a2)
            {
              for (k = a2 - 1; ; k = v50 - 1)
              {
                v52 = k;
                v53 = *k;
                v54 = *v34;
                v55 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v34);
                v56 = *(_DWORD *)(v54 + 16);
                v57 = *(_DWORD *)v34[1];
                v58 = *((_DWORD *)v53 + 4);
                v59 = *((_DWORD *)v53 + 5);
                v60 = *((_DWORD *)v34 + 6);
                v61 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v53);
                v62 = *((_DWORD *)v34 + 4);
                if (v62 < v58)
                  break;
                v7 = v437;
                if (v58 < v62)
                  goto LABEL_48;
                v63 = *((_DWORD *)v34 + 5);
                if (v63 < v59)
                  goto LABEL_76;
                if (v59 < v63)
                  goto LABEL_48;
                if (v61 < v55)
                  goto LABEL_76;
                if (v55 < v61)
                  goto LABEL_48;
                v64 = *(_DWORD *)(*v53 + 16);
                if (v64 < v56)
                  goto LABEL_76;
                if (v56 >= v64)
                {
                  v65 = *(_DWORD *)v53[1];
                  if (v65 < v57)
                    goto LABEL_76;
                  v67 = v57 < v65 || *((_DWORD *)v53 + 6) >= v60;
                  v50 = v52;
                  if (v429 >= (unint64_t)v52 || !v67)
                    goto LABEL_77;
                }
                else
                {
LABEL_48:
                  v50 = v52;
                  if (v429 >= (unint64_t)v52)
                    goto LABEL_77;
                }
              }
              goto LABEL_75;
            }
          }
LABEL_77:
          v82 = v412;
          if (v429 < (unint64_t)v50)
          {
            v83 = (uint64_t **)v429;
            v413 = v50;
            v84 = v50;
            do
            {
              v85 = *v83;
              *v83++ = *v84;
              *v84 = v85;
              while (1)
              {
                v86 = *v83;
                v87 = *v34;
                v88 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v34);
                v89 = *(_DWORD *)(v87 + 16);
                v90 = *(_DWORD *)v34[1];
                v91 = *((_DWORD *)v86 + 4);
                v92 = *((_DWORD *)v86 + 5);
                v93 = *((_DWORD *)v34 + 6);
                v94 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v86);
                v95 = *((_DWORD *)v34 + 4);
                if (v95 >= v91)
                {
                  if (v91 < v95)
                    break;
                  v96 = *((_DWORD *)v34 + 5);
                  if (v96 >= v92)
                  {
                    if (v92 < v96)
                      break;
                    if (v94 >= v88)
                    {
                      if (v88 < v94)
                        break;
                      v97 = *(_DWORD *)(*v86 + 16);
                      if (v97 >= v89)
                      {
                        if (v89 < v97)
                          break;
                        v98 = *(_DWORD *)v86[1];
                        if (v98 >= v90 && (v90 < v98 || *((_DWORD *)v86 + 6) >= v93))
                          break;
                      }
                    }
                  }
                }
                ++v83;
              }
              while (1)
              {
                v101 = (uint64_t)*--v84;
                v100 = v101;
                v102 = *v34;
                v103 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v34);
                v104 = *(_DWORD *)(v102 + 16);
                v105 = *(_DWORD *)v34[1];
                v106 = *(_DWORD *)(v101 + 16);
                v107 = *(_DWORD *)(v101 + 20);
                v108 = *((_DWORD *)v34 + 6);
                v109 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v101);
                v110 = *((_DWORD *)v34 + 4);
                if (v110 < v106)
                  break;
                if (v106 >= v110)
                {
                  v111 = *((_DWORD *)v34 + 5);
                  if (v111 < v107)
                    break;
                  if (v107 >= v111)
                  {
                    if (v109 < v103)
                      break;
                    if (v103 >= v109)
                    {
                      v112 = *(_DWORD *)(*(_QWORD *)v100 + 16);
                      if (v112 < v104)
                        break;
                      if (v104 >= v112)
                      {
                        v113 = **(_DWORD **)(v100 + 8);
                        if (v113 < v105)
                          break;
                        if (v105 >= v113 && *(_DWORD *)(v100 + 24) < v108)
                          break;
                      }
                    }
                  }
                }
              }
            }
            while (v83 < v84);
            v82 = v83 - 1;
            v7 = v437;
            v50 = v413;
          }
          if (v82 != v7)
            *v7 = *v82;
          *v82 = v34;
          v5 = a2;
          a3 = v416;
          if (v429 < (unint64_t)v50)
          {
LABEL_116:
            a4 = 0;
            i = v82 + 1;
            continue;
          }
          i = v82 + 1;
          if (!(_DWORD)result)
          {
            if (v115)
              continue;
            goto LABEL_116;
          }
          a2 = v82;
          if (v115)
            return result;
          goto LABEL_2;
        }
        v212 = v7 + 1;
        v213 = v7 == a2 || v212 == a2;
        v214 = v213;
        if ((a4 & 1) == 0)
        {
          if ((v214 & 1) == 0)
          {
            do
            {
              v367 = v437;
              v366 = v212;
              v369 = *v437;
              v368 = v437[1];
              v370 = **v437;
              v371 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v370);
              v372 = *(_DWORD *)(v370 + 16);
              v373 = *(_DWORD *)v369[1];
              v375 = *((_DWORD *)v368 + 4);
              v374 = *((_DWORD *)v368 + 5);
              v376 = *((_DWORD *)v369 + 6);
              result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v368);
              v377 = *((_DWORD *)v369 + 4);
              v437 = v366;
              if (v377 < v375
                || v375 >= v377
                && ((v378 = *((_DWORD *)v369 + 5), v378 < v374)
                 || v374 >= v378
                 && (result < v371
                  || v371 >= result
                  && ((v395 = *(_DWORD *)(*v368 + 16), v395 < v372)
                   || v372 >= v395
                   && ((v396 = *(_DWORD *)v368[1], v396 < v373)
                    || (v373 >= v396 ? (v397 = *((_DWORD *)v368 + 6) >= v376) : (v397 = 1), !v397))))))
              {
                v379 = *v366;
                while (1)
                {
                  do
                  {
                    v380 = v367;
                    v367[1] = *v367;
                    v382 = (uint64_t)*--v367;
                    v381 = v382;
                    v383 = *(_QWORD *)v382;
                    v384 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v382);
                    v385 = *(_DWORD *)(v383 + 16);
                    v386 = **(_DWORD **)(v382 + 8);
                    v388 = *((_DWORD *)v379 + 4);
                    v387 = *((_DWORD *)v379 + 5);
                    v389 = *(_DWORD *)(v382 + 24);
                    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v379);
                    v390 = *(_DWORD *)(v382 + 16);
                  }
                  while (v390 < v388);
                  if (v388 < v390)
                    break;
                  v391 = *(_DWORD *)(v381 + 20);
                  if (v391 >= v387)
                  {
                    if (v387 < v391)
                      break;
                    if (result >= v384)
                    {
                      if (v384 < result)
                        break;
                      v392 = *(_DWORD *)(*v379 + 16);
                      if (v392 >= v385)
                      {
                        if (v385 < v392)
                          break;
                        v393 = *(_DWORD *)v379[1];
                        if (v393 >= v386 && (v386 < v393 || *((_DWORD *)v379 + 6) >= v389))
                          break;
                      }
                    }
                  }
                }
                *v380 = v379;
                v366 = v437;
              }
              v212 = v366 + 1;
            }
            while (v366 + 1 != a2);
          }
          return result;
        }
        if ((v214 & 1) != 0)
          return result;
        v215 = 0;
        v216 = v437;
        while (2)
        {
          v422 = v212;
          v219 = *v216;
          v218 = v216[1];
          v220 = **v216;
          v221 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v220);
          v222 = *(_DWORD *)(v220 + 16);
          v223 = *(_DWORD *)v219[1];
          v224 = *((_DWORD *)v218 + 4);
          v225 = *((_DWORD *)v218 + 5);
          v226 = *((_DWORD *)v219 + 6);
          result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v218);
          v227 = *((_DWORD *)v219 + 4);
          if (v227 >= v224)
          {
            if (v224 < v227)
              goto LABEL_235;
            v228 = *((_DWORD *)v219 + 5);
            if (v228 >= v225)
            {
              if (v225 < v228)
                goto LABEL_235;
              if (result >= v221)
              {
                if (v221 < result)
                  goto LABEL_235;
                v245 = *(_DWORD *)(*v218 + 16);
                if (v245 >= v222)
                {
                  if (v222 < v245)
                    goto LABEL_235;
                  v246 = *(_DWORD *)v218[1];
                  if (v246 >= v223 && (v223 < v246 || *((_DWORD *)v218 + 6) >= v226))
                    goto LABEL_235;
                }
              }
            }
          }
          v229 = v216[1];
          v216[1] = *v216;
          v230 = v437;
          v217 = v437;
          if (v216 == v437)
            goto LABEL_234;
          v417 = v215;
          v231 = v215;
          while (1)
          {
            v232 = (uint64_t **)((char *)v230 + v231);
            v233 = *(uint64_t *)((char *)v230 + v231 - 8);
            v234 = *(_QWORD *)v233;
            v235 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v233);
            v236 = *(_DWORD *)(v234 + 16);
            v237 = **(_DWORD **)(v233 + 8);
            v239 = *((_DWORD *)v229 + 4);
            v238 = *((_DWORD *)v229 + 5);
            v430 = *(_DWORD *)(v233 + 24);
            result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v229);
            v240 = *(_DWORD *)(v233 + 16);
            if (v240 >= v239)
            {
              if (v239 < v240)
                goto LABEL_256;
              v241 = *(_DWORD *)(v233 + 20);
              if (v241 >= v238)
              {
                if (v238 < v241)
                  goto LABEL_256;
                if (result >= v235)
                {
                  if (v235 < result)
                    goto LABEL_256;
                  v242 = *(_DWORD *)(*v229 + 16);
                  if (v242 >= v236)
                    break;
                }
              }
            }
LABEL_241:
            --v216;
            *v232 = *(v232 - 1);
            v231 -= 8;
            v230 = v437;
            if (!v231)
            {
              v217 = v437;
              goto LABEL_233;
            }
          }
          if (v236 >= v242)
          {
            v243 = *(_DWORD *)v229[1];
            if (v243 >= v237 && (v237 < v243 || *((_DWORD *)v229 + 6) >= v430))
            {
LABEL_256:
              v217 = v216;
              goto LABEL_233;
            }
            goto LABEL_241;
          }
          v217 = (uint64_t **)((char *)v437 + v231);
LABEL_233:
          v215 = v417;
LABEL_234:
          *v217 = v229;
LABEL_235:
          v216 = v422;
          v212 = v422 + 1;
          v215 += 8;
          if (v422 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,`anonymous namespace'::OrderedPredicate **,0>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int OperationDepth;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;

  v8 = *a5;
  v9 = *a4;
  v10 = **a4;
  OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v10);
  v12 = *(_DWORD *)(v10 + 16);
  v65 = *(_DWORD *)v9[1];
  v14 = *((_DWORD *)v8 + 4);
  v13 = *((_DWORD *)v8 + 5);
  v15 = *((_DWORD *)v9 + 6);
  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v8);
  v17 = *((_DWORD *)v9 + 4);
  if (v17 < v14
    || v14 >= v17
    && ((v54 = *((_DWORD *)v9 + 5), v54 < v13)
     || v13 >= v54
     && (result < OperationDepth
      || OperationDepth >= result
      && ((v55 = *(_DWORD *)(*v8 + 16), v55 < v12)
       || v12 >= v55
       && ((v56 = *(_DWORD *)v8[1], v56 < v65) || (v65 >= v56 ? (v57 = *((_DWORD *)v8 + 6) >= v15) : (v57 = 1), !v57))))))
  {
    v18 = *a4;
    *a4 = *a5;
    *a5 = v18;
    v19 = *a4;
    v20 = *a3;
    v21 = **a3;
    v22 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v21);
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_DWORD *)v20[1];
    v26 = *((_DWORD *)v19 + 4);
    v25 = *((_DWORD *)v19 + 5);
    v27 = *((_DWORD *)v20 + 6);
    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v19);
    v28 = *((_DWORD *)v20 + 4);
    if (v28 < v26
      || v26 >= v28
      && ((v29 = *((_DWORD *)v20 + 5), v29 < v25)
       || v25 >= v29
       && (result < v22
        || v22 >= result
        && ((v63 = *(_DWORD *)(*v19 + 16), v63 < v23)
         || v23 >= v63 && ((v64 = *(_DWORD *)v19[1], v64 < v24) || v24 >= v64 && *((_DWORD *)v19 + 6) < v27)))))
    {
      v30 = *a3;
      *a3 = *a4;
      *a4 = v30;
      v31 = *a3;
      v32 = *a2;
      v33 = **a2;
      v34 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v33);
      v35 = *(_DWORD *)(v33 + 16);
      v36 = *(_DWORD *)v32[1];
      v38 = *((_DWORD *)v31 + 4);
      v37 = *((_DWORD *)v31 + 5);
      v39 = *((_DWORD *)v32 + 6);
      result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      v40 = *((_DWORD *)v32 + 4);
      if (v40 < v38
        || v38 >= v40
        && ((v41 = *((_DWORD *)v32 + 5), v41 < v37)
         || v37 >= v41
         && (result < v34
          || v34 >= result
          && ((v61 = *(_DWORD *)(*v31 + 16), v61 < v35)
           || v35 >= v61 && ((v62 = *(_DWORD *)v31[1], v62 < v36) || v36 >= v62 && *((_DWORD *)v31 + 6) < v39)))))
      {
        v42 = *a2;
        *a2 = *a3;
        *a3 = v42;
        v43 = *a2;
        v44 = *a1;
        v45 = **a1;
        v46 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v45);
        v47 = *(_DWORD *)(v45 + 16);
        v48 = *(_DWORD *)v44[1];
        v50 = *((_DWORD *)v43 + 4);
        v49 = *((_DWORD *)v43 + 5);
        v51 = *((_DWORD *)v44 + 6);
        result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v43);
        v52 = *((_DWORD *)v44 + 4);
        if (v52 < v50
          || v50 >= v52
          && ((v58 = *((_DWORD *)v44 + 5), v58 < v49)
           || v49 >= v58
           && (result < v46
            || v46 >= result
            && ((v59 = *(_DWORD *)(*v43 + 16), v59 < v47)
             || v47 >= v59 && ((v60 = *(_DWORD *)v43[1], v60 < v48) || v48 >= v60 && *((_DWORD *)v43 + 6) < v51)))))
        {
          v53 = *a1;
          *a1 = *a2;
          *a2 = v53;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,`anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int OperationDepth;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t result;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;

  v3 = a2;
  v4 = a1;
  v5 = *a2;
  v6 = *a1;
  v7 = **a1;
  OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v7);
  v9 = *(_DWORD *)(v7 + 16);
  v10 = *(_DWORD *)v6[1];
  v11 = *((_DWORD *)v5 + 4);
  v12 = *((_DWORD *)v5 + 5);
  v13 = *((_DWORD *)v6 + 6);
  v14 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v5);
  v15 = *((_DWORD *)v6 + 4);
  if (v15 >= v11
    && (v11 < v15
     || (v43 = *((_DWORD *)v6 + 5), v43 >= v12)
     && (v12 < v43
      || v14 >= OperationDepth
      && (OperationDepth < v14
       || (v44 = *(_DWORD *)(*v5 + 16), v44 >= v9)
       && (v9 < v44
        || (v45 = *(_DWORD *)v5[1], v45 >= v10) && (v10 >= v45 ? (v46 = *((_DWORD *)v5 + 6) >= v13) : (v46 = 1), v46))))))
  {
    v16 = *a3;
    v17 = *v3;
    v18 = **v3;
    v19 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v18);
    v20 = *(_DWORD *)(v18 + 16);
    v21 = *(_DWORD *)v17[1];
    v22 = *((_DWORD *)v16 + 4);
    v23 = *((_DWORD *)v16 + 5);
    v24 = *((_DWORD *)v17 + 6);
    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v16);
    v26 = *((_DWORD *)v17 + 4);
    if (v26 < v22
      || v22 >= v26
      && ((v27 = *((_DWORD *)v17 + 5), v27 < v23)
       || v23 >= v27
       && (result < v19
        || v19 >= result
        && ((v70 = *(_DWORD *)(*v16 + 16), v70 < v20)
         || v20 >= v70 && ((v71 = *(_DWORD *)v16[1], v71 < v21) || v21 >= v71 && *((_DWORD *)v16 + 6) < v24)))))
    {
      v28 = *v3;
      *v3 = *a3;
      *a3 = v28;
      v29 = *v3;
      v30 = *v4;
      v31 = **v4;
      v32 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v31);
      v33 = *(_DWORD *)(v31 + 16);
      v34 = *(_DWORD *)v30[1];
      v36 = *((_DWORD *)v29 + 4);
      v35 = *((_DWORD *)v29 + 5);
      v37 = *((_DWORD *)v30 + 6);
      result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v29);
      v38 = *((_DWORD *)v30 + 4);
      if (v38 < v36)
        goto LABEL_47;
      if (v36 < v38)
        return result;
      v39 = *((_DWORD *)v30 + 5);
      if (v39 < v35)
        goto LABEL_47;
      if (v35 < v39)
        return result;
      if (result < v32)
        goto LABEL_47;
      if (v32 < result)
        return result;
      v40 = *(_DWORD *)(*v29 + 16);
      if (v40 < v33)
        goto LABEL_47;
      if (v33 < v40)
        return result;
      v41 = *(_DWORD *)v29[1];
      if (v41 < v34)
        goto LABEL_47;
      if (v34 < v41)
        return result;
      v42 = *((_DWORD *)v29 + 6);
      goto LABEL_66;
    }
  }
  else
  {
    v47 = *a3;
    v48 = *v3;
    v49 = **v3;
    v50 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v49);
    v51 = *(_DWORD *)(v49 + 16);
    v52 = *(_DWORD *)v48[1];
    v53 = *((_DWORD *)v47 + 4);
    v54 = *((_DWORD *)v47 + 5);
    v74 = *((_DWORD *)v48 + 6);
    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v47);
    v55 = *((_DWORD *)v48 + 4);
    if (v55 < v53)
    {
      v3 = a3;
LABEL_47:
      v69 = *v4;
      *v4 = *v3;
      *v3 = v69;
      return result;
    }
    if (v53 >= v55)
    {
      v65 = *((_DWORD *)v48 + 5);
      if (v65 < v54
        || v54 >= v65
        && (result < v50
         || v50 >= result
         && ((v66 = *(_DWORD *)(*v47 + 16), v66 < v51)
          || v51 >= v66 && ((v67 = *(_DWORD *)v47[1], v67 < v52) || v52 >= v67 && *((_DWORD *)v47 + 6) < v74))))
      {
LABEL_46:
        v3 = a3;
        goto LABEL_47;
      }
    }
    v56 = *v4;
    *v4 = *v3;
    *v3 = v56;
    v57 = *a3;
    v58 = *v56;
    v59 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v56);
    v60 = *(_DWORD *)(v58 + 16);
    v61 = *(_DWORD *)v56[1];
    v62 = *((_DWORD *)v57 + 4);
    v63 = *((_DWORD *)v57 + 5);
    v37 = *((_DWORD *)v56 + 6);
    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v57);
    v64 = *((_DWORD *)v56 + 4);
    if (v64 < v62)
    {
      v4 = v3;
      v3 = a3;
      goto LABEL_47;
    }
    if (v62 < v64)
      return result;
    v68 = *((_DWORD *)v56 + 5);
    if (v68 < v63)
    {
LABEL_45:
      v4 = v3;
      goto LABEL_46;
    }
    if (v63 >= v68)
    {
      if (result < v59)
        goto LABEL_45;
      if (v59 >= result)
      {
        v72 = *(_DWORD *)(*v57 + 16);
        if (v72 < v60)
          goto LABEL_45;
        if (v60 >= v72)
        {
          v73 = *(_DWORD *)v57[1];
          if (v73 < v61)
            goto LABEL_45;
          if (v61 >= v73)
          {
            v42 = *((_DWORD *)v57 + 6);
            v4 = v3;
            v3 = a3;
LABEL_66:
            if (v42 >= v37)
              return result;
            goto LABEL_47;
          }
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,`anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int OperationDepth;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  uint64_t **v55;
  int v56;
  uint64_t **v57;
  uint64_t v58;
  unsigned int v59;

  v2 = a2;
  v3 = a2 - a1;
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v5 = (uint64_t)*(a2 - 1);
      v6 = *a1;
      v7 = **a1;
      OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v7);
      v9 = *(_DWORD *)(v7 + 16);
      v10 = *(_DWORD *)v6[1];
      v11 = *(_DWORD *)(v5 + 16);
      v12 = *(_DWORD *)(v5 + 20);
      v13 = *((_DWORD *)v6 + 6);
      v14 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v5);
      v15 = *((_DWORD *)v6 + 4);
      if (v15 < v11
        || v11 >= v15
        && ((v51 = *((_DWORD *)v6 + 5), v51 < v12)
         || v12 >= v51
         && (v14 < OperationDepth
          || OperationDepth >= v14
          && ((v52 = *(_DWORD *)(*(_QWORD *)v5 + 16), v52 < v9)
           || v9 >= v52
           && ((v53 = **(_DWORD **)(v5 + 8), v53 < v10)
            || (v10 >= v53 ? (v54 = *(_DWORD *)(v5 + 24) >= v13) : (v54 = 1), !v54))))))
      {
        v16 = *a1;
        *a1 = *(v2 - 1);
        *(v2 - 1) = v16;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v17 = a1 + 2;
      v18 = a1 + 3;
      if (a1 + 3 == v2)
        return 1;
      v58 = 0;
      v56 = 0;
      v55 = v2;
      break;
  }
  do
  {
    v57 = v18;
    v20 = *v18;
    v21 = *v17;
    v22 = **v17;
    v23 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v22);
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_DWORD *)v21[1];
    v26 = *((_DWORD *)v20 + 4);
    v27 = *((_DWORD *)v20 + 5);
    v28 = *((_DWORD *)v21 + 6);
    v29 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v20);
    v30 = *((_DWORD *)v21 + 4);
    if (v30 >= v26)
    {
      if (v26 < v30
        || (v47 = *((_DWORD *)v21 + 5), v47 >= v27)
        && (v27 < v47
         || v29 >= v23
         && (v23 < v29
          || (v48 = *(_DWORD *)(*v20 + 16), v48 >= v24)
          && (v24 < v48
           || (v49 = *(_DWORD *)v20[1], v49 >= v25)
           && (v25 >= v49 ? (v50 = *((_DWORD *)v20 + 6) >= v28) : (v50 = 1), v50)))))
      {
        v19 = v57;
        goto LABEL_8;
      }
    }
    v19 = v57;
    v31 = *v57;
    *v57 = *v17;
    v32 = a1;
    if (v17 == a1)
      goto LABEL_44;
    v33 = v58;
    while (1)
    {
      v34 = *(uint64_t *)((char *)a1 + v33 + 8);
      v35 = *(_QWORD *)v34;
      v36 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v34);
      v37 = *(_DWORD *)(v35 + 16);
      v38 = **(_DWORD **)(v34 + 8);
      v40 = *((_DWORD *)v31 + 4);
      v39 = *((_DWORD *)v31 + 5);
      v59 = *(_DWORD *)(v34 + 24);
      v41 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      v42 = *(_DWORD *)(v34 + 16);
      if (v42 >= v40)
      {
        if (v40 < v42)
          goto LABEL_42;
        v43 = *(_DWORD *)(v34 + 20);
        if (v43 >= v39)
        {
          if (v39 < v43)
            goto LABEL_42;
          if (v41 >= v36)
          {
            if (v36 < v41)
              goto LABEL_42;
            v44 = *(_DWORD *)(*v31 + 16);
            if (v44 >= v37)
              break;
          }
        }
      }
LABEL_12:
      --v17;
      *(uint64_t **)((char *)a1 + v33 + 16) = *(uint64_t **)((char *)a1 + v33 + 8);
      v33 -= 8;
      if (v33 == -16)
      {
        v32 = a1;
        goto LABEL_43;
      }
    }
    if (v37 >= v44)
    {
      v45 = *(_DWORD *)v31[1];
      if (v45 >= v38 && (v38 < v45 || *((_DWORD *)v31 + 6) >= v59))
      {
        v32 = (uint64_t **)((char *)a1 + v33 + 16);
        goto LABEL_43;
      }
      goto LABEL_12;
    }
LABEL_42:
    v32 = v17;
LABEL_43:
    v2 = v55;
    v19 = v57;
LABEL_44:
    *v32 = v31;
    if (++v56 == 8)
      return v19 + 1 == v2;
LABEL_8:
    v17 = v19;
    v58 += 8;
    v18 = v19 + 1;
  }
  while (v19 + 1 != v2);
  return 1;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,`anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int OperationDepth;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;

  v7 = *a4;
  v8 = *a3;
  v9 = **a3;
  OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v9);
  v11 = *(_DWORD *)(v9 + 16);
  v50 = *(_DWORD *)v8[1];
  v13 = *((_DWORD *)v7 + 4);
  v12 = *((_DWORD *)v7 + 5);
  v14 = *((_DWORD *)v8 + 6);
  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v7);
  v16 = *((_DWORD *)v8 + 4);
  if (v16 < v13
    || v13 >= v16
    && ((v17 = *((_DWORD *)v8 + 5), v17 < v12)
     || v12 >= v17
     && (result < OperationDepth
      || OperationDepth >= result
      && ((v47 = *(_DWORD *)(*v7 + 16), v47 < v11)
       || v11 >= v47
       && ((v48 = *(_DWORD *)v7[1], v48 < v50) || (v50 >= v48 ? (v49 = *((_DWORD *)v7 + 6) >= v14) : (v49 = 1), !v49))))))
  {
    v18 = *a3;
    *a3 = *a4;
    *a4 = v18;
    v19 = *a3;
    v20 = *a2;
    v21 = **a2;
    v22 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v21);
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_DWORD *)v20[1];
    v26 = *((_DWORD *)v19 + 4);
    v25 = *((_DWORD *)v19 + 5);
    v27 = *((_DWORD *)v20 + 6);
    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v19);
    v28 = *((_DWORD *)v20 + 4);
    if (v28 < v26
      || v26 >= v28
      && ((v29 = *((_DWORD *)v20 + 5), v29 < v25)
       || v25 >= v29
       && (result < v22
        || v22 >= result
        && ((v45 = *(_DWORD *)(*v19 + 16), v45 < v23)
         || v23 >= v45 && ((v46 = *(_DWORD *)v19[1], v46 < v24) || v24 >= v46 && *((_DWORD *)v19 + 6) < v27)))))
    {
      v30 = *a2;
      *a2 = *a3;
      *a3 = v30;
      v31 = *a2;
      v32 = *a1;
      v33 = **a1;
      v34 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v33);
      v35 = *(_DWORD *)(v33 + 16);
      v36 = *(_DWORD *)v32[1];
      v38 = *((_DWORD *)v31 + 4);
      v37 = *((_DWORD *)v31 + 5);
      v39 = *((_DWORD *)v32 + 6);
      result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      v40 = *((_DWORD *)v32 + 4);
      if (v40 < v38
        || v38 >= v40
        && ((v42 = *((_DWORD *)v32 + 5), v42 < v37)
         || v37 >= v42
         && (result < v34
          || v34 >= result
          && ((v43 = *(_DWORD *)(*v31 + 16), v43 < v35)
           || v35 >= v43 && ((v44 = *(_DWORD *)v31[1], v44 < v36) || v36 >= v44 && *((_DWORD *)v31 + 6) < v39)))))
      {
        v41 = *a1;
        *a1 = *a2;
        *a2 = v41;
      }
    }
  }
  return result;
}

uint64_t mlir::pdl_to_pdl_interp::OptimalBranching::OptimalBranching(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v3 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v3;
  v4 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void mlir::pdl_to_pdl_interp::OptimalBranching::solve(mlir::pdl_to_pdl_interp::OptimalBranching *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm *v29;
  _QWORD *v30;
  uint64_t v31;
  llvm *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm *v36;
  _QWORD *v37;
  uint64_t v38;
  llvm *v39;
  llvm *v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unsigned __int8 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t *v78;
  unint64_t v79;
  llvm *v80;
  unsigned __int8 v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unint64_t *v101;
  int v102;
  BOOL v103;
  unsigned int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unsigned __int8 v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int32x2_t *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  llvm *v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  llvm *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unint64_t v144;
  unint64_t v145;
  llvm *v146;
  unsigned __int8 v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  unsigned int v155;
  _QWORD *v156;
  unsigned int v157;
  int v158;
  unint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unint64_t v162;
  uint64_t v163;
  char v164;
  unint64_t *v165;
  unint64_t v166;
  char v167;
  unint64_t *v168;
  char *v169;
  unint64_t v170;
  llvm *v171;
  unsigned int v172;
  unsigned __int8 v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unint64_t *v180;
  unsigned __int8 v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unint64_t *v186;
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  llvm *v190;
  unsigned __int8 v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  unsigned int v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  int v199;
  BOOL v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  unint64_t *v204;
  unint64_t v205;
  unsigned __int8 v206;
  unint64_t v207;
  unint64_t v208;
  unsigned int v209;
  unsigned int v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  int v214;
  BOOL v215;
  unsigned int v216;
  int v217;
  unint64_t v218;
  int v219;
  int v220;
  int v221;
  unsigned int v222;
  int v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  int v228;
  unint64_t *v229;
  llvm *v230;
  unint64_t v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t *v235;
  unint64_t v236;
  int v237;
  int v238;
  int v239;
  uint64_t *v240;
  unsigned int v241;
  llvm *v242;
  uint64_t v243;
  unsigned int v244;
  llvm *v245[2];
  int v246;
  unint64_t v247;
  llvm *v248;
  uint64_t v249;
  unsigned int v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t *v253;
  uint64_t v254;
  unsigned int v255;
  llvm *v256[2];
  unsigned int v257;
  unint64_t v258;
  unint64_t *v259;
  unint64_t *v260;
  uint64_t v261;
  _QWORD v262[8];

  v262[6] = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)((char *)this + 32);
  if (!*((_QWORD *)this + 5))
    goto LABEL_15;
  v3 = *((unsigned int *)this + 12);
  if (v3 > 4 * *((_DWORD *)this + 10) && v3 >= 0x41)
  {
    llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)this + 32);
LABEL_15:
    v260 = 0;
    v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, (unint64_t *)this + 3, &v260);
    v13 = v260;
    if ((v12 & 1) == 0)
    {
      v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v2, (uint64_t)this + 24, (unint64_t *)this + 3, v260);
      *v13 = *((_QWORD *)this + 3);
      v13[1] = 0;
    }
    v13[1] = 0;
    v248 = 0;
    v249 = 0;
    v250 = 0;
    v14 = *((_DWORD *)this + 2);
    if (!v14)
      goto LABEL_160;
    v15 = (4 * v14 / 3u + 1) | ((unint64_t)(4 * v14 / 3u + 1) >> 1);
    v16 = v15 | (v15 >> 2) | ((v15 | (v15 >> 2)) >> 4);
    llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)&v248, (((v16 | (v16 >> 8)) >> 16) | v16 | (v16 >> 8)) + 1);
    if (!*((_DWORD *)this + 2))
      goto LABEL_160;
    v17 = *((unsigned int *)this + 4);
    if ((_DWORD)v17)
    {
      v18 = 32 * v17;
      v19 = *(unint64_t **)this;
      while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 4;
        v18 -= 32;
        if (!v18)
          goto LABEL_160;
      }
    }
    else
    {
      v19 = *(unint64_t **)this;
    }
    v20 = *(_QWORD *)this + 32 * v17;
    if (v19 == (unint64_t *)v20)
      goto LABEL_160;
    v21 = 0;
LABEL_27:
    v247 = *v19;
    v260 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, &v247, &v260) & 1) != 0)goto LABEL_157;
    if ((_DWORD)v249)
    {
      v22 = v250;
      if (v250 > 4 * (int)v249 && v250 >= 0x41)
      {
        v23 = 1 << (33 - __clz(v249 - 1));
        if (v23 <= 64)
          v24 = 64;
        else
          v24 = v23;
        if (v24 == v250)
        {
          v249 = 0;
          v25 = v248;
          v26 = (v250 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (!v26)
          {
            v29 = v248;
LABEL_54:
            v40 = (llvm *)((char *)v25 + 16 * v22);
            do
            {
              *(_QWORD *)v29 = -4096;
              v29 = (llvm *)((char *)v29 + 16);
            }
            while (v29 != v40);
            goto LABEL_56;
          }
          v27 = v26 + 1;
          v28 = (v26 + 1) & 0x1FFFFFFFFFFFFFFELL;
          v29 = (llvm *)((char *)v248 + 16 * v28);
          v30 = (_QWORD *)((char *)v248 + 16);
          v31 = v28;
          do
          {
            *(v30 - 2) = -4096;
            *v30 = -4096;
            v30 += 4;
            v31 -= 2;
          }
          while (v31);
          if (v27 != v28)
            goto LABEL_54;
LABEL_56:
          while (1)
          {
            v41 = *(_QWORD *)this;
            v42 = *((_DWORD *)this + 4);
            v239 = v21;
            if (!v42)
              break;
            v43 = v247;
            if ((v44 & 1) == 0
            {
              v106 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v106 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v106;
            }
            v45 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v43) ^ HIDWORD(v43));
            v46 = 0x9DDFEA08EB382D69 * (HIDWORD(v43) ^ (v45 >> 47) ^ v45);
            v47 = (-348639895 * ((v46 >> 47) ^ v46)) & (v42 - 1);
            v48 = (uint64_t *)(v41 + 32 * v47);
            v49 = *v48;
            if (v247 != *v48)
            {
              v50 = 1;
              while (v49 != -4096)
              {
                v51 = v47 + v50++;
                v47 = v51 & (v42 - 1);
                v49 = *(_QWORD *)(v41 + 32 * v47);
                if (v247 == v49)
                {
                  v48 = (uint64_t *)(v41 + 32 * v47);
                  goto LABEL_65;
                }
              }
              v41 = *(_QWORD *)this;
              v52 = *((unsigned int *)this + 4);
              goto LABEL_64;
            }
LABEL_65:
            v53 = *((_DWORD *)this + 12);
            if (!v53)
            {
              v68 = 0;
LABEL_130:
              v68 *= 2;
LABEL_131:
              llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow((uint64_t)v2, v68);
              v260 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, &v247, &v260);
              v62 = v260;
              ++*((_DWORD *)this + 10);
              if (*v62 == -4096)
                goto LABEL_81;
LABEL_80:
              --*((_DWORD *)this + 11);
              goto LABEL_81;
            }
            v54 = *((_QWORD *)this + 4);
            v55 = v247;
            if ((v56 & 1) == 0
            {
              v107 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v107 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v107;
            }
            v57 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v55) ^ HIDWORD(v55));
            v58 = 0x9DDFEA08EB382D69 * (HIDWORD(v55) ^ (v57 >> 47) ^ v57);
            v59 = -348639895 * ((v58 >> 47) ^ v58);
            v60 = v53 - 1;
            v61 = v59 & (v53 - 1);
            v62 = (unint64_t *)(v54 + 16 * v61);
            v63 = *v62;
            if (v247 == *v62)
              goto LABEL_82;
            v64 = 0;
            v65 = 1;
            while (v63 != -4096)
            {
              if (v64)
                v66 = 0;
              else
                v66 = v63 == -8192;
              if (v66)
                v64 = v62;
              v67 = v61 + v65++;
              v61 = v67 & v60;
              v62 = (unint64_t *)(v54 + 16 * v61);
              v63 = *v62;
              if (v247 == *v62)
                goto LABEL_82;
            }
            if (v64)
              v62 = v64;
            v68 = *((_DWORD *)this + 12);
            v105 = *((_DWORD *)this + 10);
            if (4 * v105 + 4 >= 3 * v68)
              goto LABEL_130;
            if (v68 + ~v105 - *((_DWORD *)this + 11) <= v68 >> 3)
              goto LABEL_131;
            ++*((_DWORD *)this + 10);
            if (*v62 != -4096)
              goto LABEL_80;
LABEL_81:
            *v62 = v247;
            v62[1] = 0;
LABEL_82:
            if (!*((_DWORD *)v48 + 4))
              goto LABEL_100;
            v69 = *((unsigned int *)v48 + 6);
            if ((_DWORD)v69)
            {
              v70 = 24 * v69;
              v71 = v48[1];
              while ((*(_QWORD *)v71 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v71 += 24;
                v70 -= 24;
                if (!v70)
                  goto LABEL_100;
              }
            }
            else
            {
              v71 = v48[1];
            }
            v72 = v48[1] + 24 * v69;
            if (v71 == v72)
            {
LABEL_100:
              v73 = 0;
            }
            else
            {
              v73 = 0;
              v74 = 0;
              v75 = v62[1];
              do
              {
                v76 = *(_DWORD *)(v71 + 8);
                if (!v75 || v76 < v73 || v73 >= v76 && *(_DWORD *)(v71 + 12) < v74)
                {
                  v75 = *(_QWORD *)v71;
                  v62[1] = *(_QWORD *)v71;
                  v74 = *(_DWORD *)(v71 + 12);
                  v73 = v76;
                }
                do
                {
                  v71 += 24;
                  if (v71 == v72)
                    goto LABEL_101;
                }
                while ((*(_QWORD *)v71 | 0x1000) == 0xFFFFFFFFFFFFF000);
              }
              while (v71 != v72);
            }
LABEL_101:
            v77 = v250;
            if (!v250)
            {
              v88 = 0;
              goto LABEL_137;
            }
            v78 = v2;
            v79 = v247;
            v80 = v248;
            if ((v81 & 1) == 0
            {
              v108 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v108 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v108;
            }
            v82 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v79) ^ HIDWORD(v79));
            v83 = 0x9DDFEA08EB382D69 * (HIDWORD(v79) ^ (v82 >> 47) ^ v82);
            v84 = v77 - 1;
            v85 = (-348639895 * ((v83 >> 47) ^ v83)) & (v77 - 1);
            v86 = (unint64_t *)((char *)v80 + 16 * v85);
            v87 = *v86;
            if (v247 != *v86)
            {
              v101 = 0;
              v102 = 1;
              while (v87 != -4096)
              {
                if (v101)
                  v103 = 0;
                else
                  v103 = v87 == -8192;
                if (v103)
                  v101 = v86;
                v104 = v85 + v102++;
                v85 = v104 & v84;
                v86 = (unint64_t *)((char *)v80 + 16 * (v104 & v84));
                v87 = *v86;
                v2 = v78;
                if (v247 == *v86)
                  goto LABEL_110;
              }
              if (v101)
                v86 = v101;
              v88 = v250;
              v2 = v78;
              if (4 * (int)v249 + 4 < 3 * v250)
              {
                if (v250 + ~(_DWORD)v249 - HIDWORD(v249) <= v250 >> 3)
                  goto LABEL_138;
                LODWORD(v249) = v249 + 1;
                if (*v86 == -4096)
                {
LABEL_109:
                  *v86 = v247;
                  *((_DWORD *)v86 + 2) = 0;
                  goto LABEL_110;
                }
              }
              else
              {
LABEL_137:
                v88 *= 2;
LABEL_138:
                llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)&v248, v88);
                v260 = 0;
                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v248, &v247, &v260);
                v86 = v260;
                LODWORD(v249) = v249 + 1;
                if (*v260 == -4096)
                  goto LABEL_109;
              }
              --HIDWORD(v249);
              goto LABEL_109;
            }
            v2 = v78;
LABEL_110:
            *((_DWORD *)v86 + 2) = v73;
            v89 = v62[1];
            v247 = v89;
            v21 = v73 + v239;
            v90 = *((_DWORD *)this + 12);
            if (v90)
            {
              v91 = *((_QWORD *)this + 4);
              if ((v92 & 1) == 0
              {
                v109 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v109 = 0xFF51AFD7ED558CCDLL;
                llvm::hashing::detail::get_execution_seed(void)::seed = v109;
              }
              v93 = 0x9DDFEA08EB382D69
                  * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v89) ^ HIDWORD(v89));
              v94 = 0x9DDFEA08EB382D69 * (HIDWORD(v89) ^ (v93 >> 47) ^ v93);
              v95 = -348639895 * ((v94 >> 47) ^ v94);
              v96 = v90 - 1;
              v97 = v95 & (v90 - 1);
              v98 = *(_QWORD *)(v91 + 16 * v97);
              if (v247 == v98)
              {
LABEL_156:
                v260 = 0;
                if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v248, &v247, &v260))
                {
                  do
                  {
LABEL_157:
                    v19 += 4;
                    if (v19 == (unint64_t *)v20)
                      goto LABEL_160;
                  }
                  while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000);
                  if (v19 == (unint64_t *)v20)
LABEL_160:
                    llvm::deallocate_buffer(v248, (void *)(16 * v250));
                  goto LABEL_27;
                }
                v110 = v247;
                v260 = v262;
                v261 = 0x600000000;
                v111 = v247;
                while (1)
                {
LABEL_163:
                  v112 = v261;
                  if (v261 >= (unint64_t)HIDWORD(v261))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v260, v262, v261 + 1, 8);
                    v112 = v261;
                  }
                  v260[v112] = v111;
                  LODWORD(v261) = v261 + 1;
                  v113 = *((_DWORD *)this + 12);
                  if (!v113)
                    goto LABEL_162;
                  v114 = *((_QWORD *)this + 4);
                  if ((v115 & 1) == 0
                  {
                    v122 = llvm::hashing::detail::fixed_seed_override;
                    if (!llvm::hashing::detail::fixed_seed_override)
                      v122 = 0xFF51AFD7ED558CCDLL;
                    llvm::hashing::detail::get_execution_seed(void)::seed = v122;
                  }
                  v116 = 0x9DDFEA08EB382D69
                       * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v111) ^ HIDWORD(v111));
                  v117 = 0x9DDFEA08EB382D69 * (HIDWORD(v111) ^ (v116 >> 47) ^ v116);
                  v118 = (-348639895 * ((v117 >> 47) ^ v117)) & (v113 - 1);
                  v119 = *(_QWORD *)(v114 + 16 * v118);
                  if (v111 != v119)
                    break;
LABEL_168:
                  v111 = *(_QWORD *)(v114 + 16 * v118 + 8);
                  if (v110 == v111)
                  {
LABEL_178:
                    v245[0] = 0;
                    v245[1] = 0;
                    v246 = 0;
                    v242 = 0;
                    v243 = 0;
                    v244 = 0;
                    v258 = *v260;
                    v253 = v260;
                    v259 = &v260[v261];
                    llvm::detail::DenseSetImpl<mlir::Value,llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,llvm::DenseMapInfo<mlir::Value,void>>::DenseSetImpl<mlir::Value const*>((uint64_t)v256, &v253, &v259);
                    v253 = 0;
                    v254 = 0;
                    v255 = 0;
                    if (!*((_DWORD *)this + 2))
                      goto LABEL_351;
                    v123 = *((unsigned int *)this + 4);
                    if ((_DWORD)v123)
                    {
                      v124 = 32 * v123;
                      v125 = *(int32x2_t **)this;
                      while ((*(_QWORD *)v125 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v125 += 4;
                        v124 -= 32;
                        if (!v124)
                          goto LABEL_351;
                      }
                    }
                    else
                    {
                      v125 = *(int32x2_t **)this;
                    }
                    v126 = *(_QWORD *)this + 32 * v123;
                    if (v125 == (int32x2_t *)v126)
                      goto LABEL_351;
                    v127 = (unint64_t)*v125;
                    while (2)
                    {
                      v252 = v127;
                      v259 = 0;
                      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v256, &v252, &v259))
                      {
                        v128 = v259;
                        v129 = v256[0];
                        v130 = v257;
                      }
                      else
                      {
                        v129 = v256[0];
                        v130 = v257;
                        v128 = (unint64_t *)((char *)v256[0] + 8 * v257);
                      }
                      v131 = v130;
                      if (v128 != (unint64_t *)((char *)v129 + 8 * v130))
                      {
                        v259 = 0;
                        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v248, &v252, &v259))v132 = *((_DWORD *)v259 + 2);
                        else
                          v132 = 0;
                        v137 = (llvm *)v125[1];
                        v138 = v125[3].u32[0];
                        if (!v125[2].i32[0])
LABEL_347:
                          llvm::deallocate_buffer(v137, (void *)(24 * v138));
                        v139 = (char *)v125[1];
                        if ((_DWORD)v138)
                        {
                          v140 = 0;
                          while ((*(_QWORD *)((char *)v137 + v140) | 0x1000) == 0xFFFFFFFFFFFFF000)
                          {
                            v140 += 24;
                            if (24 * v138 == v140)
                              goto LABEL_347;
                          }
                          v139 = (char *)v137 + v140;
                        }
                        v169 = (char *)v137 + 24 * v138;
                        if (v139 == v169)
                          goto LABEL_347;
                        v170 = *(_QWORD *)v139;
                        while (2)
                        {
                          v251 = v170;
                          v171 = v256[0];
                          v172 = v257;
                          if (v257)
                          {
                            if ((v173 & 1) == 0)
                            {
                              v238 = v132;
                              v132 = v238;
                              if (v223)
                              {
                                v224 = llvm::hashing::detail::fixed_seed_override;
                                if (!llvm::hashing::detail::fixed_seed_override)
                                  v224 = 0xFF51AFD7ED558CCDLL;
                                llvm::hashing::detail::get_execution_seed(void)::seed = v224;
                                v132 = v238;
                              }
                            }
                            v175 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v170) ^ HIDWORD(v170));
                            v174 = 0x9DDFEA08EB382D69 * (HIDWORD(v170) ^ (v175 >> 47) ^ v175);
                            v170 = v251;
                            LODWORD(v175) = (-348639895 * ((v174 >> 47) ^ v174)) & (v172 - 1);
                            v176 = (uint64_t *)((char *)v171 + 8 * v175);
                            v177 = *v176;
                            if (v251 == *v176)
                            {
LABEL_256:
                              v171 = v256[0];
                              v178 = v257;
                              goto LABEL_259;
                            }
                            v219 = 1;
                            while (v177 != -4096)
                            {
                              v220 = v175 + v219++;
                              v175 = v220 & (v172 - 1);
                              v177 = *((_QWORD *)v171 + v175);
                              if (v251 == v177)
                              {
                                v176 = (uint64_t *)((char *)v171 + 8 * v175);
                                goto LABEL_256;
                              }
                            }
                            v171 = v256[0];
                            v178 = v257;
                          }
                          else
                          {
                            v178 = 0;
                          }
                          v176 = (uint64_t *)((char *)v171 + 8 * v178);
LABEL_259:
                          if (v176 == (uint64_t *)((char *)v171 + 8 * v178))
                          {
                            v235 = v2;
                            v233 = *((_DWORD *)v139 + 3);
                            v237 = v132;
                            v241 = *((_DWORD *)v139 + 2) - v132;
                            v179 = v255;
                            if (v255)
                            {
                              v180 = v253;
                              if ((v181 & 1) == 0
                              {
                                v225 = llvm::hashing::detail::fixed_seed_override;
                                if (!llvm::hashing::detail::fixed_seed_override)
                                  v225 = 0xFF51AFD7ED558CCDLL;
                                llvm::hashing::detail::get_execution_seed(void)::seed = v225;
                              }
                              v182 = 0x9DDFEA08EB382D69
                                   * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v170) ^ HIDWORD(v170));
                              v183 = 0x9DDFEA08EB382D69 * (HIDWORD(v170) ^ (v182 >> 47) ^ v182);
                              LODWORD(v182) = -348639895 * ((v183 >> 47) ^ v183);
                              v184 = v179 - 1;
                              v170 = v251;
                              v185 = v182 & (v179 - 1);
                              v186 = &v180[3 * v185];
                              v187 = *v186;
                              if (v251 == *v186)
                              {
LABEL_263:
                                if (v186 != &v253[3 * v255])
                                {
                                  v188 = *((_DWORD *)v186 + 2);
                                  if (v241 >= v188)
                                  {
                                    v132 = v237;
                                    if (v188 < v241 || *((_DWORD *)v186 + 3) <= v233)
                                      goto LABEL_300;
                                  }
                                }
                              }
                              else
                              {
                                v221 = 1;
                                while (v187 != -4096)
                                {
                                  v222 = v185 + v221++;
                                  v185 = v222 & v184;
                                  v186 = &v180[3 * (v222 & v184)];
                                  v187 = *v186;
                                  if (v251 == *v186)
                                    goto LABEL_263;
                                }
                              }
                            }
                            v189 = v244;
                            if (!v244)
                            {
                              v202 = 0;
                              goto LABEL_321;
                            }
                            v190 = v242;
                            if ((v191 & 1) == 0
                            {
                              v226 = llvm::hashing::detail::fixed_seed_override;
                              if (!llvm::hashing::detail::fixed_seed_override)
                                v226 = 0xFF51AFD7ED558CCDLL;
                              llvm::hashing::detail::get_execution_seed(void)::seed = v226;
                            }
                            v192 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v170) ^ HIDWORD(v170));
                            v193 = 0x9DDFEA08EB382D69 * (HIDWORD(v170) ^ (v192 >> 47) ^ v192);
                            v194 = v189 - 1;
                            v195 = (-348639895 * ((v193 >> 47) ^ v193)) & (v189 - 1);
                            v196 = (unint64_t *)((char *)v190 + 16 * v195);
                            v197 = *v196;
                            if (v251 != *v196)
                            {
                              v198 = 0;
                              v199 = 1;
                              while (v197 != -4096)
                              {
                                if (v198)
                                  v200 = 0;
                                else
                                  v200 = v197 == -8192;
                                if (v200)
                                  v198 = v196;
                                v201 = v195 + v199++;
                                v195 = v201 & v194;
                                v196 = (unint64_t *)((char *)v190 + 16 * (v201 & v194));
                                v197 = *v196;
                                if (v251 == *v196)
                                  goto LABEL_282;
                              }
                              if (v198)
                                v196 = v198;
                              v202 = v244;
                              if (4 * (int)v243 + 4 >= 3 * v244)
                              {
LABEL_321:
                                v202 *= 2;
LABEL_322:
                                llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow((uint64_t)&v242, v202);
                                v259 = 0;
                                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v242, &v251, &v259);
                                v196 = v259;
                                LODWORD(v243) = v243 + 1;
                                if (*v259 == -4096)
                                  goto LABEL_281;
LABEL_280:
                                --HIDWORD(v243);
                                goto LABEL_281;
                              }
                              if (v244 + ~(_DWORD)v243 - HIDWORD(v243) <= v244 >> 3)
                                goto LABEL_322;
                              LODWORD(v243) = v243 + 1;
                              if (*v196 != -4096)
                                goto LABEL_280;
LABEL_281:
                              *v196 = v251;
                              v196[1] = 0;
                            }
LABEL_282:
                            v196[1] = v252;
                            v203 = v255;
                            if (!v255)
                            {
                              v217 = 0;
                              goto LABEL_327;
                            }
                            v204 = v253;
                            v205 = v251;
                            if ((v206 & 1) == 0
                            {
                              v227 = llvm::hashing::detail::fixed_seed_override;
                              if (!llvm::hashing::detail::fixed_seed_override)
                                v227 = 0xFF51AFD7ED558CCDLL;
                              llvm::hashing::detail::get_execution_seed(void)::seed = v227;
                            }
                            v207 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v205) ^ HIDWORD(v205));
                            v208 = 0x9DDFEA08EB382D69 * (HIDWORD(v205) ^ (v207 >> 47) ^ v207);
                            v209 = v203 - 1;
                            v210 = (-348639895 * ((v208 >> 47) ^ v208)) & (v203 - 1);
                            v211 = &v204[3 * v210];
                            v212 = *v211;
                            if (v251 != *v211)
                            {
                              v213 = 0;
                              v214 = 1;
                              while (v212 != -4096)
                              {
                                if (v213)
                                  v215 = 0;
                                else
                                  v215 = v212 == -8192;
                                if (v215)
                                  v213 = v211;
                                v216 = v210 + v214++;
                                v210 = v216 & v209;
                                v211 = &v204[3 * (v216 & v209)];
                                v212 = *v211;
                                if (v251 == *v211)
                                  goto LABEL_299;
                              }
                              if (v213)
                                v211 = v213;
                              v217 = v255;
                              if (4 * (int)v254 + 4 >= 3 * v255)
                              {
LABEL_327:
                                v217 *= 2;
LABEL_328:
                                llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::grow((uint64_t)&v253, v217);
                                v259 = 0;
                                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)&v253, &v251, &v259);
                                v211 = v259;
                                LODWORD(v254) = v254 + 1;
                                if (*v259 == -4096)
                                  goto LABEL_298;
LABEL_297:
                                --HIDWORD(v254);
                                goto LABEL_298;
                              }
                              if (v255 + ~(_DWORD)v254 - HIDWORD(v254) <= v255 >> 3)
                                goto LABEL_328;
                              LODWORD(v254) = v254 + 1;
                              if (*v211 != -4096)
                                goto LABEL_297;
LABEL_298:
                              v218 = v251;
                              v211[1] = 0;
                              v211[2] = 0;
                              *v211 = v218;
                            }
LABEL_299:
                            *((_DWORD *)v211 + 2) = v241;
                            *((_DWORD *)v211 + 3) = v233;
                            v2 = v235;
                            v132 = v237;
                          }
LABEL_300:
                          v139 += 24;
                          if (v139 == v169)
                            goto LABEL_346;
                          while (1)
                          {
                            v170 = *(_QWORD *)v139;
                            if ((*(_QWORD *)v139 | 0x1000) != 0xFFFFFFFFFFFFF000)
                              break;
                            v139 += 24;
                            if (v139 == v169)
                              goto LABEL_346;
                          }
                          if (v139 == v169)
                          {
LABEL_346:
                            v137 = (llvm *)v125[1];
                            v138 = v125[3].u32[0];
                            goto LABEL_347;
                          }
                          continue;
                        }
                      }
                      v133 = (uint64_t *)&v125[1];
                      if (!v125[2].i32[0])
                        goto LABEL_348;
                      v134 = v125[3].u32[0];
                      if ((_DWORD)v134)
                      {
                        v135 = 24 * v134;
                        v136 = (_QWORD *)v125[1];
                        while ((*v136 | 0x1000) == 0xFFFFFFFFFFFFF000)
                        {
                          v136 += 3;
                          v135 -= 24;
                          if (!v135)
                            goto LABEL_348;
                        }
                      }
                      else
                      {
                        v136 = (_QWORD *)v125[1];
                      }
                      v141 = *(_QWORD *)&v125[1] + 24 * v134;
                      if (v136 == (_QWORD *)v141)
                        goto LABEL_348;
                      v142 = 0;
                      v143 = 0;
                      v144 = 0;
LABEL_209:
                      v145 = *v136;
                      v146 = v256[0];
                      if (v131)
                      {
                        if ((v147 & 1) == 0)
                        {
                          v236 = v144;
                          v240 = v133;
                          v234 = v143;
                          v232 = v142;
                          v142 = v232;
                          v143 = v234;
                          v144 = v236;
                          v133 = v240;
                          if (v158)
                          {
                            v159 = llvm::hashing::detail::fixed_seed_override;
                            if (!llvm::hashing::detail::fixed_seed_override)
                              v159 = 0xFF51AFD7ED558CCDLL;
                            llvm::hashing::detail::get_execution_seed(void)::seed = v159;
                            v142 = v232;
                            v143 = v234;
                            v144 = v236;
                            v133 = v240;
                          }
                        }
                        v148 = 0x9DDFEA08EB382D69
                             * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v145) ^ HIDWORD(v145));
                        v149 = 0x9DDFEA08EB382D69 * (HIDWORD(v145) ^ (v148 >> 47) ^ v148);
                        LODWORD(v149) = (-348639895 * ((v149 >> 47) ^ v149)) & (v131 - 1);
                        v150 = (uint64_t *)((char *)v146 + 8 * v149);
                        v151 = *v150;
                        if (*v150 == v145)
                        {
LABEL_212:
                          v146 = v256[0];
                          v131 = v257;
                          v152 = v257;
                          goto LABEL_219;
                        }
                        v153 = 1;
                        while (v151 != -4096)
                        {
                          v154 = v149 + v153++;
                          v149 = v154 & (v131 - 1);
                          v151 = *((_QWORD *)v146 + v149);
                          if (v151 == v145)
                          {
                            v150 = (uint64_t *)((char *)v146 + 8 * v149);
                            goto LABEL_212;
                          }
                        }
                        v146 = v256[0];
                        v131 = v257;
                      }
                      v152 = v131;
                      v150 = (uint64_t *)((char *)v146 + 8 * v131);
LABEL_219:
                      if (v150 != (uint64_t *)((char *)v146 + 8 * v152))
                      {
                        v155 = *((_DWORD *)v136 + 2);
                        if (v144 && v155 >= v142)
                        {
                          if (v142 < v155 || (v157 = *((_DWORD *)v136 + 3), v157 >= v143))
                          {
LABEL_230:
                            v156 = (_QWORD *)v141;
                            if (v136 + 3 != (_QWORD *)v141)
                            {
                              v156 = v136 + 3;
                              do
                              {
                                if ((*v156 | 0x1000) != 0xFFFFFFFFFFFFF000)
                                  goto LABEL_235;
                                v156 += 3;
                              }
                              while (v156 != (_QWORD *)v141);
                              v156 = (_QWORD *)v141;
                            }
LABEL_235:
                            *v136 = -8192;
                            v125[2] = vadd_s32(v125[2], (int32x2_t)0x1FFFFFFFFLL);
                            goto LABEL_236;
                          }
                        }
                        else
                        {
                          v157 = *((_DWORD *)v136 + 3);
                        }
                        v144 = v145;
                        v143 = v157;
                        v142 = *((_DWORD *)v136 + 2);
                        goto LABEL_230;
                      }
                      v156 = v136 + 3;
                      if (v136 + 3 == (_QWORD *)v141)
                        goto LABEL_244;
                      while ((*v156 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v156 += 3;
                        if (v156 == (_QWORD *)v141)
                          goto LABEL_244;
                      }
LABEL_236:
                      v136 = v156;
                      if (v156 == (_QWORD *)v141)
                      {
LABEL_244:
                        if (v144)
                        {
                          v160 = v142;
                          v161 = v143;
                          v162 = v144;
                          v259 = 0;
                          v163 = (uint64_t)v133;
                          v164 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(v133, &v258, &v259);
                          v165 = v259;
                          if ((v164 & 1) == 0)
                          {
                            v165 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>(v163, (uint64_t)&v258, &v258, v259);
                            v166 = v258;
                            v165[1] = 0;
                            v165[2] = 0;
                            *v165 = v166;
                          }
                          *((_DWORD *)v165 + 2) = v160;
                          *((_DWORD *)v165 + 3) = v161;
                          v259 = 0;
                          v167 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v245, &v252, &v259);
                          v168 = v259;
                          if ((v167 & 1) == 0)
                          {
                            v168 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v245, (uint64_t)&v252, &v252, v259);
                            *v168 = v252;
                            v168[1] = 0;
                          }
                          v168[1] = v162;
                        }
                        do
                        {
LABEL_348:
                          v125 += 4;
                          if (v125 == (int32x2_t *)v126)
                            goto LABEL_351;
                          v127 = (unint64_t)*v125;
                        }
                        while ((*(_QWORD *)v125 | 0x1000) == 0xFFFFFFFFFFFFF000);
                        if (v125 == (int32x2_t *)v126)
                        {
LABEL_351:
                          v259 = 0;
                          v228 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)this, &v258, &v259);
                          v229 = v259;
                          if (v228)
                          {
                            v230 = (llvm *)v259[1];
                          }
                          else
                          {
                            v229 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this, (uint64_t)&v258, &v258, v259);
                            v230 = 0;
                            v231 = v258;
                            v229[1] = 0;
                            v229[2] = 0;
                            *v229 = v231;
                            *((_DWORD *)v229 + 6) = 0;
                          }
                          llvm::deallocate_buffer(v230, (void *)(24 * *((unsigned int *)v229 + 6)));
                        }
                        continue;
                      }
                      goto LABEL_209;
                    }
                  }
                }
                v120 = 1;
                while (v119 != -4096)
                {
                  v121 = v118 + v120++;
                  v118 = v121 & (v113 - 1);
                  v119 = *(_QWORD *)(v114 + 16 * v118);
                  if (v111 == v119)
                    goto LABEL_168;
                }
LABEL_162:
                v111 = 0;
                if (!v110)
                  goto LABEL_178;
                goto LABEL_163;
              }
              v99 = 1;
              while (v98 != -4096)
              {
                v100 = v97 + v99++;
                v97 = v100 & v96;
                v98 = *(_QWORD *)(v91 + 16 * (v100 & v96));
                if (v247 == v98)
                  goto LABEL_156;
              }
            }
          }
          v52 = 0;
LABEL_64:
          v48 = (uint64_t *)(v41 + 32 * v52);
          goto LABEL_65;
        }
LABEL_42:
        llvm::deallocate_buffer(v248, (void *)(16 * v22));
      }
    }
    else
    {
      if (!HIDWORD(v249))
        goto LABEL_56;
      v22 = v250;
      if (v250 > 0x40)
        goto LABEL_42;
    }
    if (v22)
    {
      v32 = v248;
      v33 = (v22 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v33)
      {
        v34 = v33 + 1;
        v35 = (v33 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v36 = (llvm *)((char *)v248 + 16 * v35);
        v37 = (_QWORD *)((char *)v248 + 16);
        v38 = v35;
        do
        {
          *(v37 - 2) = -4096;
          *v37 = -4096;
          v37 += 4;
          v38 -= 2;
        }
        while (v38);
        if (v34 == v35)
          goto LABEL_52;
      }
      else
      {
        v36 = v248;
      }
      v39 = (llvm *)((char *)v32 + 16 * v22);
      do
      {
        *(_QWORD *)v36 = -4096;
        v36 = (llvm *)((char *)v36 + 16);
      }
      while (v36 != v39);
    }
LABEL_52:
    v249 = 0;
    goto LABEL_56;
  }
  if ((_DWORD)v3)
  {
    v4 = *v2;
    v5 = (v3 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v5)
    {
      v6 = v5 + 1;
      v7 = (v5 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v8 = (_QWORD *)(v4 + 16 * v7);
      v9 = (_QWORD *)(v4 + 16);
      v10 = v7;
      do
      {
        *(v9 - 2) = -4096;
        *v9 = -4096;
        v9 += 4;
        v10 -= 2;
      }
      while (v10);
      if (v6 == v7)
        goto LABEL_14;
    }
    else
    {
      v8 = (_QWORD *)*v2;
    }
    v11 = (_QWORD *)(v4 + 16 * v3);
    do
    {
      *v8 = -4096;
      v8 += 2;
    }
    while (v8 != v11);
  }
LABEL_14:
  *((_QWORD *)this + 5) = 0;
  goto LABEL_15;
}

void mlir::pdl_to_pdl_interp::OptimalBranching::preOrderTraversal(uint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  unint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char **v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  llvm *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  unint64_t *v56;
  uint64_t *v57;
  char **v58;
  unint64_t v59;
  unint64_t v60;
  llvm *v61[2];
  unsigned int v62;
  _QWORD *v63;

  v61[0] = 0;
  v61[1] = 0;
  v62 = 0;
  if (!a3)
  {
    *a4 = 0;
    a4[2] = 0;
    a4[1] = 0;
    v33 = a4 + 1;
    v32 = (char *)operator new(0x10uLL);
    *(_QWORD *)v32 = *(_QWORD *)(a1 + 24);
    *((_QWORD *)v32 + 1) = 0;
    v34 = v32 + 16;
    *a4 = v32;
    *v33 = v32 + 16;
    v58 = a4 + 2;
    a4[2] = v32 + 16;
    goto LABEL_36;
  }
  v6 = a2;
  v7 = (uint64_t *)(a1 + 32);
  v8 = &a2[a3];
  v57 = (uint64_t *)(a1 + 32);
  v56 = v8;
  while (1)
  {
    v60 = *v6;
    if (*(_QWORD *)(a1 + 24) == v60)
      goto LABEL_5;
    v63 = 0;
    v10 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v7, &v60, &v63);
    v11 = 0;
    if (v10)
      v11 = v63[1];
    v59 = v11;
    v63 = 0;
    v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)v61, &v59, &v63);
    v13 = v63;
    if ((v12 & 1) == 0)
    {
      v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v61, (uint64_t)&v59, &v59, v63);
      *v13 = v59;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = 0;
    }
    v15 = (char *)v13[2];
    v14 = v13[3];
    if ((unint64_t)v15 >= v14)
      break;
    *(_QWORD *)v15 = v60;
    v9 = (uint64_t)(v15 + 8);
LABEL_4:
    v13[2] = v9;
LABEL_5:
    if (++v6 == v8)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      if (a3 >> 60)
LABEL_70:
        abort();
      v32 = (char *)operator new(16 * a3);
      a4[2] = &v32[16 * a3];
      v58 = a4 + 2;
      a4[1] = v32;
      v33 = a4 + 1;
      *a4 = v32;
      *(_QWORD *)v32 = *(_QWORD *)(a1 + 24);
      *((_QWORD *)v32 + 1) = 0;
      v34 = v32 + 16;
LABEL_36:
      v35 = 0;
      *v33 = v34;
      while (2)
      {
        v60 = *(_QWORD *)&v32[16 * v35];
        v63 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)v61, &v60, &v63))
        {
          v37 = (uint64_t *)v63[1];
          v36 = (uint64_t *)v63[2];
          if (v37 == v36)
            goto LABEL_38;
        }
        else
        {
          v38 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v61, (uint64_t)&v60, &v60, v63);
          v37 = 0;
          *v38 = v60;
          v38[1] = 0;
          v38[2] = 0;
          v38[3] = 0;
          v36 = (uint64_t *)v38[2];
          if (!v36)
            goto LABEL_38;
        }
        v39 = *v58;
LABEL_45:
        while (1)
        {
          v41 = *v37;
          if (v34 >= v39)
            break;
          v40 = v60;
          *(_QWORD *)v34 = v41;
          *((_QWORD *)v34 + 1) = v40;
          v34 += 16;
          *v33 = v34;
          if (++v37 == v36)
            goto LABEL_37;
        }
        v42 = (v34 - v32) >> 4;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
          goto LABEL_70;
        if ((v39 - v32) >> 3 > v43)
          v43 = (v39 - v32) >> 3;
        if ((unint64_t)(v39 - v32) >= 0x7FFFFFFFFFFFFFF0)
          v43 = 0xFFFFFFFFFFFFFFFLL;
        if (v43 >> 60)
          goto LABEL_71;
        v44 = 16 * v43;
        v45 = (char *)operator new(16 * v43);
        v46 = v60;
        v47 = &v45[16 * v42];
        *(_QWORD *)v47 = v41;
        *((_QWORD *)v47 + 1) = v46;
        if (v34 == v32)
        {
          v49 = &v45[16 * v42];
          v39 = &v45[v44];
          v34 = v47 + 16;
          *a4 = v47;
          a4[1] = v47 + 16;
          a4[2] = v39;
          if (v32)
            goto LABEL_56;
        }
        else
        {
          v48 = &v45[16 * v42];
          do
          {
            v49 = v48 - 16;
            *((_OWORD *)v48 - 1) = *((_OWORD *)v34 - 1);
            v34 -= 16;
            v48 -= 16;
          }
          while (v34 != v32);
          v39 = &v45[v44];
          v34 = v47 + 16;
          *a4 = v49;
          a4[1] = v47 + 16;
          a4[2] = v39;
          if (v32)
LABEL_56:
            operator delete(v32);
        }
        v32 = v49;
        *v33 = v34;
        if (++v37 == v36)
        {
LABEL_37:
          v32 = *a4;
LABEL_38:
          if (++v35 >= (unint64_t)((v34 - v32) >> 4))
          {
            v50 = v61[0];
            if (v62)
            {
              v51 = (_QWORD *)((char *)v61[0] + 16);
              v52 = 32 * v62;
              do
              {
                if ((*(v51 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
                {
                  v53 = (void *)*(v51 - 1);
                  if (v53)
                  {
                    *v51 = v53;
                    operator delete(v53);
                  }
                }
                v51 += 4;
                v52 -= 32;
              }
              while (v52);
              v50 = v61[0];
              v54 = (void *)(32 * v62);
            }
            else
            {
              v54 = 0;
            }
            llvm::deallocate_buffer(v50, v54);
          }
          continue;
        }
        goto LABEL_45;
      }
    }
  }
  v16 = (char *)v13[1];
  v17 = (v15 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_70;
  v19 = v14 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
LABEL_71:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    *(_QWORD *)v22 = v60;
    v9 = (uint64_t)(v22 + 8);
    if (v15 == v16)
      goto LABEL_30;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    *(_QWORD *)(8 * v17) = v60;
    v9 = 8 * v17 + 8;
    if (v15 == v16)
    {
LABEL_30:
      v13[1] = v22;
      v13[2] = v9;
      v13[3] = &v21[8 * v20];
      v7 = v57;
      if (v15)
        operator delete(v15);
      v8 = v56;
      goto LABEL_4;
    }
  }
  v23 = v15 - 8 - v16;
  if (v23 < 0x58)
    goto LABEL_74;
  if ((unint64_t)(v16 - v21) < 0x20)
    goto LABEL_74;
  v24 = (v23 >> 3) + 1;
  v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
  v26 = &v15[-v25];
  v22 -= v25;
  v27 = &v21[8 * v17 - 16];
  v28 = (__int128 *)(v15 - 16);
  v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v30 = *v28;
    *((_OWORD *)v27 - 1) = *(v28 - 1);
    *(_OWORD *)v27 = v30;
    v27 -= 32;
    v28 -= 2;
    v29 -= 4;
  }
  while (v29);
  v15 = v26;
  if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_74:
    do
    {
      v31 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *((_QWORD *)v22 - 1) = v31;
      v22 -= 8;
    }
    while (v15 != v16);
  }
  v15 = (char *)v13[1];
  goto LABEL_30;
}

uint64_t llvm::detail::DenseSetImpl<mlir::Value,llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,llvm::DenseMapInfo<mlir::Value,void>>::DenseSetImpl<mlir::Value const*>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v14;
  unint64_t v15;
  int64x2_t *buffer;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;

  if (*a3 == *a2
    || (v6 = (((uint64_t)(*a3 - *a2) >> 3) - 1) | ((unint64_t)(((uint64_t)(*a3 - *a2) >> 3) - 1) >> 1),
        v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        LODWORD(v8) = HIDWORD(v8) | v8,
        v9 = __CFADD__((_DWORD)v8, 1),
        v10 = v8 + 1,
        v9))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    v14 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    LODWORD(v15) = (((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v15;
    buffer = (int64x2_t *)llvm::allocate_buffer(8 * v15, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = buffer;
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v19 = (char *)buffer;
      if (v18 < 3)
        goto LABEL_16;
      v20 = v18 + 1;
      v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
      v21 = buffer + 1;
      v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21[-1] = v22;
        *v21 = v22;
        v21 += 2;
        v23 -= 4;
      }
      while (v23);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_16:
        v24 = &buffer->i8[8 * v17];
        do
        {
          *(_QWORD *)v19 = -4096;
          v19 += 8;
        }
        while (v19 != v24);
      }
    }
  }
  v11 = (_QWORD *)*a2;
  v12 = (_QWORD *)*a3;
  while (v11 != v12)
  {
    v25 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v11, &v25) & 1) == 0)*llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)v11, v11, v25) = *v11;
    ++v11;
  }
  return a1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  llvm *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    v16 = (void *)(32 * v3);
    if ((_DWORD)v3)
    {
      v17 = 32 * v3;
      v18 = v4;
      do
      {
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v18, &v25);
          v19 = v25;
          *v25 = *(_QWORD *)v18;
          v19[1] = 0;
          v19[2] = 0;
          v19[3] = 0;
          *(_OWORD *)(v19 + 1) = *(_OWORD *)((char *)v18 + 8);
          v19[3] = *((_QWORD *)v18 + 3);
          *((_QWORD *)v18 + 1) = 0;
          *((_QWORD *)v18 + 2) = 0;
          *((_QWORD *)v18 + 3) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (llvm *)((char *)v18 + 32);
        v17 -= 32;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    if (((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_23;
    v21 = ((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v21 & 0xFFFFFFFFFFFFFFELL)];
    v22 = result + 4;
    v23 = v21 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 4) = -4096;
      *v22 = -4096;
      v22 += 8;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v24 = &result[4 * v20];
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v24);
    }
  }
  return result;
}

mlir::Block *mlir::collect_regions::detail::verifyShouldAddToQueue(mlir::Block *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Block *result;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t AttrData;
  uint64_t v13;
  uint64_t InherentAttr;
  char v15;
  mlir::Block *ParentOp;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  if (!a4)
    return 0;
  result = *(mlir::Block **)(a4 + 16);
  if (result)
  {
    result = (mlir::Block *)mlir::Block::getParentOp(result);
    if (result)
    {
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, a4, a5);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
      v23 = v11;
      if (*(_BYTE *)(a4 + 47))
      {
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v23);
        InherentAttr = mlir::Operation::getInherentAttr(a4, AttrData, v13);
        if (v15)
        {
LABEL_8:
          if (InherentAttr)
            v10 = 0;
          ParentOp = *(mlir::Block **)(a4 + 16);
          if (ParentOp)
            ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
          if (ParentOp != a1)
            v10 = 0;
          v17 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
          v18 = v10 & (*(_QWORD *)(*(_QWORD *)(a4 + 48) + 16) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id) & ~(*(unsigned __int8 (**)(_QWORD, void *))(**(_QWORD **)(a4 + 48) + 32))(*(_QWORD *)(a4 + 48), v17);
          if (a1 == (mlir::Block *)a4)
            v19 = 0;
          else
            v19 = v18;
          v20 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
          v21 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a4 + 48) + 32))(*(_QWORD *)(a4 + 48), v20);
          v22 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
          return (mlir::Block *)(v19 & ((v21 | (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a4 + 48)
                                                                                               + 32))(*(_QWORD *)(a4 + 48), v22)) ^ 1));
        }
        v11 = v23;
      }
      InherentAttr = mlir::DictionaryAttr::get(a4 + 56, v11);
      goto LABEL_8;
    }
  }
  return result;
}

void mlir::collect_regions::detail::buildLiveInsLiveOuts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t *a5, int a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _BOOL4 v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t NextResultAtOffset;

  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  v6 = *((unsigned int *)a4 + 2);
  if ((_DWORD)v6)
  {
    v9 = a3;
    v12 = *a4;
    v56 = (void *)(a1 + 16);
    v57 = (uint64_t)&(*a4)[v6];
    v54 = (void *)(a3 + 16);
    v55 = (void *)(a2 + 16);
    while (1)
    {
      v13 = *v12;
      v14 = *(_QWORD *)(*v12 + 24);
      v15 = *(unsigned int *)(v9 + 8);
      if (v15 >= *(unsigned int *)(v9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v54, v15 + 1, 8);
        v15 = *(unsigned int *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v15) = v14;
      ++*(_DWORD *)(v9 + 8);
      if ((*(_BYTE *)(v13 + 46) & 0x80) != 0)
      {
        v16 = *(unsigned int *)(v13 + 68);
        if ((_DWORD)v16)
        {
          v17 = 0;
          v18 = *(_QWORD *)(v13 + 72);
          do
          {
            NextResultAtOffset = *(_QWORD *)(v18 + 32 * v17 + 24);
            if ((~*(_DWORD *)(NextResultAtOffset + 8) & 7) == 0)
            {
LABEL_20:
              v27 = *(_QWORD **)a1;
              v28 = *(unsigned int *)(a1 + 8);
              v29 = *(_QWORD **)a1;
              if ((_DWORD)v28)
              {
                v30 = 8 * v28;
                v29 = *(_QWORD **)a1;
                while (*v29 != NextResultAtOffset)
                {
                  ++v29;
                  v30 -= 8;
                  if (!v30)
                  {
                    v29 = &v27[v28];
                    break;
                  }
                }
              }
              if (v28 == v29 - v27)
              {
                v31 = NextResultAtOffset;
                if (v28 >= *(_DWORD *)(a1 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v56, v28 + 1, 8);
                  v28 = *(unsigned int *)(a1 + 8);
                  v27 = *(_QWORD **)a1;
                }
                v27[v28] = v31;
                ++*(_DWORD *)(a1 + 8);
              }
              goto LABEL_10;
            }
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
            v20 = *a5;
            v21 = *((unsigned int *)a5 + 4);
            if ((_DWORD)v21)
            {
              LODWORD(v22) = ((DefiningOp >> 4) ^ (DefiningOp >> 9)) & (v21 - 1);
              v23 = (uint64_t *)(v20 + 8 * v22);
              v24 = *v23;
              if (*v23 == DefiningOp)
                goto LABEL_19;
              v25 = 1;
              while (v24 != -4096)
              {
                v26 = v22 + v25++;
                v22 = v26 & (v21 - 1);
                v24 = *(_QWORD *)(v20 + 8 * v22);
                if (v24 == DefiningOp)
                {
                  v23 = (uint64_t *)(v20 + 8 * v22);
                  goto LABEL_19;
                }
              }
            }
            v23 = (uint64_t *)(v20 + 8 * v21);
LABEL_19:
            if (v23 == (uint64_t *)(v20 + 8 * v21))
              goto LABEL_20;
LABEL_10:
            ++v17;
          }
          while (v17 != v16);
        }
      }
      v32 = *(unsigned int *)(v13 + 36);
      v33 = (_DWORD)v32 ? v13 - 16 : 0;
      if ((_DWORD)v32)
        break;
LABEL_3:
      ++v12;
      v9 = a3;
      if (v12 == (uint64_t *)v57)
        return;
    }
    v34 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v33, v34);
      v35 = *(_QWORD **)NextResultAtOffset;
      if (*(_QWORD *)NextResultAtOffset)
      {
        v36 = *((unsigned int *)a5 + 4);
        if ((_DWORD)v36)
        {
          v37 = *a5;
          v38 = v36 - 1;
          v39 = *a5 + 8 * v36;
          do
          {
            v40 = v35[2];
            LODWORD(v41) = ((v40 >> 4) ^ (v40 >> 9)) & v38;
            v42 = (uint64_t *)(v37 + 8 * v41);
            v43 = *v42;
            if (*v42 != v40)
            {
              v45 = 1;
              while (v43 != -4096)
              {
                v46 = v41 + v45++;
                v41 = v46 & v38;
                v43 = *(_QWORD *)(v37 + 8 * v41);
                if (v43 == v40)
                {
                  v42 = (uint64_t *)(v37 + 8 * v41);
                  goto LABEL_39;
                }
              }
              goto LABEL_50;
            }
LABEL_39:
            v44 = v42 == (uint64_t *)v39;
            if (v42 == (uint64_t *)v39)
              break;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
          if ((a6 & 1) != 0)
            goto LABEL_51;
LABEL_52:
          if (v44)
          {
            v49 = *(_QWORD **)a2;
            v50 = *(unsigned int *)(a2 + 8);
            v51 = *(_QWORD **)a2;
            if ((_DWORD)v50)
            {
              v52 = 8 * v50;
              v51 = *(_QWORD **)a2;
              while (*v51 != NextResultAtOffset)
              {
                ++v51;
                v52 -= 8;
                if (!v52)
                {
                  v51 = &v49[v50];
                  break;
                }
              }
            }
            if (v50 == v51 - v49)
            {
              v53 = NextResultAtOffset;
              if (v50 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v55, v50 + 1, 8);
                v50 = *(unsigned int *)(a2 + 8);
                v49 = *(_QWORD **)a2;
              }
              v49[v50] = v53;
              ++*(_DWORD *)(a2 + 8);
            }
          }
          goto LABEL_34;
        }
LABEL_50:
        v44 = 1;
        if ((a6 & 1) == 0)
          goto LABEL_52;
      }
      else
      {
        if (!a6)
          goto LABEL_34;
        v44 = 0;
      }
LABEL_51:
      v47 = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
      v48 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v47 + 48) + 32))(*(_QWORD *)(v47 + 48), v48) & 1) == 0)
        goto LABEL_52;
LABEL_34:
      if (++v34 == v32)
        goto LABEL_3;
    }
  }
}

void mlir::collectRegions(mlir::GenericProgramPoint *a1, mlir::GenericProgramPoint *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  llvm *v14[2];
  int v15;
  llvm *v16;
  uint64_t v17;
  int v18;
  llvm *v19;
  uint64_t v20;
  int v21;
  llvm *v22[2];
  void *v23[2];
  __int128 v24;
  __int128 v25;
  llvm *v26[2];
  int v27;
  llvm *v28;
  uint64_t v29;
  int v30;
  llvm *v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  _QWORD v37[3];
  void (**v38)(mlir::_anonymous_namespace_::BuildContext *__hidden);
  int v39;
  llvm *v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  mlir::GenericProgramPoint *v44[2];
  unint64_t v45[2];
  unint64_t v46[2];
  void *v47[2];
  uint64_t v48;
  void *v49[2];
  uint64_t v50;
  void *__dst;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[20];
  void *v58[2];
  _BYTE v59[48];
  void *v60;
  int v61[2];
  uint64_t v62;
  void *v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t *v67[2];
  _QWORD v68[10];

  v68[8] = *MEMORY[0x1E0C80C00];
  v44[0] = a1;
  v44[1] = a2;
  v43 = a3;
  v4 = a3[1];
  v39 = 0;
  v38 = off_1E0E261F8;
  v41 = 0;
  v40 = 0;
  v42 = 0;
  *(_QWORD *)(v4 + 8) = &v38;
  v23[0] = (void *)mlir::SymbolRefAttr::get(a1, a2);
  v57[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v23);
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v57);
  v37[2] = (*(uint64_t (**)(_QWORD *))(*a3 + 16))(a3);
  (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*a3 + 56))(v37, a3);
  v63 = &v66;
  v65 = 6;
  v60 = &v62;
  *(_QWORD *)v61 = 0x600000000;
  v36 = 1;
  v13 = v4;
  v64 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v27 = 0;
  v34 = v43;
  v35 = 0;
  v58[0] = v59;
  v58[1] = (void *)0x600000000;
  v57[0] = (uint64_t)v44;
  v57[1] = (uint64_t)&v43;
  v57[2] = (uint64_t)v23;
  v57[3] = (uint64_t)v58;
  mlir::detail::walk<mlir::ForwardIterator>(v44[0], (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_2>, (uint64_t)v57, 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v5 = *((_QWORD *)v44[0] + 2);
    mlir::GenericProgramPoint::~GenericProgramPoint(v44[0]);
    *(_QWORD *)(v13 + 16) = v5;
    *(_QWORD *)(v13 + 24) = v6;
    v7 = (uint64_t **)((char *)v23[1] + 8 * ((unint64_t)v25 >> 9));
    if ((void *)v24 == v23[1])
    {
      v8 = 0;
      v10 = 0;
      v9 = (uint64_t **)((char *)v23[1] + 8 * ((*((_QWORD *)&v25 + 1) + (_QWORD)v25) >> 9));
    }
    else
    {
      v8 = &(*v7)[v25 & 0x1FF];
      v9 = (uint64_t **)((char *)v23[1] + 8 * ((*((_QWORD *)&v25 + 1) + (_QWORD)v25) >> 9));
      v10 = &(*v9)[(*((_QWORD *)&v25 + 1) + v25) & 0x1FF];
    }
    v57[0] = (uint64_t)&v63;
    std::__for_each_segment[abi:nn180100]<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::back_insert_iterator<llvm::SmallVector<mlir::Operation *,6u>>>>(v7, v8, v9, v10, v57);
    (*(void (**)(uint64_t *__return_ptr))(*v43 + 80))(v57);
    v67[0] = v68;
    v68[0] = "placement";
    v68[1] = 9;
    v67[1] = (uint64_t *)0x200000001;
    mlir::ConversionTarget::setDialectAction(v57, (uint64_t)v68, 1, 2);
    if (v67[0] != v68)
      free(v67[0]);
    v54 = &v56;
    v55 = 0x600000000;
    __dst = &v53;
    v52 = 0x600000000;
    v67[0] = (uint64_t *)v63;
    v14[0] = (llvm *)((char *)v63 + 8 * v64);
    llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl<mlir::Operation **>((uint64_t)v22, v67, (uint64_t **)v14);
    mlir::collect_regions::detail::buildLiveInsLiveOuts((uint64_t)&v54, (uint64_t)&__dst, (uint64_t)&v60, (uint64_t **)&v63, (uint64_t *)v22, 0);
    v49[0] = &v50;
    v49[1] = (void *)0x600000000;
    v47[0] = &v48;
    v47[1] = (void *)0x600000000;
    v11 = v43;
    mlir::ValueRange::ValueRange(v46, (uint64_t)__dst, v52);
    (*(void (**)(_QWORD *, unint64_t, unint64_t, void **))(*v11 + 192))(v11, v46[0], v46[1], v49);
    v12 = v43;
    mlir::ValueRange::ValueRange(v45, (uint64_t)v54, v55);
    (*(void (**)(_QWORD *, unint64_t, unint64_t, void **))(*v12 + 192))(v12, v45[0], v45[1], v47);
    v14[1] = 0;
    v14[0] = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    mlir::FusedLoc::get((uint64_t **)v60, (mlir::MLIRContext *)v61[0], 0, *(mlir::UnknownLoc **)v13);
  }
  if (v58[0] != v59)
    free(v58[0]);
  llvm::deallocate_buffer(v31, (void *)(8 * v33));
}

uint64_t sub_1806102E8()
{
  return 1;
}

void mlir::`anonymous namespace'::eraseOpsWeCannotConvert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t DefiningOp;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  llvm *v76;
  uint64_t v77;
  int v78;
  int v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  int v86;
  BOOL v87;
  unsigned int v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  int v103;
  BOOL v104;
  unsigned int v105;
  uint64_t *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  uint64_t *v127;
  unsigned int v128;
  uint64_t **v129;
  uint64_t v130;
  int v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _BOOL4 v160;
  uint64_t NextResultAtOffset;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t *v180;
  _BOOL4 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  unsigned int v212;
  int v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  int v219;
  int v220;
  char v223;
  uint64_t v224;
  int v227;
  uint64_t v228;
  llvm *v230[2];
  unsigned int v231;
  void *__p[2];
  __int128 v233;
  unsigned __int128 v234;
  uint64_t v235;
  llvm *v236[2];
  unsigned int v237;
  _QWORD v238[2];
  unsigned int v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243[4];
  uint64_t v244;
  _OWORD v245[2];
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;

  v238[0] = 0;
  v238[1] = 0;
  v239 = 0;
  v236[0] = 0;
  v236[1] = 0;
  v237 = 0;
  v11 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v11)
  {
    v13 = *(uint64_t **)a1;
    v228 = *(_QWORD *)a1 + 8 * v11;
    while (1)
    {
      v14 = *v13;
      v235 = *v13;
      v15 = *(_QWORD *)a7;
      v16 = *(unsigned int *)(a7 + 16);
      if ((_DWORD)v16)
      {
        LODWORD(v17) = (v16 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        v18 = (uint64_t *)(v15 + 8 * v17);
        v19 = *v18;
        if (*v18 != v14)
        {
          v20 = 1;
          do
          {
            if (v19 == -4096)
              goto LABEL_10;
            v21 = v17 + v20++;
            v17 = v21 & (v16 - 1);
            v19 = *(_QWORD *)(v15 + 8 * v17);
          }
          while (v19 != v14);
          v18 = (uint64_t *)(v15 + 8 * v17);
        }
      }
      else
      {
LABEL_10:
        v18 = (uint64_t *)(v15 + 8 * v16);
      }
      if (v18 == (uint64_t *)(v15 + 8 * v16))
        goto LABEL_14;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 1) == 0)
        break;
      if (++v13 == (uint64_t *)v228)
        goto LABEL_159;
    }
    v14 = v235;
LABEL_14:
    if ((*(_BYTE *)(v14 + 46) & 0x80) != 0)
    {
      v22 = *(unsigned int *)(v14 + 68);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = *(_QWORD *)(v14 + 72);
        do
        {
          v30 = *(_QWORD **)(v24 + 32 * v23 + 24);
          __p[0] = v30;
          v31 = (_QWORD *)*v30;
          if (*v30)
          {
            while (v235 == v31[2])
            {
              v31 = (_QWORD *)*v31;
              if (!v31)
                goto LABEL_25;
            }
          }
          else
          {
LABEL_25:
            *(_QWORD *)&v240 = v30;
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v240);
            if (DefiningOp)
            {
              v33 = DefiningOp;
              v34 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v33 + 48) + 32))(*(_QWORD *)(v33 + 48), v34))
              {
                v35 = mlir::Value::getDefiningOp((mlir::Value *)__p);
                v36 = v35;
                v37 = *(_QWORD *)a7;
                v27 = *(unsigned int *)(a7 + 16);
                v38 = v35 >> 4;
                if ((_DWORD)v27)
                {
                  LODWORD(v39) = (v38 ^ (v35 >> 9)) & (v27 - 1);
                  v40 = (uint64_t *)(v37 + 8 * v39);
                  v41 = *v40;
                  if (*v40 != v35)
                  {
                    v42 = 1;
                    do
                    {
                      if (v41 == -4096)
                        goto LABEL_33;
                      v43 = v39 + v42++;
                      v39 = v43 & (v27 - 1);
                      v41 = *(_QWORD *)(v37 + 8 * v39);
                    }
                    while (v41 != v35);
                    v40 = (uint64_t *)(v37 + 8 * v39);
                  }
                }
                else
                {
LABEL_33:
                  v40 = (uint64_t *)(v37 + 8 * v27);
                }
                if (v40 != (uint64_t *)(v37 + 8 * v27))
                {
                  mlir::Operation::removeAttr(v35, *a6);
                  v37 = *(_QWORD *)a7;
                  LODWORD(v27) = *(_DWORD *)(a7 + 16);
                }
                if ((_DWORD)v27)
                {
                  v44 = v27 - 1;
                  LODWORD(v27) = (v27 - 1) & (v38 ^ (v36 >> 9));
                  v29 = (uint64_t *)(v37 + 8 * v27);
                  v28 = *v29;
                  if (v36 != *v29)
                  {
                    v26 = 1;
                    do
                    {
                      if (v28 == -4096)
                        goto LABEL_21;
                      v25 = v27 + v26++;
                      v27 = v25 & v44;
                      v28 = *(_QWORD *)(v37 + 8 * v27);
                    }
                    while (v36 != v28);
                    v29 = (uint64_t *)(v37 + 8 * v27);
                  }
                  *v29 = -8192;
                  *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                }
              }
            }
          }
LABEL_21:
          ++v23;
        }
        while (v23 != v22);
      }
    }
    v233 = 0u;
    v234 = 0u;
    *(_OWORD *)__p = 0u;
    v230[0] = 0;
    v230[1] = 0;
    v231 = 0;
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
    v46 = *((_QWORD *)&v234 + 1);
    v45 = v234;
    *(_QWORD *)(*(_QWORD *)((char *)__p[1] + ((((_QWORD)v234 + *((_QWORD *)&v234 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((v234 + *((_QWORD *)&v234 + 1)) & 0x1FF)) = v235;
    *((_QWORD *)&v234 + 1) = v46 + 1;
    if (v46 == -1)
      goto LABEL_107;
    v47 = (char *)__p[1];
LABEL_44:
    v49 = *(_QWORD *)(*(_QWORD *)&v47[(v45 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v45 & 0x1FF));
    if ((*(_BYTE *)(v49 + 46) & 0x80) == 0 || (v50 = *(unsigned int *)(v49 + 68), !(_DWORD)v50))
    {
LABEL_95:
      v89 = 0;
      goto LABEL_96;
    }
    v51 = 0;
    v52 = *(_QWORD *)(v49 + 72);
    while (1)
    {
      *(_QWORD *)&v240 = *(_QWORD *)(v52 + 32 * v51 + 24);
      *(_QWORD *)&v245[0] = 0;
      v57 = mlir::Value::getDefiningOp((mlir::Value *)&v240);
      *(_QWORD *)&v245[0] = v57;
      if (v57)
      {
        v58 = v57;
        v59 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v58 + 48) + 32))(*(_QWORD *)(v58 + 48), v59) & 1) == 0)
        {
          v60 = *(_QWORD *)&v245[0];
          v61 = *(_QWORD *)a7;
          v62 = *(unsigned int *)(a7 + 16);
          v63 = LODWORD(v245[0]) >> 4;
          if ((_DWORD)v62)
          {
            LODWORD(v64) = (v63 ^ (LODWORD(v245[0]) >> 9)) & (v62 - 1);
            v65 = (uint64_t *)(v61 + 8 * v64);
            v66 = *v65;
            if (*v65 != *(_QWORD *)&v245[0])
            {
              v67 = 1;
              do
              {
                if (v66 == -4096)
                  goto LABEL_57;
                v68 = v64 + v67++;
                v64 = v68 & (v62 - 1);
                v66 = *(_QWORD *)(v61 + 8 * v64);
              }
              while (v66 != *(_QWORD *)&v245[0]);
              v65 = (uint64_t *)(v61 + 8 * v64);
            }
          }
          else
          {
LABEL_57:
            v65 = (uint64_t *)(v61 + 8 * v62);
          }
          if (v65 != (uint64_t *)(v61 + 8 * v62))
          {
            v89 = 1;
LABEL_96:
            v47 = (char *)__p[1];
            v90 = *((_QWORD *)&v234 + 1) - 1;
            v45 = v234 + 1;
            v234 = __PAIR128__(*((unint64_t *)&v234 + 1), (uint64_t)v234 + 1) + __PAIR128__(-1, 0);
            if (v45 >= 0x400)
            {
              operator delete(*(void **)__p[1]);
              v47 = (char *)__p[1] + 8;
              v45 = v234 - 512;
              __p[1] = (char *)__p[1] + 8;
              *(_QWORD *)&v234 = v234 - 512;
              v90 = *((_QWORD *)&v234 + 1);
            }
            v87 = v90 == 0;
            v48 = v89 ^ 1;
            if (v87)
              v48 = 0;
            if ((v48 & 1) != 0)
              goto LABEL_44;
            if ((v89 & 1) != 0)
            {
              v91 = v235;
              v92 = *(unsigned int *)(v235 + 36);
              v93 = v235 - 16;
              if ((_DWORD)v92)
                v94 = v235 - 16;
              else
                v94 = 0;
              v247 = v94;
              v248 = v92;
              mlir::ResultRange::use_begin(&v247, (uint64_t *)v245);
              v95 = *(unsigned int *)(v91 + 36);
              if ((_DWORD)v95)
                v96 = v93;
              else
                v96 = 0;
              v247 = v96;
              v248 = v95;
              mlir::ResultRange::use_end(&v247, v243);
              v97 = v246;
              v242 = v246;
              v240 = v245[0];
              v241 = v245[1];
              v98 = v244;
              while (2)
              {
                if (v97 == v98)
                  goto LABEL_120;
                v247 = *(_QWORD *)(v97 + 16);
                v112 = v247;
                v113 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
                if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v112 + 48) + 32))(*(_QWORD *)(v112 + 48), v113) & 1) == 0)
                {
                  v114 = *(_QWORD *)a7;
                  v109 = *(unsigned int *)(a7 + 16);
                  if ((_DWORD)v109)
                  {
                    LODWORD(v115) = ((v247 >> 4) ^ (v247 >> 9)) & (v109 - 1);
                    v116 = (uint64_t *)(v114 + 8 * v115);
                    v117 = *v116;
                    if (*v116 != v247)
                    {
                      v118 = 1;
                      do
                      {
                        if (v117 == -4096)
                          goto LABEL_134;
                        v119 = v115 + v118++;
                        v115 = v119 & (v109 - 1);
                        v117 = *(_QWORD *)(v114 + 8 * v115);
                      }
                      while (v117 != v247);
                      v116 = (uint64_t *)(v114 + 8 * v115);
                    }
                  }
                  else
                  {
LABEL_134:
                    v116 = (uint64_t *)(v114 + 8 * v109);
                  }
                  if (v116 != (uint64_t *)(v114 + 8 * v109))
                  {
                    mlir::Operation::removeAttr(v247, *a6);
                    if (!v237)
                    {
                      v127 = 0;
                      goto LABEL_148;
                    }
                    v120 = ((v247 >> 4) ^ (v247 >> 9)) & (v237 - 1);
                    v121 = (uint64_t *)((char *)v236[0] + 8 * v120);
                    v122 = *v121;
                    if (v247 != *v121)
                    {
                      v123 = 0;
                      v124 = 1;
                      while (v122 != -4096)
                      {
                        if (v123)
                          v125 = 0;
                        else
                          v125 = v122 == -8192;
                        if (v125)
                          v123 = v121;
                        v126 = v120 + v124++;
                        v120 = v126 & (v237 - 1);
                        v121 = (uint64_t *)((char *)v236[0] + 8 * v120);
                        v122 = *v121;
                        if (v247 == *v121)
                          goto LABEL_149;
                      }
                      if (v123)
                        v127 = v123;
                      else
                        v127 = v121;
LABEL_148:
                      llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v236, v127, &v247);
                    }
LABEL_149:
                    v114 = *(_QWORD *)a7;
                    LODWORD(v109) = *(_DWORD *)(a7 + 16);
                  }
                  if ((_DWORD)v109)
                  {
                    v128 = v109 - 1;
                    LODWORD(v109) = ((v247 >> 4) ^ (v247 >> 9)) & (v109 - 1);
                    v111 = (uint64_t *)(v114 + 8 * v109);
                    v110 = *v111;
                    if (v247 != *v111)
                    {
                      v108 = 1;
                      do
                      {
                        if (v110 == -4096)
                          goto LABEL_125;
                        v107 = v109 + v108++;
                        v109 = v107 & v128;
                        v110 = *(_QWORD *)(v114 + 8 * v109);
                      }
                      while (v247 != v110);
                      v111 = (uint64_t *)(v114 + 8 * v109);
                    }
                    *v111 = -8192;
                    *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                  }
                }
LABEL_125:
                mlir::ResultRange::UseIterator::operator++((uint64_t *)v245);
                v97 = v246;
                continue;
              }
            }
LABEL_107:
            if (v239)
            {
              v99 = ((v235 >> 4) ^ (v235 >> 9)) & (v239 - 1);
              v100 = (uint64_t *)(v238[0] + 8 * v99);
              v101 = *v100;
              if (v235 != *v100)
              {
                v102 = 0;
                v103 = 1;
                while (v101 != -4096)
                {
                  if (v102)
                    v104 = 0;
                  else
                    v104 = v101 == -8192;
                  if (v104)
                    v102 = v100;
                  v105 = v99 + v103++;
                  v99 = v105 & (v239 - 1);
                  v100 = (uint64_t *)(v238[0] + 8 * v99);
                  v101 = *v100;
                  if (v235 == *v100)
                    goto LABEL_120;
                }
                if (v102)
                  v106 = v102;
                else
                  v106 = v100;
LABEL_119:
                llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v238, v106, &v235);
              }
LABEL_120:
              llvm::deallocate_buffer(v230[0], (void *)(8 * v231));
            }
            v106 = 0;
            goto LABEL_119;
          }
          if (v239)
          {
            LODWORD(v69) = (v239 - 1) & (v63 ^ (LODWORD(v245[0]) >> 9));
            v70 = (uint64_t *)(v238[0] + 8 * v69);
            v71 = *v70;
            if (*v70 != *(_QWORD *)&v245[0])
            {
              v72 = 1;
              do
              {
                if (v71 == -4096)
                  goto LABEL_65;
                v73 = v69 + v72++;
                v69 = v73 & (v239 - 1);
                v71 = *(_QWORD *)(v238[0] + 8 * v69);
              }
              while (v71 != *(_QWORD *)&v245[0]);
              v70 = (uint64_t *)(v238[0] + 8 * v69);
            }
          }
          else
          {
LABEL_65:
            v70 = (uint64_t *)(v238[0] + 8 * v239);
          }
          if (v70 == (uint64_t *)(v238[0] + 8 * v239))
          {
            v74 = v231;
            if (v231)
            {
              LODWORD(v75) = (v231 - 1) & (v63 ^ (LODWORD(v245[0]) >> 9));
              v76 = (llvm *)((char *)v230[0] + 8 * v75);
              v77 = *(_QWORD *)v76;
              if (*(_QWORD *)v76 != *(_QWORD *)&v245[0])
              {
                v78 = 1;
                do
                {
                  if (v77 == -4096)
                    goto LABEL_73;
                  v79 = v75 + v78++;
                  v75 = v79 & (v231 - 1);
                  v77 = *((_QWORD *)v230[0] + v75);
                }
                while (v77 != *(_QWORD *)&v245[0]);
                v76 = (llvm *)((char *)v230[0] + 8 * v75);
              }
            }
            else
            {
LABEL_73:
              v76 = (llvm *)((char *)v230[0] + 8 * v231);
            }
            if (v76 == (llvm *)((char *)v230[0] + 8 * v231))
            {
              v80 = (char *)__p[1];
              if ((void *)v233 == __p[1])
                v81 = 0;
              else
                v81 = (((_QWORD)v233 - (unint64_t)__p[1]) << 6) - 1;
              v82 = *((_QWORD *)&v234 + 1);
              v83 = *((_QWORD *)&v234 + 1) + v234;
              if (v81 == *((_QWORD *)&v234 + 1) + (_QWORD)v234)
              {
                std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
                v82 = *((_QWORD *)&v234 + 1);
                v80 = (char *)__p[1];
                v83 = v234 + *((_QWORD *)&v234 + 1);
                v60 = *(_QWORD *)&v245[0];
                v74 = v231;
              }
              *(_QWORD *)(*(_QWORD *)&v80[(v83 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v83 & 0x1FF)) = v60;
              *((_QWORD *)&v234 + 1) = v82 + 1;
              if (!v74)
              {
                v84 = 0;
LABEL_82:
                llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v230, v84, (uint64_t *)v245);
                goto LABEL_48;
              }
              v53 = v74 - 1;
              v54 = ((LODWORD(v245[0]) >> 4) ^ (LODWORD(v245[0]) >> 9)) & v53;
              v55 = (uint64_t *)((char *)v230[0] + 8 * v54);
              v56 = *v55;
              if (*(_QWORD *)&v245[0] != *v55)
              {
                v85 = 0;
                v86 = 1;
                while (v56 != -4096)
                {
                  if (v85)
                    v87 = 0;
                  else
                    v87 = v56 == -8192;
                  if (v87)
                    v85 = v55;
                  v88 = v54 + v86++;
                  v54 = v88 & v53;
                  v55 = (uint64_t *)((char *)v230[0] + 8 * v54);
                  v56 = *v55;
                  if (*(_QWORD *)&v245[0] == *v55)
                    goto LABEL_48;
                }
                if (v85)
                  v84 = v85;
                else
                  v84 = v55;
                goto LABEL_82;
              }
            }
          }
        }
      }
LABEL_48:
      if (++v51 == v50)
        goto LABEL_95;
    }
  }
LABEL_159:
  v129 = (uint64_t **)a1;
  mlir::collect_regions::detail::buildLiveInsLiveOuts(a3, a4, a5, (uint64_t **)a1, (uint64_t *)a7, 0);
  v130 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v130)
    goto LABEL_267;
  v223 = 0;
  v131 = a9;
  v132 = *(uint64_t **)a1;
  v133 = *(_QWORD *)a1 + 8 * v130;
  v224 = v133;
  while (1)
  {
    v134 = *v132;
    v135 = *(_QWORD *)a7;
    v136 = *(unsigned int *)(a7 + 16);
    if ((_DWORD)v136)
    {
      LODWORD(v137) = ((v134 >> 4) ^ (v134 >> 9)) & (v136 - 1);
      v138 = (uint64_t *)(v135 + 8 * v137);
      v139 = *v138;
      if (*v138 != v134)
      {
        v140 = 1;
        do
        {
          if (v139 == -4096)
            goto LABEL_169;
          v141 = v137 + v140++;
          v137 = v141 & (v136 - 1);
          v139 = *(_QWORD *)(v135 + 8 * v137);
        }
        while (v139 != v134);
        v138 = (uint64_t *)(v135 + 8 * v137);
      }
    }
    else
    {
LABEL_169:
      v138 = (uint64_t *)(v135 + 8 * v136);
    }
    if (v138 == (uint64_t *)(v135 + 8 * v136) || v131 == 0)
      goto LABEL_162;
    v143 = mlir::TypeID::get<mlir::OpTrait::TypeChanger<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::TypeChanger>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v134 + 48) + 32))(*(_QWORD *)(v134 + 48), v143))goto LABEL_162;
    if ((*(_BYTE *)(v134 + 46) & 0x80) != 0 && (v144 = *(unsigned int *)(v134 + 68), (_DWORD)v144))
    {
      v145 = 0;
      v146 = *(_QWORD *)(v134 + 72);
      while (1)
      {
        v148 = *(_QWORD *)(v146 + 32 * v145 + 24);
        *(_QWORD *)&v240 = v148;
        v149 = mlir::Value::getDefiningOp((mlir::Value *)&v240);
        if (!v149
          || (v150 = v149,
              v151 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
              ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v150 + 48) + 32))(*(_QWORD *)(v150 + 48), v151) & 1) == 0))
        {
          v152 = *(_QWORD **)a3;
          v153 = *(unsigned int *)(a3 + 8);
          if ((_DWORD)v153)
          {
            v154 = 8 * v153;
            v147 = *(_QWORD **)a3;
            do
            {
              if (*v147 == v148)
                goto LABEL_179;
              ++v147;
              v154 -= 8;
            }
            while (v154);
            v147 = &v152[v153];
          }
          else
          {
            v147 = *(_QWORD **)a3;
          }
LABEL_179:
          if (v153 == v147 - v152)
            break;
        }
        if (++v145 == v144)
          goto LABEL_188;
      }
      v227 = 0;
    }
    else
    {
LABEL_188:
      v227 = 1;
    }
    v155 = *(unsigned int *)(v134 + 36);
    v156 = (_DWORD)v155 ? v134 - 16 : 0;
    if (!(_DWORD)v155)
      break;
    v157 = 0;
    do
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v156, v157);
      v163 = *(_QWORD **)a4;
      v164 = *(unsigned int *)(a4 + 8);
      if ((_DWORD)v164)
      {
        v165 = 8 * v164;
        v158 = *(_QWORD **)a4;
        do
        {
          if (*v158 == NextResultAtOffset)
            goto LABEL_196;
          ++v158;
          v165 -= 8;
        }
        while (v165);
        v158 = &v163[v164];
      }
      else
      {
        v158 = *(_QWORD **)a4;
      }
LABEL_196:
      v159 = v158 - v163;
      v160 = v159 == v164;
      ++v157;
    }
    while (v159 != v164 && v157 != v155);
    v166 = *(unsigned int *)(v134 + 36);
    if (!(_DWORD)v166)
      goto LABEL_208;
    v167 = v134 - 16;
LABEL_209:
    *(_QWORD *)&v245[0] = v167;
    *((_QWORD *)&v245[0] + 1) = v166;
    mlir::ResultRange::use_begin((uint64_t *)v245, (uint64_t *)__p);
    v168 = *(unsigned int *)(v134 + 36);
    if ((_DWORD)v168)
      v169 = v134 - 16;
    else
      v169 = 0;
    *(_QWORD *)&v245[0] = v169;
    *((_QWORD *)&v245[0] + 1) = v168;
    mlir::ResultRange::use_end((uint64_t *)v245, v243);
    v170 = v234;
    v242 = v234;
    v240 = *(_OWORD *)__p;
    v241 = v233;
    v171 = v244;
    if ((_QWORD)v234 == v244)
    {
      v181 = 0;
      v131 = a9;
      v133 = v224;
    }
    else
    {
      v131 = a9;
      v133 = v224;
      do
      {
        v172 = *(_QWORD *)a7;
        v173 = *(unsigned int *)(a7 + 16);
        if ((_DWORD)v173)
        {
          v174 = *(_QWORD *)(v170 + 16);
          LODWORD(v175) = ((v174 >> 4) ^ (v174 >> 9)) & (v173 - 1);
          v176 = (uint64_t *)(v172 + 8 * v175);
          v177 = *v176;
          if (*v176 != v174)
          {
            v178 = 1;
            do
            {
              if (v177 == -4096)
                goto LABEL_220;
              v179 = v175 + v178++;
              v175 = v179 & (v173 - 1);
              v177 = *(_QWORD *)(v172 + 8 * v175);
            }
            while (v177 != v174);
            v176 = (uint64_t *)(v172 + 8 * v175);
          }
        }
        else
        {
LABEL_220:
          v176 = (uint64_t *)(v172 + 8 * v173);
        }
        v180 = (uint64_t *)(v172 + 8 * v173);
        v181 = v176 != v180;
        if (v176 != v180)
          break;
        mlir::ResultRange::UseIterator::operator++((uint64_t *)__p);
        v170 = v234;
      }
      while ((_QWORD)v234 != v171);
    }
    v129 = (uint64_t **)a1;
    if ((v227 | (!v160 && !v181)) == 1)
    {
      if ((*(_BYTE *)(v134 + 46) & 0x80) != 0)
      {
        v182 = *(unsigned int *)(v134 + 68);
        if ((_DWORD)v182)
        {
          v183 = 0;
          v184 = *(_QWORD *)(v134 + 72);
          do
          {
            v230[0] = *(llvm **)(v184 + 32 * v183 + 24);
            *(llvm **)&v240 = v230[0];
            v190 = mlir::Value::getDefiningOp((mlir::Value *)&v240);
            if (v190)
            {
              v191 = v190;
              v192 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v191 + 48) + 32))(*(_QWORD *)(v191 + 48), v192))
              {
                v193 = mlir::Value::getDefiningOp((mlir::Value *)v230);
                v194 = v193;
                v195 = *(unsigned int *)(v193 + 36);
                v196 = v193 - 16;
                if ((_DWORD)v195)
                  v197 = v193 - 16;
                else
                  v197 = 0;
                *(_QWORD *)&v245[0] = v197;
                *((_QWORD *)&v245[0] + 1) = v195;
                mlir::ResultRange::use_begin((uint64_t *)v245, (uint64_t *)__p);
                v198 = *(unsigned int *)(v194 + 36);
                if ((_DWORD)v198)
                  v199 = v196;
                else
                  v199 = 0;
                *(_QWORD *)&v245[0] = v199;
                *((_QWORD *)&v245[0] + 1) = v198;
                mlir::ResultRange::use_end((uint64_t *)v245, v243);
                v200 = v234;
                v242 = v234;
                v240 = *(_OWORD *)__p;
                v241 = v233;
                v201 = v244;
                while (v200 != v201)
                {
                  v203 = *(_QWORD *)(v200 + 16);
                  if (v134 != v203)
                  {
                    v204 = *(_QWORD *)a7;
                    v205 = *(unsigned int *)(a7 + 16);
                    if ((_DWORD)v205)
                    {
                      LODWORD(v206) = (v205 - 1) & ((v203 >> 4) ^ (v203 >> 9));
                      v202 = (uint64_t *)(v204 + 8 * v206);
                      v207 = *v202;
                      if (*v202 != v203)
                      {
                        v208 = 1;
                        do
                        {
                          if (v207 == -4096)
                            goto LABEL_243;
                          v209 = v206 + v208++;
                          v206 = v209 & (v205 - 1);
                          v207 = *(_QWORD *)(v204 + 8 * v206);
                        }
                        while (v207 != v203);
                        v202 = (uint64_t *)(v204 + 8 * v206);
                      }
                    }
                    else
                    {
LABEL_243:
                      v202 = (uint64_t *)(v204 + 8 * v205);
                    }
                    if (v202 != (uint64_t *)(v204 + 8 * v205))
                      goto LABEL_233;
                  }
                  mlir::ResultRange::UseIterator::operator++((uint64_t *)__p);
                  v200 = v234;
                }
                v210 = *(_DWORD *)(a7 + 16);
                if (v210)
                {
                  v211 = *(_QWORD *)a7;
                  v212 = v210 - 1;
                  LODWORD(v187) = (v210 - 1) & ((v194 >> 4) ^ (v194 >> 9));
                  v189 = (uint64_t *)(*(_QWORD *)a7 + 8 * v187);
                  v188 = *v189;
                  if (v194 != *v189)
                  {
                    v186 = 1;
                    do
                    {
                      if (v188 == -4096)
                        goto LABEL_233;
                      v185 = v187 + v186++;
                      v187 = v185 & v212;
                      v188 = *(_QWORD *)(v211 + 8 * v187);
                    }
                    while (v194 != v188);
                    v189 = (uint64_t *)(v211 + 8 * v187);
                  }
                  *v189 = -8192;
                  *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                }
              }
            }
LABEL_233:
            ++v183;
          }
          while (v183 != v182);
        }
      }
      v213 = *(_DWORD *)(a7 + 16);
      if (v213)
      {
        v214 = *(_QWORD *)a7;
        v215 = v213 - 1;
        LODWORD(v216) = (v213 - 1) & ((v134 >> 4) ^ (v134 >> 9));
        v217 = (uint64_t *)(*(_QWORD *)a7 + 8 * v216);
        v218 = *v217;
        v129 = (uint64_t **)a1;
        v131 = a9;
        v133 = v224;
        if (v134 != *v217)
        {
          v219 = 1;
          do
          {
            if (v218 == -4096)
              goto LABEL_260;
            v220 = v216 + v219++;
            v216 = v220 & v215;
            v218 = *(_QWORD *)(v214 + 8 * v216);
          }
          while (v134 != v218);
          v217 = (uint64_t *)(v214 + 8 * v216);
        }
        *v217 = -8192;
        *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
LABEL_260:
        v223 = 1;
      }
      else
      {
        v223 = 1;
        v129 = (uint64_t **)a1;
        v131 = a9;
        v133 = v224;
      }
    }
LABEL_162:
    if (++v132 == (uint64_t *)v133)
    {
      if ((v223 & 1) != 0)
      {
        mlir::collect_regions::detail::buildLiveInsLiveOuts(a3, a4, a5, v129, (uint64_t *)a7, 0);
      }
LABEL_267:
      llvm::deallocate_buffer(v236[0], (void *)(8 * v237));
    }
  }
  v160 = 0;
LABEL_208:
  v166 = 0;
  v167 = 0;
  goto LABEL_209;
}

void sub_180611294(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,llvm *a32,uint64_t a33,unsigned int a34)
{
  llvm::deallocate_buffer(a32, (void *)(8 * a34));
}

uint64_t sub_1806112A8()
{
  char v0;

  return v0 & 1;
}

void mlir::OpBuilder::create<mlir::placement::ReplacedOps,std::string &,mlir::Operation *&,llvm::SmallVector<mlir::Operation *,6u> &,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &>(uint64_t a1, uint64_t a2, _QWORD *a3, mlir::SymbolRefAttr **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  mlir::SymbolRefAttr *v20;
  mlir::Operation **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  unint64_t v29[2];
  unint64_t v30[2];
  _QWORD v31[39];

  v31[38] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.replaced_ops", (const unsigned __int8 *)0x16, Context);
  if (v16)
  {
    mlir::OperationState::OperationState(v31, a2, v15);
    v17 = *((char *)a3 + 23);
    v18 = a3[1];
    if (v17 >= 0)
    {
      v19 = v17;
    }
    else
    {
      a3 = (_QWORD *)*a3;
      v19 = v18;
    }
    v20 = *a4;
    v21 = *(mlir::Operation ***)a5;
    v22 = *(unsigned int *)(a5 + 8);
    mlir::ValueRange::ValueRange(v30, *(_QWORD *)a6, *(unsigned int *)(a6 + 8));
    mlir::ValueRange::ValueRange(v29, *(_QWORD *)a7, *(unsigned int *)(a7 + 8));
    mlir::placement::ReplacedOps::build(a1, (mlir::Attribute *)v31, a3, v19, v20, v21, v22, v23, v30[0], v30[1], v29[0], v29[1]);
  }
  v28 = 1283;
  v27[2] = (uint64_t)"placement.replaced_ops";
  v27[3] = 22;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  v26 = 259;
  llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v31);
  llvm::report_fatal_error((llvm::Twine *)v31, 1);
}

void mlir::`anonymous namespace'::BuildContext::updateCreatedOpsList(int32x2_t *this, mlir::Operation *a2, mlir::Operation *a3, const mlir::ConversionTarget *a4)
{
  mlir::Block *ParentOp;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  mlir::Operation *v12;
  uint64_t v13;
  llvm *v14;
  mlir::Operation *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  __int32 v31;
  __int32 v32;
  int32x2_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39[2];
  llvm *v40[2];
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v39[0] = (uint64_t)v40;
  ParentOp = (mlir::Block *)*((_QWORD *)a3 + 2);
  if (ParentOp)
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  v39[0] = (uint64_t)v40;
  v39[1] = (uint64_t)&v42;
  if (!this[3].i32[0])
    goto LABEL_41;
  v8 = this[4].u32[0];
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = (_QWORD *)this[2];
    while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_41;
    }
  }
  else
  {
    v10 = (_QWORD *)this[2];
  }
  v11 = *(_QWORD *)&this[2] + 8 * v8;
  if (v10 == (_QWORD *)v11)
    goto LABEL_41;
LABEL_11:
  v39[0] = 0;
  v12 = (mlir::Operation *)*v10;
  v39[0] = *v10;
  if (v41)
  {
    LODWORD(v13) = (v41 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    v14 = (llvm *)((char *)v40[0] + 8 * v13);
    v15 = *(mlir::Operation **)v14;
    if (*(mlir::Operation **)v14 != v12)
    {
      v16 = 1;
      do
      {
        if (v15 == (mlir::Operation *)-4096)
          goto LABEL_17;
        v17 = v13 + v16++;
        v13 = v17 & (v41 - 1);
        v15 = (mlir::Operation *)*((_QWORD *)v40[0] + v13);
      }
      while (v15 != v12);
      v14 = (llvm *)((char *)v40[0] + 8 * v13);
    }
  }
  else
  {
LABEL_17:
    v14 = (llvm *)((char *)v40[0] + 8 * v41);
  }
  if (v14 != (llvm *)((char *)v40[0] + 8 * v41))
  {
    if ((unsigned __int16)mlir::ConversionTarget::isLegal(a4, v12) > 0xFFu)
      goto LABEL_34;
    v18 = v39[0];
    v19 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v18 + 48) + 32))(*(_QWORD *)(v18 + 48), v19))
      goto LABEL_34;
  }
  if (v44)
  {
    v20 = ((LODWORD(v39[0]) >> 4) ^ (LODWORD(v39[0]) >> 9)) & (v44 - 1);
    v21 = &v42[v20];
    v22 = *v21;
    if (v39[0] == *v21)
      goto LABEL_34;
    v23 = 0;
    v24 = 1;
    while (v22 != -4096)
    {
      if (v23)
        v25 = 0;
      else
        v25 = v22 == -8192;
      if (v25)
        v23 = v21;
      v26 = v20 + v24++;
      v20 = v26 & (v44 - 1);
      v21 = &v42[v20];
      v22 = *v21;
      if (v39[0] == *v21)
      {
        do
        {
LABEL_34:
          if (++v10 == (_QWORD *)v11)
            goto LABEL_41;
        }
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000);
        if (v10 == (_QWORD *)v11)
        {
LABEL_41:
          if ((_DWORD)v43)
          {
            if (v44)
            {
              v28 = 8 * v44;
              v29 = v42;
              while ((*v29 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                ++v29;
                v28 -= 8;
                if (!v28)
                  goto LABEL_61;
              }
            }
            else
            {
              v29 = v42;
            }
            v30 = &v42[v44];
            if (v29 != v30)
            {
              v31 = this[4].i32[0];
              v32 = v31 - 1;
              do
              {
                if (!v31)
                  goto LABEL_53;
                v33 = this[2];
                LODWORD(v34) = ((*v29 >> 4) ^ (*v29 >> 9)) & v32;
                v35 = (uint64_t *)(*(_QWORD *)&v33 + 8 * v34);
                v36 = *v35;
                if (*v29 == *v35)
                  goto LABEL_52;
                v37 = 1;
                while (v36 != -4096)
                {
                  v38 = v34 + v37++;
                  v34 = v38 & v32;
                  v36 = *(_QWORD *)(*(_QWORD *)&v33 + 8 * v34);
                  if (*v29 == v36)
                  {
                    v35 = (uint64_t *)(*(_QWORD *)&v33 + 8 * v34);
LABEL_52:
                    *v35 = -8192;
                    this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
                    goto LABEL_53;
                  }
                }
                do
                {
LABEL_53:
                  if (++v29 == v30)
                    goto LABEL_61;
                }
                while ((*v29 | 0x1000) == 0xFFFFFFFFFFFFF000);
              }
              while (v29 != v30);
            }
          }
LABEL_61:
          llvm::deallocate_buffer(v40[0], (void *)(8 * v41));
        }
        goto LABEL_11;
      }
    }
    if (v23)
      v27 = v23;
    else
      v27 = v21;
  }
  else
  {
    v27 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)&v42, v27, v39);
  goto LABEL_34;
}

void sub_1806117B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, llvm *a15, uint64_t a16, unsigned int a17)
{
  llvm::deallocate_buffer(a15, (void *)(8 * a17));
}

void mlir::`anonymous namespace'::BuildContext::rollbackCreatedOps(mlir::_anonymous_namespace_::BuildContext *this)
{
  int64x2_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  mlir::Operation *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _QWORD **NextResultAtOffset;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  int64x2_t *v23;
  unint64_t v24;
  int64x2_t *v25;
  unint64_t v26;
  int64x2_t *v27;
  int64x2_t v28;
  uint64_t v29;
  int64x2_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[7];

  v34[6] = *MEMORY[0x1E0C80C00];
  v32 = v34;
  v33 = 0x600000000;
  v2 = (int64x2_t **)((char *)this + 16);
  if (*((_DWORD *)this + 6))
  {
    v3 = *((unsigned int *)this + 8);
    if ((_DWORD)v3)
    {
      v4 = 8 * v3;
      v5 = (uint64_t *)*((_QWORD *)this + 2);
      while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v5;
        v4 -= 8;
        if (!v4)
          goto LABEL_32;
      }
    }
    else
    {
      v5 = (uint64_t *)*((_QWORD *)this + 2);
    }
    v6 = *((_QWORD *)this + 2) + 8 * v3;
    if (v5 != (uint64_t *)v6)
    {
LABEL_9:
      v7 = *v5;
      v8 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
      if ((*(unsigned int (**)(_QWORD, void *))(**(_QWORD **)(v7 + 48) + 32))(*(_QWORD *)(v7 + 48), v8))
      {
        v31 = v7;
        llvm::SmallVectorImpl<mlir::Operation *>::insert_one_impl<mlir::Operation *>((uint64_t)&v32, (uint64_t)v32, &v31);
      }
      else
      {
        v9 = v33;
        if (v33 >= (unint64_t)HIDWORD(v33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
          v9 = v33;
        }
        *((_QWORD *)v32 + v9) = v7;
        LODWORD(v33) = v33 + 1;
      }
      while (++v5 != (uint64_t *)v6)
      {
        if ((*v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v5 != (uint64_t *)v6)
            goto LABEL_9;
          break;
        }
      }
      if ((_DWORD)v33)
      {
        v10 = (char *)v32;
        v11 = (char *)v32 + 8 * v33;
        do
        {
          v13 = (unsigned int *)*((_QWORD *)v11 - 1);
          v11 -= 8;
          v12 = (mlir::Operation *)v13;
          v14 = v13[9];
          v15 = (uint64_t)(v13 - 4);
          if ((_DWORD)v14)
            v16 = v15;
          else
            v16 = 0;
          if ((_DWORD)v14)
          {
            for (i = 0; i != v14; ++i)
            {
              NextResultAtOffset = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v16, i);
              while (1)
              {
                v19 = *NextResultAtOffset;
                if (!*NextResultAtOffset)
                  break;
                v20 = (_QWORD *)v19[1];
                if (v20)
                {
                  *v20 = *v19;
                  if (*v19)
                    *(_QWORD *)(*v19 + 8) = v19[1];
                }
                *v19 = 0;
                v19[1] = 0;
                v19[3] = 0;
              }
            }
          }
          mlir::Operation::erase(v12);
        }
        while (v11 != v10);
      }
    }
  }
LABEL_32:
  v21 = *((_DWORD *)this + 6);
  if (v21 || *((_DWORD *)this + 7))
  {
    v22 = *((unsigned int *)this + 8);
    if (v22 <= 4 * v21 || v22 < 0x41)
    {
      if ((_DWORD)v22)
      {
        v23 = *v2;
        v24 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v25 = *v2;
        if (v24 < 3)
          goto LABEL_42;
        v26 = v24 + 1;
        v25 = (int64x2_t *)((char *)v23 + 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL));
        v27 = v23 + 1;
        v28 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27[-1] = v28;
          *v27 = v28;
          v27 += 2;
          v29 -= 4;
        }
        while (v29);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_42:
          v30 = (int64x2_t *)((char *)v23 + 8 * v22);
          do
          {
            v25->i64[0] = -4096;
            v25 = (int64x2_t *)((char *)v25 + 8);
          }
          while (v25 != v30);
        }
      }
      *((_QWORD *)this + 3) = 0;
    }
    else
    {
      llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear((uint64_t)v2);
    }
  }
  if (v32 != v34)
    free(v32);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::StartTimer,mlir::placement::TimerHandleType,mlir::FlatSymbolRefAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.start_timer", (const unsigned __int8 *)0x15, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"placement.start_timer";
    v17[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::placement::StartTimer::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::StartTimer,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::HostTypeCast,mlir::Type const&,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.host_type_cast", (const unsigned __int8 *)0x18, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"placement.host_type_cast";
    v17[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *llvm::SmallVector<mlir::Value,4u>::SmallVector<llvm::mapped_iterator<mlir::Value*,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_0,mlir::Value>,void>(_QWORD *a1, uint64_t a2, unint64_t **a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v5 = *(unint64_t **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *a3;
  v7 = (uint64_t)*a3 - *(_QWORD *)a2;
  if ((unint64_t)v7 < 0x21)
  {
    v8 = 0;
    if (v5 == v6)
      goto LABEL_11;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v7 >> 3, 8);
    v8 = *((_DWORD *)a1 + 2);
    if (v5 == v6)
      goto LABEL_11;
  }
  v9 = (unint64_t *)(*a1 + 8 * v8);
  do
  {
    v10 = *v5;
    v12 = *v5;
    v13 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v4, &v12, &v13)&& v13 != *(_QWORD *)v4 + 16 * *(unsigned int *)(v4 + 16))
    {
      v10 = *(_QWORD *)(v13 + 8);
    }
    *v9++ = v10;
    ++v5;
  }
  while (v5 != v6);
  v8 = *((_DWORD *)a1 + 2);
LABEL_11:
  *((_DWORD *)a1 + 2) = v8 + ((unint64_t)v7 >> 3);
  return a1;
}

uint64_t mlir::Operation::getAttr(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result;
  char v7;

  if (!*(_BYTE *)(a1 + 47))
    return mlir::DictionaryAttr::get(a1 + 56, a2, a3);
  result = mlir::Operation::getInherentAttr(a1, (uint64_t)a2, a3);
  if (!v7)
    return mlir::DictionaryAttr::get(a1 + 56, a2, a3);
  return result;
}

void mlir::Operation::setAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::StringAttr *Context;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  v9 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v10);
  mlir::Operation::setAttr(a1, v9, a4);
}

_QWORD *llvm::SmallVector<mlir::Value,4u>::SmallVector<llvm::mapped_iterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_1,mlir::Value>,void>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NextResultAtOffset;
  uint64_t v17;
  uint64_t v18;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v8 = *a3;
  v7 = a3[1];
  v9 = v7 - v5;
  if ((unint64_t)(v7 - v5) < 5)
  {
    v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v7 - v5, 8);
    v10 = *((_DWORD *)a1 + 2);
  }
  if (v4 != v8 || v7 != v5)
  {
    v12 = (uint64_t *)(*a1 + 8 * v10);
    v13 = v7 - 1;
    do
    {
      v14 = v5;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v5);
      v17 = NextResultAtOffset;
      v18 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, (unint64_t *)&v17, &v18)&& v18 != *(_QWORD *)v6 + 16 * *(unsigned int *)(v6 + 16))
      {
        NextResultAtOffset = *(_QWORD *)(v18 + 8);
      }
      *v12++ = NextResultAtOffset;
      v5 = v14 + 1;
    }
    while (v4 != v8 || v13 != v14);
    v10 = *((_DWORD *)a1 + 2);
  }
  *((_DWORD *)a1 + 2) = v10 + v9;
  return a1;
}

uint64_t mlir::Operation::replaceAllUsesWith<llvm::SmallVector<mlir::Value,4u> &>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 36);
  if ((_DWORD)v2)
    v3 = result - 16;
  else
    v3 = 0;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
    v5 = (_DWORD)v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = 0;
    v7 = *(uint64_t ***)a2;
    v8 = *(_QWORD *)a2 + 8 * v4;
    do
    {
      result = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, v6);
      v9 = *(uint64_t **)result;
      if (*(_QWORD *)result)
      {
        v10 = *v7;
        do
        {
          v11 = (uint64_t *)v9[1];
          if (v11)
          {
            *v11 = *v9;
            if (*v9)
              *(_QWORD *)(*v9 + 8) = v9[1];
          }
          v9[3] = (uint64_t)v10;
          v12 = *v10;
          *v9 = *v10;
          v9[1] = (uint64_t)v10;
          if (v12)
            *(_QWORD *)(v12 + 8) = v9;
          *v10 = (uint64_t)v9;
          v9 = *(uint64_t **)result;
        }
        while (*(_QWORD *)result);
      }
      if (++v6 == v2)
        break;
      ++v7;
    }
    while (v7 != (uint64_t **)v8);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::StopTimer,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.stop_timer", (const unsigned __int8 *)0x14, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"placement.stop_timer";
    v15[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::EraseOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::StopTimer,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void mlir::`anonymous namespace'::moveErasedOpsAfter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  mlir::Block **v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  mlir::Operation **v56;
  uint64_t v57;
  mlir::Operation *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t DefiningOp;
  uint64_t v63;
  uint64_t v64;
  llvm *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  int v81;
  BOOL v82;
  unsigned int v83;
  void **v84;
  void **v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94[4];
  uint64_t v95;
  void *__p[2];
  __int128 v97;
  unsigned __int128 v98;
  llvm *v99[2];
  unsigned int v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v101 = a1;
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(_QWORD *)a2 + 8 * v5;
  v7 = *(_QWORD **)a2;
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = 8 * v5;
    while (*(_QWORD *)(*(_QWORD *)(v4 + v8) + 16) == v9)
    {
      v8 += 8;
      if (v10 == v8)
      {
        v7 = (_QWORD *)v6;
        goto LABEL_17;
      }
    }
    v7 = (_QWORD *)(v4 + v8);
  }
  v11 = v7 + 1;
  if (v7 != (_QWORD *)v6 && v11 != (_QWORD *)v6)
  {
    do
    {
      if (*(_QWORD *)(*v11 + 16) == *(_QWORD *)(v101 + 16))
        *v7++ = *v11;
      ++v11;
    }
    while (v11 != (_QWORD *)v6);
    v4 = *(_QWORD *)a2;
  }
LABEL_17:
  v13 = ((unint64_t)v7 - v4) >> 3;
  v14 = 126 - 2 * __clz(v13);
  *(_DWORD *)(a2 + 8) = v13;
  if ((_DWORD)v13)
    v15 = v14;
  else
    v15 = 0;
  v16 = (mlir::Block **)v101;
  v99[0] = 0;
  v99[1] = 0;
  v100 = 0;
  v97 = 0u;
  v98 = 0u;
  *(_OWORD *)__p = 0u;
  std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
  v17 = v100;
  v18 = *((_QWORD *)&v98 + 1);
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + ((((_QWORD)v98 + *((_QWORD *)&v98 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((v98 + *((_QWORD *)&v98 + 1)) & 0x1FF)) = v101;
  v19 = v18 + 1;
  *((_QWORD *)&v98 + 1) = v19;
  if (v17)
  {
    v20 = v17 - 1;
    v21 = ((v101 >> 4) ^ (v101 >> 9)) & v20;
    v22 = (uint64_t *)((char *)v99[0] + 8 * v21);
    v23 = *v22;
    if (v101 == *v22)
      goto LABEL_33;
    v24 = 0;
    v25 = 1;
    while (v23 != -4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v23 == -8192;
      if (v26)
        v24 = v22;
      v27 = v21 + v25++;
      v21 = v27 & v20;
      v22 = (uint64_t *)((char *)v99[0] + 8 * v21);
      v23 = *v22;
      if (v101 == *v22)
        goto LABEL_33;
    }
    if (v24)
      v28 = v24;
    else
      v28 = v22;
  }
  else
  {
    v28 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v28, &v101);
  v19 = *((_QWORD *)&v98 + 1);
LABEL_33:
  if (v19)
  {
    v29 = (char *)__p[1];
    v30 = v98;
    do
    {
      v31 = *(_QWORD *)(*(_QWORD *)&v29[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF));
      v32 = *(unsigned int *)(v31 + 36);
      if ((_DWORD)v32)
        v33 = v31 - 16;
      else
        v33 = 0;
      v105 = v33;
      v106 = v32;
      mlir::ResultRange::use_begin(&v105, (uint64_t *)&v102);
      v34 = *(unsigned int *)(v31 + 36);
      if ((_DWORD)v34)
        v35 = v31 - 16;
      else
        v35 = 0;
      v105 = v35;
      v106 = v34;
      mlir::ResultRange::use_end(&v105, v94);
      v36 = v104;
      v93 = v104;
      v91 = v102;
      v92 = v103;
      v37 = v95;
      while (v36 != v37)
      {
        v42 = *(_QWORD *)(v36 + 16);
        v105 = v42;
        if (*(_UNKNOWN **)(*(_QWORD *)(v42 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
        {
          v44 = (char *)__p[1];
          if ((void *)v97 == __p[1])
            v45 = 0;
          else
            v45 = (((_QWORD)v97 - (unint64_t)__p[1]) << 6) - 1;
          v46 = *((_QWORD *)&v98 + 1);
          v47 = *((_QWORD *)&v98 + 1) + v98;
          if (v45 == *((_QWORD *)&v98 + 1) + (_QWORD)v98)
          {
            std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
            v46 = *((_QWORD *)&v98 + 1);
            v44 = (char *)__p[1];
            v47 = v98 + *((_QWORD *)&v98 + 1);
            v42 = v105;
          }
          *(_QWORD *)(*(_QWORD *)&v44[(v47 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v47 & 0x1FF)) = v42;
          *((_QWORD *)&v98 + 1) = v46 + 1;
          v43 = v100;
          if (!v100)
          {
LABEL_55:
            v48 = 0;
            goto LABEL_56;
          }
        }
        else
        {
          v43 = v100;
          if (!v100)
            goto LABEL_55;
        }
        v38 = v43 - 1;
        v39 = ((v105 >> 4) ^ (v105 >> 9)) & v38;
        v40 = (uint64_t *)((char *)v99[0] + 8 * v39);
        v41 = *v40;
        if (v105 == *v40)
          goto LABEL_44;
        v49 = 0;
        v50 = 1;
        while (v41 != -4096)
        {
          if (v49)
            v51 = 0;
          else
            v51 = v41 == -8192;
          if (v51)
            v49 = v40;
          v52 = v39 + v50++;
          v39 = v52 & v38;
          v40 = (uint64_t *)((char *)v99[0] + 8 * v39);
          v41 = *v40;
          if (v105 == *v40)
            goto LABEL_44;
        }
        if (v49)
          v48 = v49;
        else
          v48 = v40;
LABEL_56:
        llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v48, &v105);
LABEL_44:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v102);
        v36 = v104;
      }
      v53 = mlir::Operation::isBeforeInBlock(v16, *(mlir::Operation **)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v98 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v98 & 0x1FF)));
      v29 = (char *)__p[1];
      if (v53)
        v16 = *(mlir::Block ***)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v98 >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * (v98 & 0x1FF));
      v54 = *((_QWORD *)&v98 + 1) - 1;
      v30 = v98 + 1;
      v98 = __PAIR128__(*((unint64_t *)&v98 + 1), (uint64_t)v98 + 1) + __PAIR128__(-1, 0);
      if (v30 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        v54 = *((_QWORD *)&v98 + 1);
        v29 = (char *)__p[1] + 8;
        v30 = v98 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v98 = v98 - 512;
      }
    }
    while (v54);
  }
  v55 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v55)
  {
    v56 = *(mlir::Operation ***)a2;
    v57 = *(_QWORD *)a2 + 8 * v55;
    do
    {
      v58 = *v56;
      if (mlir::Operation::isBeforeInBlock(v16, *v56))
        break;
      if ((*((_BYTE *)v58 + 46) & 0x80) == 0 || (v59 = *((unsigned int *)v58 + 17), !(_DWORD)v59))
      {
LABEL_75:
        v58 = (mlir::Operation *)v16;
        goto LABEL_76;
      }
      v60 = 0;
      v61 = *((_QWORD *)v58 + 9);
      while (1)
      {
        v90 = *(_QWORD *)(v61 + 32 * v60 + 24);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v90);
        v63 = DefiningOp;
        if (v100)
        {
          LODWORD(v64) = ((DefiningOp >> 4) ^ (DefiningOp >> 9)) & (v100 - 1);
          v65 = (llvm *)((char *)v99[0] + 8 * v64);
          v66 = *(_QWORD *)v65;
          if (*(_QWORD *)v65 != DefiningOp)
          {
            v67 = 1;
            do
            {
              if (v66 == -4096)
                goto LABEL_87;
              v68 = v64 + v67++;
              v64 = v68 & (v100 - 1);
              v66 = *((_QWORD *)v99[0] + v64);
            }
            while (v66 != DefiningOp);
            v65 = (llvm *)((char *)v99[0] + 8 * v64);
          }
        }
        else
        {
LABEL_87:
          v65 = (llvm *)((char *)v99[0] + 8 * v100);
        }
        if (v65 != (llvm *)((char *)v99[0] + 8 * v100))
          break;
        if (++v60 == v59)
          goto LABEL_75;
      }
      v69 = *(unsigned int *)(DefiningOp + 36);
      if ((_DWORD)v69)
        v70 = DefiningOp - 16;
      else
        v70 = 0;
      v105 = v70;
      v106 = v69;
      mlir::ResultRange::use_begin(&v105, (uint64_t *)&v102);
      v71 = *(unsigned int *)(v63 + 36);
      if ((_DWORD)v71)
        v72 = v63 - 16;
      else
        v72 = 0;
      v105 = v72;
      v106 = v71;
      mlir::ResultRange::use_end(&v105, v94);
      v73 = v104;
      v93 = v104;
      v91 = v102;
      v92 = v103;
      v74 = v95;
      while (v73 != v74)
      {
        v78 = *(_QWORD *)(v73 + 16);
        v105 = v78;
        if (v100)
        {
          v75 = (v100 - 1) & ((v78 >> 4) ^ (v78 >> 9));
          v76 = (uint64_t *)((char *)v99[0] + 8 * v75);
          v77 = *v76;
          if (v78 == *v76)
            goto LABEL_99;
          v80 = 0;
          v81 = 1;
          while (v77 != -4096)
          {
            if (v80)
              v82 = 0;
            else
              v82 = v77 == -8192;
            if (v82)
              v80 = v76;
            v83 = v75 + v81++;
            v75 = v83 & (v100 - 1);
            v76 = (uint64_t *)((char *)v99[0] + 8 * v75);
            v77 = *v76;
            if (v78 == *v76)
              goto LABEL_99;
          }
          if (v80)
            v79 = v80;
          else
            v79 = v76;
        }
        else
        {
          v79 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v79, &v105);
LABEL_99:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v102);
        v73 = v104;
      }
      mlir::Operation::moveAfter((uint64_t *)v58, (mlir::Operation *)v16);
LABEL_76:
      ++v56;
      v16 = (mlir::Block **)v58;
    }
    while (v56 != (mlir::Operation **)v57);
  }
  v84 = (void **)__p[1];
  v85 = (void **)v97;
  *((_QWORD *)&v98 + 1) = 0;
  v86 = v97 - (unint64_t)__p[1];
  if ((unint64_t)v97 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v84);
      v85 = (void **)v97;
      v84 = (void **)((char *)__p[1] + 8);
      __p[1] = v84;
      v86 = v97 - (_QWORD)v84;
    }
    while ((_QWORD)v97 - (_QWORD)v84 > 0x10uLL);
  }
  v87 = v86 >> 3;
  if (v87 == 1)
  {
    v88 = 256;
  }
  else
  {
    if (v87 != 2)
    {
LABEL_124:
      if (v84 != v85)
      {
        do
        {
          v89 = *v84++;
          operator delete(v89);
        }
        while (v84 != v85);
        if ((void *)v97 != __p[1])
          *(_QWORD *)&v97 = v97 + (((unint64_t)__p[1] - v97 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      if (__p[0])
        operator delete(__p[0]);
      llvm::deallocate_buffer(v99[0], (void *)(8 * v100));
    }
    v88 = 512;
  }
  *(_QWORD *)&v98 = v88;
  goto LABEL_124;
}

uint64_t std::function<void ()(mlir::Operation *,mlir::Operation *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  mlir::_anonymous_namespace_::BuildContext *v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a3;
  v7 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7, &v6);
  v5 = (mlir::_anonymous_namespace_::BuildContext *)std::__throw_bad_function_call[abi:nn180100]();
}

uint64_t mlir::`anonymous namespace'::BuildContext::commitChanges(uint64_t this)
{
  int64x2_t **v1;
  uint64_t v2;
  int64x2_t *v3;
  unint64_t v4;
  int64x2_t *v5;
  unint64_t v6;
  int64x2_t *v7;
  int64x2_t v8;
  uint64_t v9;
  int64x2_t *v10;

  if (*(_QWORD *)(this + 24))
  {
    v1 = (int64x2_t **)(this + 16);
    v2 = *(unsigned int *)(this + 32);
    if (v2 <= 4 * *(_DWORD *)(this + 24) || v2 < 0x41)
    {
      if ((_DWORD)v2)
      {
        v3 = *v1;
        v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v5 = *v1;
        if (v4 < 3)
          goto LABEL_10;
        v6 = v4 + 1;
        v5 = (int64x2_t *)((char *)v3 + 8 * (v6 & 0x3FFFFFFFFFFFFFFCLL));
        v7 = v3 + 1;
        v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v9 = v6 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v7[-1] = v8;
          *v7 = v8;
          v7 += 2;
          v9 -= 4;
        }
        while (v9);
        if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_10:
          v10 = (int64x2_t *)((char *)v3 + 8 * v2);
          do
          {
            v5->i64[0] = -4096;
            v5 = (int64x2_t *)((char *)v5 + 8);
          }
          while (v5 != v10);
        }
      }
      *(_QWORD *)(this + 24) = 0;
    }
    else
    {
      return llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear(this + 16);
    }
  }
  return this;
}

void mlir::IRMapping::~IRMapping(llvm **this)
{
  llvm::deallocate_buffer(this[6], (void *)(16 * *((unsigned int *)this + 16)));
}

void sub_1806129BC()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 24), (void *)(16 * *(unsigned int *)(v0 + 40)));
}

void sub_1806129D0()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)v0, (void *)(16 * *(unsigned int *)(v0 + 16)));
}

uint64_t sub_1806129E4()
{
  uint64_t v0;

  return v0;
}

void mlir::`anonymous namespace'::BuildContext::~BuildContext(llvm **this)
{
  *this = (llvm *)off_1E0E261F8;
  llvm::deallocate_buffer(this[2], (void *)(8 * *((unsigned int *)this + 8)));
}

{
  *this = (llvm *)off_1E0E261F8;
  llvm::deallocate_buffer(this[2], (void *)(8 * *((unsigned int *)this + 8)));
}

uint64_t sub_180612A24()
{
  uint64_t v0;

  return v0;
}

void mlir::legalizeRegions(mlir::ForwardIterator *a1, uint64_t a2)
{
  mlir::ForwardIterator **v3;
  uint64_t v4;
  mlir::ForwardIterator *v5;
  mlir::ForwardIterator *v6;
  mlir::Operation **v7;
  uint64_t v8;
  mlir::Operation *v9;
  mlir::Operation **v10;
  uint64_t v11;
  mlir::Operation *v12;
  mlir::ForwardIterator **v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  mlir::ForwardIterator **v18;
  mlir::Operation ***v19;
  mlir::Operation ***v20;
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  llvm *v26;
  uint64_t v27;
  unsigned int v28;
  mlir::Operation **v29;
  uint64_t v30;
  mlir::Operation **v31;
  uint64_t v32;
  uint64_t v33;
  mlir::ForwardIterator *v34;
  mlir::ForwardIterator ***v35;
  _QWORD v36[2];
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[3];

  v39[1] = *MEMORY[0x1E0C80C00];
  v34 = a1;
  v33 = a2;
  v3 = *(mlir::ForwardIterator ***)(a2 + 8);
  v38[0] = v39;
  v38[1] = 0x100000000;
  v31 = (mlir::Operation **)&v33;
  v32 = 0;
  v29 = (mlir::Operation **)&v31;
  v30 = 0;
  v36[0] = &v37;
  v36[1] = 0x500000000;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v13 = v3;
  v14 = &v33;
  v15 = v21;
  v35 = &v13;
  mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__0NS1_9placement12HostTypeCastEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v35, 1);
  v13 = &v34;
  v14 = v38;
  v15 = v21;
  v16 = &v33;
  v17 = v36;
  v18 = v3;
  v19 = &v31;
  v20 = &v29;
  v35 = &v13;
  if (mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__1NS1_24TargetLegalizerInterfaceES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESO_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&v35, 1))
  {
    v4 = *(_QWORD *)((((unint64_t)v34
                     + 16 * (((unint64_t)*((unsigned int *)v34 + 11) >> 23) & 1)
                     + (((unint64_t)*((unsigned int *)v34 + 11) >> 21) & 0x7F8)
                     + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v34 + 10)
                   + 8);
    if (v4)
      v5 = (mlir::ForwardIterator *)(v4 - 8);
    else
      v5 = 0;
    v6 = (mlir::ForwardIterator *)*((_QWORD *)v5 + 5);
    v3[2] = v5;
    v3[3] = v6;
    if ((_DWORD)v32)
    {
      v7 = v31;
      v8 = 8 * v32;
      do
      {
        v9 = *v7++;
        mlir::OpBuilder::insert((mlir::OpBuilder *)v3, v9);
        v8 -= 8;
      }
      while (v8);
    }
    if ((_DWORD)v30)
    {
      v10 = v29;
      v11 = 8 * v30;
      do
      {
        v12 = *v10++;
        mlir::Operation::erase(v12);
        v11 -= 8;
      }
      while (v11);
    }
  }
  llvm::deallocate_buffer(v26, (void *)(16 * v28));
}

void sub_180612BF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,llvm *a24,uint64_t a25,unsigned int a26)
{
  llvm::deallocate_buffer(a24, (void *)(16 * a26));
}

void sub_180612C04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,llvm *a21,uint64_t a22,unsigned int a23)
{
  llvm::deallocate_buffer(a21, (void *)(16 * a23));
}

uint64_t mlir::collectRegions(mlir::ForwardIterator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  llvm *v5;
  float v6;
  float v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  void *v10;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v13;
  _DWORD *v14;
  std::string __p;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;

  v16 = a3;
  v17 = a2;
  if (a3 && *(_BYTE *)(a3 + 1))
  {
    if (*(_BYTE *)(a3 + 2))
    {
      v5 = (llvm *)(*(uint64_t (**)(uint64_t, mlir::ForwardIterator *))(*(_QWORD *)v17 + 120))(v17, a1);
      v7 = v6;
      v8 = (llvm::raw_ostream *)llvm::dbgs(v5);
      v9 = v8;
      v10 = (void *)*((_QWORD *)v8 + 4);
      if (*((_QWORD *)v8 + 3) - (_QWORD)v10 > 0xDuLL)
      {
        qmemcpy(v10, "Module Cost0: ", 14);
        *((_QWORD *)v8 + 4) += 14;
      }
      else
      {
        v9 = llvm::raw_ostream::write(v8, "Module Cost0: ", 0xEuLL);
      }
      std::to_string(&__p, v7 * 1000.0);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v13 = llvm::raw_ostream::write(v9, (const char *)p_p, size);
      v14 = (_DWORD *)*((_QWORD *)v13 + 4);
      if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 3uLL)
      {
        *v14 = 175336736;
        *((_QWORD *)v13 + 4) += 4;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_19:
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        llvm::raw_ostream::write(v13, " ms\n", 4uLL);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_19;
      }
    }
    return 1;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v16;
  v18 = &__p;
  result = mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_14collectRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEPKNS1_15CostModelParamsEE3__0NS1_4func6FuncOpES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESS_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&v18, 1);
  if ((_DWORD)result)
    mlir::legalizeRegions(a1, v17);
  return result;
}

uint64_t mlir::doPlacement(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  mlir::MLIRContext *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  mlir::StringAttr *v22;
  uint64_t v23;
  mlir::MLIRContext *v24;
  uint64_t v25;
  mlir::MLIRContext *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int *v38;
  _BYTE *v40;
  mlir::UnknownLoc *v41[6];
  int v42;
  void *v43;
  uint64_t v44;
  _BYTE v45[48];
  uint64_t v46;
  _QWORD v47[26];
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  void **v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[16];
  uint64_t v58;
  void *__dst;
  unint64_t v60;
  _WORD v61[24];
  void *__src;
  uint64_t v63;
  _BYTE v64[48];
  __int128 v65;
  uint64_t v66;
  mlir::StringAttr *Context;
  uint64_t v68;
  _QWORD v69[8];

  v69[6] = *MEMORY[0x1E0C80C00];
  v61[4] = 257;
  mlir::Operation::emitError(a1, (uint64_t)&v58, (uint64_t)&v46);
  v41[0] = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 3));
  memset(&v41[1], 0, 24);
  v43 = v45;
  v44 = 0x600000000;
  v54 = &v43;
  v58 = (uint64_t)&v54;
  mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a1, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_11doPlacementENS1_8ModuleOpExxxNS_8ArrayRefIPNS1_15DeviceInterfaceEEERKNS1_10DeviceInfoENSt3__18optionalIjEEbE3__1NS1_4func6FuncOpES2_EENSK_9enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESW_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&v58, 1);
  if ((_DWORD)v44)
  {
    v10 = *(_QWORD *)v43;
    v47[23] = -1;
    v47[24] = &v48;
    v47[25] = 0x600000000;
    v49 = &v51;
    v50 = 0x600000000;
    v53 = 0;
    v52 = 0uLL;
    if ((_DWORD)a6 == -1)
    {
      v58 = -1;
      __dst = v61;
      v60 = 0x600000000;
      __src = v64;
      v63 = 0x600000000;
      v65 = v52;
      v66 = v53;
      v37 = mlir::UnknownLoc::get(v41[0], v9);
      v38 = (unsigned int *)mlir::OpBuilder::create<mlir::ModuleOp>(v41, v37);
    }
    v11 = 0;
    v12 = 1;
    v55 = v57;
    v56 = 0x200000000;
    v13 = 0;
    if (a6)
    {
      v14 = 1;
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(a5 + 8 * v15);
        if (v13 >= HIDWORD(v56))
        {
          v17 = v11;
          v18 = v12;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v13 + 1, 8);
          v12 = v18;
          v11 = v17;
          v13 = v56;
        }
        *((_QWORD *)v55 + v13) = v16;
        v13 = v56 + 1;
        LODWORD(v56) = v56 + 1;
        v15 = v14++;
      }
      while (a6 > v15);
      v40 = v55;
    }
    else
    {
      v40 = v57;
    }
    v19 = *((_QWORD *)&v52 + 1);
    v20 = v13;
    v58 = v13;
    __dst = v61;
    v60 = 0x600000000;
    __src = v64;
    v63 = 0x600000000;
    v65 = v10;
    v66 = 0;
    Context = (mlir::StringAttr *)&v58;
    LODWORD(v63) = v63 - 1;
    v21 = v63;
    Context = (mlir::StringAttr *)v69;
    HIDWORD(v68) = 6;
    if (v63 <= 6)
    {
      if ((_DWORD)v63)
        memset(v69, 255, 8 * v63);
      LODWORD(v68) = v21;
    }
    else
    {
      LODWORD(v68) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Context, v69, v63, 8);
      v22 = Context;
      memset(Context, 255, 8 * v21);
      LODWORD(v68) = v21;
      if (v22 != (mlir::StringAttr *)v69)
      {
        if (__dst != v61)
        {
          free(__dst);
          v22 = Context;
          LODWORD(v21) = v68;
        }
        __dst = v22;
        v60 = __PAIR64__(HIDWORD(v68), v21);
        Context = (mlir::StringAttr *)v69;
        HIDWORD(v68) = 0;
LABEL_29:
        LODWORD(v68) = 0;
        if (Context != (mlir::StringAttr *)v69)
          free(Context);
        *((_QWORD *)&v65 + 1) = v19;
        Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v10 + 24));
        v69[0] = 0;
        v69[1] = 0;
        v68 = 0;
        v25 = mlir::UnknownLoc::get(Context, v24);
        mlir::OpBuilder::create<mlir::ModuleOp>(&Context, v25);
        v27 = __dst;
        v28 = v60;
        if ((_DWORD)v60)
        {
          bzero(__dst, 8 * v60);
          v29 = v28;
        }
        else
        {
          v29 = 0;
        }
        v41[4] = 0;
        v41[5] = 0;
        v42 = 0;
        if (v28 | v63)
        {
          v30 = (uint64_t *)__src;
          v31 = &v27[v29];
          v32 = (uint64_t *)((char *)__src + 8 * v63);
          do
          {
            v33 = *v30;
            v34 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
            if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v33 + 48) + 32))(*(_QWORD *)(v33 + 48), v34) & 1) != 0)
            {
              *v27 = 0;
            }
            else if (v20)
            {
              mlir::applyAnalysisConversion(v33, *(_QWORD *)(*(_QWORD *)v40 + 24), (mlir::FrozenRewritePatternSet *)(*(_QWORD *)v40 + 8));
            }
            ++v27;
            ++v30;
          }
          while (v27 != v31 || v30 != v32);
        }
        v35 = mlir::UnknownLoc::get(Context, v26);
        v36 = (unsigned int *)mlir::OpBuilder::create<mlir::ModuleOp>(&Context, v35);
      }
    }
    v23 = v60;
    if (v60 >= v21)
    {
      if ((_DWORD)v21)
        memmove(__dst, v69, 8 * v21);
      goto LABEL_28;
    }
    if (HIDWORD(v60) >= v21)
    {
      if ((_DWORD)v60)
      {
        memmove(__dst, v69, 8 * v60);
        goto LABEL_26;
      }
    }
    else
    {
      LODWORD(v60) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v61, v21, 8);
    }
    v23 = 0;
LABEL_26:
    if (v23 != v68)
      memcpy((char *)__dst + 8 * v23, (char *)Context + 8 * v23, 8 * v68 - 8 * v23);
LABEL_28:
    LODWORD(v60) = v21;
    goto LABEL_29;
  }
  mlir::InFlightDiagnostic::abandon(&v46);
  if (v43 != v45)
    free(v43);
  if (v46)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
  return 1;
}

void sub_180613E2C()
{
  void *v0;

  operator delete(v0);
}

uint64_t *mlir::`anonymous namespace'::BuildContext::notifyOperationInserted(mlir::_anonymous_namespace_::BuildContext *this, mlir::Operation *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  mlir::Operation **v8;
  mlir::Operation *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t *v14;
  mlir::Operation *v15;

  v15 = a2;
  v4 = *((_QWORD *)this + 2);
  result = (uint64_t *)((char *)this + 16);
  v3 = v4;
  v5 = *((_DWORD *)result + 4);
  if (v5)
  {
    v6 = v5 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (mlir::Operation **)(v3 + 8 * v7);
    v9 = *v8;
    if (*v8 == a2)
      return result;
    v10 = 0;
    v11 = 1;
    while (v9 != (mlir::Operation *)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (mlir::Operation *)-8192;
      if (v12)
        v10 = (uint64_t *)v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (mlir::Operation **)(v3 + 8 * v7);
      v9 = *v8;
      if (*v8 == a2)
        return result;
    }
    if (v10)
      v14 = v10;
    else
      v14 = (uint64_t *)v8;
  }
  else
  {
    v14 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)result, v14, (uint64_t *)&v15);
}

uint64_t llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl<mlir::Operation **>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  unint64_t v24;
  unint64_t v25;
  int64x2_t *buffer;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  uint64_t v33;
  char *v34;

  if (*a3 == *a2
    || (v6 = (*a3 - *a2 - 1) | ((unint64_t)(*a3 - *a2 - 1) >> 1),
        v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        LODWORD(v8) = HIDWORD(v8) | v8,
        v9 = __CFADD__((_DWORD)v8, 1),
        v10 = v8 + 1,
        v9))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    v24 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
    LODWORD(v25) = (((v25 | (v25 >> 8)) >> 16) | v25 | (v25 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v25;
    buffer = (int64x2_t *)llvm::allocate_buffer(8 * v25, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = buffer;
    *(_QWORD *)(a1 + 8) = 0;
    v27 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v27)
    {
      v28 = (v27 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v29 = (char *)buffer;
      if (v28 < 3)
        goto LABEL_30;
      v30 = v28 + 1;
      v29 = &buffer->i8[8 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
      v31 = buffer + 1;
      v32 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31[-1] = v32;
        *v31 = v32;
        v31 += 2;
        v33 -= 4;
      }
      while (v33);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        v34 = &buffer->i8[8 * v27];
        do
        {
          *(_QWORD *)v29 = -4096;
          v29 += 8;
        }
        while (v29 != v34);
      }
    }
  }
  v11 = *a2;
  v12 = *a3;
  if (v11 != v12)
  {
    while (1)
    {
      v17 = *(_DWORD *)(a1 + 16);
      if (!v17)
        break;
      v13 = v17 - 1;
      v14 = ((*v11 >> 4) ^ (*v11 >> 9)) & v13;
      v15 = (uint64_t *)(*(_QWORD *)a1 + 8 * v14);
      v16 = *v15;
      if (*v11 != *v15)
      {
        v19 = 0;
        v20 = 1;
        while (v16 != -4096)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v16 == -8192;
          if (v21)
            v19 = v15;
          v22 = v14 + v20++;
          v14 = v22 & v13;
          v15 = (uint64_t *)(*(_QWORD *)a1 + 8 * v14);
          v16 = *v15;
          if (*v11 == *v15)
            goto LABEL_8;
        }
        if (v19)
          v18 = v19;
        else
          v18 = v15;
        goto LABEL_11;
      }
LABEL_8:
      if (++v11 == v12)
        return a1;
    }
    v18 = 0;
LABEL_11:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(a1, v18, v11);
    goto LABEL_8;
  }
  return a1;
}

void mlir::`anonymous namespace'::eraseOpsFromRegion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;

  v6 = *(_QWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = *(_QWORD *)a1 + 8 * v7;
  v9 = (_QWORD *)v8;
  if ((_DWORD)v7)
  {
    v10 = *a2;
    v11 = *((unsigned int *)a2 + 4);
    v12 = v11 - 1;
    v13 = *a2 + 8 * v11;
    v14 = *(_QWORD **)a1;
    while (1)
    {
      v15 = *v14;
      if (!(_DWORD)v11)
        break;
      LODWORD(v16) = ((v15 >> 4) ^ (v15 >> 9)) & v12;
      v17 = (uint64_t *)(v10 + 8 * v16);
      v18 = *v17;
      if (*v17 == v15)
      {
        if (v17 == (uint64_t *)v13)
          goto LABEL_12;
      }
      else
      {
        v19 = 1;
        do
        {
          if (v18 == -4096)
            goto LABEL_12;
          v20 = v16 + v19++;
          v16 = v20 & v12;
          v18 = *(_QWORD *)(v10 + 8 * v16);
        }
        while (v18 != v15);
        if (v10 + 8 * v16 == v13)
        {
LABEL_12:
          v6 = v14;
          break;
        }
      }
      if (++v14 == (_QWORD *)v8)
        goto LABEL_33;
    }
    v21 = *(unsigned int *)(a3 + 8);
    if (v21 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v15;
    ++*(_DWORD *)(a3 + 8);
  }
  if (v6 != (_QWORD *)v8)
  {
    v22 = v6 + 1;
    if (v6 + 1 != (_QWORD *)v8)
    {
      v9 = v6;
      while (1)
      {
        v23 = *v22;
        v24 = *a2;
        v25 = *((unsigned int *)a2 + 4);
        if (!(_DWORD)v25)
          goto LABEL_27;
        LODWORD(v26) = ((v23 >> 4) ^ (v23 >> 9)) & (v25 - 1);
        v27 = (uint64_t *)(v24 + 8 * v26);
        v28 = *v27;
        if (*v27 != v23)
          break;
LABEL_28:
        if (v27 == (uint64_t *)(v24 + 8 * v25))
        {
          v31 = *(unsigned int *)(a3 + 8);
          if (v31 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v31 + 1, 8);
            v31 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v31) = v23;
          ++*(_DWORD *)(a3 + 8);
        }
        else
        {
          *v9++ = v23;
        }
        if (++v22 == (uint64_t *)v8)
          goto LABEL_33;
      }
      v29 = 1;
      while (v28 != -4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & (v25 - 1);
        v28 = *(_QWORD *)(v24 + 8 * v26);
        if (v28 == v23)
        {
          v27 = (uint64_t *)(v24 + 8 * v26);
          goto LABEL_28;
        }
      }
LABEL_27:
      v27 = (uint64_t *)(v24 + 8 * v25);
      goto LABEL_28;
    }
    v9 = v6;
  }
LABEL_33:
  *(_DWORD *)(a1 + 8) = ((unint64_t)v9 - *(_QWORD *)a1) >> 3;
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::`anonymous namespace'::BuildContext::updateCreatedOpsList(mlir::Operation *,mlir::Operation *,mlir::ConversionTarget const&)::{lambda(mlir::Operation *)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t *result;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;

  v13 = a2;
  result = *a1;
  v3 = *((_DWORD *)result + 4);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(*result + 8 * v5);
    v7 = *v6;
    if (*v6 == a2)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (uint64_t *)(*result + 8 * v5);
      v7 = *v6;
      if (*v6 == a2)
        return result;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
  }
  else
  {
    v12 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)result, v12, &v13);
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::`anonymous namespace'::BuildContext::updateCreatedOpsList(mlir::Operation *,mlir::Operation *,mlir::ConversionTarget const&)::{lambda(mlir::Operation *)#2}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *result;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a2;
  v3 = *a1;
  v4 = *(_DWORD *)(v3 + 16);
  if (v4)
  {
    v5 = a2;
    v6 = v4 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (uint64_t *)(*(_QWORD *)v3 + 8 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_14;
    v10 = 0;
    v11 = 1;
    while (v9 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == -8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (uint64_t *)(*(_QWORD *)v3 + 8 * v7);
      v9 = *v8;
      if (*v8 == a2)
        goto LABEL_14;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v8;
  }
  else
  {
    v14 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(v3, v14, &v27);
  v5 = v27;
LABEL_14:
  v15 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48), v15);
  if (!(_DWORD)result)
    return result;
  result = (uint64_t *)a1[1];
  v17 = *((_DWORD *)result + 4);
  if (v17)
  {
    v18 = v17 - 1;
    v19 = ((v27 >> 4) ^ (v27 >> 9)) & v18;
    v20 = (uint64_t *)(*result + 8 * v19);
    v21 = *v20;
    if (v27 == *v20)
      return result;
    v22 = 0;
    v23 = 1;
    while (v21 != -4096)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v21 == -8192;
      if (v24)
        v22 = v20;
      v25 = v19 + v23++;
      v19 = v25 & v18;
      v20 = (uint64_t *)(*result + 8 * v19);
      v21 = *v20;
      if (v27 == *v20)
        return result;
    }
    if (v22)
      v26 = v22;
    else
      v26 = v20;
  }
  else
  {
    v26 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)result, v26, &v27);
}

uint64_t llvm::SmallVectorImpl<mlir::Operation *>::insert_one_impl<mlir::Operation *>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v5 = *(_QWORD *)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v6 == a2)
  {
    v10 = *a3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      v6 = *(unsigned int *)(a1 + 8);
      v5 = *(_QWORD *)a1;
    }
    *(_QWORD *)(v5 + 8 * v6) = v10;
    v11 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v11;
    return *(_QWORD *)a1 + 8 * v11 - 8;
  }
  else
  {
    v7 = (a2 - v5) >> 3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      v5 = *(_QWORD *)a1;
      v6 = *(unsigned int *)(a1 + 8);
    }
    v8 = (uint64_t *)(v5 + 8 * v7);
    *(_QWORD *)(v5 + 8 * v6) = *(_QWORD *)(v5 + 8 * v6 - 8);
    v9 = *(_QWORD *)a1 + 8 * v6 - 8;
    if ((uint64_t *)v9 != v8)
    {
      memmove(v8 + 1, v8, v9 - (_QWORD)v8);
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v6 + 1;
    *v8 = *a3;
  }
  return (uint64_t)v8;
}

uint64_t llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  unint64_t v6;
  llvm *v7;
  unint64_t v8;
  int64x2_t *v9;
  int64x2_t v10;
  uint64_t v11;
  llvm *v12;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = (v1 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v7 = *(llvm **)result;
    if (v6 < 3)
      goto LABEL_12;
    v8 = v6 + 1;
    v7 = (llvm *)((char *)v5 + 8 * (v8 & 0x3FFFFFFFFFFFFFFCLL));
    v9 = (int64x2_t *)((char *)v5 + 16);
    v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v11 = v8 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v9[-1] = v10;
      *v9 = v10;
      v9 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_12:
      v12 = (llvm *)((char *)v5 + 8 * v1);
      do
      {
        *(_QWORD *)v7 = -4096;
        v7 = (llvm *)((char *)v7 + 8);
      }
      while (v7 != v12);
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::`anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **,false>(uint64_t result, mlir::Block ***a2, uint64_t a3, char a4)
{
  uint64_t v7;
  mlir::Block ***v8;
  mlir::Block ***v9;
  mlir::Operation **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  mlir::Operation **v14;
  uint64_t v15;
  mlir::Operation *v16;
  uint64_t v17;
  mlir::Operation *v18;
  BOOL v19;
  unint64_t v20;
  mlir::Block **v21;
  mlir::Block **v22;
  mlir::Block ***v23;
  mlir::Block ***v24;
  mlir::Block **v25;
  mlir::Block **v26;
  mlir::Block **v27;
  mlir::Block ***v28;
  BOOL v29;
  BOOL v30;
  mlir::Operation *v31;
  mlir::Operation *v32;
  unint64_t v33;
  mlir::Operation **v34;
  mlir::Operation *v35;
  mlir::Operation *v36;
  mlir::Operation *v37;
  mlir::Operation *v38;
  mlir::Operation **v39;
  mlir::Operation *v40;
  mlir::Block ***v41;
  mlir::Block **v42;
  mlir::Block **v43;
  uint64_t v44;
  mlir::Operation *v45;
  uint64_t v46;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  mlir::Block **v52;
  mlir::Operation *v53;
  mlir::Block **v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  mlir::Operation **v60;
  mlir::Operation *v61;
  mlir::Operation **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  mlir::Block ***v66;
  BOOL v67;
  mlir::Block ***v68;
  uint64_t v69;
  mlir::Operation *v70;
  _QWORD *v71;
  mlir::Block ***v72;
  uint64_t v73;
  uint64_t v74;
  mlir::Block ***v75;
  uint64_t v76;
  unint64_t v77;
  mlir::Block ***v78;
  mlir::Block **v79;
  mlir::Block ***v80;
  mlir::Block **v81;
  mlir::Operation *v82;
  mlir::Operation *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  mlir::Block ***v87;
  mlir::Block ***v88;
  int64_t v89;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v87 = a2;
  v88 = a2 - 2;
  v9 = a2 - 3;
  v10 = (mlir::Operation **)v7;
  while (2)
  {
    v7 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)v7);
        if ((_DWORD)result)
        {
          v40 = *(mlir::Operation **)v7;
          *(_QWORD *)v7 = *(a2 - 1);
          *(a2 - 1) = (mlir::Block **)v40;
        }
        return result;
      case 3:
      case 4:
        v41 = (mlir::Block ***)(v7 + 16);
        result = mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)(v7 + 16));
        if ((_DWORD)result)
        {
          v42 = *v41;
          *v41 = *(a2 - 1);
          *(a2 - 1) = v42;
          result = mlir::Operation::isBeforeInBlock(*v41, *(mlir::Operation **)(v7 + 8));
          if ((_DWORD)result)
          {
            v44 = *(_QWORD *)(v7 + 8);
            v43 = *(mlir::Block ***)(v7 + 16);
            v45 = *(mlir::Operation **)v7;
            *(_QWORD *)(v7 + 8) = v43;
            *(_QWORD *)(v7 + 16) = v44;
            result = mlir::Operation::isBeforeInBlock(v43, v45);
            if ((_DWORD)result)
              *(int8x16_t *)v7 = vextq_s8(*(int8x16_t *)v7, *(int8x16_t *)v7, 8uLL);
          }
        }
        return result;
      case 5:
      default:
        if (v11 <= 191)
        {
          v46 = v7 + 8;
          v48 = (mlir::Block ***)v7 == a2 || v46 == (_QWORD)a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = v7;
              do
              {
                v53 = *(mlir::Operation **)v50;
                v52 = *(mlir::Block ***)(v50 + 8);
                v50 = v46;
                result = mlir::Operation::isBeforeInBlock(v52, v53);
                if ((_DWORD)result)
                {
                  v54 = *(mlir::Block ***)v50;
                  v55 = v49;
                  do
                  {
                    *(_QWORD *)(v7 + v55 + 8) = *(_QWORD *)(v7 + v55);
                    if (!v55)
                    {
                      v51 = (_QWORD *)v7;
                      goto LABEL_73;
                    }
                    result = mlir::Operation::isBeforeInBlock(v54, *(mlir::Operation **)(v7 + v55 - 8));
                    v55 -= 8;
                  }
                  while ((result & 1) != 0);
                  v51 = (_QWORD *)(v7 + v55 + 8);
LABEL_73:
                  *v51 = v54;
                }
                v46 = v50 + 8;
                v49 += 8;
              }
              while ((mlir::Block ***)(v50 + 8) != a2);
            }
          }
          else if (!v48)
          {
            do
            {
              v82 = *(mlir::Operation **)v7;
              v81 = *(mlir::Block ***)(v7 + 8);
              v7 = v46;
              result = mlir::Operation::isBeforeInBlock(v81, v82);
              if ((_DWORD)result)
              {
                v83 = *(mlir::Operation **)v7;
                v84 = (_QWORD *)v7;
                do
                {
                  v85 = v84;
                  v86 = *--v84;
                  *v85 = v86;
                  result = mlir::Operation::isBeforeInBlock((mlir::Block **)v83, (mlir::Operation *)*(v85 - 2));
                }
                while ((result & 1) != 0);
                *v84 = v83;
              }
              v46 = v7 + 8;
            }
            while ((mlir::Block ***)(v7 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((mlir::Block ***)v7 != a2)
          {
            v56 = (unint64_t)(v12 - 2) >> 1;
            v89 = v56;
            do
            {
              v57 = v56;
              if (v89 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = v7 + 8 * v58;
                if (2 * v56 + 2 < v12
                  && mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v59, *(mlir::Operation **)(v59 + 8)))
                {
                  v59 += 8;
                  v58 = 2 * v57 + 2;
                }
                v60 = (mlir::Operation **)(v7 + 8 * v57);
                result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v59, *v60);
                if ((result & 1) == 0)
                {
                  v61 = *v60;
                  do
                  {
                    v62 = (mlir::Operation **)v59;
                    *v60 = *(mlir::Operation **)v59;
                    if (v89 < v58)
                      break;
                    v63 = (2 * v58) | 1;
                    v59 = v7 + 8 * v63;
                    v64 = 2 * v58 + 2;
                    if (v64 < v12
                      && mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v59, *(mlir::Operation **)(v59 + 8)))
                    {
                      v59 += 8;
                      v63 = v64;
                    }
                    result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v59, v61);
                    v60 = v62;
                    v58 = v63;
                  }
                  while (!(_DWORD)result);
                  *v62 = v61;
                  a2 = v87;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            v65 = (unint64_t)v11 >> 3;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = *(mlir::Operation **)v7;
              v71 = (_QWORD *)v7;
              do
              {
                v72 = (mlir::Block ***)&v71[v69 + 1];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 < v65)
                {
                  result = mlir::Operation::isBeforeInBlock(*v72, (mlir::Operation *)v71[v69 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v72;
                    v73 = v74;
                  }
                }
                *v71 = *v72;
                v71 = v72;
                v69 = v73;
              }
              while (v73 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              v75 = v68 - 1;
              if (v72 == v75)
              {
                v66 = v75;
                *v72 = (mlir::Block **)v70;
              }
              else
              {
                *v72 = *v75;
                v66 = v75;
                *v75 = (mlir::Block **)v70;
                v76 = (uint64_t)v72 - v7 + 8;
                if (v76 >= 9)
                {
                  v77 = (((unint64_t)v76 >> 3) - 2) >> 1;
                  v78 = (mlir::Block ***)(v7 + 8 * v77);
                  result = mlir::Operation::isBeforeInBlock(*v78, (mlir::Operation *)*v72);
                  if ((_DWORD)result)
                  {
                    v79 = *v72;
                    do
                    {
                      v80 = v78;
                      *v72 = *v78;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = (mlir::Block ***)(v7 + 8 * v77);
                      result = mlir::Operation::isBeforeInBlock(*v78, (mlir::Operation *)v79);
                      v72 = v80;
                    }
                    while ((result & 1) != 0);
                    *v80 = v79;
                  }
                }
              }
              v67 = v65-- <= 2;
              a2 = v66;
            }
            while (!v67);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (mlir::Operation **)(v7 + 8 * ((unint64_t)v12 >> 1));
        if ((unint64_t)v11 < 0x401)
        {
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          v15 = 8 * v13;
          v16 = *(mlir::Operation **)v7;
          *(_QWORD *)v7 = *(_QWORD *)(v7 + v15);
          *(_QWORD *)(v7 + v15) = v16;
          a2 = v87;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        if (!mlir::Operation::isBeforeInBlock(*(mlir::Block ***)(v7 - 8), *(mlir::Operation **)v7))
        {
          v31 = *(mlir::Operation **)v7;
          result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v7, (mlir::Operation *)*v8);
          if ((result & 1) != 0)
          {
            v10 = (mlir::Operation **)v7;
            do
            {
              v32 = v10[1];
              ++v10;
              result = mlir::Operation::isBeforeInBlock((mlir::Block **)v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v7 + 8;
            do
            {
              v10 = (mlir::Operation **)v33;
              if (v33 >= (unint64_t)a2)
                break;
              v33 += 8;
              result = mlir::Operation::isBeforeInBlock((mlir::Block **)v31, *v10);
            }
            while (!(_DWORD)result);
          }
          v34 = (mlir::Operation **)a2;
          if (v10 < (mlir::Operation **)a2)
          {
            v34 = (mlir::Operation **)a2;
            do
            {
              v35 = *--v34;
              result = mlir::Operation::isBeforeInBlock((mlir::Block **)v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *v10;
            *v10 = *v34;
            *v34 = v36;
            do
            {
              v37 = v10[1];
              ++v10;
            }
            while (!mlir::Operation::isBeforeInBlock((mlir::Block **)v31, v37));
            do
            {
              v38 = *--v34;
              result = mlir::Operation::isBeforeInBlock((mlir::Block **)v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 1;
          if (v10 - 1 != (mlir::Operation **)v7)
            *(_QWORD *)v7 = *v39;
          a4 = 0;
          *v39 = v31;
          continue;
        }
LABEL_11:
        v17 = 0;
        v18 = *(mlir::Operation **)v7;
        do
        {
          v19 = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)(v7 + v17 + 8), v18);
          v17 += 8;
        }
        while (v19);
        v20 = v7 + v17;
        if (v17 == 8)
        {
          a2 = v87;
          do
          {
            if (v20 >= (unint64_t)a2)
              break;
            v22 = *--a2;
          }
          while (!mlir::Operation::isBeforeInBlock(v22, v18));
        }
        else
        {
          do
            v21 = *--a2;
          while (!mlir::Operation::isBeforeInBlock(v21, v18));
        }
        if (v20 >= (unint64_t)a2)
        {
          v28 = (mlir::Block ***)(v20 - 8);
          if (v20 - 8 == v7)
            goto LABEL_29;
LABEL_28:
          *(_QWORD *)v7 = *v28;
          goto LABEL_29;
        }
        v23 = (mlir::Block ***)(v7 + v17);
        v24 = a2;
        do
        {
          v25 = *v23;
          *v23 = *v24;
          *v24 = v25;
          do
          {
            v26 = v23[1];
            ++v23;
          }
          while (mlir::Operation::isBeforeInBlock(v26, v18));
          do
            v27 = *--v24;
          while (!mlir::Operation::isBeforeInBlock(v27, v18));
        }
        while (v23 < v24);
        v28 = v23 - 1;
        if (v28 != (mlir::Block ***)v7)
          goto LABEL_28;
LABEL_29:
        *v28 = (mlir::Block **)v18;
        v29 = v20 >= (unint64_t)a2;
        a2 = v87;
        if (!v29)
        {
LABEL_33:
          a4 = 0;
          v10 = (mlir::Operation **)(v28 + 1);
          continue;
        }
        v10 = (mlir::Operation **)(v28 + 1);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v28;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::`anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **,0>(mlir::Operation **a1, mlir::Block ***a2, mlir::Block ***a3, mlir::Block ***a4, mlir::Block ***a5)
{
  mlir::Block **v10;
  mlir::Block **v11;
  mlir::Operation *v12;
  _BOOL8 result;
  mlir::Block **v14;
  mlir::Block **v15;
  mlir::Block **v16;
  mlir::Operation *v17;

  if (mlir::Operation::isBeforeInBlock(*a4, (mlir::Operation *)*a3))
  {
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2))
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (mlir::Operation::isBeforeInBlock(*a2, *a1))
      {
        v12 = *a1;
        *a1 = (mlir::Operation *)*a2;
        *a2 = (mlir::Block **)v12;
      }
    }
  }
  result = mlir::Operation::isBeforeInBlock(*a5, (mlir::Operation *)*a4);
  if (result)
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    result = mlir::Operation::isBeforeInBlock(*a4, (mlir::Operation *)*a3);
    if (result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      result = mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2);
      if (result)
      {
        v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        result = mlir::Operation::isBeforeInBlock(*a2, *a1);
        if (result)
        {
          v17 = *a1;
          *a1 = (mlir::Operation *)*a2;
          *a2 = (mlir::Block **)v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::`anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **>(mlir::Operation **a1, mlir::Block ***a2, mlir::Block ***a3)
{
  BOOL v6;
  _BOOL8 result;
  mlir::Operation *v8;
  mlir::Block **v9;
  mlir::Operation *v10;
  mlir::Block **v11;

  v6 = mlir::Operation::isBeforeInBlock(*a2, *a1);
  result = mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2);
  if (v6)
  {
    v8 = *a1;
    if (result)
    {
      *a1 = (mlir::Operation *)*a3;
      *a3 = (mlir::Block **)v8;
    }
    else
    {
      *a1 = (mlir::Operation *)*a2;
      *a2 = (mlir::Block **)v8;
      result = mlir::Operation::isBeforeInBlock(*a3, v8);
      if (result)
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    result = mlir::Operation::isBeforeInBlock(*a2, *a1);
    if (result)
    {
      v10 = *a1;
      *a1 = (mlir::Operation *)*a2;
      *a2 = (mlir::Block **)v10;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::`anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **>(uint64_t a1, mlir::Block ***a2)
{
  uint64_t v4;
  _BOOL8 result;
  mlir::Operation *v6;
  mlir::Operation **v7;
  mlir::Block ***v8;
  uint64_t v9;
  int v10;
  mlir::Block ***v11;
  mlir::Block **v12;
  uint64_t v13;
  uint64_t v14;
  mlir::Block ***v15;
  mlir::Block **v16;
  mlir::Block **v17;
  uint64_t v18;
  mlir::Operation *v19;

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)a1))
      {
        v6 = *(mlir::Operation **)a1;
        *(_QWORD *)a1 = *(a2 - 1);
        *(a2 - 1) = (mlir::Block **)v6;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      v15 = (mlir::Block ***)(a1 + 16);
      if (mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)(a1 + 16)))
      {
        v16 = *v15;
        *v15 = *(a2 - 1);
        *(a2 - 1) = v16;
        if (mlir::Operation::isBeforeInBlock(*v15, *(mlir::Operation **)(a1 + 8)))
        {
          v18 = *(_QWORD *)(a1 + 8);
          v17 = *(mlir::Block ***)(a1 + 16);
          v19 = *(mlir::Operation **)a1;
          *(_QWORD *)(a1 + 8) = v17;
          *(_QWORD *)(a1 + 16) = v18;
          if (mlir::Operation::isBeforeInBlock(v17, v19))
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      return 1;
    default:
      v7 = (mlir::Operation **)(a1 + 16);
      v8 = (mlir::Block ***)(a1 + 24);
      if ((mlir::Block ***)(a1 + 24) == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (mlir::Operation::isBeforeInBlock(*v8, *v7))
    {
      v12 = *v8;
      v13 = v9;
      do
      {
        v14 = a1 + v13;
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
        {
          v11 = (mlir::Block ***)a1;
          goto LABEL_7;
        }
        v13 -= 8;
      }
      while (mlir::Operation::isBeforeInBlock(v12, *(mlir::Operation **)(v14 + 8)));
      v11 = (mlir::Block ***)(a1 + v13 + 24);
LABEL_7:
      *v11 = v12;
      if (++v10 == 8)
        return v8 + 1 == a2;
    }
    v7 = (mlir::Operation **)v8;
    v9 += 8;
    if (++v8 == a2)
      return 1;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::ModuleOp>(mlir::StringAttr **a1, uint64_t a2)
{
  uint64_t *Context;
  uint64_t v5;
  char v6;
  mlir::GenericProgramPoint *v7;
  mlir::GenericProgramPoint *v8;
  _BYTE v10[24];
  uint64_t v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  _QWORD v16[39];

  v16[38] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.module", (const unsigned __int8 *)0xE, Context);
  if (!v6)
  {
    v15 = 1283;
    v14[2] = (uint64_t)"builtin.module";
    v14[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v13 = 259;
    llvm::operator+(v14, (uint64_t *)&v12, (uint64_t)v16);
    llvm::report_fatal_error((llvm::Twine *)v16, 1);
  }
  mlir::OperationState::OperationState(v16, a2, v5);
  v10[0] = 0;
  v10[16] = 0;
  mlir::ModuleOp::build(a1, (mlir::OperationState *)v16, (uint64_t)v10);
  v7 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v16);
  if (*(_UNKNOWN **)(*((_QWORD *)v7 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
    v8 = v7;
  else
    v8 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v16);
  return v8;
}

void mlir::`anonymous namespace'::PlacementState::materializeState(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm *v16;
  int v17;
  mlir::Attribute *v18;
  mlir::placement::TimerHandleType *Context;
  mlir::MLIRContext *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  mlir::Operation *v27;
  mlir::placement::TimerHandleType **v28;
  _OWORD *v29;
  uint64_t v30;
  _QWORD *Body;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void **v44;
  char *v45;
  uint64_t v46;
  const void *v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t DefiningOp;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  mlir::Operation *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  llvm *v78;
  llvm *v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 (***v94)(void *, unint64_t, unint64_t, void **);
  unsigned __int8 (***v95)(void *, unint64_t, unint64_t, void **);
  uint64_t *v96;
  mlir::Operation *v97;
  mlir::Operation **v98;
  uint64_t v99;
  mlir::Operation *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  unsigned int v104;
  unsigned int *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  unsigned int **v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t NextResultAtOffset;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void **v129;
  unint64_t v130;
  __int128 v131;
  unint64_t v132;
  char *v133;
  unsigned int *v134;
  const void **v137;
  uint64_t v138;
  _OWORD *v139;
  uint64_t v140;
  const void **v141;
  unsigned int **v142;
  uint64_t ArgOperands;
  _OWORD *v145;
  __int128 v146;
  llvm *v147[2];
  int v148;
  llvm *v149;
  uint64_t v150;
  int v151;
  llvm *v152;
  uint64_t v153;
  unsigned int v154;
  mlir::GenericProgramPoint *v155;
  uint64_t v156;
  mlir::placement::TimerHandleType *v157[2];
  _OWORD *v158;
  uint64_t v159;
  uint64_t v160;
  void *__p;
  char *v162;
  char v163;
  mlir *v164;
  uint64_t v165;
  void *v166[2];
  uint64_t v167;
  __int128 v168;
  void *v169[3];
  void *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173[2];
  unint64_t v174[2];
  void *v175;
  uint64_t v176;
  _BYTE v177[48];
  void *v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  llvm *p_FunctionType;
  int v200;
  int v201;
  unsigned int v202;
  __int16 v203;
  void *FunctionType;
  uint64_t v205;
  uint64_t **v206;
  unint64_t v207;
  unsigned int v208;
  unsigned int v209;
  _BYTE v210[152];
  void *v211;
  uint64_t v212;
  _BYTE v213[176];
  llvm *Value;
  mlir::placement::TimerHandleType **v215;
  llvm **v216;
  llvm *v217;
  uint64_t **v218;
  void **v219;
  llvm *v220;
  uint64_t v221;
  int v222;
  uint64_t *v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  llvm *v229;
  uint64_t v230;
  unsigned int v231;
  unsigned int **v232;
  uint64_t v233;
  _QWORD v234[4];

  v234[1] = *MEMORY[0x1E0C80C00];
  v196 = &v198;
  v197 = 0x100000000;
  v193 = &v195;
  v194 = 0x600000000;
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned int *)(a1 + 80);
  if (v3 | v4)
  {
    v5 = *(llvm ***)(a1 + 8);
    v6 = *(uint64_t **)(a1 + 72);
    v7 = 8 * v4 - 8;
    v8 = 8 * v3 - 8;
    v9 = -1;
    do
    {
      Value = *v5;
      v14 = *v6;
      v15 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v14 + 48) + 32))(*(_QWORD *)(v14 + 48), v15) & 1) == 0)
      {
        v16 = Value;
        if (v9 == -1 || Value != (llvm *)v9)
        {
          v17 = v194;
          if (v194 >= HIDWORD(v194))
          {
            llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v193, (uint64_t *)&Value);
          }
          else
          {
            *((_QWORD *)v193 + v194) = Value;
            LODWORD(v194) = v17 + 1;
          }
          if (v197 < HIDWORD(v197))
          {
            v10 = (char *)v196 + 64 * (unint64_t)v197;
            *v10 = v10 + 2;
            v10[1] = 0x600000000;
            LODWORD(v197) = v197 + 1;
          }
          else
          {
            llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::Value,6u>,false>::growAndEmplaceBack<>((uint64_t)&v196);
          }
          v9 = (uint64_t)v16;
        }
        v11 = (char *)v196 + 64 * (unint64_t)v197;
        v12 = *((unsigned int *)v11 - 14);
        if (v12 >= *((unsigned int *)v11 - 13))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v11 - 64), v11 - 48, v12 + 1, 8);
          v12 = *((unsigned int *)v11 - 14);
        }
        *(_QWORD *)(*((_QWORD *)v11 - 8) + 8 * v12) = v14;
        ++*((_DWORD *)v11 - 14);
      }
      ++v5;
      ++v6;
      v13 = v8 | v7;
      v7 -= 8;
      v8 -= 8;
    }
    while (v13);
  }
  v190 = &v192;
  v191 = 0x600000000;
  v187 = &v189;
  v188 = 0x600000000;
  v184 = &v186;
  v185 = 0x600000000;
  v181 = &v183;
  v182 = 0x600000000;
  v178 = &v180;
  v18 = (mlir::Attribute *)(*(_QWORD *)(a1 + 136) + 24);
  v179 = 0x600000000;
  Context = (mlir::placement::TimerHandleType *)mlir::Attribute::getContext(v18);
  v22 = a2[10];
  v21 = a2[11];
  v134 = a2 + 16;
  v157[0] = Context;
  v157[1] = 0;
  v159 = 0;
  v158 = 0;
  v23 = *(_QWORD *)((((unint64_t)&a2[4 * ((v21 >> 23) & 1) + 17] + ((v21 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * v22
                  + 8);
  if (v23)
    v24 = v23 - 8;
  else
    v24 = 0;
  v25 = *(_QWORD *)(v24 + 40);
  v158 = (_OWORD *)v24;
  v159 = v25;
  v156 = *(_QWORD *)(a1 + 136);
  v26 = mlir::UnknownLoc::get(Context, v20);
  v211 = (void *)mlir::SymbolRefAttr::get(*(mlir::SymbolRefAttr **)(a1 + 136), v27);
  Value = (llvm *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v211);
  Value = (llvm *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
  v215 = v28;
  FunctionType = (void *)mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v156);
  v155 = mlir::OpBuilder::create<mlir::func::FuncOp,llvm::StringRef,mlir::FunctionType>(v157, v26, (uint64_t *)&Value, (uint64_t *)&FunctionType);
  v29 = mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::addEntryBlock((mlir::func::FuncOp *)&v155);
  v30 = *((_QWORD *)v29 + 5);
  if (!v158)
  {
    v158 = 0;
    v159 = 0;
  }
  v147[0] = 0;
  v147[1] = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  Body = (_QWORD *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v156);
  if ((_QWORD *)*Body != Body)
  {
    v32 = Body[1];
    v33 = v32 ? v32 - 8 : 0;
    v34 = *(void ***)(v33 + 48);
    v35 = *(_QWORD *)(v33 + 56) - (_QWORD)v34;
    if (v35)
    {
      v36 = 8 * (v35 >> 3);
      do
      {
        v37 = *(_QWORD *)(*((_QWORD *)v29 + 6) + 8 * *((unsigned int *)*v34 + 6));
        v211 = *v34;
        Value = 0;
        v38 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v147, (unint64_t *)&v211, &Value);
        v39 = Value;
        if ((v38 & 1) == 0)
        {
          v39 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v147, (uint64_t)&v211, (unint64_t *)&v211, Value);
          *v39 = v211;
          v39[1] = 0;
        }
        v39[1] = v37;
        ++v34;
        v36 -= 8;
      }
      while (v36);
    }
  }
  v40 = *(_QWORD *)((((unint64_t)&v134[4 * (((unint64_t)a2[11] >> 23) & 1) + 1]
                    + (((unint64_t)a2[11] >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a2[10]
                  + 8);
  v139 = (_OWORD *)(v40 - 8);
  if (v40)
    v41 = v40 - 8;
  else
    v41 = 0;
  v42 = *(_QWORD *)(v41 + 40);
  v158 = (_OWORD *)v41;
  v138 = v42;
  v159 = v42;
  v175 = v177;
  v176 = 0x200000000;
  if (!(_DWORD)v197)
    goto LABEL_212;
  v145 = v29;
  v43 = 0;
  v44 = (const void **)v196;
  v137 = (const void **)((char *)v196 + 64 * (unint64_t)v197);
  v45 = (char *)&v206;
  v46 = v30;
  while (1)
  {
    LODWORD(v191) = 0;
    LODWORD(v188) = 0;
    LODWORD(v185) = 0;
    LODWORD(v182) = 0;
    LODWORD(v179) = 0;
    v47 = *v44;
    v48 = *((unsigned int *)v44 + 2);
    v211 = v213;
    v212 = 0x600000000;
    if (v48 >= 7)
      break;
    if ((_DWORD)v48)
    {
      v49 = 0;
      v50 = v213;
      goto LABEL_41;
    }
    v51 = 0;
    v52 = v213;
LABEL_42:
    FunctionType = &v206;
    v53 = v51 + v48;
    LODWORD(v212) = v53;
    *(_QWORD *)(a1 + 152) = *((unsigned int *)v44 + 2);
    v205 = 0x600000000;
    if (v53)
    {
      v140 = v43;
      v141 = v44;
      v54 = v46;
      v55 = &v52[8 * v53];
      do
      {
        v56 = *(_QWORD *)v52;
        if ((*(_BYTE *)(*(_QWORD *)v52 + 46) & 0x80) != 0)
        {
          v57 = *(unsigned int *)(v56 + 68);
          if ((_DWORD)v57)
          {
            v58 = *(_QWORD *)(v56 + 72);
            v59 = 32 * v57;
            do
            {
              Value = *(llvm **)(v58 + 24);
              DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Value);
              if (DefiningOp)
              {
                v61 = DefiningOp;
                v62 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
                if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v61 + 48) + 32))(*(_QWORD *)(v61 + 48), v62))
                {
                  v63 = *(_OWORD **)(v56 + 16);
                  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v56);
                  v158 = v63;
                  v159 = v64;
                  Value = *(llvm **)(v58 + 24);
                  v65 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&Value);
                  mlir::OpBuilder::clone((uint64_t **)v157, v65);
                }
              }
              v58 += 32;
              v59 -= 32;
            }
            while (v59);
          }
        }
        v52 += 8;
      }
      while (v52 != v55);
      v52 = v211;
      v45 = (char *)FunctionType;
      v66 = v205;
      v46 = v54;
      v43 = v140;
      v44 = v141;
    }
    else
    {
      v66 = 0;
    }
    llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&v211, (uint64_t)v52, v45, &v45[8 * v66]);
    v67 = *((_QWORD *)v193 + v43);
    if (v67)
    {
      v166[0] = *(void **)(a3 + 8 * v67 - 8);
      Value = (llvm *)v211;
      v223 = (uint64_t *)((char *)v211 + 8 * v212);
      llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl<mlir::Operation **>((uint64_t)&p_FunctionType, (uint64_t **)&Value, &v223);
      mlir::collect_regions::detail::buildLiveInsLiveOuts((uint64_t)&v190, (uint64_t)&v187, (uint64_t)&v178, (uint64_t **)&v211, (uint64_t *)&p_FunctionType, 0);
      if (v145)
      {
        v158 = v145;
        v159 = v46;
      }
      else
      {
        v158 = 0;
        v159 = 0;
      }
      v223 = (uint64_t *)&v225;
      v224 = 0x600000000;
      do
      {
        LOBYTE(v170) = 0;
        Value = (llvm *)&v190;
        v215 = v157;
        v216 = v147;
        v217 = (llvm *)&v187;
        v218 = &v223;
        v219 = &v170;
        v69 = (uint64_t *)v211;
        v70 = (uint64_t *)((char *)v211 + 8 * v212);
        if ((_DWORD)v212)
        {
          v71 = 8 * v212;
          do
          {
            ++v69;
            v71 -= 8;
          }
          while (v71);
          v69 = v70;
        }
        else
        {
LABEL_68:
          v72 = v69 + 1;
          if (v69 != v70 && v72 != v70)
          {
            do
            {
              ++v72;
            }
            while (v72 != v70);
          }
        }
        v74 = (unint64_t)((char *)v69 - (_BYTE *)v211) >> 3;
        LODWORD(v212) = v74;
        if (!(_BYTE)v170)
          goto LABEL_105;
        v75 = v200;
        if (v200)
        {
          v76 = v202;
          if (v202)
          {
            v77 = 8 * v202;
            v78 = p_FunctionType;
            while ((*(_QWORD *)v78 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v78 = (llvm *)((char *)v78 + 8);
              v77 -= 8;
              if (!v77)
                goto LABEL_62;
            }
          }
          else
          {
            v78 = p_FunctionType;
          }
          v79 = (llvm *)((char *)p_FunctionType + 8 * v202);
          if (v78 != v79)
          {
            v80 = ((unint64_t)((char *)v69 - (_BYTE *)v211) >> 3);
            v81 = v202 - 1;
            v82 = v201;
            v83 = *(_QWORD *)v78;
            do
            {
              if ((_DWORD)v74)
              {
                v84 = 8 * v80;
                v85 = (char *)v211;
                do
                {
                  if (*(_QWORD *)v85 == v83)
                    goto LABEL_92;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
                v85 = (char *)v211 + 8 * v80;
              }
              else
              {
                v85 = (char *)v211;
              }
LABEL_92:
              if (v80 == (v85 - (_BYTE *)v211) >> 3 && v76)
              {
                LODWORD(v86) = ((v83 >> 4) ^ (v83 >> 9)) & v81;
                v87 = (char *)p_FunctionType + 8 * v86;
                v88 = *(_QWORD *)v87;
                if (v83 != *(_QWORD *)v87)
                {
                  v89 = 1;
                  do
                  {
                    if (v88 == -4096)
                      goto LABEL_96;
                    v90 = v86 + v89++;
                    v86 = v90 & v81;
                    v88 = *((_QWORD *)p_FunctionType + v86);
                  }
                  while (v83 != v88);
                  v87 = (char *)p_FunctionType + 8 * v86;
                }
                *(_QWORD *)v87 = -8192;
                --v75;
                ++v82;
                v200 = v75;
                v201 = v82;
                goto LABEL_96;
              }
              do
              {
LABEL_96:
                v78 = (llvm *)((char *)v78 + 8);
                if (v78 == v79)
                  goto LABEL_62;
                v83 = *(_QWORD *)v78;
              }
              while ((*(_QWORD *)v78 | 0x1000) == 0xFFFFFFFFFFFFF000);
            }
            while (v78 != v79);
          }
        }
LABEL_62:
        mlir::collect_regions::detail::buildLiveInsLiveOuts((uint64_t)&v190, (uint64_t)&v187, (uint64_t)&v178, (uint64_t **)&v211, (uint64_t *)&p_FunctionType, 0);
      }
      while ((_BYTE)v170);
      LODWORD(v74) = v212;
LABEL_105:
      if ((_DWORD)v74)
      {
        v91 = *(_QWORD *)((((unint64_t)&v134[4 * (((unint64_t)a2[11] >> 23) & 1) + 1]
                          + (((unint64_t)a2[11] >> 21) & 0x7F8)
                          + 3) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * a2[10]
                        + 8);
        if (v91)
          v92 = v91 - 8;
        else
          v92 = 0;
        v93 = *(_QWORD *)(v92 + 40);
        v158 = (_OWORD *)v92;
        v159 = v93;
        v94 = (unsigned __int8 (***)(void *, unint64_t, unint64_t, void **))v166[0];
        mlir::ValueRange::ValueRange(v174, (uint64_t)v190, v191);
        if ((**v94)(v94, v174[0], v174[1], &v184))
        {
          v95 = (unsigned __int8 (***)(void *, unint64_t, unint64_t, void **))v166[0];
          mlir::ValueRange::ValueRange(v173, (uint64_t)v187, v188);
          if ((**v95)(v95, v173[0], v173[1], &v181))
          {
            v215 = 0;
            Value = 0;
            LODWORD(v216) = 0;
            v217 = 0;
            v218 = 0;
            LODWORD(v219) = 0;
            v220 = 0;
            v221 = 0;
            v222 = 0;
            v164 = 0;
            mlir::Builder::getFusedLoc(v157, (uint64_t **)v178, (mlir::MLIRContext *)v179, 0);
          }
        }
      }
      else if ((_DWORD)v224)
      {
        v96 = &v223[v224];
        do
        {
          v97 = (mlir::Operation *)*--v96;
          mlir::OpBuilder::clone((uint64_t **)v157, v97, (mlir::IRMapping *)v147);
        }
        while (v96 != v223);
      }
      if (v223 != (uint64_t *)&v225)
        free(v223);
      llvm::deallocate_buffer(p_FunctionType, (void *)(8 * v202));
    }
    if (v145)
    {
      v158 = v145;
      v159 = v46;
      v68 = v212;
      if ((_DWORD)v212)
        goto LABEL_119;
    }
    else
    {
      v46 = 0;
      v145 = 0;
      v158 = 0;
      v159 = 0;
      v68 = v212;
      if ((_DWORD)v212)
      {
LABEL_119:
        v98 = (mlir::Operation **)v211;
        v99 = 8 * v68;
        do
        {
          v100 = *v98++;
          mlir::OpBuilder::clone((uint64_t **)v157, v100, (mlir::IRMapping *)v147);
          v99 -= 8;
        }
        while (v99);
        v145 = v158;
        v46 = v159;
      }
    }
    if (FunctionType != &v206)
      free(FunctionType);
    if (v211 != v213)
      free(v211);
    v158 = v139;
    v159 = v138;
    ++v43;
    v44 += 8;
    v45 = (char *)&v206;
    if (v44 == v137)
    {
      if ((_DWORD)v176)
      {
        v101 = *((_QWORD *)v175 + 2);
        v146 = *(_OWORD *)v175;
        v168 = *(_OWORD *)v175;
        v167 = v101;
        v232 = (unsigned int **)v234;
        v233 = 0x100000000;
        v166[0] = &v167;
        v166[1] = 0;
        v164 = (mlir *)v166;
        v165 = 0;
        v170 = &v172;
        v171 = 0x500000000;
        v223 = 0;
        v224 = 0;
        v225 = 0;
        v226 = 0;
        v227 = 0;
        v228 = 0;
        v229 = 0;
        v230 = 0;
        v231 = 0;
        FunctionType = v157;
        v205 = (uint64_t)&v167;
        v206 = &v223;
        p_FunctionType = (llvm *)&FunctionType;
        if (!mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a2, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_12_GLOBAL__N_114legalizeRegionENS1_8ModuleOpENS1_24TargetLegalizerInterfaceERNS1_9OpBuilderEPNS1_15DeviceInterfaceEE3__0NS1_9placement12HostTypeCastES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueEST_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&p_FunctionType, 1))goto LABEL_205;
        mlir::SymbolTable::getSymbolUses((mlir::SymbolTable *)v146, (mlir::Operation *)a2, (uint64_t)&__p);
        if (!v163)
        {
          FunctionType = "Operation has no symbol table uses";
          LOWORD(v208) = 259;
          mlir::OpState::emitOpError((uint64_t **)&v168, (const void ***)&FunctionType, (uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          v106 = (uint64_t *)&v215;
          goto LABEL_202;
        }
        ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v168);
        LODWORD(v233) = 0;
        if (!v163)
          std::__throw_bad_optional_access[abi:nn180100]();
        v102 = (char *)__p;
        v103 = v162;
        v104 = 0;
        if (__p != v162)
        {
          do
          {
            v105 = *(unsigned int **)v102;
            if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)v102 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ReplacedOps,void>::id)
            {
              if (v104 >= HIDWORD(v233))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v232, v234, v104 + 1, 8);
                v104 = v233;
              }
              v232[v104] = v105;
              v104 = v233 + 1;
              LODWORD(v233) = v233 + 1;
            }
            v102 += 16;
          }
          while (v102 != v103);
        }
        if (!v224)
          goto LABEL_161;
        v107 = v225;
        if (v225 > 4 * (int)v224 && v225 >= 0x41)
        {
          llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)&v223);
          v104 = v233;
LABEL_161:
          v160 = mlir::TargetLegalizerInterface::legalizeRegionBody(&v168, (uint64_t)v157, (uint64_t)v232, v104, v167, (uint64_t)&v223);
          if (v160)
          {
            mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)&v168);
            if (!(_DWORD)v233)
              goto LABEL_192;
            v116 = v232;
            v142 = &v232[v233];
LABEL_165:
            v117 = *v116;
            LODWORD(v171) = 0;
            v118 = v117[9];
            if ((_DWORD)v118)
              v119 = (uint64_t)(v117 - 4);
            else
              v119 = 0;
            if (!(_DWORD)v118)
              goto LABEL_164;
            v120 = 0;
            v121 = 0;
            while (1)
            {
              NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v119, v121);
              p_FunctionType = (llvm *)NextResultAtOffset;
              FunctionType = 0;
              if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v223, (unint64_t *)&p_FunctionType, &FunctionType))break;
              if (FunctionType == &v223[2 * v225])
                break;
              v123 = (uint64_t *)*((_QWORD *)FunctionType + 1);
              if (!v123)
                break;
              if (v123 != (uint64_t *)NextResultAtOffset)
              {
                while (1)
                {
                  v124 = *(uint64_t **)NextResultAtOffset;
                  if (!*(_QWORD *)NextResultAtOffset)
                    break;
                  v125 = (uint64_t *)v124[1];
                  if (v125)
                  {
                    *v125 = *v124;
                    if (*v124)
                      *(_QWORD *)(*v124 + 8) = v124[1];
                  }
                  v124[3] = (uint64_t)v123;
                  v124[1] = (uint64_t)v123;
                  v126 = *v123;
                  *v124 = *v123;
                  if (v126)
                    *(_QWORD *)(v126 + 8) = v124;
                  *v123 = (uint64_t)v124;
                }
                v120 = 1;
              }
              if (++v121 == v118)
              {
                if ((v120 & 1) != 0)
                  mlir::Operation::erase((mlir::Operation *)v117);
LABEL_164:
                if (++v116 != v142)
                  goto LABEL_165;
LABEL_192:
                if (v160 != ArgOperands)
                  mlir::Operation::cloneWithoutRegions((mlir::Operation *)v168);
                if (!v163)
LABEL_205:
                  llvm::deallocate_buffer(v229, (void *)(16 * v231));
LABEL_203:
                if (__p)
                {
                  v162 = (char *)__p;
                  operator delete(__p);
                }
                goto LABEL_205;
              }
            }
            p_FunctionType = (llvm *)"Result has no mapping in the valueMap (result #";
            v203 = 259;
            mlir::Operation::emitOpError((uint64_t *)v117, (const void ***)&p_FunctionType, (uint64_t)&FunctionType);
            v127 = *(_QWORD *)(NextResultAtOffset + 8) & 7;
            if (NextResultAtOffset && v127 == 6)
              v127 = (*(_DWORD *)(NextResultAtOffset + 16) + 6);
            if (FunctionType)
            {
              LODWORD(v169[0]) = 5;
              v169[1] = (void *)v127;
              v128 = v207;
              if (v208 >= v209)
              {
                v132 = v208 + 1;
                if (v207 <= (unint64_t)v169 && v207 + 24 * v208 > (unint64_t)v169)
                {
                  v133 = (char *)v169 - v207;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v207, v210, v132, 24);
                  v128 = v207;
                  v129 = (void **)&v133[v207];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v207, v210, v132, 24);
                  v129 = v169;
                  v128 = v207;
                }
              }
              else
              {
                v129 = v169;
              }
              v130 = v128 + 24 * v208;
              v131 = *(_OWORD *)v129;
              *(_QWORD *)(v130 + 16) = v129[2];
              *(_OWORD *)v130 = v131;
              ++v208;
              if (FunctionType)
              {
                mlir::Diagnostic::operator<<((uint64_t)&v205, ")");
                if (FunctionType)
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionType);
              }
            }
            v106 = &v205;
          }
          else
          {
            FunctionType = "Legalization failed";
            LOWORD(v208) = 259;
            mlir::OpState::emitOpError((uint64_t **)&v168, (const void ***)&FunctionType, (uint64_t)&v211);
            if (v211)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v211);
            v106 = &v212;
          }
LABEL_202:
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v106);
          if (!v163)
            goto LABEL_205;
          goto LABEL_203;
        }
        if (v225)
        {
          v108 = v223;
          v109 = (v225 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (v109)
          {
            v110 = v109 + 1;
            v111 = (v109 + 1) & 0x1FFFFFFFFFFFFFFELL;
            v112 = &v223[2 * v111];
            v113 = v223 + 2;
            v114 = v111;
            do
            {
              *(v113 - 2) = -4096;
              *v113 = -4096;
              v113 += 4;
              v114 -= 2;
            }
            while (v114);
            if (v110 == v111)
              goto LABEL_160;
          }
          else
          {
            v112 = v223;
          }
          v115 = &v108[2 * v107];
          do
          {
            *v112 = -4096;
            v112 += 2;
          }
          while (v112 != v115);
        }
LABEL_160:
        v224 = 0;
        goto LABEL_161;
      }
LABEL_212:
      if (v175 != v177)
        free(v175);
      llvm::deallocate_buffer(v152, (void *)(16 * v154));
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v213, v48, 8);
  v49 = v212;
  v50 = v211;
LABEL_41:
  memcpy(&v50[8 * v49], v47, 8 * v48);
  v51 = v212;
  v52 = v211;
  v45 = (char *)&v206;
  goto LABEL_42;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::`anonymous namespace'::PlacementState::PlacementState(long long,mlir::func::FuncOp)::{lambda(mlir::Operation *)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *(unsigned int *)(*a1 + 80);
  if (v4 >= *(_DWORD *)(*a1 + 84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 72, (void *)(v3 + 88), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 80);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 72) + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 80);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::func::FuncOp,llvm::StringRef,mlir::FunctionType>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  mlir::GenericProgramPoint *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _QWORD v20[39];

  v20[38] = *MEMORY[0x1E0C80C00];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"func.func", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"func.func";
    v18[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::func::FuncOp::build(a1, (uint64_t)v20, *a3, a3[1], *a4, 0, 0, v11, 0, 0);
  v12 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

uint64_t mlir::`anonymous namespace'::eraseTypeChangers(llvm::SmallVectorImpl<mlir::Operation *> &,llvm::SmallVectorImpl<mlir::Value> &,llvm::SmallVectorImpl<mlir::Value> &,llvm::SmallVectorImpl<mlir::Location> &,llvm::DenseSet<mlir::Operation *,llvm::DenseMapInfo<mlir::Operation *,void>> &,llvm::SmallVector<mlir::Operation *,6u> &,mlir::OpBuilder &,mlir::IRMapping &)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t DefiningOp;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t NextResultAtOffset;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = mlir::TypeID::get<mlir::OpTrait::TypeChanger<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::TypeChanger>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4) & 1) != 0
    || (v5 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v5),
        (_DWORD)result))
  {
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0 && (v7 = *(unsigned int *)(a2 + 68), (_DWORD)v7))
    {
      v8 = 0;
      v9 = *(_QWORD *)(a2 + 72);
      v10 = *a1;
      while (1)
      {
        v12 = *(_QWORD *)(v9 + 32 * v8 + 24);
        v32 = v12;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v32);
        if (!DefiningOp
          || (v14 = DefiningOp,
              v15 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
              ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v14 + 48) + 32))(*(_QWORD *)(v14 + 48), v15) & 1) == 0))
        {
          v16 = *(_QWORD **)v10;
          v17 = *(unsigned int *)(v10 + 8);
          if ((_DWORD)v17)
          {
            v18 = 8 * v17;
            v11 = *(_QWORD **)v10;
            while (*v11 != v12)
            {
              ++v11;
              v18 -= 8;
              if (!v18)
              {
                v11 = &v16[v17];
                break;
              }
            }
          }
          else
          {
            v11 = *(_QWORD **)v10;
          }
          if (v17 == v11 - v16)
            break;
        }
        if (++v8 == v7)
          goto LABEL_16;
      }
      v19 = 0;
    }
    else
    {
LABEL_16:
      mlir::OpBuilder::clone((uint64_t **)a1[1], (mlir::Operation *)a2, (mlir::IRMapping *)a1[2]);
      v19 = 1;
    }
    v20 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v20)
      v21 = a2 - 16;
    else
      v21 = 0;
    if ((_DWORD)v20)
    {
      v22 = 0;
      v23 = a1[3];
      while (1)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v21, v22);
        v25 = *(_QWORD **)v23;
        v26 = *(unsigned int *)(v23 + 8);
        if ((_DWORD)v26)
        {
          v27 = 8 * v26;
          v28 = *(_QWORD **)v23;
          while (*v28 != NextResultAtOffset)
          {
            ++v28;
            v27 -= 8;
            if (!v27)
            {
              v28 = &v25[v26];
              break;
            }
          }
        }
        else
        {
          v28 = *(_QWORD **)v23;
        }
        if (v26 == v28 - v25)
          break;
        if (++v22 == v20)
          goto LABEL_31;
      }
      v31 = mlir::TypeID::get<mlir::OpTrait::TypeChanger<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::TypeChanger>(void)::Empty>>();
      result = v19 & (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v31);
    }
    else
    {
LABEL_31:
      v29 = a1[4];
      v30 = *(unsigned int *)(v29 + 8);
      if (v30 >= *(_DWORD *)(v29 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1[4], (void *)(v29 + 16), v30 + 1, 8);
        LODWORD(v30) = *(_DWORD *)(v29 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v29 + 8 * v30) = a2;
      ++*(_DWORD *)(v29 + 8);
      result = 1;
    }
    *(_BYTE *)a1[5] |= result;
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<mlir::TargetLegalizerInterface,mlir::DeviceInterface *>,true>::growAndEmplaceBack<mlir::TargetLegalizerInterface,mlir::DeviceInterface *&>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v10;
  BOOL v11;
  char *v12;
  __int128 v13;
  uint64_t v14;

  v13 = *a2;
  v14 = *a3;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  v6 = (char *)&v13;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v4 + 1;
    v11 = v5 + 24 * v4 > (unint64_t)&v13;
    if (v5 <= (unint64_t)&v13 && v11)
    {
      v12 = (char *)&v13 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 24);
      v5 = *(_QWORD *)a1;
      v6 = &v12[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 24);
      v5 = *(_QWORD *)a1;
      v6 = (char *)&v13;
    }
  }
  v7 = v5 + 24 * *(unsigned int *)(a1 + 8);
  v8 = *(_OWORD *)v6;
  *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 2);
  *(_OWORD *)v7 = v8;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 24 * v7 - 24;
}

double _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_12_GLOBAL__N_114legalizeRegionENS1_8ModuleOpENS1_24TargetLegalizerInterfaceERNS1_9OpBuilderEPNS1_15DeviceInterfaceEE3__0NS1_9placement12HostTypeCastES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueEST_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t **a1, mlir::GenericProgramPoint *this, __n128 a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Input;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::Operation *v26;
  mlir::Operation *DefiningOp;
  uint64_t v28;
  uint64_t v29;
  __n128 v31;
  mlir::Operation *v32;
  uint64_t v33;
  uint64_t v34[2];

  if (!this
    || *(_UNKNOWN **)(*((_QWORD *)this + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
  {
    return a3.n128_f64[0];
  }
  v4 = *a1;
  v32 = this;
  v5 = *v4;
  v6 = *v4 + 16;
  v31 = *(__n128 *)v6;
  v7 = *((_QWORD *)this + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  *(_QWORD *)v6 = v7;
  *(_QWORD *)(v5 + 24) = v8;
  v9 = *v4;
  v10 = *(_QWORD *)v4[1];
  v11 = *((_QWORD *)this + 3);
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v32);
  v13 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v32) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v13)
    goto LABEL_12;
  v14 = *v13;
  v15 = mlir::TypeID::get<mlir::ShapedType>();
  v16 = *(unsigned int *)(v14 + 16);
  if (!(_DWORD)v16)
    goto LABEL_12;
  v17 = *(_QWORD **)(v14 + 8);
  v18 = &v17[2 * v16];
  do
  {
    v19 = v16 >> 1;
    v20 = &v17[2 * (v16 >> 1)];
    v22 = *v20;
    v21 = v20 + 2;
    v16 += ~(v16 >> 1);
    if (v22 < v15)
      v17 = v21;
    else
      v16 = v19;
  }
  while (v16);
  if (v17 != v18 && *v17 == v15)
    v23 = v17[1];
  else
LABEL_12:
    v23 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, v9, v11, Input, v13, v23, v4[2]))
  {
    a3 = v31;
    if (!v5)
      return a3.n128_f64[0];
    goto LABEL_22;
  }
  v24 = v4[2];
  v25 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v32);
  v33 = v25;
  v34[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v24, (unint64_t *)&v33, v34)&& v34[0] != *(_QWORD *)v24 + 16 * *(unsigned int *)(v24 + 16))
  {
    v25 = *(_QWORD *)(v34[0] + 8);
  }
  v33 = v25;
  v26 = v32;
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v33);
  v28 = *((unsigned int *)v26 + 9);
  v29 = (uint64_t)v26 - 16;
  if (!(_DWORD)v28)
    v29 = 0;
  v34[0] = v29;
  v34[1] = v28;
  mlir::ResultRange::replaceAllUsesWith(v34, DefiningOp);
  mlir::Operation::erase(v32);
  a3 = v31;
  if (v5)
  {
LABEL_22:
    if (a3.n128_u64[0])
    {
      *(__n128 *)v6 = a3;
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
  }
  return a3.n128_f64[0];
}

mlir::GenericProgramPoint *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::`anonymous namespace'::legalizeRegion(mlir::ModuleOp,mlir::TargetLegalizerInterface,mlir::OpBuilder &,mlir::DeviceInterface *)::$_1>(uint64_t a1, mlir::Operation *a2)
{
  mlir::GenericProgramPoint *result;

  result = (mlir::GenericProgramPoint *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  if (!result)
    return mlir::OpBuilder::clone(*(uint64_t ***)a1, a2, *(mlir::IRMapping **)(a1 + 8));
  return result;
}

BOOL llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_2>(uint64_t a1, uint64_t a2)
{
  llvm *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  llvm *v19;
  uint64_t *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t DefiningOp;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  llvm *v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  uint64_t *v96;
  int v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  BOOL v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v126;
  uint64_t v127;
  uint64_t I32IntegerAttr;
  int v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  mlir::Operation *v135;
  uint64_t v136;
  _OWORD *v137;
  __int128 v138;
  _QWORD *v139;
  uint64_t v140;
  llvm *v141[2];
  unsigned int v142;
  void *__p[2];
  __int128 v144;
  unsigned __int128 v145;
  _DWORD *v146;
  uint64_t v147;

  v2 = (llvm *)a2;
  if (!mlir::collect_regions::detail::verifyShouldAddToQueue(**(mlir::Block ***)a1, *(_QWORD *)(*(_QWORD *)a1 + 8), **(_QWORD **)(a1 + 8), a2, *(_QWORD *)(a1 + 16) + 48))goto LABEL_141;
  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 120) + 16))(*(_QWORD *)(v4 + 120));
  if ((*((_BYTE *)v2 + 46) & 0x80) == 0 || (v5 = *((unsigned int *)v2 + 17), !(_DWORD)v5))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v141[0] = v2;
LABEL_6:
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 8);
    if (v9 == v10)
      v11 = 0;
    else
      v11 = ((v9 - v10) << 6) - 1;
    v12 = *(_QWORD *)(v8 + 40);
    v13 = v12 + *(_QWORD *)(v8 + 32);
    if (v11 == v13)
    {
      std::deque<mlir::Operation *>::__add_back_capacity(v8);
      v12 = *(_QWORD *)(v8 + 40);
      v10 = *(_QWORD *)(v8 + 8);
      v13 = *(_QWORD *)(v8 + 32) + v12;
    }
    *(_QWORD *)(*(_QWORD *)(v10 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF)) = v2;
    *(_QWORD *)(v8 + 40) = v12 + 1;
    v14 = *(_QWORD *)(v8 + 48);
    v15 = *(_DWORD *)(v8 + 64);
    if (v15)
    {
      v16 = v15 - 1;
      v17 = v16 & ((v2 >> 4) ^ (v2 >> 9));
      v18 = (uint64_t *)(v14 + 8 * v17);
      v19 = (llvm *)*v18;
      if ((llvm *)*v18 == v2)
      {
LABEL_146:
        v127 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 120) + 16))(*(_QWORD *)(v8 + 120));
        I32IntegerAttr = mlir::Builder::getI32IntegerAttr(*(mlir::Builder **)(*(_QWORD *)(v8 + 120) + 8), *(_DWORD *)(v8 + 128));
        mlir::Operation::setAttr((uint64_t)v2, v127, I32IntegerAttr);
        return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40) < *(_QWORD *)(**(_QWORD **)(a1 + 8) + 16);
      }
      v20 = 0;
      v21 = 1;
      while (v19 != (llvm *)-4096)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v19 == (llvm *)-8192;
        if (v22)
          v20 = v18;
        v23 = v17 + v21++;
        v17 = v23 & v16;
        v18 = (uint64_t *)(v14 + 8 * v17);
        v19 = (llvm *)*v18;
        if ((llvm *)*v18 == v2)
          goto LABEL_146;
      }
      if (v20)
        v126 = v20;
      else
        v126 = v18;
    }
    else
    {
      v126 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(v8 + 48, v126, (uint64_t *)v141);
    v2 = v141[0];
    goto LABEL_146;
  }
  v6 = 0;
  v7 = *((_QWORD *)v2 + 9);
  while (1)
  {
    v24 = *(_DWORD **)(v7 + 32 * v6 + 24);
    v146 = v24;
    if ((~v24[2] & 7) == 0)
      goto LABEL_22;
    __p[0] = v24;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)__p);
    if (DefiningOp)
    {
      v26 = DefiningOp;
      v27 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v26 + 48) + 32))(*(_QWORD *)(v26 + 48), v27) & 1) != 0)
        goto LABEL_22;
    }
    v28 = mlir::Value::getDefiningOp((mlir::Value *)&v146);
    v29 = v28;
    v30 = *(_QWORD *)(v4 + 48);
    v31 = *(unsigned int *)(v4 + 64);
    if ((_DWORD)v31)
    {
      LODWORD(v32) = ((v28 >> 4) ^ (v28 >> 9)) & (v31 - 1);
      v33 = (uint64_t *)(v30 + 8 * v32);
      v34 = *v33;
      if (*v33 == v28)
        goto LABEL_33;
      v35 = 1;
      while (v34 != -4096)
      {
        v36 = v32 + v35++;
        v32 = v36 & (v31 - 1);
        v34 = *(_QWORD *)(v30 + 8 * v32);
        if (v34 == v28)
        {
          v33 = (uint64_t *)(v30 + 8 * v32);
          goto LABEL_33;
        }
      }
    }
    v33 = (uint64_t *)(v30 + 8 * v31);
LABEL_33:
    if (v33 == (uint64_t *)(v30 + 8 * v31))
      break;
LABEL_22:
    if (++v6 == v5)
    {
      v129 = *((_DWORD *)v2 + 11);
      v8 = *(_QWORD *)(a1 + 16);
      v141[0] = v2;
      if ((v129 & 0x800000) != 0)
      {
        v130 = *((unsigned int *)v2 + 17);
        if ((_DWORD)v130)
        {
          v131 = (uint64_t *)(*((_QWORD *)v2 + 9) + 24);
          do
          {
            v147 = *v131;
            v134 = mlir::Value::getDefiningOp((mlir::Value *)&v147);
            if (v134)
            {
              v135 = (mlir::Operation *)v134;
              v136 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(_QWORD *, uint64_t))(**((_QWORD **)v135 + 6) + 32))(*((_QWORD **)v135 + 6), v136))
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 120) + 16))(*(_QWORD *)(v8 + 120));
                v137 = *(_OWORD **)(*(_QWORD *)(v8 + 120) + 8);
                v138 = v137[1];
                *(_OWORD *)__p = *v137;
                v144 = v138;
                v139 = (_QWORD *)*((_QWORD *)v135 - 2);
                if (!v139 || *v139)
                {
                  v132 = *((_QWORD *)v2 + 2);
                  mlir::GenericProgramPoint::~GenericProgramPoint(v2);
                  *(_QWORD *)&v144 = v132;
                  *((_QWORD *)&v144 + 1) = v133;
                  mlir::OpBuilder::clone((uint64_t **)__p, v135);
                }
              }
            }
            v131 += 4;
            --v130;
          }
          while (v130);
        }
      }
      goto LABEL_6;
    }
  }
  v37 = *(_DWORD *)(v4 + 112);
  if (!v37)
    goto LABEL_40;
  v38 = *(_QWORD *)(v4 + 96);
  v39 = v37 - 1;
  v40 = v39 & ((v28 >> 4) ^ (v28 >> 9));
  v41 = *(_QWORD *)(v38 + 8 * v40);
  if (v41 != v28)
  {
    v42 = 1;
    while (v41 != -4096)
    {
      v43 = v40 + v42++;
      v40 = v43 & v39;
      v41 = *(_QWORD *)(v38 + 8 * v40);
      if (v41 == v28)
        goto LABEL_141;
    }
LABEL_40:
    v144 = 0u;
    v145 = 0u;
    *(_OWORD *)__p = 0u;
    v141[0] = 0;
    v141[1] = 0;
    v142 = 0;
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
    v45 = *((_QWORD *)&v145 + 1);
    v44 = v145;
    *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v145 + 1) + (_QWORD)v145) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((*((_QWORD *)&v145 + 1) + v145) & 0x1FF)) = v29;
    *((_QWORD *)&v145 + 1) = v45 + 1;
    if (v45 == -1)
      goto LABEL_118;
    v46 = (char *)__p[1];
    while (2)
    {
      v47 = *(_QWORD *)(*(_QWORD *)&v46[(v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF));
      v48 = *(_DWORD *)(v47 + 44);
      if ((v48 & 0x7FFFFF) != 0)
      {
        v49 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v47 + 48) + 32))(*(_QWORD *)(v47 + 48), v49))
        {
          v48 = *(_DWORD *)(v47 + 44);
          goto LABEL_46;
        }
LABEL_102:
        v99 = 1;
      }
      else
      {
LABEL_46:
        if ((v48 & 0x800000) != 0)
        {
          v50 = *(unsigned int *)(v47 + 68);
          if ((_DWORD)v50)
          {
            v51 = 0;
            v52 = *(_QWORD *)(v47 + 72);
            while (2)
            {
              v147 = *(_QWORD *)(v52 + 32 * v51 + 24);
              v140 = 0;
              v58 = mlir::Value::getDefiningOp((mlir::Value *)&v147);
              v140 = v58;
              if (v58)
              {
                v59 = v58;
                v60 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
                if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v59 + 48) + 32))(*(_QWORD *)(v59 + 48), v60) & 1) == 0)
                {
                  v61 = v140;
                  if (*(_UNKNOWN **)(*(_QWORD *)(v140 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
                  {
                    v62 = *(_QWORD *)(v4 + 48);
                    v63 = *(unsigned int *)(v4 + 64);
                    v64 = v140 >> 4;
                    if ((_DWORD)v63)
                    {
                      LODWORD(v65) = (v63 - 1) & (v64 ^ (v140 >> 9));
                      v66 = (uint64_t *)(v62 + 8 * v65);
                      v67 = *v66;
                      if (*v66 != v140)
                      {
                        v68 = 1;
                        do
                        {
                          if (v67 == -4096)
                            goto LABEL_60;
                          v69 = v65 + v68++;
                          v65 = v69 & (v63 - 1);
                          v67 = *(_QWORD *)(v62 + 8 * v65);
                        }
                        while (v67 != v140);
                        v66 = (uint64_t *)(v62 + 8 * v65);
                      }
                    }
                    else
                    {
LABEL_60:
                      v66 = (uint64_t *)(v62 + 8 * v63);
                    }
                    if (v66 != (uint64_t *)(v62 + 8 * v63))
                      goto LABEL_102;
                    v70 = *(_DWORD *)(v4 + 112);
                    if (v70)
                    {
                      v71 = *(_QWORD *)(v4 + 96);
                      v72 = v70 - 1;
                      v73 = v72 & (v64 ^ (v140 >> 9));
                      v74 = *(_QWORD *)(v71 + 8 * v73);
                      if (v74 == v140)
                        goto LABEL_102;
                      v75 = 1;
                      while (v74 != -4096)
                      {
                        v76 = v73 + v75++;
                        v73 = v76 & v72;
                        v74 = *(_QWORD *)(v71 + 8 * v73);
                        if (v74 == v140)
                          goto LABEL_102;
                      }
                    }
                    v77 = v142;
                    if (v142)
                    {
                      LODWORD(v78) = (v142 - 1) & (v64 ^ (v140 >> 9));
                      v79 = (llvm *)((char *)v141[0] + 8 * v78);
                      v80 = *(_QWORD *)v79;
                      if (*(_QWORD *)v79 != v140)
                      {
                        v81 = 1;
                        do
                        {
                          if (v80 == -4096)
                            goto LABEL_74;
                          v82 = v78 + v81++;
                          v78 = v82 & (v142 - 1);
                          v80 = *((_QWORD *)v141[0] + v78);
                        }
                        while (v80 != v140);
                        v79 = (llvm *)((char *)v141[0] + 8 * v78);
                      }
                    }
                    else
                    {
LABEL_74:
                      v79 = (llvm *)((char *)v141[0] + 8 * v142);
                    }
                    if (v79 == (llvm *)((char *)v141[0] + 8 * v142))
                    {
                      v83 = *(_DWORD *)(v4 + 88);
                      if (!v83)
                        goto LABEL_77;
                      v53 = *(_QWORD *)(v4 + 72);
                      v54 = v64 ^ (v140 >> 9);
                      v55 = v83 - 1;
                      v56 = (v83 - 1) & v54;
                      v57 = *(_QWORD *)(v53 + 8 * v56);
                      if (v57 != v140)
                      {
                        v97 = 1;
                        while (v57 != -4096)
                        {
                          v98 = v56 + v97++;
                          v56 = v98 & v55;
                          v57 = *(_QWORD *)(v53 + 8 * v56);
                          if (v57 == v140)
                            goto LABEL_50;
                        }
LABEL_77:
                        v84 = (char *)__p[1];
                        if ((void *)v144 == __p[1])
                          v85 = 0;
                        else
                          v85 = (((_QWORD)v144 - (unint64_t)__p[1]) << 6) - 1;
                        v86 = *((_QWORD *)&v145 + 1);
                        v87 = *((_QWORD *)&v145 + 1) + v145;
                        if (v85 == *((_QWORD *)&v145 + 1) + (_QWORD)v145)
                        {
                          std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
                          v86 = *((_QWORD *)&v145 + 1);
                          v84 = (char *)__p[1];
                          v87 = v145 + *((_QWORD *)&v145 + 1);
                          v61 = v140;
                          v77 = v142;
                        }
                        *(_QWORD *)(*(_QWORD *)&v84[(v87 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v87 & 0x1FF)) = v61;
                        *((_QWORD *)&v145 + 1) = v86 + 1;
                        if (v77)
                        {
                          v88 = v77 - 1;
                          v89 = ((v140 >> 4) ^ (v140 >> 9)) & v88;
                          v90 = (uint64_t *)((char *)v141[0] + 8 * v89);
                          v91 = *v90;
                          if (v140 == *v90)
                            goto LABEL_50;
                          v92 = 0;
                          v93 = 1;
                          while (v91 != -4096)
                          {
                            if (v92)
                              v94 = 0;
                            else
                              v94 = v91 == -8192;
                            if (v94)
                              v92 = v90;
                            v95 = v89 + v93++;
                            v89 = v95 & v88;
                            v90 = (uint64_t *)((char *)v141[0] + 8 * v89);
                            v91 = *v90;
                            if (v140 == *v90)
                              goto LABEL_50;
                          }
                          if (v92)
                            v96 = v92;
                          else
                            v96 = v90;
                        }
                        else
                        {
                          v96 = 0;
                        }
                        llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v141, v96, &v140);
                      }
                    }
                  }
                }
              }
LABEL_50:
              if (++v51 == v50)
                break;
              continue;
            }
          }
        }
        v99 = 0;
      }
      v46 = (char *)__p[1];
      v100 = *((_QWORD *)&v145 + 1) - 1;
      v44 = v145 + 1;
      v145 = __PAIR128__(*((unint64_t *)&v145 + 1), (uint64_t)v145 + 1) + __PAIR128__(-1, 0);
      if (v44 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        v46 = (char *)__p[1] + 8;
        v44 = v145 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v145 = v145 - 512;
        v100 = *((_QWORD *)&v145 + 1);
      }
      if (((v100 != 0) & ~v99) == 0)
      {
        if ((v99 & 1) != 0)
        {
          v147 = v29;
          v101 = *(_DWORD *)(v4 + 112);
          if (!v101)
          {
            v122 = 0;
            goto LABEL_133;
          }
          v102 = *(_QWORD *)(v4 + 96);
          v103 = v101 - 1;
          v104 = v103 & ((v29 >> 4) ^ (v29 >> 9));
          v105 = (uint64_t *)(v102 + 8 * v104);
          v106 = *v105;
          if (*v105 != v29)
          {
            v107 = 0;
            v108 = 1;
            while (v106 != -4096)
            {
              if (v107)
                v109 = 0;
              else
                v109 = v106 == -8192;
              if (v109)
                v107 = v105;
              v110 = v104 + v108++;
              v104 = v110 & v103;
              v105 = (uint64_t *)(v102 + 8 * v104);
              v106 = *v105;
              if (*v105 == v29)
                goto LABEL_134;
            }
            if (v107)
              v122 = v107;
            else
              v122 = v105;
LABEL_133:
            llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(v4 + 96, v122, &v147);
          }
          goto LABEL_134;
        }
LABEL_118:
        v147 = v29;
        v111 = *(_DWORD *)(v4 + 88);
        if (v111)
        {
          v112 = *(_QWORD *)(v4 + 72);
          v113 = v111 - 1;
          v114 = v113 & ((v29 >> 4) ^ (v29 >> 9));
          v115 = (uint64_t *)(v112 + 8 * v114);
          v116 = *v115;
          if (*v115 == v29)
            goto LABEL_134;
          v117 = 0;
          v118 = 1;
          while (v116 != -4096)
          {
            if (v117)
              v119 = 0;
            else
              v119 = v116 == -8192;
            if (v119)
              v117 = v115;
            v120 = v114 + v118++;
            v114 = v120 & v113;
            v115 = (uint64_t *)(v112 + 8 * v114);
            v116 = *v115;
            if (*v115 == v29)
              goto LABEL_134;
          }
          if (v117)
            v121 = v117;
          else
            v121 = v115;
        }
        else
        {
          v121 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(v4 + 72, v121, &v147);
LABEL_134:
        llvm::deallocate_buffer(v141[0], (void *)(8 * v142));
      }
      continue;
    }
  }
LABEL_141:
  v123 = *(_QWORD *)(a1 + 24);
  v124 = *(unsigned int *)(v123 + 8);
  if (v124 >= *(_DWORD *)(v123 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v123, (void *)(v123 + 16), v124 + 1, 8);
    LODWORD(v124) = *(_DWORD *)(v123 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v123 + 8 * v124) = v2;
  ++*(_DWORD *)(v123 + 8);
  return 1;
}

void mlir::`anonymous namespace'::RegionQueue::pushFront(mlir::_anonymous_namespace_::RegionQueue *this, mlir::Operation *a2)
{
  mlir::Operation *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  mlir::Operation *v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t I32IntegerAttr;
  mlir::Operation *v22;

  v2 = a2;
  v22 = a2;
  v4 = *((_QWORD *)this + 4);
  if (!v4)
  {
    std::deque<mlir::Operation *>::__add_front_capacity((uint64_t)this);
    v4 = *((_QWORD *)this + 4);
  }
  v5 = *((_QWORD *)this + 1);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  if (*((_QWORD *)this + 2) == v5)
    v7 = 0;
  else
    v7 = *v6 + 8 * (v4 & 0x1FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_QWORD *)(v7 - 8) = v2;
  v8 = *((_QWORD *)this + 5) + 1;
  *((_QWORD *)this + 4) = v4 - 1;
  *((_QWORD *)this + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  v10 = *((_DWORD *)this + 16);
  if (!v10)
  {
    v19 = 0;
LABEL_20:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)this + 48, v19, (uint64_t *)&v22);
    v2 = v22;
    goto LABEL_21;
  }
  v11 = v10 - 1;
  v12 = ((v2 >> 4) ^ (v2 >> 9)) & v11;
  v13 = (uint64_t *)(v9 + 8 * v12);
  v14 = (mlir::Operation *)*v13;
  if ((mlir::Operation *)*v13 != v2)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != (mlir::Operation *)-4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == (mlir::Operation *)-8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (uint64_t *)(v9 + 8 * v12);
      v14 = (mlir::Operation *)*v13;
      if ((mlir::Operation *)*v13 == v2)
        goto LABEL_21;
    }
    if (v15)
      v19 = v15;
    else
      v19 = v13;
    goto LABEL_20;
  }
LABEL_21:
  v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 16))(*((_QWORD *)this + 15));
  I32IntegerAttr = mlir::Builder::getI32IntegerAttr(*(mlir::Builder **)(*((_QWORD *)this + 15) + 8), *((_DWORD *)this + 32));
  mlir::Operation::setAttr((uint64_t)v2, v20, I32IntegerAttr);
}

void std::deque<mlir::Operation *>::__add_front_capacity(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  void *v43;

  v2 = *(char **)(a1 + 8);
  v3 = *(char **)(a1 + 16);
  if (v3 == v2)
    v4 = 0;
  else
    v4 = ((v3 - v2) << 6) - 1;
  v5 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v4 - (*(_QWORD *)(a1 + 40) + v5)) >= 0x200)
  {
    *(_QWORD *)(a1 + 32) = v5 + 512;
    v43 = (void *)*((_QWORD *)v3 - 1);
    *(_QWORD *)(a1 + 16) = v3 - 8;
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v43);
    return;
  }
  v6 = *(char **)(a1 + 24);
  v7 = *(char **)a1;
  v8 = (uint64_t)&v6[-*(_QWORD *)a1];
  if (v3 - v2 >= (unint64_t)v8)
  {
    if (v6 == v7)
      v9 = 1;
    else
      v9 = v8 >> 2;
    if (v9 >> 61)
LABEL_52:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = (char *)operator new(8 * v9);
    v11 = operator new(0x1000uLL);
    if (v9)
    {
      v12 = &v10[8 * v9];
    }
    else
    {
      v14 = (char *)operator new(8uLL);
      v12 = v14 + 8;
      operator delete(v10);
      v2 = *(char **)(a1 + 8);
      v3 = *(char **)(a1 + 16);
      v10 = v14;
    }
    *(_QWORD *)v10 = v11;
    v15 = v10 + 8;
    v16 = v10;
    if (v2 == v3)
    {
      v17 = v10;
      v18 = v10 + 8;
LABEL_22:
      v19 = *(void **)a1;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = v18;
      *(_QWORD *)(a1 + 24) = v12;
      if (v18 - v17 == 8)
      {
        *(_QWORD *)(a1 + 32) = 256;
        if (!v19)
          return;
      }
      else
      {
        *(_QWORD *)(a1 + 32) += 512;
        if (!v19)
          return;
      }
      operator delete(v19);
      return;
    }
    while (1)
    {
      if (v15 == v12)
      {
        if (v10 <= v16)
        {
          v27 = (v15 - v16) >> 2;
          if (v15 == v16)
            v27 = 1;
          if (v27 >> 61)
            goto LABEL_52;
          v28 = v27 >> 2;
          v29 = 8 * v27;
          v30 = (char *)operator new(8 * v27);
          v31 = v30;
          v17 = &v30[8 * v28];
          v20 = v17;
          v32 = v15 - v10;
          if (v15 != v10)
          {
            v20 = &v17[v32 & 0xFFFFFFFFFFFFFFF8];
            v33 = v32 - 8;
            if (v33 < 0x38 || (unint64_t)(&v30[8 * v28] - v10) < 0x20)
            {
              v34 = &v30[8 * v28];
              v35 = v10;
              goto LABEL_42;
            }
            v37 = (v33 >> 3) + 1;
            v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
            v34 = &v17[v38];
            v35 = &v10[v38];
            v39 = (__int128 *)(v10 + 16);
            v40 = &v30[8 * v28 + 16];
            v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v42 = *v39;
              *((_OWORD *)v40 - 1) = *(v39 - 1);
              *(_OWORD *)v40 = v42;
              v39 += 2;
              v40 += 32;
              v41 -= 4;
            }
            while (v41);
            if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_42:
                v36 = *(_QWORD *)v35;
                v35 += 8;
                *(_QWORD *)v34 = v36;
                v34 += 8;
              }
              while (v34 != v20);
            }
          }
          v15 = &v30[v29];
          if (v16)
            operator delete(v16);
          v16 = v31;
          goto LABEL_26;
        }
        v22 = (v10 - v16) >> 3;
        if (v22 >= -1)
          v23 = v22 + 1;
        else
          v23 = v22 + 2;
        v24 = v23 >> 1;
        v25 = &v10[-8 * (v23 >> 1)];
        v26 = v15;
        if (v15 != v10)
        {
          memmove(v25, v10, v15 - v10);
          v26 = v10;
        }
        v20 = &v25[v15 - v10];
        v17 = &v26[-8 * v24];
      }
      else
      {
        v17 = v10;
        v20 = v15;
        v15 = v12;
      }
LABEL_26:
      v12 = v15;
      v21 = *(_QWORD *)v2;
      v2 += 8;
      *(_QWORD *)v20 = v21;
      v18 = v20 + 8;
      v15 = v18;
      v10 = v17;
      if (v2 == *(char **)(a1 + 16))
        goto LABEL_22;
    }
  }
  if (v2 == v7)
  {
    v43 = operator new(0x1000uLL);
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v43);
    v13 = *(_QWORD *)(a1 + 16);
    v43 = *(void **)(v13 - 8);
    *(_QWORD *)(a1 + 16) = v13 - 8;
  }
  else
  {
    v43 = operator new(0x1000uLL);
  }
  std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v43);
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
    *(_QWORD *)(a1 + 32) = 256;
  else
    *(_QWORD *)(a1 + 32) += 512;
}

void std::__for_each_segment[abi:nn180100]<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::back_insert_iterator<llvm::SmallVector<mlir::Operation *,6u>>>>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v7 = a2;
  v8 = *a5;
  if (a1 == a3)
  {
    if (a2 != a4)
    {
      v22 = *(_DWORD *)(v8 + 8);
      do
      {
        v23 = *v7;
        if (v22 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v22 + 1, 8);
          v22 = *(_DWORD *)(v8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v22) = v23;
        v22 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v22;
        ++v7;
      }
      while (v7 != a4);
    }
  }
  else
  {
    v11 = (uint64_t)(*a1 + 512);
    if ((uint64_t *)v11 != a2)
    {
      v12 = *(_DWORD *)(v8 + 8);
      do
      {
        v13 = *v7;
        if (v12 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v12 + 1, 8);
          v12 = *(_DWORD *)(v8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v12) = v13;
        v12 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v12;
        ++v7;
      }
      while (v7 != (uint64_t *)v11);
    }
    *a5 = v8;
    for (i = (uint64_t *)(a1 + 1); i != (uint64_t *)a3; ++i)
    {
      v15 = 0;
      v16 = *i;
      v17 = *(_DWORD *)(v8 + 8);
      do
      {
        v18 = *(_QWORD *)(v16 + v15);
        if (v17 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v17 + 1, 8);
          v17 = *(_DWORD *)(v8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v17) = v18;
        v17 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v17;
        v15 += 8;
      }
      while (v15 != 4096);
      *a5 = v8;
    }
    v19 = *a3;
    if (*a3 != a4)
    {
      v20 = *(_DWORD *)(v8 + 8);
      do
      {
        v21 = *v19;
        if (v20 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v20 + 1, 8);
          v20 = *(_DWORD *)(v8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v20) = v21;
        v20 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v20;
        ++v19;
      }
      while (v19 != a4);
    }
  }
  *a5 = v8;
}

uint64_t mlir::emitOptionalWarning<char const(&)[37],llvm::StringRef &>(uint64_t a1, char a2, char *a3, const void ***a4)
{
  const void **v6;
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t v11;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitWarning(a1, (uint64_t)&v11);
  if (v11)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, a3);
    v10 = 261;
    v6 = a4[1];
    v9[0] = *a4;
    v9[1] = v6;
    mlir::Diagnostic::operator<<((uint64_t)v12, v9);
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mlir::Block **v17;
  mlir::Operation *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  mlir::Block **v22;
  mlir::Operation *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  mlir::Block **v27;
  mlir::Operation *v28;
  uint64_t v29;
  mlir::Block **v30;
  mlir::Operation *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  mlir::Block **v36;
  mlir::Operation *v37;
  uint64_t v38;
  mlir::Block **v39;
  mlir::Operation *v40;
  uint64_t *v41;
  BOOL v42;
  uint64_t v43;
  mlir::Block **v44;
  mlir::Operation *v45;
  uint64_t v46;
  mlir::Block **v47;
  mlir::Operation *v48;
  uint64_t *v49;
  mlir::Block **v50;
  mlir::Operation *v51;
  uint64_t *v52;
  uint64_t v53;
  mlir::Block **v54;
  mlir::Operation *v55;
  uint64_t v56;
  uint64_t v57;
  mlir::Block **v58;
  mlir::Operation *v59;
  uint64_t v60;
  mlir::Block **v61;
  mlir::Operation *v62;
  uint64_t *v63;
  uint64_t v64;
  mlir::Block **DefiningOp;
  mlir::Operation *v66;
  uint64_t v67;
  uint64_t *v68;
  BOOL v69;
  char v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  mlir::Block **v76;
  mlir::Operation *v77;
  uint64_t v78;
  uint64_t v79;
  mlir::Block **v80;
  mlir::Operation *v81;
  int64_t v82;
  int64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  mlir::Block **v87;
  mlir::Operation *v88;
  _BOOL4 v89;
  uint64_t *v90;
  uint64_t v91;
  mlir::Block **v92;
  mlir::Operation *v93;
  uint64_t v94;
  uint64_t v95;
  mlir::Block **v96;
  mlir::Operation *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  mlir::Block **v101;
  mlir::Operation *v102;
  uint64_t v103;
  uint64_t *v104;
  BOOL v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  mlir::Block **v112;
  mlir::Operation *v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  mlir::Block **v119;
  mlir::Operation *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  mlir::Block **v124;
  mlir::Operation *v125;
  uint64_t v126;
  uint64_t v127;
  mlir::Block **v128;
  mlir::Operation *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  mlir::Block **v134;
  mlir::Operation *v135;
  uint64_t *v136;
  int64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v138 = a2;
  v139 = a2 - 2;
  v136 = a2 - 3;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v64 = *(a2 - 1);
        v142 = *v7;
        v143 = v64;
        DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
        v66 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
        result = mlir::Operation::isBeforeInBlock(DefiningOp, v66);
        if ((_DWORD)result)
        {
          v67 = *v7;
          *v7 = *(a2 - 1);
          *(a2 - 1) = v67;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v7, v7 + 1, v8);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v7, v7 + 1, v7 + 2, v8);
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,0>(v7, v7 + 1, v7 + 2, v7 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v68 = v7 + 1;
          v69 = v7 == a2 || v68 == a2;
          v70 = v69;
          if ((a4 & 1) != 0)
          {
            if ((v70 & 1) == 0)
            {
              v71 = 0;
              v72 = v7;
              do
              {
                v75 = *v72;
                v74 = v72[1];
                v72 = v68;
                v142 = v75;
                v143 = v74;
                v76 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                v77 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                result = mlir::Operation::isBeforeInBlock(v76, v77);
                if ((_DWORD)result)
                {
                  v78 = *v72;
                  v79 = v71;
                  do
                  {
                    *(uint64_t *)((char *)v7 + v79 + 8) = *(uint64_t *)((char *)v7 + v79);
                    if (!v79)
                    {
                      v73 = v7;
                      goto LABEL_69;
                    }
                    v142 = *(uint64_t *)((char *)v7 + v79 - 8);
                    v143 = v78;
                    v80 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                    v81 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                    result = mlir::Operation::isBeforeInBlock(v80, v81);
                    v79 -= 8;
                  }
                  while ((result & 1) != 0);
                  v73 = (uint64_t *)((char *)v7 + v79 + 8);
LABEL_69:
                  *v73 = v78;
                  a2 = v138;
                }
                v68 = v72 + 1;
                v71 += 8;
              }
              while (v72 + 1 != a2);
            }
          }
          else if ((v70 & 1) == 0)
          {
            do
            {
              v127 = *v7;
              v126 = v7[1];
              v7 = v68;
              v142 = v127;
              v143 = v126;
              v128 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v129 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
              result = mlir::Operation::isBeforeInBlock(v128, v129);
              if ((_DWORD)result)
              {
                v130 = *v7;
                v131 = v7;
                do
                {
                  v132 = v131;
                  v133 = *--v131;
                  *v132 = v133;
                  v142 = *(v132 - 2);
                  v143 = v130;
                  v134 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                  v135 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                  result = mlir::Operation::isBeforeInBlock(v134, v135);
                }
                while ((result & 1) != 0);
                *v131 = v130;
              }
              v68 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v82 = (unint64_t)(v11 - 2) >> 1;
            v140 = v82;
            do
            {
              v83 = v82;
              if (v140 >= v82)
              {
                v84 = (2 * v82) | 1;
                v85 = &v7[v84];
                if (2 * v82 + 2 < v11)
                {
                  v86 = *v85;
                  v142 = v85[1];
                  v143 = v86;
                  v87 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                  v88 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                  v89 = mlir::Operation::isBeforeInBlock(v87, v88);
                  if (v89)
                    ++v85;
                  a2 = v138;
                  if (v89)
                    v84 = 2 * v83 + 2;
                }
                v90 = &v7[v83];
                v91 = *v85;
                v142 = *v90;
                v143 = v91;
                v92 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                v93 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                result = mlir::Operation::isBeforeInBlock(v92, v93);
                if ((result & 1) == 0)
                {
                  v137 = v83;
                  v94 = *v90;
                  do
                  {
                    v98 = v85;
                    *v90 = *v85;
                    if (v140 < v84)
                      break;
                    v99 = (2 * v84) | 1;
                    v85 = &v7[v99];
                    if (2 * v84 + 2 < v11)
                    {
                      v100 = *v85;
                      v142 = v85[1];
                      v143 = v100;
                      v101 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                      v102 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                      if (mlir::Operation::isBeforeInBlock(v101, v102))
                      {
                        ++v85;
                        v99 = 2 * v84 + 2;
                      }
                    }
                    v95 = *v85;
                    v142 = v94;
                    v143 = v95;
                    v96 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                    v97 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                    result = mlir::Operation::isBeforeInBlock(v96, v97);
                    v90 = v98;
                    v84 = v99;
                  }
                  while (!(_DWORD)result);
                  *v98 = v94;
                  v83 = v137;
                  a2 = v138;
                }
              }
              v82 = v83 - 1;
            }
            while (v83);
            v103 = (unint64_t)v10 >> 3;
            do
            {
              v106 = 0;
              v141 = *v7;
              v107 = v7;
              do
              {
                v108 = &v107[v106 + 1];
                v109 = (2 * v106) | 1;
                v110 = 2 * v106 + 2;
                if (v110 < v103)
                {
                  v111 = *v108;
                  v142 = v108[1];
                  v143 = v111;
                  v112 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                  v113 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                  result = mlir::Operation::isBeforeInBlock(v112, v113);
                  if ((_DWORD)result)
                  {
                    ++v108;
                    v109 = v110;
                  }
                }
                *v107 = *v108;
                v107 = v108;
                v106 = v109;
              }
              while (v109 <= (uint64_t)((unint64_t)(v103 - 2) >> 1));
              v114 = a2 - 1;
              if (v108 == a2 - 1)
              {
                v104 = a2 - 1;
                *v108 = v141;
              }
              else
              {
                *v108 = *v114;
                v104 = a2 - 1;
                *v114 = v141;
                v115 = (char *)v108 - (char *)v7 + 8;
                if (v115 >= 9)
                {
                  v116 = (((unint64_t)v115 >> 3) - 2) >> 1;
                  v117 = &v7[v116];
                  v118 = *v117;
                  v142 = *v108;
                  v143 = v118;
                  v119 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                  v120 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                  result = mlir::Operation::isBeforeInBlock(v119, v120);
                  if ((_DWORD)result)
                  {
                    v121 = *v108;
                    do
                    {
                      v122 = v117;
                      *v108 = *v117;
                      if (!v116)
                        break;
                      v116 = (v116 - 1) >> 1;
                      v117 = &v7[v116];
                      v123 = *v117;
                      v142 = v121;
                      v143 = v123;
                      v124 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                      v125 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                      result = mlir::Operation::isBeforeInBlock(v124, v125);
                      v108 = v122;
                    }
                    while ((result & 1) != 0);
                    *v122 = v121;
                  }
                }
              }
              v105 = v103-- <= 2;
              a2 = v104;
            }
            while (!v105);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v7[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v13, v7, v8);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v7, v13, v8);
          v14 = v12;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v7 + 1, &v7[v14 - 1], v139);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v7 + 2, &v7[v14 + 1], v136);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(&v7[v14 - 1], v13, &v7[v14 + 1]);
          v15 = *v7;
          *v7 = v7[v14];
          v7[v14] = v15;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        v16 = *(v7 - 1);
        v142 = *v7;
        v143 = v16;
        v17 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
        v18 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
        if (!mlir::Operation::isBeforeInBlock(v17, v18))
        {
          v43 = *v7;
          v142 = *v8;
          v143 = v43;
          v44 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
          v45 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          result = mlir::Operation::isBeforeInBlock(v44, v45);
          if ((result & 1) != 0)
          {
            v9 = v7;
            do
            {
              v46 = v9[1];
              ++v9;
              v142 = v46;
              v143 = v43;
              v47 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v48 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
              result = mlir::Operation::isBeforeInBlock(v47, v48);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v49 = v7 + 1;
            do
            {
              v9 = v49;
              if (v49 >= a2)
                break;
              ++v49;
              v142 = *v9;
              v143 = v43;
              v50 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v51 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
              result = mlir::Operation::isBeforeInBlock(v50, v51);
            }
            while (!(_DWORD)result);
          }
          v52 = a2;
          if (v9 < a2)
          {
            v52 = a2;
            do
            {
              v53 = *--v52;
              v142 = v53;
              v143 = v43;
              v54 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v55 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
              result = mlir::Operation::isBeforeInBlock(v54, v55);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v52)
          {
            v56 = *v9;
            *v9 = *v52;
            *v52 = v56;
            do
            {
              v57 = v9[1];
              ++v9;
              v142 = v57;
              v143 = v43;
              v58 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v59 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
            }
            while (!mlir::Operation::isBeforeInBlock(v58, v59));
            do
            {
              v60 = *--v52;
              v142 = v60;
              v143 = v43;
              v61 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v62 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
              result = mlir::Operation::isBeforeInBlock(v61, v62);
            }
            while ((result & 1) != 0);
          }
          v63 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v63;
          a4 = 0;
          *v63 = v43;
          continue;
        }
LABEL_11:
        v19 = 0;
        v20 = *v7;
        do
        {
          v21 = v7[v19 + 1];
          v142 = v20;
          v143 = v21;
          v22 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
          v23 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          ++v19;
        }
        while (mlir::Operation::isBeforeInBlock(v22, v23));
        v24 = &v7[v19];
        v25 = v138;
        v69 = v19 == 1;
        a2 = v138;
        if (v69)
        {
          v25 = v138;
          do
          {
            if (v24 >= v25)
              break;
            v29 = *--v25;
            v142 = v20;
            v143 = v29;
            v30 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
            v31 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          }
          while (!mlir::Operation::isBeforeInBlock(v30, v31));
        }
        else
        {
          do
          {
            v26 = *--v25;
            v142 = v20;
            v143 = v26;
            v27 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
            v28 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          }
          while (!mlir::Operation::isBeforeInBlock(v27, v28));
        }
        if (v24 >= v25)
        {
          v41 = v24 - 1;
          if (v24 - 1 == v7)
            goto LABEL_29;
LABEL_28:
          *v7 = *v41;
          goto LABEL_29;
        }
        v32 = v24;
        v33 = v25;
        do
        {
          v34 = *v32;
          *v32 = *v33;
          *v33 = v34;
          do
          {
            v35 = v32[1];
            ++v32;
            v142 = v20;
            v143 = v35;
            v36 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
            v37 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          }
          while (mlir::Operation::isBeforeInBlock(v36, v37));
          do
          {
            v38 = *--v33;
            v142 = v20;
            v143 = v38;
            v39 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
            v40 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          }
          while (!mlir::Operation::isBeforeInBlock(v39, v40));
        }
        while (v32 < v33);
        v41 = v32 - 1;
        a2 = v138;
        if (v41 != v7)
          goto LABEL_28;
LABEL_29:
        *v41 = v20;
        if (v24 < v25)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,false>(v7, v41, a3, a4 & 1);
          a4 = 0;
          v9 = v41 + 1;
          continue;
        }
        v42 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v7, v41);
        v9 = v41 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v41 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v42)
            continue;
          goto LABEL_32;
        }
        a2 = v41;
        if (!v42)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  mlir::Block **DefiningOp;
  mlir::Operation *v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  mlir::Block **v16;
  mlir::Operation *v17;
  uint64_t v18;
  uint64_t v19;
  mlir::Block **v20;
  mlir::Operation *v21;
  uint64_t v22;
  uint64_t v23;
  mlir::Block **v24;
  mlir::Operation *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a2, a3, a4);
  v10 = *a5;
  v27 = *a4;
  v28 = v10;
  DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
  v12 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
  result = mlir::Operation::isBeforeInBlock(DefiningOp, v12);
  if (result)
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    v15 = *a4;
    v27 = *a3;
    v28 = v15;
    v16 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
    v17 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
    result = mlir::Operation::isBeforeInBlock(v16, v17);
    if (result)
    {
      v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      v19 = *a3;
      v27 = *a2;
      v28 = v19;
      v20 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
      v21 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
      result = mlir::Operation::isBeforeInBlock(v20, v21);
      if (result)
      {
        v22 = *a2;
        *a2 = *a3;
        *a3 = v22;
        v23 = *a2;
        v27 = *a1;
        v28 = v23;
        v24 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
        v25 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
        result = mlir::Operation::isBeforeInBlock(v24, v25);
        if (result)
        {
          v26 = *a1;
          *a1 = *a2;
          *a2 = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  mlir::Block **DefiningOp;
  mlir::Operation *v8;
  BOOL v9;
  uint64_t v10;
  mlir::Block **v11;
  mlir::Operation *v12;
  _BOOL8 result;
  uint64_t v14;
  mlir::Block **v15;
  mlir::Operation *v16;
  uint64_t v17;
  uint64_t v18;
  mlir::Block **v19;
  mlir::Operation *v20;
  uint64_t v21;
  uint64_t v22;
  mlir::Block **v23;
  mlir::Operation *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a2;
  v25 = *a1;
  v26 = v6;
  DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
  v8 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
  v9 = mlir::Operation::isBeforeInBlock(DefiningOp, v8);
  v10 = *a3;
  if (v9)
  {
    v25 = *a2;
    v26 = v10;
    v11 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
    v12 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
    result = mlir::Operation::isBeforeInBlock(v11, v12);
    v14 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v14;
      v22 = *a3;
      v25 = v14;
      v26 = v22;
      v23 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
      v24 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
      result = mlir::Operation::isBeforeInBlock(v23, v24);
      if (!result)
        return result;
      v14 = *a2;
      *a2 = *a3;
    }
    *a3 = v14;
  }
  else
  {
    v25 = *a2;
    v26 = v10;
    v15 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
    v16 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
    result = mlir::Operation::isBeforeInBlock(v15, v16);
    if (result)
    {
      v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      v18 = *a2;
      v25 = *a1;
      v26 = v18;
      v19 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
      v20 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
      result = mlir::Operation::isBeforeInBlock(v19, v20);
      if (result)
      {
        v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  mlir::Block **DefiningOp;
  mlir::Operation *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  mlir::Block **v16;
  mlir::Operation *v17;
  uint64_t v18;
  uint64_t v19;
  mlir::Block **v20;
  mlir::Operation *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v22 = *a1;
      v23 = v6;
      DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
      v8 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
      if (mlir::Operation::isBeforeInBlock(DefiningOp, v8))
      {
        v9 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v22 = *v10;
    v23 = v15;
    v16 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
    v17 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
    if (mlir::Operation::isBeforeInBlock(v16, v17))
    {
      v18 = *v11;
      v19 = v12;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v14 = a1;
          goto LABEL_7;
        }
        v22 = *(uint64_t *)((char *)a1 + v19 + 8);
        v23 = v18;
        v20 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
        v21 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
        v19 -= 8;
      }
      while (mlir::Operation::isBeforeInBlock(v20, v21));
      v14 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_7:
      *v14 = v18;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  mlir::Block **DefiningOp;
  mlir::Operation *v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  mlir::Block **v14;
  mlir::Operation *v15;
  uint64_t v16;
  uint64_t v17;
  mlir::Block **v18;
  mlir::Operation *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a2, a3);
  v8 = *a4;
  v21 = *a3;
  v22 = v8;
  DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
  v10 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
  result = mlir::Operation::isBeforeInBlock(DefiningOp, v10);
  if (result)
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    v13 = *a3;
    v21 = *a2;
    v22 = v13;
    v14 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
    v15 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
    result = mlir::Operation::isBeforeInBlock(v14, v15);
    if (result)
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *a2;
      v21 = *a1;
      v22 = v17;
      v18 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
      v19 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
      result = mlir::Operation::isBeforeInBlock(v18, v19);
      if (result)
      {
        v20 = *a1;
        *a1 = *a2;
        *a2 = v20;
      }
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_7>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_8>(_BYTE **a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  v4 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4) & 1) != 0)
    return 1;
  v5 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v5) & 1) != 0)
    return 1;
  v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v6) & 1) != 0)
    return 1;
  result = 0;
  **a1 = 0;
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_9>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

mlir::Block *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_10>(uint64_t a1, uint64_t a2)
{
  void *v4;
  mlir::Block *result;

  v4 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  result = (mlir::Block *)(*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4);
  if ((result & 1) == 0)
  {
    result = mlir::collect_regions::detail::verifyShouldAddToQueue(**(mlir::Block ***)a1, *(_QWORD *)(*(_QWORD *)a1 + 8), **(_QWORD **)(a1 + 8), a2, 0);
    if ((_BYTE)result)
      **(_BYTE **)(a1 + 16) = 1;
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_11>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__0NS1_9placement12HostTypeCastEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t **a1, mlir::GenericProgramPoint *this)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Input;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  mlir::Operation *v24;
  mlir::Operation *DefiningOp;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  mlir::Operation *v29;
  uint64_t v30;
  uint64_t v31[2];

  if (this
    && *(_UNKNOWN **)(*((_QWORD *)this + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
  {
    v3 = *a1;
    v29 = this;
    v4 = *v3;
    v5 = *v3 + 16;
    v28 = *(_OWORD *)v5;
    v6 = *((_QWORD *)this + 2);
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
    *(_QWORD *)v5 = v6;
    *(_QWORD *)(v4 + 24) = v7;
    v8 = *(_QWORD *)v3[1];
    v9 = *((_QWORD *)this + 3);
    Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v29);
    v11 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v29) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v11)
      goto LABEL_12;
    v12 = *v11;
    v13 = mlir::TypeID::get<mlir::ShapedType>();
    v14 = *(unsigned int *)(v12 + 16);
    if (!(_DWORD)v14)
      goto LABEL_12;
    v15 = *(_QWORD **)(v12 + 8);
    v16 = &v15[2 * v14];
    do
    {
      v17 = v14 >> 1;
      v18 = &v15[2 * (v14 >> 1)];
      v20 = *v18;
      v19 = v18 + 2;
      v14 += ~(v14 >> 1);
      if (v20 < v13)
        v15 = v19;
      else
        v14 = v17;
    }
    while (v14);
    if (v15 != v16 && *v15 == v13)
      v21 = v15[1];
    else
LABEL_12:
      v21 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 136))(v8, v9, Input, v11, v21, v3[2]);
    v22 = v3[2];
    v23 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v29);
    v30 = v23;
    v31[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v22, (unint64_t *)&v30, v31)&& v31[0] != *(_QWORD *)v22 + 16 * *(unsigned int *)(v22 + 16))
    {
      v23 = *(_QWORD *)(v31[0] + 8);
    }
    v30 = v23;
    v24 = v29;
    DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v30);
    v26 = *((unsigned int *)v24 + 9);
    v27 = (uint64_t)v24 - 16;
    if (!(_DWORD)v26)
      v27 = 0;
    v31[0] = v27;
    v31[1] = v26;
    mlir::ResultRange::replaceAllUsesWith(v31, DefiningOp);
    mlir::Operation::erase(v29);
    if (v4)
    {
      if ((_QWORD)v28)
      {
        *(_OWORD *)v5 = v28;
      }
      else
      {
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
      }
    }
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__1NS1_24TargetLegalizerInterfaceES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESO_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *InterfaceFor;
  uint64_t v5;
  uint64_t ArgOperands;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int **v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t NextResultAtOffset;
  uint64_t v38;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *__p;
  char *v56;
  char v57;
  mlir::Operation *v58[2];
  _QWORD v59[3];
  const void **v60;
  __int16 v61;
  uint64_t v62;
  _QWORD v63[2];
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD v67[21];

  v67[19] = *MEMORY[0x1E0C80C00];
  if (!mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2)
    || !a2)
  {
    return 1;
  }
  InterfaceFor = (mlir::Operation *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  v5 = *a1;
  v58[0] = a2;
  v58[1] = InterfaceFor;
  mlir::SymbolTable::getSymbolUses(a2, **(mlir::Operation ***)v5, (uint64_t)&__p);
  if (!v57)
  {
    v17 = "Operation has no symbol table uses";
    goto LABEL_59;
  }
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v58);
  *(_DWORD *)(*(_QWORD *)(v5 + 8) + 8) = 0;
  if (!v57)
  {
    v50 = (unint64_t *)std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_82;
  }
  v7 = ArgOperands;
  v8 = (char *)__p;
  v9 = v56;
  if (__p != v56)
  {
    do
    {
      v10 = *(_QWORD *)v8;
      if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)v8 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ReplacedOps,void>::id)
      {
        v11 = *(_QWORD *)(v5 + 8);
        v12 = *(unsigned int *)(v11 + 8);
        if (v12 >= *(unsigned int *)(v11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(v5 + 8), (void *)(v11 + 16), v12 + 1, 8);
          v12 = *(unsigned int *)(v11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
        ++*(_DWORD *)(v11 + 8);
      }
      v8 += 16;
    }
    while (v8 != v9);
  }
  v13 = *(_QWORD *)(v5 + 16);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 || *(_DWORD *)(v13 + 12))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if (v15 > 4 * v14 && v15 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear(v13);
      goto LABEL_31;
    }
    if (!(_DWORD)v15)
      goto LABEL_30;
    v18 = *(_QWORD **)v13;
    v19 = (v15 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v19)
    {
      v20 = v19 + 1;
      v21 = (v19 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v22 = &v18[2 * v21];
      v23 = v18 + 2;
      v24 = v21;
      do
      {
        *(v23 - 2) = -4096;
        *v23 = -4096;
        v23 += 4;
        v24 -= 2;
      }
      while (v24);
      if (v20 == v21)
        goto LABEL_30;
    }
    else
    {
      v22 = *(_QWORD **)v13;
    }
    v25 = &v18[2 * v15];
    do
    {
      *v22 = -4096;
      v22 += 2;
    }
    while (v22 != v25);
LABEL_30:
    *(_QWORD *)(v13 + 8) = 0;
  }
LABEL_31:
  v26 = mlir::TargetLegalizerInterface::legalizeBody((uint64_t)v58, **(_QWORD **)(v5 + 8), *(unsigned int *)(*(_QWORD *)(v5 + 8) + 8), **(_QWORD **)(v5 + 24), *(_QWORD *)(v5 + 16));
  if (!v26)
  {
    v17 = "Legalization failed";
LABEL_59:
    v60 = (const void **)v17;
    v61 = 259;
    mlir::OpState::emitOpError((uint64_t **)v58, &v60, (uint64_t)&v62);
    if (v62)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
    goto LABEL_70;
  }
  v27 = v26;
  mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v58);
  v28 = *(_QWORD *)(v5 + 8);
  v29 = *(unsigned int *)(v28 + 8);
  if ((_DWORD)v29)
  {
    v30 = *(unsigned int ***)v28;
    v31 = *(_QWORD *)v28 + 8 * v29;
    v53 = v31;
    v54 = v7;
    while (1)
    {
      v32 = *v30;
      *(_DWORD *)(*(_QWORD *)(v5 + 32) + 8) = 0;
      v33 = v32[9];
      v34 = (_DWORD)v33 ? (uint64_t)(v32 - 4) : 0;
      if ((_DWORD)v33)
        break;
LABEL_34:
      if (++v30 == (unsigned int **)v31)
        goto LABEL_74;
    }
    v35 = 0;
    v36 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, v36);
      v38 = *(_QWORD *)(v5 + 16);
      v60 = (const void **)NextResultAtOffset;
      v62 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v38, (unint64_t *)&v60, &v62)|| v62 == *(_QWORD *)v38 + 16 * *(unsigned int *)(v38 + 16))
      {
        break;
      }
      v40 = *(uint64_t **)(v62 + 8);
      if (!v40)
        break;
      if (v40 != (uint64_t *)NextResultAtOffset)
      {
        while (1)
        {
          v41 = *(uint64_t **)NextResultAtOffset;
          if (!*(_QWORD *)NextResultAtOffset)
            break;
          v42 = (uint64_t *)v41[1];
          if (v42)
          {
            *v42 = *v41;
            if (*v41)
              *(_QWORD *)(*v41 + 8) = v41[1];
          }
          v41[3] = (uint64_t)v40;
          v41[1] = (uint64_t)v40;
          v43 = *v40;
          *v41 = *v40;
          if (v43)
            *(_QWORD *)(v43 + 8) = v41;
          *v40 = (uint64_t)v41;
        }
        v35 = 1;
      }
      if (++v36 == v33)
      {
        v31 = v53;
        v7 = v54;
        if ((v35 & 1) != 0)
          mlir::Operation::erase((mlir::Operation *)v32);
        goto LABEL_34;
      }
    }
    v60 = (const void **)"Result has no mapping in the valueMap (result #";
    v61 = 259;
    mlir::Operation::emitOpError((uint64_t *)v32, &v60, (uint64_t)&v62);
    v44 = *(_QWORD *)(NextResultAtOffset + 8) & 7;
    if (NextResultAtOffset && v44 == 6)
      v44 = (*(_DWORD *)(NextResultAtOffset + 16) + 6);
    if (!v62)
    {
LABEL_70:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v63);
      v16 = 0;
      if (!v57)
        return v16;
      goto LABEL_71;
    }
    LODWORD(v59[0]) = 5;
    v59[1] = v44;
    v45 = (char *)v59;
    v46 = v64;
    if (v65 < v66)
      goto LABEL_67;
    v50 = &v64;
    v51 = v65 + 1;
    if (v64 > (unint64_t)v59 || v64 + 24 * v65 <= (unint64_t)v59)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
      v45 = (char *)v59;
      v46 = v64;
      goto LABEL_67;
    }
LABEL_82:
    v52 = (char *)v59 - v46;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v50, v67, v51, 24);
    v46 = v64;
    v45 = &v52[v64];
LABEL_67:
    v47 = v46 + 24 * v65;
    v48 = *(_OWORD *)v45;
    *(_QWORD *)(v47 + 16) = *((_QWORD *)v45 + 2);
    *(_OWORD *)v47 = v48;
    ++v65;
    if (v62)
    {
      mlir::Diagnostic::operator<<((uint64_t)v63, ")");
      if (v62)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
    }
    goto LABEL_70;
  }
LABEL_74:
  if (v27 != v7)
    mlir::Operation::cloneWithoutRegions(v58[0]);
  v16 = 1;
  if (v57)
  {
LABEL_71:
    if (__p)
    {
      v56 = (char *)__p;
      operator delete(__p);
    }
  }
  return v16;
}

mlir::GenericProgramPoint *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::legalizeRegions(mlir::ModuleOp,mlir::RegionOpCreator *)::$_1::operator() const(mlir::TargetLegalizerInterface)::{lambda(mlir::Operation *)#1}>(uint64_t a1, mlir::Operation *a2)
{
  mlir::GenericProgramPoint *result;

  result = (mlir::GenericProgramPoint *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  if (!result)
    return mlir::OpBuilder::clone(*(uint64_t ***)a1, a2, *(mlir::IRMapping **)(a1 + 8));
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_11computeCostENS1_8ModuleOpERKNS1_10DeviceInfoERNS1_18InFlightDiagnosticEE3__0NS1_24ExecutionCostOpInterfaceEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESQ_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t InterfaceFor;
  uint64_t v6;
  float v7;
  _QWORD v8[2];

  result = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  if (result)
  {
    if (a2)
    {
      InterfaceFor = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
      v6 = *a1;
      v8[0] = a2;
      v8[1] = InterfaceFor;
      result = mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v8, *(_QWORD *)v6);
      **(float **)(v6 + 8) = v7 + **(float **)(v6 + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v21 = *(_QWORD *)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v21);
    if (result)
    {
      v19 = result;
      v20 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, v20, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    v7 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_14;
    v9 = *(_QWORD **)(v6 + 32);
    v10 = &v9[2 * v8];
    do
    {
      v11 = v8 >> 1;
      v12 = &v9[2 * (v8 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7)
        v9 = v13;
      else
        v8 = v11;
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (result = v9[1]) == 0)
    {
LABEL_14:
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, v18, v17);
    }
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_14collectRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEPKNS1_15CostModelParamsEE3__0NS1_4func6FuncOpES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESS_E4typeES4_OT1_EUlS4_E_EES2_lS4_(_QWORD ****a1, mlir::GenericProgramPoint *a2)
{
  uint64_t result;
  _QWORD ***v5;
  mlir::GenericProgramPoint *InterfaceFor;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = 1;
  if (a2)
  {
    if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
    {
      v5 = *a1;
      InterfaceFor = (mlir::GenericProgramPoint *)mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
      v7 = **v5;
      v8 = 0;
      mlir::collectRegions(a2, InterfaceFor, v7);
    }
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_11doPlacementENS1_8ModuleOpExxxNS_8ArrayRefIPNS1_15DeviceInterfaceEEERKNS1_10DeviceInfoENSt3__18optionalIjEEbE3__1NS1_4func6FuncOpES2_EENSK_9enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESW_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
  {
    v3 = **a1;
    v4 = *(unsigned int *)(v3 + 8);
    if (v4 >= *(_DWORD *)(v3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(**a1, (void *)(v3 + 16), v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(v3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
    ++*(_DWORD *)(v3 + 8);
  }
  return 1;
}

uint64_t mlir::RegionOpCreator::getRegionCall(_QWORD *a1, uint64_t a2, mlir::Operation **a3, uint64_t a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  mlir::Operation *v12;
  mlir::Operation *DefiningOp;
  mlir::Block **v14;
  mlir::Operation *v15;
  _QWORD *v16;
  mlir::Operation *v17;
  uint64_t InterfaceFor;
  uint64_t **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  BOOL v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD *NextResultAtOffset;
  uint64_t v42;
  uint64_t v43;
  mlir::OpBuilder *v44;
  uint64_t Loc;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  std::string::__raw *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  std::string::size_type size;
  uint64_t v55;
  uint64_t v56;
  uint64_t InherentAttr;
  mlir::MLIRContext *v58;
  unsigned int v59;
  uint64_t UnitAttr;
  uint64_t v61;
  int v62;
  int v63;
  mlir::StringAttr **v64;
  _QWORD *AttrData;
  uint64_t v66;
  char v67;
  char v68;
  _QWORD **v69;
  uint64_t StringAttr;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t ArrayAttr;
  mlir::StringAttr *Context;
  uint64_t v77;
  mlir::Operation **v79;
  __int128 v82;
  std::string v87;
  _QWORD *v88;
  uint64_t v89;
  const char *v90;
  __int16 v91;
  _QWORD *v92;
  uint64_t v93;
  std::string *v94;
  char v95;
  char v96;
  std::string __p;
  uint64_t v98;
  std::string::size_type v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::string *p_p;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;

  v9 = a2;
  v10 = a1;
  v109 = *MEMORY[0x1E0C80C00];
  p_p = a5;
  v107 = 0;
  if (a6)
  {
    v79 = a3;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v88 = (_QWORD *)mlir::ValueRange::dereference_iterator(&p_p, v11);
      DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v88);
      v14 = (mlir::Block **)DefiningOp;
      if (v12 == 0 && DefiningOp != 0)
        v15 = DefiningOp;
      else
        v15 = v12;
      if ((v12 != 0 || DefiningOp == 0) && DefiningOp)
      {
        if (mlir::Operation::isBeforeInBlock((mlir::Block **)v12, DefiningOp))
          v15 = (mlir::Operation *)v14;
        else
          v15 = v12;
      }
      v16 = (_QWORD *)*v88;
      v12 = v15;
      if (*v88)
        break;
LABEL_12:
      v11 = ++v107;
      if (p_p == a5 && v11 == a6)
      {
        v9 = a2;
        v10 = a1;
        a3 = v79;
        if (v12)
          goto LABEL_39;
        goto LABEL_38;
      }
    }
    while (1)
    {
      v17 = (mlir::Operation *)v16[2];
      if (mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v17))
      {
        if (v17)
          InterfaceFor = mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v17);
        else
          InterfaceFor = 0;
        v92 = v17;
        v93 = InterfaceFor;
        if (v17)
        {
          v102 = &v104;
          v103 = 0x400000000;
          mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v92, (uint64_t)&v102);
          v19 = (uint64_t **)v102;
          if ((_DWORD)v103)
          {
            v20 = 40 * v103 - 40;
            do
            {
              v21 = *v19;
              v19 += 5;
              v22 = *v21;
              v24 = v22 == mlir::TypeID::get<mlir::MemoryEffects::Write>();
              v23 = v24;
              v24 = v24 || v20 == 0;
              v20 -= 40;
            }
            while (!v24);
            v19 = (uint64_t **)v102;
            if (v102 != &v104)
LABEL_30:
              free(v19);
          }
          else
          {
            v23 = 0;
            if (v102 != &v104)
              goto LABEL_30;
          }
          if (v23 && mlir::Operation::isBeforeInBlock(v14, v17))
            v12 = v17;
        }
      }
      else
      {
        v92 = 0;
        v93 = 0;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_12;
    }
  }
LABEL_38:
  v12 = *a3;
LABEL_39:
  v25 = v10[1];
  v26 = (_OWORD *)(v25 + 16);
  v82 = *(_OWORD *)(v25 + 16);
  v27 = *((_QWORD *)v12 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  v29 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v25 + 16) = v27;
  *(_QWORD *)(v25 + 24) = v29;
  v30 = *((_QWORD *)v12 + 3);
  v31 = v10;
  v32 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, std::string *, uint64_t))(*v10 + 152))(v10, v30, v9, a5, a6);
  v33 = v32;
  v34 = *(unsigned int *)(v32 + 36);
  if ((_DWORD)v34)
    v35 = (void *)(v32 - 16);
  else
    v35 = 0;
  v102 = v35;
  v103 = 0;
  v104 = a7;
  v105 = 0;
  if (!(_DWORD)v34)
  {
    v50 = "cutableConstantDataRequest initWithCoder:]";
LABEL_59:
    if ((_QWORD)v82)
    {
      *v26 = v82;
    }
    else
    {
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v25 + 24) = 0;
    }
    goto LABEL_62;
  }
  v36 = 0;
  v37 = 0;
  v38 = v35;
  do
  {
    if (v104 == a7 && v37 == a8)
      break;
    NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v38, v36);
    v42 = mlir::ValueRange::dereference_iterator(&v104, v105);
    v88 = NextResultAtOffset;
    if ((NextResultAtOffset[1] & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v43 = v42;
      v44 = (mlir::OpBuilder *)v31[1];
      Loc = mlir::Value::getLoc((mlir::Value *)&v88);
      p_p = (std::string *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)mlir::OpBuilder::create<mlir::placement::HostTypeCast,mlir::Type const&,mlir::Value &>(v44, Loc, (uint64_t *)&p_p, (uint64_t *)&v88);
      v46 = v88;
      v47 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&__p);
      v92 = v46;
      p_p = 0;
      v48 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a9, (unint64_t *)&v92, &p_p);
      v49 = (std::string::__raw *)p_p;
      if ((v48 & 1) == 0)
      {
        v49 = (std::string::__raw *)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a9, (uint64_t)&v92, (unint64_t *)&v92, p_p);
        v49->__words[0] = (std::string::size_type)v92;
        v49->__words[1] = 0;
      }
      v49->__words[1] = v47;
    }
    v38 = v102;
    v36 = v103 + 1;
    v37 = v105 + 1;
    ++v103;
    ++v105;
  }
  while (v102 != v35 || v36 != v34);
  v50 = "-[MPSGraphExecutableConstantDataRequest initWithCoder:]" + 13;
  if (v25)
    goto LABEL_59;
LABEL_62:
  v101 = 0;
  v102 = &v104;
  v103 = *((_QWORD *)v50 + 419);
  v100 = a7;
  if (a8)
  {
    v51 = 0;
    v52 = v31;
    while (1)
    {
      v92 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v100, v51);
      p_p = 0;
      v53 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a9, (unint64_t *)&v92, &p_p);
      size = 0;
      if (v53 && p_p != (std::string *)(*(_QWORD *)a9 + 16 * *(unsigned int *)(a9 + 16)))
        size = p_p->__r_.__value_.__l.__size_;
      v99 = size;
      v55 = mlir::Value::getDefiningOp((mlir::Value *)&v99);
      v56 = v55;
      if (*(_BYTE *)(v55 + 47)
        && (InherentAttr = mlir::Operation::getInherentAttr(v55, (uint64_t)"name", 4), (_BYTE)v58))
      {
        if (!InherentAttr)
          goto LABEL_74;
      }
      else
      {
        InherentAttr = mlir::DictionaryAttr::get(v56 + 56, "name", 4uLL);
        if (!InherentAttr)
        {
LABEL_74:
          UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)v52[1], v58);
          v61 = UnitAttr;
          v62 = v103;
          if (v103 >= HIDWORD(v103))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, v103 + 1, 8);
            *((_QWORD *)v102 + v103) = v61;
            v63 = v103 + 1;
          }
          else
          {
            *((_QWORD *)v102 + v103) = UnitAttr;
            v63 = v62 + 1;
          }
          LODWORD(v103) = v63;
          goto LABEL_91;
        }
      }
      if (v99 && (*(_QWORD *)(v99 + 8) & 7) == 6)
        v59 = *(_DWORD *)(v99 + 16) + 6;
      else
        v59 = *(_QWORD *)(v99 + 8) & 7;
      v98 = InherentAttr;
      v64 = (mlir::StringAttr **)v52[1];
      AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v98);
      v91 = 773;
      v88 = AttrData;
      v89 = v66;
      v90 = ":";
      std::to_string(&v87, v59);
      v67 = v91;
      if ((_BYTE)v91)
      {
        if (v91 == 1)
        {
          v92 = &v87;
          v68 = 1;
          v67 = 4;
        }
        else
        {
          if (HIBYTE(v91) != 1)
            v67 = 2;
          v69 = &v88;
          if (HIBYTE(v91) == 1)
            v69 = (_QWORD **)v88;
          v92 = v69;
          v93 = v89;
          v94 = &v87;
          v68 = 4;
        }
      }
      else
      {
        v68 = 1;
      }
      v95 = v67;
      v96 = v68;
      llvm::Twine::str((llvm::Twine *)&v92, &__p);
      v108 = 260;
      p_p = &__p;
      StringAttr = mlir::Builder::getStringAttr(v64, (mlir::MLIRContext *)&p_p);
      v71 = StringAttr;
      v72 = v103;
      if (v103 >= HIDWORD(v103))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, v103 + 1, 8);
        *((_QWORD *)v102 + v103) = v71;
        v72 = v103;
      }
      else
      {
        *((_QWORD *)v102 + v103) = StringAttr;
      }
      LODWORD(v103) = v72 + 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_91;
      }
      else if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_91;
      }
      operator delete(v87.__r_.__value_.__l.__data_);
LABEL_91:
      v51 = ++v101;
      if (v100 == a7 && v51 == a8)
      {
        v73 = (uint64_t *)v102;
        v74 = v103;
        goto LABEL_99;
      }
    }
  }
  v74 = 0;
  v73 = &v104;
  v52 = v31;
LABEL_99:
  ArrayAttr = mlir::Builder::getArrayAttr((mlir::MLIRContext **)v52[1], (uint64_t)v73, v74);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v33 + 24));
  v108 = 261;
  p_p = (std::string *)"output_names";
  v107 = 12;
  v77 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&p_p);
  mlir::Operation::setAttr(v33, v77, ArrayAttr);
  if (v102 != &v104)
    free(v102);
  return v33;
}

uint64_t mlir::RegionOpCreator::materializeHostTypeConversion(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *ArgAttrsAttr;
  uint64_t v23;
  uint64_t NumElements;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t canMapOperands;
  _QWORD *v30;
  uint64_t MemorySpace;
  void *v32;
  mlir::AffineMap *v33;
  mlir::AffineMap *v34;
  uint64_t OperandRange;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  _QWORD *v50;
  _QWORD *v51[2];
  _QWORD v52[2];
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v53 = (unint64_t)a4;
  v54 = a5;
  v11 = (uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v11)
    goto LABEL_10;
  v12 = *v11;
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v12 + 16);
  if (!(_DWORD)v14)
    goto LABEL_10;
  v15 = *(_QWORD **)(v12 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_10:
    v21 = 0;
  v52[0] = v11;
  v52[1] = v21;
  if (a4 == v11)
  {
    v27 = a3;
  }
  else
  {
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
    NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v23);
    v25 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
    v27 = a3;
    if (NumElements == mlir::ShapedType::getNumElements(v25, v26))
    {
      v28 = (_QWORD *)v53;
      if (*(_UNKNOWN **)(*(_QWORD *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        v55 = v53;
        v51[0] = (_QWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v55);
        v51[1] = v30;
        canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v51);
        v28 = (_QWORD *)v53;
      }
      else
      {
        canMapOperands = 0;
      }
      if (*(_UNKNOWN **)(*v28 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        v51[0] = v28;
        MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)v51);
      }
      else
      {
        MemorySpace = 0;
      }
      v32 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
      v34 = v33;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v52);
      v36 = (_QWORD *)mlir::MemRefType::get(v32, v34, OperandRange, canMapOperands, MemorySpace);
      v37 = v36;
      if (!v36)
        goto LABEL_29;
      v38 = *v36;
      v39 = mlir::TypeID::get<mlir::ShapedType>();
      v40 = *(unsigned int *)(v38 + 16);
      if (!(_DWORD)v40)
        goto LABEL_29;
      v41 = *(_QWORD **)(v38 + 8);
      v42 = &v41[2 * v40];
      do
      {
        v43 = v40 >> 1;
        v44 = &v41[2 * (v40 >> 1)];
        v46 = *v44;
        v45 = v44 + 2;
        v40 += ~(v40 >> 1);
        if (v46 < v39)
          v41 = v45;
        else
          v40 = v43;
      }
      while (v40);
      if (v41 != v42 && *v41 == v39)
        v47 = v41[1];
      else
LABEL_29:
        v47 = 0;
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, unint64_t))(*(_QWORD *)a1 + 160))(a1, a2, v37, v47, a3);
    }
  }
  v48 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v53);
  if (v48 != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v52))
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, a2, v53, v54, v27);
  v55 = a3;
  v51[0] = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a6, &v55, v51);
  v50 = v51[0];
  if ((result & 1) == 0)
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a6, (uint64_t)&v55, &v55, v51[0]);
    v50 = (_QWORD *)result;
    *(_QWORD *)result = v55;
    *(_QWORD *)(result + 8) = 0;
  }
  v50[1] = v27;
  return result;
}

uint64_t mlir::RegionOpCreator::canonicalizeTranslatedRegion(mlir::RegionOpCreator *this, mlir::Operation *a2)
{
  unint64_t v3;
  mlir::Region **v4;
  _BYTE v6[16];
  __int16 v7;
  int v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)v6);
  v3 = *((unsigned int *)a2 + 11);
  if ((v3 & 0x7FFFFF) != 0)
  {
    v4 = (mlir::Region **)((((unint64_t)a2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *((unsigned int *)a2 + 10));
    v14 = 0;
    v7 = 256;
    v8 = 0;
    v9 = 0;
    v10 = xmmword_181233220;
    v12 = 0;
    v13 = 0;
    v11 = 0;
    mlir::applyPatternsAndFoldGreedily(v4, (const mlir::FrozenRewritePatternSet *)v6, (__int128 *)&v7, &v14);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)v6);
  return 1;
}

__guard mlir::TypeID::get<mlir::MemoryEffects::Write>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Write]";
      v12 = 76;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[283];
}

uint64_t mlir::minimalLegalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t NextResultAtOffset;
  char v12;
  _QWORD *v13;
  uint64_t InterfaceFor;
  uint64_t v16;
  _QWORD *v17;

  if (a3)
  {
    v6 = a2;
    v7 = a2 + 8 * a3;
    do
    {
      v8 = *(unsigned int *)(*(_QWORD *)v6 + 36);
      if ((_DWORD)v8)
        v9 = *(_QWORD *)v6 - 16;
      else
        v9 = 0;
      if ((_DWORD)v8)
      {
        for (i = 0; i != v8; ++i)
        {
          NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, i);
          v16 = NextResultAtOffset;
          v17 = 0;
          v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a4, (unint64_t *)&v16, &v17);
          v13 = v17;
          if ((v12 & 1) == 0)
          {
            v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a4, (uint64_t)&v16, (unint64_t *)&v16, v17);
            *v13 = v16;
            v13[1] = 0;
          }
          v13[1] = NextResultAtOffset;
        }
      }
      v6 += 8;
    }
    while (v6 != v7);
  }
  if (!mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(a1)
    || !a1)
  {
    return 0;
  }
  InterfaceFor = mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(InterfaceFor + 16))(InterfaceFor, a1);
}

uint64_t mlir::TargetLegalizerInterface::legalizeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1, a2, a3, a4, a5);
}

uint64_t mlir::TargetLegalizerInterface::legalizeRegionBody(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1[1] + 8))(a1[1], *a1, a2, a3, a4, a5, a6);
}

uint64_t mlir::TargetLegalizerInterface::setFunctionType(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a1[1] + 24))(a1[1], *a1, a2);
}

float mlir::getDeviceInfo@<S0>(int a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  float v7;
  float result;

  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 20) = 0u;
  *(_OWORD *)(a3 + 4) = 0u;
  *(_DWORD *)(a3 + 48) = 978433816;
  *(_DWORD *)(a3 + 52) = a1;
  *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 36) = a2;
  if (a1 == 3)
  {
    *(_DWORD *)(a3 + 4) = 1072399647;
    *(_DWORD *)(a3 + 32) = 1112014848;
    *(_QWORD *)(a3 + 40) = 0x4248000041A3D70ALL;
    if ((uint64_t)a2 < 6)
    {
      v3 = 0x424800003FEB851FLL;
      goto LABEL_29;
    }
    if (a2 <= 0xA)
    {
LABEL_13:
      *(_DWORD *)(a3 + 32) = 1120403456;
      *(_DWORD *)(a3 + 44) = 1120403456;
      v3 = 0x42C800003FEB851FLL;
      goto LABEL_29;
    }
    if (a2 <= 0x14)
    {
LABEL_17:
      *(_DWORD *)(a3 + 32) = 1128792064;
      v4 = 1120403456;
LABEL_20:
      *(_DWORD *)(a3 + 44) = v4;
      *(_DWORD *)(a3 + 4) = 1080788255;
      v3 = 0x43480000406B851FLL;
      goto LABEL_29;
    }
    if (a2 <= 0x28)
    {
LABEL_22:
      *(_DWORD *)(a3 + 32) = 1137180672;
      v5 = 1120403456;
LABEL_25:
      *(_DWORD *)(a3 + 44) = v5;
      *(_DWORD *)(a3 + 4) = 1080788255;
      v3 = 0x43C80000406B851FLL;
      goto LABEL_29;
    }
    *(_DWORD *)(a3 + 32) = 1145569280;
    v6 = 1120403456;
LABEL_28:
    *(_DWORD *)(a3 + 44) = v6;
    *(_DWORD *)(a3 + 4) = 1089176863;
    v3 = 0x4448000040EB851FLL;
    goto LABEL_29;
  }
  if (a1 != 4)
  {
    *(_DWORD *)(a3 + 4) = 1072399647;
    *(_DWORD *)(a3 + 32) = 1107846758;
    *(_QWORD *)(a3 + 40) = 0x4208666641591EB8;
    if ((uint64_t)a2 < 6)
    {
      v3 = 0x420866663FEB851FLL;
      goto LABEL_29;
    }
    if (a2 <= 0xA)
    {
      *(_DWORD *)(a3 + 32) = 1116235366;
      *(_DWORD *)(a3 + 44) = 1116235366;
      v3 = 0x428866663FEB851FLL;
      goto LABEL_29;
    }
    if (a2 <= 0x14)
    {
      *(_DWORD *)(a3 + 32) = 1128792064;
      v4 = 1116235366;
      goto LABEL_20;
    }
    if (a2 <= 0x28)
    {
      *(_DWORD *)(a3 + 32) = 1137180672;
      v5 = 1116235366;
      goto LABEL_25;
    }
    *(_DWORD *)(a3 + 32) = 1145569280;
    v6 = 1116235366;
    goto LABEL_28;
  }
  *(_DWORD *)(a3 + 4) = 1072399647;
  *(_DWORD *)(a3 + 32) = 1112014848;
  *(_QWORD *)(a3 + 40) = 0x4248000041A3D70ALL;
  v3 = 0x424800003FEB851FLL;
  if ((uint64_t)a2 >= 7)
  {
    if (a2 > 0xA)
    {
      if (a2 > 0x14)
      {
        if (a2 > 0x28)
          goto LABEL_29;
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_13;
  }
LABEL_29:
  v7 = (float)(uint64_t)a2 * 0.33;
  *(float *)(a3 + 8) = *(float *)&v3 + *(float *)&v3;
  *(_QWORD *)(a3 + 12) = v3;
  *(float *)(a3 + 20) = v7;
  *(float *)(a3 + 24) = v7;
  result = v7 * 0.25;
  *(float *)(a3 + 28) = v7 * 0.25;
  return result;
}

mlir::placement::PlacementDialect *mlir::placement::PlacementDialect::PlacementDialect(mlir::placement::PlacementDialect *this, mlir::MLIRContext *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"placement", 9, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id);
  *v3 = off_1E0E4EFC0;
  mlir::Dialect::addOperations<mlir::placement::ANEIOCast,mlir::placement::HostTypeCast,mlir::placement::MemrefToTensor,mlir::placement::RegionCall,mlir::placement::ReplacedOps,mlir::placement::ReplacedOpsLiveOuts,mlir::placement::StartTimer,mlir::placement::StopTimer,mlir::placement::TensorToMemref>((uint64_t)v3);
  mlir::Dialect::addAttribute<mlir::placement::RegionTypeAttr>((uint64_t)this);
  mlir::Dialect::addType<mlir::placement::TimerHandleType>((uint64_t)this);
  return this;
}

void mlir::placement::PlacementDialect::~PlacementDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_18061B684(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::placement::ANEIOCast,mlir::placement::HostTypeCast,mlir::placement::MemrefToTensor,mlir::placement::RegionCall,mlir::placement::ReplacedOps,mlir::placement::ReplacedOpsLiveOuts,mlir::placement::StartTimer,mlir::placement::StopTimer,mlir::placement::TensorToMemref>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v2 = operator new(0x70uLL);
  v10 = mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v10, 0, 0);
  v3 = (uint64_t)v10;
  v10 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  mlir::RegisteredOperationName::insert<mlir::placement::HostTypeCast>(a1);
  v4 = operator new(0x70uLL);
  v10 = mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v10, (uint64_t)&mlir::placement::MemrefToTensor::getAttributeNames(void)::attrNames, 3);
  v5 = (uint64_t)v10;
  v10 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new(0x70uLL);
  v10 = mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v10, (uint64_t)&mlir::placement::RegionCall::getAttributeNames(void)::attrNames, 2);
  v7 = (uint64_t)v10;
  v10 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOps>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOpsLiveOuts>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::StartTimer>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::StopTimer>(a1);
  v8 = operator new(0x70uLL);
  v10 = mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v10, (uint64_t)&mlir::placement::TensorToMemref::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::placement::RegionTypeAttr::get(mlir::MLIRContext *a1, unsigned int a2)
{
  unsigned __int8 **AttributeUniquer;
  unsigned int v5;
  _QWORD v6[2];

  v5 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v6[1] = a1;
  return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, &v5);
}

uint64_t mlir::placement::RegionTypeAttr::parse(mlir::AsmParser *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v8;
  int v10;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15[8];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  _QWORD v20[3];
  __int16 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  mlir::AsmParser::getContext(a1);
  (*(void (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 152))(a1))
  {
    v2 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
    v13 = 0;
    v14 = 0;
    v3 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t *))(*(_QWORD *)a1 + 384))(a1, &v13))
    {
      *(_QWORD *)v15 = "expected valid keyword";
      v16 = 259;
      (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, unsigned int *))(*(_QWORD *)a1 + 24))(&v19, a1, v3, v15);
      v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v19);
      if (v19)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v19);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v20);
      if (!v4)
        goto LABEL_31;
    }
    if (v14 != 3)
    {
LABEL_19:
      v16 = 257;
      (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, unsigned int *))(*(_QWORD *)a1 + 24))(&v19, a1, v2, v15);
      if (v19)
      {
        mlir::Diagnostic::operator<<((uint64_t)v20, "expected ");
        if (v19)
        {
          mlir::Diagnostic::operator<<((uint64_t)v20, "::mlir::placement::RegionType");
          if (v19)
          {
            mlir::Diagnostic::operator<<((uint64_t)v20, " to be one of: ");
            if (v19)
            {
              mlir::Diagnostic::operator<<((uint64_t)v20, "GPU");
              if (v19)
              {
                mlir::Diagnostic::operator<<((uint64_t)v20, ", ");
                if (v19)
                {
                  mlir::Diagnostic::operator<<((uint64_t)v20, "ANE");
                  if (v19)
                  {
                    mlir::Diagnostic::operator<<((uint64_t)v20, ", ");
                    if (v19)
                      mlir::Diagnostic::operator<<((uint64_t)v20, "CPU");
                  }
                }
              }
            }
          }
        }
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v19);
      if (v19)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v19);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v20);
LABEL_31:
      v8 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
      v21 = 259;
      (*(void (**)(uint64_t *__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v17, a1, v8, &v19);
      if (v17)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v18);
      return 0;
    }
    if (*(_WORD *)v13 == 20551 && *(_BYTE *)(v13 + 2) == 85)
    {
      v10 = 0;
    }
    else if (*(_WORD *)v13 == 20033 && *(_BYTE *)(v13 + 2) == 69)
    {
      v10 = 1;
    }
    else
    {
      if (*(_WORD *)v13 != 20547 || *(_BYTE *)(v13 + 2) != 85)
        goto LABEL_19;
      v10 = 2;
    }
    if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 168))(a1))
    {
      Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
      v15[0] = v10;
      AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
      v19 = (const char *)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
      v20[0] = Context;
      return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v19, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, v15);
    }
  }
  return 0;
}

llvm::raw_ostream *mlir::placement::RegionTypeAttr::print(mlir::placement::RegionTypeAttr *this, mlir::AsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  int v6;
  BOOL v7;
  size_t v8;
  const char *v9;
  llvm::raw_ostream *v10;
  void *v11;
  llvm::raw_ostream *result;
  _BYTE *v13;

  mlir::Attribute::getContext(this);
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<", 1uLL);
  }
  else
  {
    *v5 = 60;
    ++*((_QWORD *)v4 + 4);
  }
  v6 = *(_DWORD *)(*(_QWORD *)this + 8);
  if (!v6)
  {
    v7 = 0;
    v9 = "GPU";
LABEL_14:
    v8 = 3;
    goto LABEL_15;
  }
  if (v6 == 2)
  {
    v7 = 0;
    v9 = "CPU";
    goto LABEL_14;
  }
  v7 = v6 != 1;
  if (v6 == 1)
    v8 = 3;
  else
    v8 = 0;
  if (v6 == 1)
    v9 = "ANE";
  else
    v9 = "";
LABEL_15:
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (void *)*((_QWORD *)v10 + 4);
  if (v8 <= *((_QWORD *)v10 + 3) - (_QWORD)v11)
  {
    if (!v7)
    {
      memcpy(v11, v9, v8);
      *((_QWORD *)v10 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, v9, v8);
  }
  result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v13)
    return llvm::raw_ostream::write(result, ">", 1uLL);
  *v13 = 62;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t mlir::placement::PlacementDialect::parseAttribute(uint64_t a1, mlir::AsmParser *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  const void **v9;
  const void **v10;
  uint64_t v11;
  char v12[32];
  __int16 v13;
  const void **v14;
  uint64_t v15;
  __int16 v16;
  mlir::AsmParser *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int16 v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a2 + 40))(a2);
  v17 = a2;
  v5 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a2 + 40))(a2);
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = v5;
  LOBYTE(v21) = 0;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD **))(*(_QWORD *)a2 + 608))(a2, &v19))
  {
    v21 = 256;
    goto LABEL_12;
  }
  v14 = (const void **)"region_type";
  v15 = 11;
  if (v22)
    goto LABEL_12;
  v6 = v20;
  if (v20)
  {
    if (v20 == 11 && *v19 == 0x745F6E6F69676572 && *(_QWORD *)((char *)v19 + 3) == 0x657079745F6E6F69)
    {
      result = mlir::placement::RegionTypeAttr::parse(a2);
      v6 = 0;
      v9 = 0;
      LOBYTE(v21) = result != 0;
      HIBYTE(v21) = 1;
      goto LABEL_13;
    }
    goto LABEL_25;
  }
  (*(void (**)(mlir::AsmParser *, const void ***, uint64_t))(*(_QWORD *)v17 + 616))(v17, &v14, 1);
  if (v22)
  {
LABEL_12:
    v6 = 0;
    v9 = 0;
    result = 0;
    goto LABEL_13;
  }
  v6 = v20;
LABEL_25:
  result = 0;
  v9 = (const void **)v19;
  v21 = 0;
LABEL_13:
  if (v21 <= 0xFFu)
  {
    v13 = 257;
    (*(void (**)(mlir::AsmParser **__return_ptr, mlir::AsmParser *, uint64_t, char *))(*(_QWORD *)a2 + 24))(&v17, a2, v4, v12);
    if (v17)
    {
      if (v17)
      {
        v16 = 261;
        v14 = v9;
        v15 = v6;
        mlir::Diagnostic::operator<<((uint64_t)&v18, &v14);
        if (v17)
        {
          if (v17)
          {
            v10 = *(const void ***)(a1 + 8);
            v11 = *(_QWORD *)(a1 + 16);
            v16 = 261;
            v14 = v10;
            v15 = v11;
            mlir::Diagnostic::operator<<((uint64_t)&v18, &v14);
            if (v17)
            {
              if (v17)
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
            }
          }
        }
      }
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v18);
    return 0;
  }
  return result;
}

void mlir::placement::PlacementDialect::printAttribute(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id)
  {
    v6 = a2;
    v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a3 + 16))(a3);
    v5 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 0xA)
    {
      *(_DWORD *)(v5 + 7) = 1701869940;
      *(_QWORD *)v5 = *(_QWORD *)"region_type";
      *((_QWORD *)v4 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v4, "region_type", 0xBuLL);
    }
    mlir::placement::RegionTypeAttr::print((mlir::placement::RegionTypeAttr *)&v6, a3);
  }
}

uint64_t mlir::placement::TimerHandleType::get(mlir::placement::TimerHandleType *this, mlir::MLIRContext *a2)
{
  unsigned __int8 **TypeUniquer;
  mlir::MLIRContext *v4;
  _QWORD v5[2];
  mlir::placement::TimerHandleType *v6;

  v4 = a2;
  v6 = this;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(this);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  v5[1] = &v6;
  return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, (unint64_t *)&v4);
}

uint64_t mlir::placement::TimerHandleType::parse(mlir::placement::TimerHandleType *this, mlir::AsmParser *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  mlir::MLIRContext *Context;
  unsigned __int8 **TypeUniquer;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  unint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t v15;
  _QWORD v16[24];

  v16[23] = *MEMORY[0x1E0C80C00];
  mlir::AsmParser::getContext(this);
  (*(void (**)(mlir::placement::TimerHandleType *))(*(_QWORD *)this + 40))(this);
  if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(*(_QWORD *)this + 152))(this))
  {
    v12 = 257;
    if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *, const char *, uint64_t, _QWORD *))(*(_QWORD *)this + 368))(this, "handle", 6, v11))
    {
      if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(*(_QWORD *)this + 136))(this))
      {
        v3 = mlir::FieldParser<unsigned long long,unsigned long long>::parse((uint64_t)this);
        v4 = *(_QWORD *)this;
        if (v5)
        {
          v6 = v3;
          if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(v4 + 168))(this))
          {
            Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(this);
            v13 = v6;
            v14 = Context;
            TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
            v11[0] = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
            v11[1] = &v14;
            return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, &v13);
          }
        }
        else
        {
          v10 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(v4 + 40))(this);
          v12 = 259;
          (*(void (**)(uint64_t *__return_ptr, mlir::placement::TimerHandleType *, uint64_t, _QWORD *))(*(_QWORD *)this + 24))(&v15, this, v10, v11);
          if (v15)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::FieldParser<unsigned long long,unsigned long long>::parse(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  char v4;
  uint64_t v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  _QWORD v10[24];

  v10[23] = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v3 = mlir::AsmParser::parseOptionalInteger<unsigned long long>(a1, &v6);
  v4 = v3;
  if (v3 <= 0xFFu)
  {
    v7 = "expected integer value";
    v8 = 259;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v9, a1, v2, &v7);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v9);
    if (v9)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v9);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v10);
  }
  if (v4)
    return v6;
  else
    return 0;
}

llvm::raw_ostream *mlir::placement::TimerHandleType::print(mlir::placement::TimerHandleType *this, mlir::AsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *result;
  _BYTE *v17;

  mlir::Attribute::getContext(this);
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<", 1uLL);
  }
  else
  {
    *v5 = 60;
    ++*((_QWORD *)v4 + 4);
  }
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 5)
  {
    *(_WORD *)(v7 + 4) = 25964;
    *(_DWORD *)v7 = 1684955496;
    *((_QWORD *)v6 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v6, "handle", 6uLL);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "=", 1uLL);
  }
  else
  {
    *v11 = 61;
    ++*((_QWORD *)v10 + 4);
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 32;
  }
  v14 = *(_QWORD *)(*(_QWORD *)this + 8);
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  llvm::raw_ostream::operator<<(v15, v14);
  result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v17)
    return llvm::raw_ostream::write(result, ">", 1uLL);
  *v17 = 62;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t mlir::placement::PlacementDialect::parseType(uint64_t a1, mlir::placement::TimerHandleType *a2)
{
  uint64_t v4;
  uint64_t v5;
  mlir::AsmParser *v6;
  uint64_t v7;
  uint64_t result;
  const void **v10;
  const void **v11;
  uint64_t v12;
  char v13[32];
  __int16 v14;
  const void **v15;
  uint64_t v16;
  __int16 v17;
  mlir::placement::TimerHandleType *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(*(_QWORD *)a2 + 40))(a2);
  v18 = a2;
  v5 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(*(_QWORD *)a2 + 40))(a2);
  v23 = 0;
  v20 = 0;
  v21 = 0;
  v19 = v5;
  LOBYTE(v22) = 0;
  if (!(*(unsigned __int8 (**)(mlir::placement::TimerHandleType *, uint64_t *))(*(_QWORD *)a2 + 608))(a2, &v20))
  {
    v22 = 256;
    goto LABEL_12;
  }
  v15 = (const void **)"timer";
  v16 = 5;
  if (v23)
    goto LABEL_12;
  v7 = v21;
  if (v21)
  {
    if (v21 == 5 && *(_DWORD *)v20 == 1701669236 && *(_BYTE *)(v20 + 4) == 114)
    {
      result = mlir::placement::TimerHandleType::parse(a2, v6);
      v7 = 0;
      v10 = 0;
      LOBYTE(v22) = result != 0;
      HIBYTE(v22) = 1;
      goto LABEL_13;
    }
    goto LABEL_25;
  }
  (*(void (**)(mlir::placement::TimerHandleType *, const void ***, uint64_t))(*(_QWORD *)v18 + 616))(v18, &v15, 1);
  if (v23)
  {
LABEL_12:
    result = 0;
    v7 = 0;
    v10 = 0;
    goto LABEL_13;
  }
  v7 = v21;
LABEL_25:
  result = 0;
  v10 = (const void **)v20;
  v22 = 0;
LABEL_13:
  if (v22 <= 0xFFu)
  {
    v14 = 257;
    (*(void (**)(mlir::placement::TimerHandleType **__return_ptr, mlir::placement::TimerHandleType *, uint64_t, char *))(*(_QWORD *)a2 + 24))(&v18, a2, v4, v13);
    if (v18)
    {
      if (v18)
      {
        v17 = 261;
        v15 = v10;
        v16 = v7;
        mlir::Diagnostic::operator<<((uint64_t)&v19, &v15);
        if (v18)
        {
          if (v18)
          {
            v11 = *(const void ***)(a1 + 8);
            v12 = *(_QWORD *)(a1 + 16);
            v17 = 261;
            v15 = v11;
            v16 = v12;
            mlir::Diagnostic::operator<<((uint64_t)&v19, &v15);
            if (v18)
            {
              if (v18)
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v18);
            }
          }
        }
      }
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v19);
    return 0;
  }
  return result;
}

void mlir::placement::PlacementDialect::printType(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id)
  {
    v6 = a2;
    v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a3 + 16))(a3);
    v5 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 4)
    {
      *(_BYTE *)(v5 + 4) = 114;
      *(_DWORD *)v5 = 1701669236;
      *((_QWORD *)v4 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v4, "timer", 5uLL);
    }
    mlir::placement::TimerHandleType::print((mlir::placement::TimerHandleType *)&v6, a3);
  }
}

uint64_t mlir::placement::detail::ANEIOCastGenericAdaptorBase::ANEIOCastGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "placement.ane_io_cast", 21, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0(uint64_t *a1, const void **a2, const void **a3, const void **a4, unsigned int a5)
{
  _QWORD *v6;
  void *v7;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  const void **v17;
  const void ***v18;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v35;
  char *v36;
  const void **v37[4];
  __int16 v38;
  const void **v39;
  int v40;
  uint64_t v41;
  const void **v42;
  _BYTE v43[16];
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD v47[20];

  v47[19] = *MEMORY[0x1E0C80C00];
  v39 = a2;
  v6 = *a2;
  v7 = (void *)*((_QWORD *)*a2 + 17);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v9 = mlir::TypeID::get<mlir::ShapedType>();
    v10 = *((unsigned int *)v6 + 4);
    if (!(_DWORD)v10)
      goto LABEL_14;
    v11 = (_QWORD *)v6[1];
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
      v17 = (const void **)v11[1];
    else
LABEL_14:
      v17 = 0;
    v42 = a2;
    v18 = &v42;
    goto LABEL_36;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v26 = mlir::TypeID::get<mlir::ShapedType>();
    v27 = *((unsigned int *)v6 + 4);
    if (!(_DWORD)v27)
      goto LABEL_34;
    v28 = (_QWORD *)v6[1];
    v29 = &v28[2 * v27];
    do
    {
      v30 = v27 >> 1;
      v31 = &v28[2 * (v27 >> 1)];
      v33 = *v31;
      v32 = v31 + 2;
      v27 += ~(v27 >> 1);
      if (v33 < v26)
        v28 = v32;
      else
        v27 = v30;
    }
    while (v27);
    if (v28 != v29 && *v28 == v26)
      v17 = (const void **)v28[1];
    else
LABEL_34:
      v17 = 0;
    v37[0] = a2;
    v18 = v37;
LABEL_36:
    v18[1] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v18);
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    return 1;
  v38 = 261;
  v37[0] = a3;
  v37[1] = a4;
  mlir::Operation::emitOpError(a1, v37, (uint64_t)&v42);
  if (v42)
  {
    mlir::Diagnostic::operator<<((uint64_t)v43, " #");
    if (v42)
    {
      v40 = 5;
      v41 = a5;
      v20 = &v40;
      v21 = v44;
      if (v45 >= v46)
      {
        v35 = v45 + 1;
        if (v44 <= (unint64_t)&v40 && v44 + 24 * v45 > (unint64_t)&v40)
        {
          v36 = (char *)&v40 - v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          v21 = v44;
          v20 = (int *)&v36[v44];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          v20 = &v40;
          v21 = v44;
        }
      }
      v22 = v21 + 24 * v45;
      v23 = *(_OWORD *)v20;
      *(_QWORD *)(v22 + 16) = *((_QWORD *)v20 + 2);
      *(_OWORD *)v22 = v23;
      ++v45;
      if (v42)
        mlir::Diagnostic::operator<<((uint64_t)v43, " must be tensor of any type values or memref of any type values or index, but got ");
    }
  }
  v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v42, (uint64_t *)&v39);
  v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
  if (v42)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v43);
  return v25;
}

uint64_t mlir::placement::ANEIOCast::verify(uint64_t **this)
{
  uint64_t DefiningOp;
  uint64_t v3;
  const void **v5;
  __int16 v6;
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)((*this)[9] + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id
    || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(*this - 1) & 0xFFFFFFFFFFFFFFF8))
  {
    return 1;
  }
  v6 = 257;
  mlir::OpState::emitOpError(this, &v5, (uint64_t)&v7);
  if (v7)
    mlir::Diagnostic::operator<<((uint64_t)v8, "invalid conversion");
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v7);
  if (v7)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return v3;
}

uint64_t mlir::placement::detail::MemrefToTensorGenericAdaptorBase::MemrefToTensorGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "placement.memref_to_tensor", 26, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave(mlir::placement::detail::MemrefToTensorGenericAdaptorBase *this)
{
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *p_p;
  uint64_t v12;
  void *__p;
  unsigned int v15;
  uint64_t v16;

  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue(this);
  v3 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v3, **(_QWORD **)(*((_QWORD *)this + 1) + 96));
  if ((v5 & 1) != 0 && (v6 = *((_QWORD *)v4 + 1)) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *(void **)(*(_QWORD *)v6 + 136);
    if (v10 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      v6 = 0;
    v16 = v6;
    if (v10 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      mlir::IntegerAttr::getValue(&v16, (llvm::APInt *)&__p);
      if (v15 >= 0x41)
        p_p = (uint64_t *)__p;
      else
        p_p = (uint64_t *)&__p;
      v12 = *p_p;
      v7 = *p_p & 0xFFFFFF00;
      if (v15 >= 0x41 && __p)
        operator delete[](__p);
      v9 = v12;
      v8 = 0x100000000;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  return v8 | v7 | v9;
}

uint64_t mlir::placement::MemrefToTensorAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *Value;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  _QWORD v35[4];
  __int16 v36;
  _QWORD *v37;
  _QWORD v38[2];
  uint64_t OperandRange;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[24];

  v42[23] = *MEMORY[0x1E0C80C00];
  v40 = *a1;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
  if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40))
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v5 = *((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v6 = *((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v7 = (_QWORD *)*((_QWORD *)Value + 1);
      }
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
    }
    while (Value != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40));
    if (v7)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v7))
        goto LABEL_33;
      v8 = *v7;
      v9 = mlir::TypeID::get<mlir::ElementsAttr>();
      v10 = *(unsigned int *)(v8 + 16);
      if (!(_DWORD)v10)
        goto LABEL_20;
      v11 = *(_QWORD **)(v8 + 8);
      v12 = &v11[2 * v10];
      do
      {
        v13 = v10 >> 1;
        v14 = &v11[2 * (v10 >> 1)];
        v16 = *v14;
        v15 = v14 + 2;
        v10 += ~(v10 >> 1);
        if (v16 < v9)
          v11 = v15;
        else
          v10 = v13;
      }
      while (v10);
      if (v11 != v12 && *v11 == v9)
        v17 = v11[1];
      else
LABEL_20:
        v17 = 0;
      v35[0] = v7;
      v35[1] = v17;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v35);
      v19 = Type;
      if (!Type)
        goto LABEL_30;
      v20 = *Type;
      v21 = mlir::TypeID::get<mlir::ShapedType>();
      v22 = *(unsigned int *)(v20 + 16);
      if (!(_DWORD)v22)
        goto LABEL_30;
      v23 = *(_QWORD **)(v20 + 8);
      v24 = &v23[2 * v22];
      do
      {
        v25 = v22 >> 1;
        v26 = &v23[2 * (v22 >> 1)];
        v28 = *v26;
        v27 = v26 + 2;
        v22 += ~(v22 >> 1);
        if (v28 < v21)
          v23 = v27;
        else
          v22 = v25;
      }
      while (v22);
      if (v23 != v24 && *v23 == v21)
        v29 = v23[1];
      else
LABEL_30:
        v29 = 0;
      v41 = (uint64_t)v19;
      v42[0] = v29;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
      if (v30 != 1
        || (v37 = v7,
            v38[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37),
            v38[1] = v31,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_33:
        v32 = "'placement.memref_to_tensor' op attribute 'shape' failed to satisfy constraint: ui64 elements attribute of rank 1";
        goto LABEL_44;
      }
    }
  }
  if (v6)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      v32 = "'placement.memref_to_tensor' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
      goto LABEL_44;
    }
    v41 = v6;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  }
  if (!v5)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v35[0] = v5;
    v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v41, 32))
      return 1;
  }
  v32 = "'placement.memref_to_tensor' op attribute 'interleave' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_44:
  v35[0] = v32;
  v36 = 259;
  mlir::emitError(a2, (uint64_t)v35, (uint64_t)&v41);
  v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::placement::MemrefToTensor::getShapeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::DenseIntElementsAttr::classof(*((_QWORD *)v9 + 1)))
    return v11;
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::getShape(mlir::Operation **this)
{
  return mlir::placement::MemrefToTensor::getShapeAttr(this);
}

uint64_t mlir::placement::MemrefToTensor::getResultElementTypeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::getResultElementType(mlir::Operation **this)
{
  uint64_t result;
  uint64_t v2;

  result = mlir::placement::MemrefToTensor::getResultElementTypeAttr(this);
  v2 = result;
  if (result)
    return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v2);
  return result;
}

uint64_t mlir::placement::MemrefToTensor::getInterleaveAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::getInterleave(mlir::Operation **this)
{
  uint64_t result;
  unsigned int *p_p;
  uint64_t v3;
  void *__p;
  unsigned int v6;
  uint64_t v7;

  result = mlir::placement::MemrefToTensor::getInterleaveAttr(this);
  v7 = result;
  if (result)
  {
    mlir::IntegerAttr::getValue(&v7, (llvm::APInt *)&__p);
    if (v6 >= 0x41)
      p_p = (unsigned int *)__p;
    else
      p_p = (unsigned int *)&__p;
    v3 = *p_p;
    if (v6 >= 0x41 && __p != 0)
      operator delete[](__p);
    return v3 | 0x100000000;
  }
  return result;
}

void mlir::placement::MemrefToTensor::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  if (a5)
  {
    mlir::NamedAttribute::NamedAttribute(&v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16), a5);
    mlir::NamedAttrList::push_back(a2 + 112, v14, v15);
  }
  if (a6)
  {
    mlir::NamedAttribute::NamedAttribute(&v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a6);
    mlir::NamedAttrList::push_back(a2 + 112, v14, v15);
  }
  if (a7)
  {
    mlir::NamedAttribute::NamedAttribute(&v14, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a7);
    mlir::NamedAttrList::push_back(a2 + 112, v14, v15);
  }
  v12 = *(unsigned int *)(a2 + 72);
  if (v12 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v12) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::placement::MemrefToTensor::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  uint64_t OperandRange;
  unint64_t v18;
  const void *ArgAttrsAttr;
  unint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v28;
  mlir::CallGraphNode *v29;
  char v30;
  uint64_t v31;
  void *v32;
  mlir::CallGraphNode *v33;
  mlir::CallGraphNode *v34;
  mlir::CallGraphNode *v35;
  char v36;
  uint64_t v37;
  uint64_t RawStringData;
  uint64_t v39;
  int isSplat;
  unint64_t NumElements;
  unsigned int v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  mlir::CallGraphNode *v49;
  mlir::CallGraphNode *v50;
  mlir::CallGraphNode *v51;
  char v52;
  uint64_t v53;
  mlir::CallGraphNode *v54;
  mlir::CallGraphNode *v55;
  mlir::CallGraphNode *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t Interleave;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  BOOL v66;
  _QWORD v67[2];
  _QWORD v68[2];
  void *v69;
  uint64_t v70;
  _BYTE v71[40];
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v72 = a6;
  LOBYTE(v73) = 0;
  v74 = 0;
  v75 = a9;
  v76 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v72);
    if (v74)
      v74 = 0;
    mlir::OperationName::OperationName(&v73, "placement.memref_to_tensor", 26, Context);
    v74 = 1;
  }
  v77 = a4;
  v78 = a5;
  if (a5)
  {
    v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::placement::MemrefToTensorAdaptor::verify(&v72, v15))
    {
      v69 = v77;
      v70 = 0;
      v16 = mlir::ValueRange::dereference_iterator(&v69, 0);
      v68[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
      v68[1] = a2;
      if (v68[0])
      {
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68);
        ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68);
        v20 = v18;
        v69 = v71;
        v70 = 0x500000000;
        v21 = 8 * v18;
        if (8 * v18 < 0x29)
        {
          v22 = 0;
          if (!v18)
          {
LABEL_17:
            LODWORD(v70) = v22 + (v21 >> 3);
            Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
            v28 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
            v29 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v28, *(_QWORD *)(*(_QWORD *)(v73 + 96) + 8));
            if ((v30 & 1) != 0)
            {
              v31 = *((_QWORD *)v29 + 1);
              if (v31)
              {
                v32 = *(void **)(*(_QWORD *)v31 + 136);
                if (v32 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
                  v31 = 0;
                v67[0] = v31;
                if (v32 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
                  OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v67);
              }
            }
            v33 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
            v34 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
            v35 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v33, v34, *(_QWORD *)(*(_QWORD *)(v73 + 96) + 16));
            if ((v36 & 1) == 0
              || (v37 = *((_QWORD *)v35 + 1)) == 0
              || !mlir::DenseIntElementsAttr::classof(*((_QWORD *)v35 + 1)))
            {
LABEL_47:
              v49 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
              v50 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
              v51 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v49, v50, **(_QWORD **)(v73 + 96));
              if ((v52 & 1) != 0)
              {
                v53 = *((_QWORD *)v51 + 1);
                if (v53)
                {
                  if (*(_UNKNOWN **)(*(_QWORD *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    v54 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
                    v55 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
                    v56 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v54, v55, *(_QWORD *)(*(_QWORD *)(v73 + 96) + 16));
                    if ((v57 & 1) == 0
                      || (v58 = *((_QWORD *)v56 + 1)) == 0
                      || (mlir::DenseIntElementsAttr::classof(v58) & 1) == 0)
                    {
                      v59 = v70;
                      if ((v70 & 0xFFFFFFFE) != 4)
                      {
                        v63 = mlir::UnrankedTensorType::get(OperandRange);
                        goto LABEL_58;
                      }
                      Interleave = mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave((mlir::placement::detail::MemrefToTensorGenericAdaptorBase *)&v72);
                      v61 = 16;
                      if ((_DWORD)v59 == 4)
                        v61 = 8;
                      v62 = v69;
                      *(uint64_t *)((char *)v69 + v61) /= Interleave;
                      v62[v59 - 1] *= Interleave;
                    }
                  }
                }
              }
              v63 = mlir::RankedTensorType::get((uint64_t)v69, v70, OperandRange, 0);
LABEL_58:
              v64 = v63;
              v65 = *(_DWORD *)(a11 + 8);
              if (v65 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v65 + 1, 8);
                v65 = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v65) = v64;
              ++*(_DWORD *)(a11 + 8);
              if (v69 != v71)
                free(v69);
              return 1;
            }
            v67[0] = v37;
            v67[1] = 1;
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v67, 8, 1, 0))
            {
              RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v67);
              LOBYTE(ArgAttrsAttr) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v67);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v67);
              mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v67);
            }
            else
            {
              RawStringData = 0;
            }
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v67, 8, 1, 0))
            {
              v39 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v67);
              isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v67);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v67);
              NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v67);
              v20 = NumElements;
              LODWORD(v70) = 0;
              if (NumElements <= HIDWORD(v70))
              {
                v42 = 0;
                v66 = RawStringData == v39 && isSplat == ArgAttrsAttr;
                v44 = v66;
                if (v66 && !NumElements)
                {
LABEL_46:
                  LODWORD(v70) = v42 + v20;
                  goto LABEL_47;
                }
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, NumElements, 8);
                v42 = v70;
                v43 = RawStringData == v39 && isSplat == ArgAttrsAttr;
                v44 = v43;
              }
            }
            else
            {
              v44 = 0;
              v42 = 0;
            }
            v45 = 0;
            v46 = (char *)v69 + 8 * v42;
            do
            {
              if ((_BYTE)ArgAttrsAttr)
                v47 = 0;
              else
                v47 = v45;
              *(_QWORD *)&v46[8 * v45] = *(_QWORD *)(RawStringData + 8 * v47);
              v43 = v20 - 1 == v45++;
              if (v43)
                v48 = v44;
              else
                v48 = 0;
            }
            while (v48 != 1);
            goto LABEL_46;
          }
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, (uint64_t)(8 * v18) >> 3, 8);
          v22 = v70;
          if (!v20)
            goto LABEL_17;
        }
        memcpy((char *)v69 + 8 * v22, ArgAttrsAttr, v21);
        v22 = v70;
        goto LABEL_17;
      }
    }
  }
  v23 = mlir::Float32Type::get(this, a2);
  v24 = mlir::UnrankedTensorType::get(v23);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::placement::MemrefToTensor::build(mlir::UnknownLoc **a1, uint64_t a2, void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  mlir::UnknownLoc *v13;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  mlir::MLIRContext *v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24[2];
  void *__src;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::addOperands(a2, (uint64_t)a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v27;
  v26 = 0x200000000;
  v13 = *a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v24, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::placement::MemrefToTensor::inferReturnTypes(v13, v16, v17, a3, a4, Dictionary, v18, v19, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v20 = __src;
  v21 = v26;
  v22 = *(unsigned int *)(a2 + 72);
  v23 = v22 + v26;
  if (v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v21)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (__src != v27)
    free(__src);
}

BOOL mlir::placement::MemrefToTensor::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  const void **v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  uint64_t CallableRegion;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 16 * v4;
    do
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v11 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
      {
        v6 = (const void **)*((_QWORD *)Value + 1);
      }
      else
      {
        v12 = mlir::CallGraphNode::getCallableRegion(Value);
        v11 = *this;
        if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v12)
        {
          v7 = *((_QWORD *)Value + 1);
        }
        else
        {
          v13 = mlir::CallGraphNode::getCallableRegion(Value);
          v11 = *this;
          if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == v13)
            v8 = (const void **)*((_QWORD *)Value + 1);
        }
      }
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v11 = *this;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(v11, v8, (const void **)"shape", 5)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, v7, (const void **)"resultElementType", (const void **)0x11)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, v6, (const void **)"interleave", (const void **)0xA)|| !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7,
                           0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v14 = (uint64_t)(*this - 2);
  else
    v14 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(uint64_t *a1, const void **a2, const void **a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void **v34;
  _QWORD v35[2];
  uint64_t OperandRange;
  const void **v37;
  uint64_t v38;
  __int16 v39;
  _QWORD *v40;
  _QWORD v41[24];

  v41[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a2))
    goto LABEL_25;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
    goto LABEL_11;
  v11 = (_QWORD *)v8[1];
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_11:
    v17 = 0;
  v37 = a2;
  v38 = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v37);
  v19 = Type;
  if (!Type)
    goto LABEL_21;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_21:
    v29 = 0;
  v40 = v19;
  v41[0] = v29;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v40);
  if (v30 == 1)
  {
    v34 = a2;
    v35[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34);
    v35[1] = v31;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      return 1;
  }
LABEL_25:
  v39 = 257;
  mlir::Operation::emitOpError(a1, &v37, (uint64_t)&v40);
  if (v40)
  {
    mlir::Diagnostic::operator<<((uint64_t)v41, "attribute '");
    if (v40)
    {
      v39 = 261;
      v37 = a3;
      v38 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v41, &v37);
      if (v40)
        mlir::Diagnostic::operator<<((uint64_t)v41, "' failed to satisfy constraint: ui64 elements attribute of rank 1");
    }
  }
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v41);
  return v32;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v6;
  const void **v8[4];
  __int16 v9;
  uint64_t v10;
  _QWORD v11[24];

  v11[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    v10 = a2;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v10);
    return 1;
  }
  v9 = 257;
  mlir::Operation::emitOpError(a1, v8, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, "attribute '");
    if (v10)
    {
      v9 = 261;
      v8[0] = a3;
      v8[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v11, v8);
      if (v10)
        mlir::Diagnostic::operator<<((uint64_t)v11, "' failed to satisfy constraint: any type attribute");
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v6;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(uint64_t *a1, const void **a2, const void **a3, const void **a4)
{
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t Value;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32))
      return 1;
  }
  v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&Value);
  if (Value)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (Value)
    {
      v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (Value)
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: 32-bit unsigned integer attribute");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v27;
  char *v28;
  const void **v29[4];
  __int16 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD v39[20];

  v39[19] = *MEMORY[0x1E0C80C00];
  v31 = a2;
  v9 = *(_QWORD *)a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_13;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = *(_QWORD **)(v9 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v34 = a2;
  v35[0] = v19;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v34);
  if (mlir::isStrided(a2))
    return 1;
LABEL_13:
  v30 = 261;
  v29[0] = a3;
  v29[1] = a4;
  mlir::Operation::emitOpError(a1, v29, (uint64_t)&v34);
  if (v34)
  {
    mlir::Diagnostic::operator<<((uint64_t)v35, " #");
    if (v34)
    {
      v32 = 5;
      v33 = a5;
      v21 = &v32;
      v22 = v36;
      if (v37 >= v38)
      {
        v27 = v37 + 1;
        if (v36 <= (unint64_t)&v32 && v36 + 24 * v37 > (unint64_t)&v32)
        {
          v28 = (char *)&v32 - v36;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v27, 24);
          v22 = v36;
          v21 = (int *)&v28[v36];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v27, 24);
          v21 = &v32;
          v22 = v36;
        }
      }
      v23 = v22 + 24 * v37;
      v24 = *(_OWORD *)v21;
      *(_QWORD *)(v23 + 16) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v23 = v24;
      ++v37;
      if (v34)
        mlir::Diagnostic::operator<<((uint64_t)v35, " must be strided memref of any type values, but got ");
    }
  }
  v25 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v34, &v31);
  v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v25);
  if (v34)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v35);
  return v20;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v5;
  void *v6;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v26;
  char *v27;
  const void **v28[4];
  __int16 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD v38[20];

  v38[19] = *MEMORY[0x1E0C80C00];
  v30 = a2;
  v5 = *(_QWORD *)a2;
  v6 = *(void **)(*(_QWORD *)a2 + 136);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v9 = mlir::TypeID::get<mlir::ShapedType>();
    v10 = *(unsigned int *)(v5 + 16);
    if (!(_DWORD)v10)
      goto LABEL_14;
    v11 = *(_QWORD **)(v5 + 8);
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
      v17 = v11[1];
    else
LABEL_14:
      v17 = 0;
    v33 = a2;
    v34[0] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
    return 1;
  }
  else
  {
    v29 = 261;
    v28[0] = a3;
    v28[1] = a4;
    mlir::Operation::emitOpError(a1, v28, (uint64_t)&v33);
    if (v33)
    {
      mlir::Diagnostic::operator<<((uint64_t)v34, " #");
      if (v33)
      {
        v31 = 5;
        v32 = a5;
        v20 = &v31;
        v21 = v35;
        if (v36 >= v37)
        {
          v26 = v36 + 1;
          if (v35 <= (unint64_t)&v31 && v35 + 24 * v36 > (unint64_t)&v31)
          {
            v27 = (char *)&v31 - v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v21 = v35;
            v20 = (int *)&v27[v35];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v20 = &v31;
            v21 = v35;
          }
        }
        v22 = v21 + 24 * v36;
        v23 = *(_OWORD *)v20;
        *(_QWORD *)(v22 + 16) = *((_QWORD *)v20 + 2);
        *(_OWORD *)v22 = v23;
        ++v36;
        if (v33)
          mlir::Diagnostic::operator<<((uint64_t)v34, " must be tensor of any type values, but got ");
      }
    }
    v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v33, &v30);
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
    if (v33)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
  }
  return v18;
}

mlir::Operation *mlir::placement::MemrefToTensor::verify(mlir::Operation **this)
{
  char isSplat;
  mlir::Operation *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *ArgAttrsAttr;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t NumElements;
  unint64_t isValidIntOrFloat;
  uint64_t RawStringData;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *p_p;
  uint64_t v24;
  char v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *p_ShapeAttr;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  const void ***v58;
  uint64_t v59;
  __int128 v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  const void ***v66;
  uint64_t v67;
  __int128 v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  BOOL v72;
  char *v73;
  char *v74;
  const void **v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78[2];
  mlir::Operation *v79;
  uint64_t ShapeAttr;
  _BOOL8 v81;
  void *InterleaveAttr;
  uint64_t v83;
  _BYTE v84[16];
  __int16 v85;
  void *__p;
  _QWORD v87[2];
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  _QWORD v91[20];

  v91[19] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v79 = v2;
  v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v78[0] = (uint64_t)v3;
  v78[1] = v4;
  if (!mlir::placement::MemrefToTensor::getShapeAttr(&v79)
    || !v3
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v78))
  {
    goto LABEL_23;
  }
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
  if (v6)
  {
    v7 = 8 * v6;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v7 -= 8;
      if (!v7)
        goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_8:
  v8 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
  NumElements = mlir::ShapedType::getNumElements(v8, v9);
  __p = (void *)mlir::placement::MemrefToTensor::getShapeAttr(&v79);
  v87[0] = __p != 0;
  isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&__p, 8, 1, 0);
  if ((isValidIntOrFloat & 1) == 0)
  {
    RawStringData = 0;
    if (isValidIntOrFloat < 2)
      goto LABEL_11;
LABEL_13:
    v15 = 0;
    v13 = isValidIntOrFloat & 0xFFFFFFFFFFFFFFFELL;
    v16 = 1;
    v17 = 1;
    do
    {
      if (isSplat)
        v18 = 0;
      else
        v18 = v15;
      if (isSplat)
        v19 = 0;
      else
        v19 = v15 + 1;
      v16 *= *(_QWORD *)(RawStringData + 8 * v18);
      v17 *= *(_QWORD *)(RawStringData + 8 * v19);
      v15 += 2;
    }
    while (v15 != v13);
    v14 = v17 * v16;
    goto LABEL_91;
  }
  RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&__p);
  isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&__p);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__p);
  isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&__p);
  if (!isValidIntOrFloat)
  {
    v14 = 1;
    goto LABEL_92;
  }
  if (isValidIntOrFloat >= 2)
    goto LABEL_13;
LABEL_11:
  v13 = 0;
  v14 = 1;
  do
  {
    if (isSplat)
      v52 = 0;
    else
      v52 = v13;
    v14 *= *(_QWORD *)(RawStringData + 8 * v52);
    ++v13;
LABEL_91:
    ;
  }
  while (isValidIntOrFloat != v13);
LABEL_92:
  if (NumElements != v14)
  {
    v85 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, (const void ***)&InterleaveAttr, (uint64_t)&__p);
    if (__p)
      mlir::Diagnostic::operator<<((uint64_t)v87, "Input shape ");
    v53 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&__p, v78);
    v54 = (uint64_t)v53;
    if (*v53)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v53 + 1), " (");
      if (*(_QWORD *)v54)
      {
        v55 = v54 + 24;
        v56 = *(_QWORD *)(v54 + 24);
        LODWORD(v75) = 5;
        v76 = NumElements;
        v57 = *(unsigned int *)(v54 + 32);
        v58 = &v75;
        if (v57 >= *(_DWORD *)(v54 + 36))
        {
          v69 = v57 + 1;
          v70 = v56 + 24 * v57 > (unint64_t)&v75;
          if (v56 <= (unint64_t)&v75 && v70)
          {
            v73 = (char *)&v75 - v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v55, (void *)(v54 + 40), v69, 24);
            v56 = *(_QWORD *)(v54 + 24);
            v58 = (const void ***)&v73[v56];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v55, (void *)(v54 + 40), v69, 24);
            v56 = *(_QWORD *)(v54 + 24);
            v58 = &v75;
          }
        }
        v59 = v56 + 24 * *(unsigned int *)(v54 + 32);
        v60 = *(_OWORD *)v58;
        *(_QWORD *)(v59 + 16) = v58[2];
        *(_OWORD *)v59 = v60;
        ++*(_DWORD *)(v54 + 32);
        if (*(_QWORD *)v54)
          mlir::Diagnostic::operator<<(v54 + 8, " elements) is not compatible with shape attribute ");
      }
    }
    ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v79);
    v81 = ShapeAttr != 0;
    v61 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Attribute>(v54, &ShapeAttr);
    v62 = (uint64_t)v61;
    if (*v61)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v61 + 1), " (");
      if (*(_QWORD *)v62)
      {
        v63 = v62 + 24;
        v64 = *(_QWORD *)(v62 + 24);
        LODWORD(v75) = 2;
        v76 = v14;
        v65 = *(unsigned int *)(v62 + 32);
        v66 = &v75;
        if (v65 >= *(_DWORD *)(v62 + 36))
        {
          v71 = v65 + 1;
          v72 = v64 + 24 * v65 > (unint64_t)&v75;
          if (v64 <= (unint64_t)&v75 && v72)
          {
            v74 = (char *)&v75 - v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v63, (void *)(v62 + 40), v71, 24);
            v64 = *(_QWORD *)(v62 + 24);
            v66 = (const void ***)&v74[v64];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v63, (void *)(v62 + 40), v71, 24);
            v64 = *(_QWORD *)(v62 + 24);
            v66 = &v75;
          }
        }
        v67 = v64 + 24 * *(unsigned int *)(v62 + 32);
        v68 = *(_OWORD *)v66;
        *(_QWORD *)(v67 + 16) = v66[2];
        *(_OWORD *)v67 = v68;
        ++*(_DWORD *)(v62 + 32);
        if (*(_QWORD *)v62)
          mlir::Diagnostic::operator<<(v62 + 8, " elements)");
      }
    }
    v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult(v62);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    return v2;
  }
LABEL_23:
  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(&v79)
    || !v78[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v78))
  {
    return (mlir::Operation *)1;
  }
  v20 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
  if (v21)
  {
    v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22)
        goto LABEL_30;
    }
    return (mlir::Operation *)1;
  }
LABEL_30:
  InterleaveAttr = (void *)mlir::placement::MemrefToTensor::getInterleaveAttr(&v79);
  if (InterleaveAttr)
  {
    mlir::IntegerAttr::getValue(&InterleaveAttr, (llvm::APInt *)&__p);
    if (LODWORD(v87[0]) >= 0x41)
      p_p = (unsigned int *)__p;
    else
      p_p = (unsigned int *)&__p;
    v24 = *p_p;
    if (LODWORD(v87[0]) >= 0x41 && __p)
      operator delete[](__p);
  }
  else
  {
    v24 = 0;
  }
  mlir::getANENextSupportedInterleaveValue(v24);
  if (!v25)
  {
    v85 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, (const void ***)&InterleaveAttr, (uint64_t)&__p);
    if (__p)
      mlir::Diagnostic::operator<<((uint64_t)v87, "interleave factor not supported");
    v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    return v2;
  }
  InterleaveAttr = v84;
  v83 = 0x400000000;
  v26 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
  v27 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
  v28 = 0;
  v30 = (_BYTE *)(v27 + 8 * v29);
  LODWORD(v83) = 0;
  v31 = (v30 - v26) >> 3;
  if (v31 > HIDWORD(v83))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v84, v31, 8);
    v28 = v83;
  }
  if (v30 != v26)
  {
    memcpy((char *)InterleaveAttr + 8 * v28, v26, v30 - v26);
    v28 = v83;
  }
  v32 = v28 + ((unint64_t)(v30 - v26) >> 3);
  LODWORD(v83) = v28 + ((unint64_t)(v30 - v26) >> 3);
  if ((unint64_t)(v32 - 6) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v77 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, &v75, (uint64_t)&__p);
    if (__p)
      mlir::Diagnostic::operator<<((uint64_t)v87, "Interleave can only be applied on 4D or 5D tensor");
LABEL_70:
    v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    v36 = 0;
    goto LABEL_73;
  }
  v75 = (const void **)mlir::placement::MemrefToTensor::getInterleaveAttr(&v79);
  if (v75)
  {
    mlir::IntegerAttr::getValue(&v75, (llvm::APInt *)&__p);
    if (LODWORD(v87[0]) >= 0x41)
      v33 = (unsigned int *)__p;
    else
      v33 = (unsigned int *)&__p;
    v34 = *v33;
    if (LODWORD(v87[0]) >= 0x41 && __p)
      operator delete[](__p);
  }
  else
  {
    v34 = 0;
  }
  v35 = (_DWORD)v32 == 4;
  v36 = 1;
  if (v35)
    v37 = 1;
  else
    v37 = 2;
  if (*((_QWORD *)InterleaveAttr + v37) % v34)
  {
    v77 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, &v75, (uint64_t)&__p);
    if (__p)
    {
      mlir::Diagnostic::operator<<((uint64_t)v87, "channel ");
      if (__p)
      {
        v38 = *((_QWORD *)InterleaveAttr + v37);
        LODWORD(ShapeAttr) = 2;
        v81 = v38;
        p_ShapeAttr = &ShapeAttr;
        v40 = v88;
        if (v89 >= v90)
        {
          v48 = v89 + 1;
          if (v88 <= (unint64_t)&ShapeAttr && v88 + 24 * v89 > (unint64_t)&ShapeAttr)
          {
            v50 = (char *)&ShapeAttr - v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v48, 24);
            v40 = v88;
            p_ShapeAttr = (uint64_t *)&v50[v88];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v48, 24);
            p_ShapeAttr = &ShapeAttr;
            v40 = v88;
          }
        }
        v41 = v40 + 24 * v89;
        v42 = *(_OWORD *)p_ShapeAttr;
        *(_QWORD *)(v41 + 16) = p_ShapeAttr[2];
        *(_OWORD *)v41 = v42;
        ++v89;
        if (__p)
        {
          mlir::Diagnostic::operator<<((uint64_t)v87, " must be a multiple of interleave ");
          if (__p)
          {
            LODWORD(ShapeAttr) = 2;
            v81 = v34;
            v43 = &ShapeAttr;
            v44 = v88;
            if (v89 >= v90)
            {
              v49 = v89 + 1;
              if (v88 <= (unint64_t)&ShapeAttr && v88 + 24 * v89 > (unint64_t)&ShapeAttr)
              {
                v51 = (char *)&ShapeAttr - v88;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v49, 24);
                v44 = v88;
                v43 = (uint64_t *)&v51[v88];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v49, 24);
                v43 = &ShapeAttr;
                v44 = v88;
              }
            }
            v45 = v44 + 24 * v89;
            v46 = *(_OWORD *)v43;
            *(_QWORD *)(v45 + 16) = v43[2];
            *(_OWORD *)v45 = v46;
            ++v89;
          }
        }
      }
    }
    goto LABEL_70;
  }
LABEL_73:
  if (InterleaveAttr != v84)
    free(InterleaveAttr);
  if (v36)
    return (mlir::Operation *)1;
  return v2;
}

uint64_t mlir::placement::RegionCall::getCallee(mlir::Operation **this)
{
  uint64_t MaxValueAttr;
  uint64_t Value;

  MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr(this);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&MaxValueAttr);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

uint64_t mlir::placement::RegionCall::getRegionType(mlir::Operation **this)
{
  return *(unsigned int *)(mlir::anec::ClampedRelu::getMinValueAttr(this) + 8);
}

void mlir::placement::RegionCall::build(mlir::MLIRContext **a1, uint64_t a2, mlir::SymbolRefAttr *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t InterfaceFor;
  mlir::Operation *v13;
  const void *Results;
  mlir::Operation *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  mlir::StringAttr *Context;
  uint64_t v21;
  mlir::MLIRContext *v22;
  unsigned __int8 **AttributeUniquer;
  uint64_t v24;
  mlir::StringAttr *v25;
  uint64_t v26;
  uint64_t canMapOperands;
  const char *v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  if (a3)
    InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a3);
  else
    InterfaceFor = 0;
  v28 = (const char *)a3;
  v29 = InterfaceFor;
  canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v28);
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands);
  v15 = v13;
  v16 = 8 * (_QWORD)v13;
  v17 = *(unsigned int *)(a2 + 72);
  v18 = v17 + ((8 * (uint64_t)v13) >> 3);
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v15)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v17), Results, v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + (v16 >> 3);
  v19 = mlir::SymbolRefAttr::get(a3, v13);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v30 = 261;
  v28 = "callee";
  v29 = 6;
  v21 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v28);
  mlir::NamedAttribute::NamedAttribute(&v31, v21, v19);
  mlir::NamedAttrList::push_back(a2 + 112, v31, v32);
  v22 = *a1;
  LODWORD(v31) = a4;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v22);
  v28 = (const char *)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v29 = (uint64_t)v22;
  v24 = mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v28, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, (unsigned int *)&v31);
  v25 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v30 = 261;
  v28 = "region_type";
  v29 = 11;
  v26 = mlir::StringAttr::get(v25, (mlir::MLIRContext *)&v28);
  mlir::NamedAttribute::NamedAttribute(&v31, v26, v24);
  mlir::NamedAttrList::push_back(a2 + 112, v31, v32);
  mlir::OperationState::addOperands(a2, a5, a6);
}

void mlir::placement::RegionCall::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::NamedAttribute::NamedAttribute(&v16, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a5);
  mlir::NamedAttrList::push_back(a2 + 112, v16, v17);
  mlir::NamedAttribute::NamedAttribute(&v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a6);
  mlir::NamedAttrList::push_back(a2 + 112, v16, v17);
  v13 = *(unsigned int *)(a2 + 72);
  if (a4 + v13 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v13, 8);
    v13 = *(unsigned int *)(a2 + 72);
  }
  if (a4)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a2 + 64) + 8 * v13;
    do
    {
      *(_QWORD *)(v15 + 8 * v14) = mlir::TypeRange::dereference_iterator(a3, v14);
      ++v14;
    }
    while (a4 != v14);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + a4;
}

void mlir::placement::RegionCall::build(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mlir::MLIRContext *v20;
  unsigned __int8 **AttributeUniquer;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  void *v27;
  mlir::MLIRContext *v28;

  mlir::OperationState::addOperands(a2, a9, a10);
  v17 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  v18 = mlir::SymbolRefAttr::get(*a1, a5, a6);
  mlir::NamedAttribute::NamedAttribute(&v27, v17, v18);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v27, (uint64_t)v28);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  v20 = *a1;
  v26 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v20);
  v27 = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v28 = v20;
  v22 = mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v27, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, &v26);
  mlir::NamedAttribute::NamedAttribute(&v27, v19, v22);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v27, (uint64_t)v28);
  v23 = *(unsigned int *)(a2 + 72);
  if (a4 + v23 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v23, 8);
    v23 = *(unsigned int *)(a2 + 72);
  }
  if (a4)
  {
    v24 = 0;
    v25 = *(_QWORD *)(a2 + 64) + 8 * v23;
    do
    {
      *(_QWORD *)(v25 + 8 * v24) = mlir::TypeRange::dereference_iterator(a3, v24);
      ++v24;
    }
    while (a4 != v24);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v23 + a4;
}

uint64_t mlir::placement::RegionCall::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t NextResultAtOffset;
  const void **v21[4];
  __int16 v22;
  unint64_t AttrDictionary;
  _QWORD v24[24];

  v24[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
    {
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (v6)
    {
      v8 = *((_QWORD *)Value + 1);
      while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
      {
        Value = (mlir::CallGraphNode *)((char *)Value + 16);
        v6 -= 16;
        if (!v6)
          goto LABEL_13;
      }
      v11 = *((_QWORD *)Value + 1);
      if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(*this, v8, (const void **)"callee", (const void **)6))
      {
        v12 = *this;
        if (!v11
          || *(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id)
        {
LABEL_29:
          if ((*((_BYTE *)v12 + 46) & 0x80) != 0 && (v14 = *((unsigned int *)v12 + 17), (_DWORD)v14))
          {
            v15 = 0;
            v16 = v12[9] + 24;
            while (mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(*this, (const void **)(*(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", (const void **)7, v15))
            {
              ++v15;
              v16 += 32;
              if (v14 == v15)
              {
                v12 = *this;
                goto LABEL_35;
              }
            }
          }
          else
          {
LABEL_35:
            v17 = *((unsigned int *)v12 + 9);
            if (*((_DWORD *)v12 + 9))
              v18 = (uint64_t)(v12 - 2);
            else
              v18 = 0;
            if (!(_DWORD)v17)
              return 1;
            v19 = 0;
            v9 = 1;
            while (1)
            {
              NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, v19);
              if (!mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", (const void **)6, v19))break;
              if (v17 == ++v19)
                return v9;
            }
          }
          return 0;
        }
        v22 = 257;
        mlir::Operation::emitOpError(v12, v21, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v24, "attribute '");
          if (AttrDictionary)
          {
            v22 = 261;
            v21[0] = (const void **)"region_type";
            v21[1] = (const void **)11;
            mlir::Diagnostic::operator<<((uint64_t)v24, v21);
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v24, "' failed to satisfy constraint: Available region types");
          }
        }
        v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
        if (v13)
        {
          v12 = *this;
          goto LABEL_29;
        }
      }
      return 0;
    }
LABEL_13:
    v7 = "requires attribute 'region_type'";
  }
  else
  {
LABEL_8:
    v7 = "requires attribute 'callee'";
  }
  v21[0] = (const void **)v7;
  v22 = 259;
  mlir::OpState::emitOpError(this, v21, (uint64_t)&AttrDictionary);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
  return v9;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v13[4];
  __int16 v14;
  uint64_t v15;
  _QWORD v16[24];

  v16[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v7 = *(void **)(*(_QWORD *)a2 + 136);
  v8 = v7 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v9 = v7 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id ? a2 : 0;
  v15 = v9;
  if (v8)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v15);
    if (!v10)
      return 1;
  }
  v14 = 257;
  mlir::Operation::emitOpError(a1, v13, (uint64_t)&v15);
  if (v15)
  {
    mlir::Diagnostic::operator<<((uint64_t)v16, "attribute '");
    if (v15)
    {
      v14 = 261;
      v13[0] = a3;
      v13[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v16, v13);
      if (v15)
        mlir::Diagnostic::operator<<((uint64_t)v16, "' failed to satisfy constraint: flat symbol reference attribute");
    }
  }
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v15);
  if (v15)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
  return v11;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(uint64_t *a1, const void **a2, const void **a3, const void **a4, unsigned int a5)
{
  _QWORD *v6;
  void *v7;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  const void **v17;
  const void ***v18;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v35;
  char *v36;
  const void **v37[4];
  __int16 v38;
  const void **v39;
  int v40;
  uint64_t v41;
  const void **v42;
  _BYTE v43[16];
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD v47[20];

  v47[19] = *MEMORY[0x1E0C80C00];
  v39 = a2;
  v6 = *a2;
  v7 = (void *)*((_QWORD *)*a2 + 17);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v9 = mlir::TypeID::get<mlir::ShapedType>();
    v10 = *((unsigned int *)v6 + 4);
    if (!(_DWORD)v10)
      goto LABEL_14;
    v11 = (_QWORD *)v6[1];
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
      v17 = (const void **)v11[1];
    else
LABEL_14:
      v17 = 0;
    v42 = a2;
    v18 = &v42;
    goto LABEL_36;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v26 = mlir::TypeID::get<mlir::ShapedType>();
    v27 = *((unsigned int *)v6 + 4);
    if (!(_DWORD)v27)
      goto LABEL_34;
    v28 = (_QWORD *)v6[1];
    v29 = &v28[2 * v27];
    do
    {
      v30 = v27 >> 1;
      v31 = &v28[2 * (v27 >> 1)];
      v33 = *v31;
      v32 = v31 + 2;
      v27 += ~(v27 >> 1);
      if (v33 < v26)
        v28 = v32;
      else
        v27 = v30;
    }
    while (v27);
    if (v28 != v29 && *v28 == v26)
      v17 = (const void **)v28[1];
    else
LABEL_34:
      v17 = 0;
    v37[0] = a2;
    v18 = v37;
LABEL_36:
    v18[1] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v18);
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    return 1;
  v38 = 261;
  v37[0] = a3;
  v37[1] = a4;
  mlir::Operation::emitOpError(a1, v37, (uint64_t)&v42);
  if (v42)
  {
    mlir::Diagnostic::operator<<((uint64_t)v43, " #");
    if (v42)
    {
      v40 = 5;
      v41 = a5;
      v20 = &v40;
      v21 = v44;
      if (v45 >= v46)
      {
        v35 = v45 + 1;
        if (v44 <= (unint64_t)&v40 && v44 + 24 * v45 > (unint64_t)&v40)
        {
          v36 = (char *)&v40 - v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          v21 = v44;
          v20 = (int *)&v36[v44];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          v20 = &v40;
          v21 = v44;
        }
      }
      v22 = v21 + 24 * v45;
      v23 = *(_OWORD *)v20;
      *(_QWORD *)(v22 + 16) = *((_QWORD *)v20 + 2);
      *(_OWORD *)v22 = v23;
      ++v45;
      if (v42)
        mlir::Diagnostic::operator<<((uint64_t)v43, " must be variadic of tensor of any type values or memref of any type values or index, but got ");
    }
  }
  v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v42, (uint64_t *)&v39);
  v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
  if (v42)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v43);
  return v25;
}

uint64_t mlir::placement::ReplacedOps::getReplacedByAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::placement::ReplacedOps::getReplacedBy(mlir::Operation **this)
{
  uint64_t ReplacedByAttr;
  uint64_t Value;

  ReplacedByAttr = mlir::placement::ReplacedOps::getReplacedByAttr(this);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&ReplacedByAttr);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

uint64_t mlir::placement::ReplacedOps::getResAttrsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

void mlir::placement::ReplacedOps::build(uint64_t a1, mlir::Attribute *a2, void *a3, uint64_t a4, mlir::SymbolRefAttr *a5, mlir::Operation **a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  mlir::MLIRContext *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t StringAttr;
  mlir::StringAttr *Context;
  uint64_t v24;
  mlir::Operation *v25;
  uint64_t v26;
  mlir::StringAttr *v27;
  uint64_t v28;
  uint64_t *v29;
  _OWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t Loc;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  mlir::Operation *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v47;
  uint64_t *v48;
  BOOL v49;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _WORD v55[24];
  const char *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  llvm *v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65[2];
  _BYTE *v66;
  uint64_t v67;
  _BYTE v68[32];
  unint64_t v69[2];
  unint64_t v70[2];
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v71 = (const char *)a9;
  v72 = a10;
  v18 = *(mlir::MLIRContext **)a1;
  mlir::TypeRange::TypeRange(v70, a9, a10);
  mlir::TypeRange::TypeRange(v69, a11, a12);
  v19 = mlir::FunctionType::get(v18, v70[0], v70[1], v69[0], v69[1]);
  v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 96) + 8);
  v21 = mlir::TypeAttr::get(v19);
  mlir::NamedAttribute::NamedAttribute(&v56, v20, v21);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v56, v57);
  v55[8] = 261;
  v53 = a3;
  v54 = a4;
  StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)a1, (mlir::MLIRContext *)&v53);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  LOWORD(v60) = 261;
  v56 = "sym_name";
  v57 = 8;
  v24 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v56);
  mlir::NamedAttribute::NamedAttribute(&v66, v24, StringAttr);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v66, v67);
  v26 = mlir::SymbolRefAttr::get(a5, v25);
  v27 = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  LOWORD(v60) = 261;
  v56 = "replaced_by";
  v57 = 11;
  v28 = mlir::StringAttr::get(v27, (mlir::MLIRContext *)&v56);
  mlir::NamedAttribute::NamedAttribute(&v53, v28, v26);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v53, v54);
  v29 = (uint64_t *)mlir::OperationState::addRegion(a2);
  v30 = operator new(0x48uLL);
  *v30 = 0u;
  v30[1] = 0u;
  *((_QWORD *)v30 + 4) = v30 + 2;
  *((_QWORD *)v30 + 5) = v30 + 2;
  *((_QWORD *)v30 + 7) = 0;
  *((_QWORD *)v30 + 8) = 0;
  *((_QWORD *)v30 + 6) = 0;
  v66 = v68;
  v67 = 0x400000000;
  v32 = (uint64_t)v71;
  v31 = v72;
  v56 = v71;
  v57 = 0;
  if (v72)
  {
    v33 = 0;
    do
    {
      v53 = (void *)mlir::ValueRange::dereference_iterator(&v56, v33);
      Loc = mlir::Value::getLoc((mlir::Value *)&v53);
      v35 = v67;
      if (v67 >= (unint64_t)HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
        v35 = v67;
      }
      *(_QWORD *)&v66[8 * v35] = Loc;
      LODWORD(v67) = v67 + 1;
      v33 = ++v57;
    }
    while (v56 != (const char *)v32 || v33 != v31);
  }
  mlir::TypeRange::TypeRange(v65, v32, v31);
  mlir::Block::addArguments(v30, v65[0], v65[1], (uint64_t)v66, v67);
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v29, (uint64_t)v30);
  v37 = *v29;
  *((_QWORD *)v30 + 1) = *v29;
  *((_QWORD *)v30 + 2) = v29;
  *(_QWORD *)(v37 + 8) = (char *)v30 + 8;
  *v29 = (uint64_t)v30 + 8;
  v38 = *((_QWORD *)v30 + 5);
  v39 = (void *)*((_QWORD *)v30 + 6);
  *(_QWORD *)(a1 + 16) = v30;
  *(_QWORD *)(a1 + 24) = v38;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v40 = (uint64_t)(*((_QWORD *)v30 + 7) - (_QWORD)v39) >> 3;
  v53 = v39;
  v54 = v40;
  mlir::IRMapping::map<mlir::ValueRange &,llvm::MutableArrayRef<mlir::BlockArgument>,(void *)0>((uint64_t)&v56, (uint64_t *)&v71, (uint64_t **)&v53);
  if (a7)
  {
    v41 = 8 * a7;
    do
    {
      v42 = *a6++;
      mlir::OpBuilder::clone((uint64_t **)a1, v42, (mlir::IRMapping *)&v56);
      v41 -= 8;
    }
    while (v41);
  }
  v53 = v55;
  v54 = 0x600000000;
  if (a12 < 7)
  {
    v43 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, a12, 8);
    v43 = v54;
  }
  v73 = a11;
  v74 = 0;
  v75 = (uint64_t *)&v56;
  v76 = 1;
  if (a12)
  {
    v44 = 0;
    v45 = (uint64_t *)((char *)v53 + 8 * v43);
    do
    {
      v47 = mlir::ValueRange::dereference_iterator(&v73, v44);
      v48 = v75;
      v51 = v47;
      v52 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v75, (unint64_t *)&v51, &v52))v49 = v52 == *v48 + 16 * *((unsigned int *)v48 + 4);
      else
        v49 = 1;
      if (!v49)
        v47 = *(_QWORD *)(v52 + 8);
      *v45++ = v47;
      v44 = ++v74;
    }
    while (v73 != a11 || v44 != a12);
    v43 = v54;
  }
  LODWORD(v54) = v43 + a12;
  mlir::OpBuilder::create<mlir::placement::ReplacedOpsLiveOuts,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)a1, *(_QWORD *)a2, (uint64_t)&v53);
  if (v53 != v55)
    free(v53);
  llvm::deallocate_buffer(v62, (void *)(16 * v64));
}

void sub_180620098(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,llvm *a27,uint64_t a28,unsigned int a29)
{
  llvm::deallocate_buffer(a27, (void *)(16 * a29));
}

void sub_1806200AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,llvm *a24,uint64_t a25,unsigned int a26)
{
  llvm::deallocate_buffer(a24, (void *)(16 * a26));
}

void sub_1806200C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  __int128 v64;
  void *v65;
  void *v66;

  if ((_QWORD)v64)
  {
    *(_OWORD *)v63 = v64;
  }
  else
  {
    *(_QWORD *)v63 = 0;
    *(_QWORD *)(v63 + 8) = 0;
  }
  if (v66 != v65)
    free(v66);
}

uint64_t mlir::IRMapping::map<mlir::ValueRange &,llvm::MutableArrayRef<mlir::BlockArgument>,(void *)0>(uint64_t result, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = a2[1];
  v19 = *a2;
  v20 = 0;
  v5 = *a3;
  v6 = a3[1];
  v21 = *a3;
  if (v4)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = (uint64_t *)result;
    v9 = 0;
    v10 = &v5[(_QWORD)v6];
    do
    {
      v14 = mlir::ValueRange::dereference_iterator(&v19, v9);
      v15 = *v21;
      v17 = v14;
      v18 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v8, (unint64_t *)&v17, &v18);
      v16 = v18;
      if ((result & 1) == 0)
      {
        result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v8, (uint64_t)&v17, (unint64_t *)&v17, v18);
        v16 = (_QWORD *)result;
        *(_QWORD *)result = v17;
        *(_QWORD *)(result + 8) = 0;
      }
      v16[1] = v15;
      v9 = v20 + 1;
      v11 = v21 + 1;
      v20 = v9;
      ++v21;
    }
    while ((v9 != v4 || v19 != v3) && v11 != v10);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::ReplacedOpsLiveOuts,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.live_outs", (const unsigned __int8 *)0x13, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"placement.live_outs";
    v15[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::ReplacedOpsLiveOuts,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

BOOL mlir::placement::ReplacedOps::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const void **v10;
  mlir::CallGraphNode *v11;
  uint64_t CallableRegion;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t *v19;
  char v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const void ***v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char *v32;
  _QWORD v33[4];
  __int16 v34;
  const void **v35[4];
  __int16 v36;
  const void **v37[4];
  __int16 v38;
  unint64_t AttrDictionary;
  _BYTE v40[16];
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD v44[20];

  v44[19] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    v8 = "requires attribute 'function_type'";
LABEL_16:
    v37[0] = (const void **)v8;
    v38 = 259;
    mlir::OpState::emitOpError(this, v37, (uint64_t)&AttrDictionary);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
    return v14;
  }
  v6 = 0;
  v7 = 16 * v4;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    if (**(_QWORD **)((*this)[6] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      v6 = *((_QWORD *)Value + 1);
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v7 -= 16;
    if (!v7)
      goto LABEL_10;
  }
  if (!v7)
  {
LABEL_15:
    v8 = "requires attribute 'replaced_by'";
    goto LABEL_16;
  }
  v9 = 0;
  v10 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    v11 = (mlir::CallGraphNode *)((char *)Value + v9);
    CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9));
    v13 = *this;
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == CallableRegion)
      break;
    v9 += 16;
    if (v7 == v9)
      goto LABEL_15;
  }
  v16 = *((_QWORD *)v11 + 1);
  v17 = 0;
  for (i = v7 - v9; i; i -= 16)
  {
    v29 = mlir::CallGraphNode::getCallableRegion(v11);
    v13 = *this;
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) == v29)
      v17 = *((_QWORD *)v11 + 1);
    v11 = (mlir::CallGraphNode *)((char *)v11 + 16);
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(v13, v16, (const void **)"replaced_by", (const void **)0xB))return 0;
  if (v10)
  {
    v19 = *this;
    if (*((_UNKNOWN **)*v10 + 17) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id
      || (AttrDictionary = (unint64_t)v10,
          *(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&AttrDictionary) + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
      || (v37[0] = v10,
          *(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v37) + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id))
    {
      v38 = 257;
      mlir::Operation::emitOpError(v19, v37, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v40, "attribute '");
        if (AttrDictionary)
        {
          v38 = 261;
          v37[0] = (const void **)"function_type";
          v37[1] = (const void **)13;
          mlir::Diagnostic::operator<<((uint64_t)v40, v37);
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v40, "' failed to satisfy constraint: type attribute of function type");
        }
      }
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
      if (!v20)
        return 0;
    }
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, v6, (const void **)"arg_attrs", (const void **)9)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, v17, (const void **)"res_attrs", (const void **)9))
  {
    return 0;
  }
  v21 = *this;
  v22 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
        + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)*this + 10);
  v23 = *(_QWORD *)(v22 + 8);
  if (v23 != v22 && *(_QWORD *)(v23 + 8) == v22)
    return 1;
  v37[0] = (const void **)"region #";
  v38 = 259;
  mlir::Operation::emitOpError(v21, v37, (uint64_t)&AttrDictionary);
  if (AttrDictionary)
  {
    LODWORD(v35[0]) = 5;
    v35[1] = 0;
    v24 = v35;
    v25 = v41;
    if (v42 >= v43)
    {
      v31 = v42 + 1;
      if (v41 <= (unint64_t)v35 && v41 + 24 * v42 > (unint64_t)v35)
      {
        v32 = (char *)v35 - v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v25 = v41;
        v24 = (const void ***)&v32[v41];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v24 = v35;
        v25 = v41;
      }
    }
    v26 = v25 + 24 * v42;
    v27 = *(_OWORD *)v24;
    *(_QWORD *)(v26 + 16) = v24[2];
    *(_OWORD *)v26 = v27;
    ++v42;
    v28 = AttrDictionary == 0;
  }
  else
  {
    v28 = 1;
  }
  v34 = 1283;
  v33[0] = " ('";
  v33[2] = "body";
  v33[3] = 4;
  v35[0] = (const void **)v33;
  v35[2] = (const void **)"') ";
  v36 = 770;
  if (!v28)
  {
    mlir::Diagnostic::operator<<((uint64_t)v40, v35);
    if (AttrDictionary)
      mlir::Diagnostic::operator<<((uint64_t)v40, "failed to verify constraint: region with 1 blocks");
  }
  v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
  return v30 != 0;
}

BOOL mlir::placement::ReplacedOpsLiveOuts::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v7[2];
  uint64_t v8;
  void *v9[2];
  _QWORD v10[17];

  v10[16] = *MEMORY[0x1E0C80C00];
  v9[0] = v10;
  v9[1] = (void *)0x400000000;
  v7[0] = &v8;
  v7[1] = (void *)0x100000000;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = (*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, v9, 0, 1, 0xFFFFFFFFLL)&& ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1), (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))&& (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v7)&& mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v9, (uint64_t)v7, v4, a2 + 16) != 0;
  if (v7[0] != &v8)
    free(v7[0]);
  if (v9[0] != v10)
    free(v9[0]);
  return v5;
}

void mlir::placement::ReplacedOpsLiveOuts::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  mlir::Operation *v12;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  mlir::Operation *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  llvm::raw_ostream *v32;
  _WORD *v33;
  uint64_t v34;
  BOOL v36;
  uint64_t *v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40[2];
  unint64_t AttrDictionary;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[5];

  v47[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v7 = *((unsigned int *)v6 + 17);
    v8 = *((_QWORD *)v6 + 9);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  if (v7)
  {
    v10 = (llvm::raw_ostream *)v9;
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(v8 + 24));
    v11 = v7 - 1;
    if (v11)
    {
      v37 = (uint64_t *)(v8 + 56);
      do
      {
        v39 = (_WORD *)*((_QWORD *)v10 + 4);
        if (*((_QWORD *)v10 + 3) - (_QWORD)v39 > 1uLL)
        {
          *v39 = 8236;
          *((_QWORD *)v10 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v10, ", ", 2uLL);
        }
        v38 = *v37;
        v37 += 4;
        (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v38);
        --v11;
      }
      while (v11);
    }
  }
  v45 = v47;
  v46 = 0x200000000;
  v12 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v12);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v15, v45, v46);
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, ":", 1uLL);
  }
  else
  {
    *v19 = 58;
    ++*((_QWORD *)v18 + 4);
  }
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 32;
  }
  v22 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v23 = *((unsigned int *)v22 + 17);
    v24 = *((_QWORD *)v22 + 9);
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  v40[0] = v24;
  v40[1] = v23;
  mlir::OperandRange::getTypes(v40, (uint64_t *)&AttrDictionary);
  v26 = AttrDictionary;
  v25 = v42;
  v27 = v43;
  v28 = v44;
  if (AttrDictionary != v43 || v42 != v44)
  {
    v29 = AttrDictionary + 32 * v42;
    (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v26 != v27 || v25 + 1 != v28)
    {
      v30 = v28 - v25 - 2;
      v31 = (uint64_t *)(v29 + 56);
      do
      {
        v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v33 = (_WORD *)*((_QWORD *)v32 + 4);
        if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 1uLL)
        {
          *v33 = 8236;
          *((_QWORD *)v32 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v32, ", ", 2uLL);
        }
        v34 = *v31;
        v31 += 4;
        (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF8);
        v36 = v30-- != 0;
      }
      while (v26 != v27 || v36);
    }
  }
  if (v45 != v47)
    free(v45);
}

uint64_t mlir::placement::StartTimer::getReplacedOpsRef(mlir::Operation **this)
{
  uint64_t MultipliersAttr;
  uint64_t Value;

  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(this);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&MultipliersAttr);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

void mlir::placement::StartTimer::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7[2];

  mlir::NamedAttribute::NamedAttribute(v7, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, v7[0], v7[1]);
  v6 = *(unsigned int *)(a2 + 72);
  if (v6 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v6) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::placement::StartTimer::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (uint64_t *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(*this, Value[1], (const void **)"replaced_ops_ref", (const void **)0x10))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'replaced_ops_ref'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  char *v14;
  const void **v15[4];
  __int16 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  v17 = a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id)
    return 1;
  v16 = 261;
  v15[0] = a3;
  v15[1] = a4;
  mlir::Operation::emitOpError(a1, v15, (uint64_t)&v20);
  if (v20)
  {
    mlir::Diagnostic::operator<<((uint64_t)v21, " #");
    if (v20)
    {
      v18 = 5;
      v19 = a5;
      v6 = &v18;
      v7 = v22;
      if (v23 >= v24)
      {
        v13 = v23 + 1;
        if (v22 <= (unint64_t)&v18 && v22 + 24 * v23 > (unint64_t)&v18)
        {
          v14 = (char *)&v18 - v22;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v13, 24);
          v7 = v22;
          v6 = (int *)&v14[v22];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v13, 24);
          v6 = &v18;
          v7 = v22;
        }
      }
      v8 = v7 + 24 * v23;
      v9 = *(_OWORD *)v6;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v8 = v9;
      ++v23;
      if (v20)
        mlir::Diagnostic::operator<<((uint64_t)v21, " must be , but got ");
    }
  }
  v10 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v20, &v17);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
  if (v20)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
  return v11;
}

uint64_t mlir::placement::TensorToMemrefAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *Value;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  _QWORD v35[4];
  __int16 v36;
  _QWORD *v37;
  _QWORD v38[2];
  uint64_t OperandRange;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[24];

  v42[23] = *MEMORY[0x1E0C80C00];
  v40 = *a1;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
  if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40))
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v5 = *((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v6 = *((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v7 = (_QWORD *)*((_QWORD *)Value + 1);
      }
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
    }
    while (Value != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40));
    if (v7)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v7))
        goto LABEL_33;
      v8 = *v7;
      v9 = mlir::TypeID::get<mlir::ElementsAttr>();
      v10 = *(unsigned int *)(v8 + 16);
      if (!(_DWORD)v10)
        goto LABEL_20;
      v11 = *(_QWORD **)(v8 + 8);
      v12 = &v11[2 * v10];
      do
      {
        v13 = v10 >> 1;
        v14 = &v11[2 * (v10 >> 1)];
        v16 = *v14;
        v15 = v14 + 2;
        v10 += ~(v10 >> 1);
        if (v16 < v9)
          v11 = v15;
        else
          v10 = v13;
      }
      while (v10);
      if (v11 != v12 && *v11 == v9)
        v17 = v11[1];
      else
LABEL_20:
        v17 = 0;
      v35[0] = v7;
      v35[1] = v17;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v35);
      v19 = Type;
      if (!Type)
        goto LABEL_30;
      v20 = *Type;
      v21 = mlir::TypeID::get<mlir::ShapedType>();
      v22 = *(unsigned int *)(v20 + 16);
      if (!(_DWORD)v22)
        goto LABEL_30;
      v23 = *(_QWORD **)(v20 + 8);
      v24 = &v23[2 * v22];
      do
      {
        v25 = v22 >> 1;
        v26 = &v23[2 * (v22 >> 1)];
        v28 = *v26;
        v27 = v26 + 2;
        v22 += ~(v22 >> 1);
        if (v28 < v21)
          v23 = v27;
        else
          v22 = v25;
      }
      while (v22);
      if (v23 != v24 && *v23 == v21)
        v29 = v23[1];
      else
LABEL_30:
        v29 = 0;
      v41 = (uint64_t)v19;
      v42[0] = v29;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
      if (v30 != 1
        || (v37 = v7,
            v38[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37),
            v38[1] = v31,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_33:
        v32 = "'placement.tensor_to_memref' op attribute 'shape' failed to satisfy constraint: ui64 elements attribute of rank 1";
        goto LABEL_44;
      }
    }
  }
  if (v6)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      v32 = "'placement.tensor_to_memref' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
      goto LABEL_44;
    }
    v41 = v6;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  }
  if (!v5)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v35[0] = v5;
    v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v41, 32))
      return 1;
  }
  v32 = "'placement.tensor_to_memref' op attribute 'interleave' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_44:
  v35[0] = v32;
  v36 = 259;
  mlir::emitError(a2, (uint64_t)v35, (uint64_t)&v41);
  v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::placement::TensorToMemref::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  uint64_t OperandRange;
  unint64_t v18;
  const void *ArgAttrsAttr;
  unint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v28;
  mlir::CallGraphNode *v29;
  char v30;
  uint64_t v31;
  void *v32;
  mlir::CallGraphNode *v33;
  mlir::CallGraphNode *v34;
  mlir::CallGraphNode *v35;
  char v36;
  uint64_t v37;
  uint64_t RawStringData;
  uint64_t v39;
  int isSplat;
  unint64_t NumElements;
  unsigned int v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  mlir::CallGraphNode *v49;
  mlir::CallGraphNode *v50;
  mlir::CallGraphNode *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t Interleave;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  _QWORD v62[2];
  _QWORD v63[2];
  void *v64;
  uint64_t v65;
  _BYTE v66[40];
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v67 = a6;
  LOBYTE(v68) = 0;
  v69 = 0;
  v70 = a9;
  v71 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v69)
      v69 = 0;
    mlir::OperationName::OperationName(&v68, "placement.tensor_to_memref", 26, Context);
    v69 = 1;
  }
  v72 = a4;
  v73 = a5;
  if (a5)
  {
    v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::placement::TensorToMemrefAdaptor::verify(&v67, v15))
    {
      v64 = v72;
      v65 = 0;
      v16 = mlir::ValueRange::dereference_iterator(&v64, 0);
      v63[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
      v63[1] = a2;
      if (v63[0])
      {
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
        ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v63);
        v20 = v18;
        v64 = v66;
        v65 = 0x500000000;
        v21 = 8 * v18;
        if (8 * v18 < 0x29)
        {
          v22 = 0;
          if (!v18)
          {
LABEL_17:
            LODWORD(v65) = v22 + (v21 >> 3);
            Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
            v28 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
            v29 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v28, *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8));
            if ((v30 & 1) != 0)
            {
              v31 = *((_QWORD *)v29 + 1);
              if (v31)
              {
                v32 = *(void **)(*(_QWORD *)v31 + 136);
                if (v32 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
                  v31 = 0;
                v62[0] = v31;
                if (v32 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
                  OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v62);
              }
            }
            v33 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
            v34 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
            v35 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v33, v34, *(_QWORD *)(*(_QWORD *)(v68 + 96) + 16));
            if ((v36 & 1) == 0
              || (v37 = *((_QWORD *)v35 + 1)) == 0
              || !mlir::DenseIntElementsAttr::classof(*((_QWORD *)v35 + 1)))
            {
LABEL_47:
              v49 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
              v50 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
              v51 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v49, v50, **(_QWORD **)(v68 + 96));
              if ((v52 & 1) != 0)
              {
                v53 = *((_QWORD *)v51 + 1);
                if (v53)
                {
                  if (*(_UNKNOWN **)(*(_QWORD *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    v54 = v65;
                    if ((v65 & 0xFFFFFFFE) != 4)
                    {
                      v58 = mlir::UnrankedTensorType::get(OperandRange);
                      goto LABEL_55;
                    }
                    Interleave = mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave((mlir::placement::detail::MemrefToTensorGenericAdaptorBase *)&v67);
                    v56 = 16;
                    if ((_DWORD)v54 == 4)
                      v56 = 8;
                    v57 = (uint64_t *)v64;
                    *(_QWORD *)((char *)v64 + v56) *= Interleave;
                    v57[v54 - 1] /= Interleave;
                  }
                }
              }
              v58 = mlir::MemRefType::get(v64, (mlir::AffineMap *)v65, OperandRange, 0, 0, 0);
LABEL_55:
              v59 = v58;
              v60 = *(_DWORD *)(a11 + 8);
              if (v60 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v60 + 1, 8);
                v60 = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v60) = v59;
              ++*(_DWORD *)(a11 + 8);
              if (v64 != v66)
                free(v64);
              return 1;
            }
            v62[0] = v37;
            v62[1] = 1;
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v62, 8, 1, 0))
            {
              RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v62);
              LOBYTE(ArgAttrsAttr) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v62);
              mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v62);
            }
            else
            {
              RawStringData = 0;
            }
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v62, 8, 1, 0))
            {
              v39 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v62);
              isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v62);
              NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v62);
              v20 = NumElements;
              LODWORD(v65) = 0;
              if (NumElements <= HIDWORD(v65))
              {
                v42 = 0;
                v61 = RawStringData == v39 && isSplat == ArgAttrsAttr;
                v44 = v61;
                if (v61 && !NumElements)
                {
LABEL_46:
                  LODWORD(v65) = v42 + v20;
                  goto LABEL_47;
                }
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, NumElements, 8);
                v42 = v65;
                v43 = RawStringData == v39 && isSplat == ArgAttrsAttr;
                v44 = v43;
              }
            }
            else
            {
              v44 = 0;
              v42 = 0;
            }
            v45 = 0;
            v46 = (char *)v64 + 8 * v42;
            do
            {
              if ((_BYTE)ArgAttrsAttr)
                v47 = 0;
              else
                v47 = v45;
              *(_QWORD *)&v46[8 * v45] = *(_QWORD *)(RawStringData + 8 * v47);
              v43 = v20 - 1 == v45++;
              if (v43)
                v48 = v44;
              else
                v48 = 0;
            }
            while (v48 != 1);
            goto LABEL_46;
          }
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, (uint64_t)(8 * v18) >> 3, 8);
          v22 = v65;
          if (!v20)
            goto LABEL_17;
        }
        memcpy((char *)v64 + 8 * v22, ArgAttrsAttr, v21);
        v22 = v65;
        goto LABEL_17;
      }
    }
  }
  v23 = mlir::Float32Type::get(this, a2);
  v24 = mlir::UnrankedTensorType::get(v23);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::placement::TensorToMemref::build(mlir::UnknownLoc **a1, uint64_t a2, void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  mlir::UnknownLoc *v13;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  mlir::MLIRContext *v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24[2];
  void *__src;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::addOperands(a2, (uint64_t)a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v27;
  v26 = 0x200000000;
  v13 = *a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v24, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::placement::TensorToMemref::inferReturnTypes(v13, v16, v17, a3, a4, Dictionary, v18, v19, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v20 = __src;
  v21 = v26;
  v22 = *(unsigned int *)(a2 + 72);
  v23 = v22 + v26;
  if (v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v21)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (__src != v27)
    free(__src);
}

BOOL mlir::placement::TensorToMemref::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  const void **v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  uint64_t CallableRegion;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 16 * v4;
    do
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v11 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
      {
        v6 = (const void **)*((_QWORD *)Value + 1);
      }
      else
      {
        v12 = mlir::CallGraphNode::getCallableRegion(Value);
        v11 = *this;
        if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v12)
        {
          v7 = *((_QWORD *)Value + 1);
        }
        else
        {
          v13 = mlir::CallGraphNode::getCallableRegion(Value);
          v11 = *this;
          if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == v13)
            v8 = (const void **)*((_QWORD *)Value + 1);
        }
      }
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v11 = *this;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(v11, v8, (const void **)"shape", 5)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, v7, (const void **)"resultElementType", (const void **)0x11)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, v6, (const void **)"interleave", (const void **)0xA)|| !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7,
                           0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v14 = (uint64_t)(*this - 2);
  else
    v14 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

mlir::Operation *mlir::placement::TensorToMemref::verify(mlir::Operation **this)
{
  unsigned __int8 isSplat;
  uint64_t v2;
  mlir::Operation *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *ArgAttrsAttr;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t NumElements;
  unint64_t isValidIntOrFloat;
  uint64_t RawStringData;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *p_p;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *p_ShapeAttr;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  int v56;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  const void ***v69;
  uint64_t v70;
  __int128 v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  const void ***v77;
  uint64_t v78;
  __int128 v79;
  unint64_t v80;
  BOOL v81;
  unint64_t v82;
  BOOL v83;
  char *v84;
  char *v85;
  const void **v86;
  _BOOL8 v87;
  __int16 v88;
  uint64_t v89[2];
  mlir::Operation *v90;
  uint64_t ShapeAttr;
  _BOOL8 v92;
  void *InterleaveAttr;
  uint64_t v94;
  _BYTE v95[16];
  __int16 v96;
  void *__p;
  _QWORD v98[2];
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _QWORD v102[20];

  v102[19] = *MEMORY[0x1E0C80C00];
  v3 = *this;
  v90 = v3;
  v4 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v89[0] = (uint64_t)v4;
  v89[1] = v5;
  if (!mlir::placement::MemrefToTensor::getShapeAttr(&v90)
    || !v4
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89))
  {
    goto LABEL_23;
  }
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  if (v7)
  {
    v8 = 8 * v7;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v8 -= 8;
      if (!v8)
        goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_8:
  v9 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  NumElements = mlir::ShapedType::getNumElements(v9, v10);
  __p = (void *)mlir::placement::MemrefToTensor::getShapeAttr(&v90);
  v98[0] = __p != 0;
  isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&__p, 8, 1, 0);
  if ((isValidIntOrFloat & 1) == 0)
  {
    RawStringData = 0;
    if (isValidIntOrFloat < 2)
      goto LABEL_11;
LABEL_13:
    v15 = 0;
    v14 = isValidIntOrFloat & 0xFFFFFFFFFFFFFFFELL;
    v16 = 1;
    v17 = 1;
    do
    {
      if (isSplat)
        v18 = 0;
      else
        v18 = v15;
      if (isSplat)
        v19 = 0;
      else
        v19 = v15 + 1;
      v16 *= *(_QWORD *)(RawStringData + 8 * v18);
      v17 *= *(_QWORD *)(RawStringData + 8 * v19);
      v15 += 2;
    }
    while (v15 != v14);
    v2 = v17 * v16;
    goto LABEL_121;
  }
  RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&__p);
  isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&__p);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__p);
  isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&__p);
  if (!isValidIntOrFloat)
  {
    v2 = 1;
    goto LABEL_122;
  }
  if (isValidIntOrFloat >= 2)
    goto LABEL_13;
LABEL_11:
  v14 = 0;
  v2 = 1;
  do
  {
    if (isSplat)
      v63 = 0;
    else
      v63 = v14;
    v2 *= *(_QWORD *)(RawStringData + 8 * v63);
    ++v14;
LABEL_121:
    ;
  }
  while (isValidIntOrFloat != v14);
LABEL_122:
  if (NumElements != v2)
  {
    v96 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, (const void ***)&InterleaveAttr, (uint64_t)&__p);
    if (__p)
      mlir::Diagnostic::operator<<((uint64_t)v98, "Input shape ");
    v64 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&__p, v89);
    v65 = (uint64_t)v64;
    if (*v64)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v64 + 1), " (");
      if (*(_QWORD *)v65)
      {
        v66 = v65 + 24;
        v67 = *(_QWORD *)(v65 + 24);
        LODWORD(v86) = 5;
        v87 = NumElements;
        v68 = *(unsigned int *)(v65 + 32);
        v69 = &v86;
        if (v68 >= *(_DWORD *)(v65 + 36))
        {
          v80 = v68 + 1;
          v81 = v67 + 24 * v68 > (unint64_t)&v86;
          if (v67 <= (unint64_t)&v86 && v81)
          {
            v84 = (char *)&v86 - v67;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 40), v80, 24);
            v67 = *(_QWORD *)(v65 + 24);
            v69 = (const void ***)&v84[v67];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 40), v80, 24);
            v67 = *(_QWORD *)(v65 + 24);
            v69 = &v86;
          }
        }
        v70 = v67 + 24 * *(unsigned int *)(v65 + 32);
        v71 = *(_OWORD *)v69;
        *(_QWORD *)(v70 + 16) = v69[2];
        *(_OWORD *)v70 = v71;
        ++*(_DWORD *)(v65 + 32);
        if (*(_QWORD *)v65)
          mlir::Diagnostic::operator<<(v65 + 8, " elements) is not compatible with shape attribute ");
      }
    }
    ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    v92 = ShapeAttr != 0;
    v72 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Attribute>(v65, &ShapeAttr);
    v73 = (uint64_t)v72;
    if (*v72)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v72 + 1), " (");
      if (*(_QWORD *)v73)
      {
        v74 = v73 + 24;
        v75 = *(_QWORD *)(v73 + 24);
        LODWORD(v86) = 2;
        v87 = v2;
        v76 = *(unsigned int *)(v73 + 32);
        v77 = &v86;
        if (v76 >= *(_DWORD *)(v73 + 36))
        {
          v82 = v76 + 1;
          v83 = v75 + 24 * v76 > (unint64_t)&v86;
          if (v75 <= (unint64_t)&v86 && v83)
          {
            v85 = (char *)&v86 - v75;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 40), v82, 24);
            v75 = *(_QWORD *)(v73 + 24);
            v77 = (const void ***)&v85[v75];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 40), v82, 24);
            v75 = *(_QWORD *)(v73 + 24);
            v77 = &v86;
          }
        }
        v78 = v75 + 24 * *(unsigned int *)(v73 + 32);
        v79 = *(_OWORD *)v77;
        *(_QWORD *)(v78 + 16) = v77[2];
        *(_OWORD *)v78 = v79;
        ++*(_DWORD *)(v73 + 32);
        if (*(_QWORD *)v73)
          mlir::Diagnostic::operator<<(v73 + 8, " elements)");
      }
    }
    v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult(v73);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
    return v3;
  }
LABEL_23:
  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(&v90)
    || !v89[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89))
  {
    return (mlir::Operation *)1;
  }
  v20 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  if (v21)
  {
    v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22)
        goto LABEL_30;
    }
    return (mlir::Operation *)1;
  }
LABEL_30:
  InterleaveAttr = (void *)mlir::placement::MemrefToTensor::getInterleaveAttr(&v90);
  if (InterleaveAttr)
  {
    mlir::IntegerAttr::getValue(&InterleaveAttr, (llvm::APInt *)&__p);
    if (LODWORD(v98[0]) >= 0x41)
      p_p = (unsigned int *)__p;
    else
      p_p = (unsigned int *)&__p;
    v24 = *p_p;
    if (LODWORD(v98[0]) >= 0x41 && __p)
      operator delete[](__p);
  }
  else
  {
    v24 = 0;
  }
  mlir::getANENextSupportedInterleaveValue(v24);
  if (!v25)
  {
    v96 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, (const void ***)&InterleaveAttr, (uint64_t)&__p);
    if (__p)
      mlir::Diagnostic::operator<<((uint64_t)v98, "interleave factor not supported");
    v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
    return v3;
  }
  InterleaveAttr = v95;
  v94 = 0x400000000;
  if (mlir::placement::MemrefToTensor::getShapeAttr(&v90))
  {
    __p = (void *)mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    v98[0] = __p != 0;
    if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&__p, 8, 1, 0))
    {
      v26 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&__p);
      isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&__p);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__p);
      mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&__p);
    }
    else
    {
      v26 = 0;
    }
    v86 = (const void **)mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    v87 = v86 != 0;
    if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&v86, 8, 1, 0))
    {
      v34 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v86);
      v35 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v86);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      v36 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v86);
      v2 = v36;
      LODWORD(v94) = 0;
      if (v36 <= HIDWORD(v94))
      {
        v37 = 0;
        v58 = v26 == v34 && v35 == isSplat;
        v39 = v58;
        if (v58 && !v36)
        {
LABEL_70:
          v33 = v37 + v2;
          goto LABEL_71;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v95, v36, 8);
        v37 = v94;
        v38 = v26 == v34 && v35 == isSplat;
        v39 = v38;
      }
    }
    else
    {
      v39 = 0;
      v37 = 0;
    }
    v40 = 0;
    v41 = (char *)InterleaveAttr + 8 * v37;
    do
    {
      if (isSplat)
        v42 = 0;
      else
        v42 = v40;
      *(_QWORD *)&v41[8 * v40] = *(_QWORD *)(v26 + 8 * v42);
      v38 = v2 - 1 == v40++;
      if (v38)
        v43 = v39;
      else
        v43 = 0;
    }
    while (v43 != 1);
    goto LABEL_70;
  }
  v27 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  v28 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  v29 = 0;
  v31 = (_BYTE *)(v28 + 8 * v30);
  LODWORD(v94) = 0;
  v32 = (v31 - v27) >> 3;
  if (v32 > HIDWORD(v94))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v95, v32, 8);
    v29 = v94;
  }
  if (v31 != v27)
  {
    memcpy((char *)InterleaveAttr + 8 * v29, v27, v31 - v27);
    v29 = v94;
  }
  v33 = v29 + ((unint64_t)(v31 - v27) >> 3);
LABEL_71:
  LODWORD(v94) = v33;
  v44 = v33;
  if ((unint64_t)v33 - 6 > 0xFFFFFFFFFFFFFFFDLL)
  {
    v86 = (const void **)mlir::placement::MemrefToTensor::getInterleaveAttr(&v90);
    if (v86)
    {
      mlir::IntegerAttr::getValue(&v86, (llvm::APInt *)&__p);
      if (LODWORD(v98[0]) >= 0x41)
        v45 = (unsigned int *)__p;
      else
        v45 = (unsigned int *)&__p;
      v46 = *v45;
      if (LODWORD(v98[0]) >= 0x41 && __p)
        operator delete[](__p);
    }
    else
    {
      v46 = 0;
    }
    if (!(*((_QWORD *)InterleaveAttr + v44 - 1) % v46))
    {
      v56 = 1;
      goto LABEL_93;
    }
    v88 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, &v86, (uint64_t)&__p);
    if (__p)
    {
      mlir::Diagnostic::operator<<((uint64_t)v98, "width ");
      if (__p)
      {
        v47 = *((_QWORD *)InterleaveAttr + v44 - 1);
        LODWORD(ShapeAttr) = 2;
        v92 = v47;
        p_ShapeAttr = &ShapeAttr;
        v49 = v99;
        if (v100 >= v101)
        {
          v59 = v100 + 1;
          if (v99 <= (unint64_t)&ShapeAttr && v99 + 24 * v100 > (unint64_t)&ShapeAttr)
          {
            v61 = (char *)&ShapeAttr - v99;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v59, 24);
            v49 = v99;
            p_ShapeAttr = (uint64_t *)&v61[v99];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v59, 24);
            p_ShapeAttr = &ShapeAttr;
            v49 = v99;
          }
        }
        v50 = v49 + 24 * v100;
        v51 = *(_OWORD *)p_ShapeAttr;
        *(_QWORD *)(v50 + 16) = p_ShapeAttr[2];
        *(_OWORD *)v50 = v51;
        ++v100;
        if (__p)
        {
          mlir::Diagnostic::operator<<((uint64_t)v98, " must be a multiple of interleave ");
          if (__p)
          {
            LODWORD(ShapeAttr) = 2;
            v92 = v46;
            v52 = &ShapeAttr;
            v53 = v99;
            if (v100 >= v101)
            {
              v60 = v100 + 1;
              if (v99 <= (unint64_t)&ShapeAttr && v99 + 24 * v100 > (unint64_t)&ShapeAttr)
              {
                v62 = (char *)&ShapeAttr - v99;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v60, 24);
                v53 = v99;
                v52 = (uint64_t *)&v62[v99];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v60, 24);
                v52 = &ShapeAttr;
                v53 = v99;
              }
            }
            v54 = v53 + 24 * v100;
            v55 = *(_OWORD *)v52;
            *(_QWORD *)(v54 + 16) = v52[2];
            *(_OWORD *)v54 = v55;
            ++v100;
          }
        }
      }
    }
  }
  else
  {
    v88 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, &v86, (uint64_t)&__p);
    if (__p)
      mlir::Diagnostic::operator<<((uint64_t)v98, "Interleave can only be applied on 4D or 5D tensor");
  }
  v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
  v56 = 0;
LABEL_93:
  if (InterleaveAttr != v95)
    free(InterleaveAttr);
  if (v56)
    return (mlir::Operation *)1;
  return v3;
}

uint64_t mlir::placement::`anonymous namespace'::isCompatibleMemrefTensorOpReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  const void *ArgAttrsAttr;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t OperandRange;
  _QWORD v22[2];
  _QWORD v23[2];

  result = 1;
  if (a2 && a4)
  {
    v7 = 0;
    v8 = a2 - 1;
    v9 = a4 - 1;
    while (1)
    {
      v10 = (uint64_t *)mlir::TypeRange::dereference_iterator(a1, v7);
      v11 = (uint64_t *)mlir::TypeRange::dereference_iterator(a3, v7);
      v23[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v10);
      v23[1] = v12;
      v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v11);
      v22[0] = v13;
      v22[1] = v14;
      v15 = !v23[0] || v13 == 0;
      if (v15)
        break;
      ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v23);
      v18 = v17;
      v19 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
      if (v18 != v20 || memcmp(ArgAttrsAttr, v19, 8 * v18))
        break;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v23);
      v15 = OperandRange == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
      result = v15;
      if (v15 && v8 != v7)
      {
        v15 = v9 == v7++;
        if (!v15)
          continue;
      }
      return result;
    }
    return 0;
  }
  return result;
}

void mlir::placement::TensorToMemref::getOutputShapeBeforeInterleave(mlir::Operation **this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 isSplat;
  unint64_t v3;
  uint64_t RawStringData;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *ArgAttrsAttr;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unint64_t NumElements;
  _DWORD *v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD v42[2];

  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(this))
  {
    if (*((_DWORD *)*this + 9))
      v7 = (uint64_t)*this - 16;
    else
      v7 = 0;
    v8 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v8)
      goto LABEL_25;
    v9 = *v8;
    v10 = mlir::TypeID::get<mlir::ShapedType>();
    v11 = *(unsigned int *)(v9 + 16);
    if (!(_DWORD)v11)
      goto LABEL_25;
    v12 = *(_QWORD **)(v9 + 8);
    v13 = &v12[2 * v11];
    do
    {
      v14 = v11 >> 1;
      v15 = &v12[2 * (v11 >> 1)];
      v17 = *v15;
      v16 = v15 + 2;
      v11 += ~(v11 >> 1);
      if (v17 < v10)
        v12 = v16;
      else
        v11 = v14;
    }
    while (v11);
    goto LABEL_23;
  }
  v42[0] = mlir::placement::MemrefToTensor::getShapeAttr(this);
  if (!v42[0])
  {
    v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v8)
      goto LABEL_25;
    v18 = *v8;
    v10 = mlir::TypeID::get<mlir::ShapedType>();
    v19 = *(unsigned int *)(v18 + 16);
    if (!(_DWORD)v19)
      goto LABEL_25;
    v12 = *(_QWORD **)(v18 + 8);
    v13 = &v12[2 * v19];
    do
    {
      v20 = v19 >> 1;
      v21 = &v12[2 * (v19 >> 1)];
      v23 = *v21;
      v22 = v21 + 2;
      v19 += ~(v19 >> 1);
      if (v23 < v10)
        v12 = v22;
      else
        v19 = v20;
    }
    while (v19);
LABEL_23:
    if (v12 != v13 && *v12 == v10)
    {
      v24 = v12[1];
LABEL_26:
      v42[0] = v8;
      v42[1] = v24;
      ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
      v27 = v25;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 8) = 0x500000000;
      if ((unint64_t)(8 * v25) < 0x29)
      {
        v28 = 0;
        if (!v25)
          goto LABEL_29;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), (8 * v25) >> 3, 8);
        v28 = *(_DWORD *)(a2 + 8);
        if (!v27)
        {
LABEL_29:
          *(_DWORD *)(a2 + 8) = v28 + v27;
          return;
        }
      }
      memcpy((void *)(*(_QWORD *)a2 + 8 * v28), ArgAttrsAttr, 8 * v27);
      v28 = *(_DWORD *)(a2 + 8);
      goto LABEL_29;
    }
LABEL_25:
    v24 = 0;
    goto LABEL_26;
  }
  if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v42, 8, 1, 0))
  {
    RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v42);
    isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v42);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v42);
    mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v42);
  }
  else
  {
    RawStringData = 0;
  }
  if ((mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v42, 8, 1, 0) & 1) != 0)
  {
    v29 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v42);
    v30 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v42);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v42);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v42);
    v3 = NumElements;
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 0x500000000;
    v32 = (_DWORD *)(a2 + 8);
    if (NumElements < 6)
    {
      v33 = 0;
      v37 = RawStringData == v29 && v30 == isSplat;
      v35 = v37;
      if (v37 && !NumElements)
        return;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), NumElements, 8);
      v33 = *(_DWORD *)(a2 + 8);
      v34 = RawStringData == v29 && v30 == isSplat;
      v35 = v34;
    }
    v36 = *(_QWORD *)a2;
  }
  else
  {
    v35 = 0;
    v33 = 0;
    v36 = a2 + 16;
    *(_QWORD *)a2 = a2 + 16;
    v32 = (_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 5;
  }
  v38 = 0;
  v39 = v36 + 8 * v33;
  do
  {
    if (isSplat)
      v40 = 0;
    else
      v40 = v38;
    *(_QWORD *)(v39 + 8 * v38) = *(_QWORD *)(RawStringData + 8 * v40);
    v34 = v3 - 1 == v38++;
    if (v34)
      v41 = v35;
    else
      v41 = 0;
  }
  while (v41 != 1);
  *v32 = v33 + v3;
}

void mlir::placement::MemrefToTensor::getInputShapeAfterInterleave(mlir::Operation **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *ArgAttrsAttr;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *p_p;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;
  uint64_t InterleaveAttr;

  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(this))
  {
    v19 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v19)
      goto LABEL_36;
    v20 = *v19;
    v21 = mlir::TypeID::get<mlir::ShapedType>();
    v22 = *(unsigned int *)(v20 + 16);
    if (!(_DWORD)v22)
      goto LABEL_36;
    v23 = *(_QWORD **)(v20 + 8);
    v24 = &v23[2 * v22];
    do
    {
      v25 = v22 >> 1;
      v26 = &v23[2 * (v22 >> 1)];
      v28 = *v26;
      v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21)
        v23 = v27;
      else
        v22 = v25;
    }
    while (v22);
LABEL_34:
    if (v23 != v24 && *v23 == v21)
    {
      v36 = v23[1];
LABEL_37:
      __p = v19;
      v47 = v36;
      ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__p);
      v39 = v37;
      *a2 = a2 + 2;
      a2[1] = 0x500000000;
      if ((unint64_t)(8 * v37) < 0x29)
      {
        v40 = 0;
        if (!v37)
        {
LABEL_42:
          *((_DWORD *)a2 + 2) = v40 + v39;
          return;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 2, (8 * v37) >> 3, 8);
        v40 = *((_DWORD *)a2 + 2);
        if (!v39)
          goto LABEL_42;
      }
      memcpy((void *)(*a2 + 8 * v40), ArgAttrsAttr, 8 * v39);
      v40 = *((_DWORD *)a2 + 2);
      goto LABEL_42;
    }
LABEL_36:
    v36 = 0;
    goto LABEL_37;
  }
  if (!mlir::placement::MemrefToTensor::getShapeAttr(this))
  {
    if (*((_DWORD *)*this + 9))
      v29 = (uint64_t)*this - 16;
    else
      v29 = 0;
    v19 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v29, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v19)
      goto LABEL_36;
    v30 = *v19;
    v21 = mlir::TypeID::get<mlir::ShapedType>();
    v31 = *(unsigned int *)(v30 + 16);
    if (!(_DWORD)v31)
      goto LABEL_36;
    v23 = *(_QWORD **)(v30 + 8);
    v24 = &v23[2 * v31];
    do
    {
      v32 = v31 >> 1;
      v33 = &v23[2 * (v31 >> 1)];
      v35 = *v33;
      v34 = v33 + 2;
      v31 += ~(v31 >> 1);
      if (v35 < v21)
        v23 = v34;
      else
        v31 = v32;
    }
    while (v31);
    goto LABEL_34;
  }
  v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_12;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_12;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_12:
    v14 = 0;
  __p = v4;
  v47 = v14;
  v16 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__p);
  v17 = v15;
  *a2 = a2 + 2;
  a2[1] = 0x500000000;
  if ((unint64_t)(8 * v15) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 2, (8 * v15) >> 3, 8);
    v18 = *((_DWORD *)a2 + 2);
    if (!v17)
      goto LABEL_45;
    goto LABEL_44;
  }
  v18 = 0;
  if (v15)
  {
LABEL_44:
    memcpy((void *)(*a2 + 8 * v18), v16, 8 * v17);
    v18 = *((_DWORD *)a2 + 2);
  }
LABEL_45:
  v41 = v18 + v17;
  *((_DWORD *)a2 + 2) = v41;
  InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(this);
  if (InterleaveAttr)
  {
    mlir::IntegerAttr::getValue(&InterleaveAttr, (llvm::APInt *)&__p);
    if (v47 >= 0x41)
      p_p = (unsigned int *)__p;
    else
      p_p = (unsigned int *)&__p;
    v43 = *p_p;
    if (v47 >= 0x41 && __p)
      operator delete[](__p);
  }
  else
  {
    v43 = 0;
  }
  v44 = 16;
  if ((_DWORD)v41 == 4)
    v44 = 8;
  v45 = *a2;
  *(_QWORD *)(v45 + v44) = *(_QWORD *)(*a2 + v44) / v43;
  *(_QWORD *)(v45 + 8 * v41 - 8) *= v43;
}

uint64_t mlir::placement::MemrefToTensor::fold(mlir::Operation **a1)
{
  uint64_t DefiningOp;
  uint64_t v3;
  void *v4;
  BOOL v5;
  mlir::Operation *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t NextResultAtOffset;
  uint64_t InterleaveAttr;
  uint64_t v12;
  mlir::Operation *v13;

  v12 = *(_QWORD *)(*((_QWORD *)*a1 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!DefiningOp)
    return 0;
  v3 = DefiningOp;
  v4 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v5 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id;
  v6 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id
     ? (mlir::Operation *)DefiningOp
     : 0;
  v13 = v6;
  if (!v5)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*((_DWORD *)*a1 + 9))
    v9 = (uint64_t)*a1 - 16;
  else
    v9 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0);
  result = 0;
  if (v8 == (*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(a1);
    if (InterleaveAttr == mlir::placement::MemrefToTensor::getInterleaveAttr(&v13)
      && !mlir::placement::MemrefToTensor::getResultElementTypeAttr(a1)
      && !mlir::placement::MemrefToTensor::getResultElementTypeAttr(&v13))
    {
      return *(_QWORD *)(*(_QWORD *)(v3 + 72) + 24) | 4;
    }
    return 0;
  }
  return result;
}

uint64_t mlir::placement::ReplacedOps::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::placement::ReplacedOps::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24));
}

uint64_t mlir::placement::RegionCall::verifySymbolUses(mlir::placement::RegionCall *this, mlir::SymbolTableCollection *a2)
{
  uint64_t v4;
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v26;
  const void **AttrData;
  uint64_t v28;
  char *v29;
  int Kind;
  int v31;
  const void **v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t NumResults;
  unint64_t v37;
  const void **v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  const void ***v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t canMapOperands;
  _QWORD v66[2];
  const void **v67[4];
  __int16 v68;
  uint64_t v69;
  const void **Value;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  _QWORD v74[24];

  v74[23] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47)
    && (InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"callee", 6), v6))
  {
    v7 = InherentAttr;
    if (!InherentAttr)
      goto LABEL_10;
  }
  else
  {
    v7 = mlir::DictionaryAttr::get(v4 + 56, "callee", 6uLL);
    if (!v7)
    {
LABEL_10:
      v11 = "requires a 'callee' symbol reference attribute";
      goto LABEL_11;
    }
  }
  v8 = *(void **)(*(_QWORD *)v7 + 136);
  v9 = v8 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  if (v8 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
    v10 = v7;
  else
    v10 = 0;
  v73 = v10;
  if (!v9)
    goto LABEL_10;
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v73);
  v15 = v14 ? 0 : v7;
  v69 = v15;
  if (!v15)
    goto LABEL_10;
  v16 = mlir::SymbolTableCollection::lookupNearestSymbolFrom((uint64_t)a2, *(mlir::SymbolTable **)this, v15);
  if (!v16)
  {
    v68 = 257;
    mlir::OpState::emitOpError((uint64_t **)this, v67, (uint64_t)&v73);
    if (v73)
      mlir::Diagnostic::operator<<((uint64_t)v74, "'");
    Value = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v69);
    AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
    if (!v73)
      goto LABEL_75;
    v72 = 261;
    Value = AttrData;
    v71 = v28;
    mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
    if (!v73)
      goto LABEL_75;
    v29 = "' does not reference a valid function";
    goto LABEL_74;
  }
  v17 = v16;
  v18 = *(void **)(*(_QWORD *)(v16 + 48) + 16);
  if (v18 == &mlir::detail::TypeIDResolver<mlir::anec::A12,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A13,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A14,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A15,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A16,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A17,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A11Legacy,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id)
  {
    v26 = 1;
  }
  else if (v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
  {
    v26 = 0;
  }
  else
  {
    v26 = 2 * (v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::CPUOp,void>::id);
  }
  if (*(_DWORD *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this) + 8) != v26)
  {
    v68 = 257;
    mlir::OpState::emitOpError((uint64_t **)this, v67, (uint64_t)&v73);
    if (v73)
      mlir::Diagnostic::operator<<((uint64_t)v74, "failed: callee of type '");
    if (v73)
    {
      v38 = (const void **)(&off_1E0E54A68)[v26];
      v72 = 261;
      Value = v38;
      v71 = 3;
      mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
      if (v73)
        mlir::Diagnostic::operator<<((uint64_t)v74, "' does not match the call region type ('");
    }
    v39 = *(int *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this) + 8);
    if (v39 > 2)
    {
      v41 = 0;
      v40 = "";
    }
    else
    {
      v40 = (&off_1E0E54A68)[v39];
      v41 = 3;
    }
    if (!v73)
      goto LABEL_75;
    v72 = 261;
    Value = (const void **)v40;
    v71 = v41;
    mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
    if (!v73)
      goto LABEL_75;
    v29 = "')";
LABEL_74:
    mlir::Diagnostic::operator<<((uint64_t)v74, v29);
LABEL_75:
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    goto LABEL_13;
  }
  v66[0] = v17;
  v66[1] = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(v17);
  canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v66);
  Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&canMapOperands);
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) == 0)
  {
    if (!Kind)
      goto LABEL_55;
LABEL_105:
    v11 = "incorrect number of operands for callee";
    goto LABEL_11;
  }
  if (Kind != *(_DWORD *)(*(_QWORD *)this + 68))
    goto LABEL_105;
LABEL_55:
  v31 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&canMapOperands);
  if (v31)
  {
    v32 = 0;
    v33 = v31;
    v34 = 24;
    while (1)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + v34) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)(mlir::FunctionType::getInputs((mlir::FunctionType *)&canMapOperands) + 8 * (_QWORD)v32) != v35)
        break;
      v32 = (const void **)((char *)v32 + 1);
      v34 += 32;
      if (v33 == (_DWORD)v32)
        goto LABEL_59;
    }
    Value = (const void **)"operand type mismatch: expected operand type ";
    v72 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, &Value, (uint64_t)&v73);
    v64 = *(_QWORD *)(mlir::FunctionType::getInputs((mlir::FunctionType *)&canMapOperands) + 8 * (_QWORD)v32);
    v42 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v73, &v64);
    v43 = (uint64_t)v42;
    if (*v42)
      mlir::Diagnostic::operator<<((uint64_t)(v42 + 1), ", but provided ");
    v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + v34) + 8) & 0xFFFFFFFFFFFFFFF8;
    v44 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>(v43, (uint64_t *)&v63);
    v45 = (uint64_t)v44;
    if (*v44)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v44 + 1), " for operand number ");
      if (*(_QWORD *)v45)
      {
        v46 = v45 + 24;
        v47 = *(_QWORD *)(v45 + 24);
        LODWORD(v67[0]) = 5;
        v67[1] = v32;
        v48 = *(unsigned int *)(v45 + 32);
        v49 = v67;
        if (v48 >= *(_DWORD *)(v45 + 36))
        {
          v60 = v48 + 1;
          v61 = v47 + 24 * v48 > (unint64_t)v67;
          if (v47 <= (unint64_t)v67 && v61)
          {
            v62 = (char *)v67 - v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v46, (void *)(v45 + 40), v60, 24);
            v47 = *(_QWORD *)(v45 + 24);
            v49 = (const void ***)&v62[v47];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v46, (void *)(v45 + 40), v60, 24);
            v47 = *(_QWORD *)(v45 + 24);
            v49 = v67;
          }
        }
        v50 = v47 + 24 * *(unsigned int *)(v45 + 32);
        v51 = *(_OWORD *)v49;
        *(_QWORD *)(v50 + 16) = v49[2];
        *(_OWORD *)v50 = v51;
        ++*(_DWORD *)(v45 + 32);
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v45);
    if (v73)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    goto LABEL_13;
  }
LABEL_59:
  if (mlir::FunctionType::getNumResults((mlir::FunctionType *)&canMapOperands) == *(_DWORD *)(*(_QWORD *)this + 36))
  {
    NumResults = mlir::FunctionType::getNumResults((mlir::FunctionType *)&canMapOperands);
    if ((_DWORD)NumResults)
    {
      v12 = NumResults;
      v37 = *(_QWORD *)(*(_QWORD *)this - 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) == v37)
      {
        if ((_DWORD)v12 == 1)
          return v12;
        v52 = *(_QWORD *)(*(_QWORD *)this - 24) & 0xFFFFFFFFFFFFFFF8;
        if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 8) == v52)
        {
          if ((_DWORD)v12 == 2)
            return 1;
          v53 = *(_QWORD *)(*(_QWORD *)this - 40) & 0xFFFFFFFFFFFFFFF8;
          if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 16) == v53)
          {
            if ((_DWORD)v12 == 3)
              return 1;
            v54 = *(_QWORD *)(*(_QWORD *)this - 56) & 0xFFFFFFFFFFFFFFF8;
            if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 24) == v54)
            {
              if ((_DWORD)v12 == 4)
                return 1;
              v55 = *(_QWORD *)(*(_QWORD *)this - 72) & 0xFFFFFFFFFFFFFFF8;
              if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 32) == v55)
              {
                if ((_DWORD)v12 == 5)
                  return 1;
                v56 = *(_QWORD *)(*(_QWORD *)this - 88) & 0xFFFFFFFFFFFFFFF8;
                if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 40) == v56)
                {
                  v57 = v12 - 6;
                  if ((_DWORD)v12 == 6)
                    return 1;
                  v58 = 0;
                  while (1)
                  {
                    v59 = *(_QWORD *)(*(_QWORD *)this - 24 * (v58 + 1) - 88) & 0xFFFFFFFFFFFFFFF8;
                    if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 8 * v58 + 48) != v59)
                      break;
                    ++v58;
                    v12 = 1;
                    if (v57 == (_DWORD)v58)
                      return v12;
                  }
                }
              }
            }
          }
        }
      }
      Value = (const void **)"result type mismatch";
      v72 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, &Value, (uint64_t)&v73);
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v73);
      return v12;
    }
    return 1;
  }
  v11 = "incorrect number of results for callee";
LABEL_11:
  Value = (const void **)v11;
  v72 = 259;
  mlir::OpState::emitOpError((uint64_t **)this, &Value, (uint64_t)&v73);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
  if (v73)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
LABEL_13:
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v74);
  return v12;
}

float mlir::placement::RegionCall::getExecutionCost(uint64_t *a1)
{
  uint64_t v2;
  uint64_t InherentAttr;
  char v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  float *v8;
  uint64_t v9;
  mlir::Block *ParentOp;
  int v11;
  float result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t NextResultAtOffset;
  float *v22[3];
  int v23;
  int v24;
  float v25;

  v2 = *a1;
  if (!*(_BYTE *)(*a1 + 47) || (InherentAttr = mlir::Operation::getInherentAttr(*a1, (uint64_t)"callee", 6), !v4))
    InherentAttr = mlir::DictionaryAttr::get(v2 + 56, "callee", 6uLL);
  v5 = InherentAttr;
  if (InherentAttr)
  {
    v6 = *(void **)(*(_QWORD *)InherentAttr + 136);
    v7 = v6 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
    if (v6 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
      v8 = (float *)InherentAttr;
    else
      v8 = 0;
    v22[0] = v8;
    if (v7)
    {
      mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v22);
      if (v9)
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
  }
  ParentOp = (mlir::Block *)*a1;
  do
  {
    ParentOp = (mlir::Block *)*((_QWORD *)ParentOp + 2);
    if (!ParentOp)
      break;
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    if (!ParentOp)
      break;
  }
  while (*(_UNKNOWN **)(*((_QWORD *)ParentOp + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id);
  mlir::SymbolTable::lookupSymbolIn((uint64_t)ParentOp, v5);
  v25 = 0.0;
  v11 = *(_DWORD *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)a1) + 8);
  if (v11)
  {
    result = 0.0;
    if (v11 == 1)
      return 0.0008;
  }
  else
  {
    v24 = 1317060348;
    v23 = 1132462080;
    v22[0] = &v25;
    v22[1] = (float *)&v23;
    v22[2] = (float *)&v24;
    v13 = *a1;
    if ((*(_BYTE *)(*a1 + 46) & 0x80) != 0)
    {
      v14 = *(unsigned int *)(v13 + 68);
      if ((_DWORD)v14)
      {
        v15 = (uint64_t *)(*(_QWORD *)(v13 + 72) + 24);
        do
        {
          v16 = *v15;
          v15 += 4;
          mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(v22, v16);
          --v14;
        }
        while (v14);
        v13 = *a1;
      }
    }
    v17 = *(unsigned int *)(v13 + 36);
    v18 = v13 - 16;
    if ((_DWORD)v17)
      v19 = v18;
    else
      v19 = 0;
    if ((_DWORD)v17)
    {
      for (i = 0; i != v17; ++i)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, i);
        mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(v22, NextResultAtOffset);
      }
    }
    return v25;
  }
  return result;
}

float mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(float **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  float v20;
  float result;
  _QWORD v22[2];
  uint64_t OperandRange;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v3)
    goto LABEL_10;
  v4 = *v3;
  v5 = mlir::TypeID::get<mlir::ShapedType>();
  v6 = *(unsigned int *)(v4 + 16);
  if (!(_DWORD)v6)
    goto LABEL_10;
  v7 = *(_QWORD **)(v4 + 8);
  v8 = &v7[2 * v6];
  do
  {
    v9 = v6 >> 1;
    v10 = &v7[2 * (v6 >> 1)];
    v12 = *v10;
    v11 = v10 + 2;
    v6 += ~(v6 >> 1);
    if (v12 < v5)
      v7 = v11;
    else
      v6 = v9;
  }
  while (v6);
  if (v7 != v8 && *v7 == v5)
    v13 = v7[1];
  else
LABEL_10:
    v13 = 0;
  v22[0] = v3;
  v22[1] = v13;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v22))
  {
LABEL_17:
    v20 = 32768.0;
    goto LABEL_18;
  }
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
  if (v15)
  {
    v16 = 8 * v15;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v16 -= 8;
      if (!v16)
        goto LABEL_16;
    }
    goto LABEL_17;
  }
LABEL_16:
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
  v17 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange) >> 3;
  v18 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
  v20 = (float)v17 * (float)mlir::ShapedType::getNumElements(v18, v19);
LABEL_18:
  result = (float)((float)(v20 / *a1[1]) / *a1[2]) + **a1;
  **a1 = result;
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::HostTypeCast>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.host_type_cast", 24, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E47708;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOps>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.replaced_ops", 22, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::ReplacedOps,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E47640;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::placement::ReplacedOps::getAttributeNames(void)::attrNames, 4);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOpsLiveOuts>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.live_outs", 19, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::ReplacedOpsLiveOuts,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E47960;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::StartTimer>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.start_timer", 21, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::StartTimer,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E47578;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::placement::StartTimer::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::StopTimer>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.stop_timer", 20, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::StopTimer,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E47A28;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::ANEIOCast>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v11, v5, v4);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"placement.ane_io_cast", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id, (uint64_t)&v11);
  v6 = v11;
  if ((_DWORD)v12)
  {
    v7 = 16 * v12;
    v8 = (void **)((char *)v11 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    v6 = v11;
  }
  if (v6 != v13)
    free(v6);
  *a1 = &off_1E0DFB008;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  char v7;
  llvm **v8;
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v6 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2, a3, a4, a5);
  v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v8 = v10;
      else
        v8 = (llvm **)v10[0];
      (*(void (**)(uint64_t, void *))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v5);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return v6;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  char v7;
  llvm **v8;
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  v6 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v8 = v10;
      else
        v8 = (llvm **)v10[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  char v6;
  llvm **v7;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)&llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
     + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
    {
      if ((v9 & 2) != 0)
        v7 = v8;
      else
        v7 = (llvm **)v8[0];
      result = (*(uint64_t (**)(llvm **))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))(v7);
    }
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::placement::ANEIOCast>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::placement::ANEIOCast>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mlir::placement::detail::ANEIOCastGenericAdaptorBase::ANEIOCastGenericAdaptorBase((uint64_t)v13, this);
  v14 = a2;
  v15 = a3;
  v12 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id
      && (v9 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24),
          (*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)this - 1) & 0xFFFFFFFFFFFFFFF8))
      && (v10 = v9 | 4, (v9 | 4uLL) >= 8))
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v9 & 0xFFFFFFFFFFFFFFF8))
      {
        v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2;
}

void *mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  void **p_vtable;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v0 & 1) == 0)
  {
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v12 = 104;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    }
  }
  return p_vtable[501];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  uint64_t *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::ANEIOCast>,mlir::OpTrait::OneResult<mlir::placement::ANEIOCast>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::placement::ANEIOCast>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ANEIOCast>,mlir::OpTrait::OneOperand<mlir::placement::ANEIOCast>,mlir::OpTrait::OpInvariants<mlir::placement::ANEIOCast>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::ANEIOCast>>((uint64_t)a1, a2))return 0;
  v4 = a1;
  return mlir::placement::ANEIOCast::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::ANEIOCast>,mlir::OpTrait::OneResult<mlir::placement::ANEIOCast>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::placement::ANEIOCast>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ANEIOCast>,mlir::OpTrait::OneOperand<mlir::placement::ANEIOCast>,mlir::OpTrait::OpInvariants<mlir::placement::ANEIOCast>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::ANEIOCast>>(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;

  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
    || !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0((uint64_t *)a1, (const void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 36))
    v6 = a1 - 16;
  else
    v6 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0((uint64_t *)a1, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t (*)()))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __guard v9;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2;
}

__guard mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HostTypeConversion<Empty>]";
      v12 = 90;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[401];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  uint64_t v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 9))
    v6 = (uint64_t)a1 - 16;
  else
    v6 = 0;
  mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return 1;
}

uint64_t mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"placement.memref_to_tensor", 26, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E477D0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::placement::MemrefToTensor::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::MemrefToTensor>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::MemrefToTensor>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  _QWORD *v14;
  char *v16[2];
  unint64_t v17[2];
  unint64_t v18[2];
  void *v19;
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;
  _QWORD v23[24];

  v11 = a3;
  v23[23] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x400000000;
  if (!mlir::placement::MemrefToTensor::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v19))goto LABEL_8;
  mlir::ValueRange::ValueRange(v18, (uint64_t)v19, v20);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  {
    v13 = 1;
    goto LABEL_9;
  }
  v16[0] = "placement.memref_to_tensor";
  v16[1] = (char *)26;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v22);
    v14 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v22, "'", v16, "' op inferred type(s) ", (uint64_t)&v19, " are incompatible with return type(s) of operation ", a11);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v22)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
  }
  else
  {
LABEL_8:
    v13 = 0;
  }
LABEL_9:
  if (v19 != v21)
    free(v19);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  mlir::Operation *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::placement::detail::MemrefToTensorGenericAdaptorBase::MemrefToTensorGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::placement::MemrefToTensor::fold(&v13);
  v10 = v9;
  if (v9 < 8
    || (mlir::Operation *)((char *)a2 - 16) == (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __guard v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<Empty>]";
      v12 = 110;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[195];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::placement::MemrefToTensor::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::placement::MemrefToTensor::verify(&v7) != 0;
}

BOOL mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::verifySymbolUses;
  v5 = mlir::TypeID::get<mlir::SymbolUserOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x10uLL);
  *v6 = mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumOperandAlignment;
  v6[1] = mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumResultAlignment;
  v7 = mlir::TypeID::get<mlir::MinimumAlignmentInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::ExecutionCostOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getExecutionCost;
  v9 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"placement.region_call", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E474B0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::verifySymbolUses(int a1, uint64_t a2, mlir::SymbolTableCollection *a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::placement::RegionCall::verifySymbolUses((mlir::placement::RegionCall *)&v4, a3);
}

uint64_t mlir::TypeID::get<mlir::SymbolUserOpInterface>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
      v12 = 77;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[155];
}

uint64_t mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumOperandAlignment()
{
  return 0x4000;
}

uint64_t mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumResultAlignment()
{
  return 0x4000;
}

float mlir::detail::ExecutionCostOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::placement::RegionCall::getExecutionCost(&v3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  __guard v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __guard v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::ExecutionCostOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ExecutionCostOpInterface::Trait>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == (_QWORD)a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == a2
      || v9 == (_QWORD)a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2;
}

__guard mlir::TypeID::get<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v12 = 87;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[299];
}

__guard mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface::Trait<Empty>]";
      v12 = 91;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[443];
}

uint64_t mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MinimumAlignmentInterface::Trait<Empty>]";
      v12 = 95;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[409];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
  {
    return 0;
  }
  v5 = a1;
  return mlir::placement::RegionCall::verifyInvariantsImpl((uint64_t **)&v5) != 0;
}

uint64_t mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::foldHook()
{
  mlir::Operation *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::placement::ReplacedOps::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::printAssembly(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc(0x80uLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isDeclaration;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc(0x48uLL);
  *v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeResAttrsAttr;
  v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>>((uint64_t)a1);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::anec::A11Legacy::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::placement::ReplacedOps::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), a3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 24), a3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 24));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>>(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = malloc(0x38uLL);
  *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4)
    goto LABEL_9;
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != (_QWORD *)v6 && *v5 == v3)
    v11 = v5[1];
  else
LABEL_9:
    v11 = 0;
  v2[5] = v11;
  v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  v13 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v13)
    goto LABEL_18;
  v14 = *(_QWORD **)a1;
  v15 = *(_QWORD *)a1 + 16 * v13;
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != (_QWORD *)v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_18:
    v20 = 0;
  v2[6] = v20;
  v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();
  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8), a3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::Operation *v11;
  uint64_t FunctionTypeAttr;

  v11 = a2;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v11);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::anec::A11Legacy>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyType()
{
  return 1;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t InterfaceFor;
  uint64_t AttrData;
  uint64_t v9;
  mlir::Operation *v10;
  uint64_t FunctionTypeAttr;

  mlir::OpState::printOpName((uint64_t)a2, a3, a4, a5);
  v10 = a2;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v10);
  mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  FunctionTypeAttr = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
  mlir::function_interface_impl::printFunctionOp(a3, (uint64_t)a2, InterfaceFor, 0, AttrData, v9, **(_QWORD **)(*((_QWORD *)a2 + 6) + 96), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 96) + 24));
}

BOOL mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  uint64_t *v8;

  if (mlir::OpTrait::impl::verifyOneRegion((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands((mlir::OpTrait::impl *)a1, v5)
    && (v8 = a1, mlir::placement::ReplacedOps::verifyInvariantsImpl(&v8))
    && mlir::detail::verifySymbol((mlir::detail *)a1, v6))
  {
    return mlir::function_interface_impl::verifyTrait<mlir::placement::ReplacedOps>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::function_interface_impl::verifyTrait<mlir::placement::ReplacedOps>(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *Value;
  uint64_t v8;
  __int128 *v9;
  _BYTE *AttrData;
  size_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t NameDialect;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 *v21;
  _BYTE *v22;
  size_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  const char *v39;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  const void **v48[4];
  __int16 v49;
  uint64_t ArgAttrsAttr;
  uint64_t *v51;
  __int128 v52;
  uint64_t FunctionTypeAttr;
  _BYTE v54[16];
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD v58[20];

  v58[19] = *MEMORY[0x1E0C80C00];
  v51 = a1;
  ArgAttrsAttr = mlir::anec::A11Legacy::getArgAttrsAttr((mlir::Operation **)&v51);
  if (ArgAttrsAttr)
  {
    FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr((mlir::Operation **)&v51);
    FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
    mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
    v2 = v1;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    v3 = v2;
    if (v4 != v2)
    {
      v49 = 257;
      mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
        mlir::Diagnostic::operator<<((uint64_t)v54, "expects argument attribute array to have the same number of elements as the number of function arguments, got ");
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
      if (!FunctionTypeAttr)
        goto LABEL_59;
      LODWORD(v52) = 5;
      *((_QWORD *)&v52 + 1) = v28;
      v29 = (char *)&v52;
      v30 = v55;
      if (v56 < v57)
        goto LABEL_50;
      v31 = v56 + 1;
      if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
        goto LABEL_81;
      goto LABEL_82;
    }
    if (v2)
    {
      LODWORD(v5) = 0;
      while (1)
      {
        v6 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
        v5 = v5;
        if (!v6)
          break;
        if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
          v6 = 0;
        v47 = v6;
        if (!v6)
          goto LABEL_65;
        Value = (__int128 *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
        v8 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
        if (Value != (__int128 *)v8)
        {
          v9 = (__int128 *)v8;
          do
          {
            v52 = *Value;
            FunctionTypeAttr = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v52);
            AttrData = (_BYTE *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
            if (!v11 || (v12 = AttrData, (v13 = (char *)memchr(AttrData, 46, v11)) == 0) || v13 - v12 == -1)
            {
              v39 = "arguments may only have dialect attributes";
              goto LABEL_58;
            }
            NameDialect = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
            if (NameDialect)
            {
              if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)NameDialect + 80))(NameDialect, v51, 0, v5, v52, *((_QWORD *)&v52 + 1)))return 0;
            }
            ++Value;
          }
          while (Value != v9);
        }
        LODWORD(v5) = v5 + 1;
        if ((_DWORD)v5 == v2)
          goto LABEL_19;
      }
      v47 = 0;
LABEL_65:
      v49 = 257;
      mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (!FunctionTypeAttr)
        goto LABEL_71;
      goto LABEL_70;
    }
  }
LABEL_19:
  ArgAttrsAttr = mlir::placement::ReplacedOps::getResAttrsAttr((mlir::Operation **)&v51);
  if (!ArgAttrsAttr)
    goto LABEL_37;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr((mlir::Operation **)&v51);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
  v16 = v15;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
  v3 = v16;
  if (v17 != v16)
  {
    v49 = 257;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (FunctionTypeAttr)
      mlir::Diagnostic::operator<<((uint64_t)v54, "expects result attribute array to have the same number of elements as the number of function results, got ");
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    if (!FunctionTypeAttr)
      goto LABEL_59;
    LODWORD(v52) = 5;
    *((_QWORD *)&v52 + 1) = v32;
    v29 = (char *)&v52;
    v30 = v55;
    if (v56 < v57)
    {
LABEL_50:
      v33 = v30 + 24 * v56;
      v34 = *(_OWORD *)v29;
      *(_QWORD *)(v33 + 16) = *((_QWORD *)v29 + 2);
      *(_OWORD *)v33 = v34;
      ++v56;
      if (FunctionTypeAttr)
      {
        mlir::Diagnostic::operator<<((uint64_t)v54, ", but expected ");
        if (FunctionTypeAttr)
        {
          LODWORD(v52) = 5;
          *((_QWORD *)&v52 + 1) = v3;
          v35 = (char *)&v52;
          v36 = v55;
          if (v56 >= v57)
          {
            v44 = v56 + 1;
            if (v55 <= (unint64_t)&v52 && v55 + 24 * v56 > (unint64_t)&v52)
            {
              v46 = (char *)&v52 - v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v36 = v55;
              v35 = &v46[v55];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v35 = (char *)&v52;
              v36 = v55;
            }
          }
          v37 = v36 + 24 * v56;
          v38 = *(_OWORD *)v35;
          *(_QWORD *)(v37 + 16) = *((_QWORD *)v35 + 2);
          *(_OWORD *)v37 = v38;
          ++v56;
        }
      }
LABEL_59:
      v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
LABEL_61:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v54);
      return v27;
    }
    v31 = v56 + 1;
    if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
    {
LABEL_81:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
      v29 = (char *)&v52;
      v30 = v55;
      goto LABEL_50;
    }
LABEL_82:
    v45 = (char *)&v52 - v30;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
    v30 = v55;
    v29 = &v45[v55];
    goto LABEL_50;
  }
  if (v16)
  {
    LODWORD(v5) = 0;
    while (1)
    {
      v18 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
      v5 = v5;
      if (!v18)
        break;
      if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
        v18 = 0;
      v47 = v18;
      if (!v18)
        goto LABEL_68;
      v19 = (__int128 *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
      v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
      if (v19 != (__int128 *)v20)
      {
        v21 = (__int128 *)v20;
        while (1)
        {
          v52 = *v19;
          FunctionTypeAttr = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v52);
          v22 = (_BYTE *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
          if (!v23)
            break;
          v24 = v22;
          v25 = (char *)memchr(v22, 46, v23);
          if (!v25 || v25 - v24 == -1)
            break;
          v26 = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
          if (v26
            && !(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v26 + 88))(v26, v51, 0, v5, v52, *((_QWORD *)&v52 + 1)))
          {
            return 0;
          }
          if (++v19 == v21)
            goto LABEL_36;
        }
        v39 = "results may only have dialect attributes";
        goto LABEL_58;
      }
LABEL_36:
      LODWORD(v5) = v5 + 1;
      if ((_DWORD)v5 == v16)
        goto LABEL_37;
    }
    v47 = 0;
LABEL_68:
    v49 = 257;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (!FunctionTypeAttr)
      goto LABEL_71;
LABEL_70:
    mlir::Diagnostic::operator<<((uint64_t)v54, v41);
LABEL_71:
    *(_QWORD *)&v52 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
    v42 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Attribute>((uint64_t)&FunctionTypeAttr, (uint64_t *)&v52);
    v43 = (uint64_t)v42;
    if (*v42)
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v43);
    if (FunctionTypeAttr)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
    goto LABEL_61;
  }
LABEL_37:
  if ((*((_DWORD *)v51 + 11) & 0x7FFFFF) != 1)
  {
    v39 = "expects one region";
LABEL_58:
    v48[0] = (const void **)v39;
    v49 = 259;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    goto LABEL_59;
  }
  return mlir::detail::FunctionOpInterfaceTrait<mlir::anec::A11Legacy>::verifyBody((mlir::Operation **)&v51);
}

BOOL mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::foldHook()
{
  uint64_t v0;
  llvm *v1;
  llvm *v3[2];
  unint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v4 & 4) != 0)
    {
      if ((v4 & 2) != 0)
        v1 = (llvm *)v3;
      else
        v1 = v3[0];
      (*(void (**)(llvm *))((v4 & 0xFFFFFFFFFFFFFFF8) + 16))(v1);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v3[0], v3[1]);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  uint64_t **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = (uint64_t **)v7;
      else
        v5 = (uint64_t **)v7[0];
      (*(void (**)(uint64_t **, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))(v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::placement::ReplacedOpsLiveOuts::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t (**v9)(uint64_t, uint64_t, uint64_t);
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2, a3, a4, a5);
  v8 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v9 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v10;
      else
        v9 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v10[0];
      (*(void (**)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))(v9, v5, v6, v7);
    }
    if ((v8 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::placement::ReplacedOpsLiveOuts::print(&v7, a3);
}

BOOL mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleT"
            "ype>::Impl<Empty>]";
      v12 = 126;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[423];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::placement::StartTimer::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::foldHook()
{
  uint64_t *v0;
  uint64_t v1;
  llvm **v2;
  llvm *v4[2];
  unint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v1 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0)
        v2 = v4;
      else
        v2 = (llvm **)v4[0];
      (*(void (**)(_QWORD *, uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))(v2, v0);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  _BOOL8 v6;
  char v7;
  llvm **v8;
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  v6 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v8 = v10;
      else
        v8 = (llvm **)v10[0];
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, unsigned __int8))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  char v6;
  llvm **v7;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
     + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
    {
      if ((v9 & 2) != 0)
        v7 = v8;
      else
        v7 = (llvm **)v8[0];
      result = (*(uint64_t (**)(llvm **))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))(v7);
    }
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::StopTimer>,mlir::OpTrait::ZeroResults<mlir::placement::StopTimer>,mlir::OpTrait::ZeroSuccessors<mlir::placement::StopTimer>,mlir::OpTrait::OneOperand<mlir::placement::StopTimer>,mlir::OpTrait::OpInvariants<mlir::placement::StopTimer>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::StopTimer>,mlir::OpTrait::ZeroResults<mlir::placement::StopTimer>,mlir::OpTrait::ZeroSuccessors<mlir::placement::StopTimer>,mlir::OpTrait::OneOperand<mlir::placement::StopTimer>,mlir::OpTrait::OpInvariants<mlir::placement::StopTimer>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0) != 0;
}

uint64_t mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"placement.tensor_to_memref", 26, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E47898;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::hasTrait(uint64_t a1, uint64_t (*a2)())
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t (*)()))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                                  + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::placement::TensorToMemref::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::TensorToMemref>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::TensorToMemref>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  _QWORD *v14;
  char *v16[2];
  unint64_t v17[2];
  unint64_t v18[2];
  void *v19;
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;
  _QWORD v23[24];

  v11 = a3;
  v23[23] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x400000000;
  if (!mlir::placement::TensorToMemref::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v19))goto LABEL_8;
  mlir::ValueRange::ValueRange(v18, (uint64_t)v19, v20);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  {
    v13 = 1;
    goto LABEL_9;
  }
  v16[0] = "placement.tensor_to_memref";
  v16[1] = (char *)26;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v22);
    v14 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v22, "'", v16, "' op inferred type(s) ", (uint64_t)&v19, " are incompatible with return type(s) of operation ", a11);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v22)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
  }
  else
  {
LABEL_8:
    v13 = 0;
  }
LABEL_9:
  if (v19 != v21)
    free(v19);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t (*a2)())
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __guard v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return (uint64_t (*)())v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2
      || v12 == (_QWORD)a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::placement::TensorToMemref::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::placement::TensorToMemref::verify(&v7) != 0;
}

BOOL mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t *mlir::Dialect::addAttribute<mlir::placement::RegionTypeAttr>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::placement::RegionTypeAttr,mlir::Attribute,mlir::placement::detail::RegionTypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSD_6detail21RegionTypeAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSC_6detail21RegionTypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, 0, v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::placement::RegionTypeAttr,mlir::Attribute,mlir::placement::detail::RegionTypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSC_6detail21RegionTypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v6;
  unsigned int v7;
  _QWORD v8[2];

  v6 = a2;
  v2 = *(_DWORD *)(a2 + 8);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, &v7);
}

uint64_t *mlir::Dialect::addType<mlir::placement::TimerHandleType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::placement::TimerHandleType,mlir::Type,mlir::placement::detail::TimerHandleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSD_6detail22TimerHandleTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSC_6detail22TimerHandleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, 0, v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::placement::TimerHandleType,mlir::Type,mlir::placement::detail::TimerHandleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSC_6detail22TimerHandleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  mlir::MLIRContext *Context;
  unsigned __int8 **TypeUniquer;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  mlir::MLIRContext *v9;

  v6 = a2;
  v2 = *(_QWORD *)(a2 + 8);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v2;
  v9 = Context;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  v8[1] = &v9;
  return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, &v7);
}

uint64_t mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  unint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  unsigned __int8 **v14;
  _QWORD v15[2];
  unsigned int *v16;
  unsigned int v17;
  _QWORD v18[2];

  v5 = a4;
  v18[0] = a2;
  v18[1] = a3;
  v17 = *a5;
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v14 = a1;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v11 = v10;
    v5 = a4;
    a1 = v14;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v5 = a4;
      a1 = v14;
    }
  }
  v8 = 0x9DDFEA08EB382D69
     * (v7[19] ^ v17 ^ ((0x9DDFEA08EB382D69 * (((8 * v17) | 4) ^ v7[19] ^ v17)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (((8 * v17) | 4) ^ v7[19] ^ v17)));
  v15[0] = &v17;
  v15[1] = v18;
  v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895 * ((v8 >> 47) ^ v8), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_DWORD **a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::placement::detail::RegionTypeAttrStorage::construct(a2, *(int **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::placement::detail::RegionTypeAttrStorage::construct(uint64_t a1, int *a2)
{
  int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t result;

  v3 = *a2;
  *(_QWORD *)(a1 + 80) += 16;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 16 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    result = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = result + 16;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = v3;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 **v15;
  _QWORD v16[2];
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[2];

  v5 = a4;
  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v15 = a1;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v11;
    v5 = a4;
    a1 = v15;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v5 = a4;
      a1 = v15;
    }
  }
  v8 = v7[19] ^ HIDWORD(v18);
  v9 = 0x9DDFEA08EB382D69 * ((8 * v18 + 8) ^ v8);
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895* (v8 ^ (v9 >> 47) ^ v9))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::placement::detail::TimerHandleTypeStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::placement::detail::TimerHandleTypeStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *result;

  v3 = *a2;
  *(_QWORD *)(a1 + 80) += 16;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 16 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a1 = result + 2;
  *result = 0;
  result[1] = v3;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t mlir::AsmParser::parseOptionalInteger<unsigned long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  unint64_t v13;
  BOOL v14;
  const char *v16;
  __int16 v17;
  void *v18;
  unsigned int v19;
  void *__p;
  unsigned int v21[46];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v19 = 1;
  v18 = 0;
  v5 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 352))(a1, &v18);
  if (v5 >= 0x100u && v5 != 0)
  {
    llvm::APInt::sextOrTrunc((char *)&v18, 0x40u, (uint64_t)&__p);
    v9 = v21[0];
    if (v21[0] < 0x41)
    {
      v10 = (uint64_t)__p;
      *a2 = (uint64_t)__p;
      goto LABEL_14;
    }
    v11 = v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
    v12 = __p;
    if (v11 <= 0x40)
    {
      *a2 = *(_QWORD *)__p;
    }
    else
    {
      v10 = -1;
      *a2 = -1;
      if (!v12)
      {
LABEL_14:
        v21[0] = v19;
        if (v19 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v10, 0);
          if (v21[0] > 0x40)
          {
            v14 = llvm::APInt::equalSlowCase((const void **)&__p, (const void **)&v18);
            if (__p)
              operator delete[](__p);
            if (v14)
              goto LABEL_21;
            goto LABEL_25;
          }
        }
        else
        {
          if (v19)
            v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
          else
            v13 = 0;
          __p = (void *)(v13 & v10);
        }
        if (__p == v18)
        {
LABEL_21:
          v7 = 1;
LABEL_28:
          v8 = 1;
          goto LABEL_29;
        }
LABEL_25:
        v16 = "integer value too large";
        v17 = 259;
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&__p, a1, v4, &v16);
        if (__p)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
        v7 = 0;
        goto LABEL_28;
      }
    }
    operator delete[](v12);
    v10 = *a2;
    goto LABEL_14;
  }
  v7 = v5;
  v8 = HIBYTE(v5);
LABEL_29:
  if (v19 >= 0x41 && v18)
    operator delete[](v18);
  return v7 | (v8 << 8);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::placement::ReplacedOps::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

void mlir::detail::PDLByteCodePattern::create(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int16 Benefit;
  uint64_t Context;
  char *Value;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t InputAttributeNames;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE v30[128];
  void *__dst;
  unint64_t v32;
  _QWORD v33[18];

  v33[16] = *MEMORY[0x1E0C80C00];
  v26 = a1;
  Benefit = mlir::pdl_interp::RecordMatchOp::getBenefit((mlir::pdl_interp::RecordMatchOp *)&v26);
  mlir::PatternBenefit::PatternBenefit(&v25, Benefit);
  Context = mlir::Attribute::getContext((mlir::Attribute *)(v26 + 24));
  __dst = v33;
  v32 = 0x800000000;
  InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v26);
  if (!InputAttributeNames)
    goto LABEL_9;
  Value = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
  v10 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
  v12 = (char *)(v10 + 8 * v11);
  v28 = v30;
  v29 = 0x800000000;
  v13 = v12 - Value;
  if ((unint64_t)(v12 - Value) < 0x41)
  {
    v14 = 0;
    v16 = 0;
    v15 = v30;
    if (v12 == Value)
    {
LABEL_4:
      v17 = v16 + (v13 >> 3);
      LODWORD(v29) = v16 + (v13 >> 3);
      if (v15 != v30)
        goto LABEL_5;
      goto LABEL_19;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, (uint64_t)v13 >> 3, 16);
    v14 = v29;
    v15 = v28;
    v16 = v29;
    if (v12 == Value)
      goto LABEL_4;
  }
  v19 = &v15[16 * v14];
  do
  {
    v20 = *(_QWORD *)Value;
    Value += 8;
    v27 = v20;
    *v19 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v27);
    v19[1] = v21;
    v19 += 2;
  }
  while (Value != v12);
  v15 = v28;
  v17 = v29 + (v13 >> 3);
  LODWORD(v29) = v29 + (v13 >> 3);
  if (v28 != v30)
  {
LABEL_5:
    if (__dst != v33)
    {
      free(__dst);
      v15 = v28;
      LODWORD(v17) = v29;
    }
    __dst = v15;
    v32 = __PAIR64__(HIDWORD(v29), v17);
    v28 = v30;
    v29 = 0;
    goto LABEL_9;
  }
LABEL_19:
  v22 = v32;
  if (v32 >= v17)
  {
    if ((_DWORD)v17)
      memmove(__dst, v30, 16 * v17);
    goto LABEL_28;
  }
  if (HIDWORD(v32) < v17)
  {
    LODWORD(v32) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v33, v17, 16);
    v22 = 0;
    v23 = v29;
    if (!(_DWORD)v29)
      goto LABEL_28;
    goto LABEL_27;
  }
  if ((_DWORD)v32)
  {
    memmove(__dst, v30, 16 * v32);
    v23 = v29;
    if (v22 == v29)
      goto LABEL_28;
    goto LABEL_27;
  }
  v22 = 0;
  v23 = v29;
  if ((_DWORD)v29)
LABEL_27:
    memcpy((char *)__dst + 16 * v22, &v28[16 * v22], 16 * v23 - 16 * v22);
LABEL_28:
  LODWORD(v32) = v17;
  LODWORD(v29) = 0;
  if (v28 != v30)
    free(v28);
LABEL_9:
  mlir::pdl_interp::RecordMatchOp::getRootKind((uint64_t)&v26, (uint64_t)&v28);
  if (v30[0])
  {
    mlir::Pattern::Pattern(a4, (uint64_t)v28, v29, v25, Context, __dst, v32);
    *(_DWORD *)(a4 + 88) = a3;
    *(_QWORD *)(a4 + 96) = a2;
    v18 = __dst;
    if (__dst == v33)
      return;
    goto LABEL_11;
  }
  mlir::Pattern::Pattern(a4, v25, Context, __dst, v32);
  *(_DWORD *)(a4 + 88) = a3;
  *(_QWORD *)(a4 + 96) = a2;
  v18 = __dst;
  if (__dst != v33)
LABEL_11:
    free(v18);
}

uint64_t mlir::detail::PDLByteCodeMutableState::updatePatternBenefit(uint64_t result, unsigned int a2, __int16 a3)
{
  *(_WORD *)(*(_QWORD *)(result + 168) + 2 * a2) = a3;
  return result;
}

void mlir::detail::PDLByteCodeMutableState::cleanupAfterMatchAndRewrite(mlir::detail::PDLByteCodeMutableState *this)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t j;
  void *v8;
  void *v9;

  v2 = *((_QWORD *)this + 9);
  for (i = *((_QWORD *)this + 10); i != v2; i -= 16)
  {
    v5 = *(void **)(i - 16);
    v4 = v5;
    if (v5)
      operator delete[](v4);
  }
  *((_QWORD *)this + 10) = v2;
  v6 = *((_QWORD *)this + 15);
  for (j = *((_QWORD *)this + 16); j != v6; j -= 16)
  {
    v9 = *(void **)(j - 16);
    v8 = v9;
    if (v9)
      operator delete[](v8);
  }
  *((_QWORD *)this + 16) = v6;
}

void mlir::detail::PDLByteCode::PDLByteCode(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  const unsigned __int8 *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  const unsigned __int8 *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v38[2];
  int v39;
  llvm *v40;
  uint64_t v41;
  int v42;
  void *v43[3];
  void *v44[8];
  int v45;
  __int16 v46;
  uint64_t Context;
  llvm *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if (*(_DWORD *)(a3 + 8))
    llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=(a1, a3);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 112;
  *(_OWORD *)(a1 + 96) = xmmword_181236C00;
  *(_QWORD *)(a1 + 240) = a1 + 264;
  *(_OWORD *)(a1 + 248) = xmmword_181236C00;
  *(_QWORD *)(a1 + 392) = a1 + 408;
  *(_QWORD *)(a1 + 400) = 0x2000000000;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_OWORD *)(a1 + 3778) = 0u;
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43[0] = 0;
  v43[1] = 0;
  v43[2] = (void *)0x1000000000;
  v44[0] = 0;
  v44[1] = 0;
  v44[2] = (void *)0x1000000000;
  v44[3] = 0;
  v44[4] = 0;
  v44[6] = 0;
  v44[7] = 0;
  v44[5] = (void *)0x1000000000;
  v45 = 0;
  v46 = 0;
  v50 = 0;
  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  v48 = 0;
  v49 = 0;
  v51 = a1 + 64;
  v52 = a1 + 88;
  v53 = a1 + 240;
  v54 = a1 + 392;
  v55 = a1 + 3784;
  v56 = a1 + 3786;
  v57 = a1 + 3788;
  v58 = a1 + 3790;
  v59 = a1 + 3792;
  v60 = a4;
  v7 = *(uint64_t **)a5;
  v8 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)a5;
    v10 = a6;
    if (*v7)
      v11 = *v7 == -8;
    else
      v11 = 1;
    if (v11)
    {
      do
      {
        v13 = v9[1];
        ++v9;
        v12 = v13;
        if (v13)
          v14 = v12 == -8;
        else
          v14 = 1;
      }
      while (v14);
    }
    v15 = &v7[v8];
    if (v9 == v15)
    {
LABEL_23:
      v21 = *(uint64_t **)v10;
      v22 = *(unsigned int *)(v10 + 8);
      if ((_DWORD)v22)
      {
        v23 = *(uint64_t **)v10;
        if (*v21)
          v24 = *v21 == -8;
        else
          v24 = 1;
        if (v24)
        {
          do
          {
            v26 = v23[1];
            ++v23;
            v25 = v26;
            if (v26)
              v27 = v25 == -8;
            else
              v27 = 1;
          }
          while (v27);
        }
        v28 = &v21[v22];
        if (v23 == v28)
LABEL_43:
      }
      else
      {
        v23 = *(uint64_t **)v10;
        v28 = &v21[v22];
        if (v21 == v28)
          goto LABEL_43;
      }
      v29 = 0;
      v30 = *v23;
      do
      {
        v31 = *(const unsigned __int8 **)v30;
        v61[0] = v29;
        llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>((uint64_t)v43, (int8x16_t *)(v30 + 40), v31, v61);
        do
        {
          v32 = v23[1];
          ++v23;
          v30 = v32;
          if (v32)
            v33 = v30 == -8;
          else
            v33 = 1;
        }
        while (v33);
        ++v29;
      }
      while (v23 != v28);
      goto LABEL_43;
    }
  }
  else
  {
    v9 = *(uint64_t **)a5;
    v10 = a6;
    v15 = &v7[v8];
    if (v7 == v15)
      goto LABEL_23;
  }
  v16 = 0;
  v17 = *v9;
  do
  {
    v18 = *(const unsigned __int8 **)v17;
    v61[0] = v16;
    llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>((uint64_t)v44, (int8x16_t *)(v17 + 40), v18, v61);
    do
    {
      v19 = v9[1];
      ++v9;
      v17 = v19;
      if (v19)
        v20 = v17 == -8;
      else
        v20 = 1;
    }
    while (v20);
    ++v16;
  }
  while (v9 != v15);
  goto LABEL_23;
}

void sub_18062B518(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, llvm *a14, uint64_t a15, unsigned int a16)
{
  llvm::deallocate_buffer(a14, (void *)(16 * a16));
}

uint64_t sub_18062B52C()
{
  uint64_t v0;

  return v0;
}

void `anonymous namespace'::Generator::generate(uint64_t *a1, unsigned int *a2)
{
  mlir::Attribute *v4;
  mlir::StringAttr *Context;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  mlir::StringAttr *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mlir::GenericProgramPoint *v13;
  unsigned int *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t Body;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  mlir::GenericProgramPoint *v27;
  mlir::ForwardIterator *v28;
  unint64_t v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  llvm *v40;
  uint64_t v41;
  llvm *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  unint64_t v53;
  unsigned __int8 v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  llvm *v58;
  uint64_t v59;
  llvm *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unsigned __int8 v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  llvm *v76;
  int v77;
  llvm *v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _WORD *v83;
  _WORD *v84;
  _WORD *v85;
  unsigned int (*v86)(void);
  uint64_t *buffer;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  _QWORD *v93;
  mlir::GenericProgramPoint *v94;
  uint64_t *v95;
  unsigned int *v96;
  unint64_t v97;
  unint64_t v98;
  llvm *v99[2];
  int v100;
  int v101;
  llvm *v102[2];
  int v103;
  llvm *v104[2];
  int v105;
  __int128 v106;
  mlir::GenericProgramPoint *v107[2];
  __int128 v108;
  __int128 v109;
  void *v110;
  uint64_t v111;
  _QWORD v112[3];
  uint64_t *v113;
  __int128 v114;
  uint64_t *(**v115)(uint64_t *, uint64_t);
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  mlir::GenericProgramPoint *v120;
  llvm *v121;
  uint64_t *v122;
  llvm **v123;
  llvm **v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v4 = (mlir::Attribute *)(a2 + 6);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  LOWORD(v118) = 261;
  *(_QWORD *)&v116 = "matcher";
  *((_QWORD *)&v116 + 1) = 7;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v116);
  v7 = mlir::SymbolTable::lookupSymbolIn(a2, v6);
  if (v7)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(v7 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id)
      v8 = (unsigned int *)v7;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v96 = v8;
  v9 = (mlir::StringAttr *)mlir::Attribute::getContext(v4);
  LOWORD(v118) = 261;
  *(_QWORD *)&v116 = "rewriters";
  *((_QWORD *)&v116 + 1) = 9;
  v10 = mlir::StringAttr::get(v9, (mlir::MLIRContext *)&v116);
  v11 = mlir::SymbolTable::lookupSymbolIn(a2, v10);
  if (v11)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(v11 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
      v12 = v11;
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  mlir::Region::getOps<mlir::pdl_interp::FuncOp>((mlir::Region *)(((v12+ 64+ 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v12 + 44) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v12 + 40)), (uint64_t)&v116);
  v106 = v116;
  *(_OWORD *)v107 = v117;
  v108 = v118;
  v109 = v119;
  v13 = (mlir::GenericProgramPoint *)v117;
  v94 = v120;
  v95 = a1;
  if ((mlir::GenericProgramPoint *)v117 == v120)
    goto LABEL_118;
  while (1)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v13);
    v14 = (unsigned int *)(*((uint64_t (**)(void))&v109 + 1))();
    v104[0] = (llvm *)v14;
    LOWORD(v102[0]) = 0;
    LOWORD(v99[0]) = 0;
    LOWORD(v126) = 0;
    v122 = a1;
    v123 = v102;
    v124 = v99;
    v125 = &v126;
    v15 = v14[11];
    if ((v15 & 0x7FFFFF) != 0)
    {
      v16 = (_QWORD *)((((unint64_t)&v14[4 * ((v15 >> 23) & 1) + 17] + ((v15 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v14[10]);
      if ((_QWORD *)*v16 == v16)
        goto LABEL_22;
    }
    else
    {
      v16 = 0;
      if (!MEMORY[0])
        goto LABEL_22;
    }
    v17 = v16[1];
    v18 = v17 ? v17 - 8 : 0;
    v19 = *(unint64_t **)(v18 + 48);
    v20 = *(unint64_t **)(v18 + 56);
    if (v20 != v19)
      break;
LABEL_22:
    Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)v104);
    v121 = (llvm *)&v122;
    v22 = *(_QWORD *)(Body + 8);
    a1 = v95;
    if (v22 != Body)
    {
      v23 = Body;
      do
      {
        v24 = v22 - 8;
        if (!v22)
          v24 = 0;
        v25 = (mlir::GenericProgramPoint *)(v24 + 32);
        v26 = *(mlir::GenericProgramPoint **)(v24 + 40);
        if (v26 != (mlir::GenericProgramPoint *)(v24 + 32))
        {
          do
          {
            v27 = (mlir::GenericProgramPoint *)*((_QWORD *)v26 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v26);
            v26 = v27;
          }
          while (v27 != v25);
        }
        v22 = *(_QWORD *)(v22 + 8);
      }
      while (v22 != v23);
    }
    v83 = (_WORD *)v95[27];
    if (LOWORD(v102[0]) > (unsigned __int16)*v83)
      *v83 = v102[0];
    v84 = (_WORD *)v95[29];
    if (LOWORD(v99[0]) > (unsigned __int16)*v84)
      *v84 = v99[0];
    v85 = (_WORD *)v95[30];
    if ((unsigned __int16)v126 > (unsigned __int16)*v85)
      *v85 = v126;
    do
    {
      mlir::Region::OpIterator::operator++((uint64_t *)&v106);
      v13 = v107[0];
      if (v107[0] == *((mlir::GenericProgramPoint **)&v108 + 1))
        goto LABEL_13;
      v86 = (unsigned int (*)(void))v109;
      mlir::GenericProgramPoint::~GenericProgramPoint(v107[0]);
    }
    while (!v86());
    v13 = v107[0];
LABEL_13:
    if (v13 == v94)
    {
LABEL_118:
      v104[0] = 0;
      v104[1] = 0;
      v105 = 0;
      v102[0] = 0;
      v102[1] = 0;
      v103 = 0;
      v101 = 0;
      v115 = 0;
      buffer = (uint64_t *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
      v114 = xmmword_181243100;
      *buffer = (uint64_t)v104;
      buffer[1] = (uint64_t)&v101;
      buffer[2] = (uint64_t)&v113;
      buffer[3] = (uint64_t)v102;
      v113 = buffer;
      v110 = v112;
      v111 = 0;
      v112[0] = 0;
      v112[1] = 1;
      v89 = v96[10];
      v88 = v96[11];
      v106 = 0uLL;
      v107[0] = 0;
      v107[1] = (mlir::GenericProgramPoint *)((char *)&v108 + 8);
      *(_QWORD *)&v108 = 0x400000000;
      v99[0] = 0;
      v99[1] = 0;
      v100 = 0;
      v90 = *(_QWORD *)((((unint64_t)&v96[4 * ((v88 >> 23) & 1) + 17] + ((v88 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * v89
                      + 8);
      if (v90)
        v91 = v90 - 8;
      else
        v91 = 0;
      v98 = **(_QWORD **)(v91 + 48);
      *(_QWORD *)&v116 = 0;
      v92 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(a1, &v98, &v116);
      v93 = (_QWORD *)v116;
      if ((v92 & 1) == 0)
      {
        v93 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a1, (uint64_t)&v98, &v98, (_QWORD *)v116);
        *v93 = v98;
        *((_WORD *)v93 + 4) = 0;
      }
      *((_WORD *)v93 + 4) = 0;
      mlir::Liveness::Liveness((mlir::Liveness *)&v97, (mlir::Operation *)v96);
    }
  }
  while (1)
  {
    v29 = *v19;
    v113 = (uint64_t *)*v19;
    v30 = (uint64_t)v122;
    v31 = (*(_WORD *)v123)++;
    v32 = *(_DWORD *)(v30 + 16);
    if (!v32)
    {
      v46 = 0;
      goto LABEL_87;
    }
    v33 = *(_QWORD *)v30;
    if ((v34 & 1) == 0
    {
      v80 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v80 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v80;
    }
    v35 = 0x9DDFEA08EB382D69
        * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v29) ^ HIDWORD(v29));
    v36 = 0x9DDFEA08EB382D69 * (HIDWORD(v29) ^ (v35 >> 47) ^ v35);
    v37 = -348639895 * ((v36 >> 47) ^ v36);
    v38 = (unint64_t)v113;
    v39 = v37 & (v32 - 1);
    v40 = (llvm *)(v33 + 16 * v39);
    v41 = *(_QWORD *)v40;
    if (v113 != *(uint64_t **)v40)
      break;
LABEL_50:
    v47 = *(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(_QWORD *)v47 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
      v47 = 0;
    v97 = v47;
    if (!v47)
      goto LABEL_32;
    v48 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v97) + 136);
    if (v48 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v49 = (uint64_t *)(v30 + 24);
      v64 = *(_QWORD *)(v30 + 24);
      v51 = (*(_WORD *)v124)++;
      v65 = *(_DWORD *)(v30 + 40);
      if (!v65)
        goto LABEL_79;
      v66 = (unint64_t)v113;
      if ((v67 & 1) == 0
      {
        v81 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v81 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v81;
      }
      v68 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v66) ^ HIDWORD(v66));
      v69 = 0x9DDFEA08EB382D69 * (HIDWORD(v66) ^ (v68 >> 47) ^ v68);
      v70 = (-348639895 * ((v69 >> 47) ^ v69)) & (v65 - 1);
      v58 = (llvm *)(v64 + 16 * v70);
      v71 = *(_QWORD *)v58;
      if (v113 == *(uint64_t **)v58)
        goto LABEL_32;
      v60 = 0;
      v72 = 1;
      while (v71 != -4096)
      {
        if (v60)
          v73 = 0;
        else
          v73 = v71 == -8192;
        if (v73)
          v60 = v58;
        v74 = v70 + v72++;
        v70 = v74 & (v65 - 1);
        v58 = (llvm *)(v64 + 16 * v70);
        v71 = *(_QWORD *)v58;
        if (v113 == *(uint64_t **)v58)
          goto LABEL_32;
      }
    }
    else
    {
      if (v48 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
        goto LABEL_32;
      v49 = (uint64_t *)(v30 + 24);
      v50 = *(_QWORD *)(v30 + 24);
      v51 = (*(_WORD *)v125)++;
      v52 = *(_DWORD *)(v30 + 40);
      if (!v52)
      {
LABEL_79:
        v75 = 0;
LABEL_94:
        v75 *= 2;
        goto LABEL_95;
      }
      v53 = (unint64_t)v113;
      if ((v54 & 1) == 0
      {
        v82 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v82 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v82;
      }
      v55 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v53) ^ HIDWORD(v53));
      v56 = 0x9DDFEA08EB382D69 * (HIDWORD(v53) ^ (v55 >> 47) ^ v55);
      v57 = (-348639895 * ((v56 >> 47) ^ v56)) & (v52 - 1);
      v58 = (llvm *)(v50 + 16 * v57);
      v59 = *(_QWORD *)v58;
      if (v113 == *(uint64_t **)v58)
        goto LABEL_32;
      v60 = 0;
      v61 = 1;
      while (v59 != -4096)
      {
        if (v60)
          v62 = 0;
        else
          v62 = v59 == -8192;
        if (v62)
          v60 = v58;
        v63 = v57 + v61++;
        v57 = v63 & (v52 - 1);
        v58 = (llvm *)(v50 + 16 * v57);
        v59 = *(_QWORD *)v58;
        if (v113 == *(uint64_t **)v58)
          goto LABEL_32;
      }
    }
    if (v60)
      v78 = v60;
    else
      v78 = v58;
    v75 = *(_DWORD *)(v30 + 40);
    v79 = *(_DWORD *)(v30 + 32);
    if (4 * v79 + 4 >= 3 * v75)
      goto LABEL_94;
    if (v75 + ~v79 - *(_DWORD *)(v30 + 36) > v75 >> 3)
    {
      ++*(_DWORD *)(v30 + 32);
      if (*(_QWORD *)v78 == -4096)
        goto LABEL_31;
      goto LABEL_30;
    }
LABEL_95:
    llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow((uint64_t)v49, v75);
    v121 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v49, (unint64_t *)&v113, &v121);
    v78 = v121;
    ++*(_DWORD *)(v30 + 32);
    if (*(_QWORD *)v78 == -4096)
      goto LABEL_31;
LABEL_30:
    --*(_DWORD *)(v30 + 36);
LABEL_31:
    *(_QWORD *)v78 = v113;
    *((_WORD *)v78 + 4) = v51;
LABEL_32:
    if (++v19 == v20)
      goto LABEL_22;
  }
  v42 = 0;
  v43 = 1;
  while (v41 != -4096)
  {
    if (v42)
      v44 = 0;
    else
      v44 = v41 == -8192;
    if (v44)
      v42 = v40;
    v45 = v39 + v43++;
    v39 = v45 & (v32 - 1);
    v40 = (llvm *)(v33 + 16 * v39);
    v41 = *(_QWORD *)v40;
    if (v113 == *(uint64_t **)v40)
      goto LABEL_50;
  }
  if (v42)
    v76 = v42;
  else
    v76 = v40;
  v46 = *(_DWORD *)(v30 + 16);
  v77 = *(_DWORD *)(v30 + 8);
  if (4 * v77 + 4 < 3 * v46)
  {
    if (v46 + ~v77 - *(_DWORD *)(v30 + 12) > v46 >> 3)
    {
      ++*(_DWORD *)(v30 + 8);
      if (*(_QWORD *)v76 == -4096)
      {
LABEL_49:
        *(_QWORD *)v76 = v113;
        *((_WORD *)v76 + 4) = v31;
        v38 = (unint64_t)v113;
        goto LABEL_50;
      }
LABEL_48:
      --*(_DWORD *)(v30 + 12);
      goto LABEL_49;
    }
  }
  else
  {
LABEL_87:
    v46 *= 2;
  }
  llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(v30, v46);
  v121 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)v30, (unint64_t *)&v113, &v121);
  v76 = v121;
  ++*(_DWORD *)(v30 + 8);
  if (*(_QWORD *)v76 == -4096)
    goto LABEL_49;
  goto LABEL_48;
}

void mlir::detail::PDLByteCode::initializeMutableState(mlir::detail::PDLByteCode *this, mlir::detail::PDLByteCodeMutableState *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _WORD *v52;
  unint64_t v53;
  char *v54;
  __int16 v55;
  uint64_t v56;
  unint64_t v57;
  _OWORD *v58;
  char *v59;
  unint64_t v60;
  __int128 v61;
  __int128 __x;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int16 *)this + 1892);
  *(_QWORD *)&__x = 0;
  v5 = (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *((_QWORD *)a2 + 1) = *(_QWORD *)a2 + 8 * v4;
  }
  else
  {
    std::vector<void const*>::__append((unint64_t *)a2, v4 - v5, (const double *)&__x);
  }
  v6 = *((_QWORD *)a2 + 3);
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((unsigned __int16 *)this + 1893);
  v9 = (v7 - v6) >> 4;
  if (v8 <= v9)
  {
    if (v8 < v9)
    {
      v10 = v6 + 16 * v8;
      while (v7 != v10)
      {
        v12 = *(void **)(v7 - 16);
        v7 -= 16;
        v11 = v12;
        if (v12)
          operator delete[](v11);
      }
      *((_QWORD *)a2 + 4) = v10;
    }
  }
  else
  {
    std::vector<llvm::OwningArrayRef<mlir::Operation *>>::__append((char **)a2 + 3, v8 - v9);
  }
  v13 = *((unsigned __int16 *)this + 1894);
  mlir::ValueRange::ValueRange((unint64_t *)&__x, 0, 0);
  v14 = *((_QWORD *)a2 + 6);
  v15 = (*((_QWORD *)a2 + 7) - v14) >> 4;
  if (v13 <= v15)
  {
    if (v13 < v15)
      *((_QWORD *)a2 + 7) = v14 + 16 * v13;
  }
  else
  {
    std::vector<mlir::TypeRange>::__append((char **)a2 + 6, v13 - v15, &__x);
  }
  v16 = *((unsigned __int16 *)this + 1895);
  mlir::ValueRange::ValueRange((unint64_t *)&__x, 0, 0);
  v17 = *((_QWORD *)a2 + 12);
  v18 = (*((_QWORD *)a2 + 13) - v17) >> 4;
  if (v16 <= v18)
  {
    if (v16 < v18)
      *((_QWORD *)a2 + 13) = v17 + 16 * v16;
  }
  else
  {
    std::vector<mlir::TypeRange>::__append((char **)a2 + 12, v16 - v18, &__x);
  }
  v19 = *((_QWORD *)a2 + 18);
  v20 = *((_QWORD *)a2 + 19);
  v21 = *((unsigned __int16 *)this + 1896);
  LODWORD(__x) = 0;
  v22 = (v20 - v19) >> 2;
  if (v21 <= v22)
  {
    if (v21 < v22)
      *((_QWORD *)a2 + 19) = v19 + 4 * v21;
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)a2 + 6, v21 - v22, (std::vector<unsigned int>::const_reference)&__x);
  }
  v23 = *((unsigned int *)this + 100);
  v24 = (_BYTE *)*((_QWORD *)a2 + 21);
  if (v23 > (uint64_t)(*((_QWORD *)a2 + 23) - (_QWORD)v24) >> 1)
  {
    v25 = (_BYTE *)*((_QWORD *)a2 + 22);
    v26 = (char *)operator new(2 * v23);
    v27 = v25 - v24;
    v28 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
    v29 = v28;
    if (v25 == v24)
      goto LABEL_34;
    if ((unint64_t)(v27 - 2) >= 0x1E)
    {
      v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
      if ((unint64_t)(&v25[-(v27 & 0xFFFFFFFFFFFFFFFELL)] - v26) >= 0x20)
      {
        v30 = v27 >> 1;
        v31 = ((unint64_t)(v27 - 2) >> 1) + 1;
        v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
        v33 = &v25[-v32];
        v29 = &v28[-v32];
        v34 = &v26[2 * v30 - 16];
        v35 = (__int128 *)(v25 - 16);
        v36 = v31 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)v34 = v37;
          v34 -= 32;
          v35 -= 2;
          v36 -= 16;
        }
        while (v36);
        v25 = v33;
        if (v31 == (v31 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_34:
          *((_QWORD *)a2 + 21) = v29;
          *((_QWORD *)a2 + 22) = v28;
          *((_QWORD *)a2 + 23) = &v26[2 * v23];
          if (v24)
          {
            operator delete(v24);
            LODWORD(v23) = *((_DWORD *)this + 100);
          }
          goto LABEL_36;
        }
      }
    }
    else
    {
      v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
    }
    do
    {
      v38 = *((_WORD *)v25 - 1);
      v25 -= 2;
      *((_WORD *)v29 - 1) = v38;
      v29 -= 2;
    }
    while (v25 != v24);
    goto LABEL_34;
  }
LABEL_36:
  if ((_DWORD)v23)
  {
    v39 = *((_QWORD *)this + 49);
    v40 = v39 + 104 * v23;
    v41 = (char *)*((_QWORD *)a2 + 22);
    while (1)
    {
      v43 = *(_WORD *)(v39 + 12);
      v44 = *((_QWORD *)a2 + 23);
      if ((unint64_t)v41 >= v44)
        break;
      *(_WORD *)v41 = v43;
      v42 = (uint64_t)(v41 + 2);
LABEL_39:
      *((_QWORD *)a2 + 22) = v42;
      v39 += 104;
      v41 = (char *)v42;
      if (v39 == v40)
        return;
    }
    v45 = (char *)*((_QWORD *)a2 + 21);
    v46 = v41 - v45;
    if (v41 - v45 <= -3)
      abort();
    v47 = v46 >> 1;
    v48 = v44 - (_QWORD)v45;
    if (v48 <= (v46 >> 1) + 1)
      v49 = v47 + 1;
    else
      v49 = v48;
    if (v48 >= 0x7FFFFFFFFFFFFFFELL)
      v50 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v50 = v49;
    if (v50)
    {
      if (v50 < 0)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v51 = operator new(2 * v50);
      v52 = &v51[2 * v47];
      *v52 = v43;
      v42 = (uint64_t)(v52 + 1);
      if (v41 == v45)
        goto LABEL_56;
    }
    else
    {
      v51 = 0;
      v52 = (_WORD *)(2 * v47);
      *(_WORD *)(2 * v47) = v43;
      v42 = 2 * v47 + 2;
      if (v41 == v45)
        goto LABEL_56;
    }
    v53 = v41 - 2 - v45;
    if (v53 >= 0x5E)
    {
      if (&v51[(v46 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v53 & 0xFFFFFFFFFFFFFFFELL)] > &v51[(v46 & 0xFFFFFFFFFFFFFFFELL) - 2])
      {
        v54 = v41;
      }
      else if (&v41[-(v53 & 0xFFFFFFFFFFFFFFFELL) - 2] > v41 - 2)
      {
        v54 = v41;
      }
      else if (v41 - v51 - (v46 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
      {
        v56 = (v53 >> 1) + 1;
        v57 = 2 * (v56 & 0xFFFFFFFFFFFFFFF0);
        v54 = &v41[-v57];
        v52 = (_WORD *)((char *)v52 - v57);
        v58 = &v51[2 * v47 - 16];
        v59 = v41 - 16;
        v60 = v56 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v61 = *(_OWORD *)v59;
          *(v58 - 1) = *((_OWORD *)v59 - 1);
          *v58 = v61;
          v58 -= 2;
          v59 -= 32;
          v60 -= 16;
        }
        while (v60);
        if (v56 == (v56 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_56;
      }
      else
      {
        v54 = v41;
      }
    }
    else
    {
      v54 = v41;
    }
    do
    {
      v55 = *((_WORD *)v54 - 1);
      v54 -= 2;
      *--v52 = v55;
    }
    while (v54 != v45);
LABEL_56:
    *((_QWORD *)a2 + 21) = v52;
    *((_QWORD *)a2 + 22) = v42;
    *((_QWORD *)a2 + 23) = &v51[2 * v50];
    if (v45)
      operator delete(v45);
    goto LABEL_39;
  }
}

void mlir::detail::PDLByteCode::match(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const std::nothrow_t *v32;
  unint64_t v33;
  _QWORD *v34;
  BOOL v35;
  void *v36;
  void *v37;
  unsigned __int16 *v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[32];

  v41[30] = *MEMORY[0x1E0C80C00];
  **(_QWORD **)a5 = a2;
  v6 = *(_QWORD **)a5;
  v7 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3;
  v8 = *(_QWORD *)(a5 + 24);
  v9 = (*(_QWORD *)(a5 + 32) - v8) >> 4;
  v10 = *(_QWORD *)(a5 + 48);
  v11 = (*(_QWORD *)(a5 + 56) - v10) >> 4;
  v12 = a5 + 72;
  v13 = *(_QWORD *)(a5 + 96);
  v14 = (*(_QWORD *)(a5 + 104) - v13) >> 4;
  v15 = a5 + 120;
  v16 = *(_QWORD *)(a5 + 144);
  v17 = (*(_QWORD *)(a5 + 152) - v16) >> 2;
  v18 = *(_QWORD *)(a1 + 64);
  v19 = (*(_QWORD *)(a1 + 72) - v18) >> 3;
  v20 = *(unsigned __int16 **)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a5 + 168);
  v23 = (*(_QWORD *)(a5 + 176) - v22) >> 1;
  v24 = *(_QWORD *)(a1 + 392);
  v25 = *(unsigned int *)(a1 + 400);
  v26 = *(_QWORD *)(a1 + 3736);
  v27 = (*(_QWORD *)(a1 + 3744) - v26) >> 5;
  v28 = *(_QWORD *)(a1 + 3760);
  v29 = (*(_QWORD *)(a1 + 3768) - v28) >> 5;
  v38 = v20;
  v39 = v41;
  v40 = 0x600000000;
  v41[6] = v6;
  v41[7] = v7;
  v41[8] = v8;
  v41[9] = v9;
  v41[10] = v10;
  v41[11] = v11;
  v41[12] = v12;
  v41[13] = v13;
  v41[14] = v14;
  v41[15] = v15;
  v41[16] = v16;
  v41[17] = v17;
  v41[18] = v18;
  v41[19] = v19;
  v41[20] = v20;
  v41[21] = v21;
  v41[22] = v22;
  v41[23] = v23;
  v41[24] = v24;
  v41[25] = v25;
  v41[26] = v26;
  v41[27] = v27;
  v41[28] = v28;
  v41[29] = v29;
  v30 = *(_QWORD *)a4;
  v31 = *(unsigned int *)(a4 + 8);
  if (!(_DWORD)v31)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v30, (_QWORD *)(v30 + 120 * v31), v31, 0, 0);
    v36 = v39;
    if (v39 == v41)
      return;
    goto LABEL_6;
  }
  v32 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v33 = v31;
  while (1)
  {
    v34 = operator new(120 * v33, v32);
    if (v34)
      break;
    v35 = v33 > 1;
    v33 >>= 1;
    if (!v35)
      goto LABEL_5;
  }
  v37 = v34;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v30, (_QWORD *)(v30 + 120 * v31), v31, v34, v33);
  operator delete(v37);
  v36 = v39;
  if (v39 != v41)
LABEL_6:
    free(v36);
}

uint64_t `anonymous namespace'::ByteCodeExecutor::execute(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unsigned __int16 **v6;
  unsigned __int16 **v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t result;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 **v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  size_t v36;
  _QWORD *v37;
  void *v38;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int16 *v44;
  void *v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int16 *v60;
  unsigned __int16 **v61;
  void *v62;
  uint64_t v63;
  unsigned __int16 *v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  unint64_t v69;
  size_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned __int16 *v75;
  unint64_t v76;
  unsigned __int16 *v77;
  unint64_t v78;
  unsigned __int16 *v79;
  unsigned __int16 **v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int16 *v83;
  unsigned __int16 **v84;
  unsigned __int16 *v85;
  unint64_t v86;
  unsigned __int16 **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int16 *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned __int16 **v100;
  unsigned __int16 *v101;
  unsigned __int16 *v102;
  uint64_t v103;
  unint64_t v104;
  unsigned __int16 **v105;
  _DWORD *RawStringData;
  uint64_t NumElements;
  int v108;
  uint64_t i;
  unsigned __int16 *v110;
  int v111;
  uint64_t v112;
  unsigned __int16 *v113;
  void *v114;
  unsigned __int16 *v115;
  unint64_t v116;
  unint64_t v117;
  unsigned __int16 *v118;
  unsigned int v119;
  unint64_t v120;
  unsigned __int16 *v121;
  unsigned __int16 **v122;
  unsigned __int16 *v123;
  uint64_t v124;
  unsigned __int16 **v125;
  unsigned __int16 *v126;
  unint64_t v127;
  unsigned __int16 *v128;
  unsigned int v129;
  int v130;
  unint64_t v131;
  unsigned __int16 *v132;
  unsigned __int16 **v133;
  unsigned __int16 *v134;
  uint64_t *v135;
  unsigned __int16 **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int16 *v140;
  uint64_t v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  _BOOL4 v145;
  uint64_t v146;
  unsigned __int16 *v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t v150;
  BOOL v151;
  unsigned __int16 **v152;
  unsigned __int16 *v153;
  unsigned int v154;
  unsigned int v155;
  _BOOL4 v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int16 *v160;
  uint64_t v161;
  unsigned __int16 *v162;
  unsigned int v163;
  unint64_t v164;
  uint64_t *v165;
  BOOL v166;
  unsigned __int16 **v167;
  unint64_t v168;
  void **Value;
  uint64_t v170;
  uint64_t v171;
  void **v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unsigned __int16 *v178;
  unsigned __int16 **v179;
  unsigned __int16 *v180;
  int v181;
  int v182;
  int v183;
  unsigned __int16 *v184;
  unint64_t v185;
  unsigned __int16 *v186;
  uint64_t v187;
  unsigned int v188;
  unint64_t v189;
  BOOL v190;
  unsigned __int16 **v191;
  unsigned __int16 *v192;
  uint64_t v193;
  unsigned __int16 **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  int v201;
  unsigned __int16 *v202;
  int v203;
  unint64_t v204;
  unsigned __int16 *v205;
  unsigned __int16 **v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char *v213;
  unint64_t v214;
  unsigned __int16 *v215;
  unsigned __int16 **v216;
  _QWORD *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned __int16 *v221;
  uint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  unsigned __int16 *v225;
  _QWORD *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int16 *v230;
  unsigned int v231;
  unint64_t v232;
  uint64_t v233;
  BOOL v234;
  unsigned __int16 **v235;
  unint64_t v236;
  void *v237;
  uint64_t AttrData;
  uint64_t v239;
  uint64_t InherentAttr;
  char v241;
  uint64_t v242;
  unsigned __int16 *v243;
  unsigned int v244;
  uint64_t v245;
  unsigned __int16 *v246;
  uint64_t v247;
  uint64_t v248;
  unsigned __int16 *v249;
  unsigned int v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned __int16 *v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  unsigned __int16 *v258;
  unsigned int v259;
  uint64_t v260;
  unsigned __int16 *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned __int16 *v264;
  unsigned int v265;
  uint64_t v266;
  unint64_t v267;
  unsigned __int16 *v268;
  uint64_t NextResultAtOffset;
  uint64_t v270;
  char v271;
  _QWORD *v272;
  uint64_t v273;
  unsigned __int16 *v274;
  __n128 *v275;
  void *v276;
  void *v277;
  uint64_t v278;
  unint64_t v279;
  unsigned int v280;
  uint64_t v281;
  unint64_t v282;
  unsigned __int16 *v283;
  unsigned __int16 **v284;
  unsigned __int16 *v285;
  unint64_t v286;
  unsigned __int16 **v287;
  void **v288;
  uint64_t v289;
  uint64_t v290;
  void **v291;
  uint64_t v292;
  unsigned __int16 *v293;
  uint64_t *v294;
  unint64_t v295;
  unsigned __int16 **v296;
  void **v297;
  uint64_t v298;
  uint64_t v299;
  void **v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unsigned __int16 *v308;
  uint64_t v309;
  unint64_t v310;
  unsigned __int16 **v311;
  uint64_t isValidIntOrFloat;
  unsigned __int8 (*v313)(uint64_t, unint64_t, uint64_t, void *, void *, unint64_t, uint64_t *);
  uint64_t Context;
  mlir::MLIRContext *v315;
  unint64_t Dictionary;
  uint64_t *v317;
  unsigned __int16 *v318;
  size_t v319;
  unint64_t v320;
  void *v321;
  _OWORD *v322;
  _OWORD *v323;
  _QWORD *v324;
  void *v325;
  void *v326;
  unsigned int v327;
  BOOL v328;
  _QWORD *v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  unint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  char v337;
  __int128 **v338;
  uint64_t v339;
  unsigned __int16 *v340;
  uint64_t v341;
  __int128 v342;
  unsigned __int16 *v343;
  unsigned __int16 *v344;
  uint64_t v345;
  int v346;
  unsigned __int16 *v347;
  __int128 v348;
  uint64_t v349;
  unsigned __int16 *v350;
  _QWORD *v351;
  uint64_t v352;
  unsigned __int16 *v353;
  _QWORD *v354;
  void *v355;
  void *v356;
  void *v357;
  uint64_t v358;
  void *v359;
  _QWORD *canMapOperands;
  int v363;
  int v364;
  unsigned __int16 *v365;
  int v366;
  unint64_t v367;
  unsigned __int16 *v368;
  unsigned __int16 **v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  unint64_t v376;
  _BYTE *v377;
  uint64_t v378;
  BOOL v379;
  unsigned __int16 *v380;
  unsigned __int16 *v381;
  uint64_t **v382;
  _BOOL4 v383;
  void *v384;
  unint64_t v385;
  uint64_t v386;
  int *v387;
  unint64_t v388;
  unsigned int v389;
  int *v390;
  _BOOL4 v391;
  void *v392;
  unint64_t v393;
  uint64_t v394;
  int *v395;
  unint64_t v396;
  unsigned int v397;
  int *v398;
  void *v399;
  void *v400;
  unsigned int v401;
  uint64_t v402;
  unsigned __int16 *v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  int32x4_t *v407;
  int32x4_t v408;
  uint64_t v409;
  int32x4_t v410;
  int v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  int32x4_t *v415;
  int32x4_t v416;
  uint64_t v417;
  int32x4_t v418;
  int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  uint64_t v424;
  unsigned __int16 **v425;
  void **v427;
  mlir::OpBuilder *v428;
  unsigned __int16 **v429;
  unsigned __int16 **v431;
  void *__src[2];
  uint64_t v433;
  uint64_t v434;
  _BYTE *v435;
  uint64_t v436;
  _BYTE v437[32];
  _BYTE v438[16];
  _BYTE *v439;
  uint64_t v440;
  _BYTE v441[48];
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444[3];
  unsigned int v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  void *__p[2];
  _BYTE v450[256];
  __int128 v451;
  uint64_t v452;

  v452 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 9;
  v7 = a1 + 21;
  v425 = a1 + 23;
  v423 = a1 + 3;
  v424 = (uint64_t)(a1 + 1);
  v429 = a1 + 9;
  v428 = (mlir::OpBuilder *)(a2 + 8);
  v431 = a1 + 21;
  while (1)
  {
    v15 = *a1;
    v17 = *a1 + 1;
    v16 = **a1;
    *a1 = v17;
    result = 1;
    switch(v16)
    {
      case 0:
        *a1 = v15 + 2;
        v4 = v15[1];
        v110 = a1[29];
        __src[0] = &v433;
        __src[1] = (void *)0x1000000000;
        v111 = *(*a1)++;
        __p[0] = __src[0];
        __p[1] = (void *)LODWORD(__src[1]);
        v112 = *(_QWORD *)&v110[16 * v4 + 12];
        if (!v112)
          goto LABEL_548;
        v113 = &(*a1)[2
                    * (v111 == ((*(unsigned __int8 (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v112 + 48))(v112, a2, __p) != 0))];
        *a1 = v113;
        *a1 = &a1[23][*(unsigned int *)v113];
        v114 = __src[0];
        if (__src[0] != &v433)
          goto LABEL_480;
        continue;
      case 1:
        *a1 = v15 + 2;
        v4 = v15[1];
        v115 = a1[31];
        __p[0] = v450;
        __p[1] = (void *)0x1000000000;
        v116 = *(*a1)++;
        __src[0] = &v433;
        __src[1] = (void *)0x300000000;
        v435 = v437;
        v436 = 0x300000000;
        v439 = v441;
        v440 = 0x300000000;
        v442 = v444;
        v443 = 0x300000000;
        v446 = &v448;
        v447 = 0x300000000;
        if (v116 >= 4)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v435, v437, v116, 16);
          if (HIDWORD(v440) < v116)
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v439, v441, v116, 16);
        }
        *(void **)&v451 = __p[0];
        *((_QWORD *)&v451 + 1) = LODWORD(__p[1]);
        v336 = *(_QWORD *)&v115[16 * v4 + 12];
        if (!v336)
LABEL_548:
          std::__throw_bad_function_call[abi:nn180100]();
        v337 = (*(uint64_t (**)(uint64_t, uint64_t, void **, __int128 *))(*(_QWORD *)v336 + 48))(v336, a2, __src, &v451);
        if (!LODWORD(__src[1]))
          goto LABEL_348;
        v338 = (__int128 **)__src[0];
        v339 = 16 * LODWORD(__src[1]);
        do
        {
          v346 = *((_DWORD *)v338 + 2);
          if (v346 == 5)
          {
            v340 = a1[16];
            v341 = 8 * **a1;
            v342 = **v338;
            ++*a1;
            *(_OWORD *)&v340[v341] = v342;
            v343 = a1[16];
LABEL_342:
            v344 = &v343[v341];
            goto LABEL_343;
          }
          if (v346 == 3)
          {
            v347 = a1[13];
            v341 = 8 * **a1;
            v348 = **v338;
            ++*a1;
            *(_OWORD *)&v347[v341] = v348;
            v343 = a1[13];
            goto LABEL_342;
          }
          v344 = (unsigned __int16 *)*v338;
LABEL_343:
          v345 = *(*a1)++;
          *(_QWORD *)&a1[9][4 * v345] = v344;
          v338 += 2;
          v339 -= 16;
        }
        while (v339);
LABEL_348:
        if ((_DWORD)v443)
        {
          v4 = (unint64_t)v442;
          v349 = 16 * v443;
          do
          {
            while (1)
            {
              v350 = a1[15];
              v351 = (_QWORD *)*((_QWORD *)v350 + 1);
              if ((unint64_t)v351 < *((_QWORD *)v350 + 2))
                break;
              *((_QWORD *)v350 + 1) = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)a1[15], v4);
              v4 += 16;
              v349 -= 16;
              if (!v349)
                goto LABEL_353;
            }
            *v351 = 0;
            v351[1] = 0;
            *(_OWORD *)v351 = *(_OWORD *)v4;
            *(_QWORD *)v4 = 0;
            *(_QWORD *)(v4 + 8) = 0;
            v4 += 16;
            *((_QWORD *)v350 + 1) = v351 + 2;
            v349 -= 16;
          }
          while (v349);
        }
LABEL_353:
        if ((_DWORD)v447)
        {
          v4 = (unint64_t)v446;
          v352 = 16 * v447;
          do
          {
            while (1)
            {
              v353 = a1[18];
              v354 = (_QWORD *)*((_QWORD *)v353 + 1);
              if ((unint64_t)v354 < *((_QWORD *)v353 + 2))
                break;
              *((_QWORD *)v353 + 1) = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)a1[18], v4);
              v4 += 16;
              v352 -= 16;
              if (!v352)
                goto LABEL_358;
            }
            *v354 = 0;
            v354[1] = 0;
            *(_OWORD *)v354 = *(_OWORD *)v4;
            *(_QWORD *)v4 = 0;
            *(_QWORD *)(v4 + 8) = 0;
            v4 += 16;
            *((_QWORD *)v353 + 1) = v354 + 2;
            v352 -= 16;
          }
          while (v352);
        }
LABEL_358:
        mlir::PDLResultList::~PDLResultList((mlir::PDLResultList *)__src);
        if (__p[0] != v450)
          free(__p[0]);
        if (v337)
          continue;
        return 0;
      case 2:
        v119 = v15[2];
        v118 = v15 + 2;
        v117 = v119;
        *a1 = v118;
        v120 = *(v118 - 1);
        v121 = a1[10];
        if ((unint64_t)v121 <= v120)
          v122 = v7;
        else
          v122 = v6;
        if ((unint64_t)v121 <= v120)
          v123 = a1[10];
        else
          v123 = 0;
        v124 = *(_QWORD *)&(*v122)[4 * (v120 - (_QWORD)v123)];
        *a1 = v118 + 1;
        if ((unint64_t)v121 <= v117)
          v125 = v7;
        else
          v125 = v6;
        if ((unint64_t)v121 > v117)
          v121 = 0;
        v126 = &v118[2 * (v124 != *(_QWORD *)&(*v125)[4 * (v117 - (_QWORD)v121)]) + 1];
        *a1 = v126;
        v56 = *(unsigned int *)v126;
        goto LABEL_507;
      case 3:
        v129 = v15[3];
        v128 = v15 + 3;
        v127 = v129;
        v130 = *(v128 - 2);
        *a1 = v128;
        v131 = *(v128 - 1);
        v132 = a1[10];
        if ((unint64_t)v132 <= v131)
          v133 = v7;
        else
          v133 = v6;
        if ((unint64_t)v132 <= v131)
          v134 = a1[10];
        else
          v134 = 0;
        v135 = *(uint64_t **)&(*v133)[4 * (v131 - (_QWORD)v134)];
        *a1 = v128 + 1;
        if ((unint64_t)v132 <= v127)
          v136 = v7;
        else
          v136 = v6;
        if ((unint64_t)v132 > v127)
          v132 = 0;
        v137 = *(uint64_t **)&(*v136)[4 * (v127 - (_QWORD)v132)];
        if (v130 != 3)
        {
          v4 = v135[1];
          if (v4 == v137[1])
          {
            v355 = (void *)*v137;
            v356 = (void *)*v135;
            __src[0] = (void *)*v135;
            __src[1] = 0;
            __p[0] = v355;
            __p[1] = 0;
            if (v4)
            {
              v357 = 0;
              while (1)
              {
                v358 = mlir::ValueRange::dereference_iterator(__src, (uint64_t)v357);
                if (v358 != mlir::ValueRange::dereference_iterator(__p, (uint64_t)__p[1]))
                  goto LABEL_511;
                v357 = ++__src[1];
                v359 = ++__p[1];
                if (__src[0] == v356 && v357 == (void *)v4)
                  break;
                if (__p[0] == v355 && v359 == (void *)v4)
                  goto LABEL_511;
              }
              if (__p[0] != v355)
                goto LABEL_511;
            }
            else
            {
              v359 = 0;
            }
            v328 = v359 != (void *)v4;
            v404 = 2;
            if (!v328)
              v404 = 0;
            goto LABEL_512;
          }
LABEL_511:
          v404 = 2;
LABEL_512:
          v140 = &(*a1)[v404];
          *a1 = v140;
          goto LABEL_506;
        }
        v138 = v135[1];
        if (v138 == v137[1])
        {
          if (std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(*v135, 0, *v135, v138, *v137, 0, *v137, v138))
          {
            v139 = 0;
          }
          else
          {
            v139 = 2;
          }
          v140 = &(*a1)[v139];
          *a1 = v140;
        }
        else
        {
          v140 = v128 + 3;
          *a1 = v128 + 3;
        }
LABEL_506:
        v56 = *(unsigned int *)v140;
LABEL_507:
        v57 = a1[23];
LABEL_508:
        *a1 = &v57[v56];
        continue;
      case 4:
        goto LABEL_424;
      case 5:
        *a1 = v15 + 2;
        v141 = *(_QWORD *)&a1[9][4 * v15[1]];
        v142 = *((_DWORD *)v15 + 1);
        v77 = v15 + 5;
        *a1 = v15 + 5;
        v143 = *(_DWORD *)(v141 + 44);
        if (v15[4])
        {
          if ((v143 & 0x800000) != 0)
            v144 = *(_DWORD *)(v141 + 68);
          else
            v144 = 0;
          v145 = v144 < v142;
        }
        else
        {
          if ((v143 & 0x800000) != 0)
            v363 = *(_DWORD *)(v141 + 68);
          else
            v363 = 0;
          v145 = v363 != v142;
        }
        v81 = 2 * v145;
        goto LABEL_399;
      case 6:
        v148 = v15[2];
        v147 = v15 + 2;
        v146 = v148;
        *a1 = v147;
        v149 = (unint64_t)a1[10];
        v150 = *(_QWORD *)&a1[9][4 * *(v147 - 1)];
        *a1 = v147 + 1;
        v151 = v149 > v148;
        if (v149 <= v148)
          v152 = v7;
        else
          v152 = v6;
        if (v151)
          v149 = 0;
        v153 = &v147[2 * (*(_QWORD *)(v150 + 48) != *(_QWORD *)&(*v152)[4 * (v146 - v149)]) + 1];
        *a1 = v153;
        v56 = *(unsigned int *)v153;
        goto LABEL_507;
      case 7:
        *a1 = v15 + 2;
        v154 = *((_DWORD *)v15 + 1);
        v155 = *(_DWORD *)(*(_QWORD *)&a1[9][4 * v15[1]] + 36);
        v328 = v155 == v154;
        v156 = v155 < v154;
        v157 = !v328;
        v158 = 2 * v157;
        v159 = 2 * v156;
        if (!v15[4])
          v159 = v158;
        v160 = &v15[v159 + 5];
        *a1 = v160;
        v56 = *(unsigned int *)v160;
        goto LABEL_507;
      case 8:
        v163 = v15[2];
        v162 = v15 + 2;
        v161 = v163;
        *a1 = v162;
        v164 = (unint64_t)a1[10];
        v165 = *(uint64_t **)&a1[9][4 * *(v162 - 1)];
        *a1 = v162 + 1;
        v166 = v164 > v163;
        if (v164 <= v163)
          v167 = v7;
        else
          v167 = v6;
        if (v166)
          v168 = 0;
        else
          v168 = v164;
        __p[0] = *(void **)&(*v167)[4 * (v161 - v168)];
        Value = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
        v170 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
        v172 = (void **)(v170 + 8 * v171);
        v173 = v165[1];
        if (v173 != v172 - Value)
          goto LABEL_497;
        v4 = 0;
        if (!v173)
          goto LABEL_493;
        v174 = *v165;
        while (Value != v172)
        {
          v175 = mlir::TypeRange::dereference_iterator(v174, v4);
          __src[0] = *Value;
          if (v175 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src))
            goto LABEL_497;
          ++v4;
          ++Value;
          if (v173 == v4)
            goto LABEL_494;
        }
        Value = v172;
LABEL_493:
        if (v4 != v173)
        {
LABEL_497:
          v402 = 2;
          goto LABEL_498;
        }
LABEL_494:
        v402 = 2;
        if (Value == v172)
          v402 = 0;
LABEL_498:
        v403 = &(*a1)[v402];
        *a1 = v403;
        *a1 = &a1[23][*(unsigned int *)v403];
        continue;
      case 9:
        *a1 = v15 + 2;
        ++*(_DWORD *)&a1[19][2 * v15[1]];
        v25 = *((unsigned int *)a1 + 4);
        *a1 = *(unsigned __int16 **)&a1[1][4 * v25 - 4];
        *((_DWORD *)a1 + 4) = v25 - 1;
        continue;
      case 10:
        v26 = v15[1];
        v27 = v6;
        v28 = v15[2];
        *a1 = v15 + 4;
        v29 = v15[3];
        v30 = a1[10];
        if ((unint64_t)v30 > v29)
          v30 = 0;
        else
          v27 = v7;
        *(_QWORD *)&v451 = *(_QWORD *)&(*v27)[4 * (v29 - (_QWORD)v30)];
        v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v451);
        v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v451);
        v33 = v31 + 8 * v32;
        v34 = v33 - v4;
        if (v33 == v4)
        {
          mlir::ValueRange::ValueRange((unint64_t *)__src, 0, 0);
          *(_OWORD *)&a1[13][8 * v28] = *(_OWORD *)__src;
        }
        else
        {
          v35 = a1[15];
          if (v34 < 0)
            v36 = -1;
          else
            v36 = v33 - v4;
          v37 = operator new[](v36);
          bzero(v37, v33 - v4);
          __src[0] = v37;
          __src[1] = (void *)(v34 >> 3);
          do
          {
            v38 = *(void **)v4;
            v4 += 8;
            __p[0] = v38;
            *v37++ = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
          }
          while (v4 != v33);
          v39 = (_OWORD *)*((_QWORD *)v35 + 1);
          if ((unint64_t)v39 >= *((_QWORD *)v35 + 2))
          {
            v40 = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)v35, (uint64_t)__src);
          }
          else
          {
            *v39 = *(_OWORD *)__src;
            __src[0] = 0;
            __src[1] = 0;
            v40 = v39 + 1;
          }
          *((_QWORD *)v35 + 1) = v40;
          mlir::ValueRange::ValueRange((unint64_t *)__p, *((_QWORD *)v40 - 2), *((_QWORD *)v40 - 1));
          *(_OWORD *)&a1[13][8 * v28] = *(_OWORD *)__p;
          if (__src[0])
            operator delete[](__src[0]);
        }
        *(_QWORD *)&a1[9][4 * v26] = &a1[13][8 * v28];
        v6 = v429;
        continue;
      case 11:
        v176 = v15[1];
        *a1 = v15 + 3;
        v177 = v15[2];
        v178 = a1[10];
        if ((unint64_t)v178 <= v177)
          v179 = v7;
        else
          v179 = v6;
        if ((unint64_t)v178 > v177)
          v178 = 0;
        mlir::OperationState::OperationState(__src, a4, *(_QWORD *)&(*v179)[4 * (v177 - (_QWORD)v178)]);
        v180 = *a1 + 1;
        v181 = **a1;
        *a1 = v180;
        v4 = (unint64_t)v438;
        if (v181)
        {
          do
          {
            v184 = *a1;
            v185 = (*a1)[1];
            ++*a1;
            v188 = *v184;
            v186 = v184 + 2;
            v187 = v188;
            v189 = (unint64_t)a1[10];
            v190 = v189 > v188;
            if (v189 <= v188)
              v191 = v7;
            else
              v191 = v6;
            if (v190)
              v192 = 0;
            else
              v192 = a1[10];
            v193 = *(_QWORD *)&(*v191)[4 * (v187 - (_QWORD)v192)];
            *a1 = v186;
            if (v189 <= v185)
              v194 = v7;
            else
              v194 = v6;
            if (v189 <= v185)
              v195 = v189;
            else
              v195 = 0;
            v196 = *(_QWORD *)&(*v194)[4 * (v185 - v195)];
            if (v196)
            {
              mlir::NamedAttribute::NamedAttribute(__p, v193, v196);
              mlir::NamedAttrList::push_back((uint64_t)v438, (uint64_t)__p[0], (uint64_t)__p[1]);
            }
            --v181;
          }
          while (v181);
          v182 = *(*a1)++;
          if (!v182)
            goto LABEL_309;
        }
        else
        {
          v183 = *v180;
          v182 = v183;
          *a1 = v180 + 1;
          if (!v183)
            goto LABEL_309;
        }
        if (v182 == 0xFFFF)
        {
          v313 = *(unsigned __int8 (**)(uint64_t, unint64_t, uint64_t, void *, void *, unint64_t, uint64_t *))mlir::detail::InterfaceMap::lookup<mlir::InferTypeOpInterface>((uint64_t)__src[1] + 32);
          Context = mlir::Attribute::getContext((mlir::Attribute *)__src);
          v4 = (unint64_t)__src[0];
          mlir::ValueRange::ValueRange((unint64_t *)__p, v433, v434);
          v315 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)__src);
          Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v438, v315);
          v317 = v446;
          mlir::ValueRange::ValueRange((unint64_t *)&v451, v444[2], v445);
          if (!v313(Context, v4, 1, __p[0], __p[1], Dictionary, v317))
            goto LABEL_310;
        }
        else
        {
          v364 = 0;
          do
          {
            while (1)
            {
              v365 = *a1;
              v366 = **a1;
              *a1 += 2;
              v367 = v365[1];
              if (v366 != 2)
                break;
              v368 = a1[10];
              if ((unint64_t)v368 <= v367)
                v369 = v7;
              else
                v369 = v6;
              if ((unint64_t)v368 > v367)
                v368 = 0;
              v370 = *(_QWORD *)&(*v369)[4 * (v367 - (_QWORD)v368)];
              v371 = v436;
              if (v436 >= (unint64_t)HIDWORD(v436))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v435, v437, v436 + 1, 8);
                v371 = v436;
              }
              *(_QWORD *)&v435[8 * v371] = v370;
              LODWORD(v436) = v436 + 1;
              if (++v364 == v182)
                goto LABEL_309;
            }
            v372 = *(uint64_t **)&(*v6)[4 * v367];
            v373 = *v372;
            v374 = v372[1];
            v375 = v436;
            v376 = v374 + v436;
            if (v376 > HIDWORD(v436))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v435, v437, v376, 8);
              v375 = v436;
            }
            if (v374)
            {
              v4 = 0;
              v377 = &v435[8 * v375];
              do
              {
                *(_QWORD *)&v377[8 * v4] = mlir::TypeRange::dereference_iterator(v373, v4);
                ++v4;
              }
              while (v374 != v4);
              v375 = v436;
            }
            LODWORD(v436) = v375 + v374;
            ++v364;
          }
          while (v364 != v182);
        }
LABEL_309:
        *(_QWORD *)&(*v6)[4 * v176] = mlir::OpBuilder::create(v428, (const mlir::OperationState *)__src);
LABEL_310:
        mlir::OperationState::~OperationState((mlir::OperationState *)__src);
        continue;
      case 12:
        v197 = v15[1];
        v198 = v15[2];
        __src[0] = &v433;
        __src[1] = (void *)0x600000000;
        *a1 = v15 + 4;
        v199 = v15[3];
        if (!v15[3])
          goto LABEL_314;
        v200 = 0;
        v201 = 0;
        do
        {
          while (1)
          {
            v202 = *a1;
            v203 = **a1;
            *a1 += 2;
            v204 = v202[1];
            if (v203 != 2)
              break;
            v205 = a1[10];
            if ((unint64_t)v205 <= v204)
              v206 = v7;
            else
              v206 = v6;
            if ((unint64_t)v205 > v204)
              v205 = 0;
            v207 = *(_QWORD *)&(*v206)[4 * (v204 - (_QWORD)v205)];
            if (v200 >= HIDWORD(__src[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v433, v200 + 1, 8);
              v200 = __src[1];
            }
            *((_QWORD *)__src[0] + v200) = v207;
            v200 = ++LODWORD(__src[1]);
            if (++v201 == v199)
              goto LABEL_311;
          }
          v208 = *(uint64_t **)&(*v6)[4 * v204];
          v209 = *v208;
          v210 = v208[1];
          v211 = v210 + v200;
          if (v211 > HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v433, v211, 8);
            v200 = __src[1];
          }
          if (v210)
          {
            v212 = 0;
            v213 = (char *)__src[0] + 8 * v200;
            do
            {
              *(_QWORD *)&v213[8 * v212] = mlir::TypeRange::dereference_iterator(v209, v212);
              ++v212;
            }
            while (v210 != v212);
            v200 = __src[1];
            v7 = v431;
          }
          v200 += v210;
          LODWORD(__src[1]) = v200;
          ++v201;
        }
        while (v201 != v199);
LABEL_311:
        if (v200)
        {
          v318 = a1[15];
          v319 = 8 * v200;
          v320 = v200;
          v321 = operator new[](v319);
          bzero(v321, v319);
          __p[0] = v321;
          __p[1] = (void *)v320;
          memmove(v321, __src[0], v319);
          v322 = (_OWORD *)*((_QWORD *)v318 + 1);
          if ((unint64_t)v322 >= *((_QWORD *)v318 + 2))
          {
            v323 = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)v318, (uint64_t)__p);
          }
          else
          {
            *v322 = *(_OWORD *)__p;
            __p[1] = 0;
            __p[0] = 0;
            v323 = v322 + 1;
          }
          v4 = (unint64_t)&v433;
          *((_QWORD *)v318 + 1) = v323;
          mlir::ValueRange::ValueRange((unint64_t *)&v451, *((_QWORD *)v323 - 2), *((_QWORD *)v323 - 1));
          *(_OWORD *)&a1[13][8 * v198] = v451;
          if (__p[0])
            operator delete[](__p[0]);
        }
        else
        {
LABEL_314:
          mlir::ValueRange::ValueRange((unint64_t *)__p, 0, 0);
          *(_OWORD *)&a1[13][8 * v198] = *(_OWORD *)__p;
          v4 = (unint64_t)&v433;
        }
        *(_QWORD *)&a1[9][4 * v197] = &a1[13][8 * v198];
        v114 = __src[0];
        if (__src[0] != &v433)
LABEL_480:
          free(v114);
        continue;
      case 13:
        v41 = v15[1];
        *a1 = v15 + 3;
        v42 = v15[2];
        __src[0] = &v433;
        __src[1] = (void *)0x600000000;
        v43 = LODWORD(__src[1]);
        if (LODWORD(__src[1]))
        {
          v44 = a1[18];
          LOBYTE(v4) = 8 * LOBYTE(__src[1]);
          v45 = operator new[](8 * LODWORD(__src[1]));
          bzero(v45, 8 * v43);
          __p[0] = v45;
          __p[1] = (void *)v43;
          memmove(v45, __src[0], 8 * v43);
          v46 = (_OWORD *)*((_QWORD *)v44 + 1);
          if ((unint64_t)v46 >= *((_QWORD *)v44 + 2))
          {
            v47 = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)v44, (uint64_t)__p);
          }
          else
          {
            *v46 = *(_OWORD *)__p;
            __p[1] = 0;
            __p[0] = 0;
            v47 = v46 + 1;
          }
          *((_QWORD *)v44 + 1) = v47;
          mlir::ValueRange::ValueRange((unint64_t *)&v451, *((_QWORD *)v47 - 2), *((_QWORD *)v47 - 1));
          *(_OWORD *)&a1[16][8 * v42] = v451;
          if (__p[0])
            operator delete[](__p[0]);
        }
        else
        {
          mlir::ValueRange::ValueRange((unint64_t *)__p, 0, 0);
          *(_OWORD *)&a1[16][8 * v42] = *(_OWORD *)__p;
        }
        *(_QWORD *)&a1[9][4 * v41] = &a1[16][8 * v42];
        v114 = __src[0];
        if (__src[0] != &v433)
          goto LABEL_480;
        continue;
      case 14:
        *a1 = v15 + 2;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)&a1[9][4 * v15[1]]);
        continue;
      case 15:
        *a1 = v15 + 2;
        v214 = v15[1];
        v215 = a1[10];
        if ((unint64_t)v215 <= v214)
          v216 = v7;
        else
          v216 = v6;
        if ((unint64_t)v215 > v214)
          v215 = 0;
        v217 = *(_QWORD **)&(*v216)[4 * (v214 - (_QWORD)v215)];
        v218 = *((unsigned int *)v15 + 1);
        *a1 = v15 + 5;
        v219 = v15[4];
        if (v217)
        {
          if (v217[1] <= v218)
            v220 = 0;
          else
            v220 = *(_QWORD *)(*v217 + 8 * v218);
          *(_QWORD *)&(*v6)[4 * v219] = v220;
        }
        else
        {
          *(_QWORD *)&(*v6)[4 * v219] = 0;
        }
        continue;
      case 16:
        *a1 = v15 + 2;
        v221 = a1[9];
        v222 = *(uint64_t **)&v221[4 * v15[1]];
        v223 = *((unsigned int *)v15 + 1);
        *a1 = v15 + 5;
        v224 = v15[4];
        if (v222)
        {
          if (v222[1] <= v223)
            *(_QWORD *)&v221[4 * v224] = 0;
          else
            *(_QWORD *)&(*v6)[4 * v224] = mlir::TypeRange::dereference_iterator(*v222, v223);
        }
        else
        {
          *(_QWORD *)&v221[4 * v224] = 0;
        }
        continue;
      case 17:
        *a1 = v15 + 2;
        v225 = a1[9];
        v226 = *(_QWORD **)&v225[4 * v15[1]];
        v227 = *((unsigned int *)v15 + 1);
        *a1 = v15 + 5;
        v228 = v15[4];
        if (!v226)
          goto LABEL_217;
        if (v226[1] <= v227)
        {
          *(_QWORD *)&v225[4 * v228] = 0;
        }
        else
        {
          v226 = (_QWORD *)mlir::ValueRange::dereference_iterator(v226, v227);
          v225 = *v6;
LABEL_217:
          *(_QWORD *)&v225[4 * v228] = v226;
        }
        continue;
      case 18:
        return result;
      case 19:
        v48 = v15[1];
        v49 = v15[2];
        v50 = v15 + 5;
        *a1 = v15 + 5;
        v51 = v15[4];
        v52 = a1[19];
        v53 = &a1[11][8 * v48];
        v54 = *(unsigned int *)&v52[2 * v51];
        if (*((_QWORD *)v53 + 1) <= v54)
        {
          *(_DWORD *)&v52[2 * v51] = 0;
          *a1 = v50;
          v56 = *(unsigned int *)v50;
          v57 = *v425;
        }
        else
        {
          *(_QWORD *)&a1[9][4 * v49] = *(_QWORD *)(*(_QWORD *)v53 + 8 * v54);
          v55 = *((unsigned int *)a1 + 4);
          if (v55 >= *((unsigned int *)a1 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v424, v423, v55 + 1, 8);
            v55 = *((unsigned int *)a1 + 4);
          }
          *(_QWORD *)&a1[1][4 * v55] = v15;
          ++*((_DWORD *)a1 + 4);
          v56 = 2;
          v57 = *a1;
        }
        goto LABEL_508;
      case 20:
        v231 = v15[3];
        v230 = v15 + 3;
        v229 = v231;
        v4 = *(v230 - 2);
        *a1 = v230;
        v232 = (unint64_t)a1[10];
        v233 = *(_QWORD *)&a1[9][4 * *(v230 - 1)];
        *a1 = v230 + 1;
        v234 = v232 > v231;
        if (v232 <= v231)
          v235 = v7;
        else
          v235 = v6;
        if (v234)
          v236 = 0;
        else
          v236 = v232;
        v237 = *(void **)&(*v235)[4 * (v229 - v236)];
        __src[0] = v237;
        if (!*(_BYTE *)(v233 + 47))
          goto LABEL_227;
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__src);
        InherentAttr = mlir::Operation::getInherentAttr(v233, AttrData, v239);
        if (!v241)
        {
          v237 = __src[0];
LABEL_227:
          InherentAttr = mlir::DictionaryAttr::get(v233 + 56, (uint64_t)v237);
        }
        *(_QWORD *)&(*v6)[4 * v4] = InherentAttr;
        continue;
      case 21:
        v58 = v15[1];
        *a1 = v15 + 3;
        v59 = v15[2];
        v60 = a1[10];
        if ((unint64_t)v60 <= v59)
          v61 = v7;
        else
          v61 = v6;
        if ((unint64_t)v60 > v59)
          v60 = 0;
        v4 = *(_QWORD *)&(*v61)[4 * (v59 - (_QWORD)v60)];
        if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v4 + 8))
        {
          LOBYTE(v4) = 0;
          __src[0] = 0;
          __src[1] = 0;
          goto LABEL_393;
        }
        v62 = (void *)mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v4 + 8);
        __src[0] = (void *)v4;
        __src[1] = v62;
        if (!v4)
          goto LABEL_393;
        canMapOperands = (_QWORD *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)__src);
        goto LABEL_394;
      case 22:
        v58 = v15[1];
        if (v15[2] == 4)
        {
          *a1 = v15 + 4;
          __src[0] = *(void **)&a1[9][4 * v15[3]];
          if (__src[0])
            goto LABEL_379;
        }
        else
        {
          *a1 = v15 + 4;
          canMapOperands = *(_QWORD **)&a1[9][4 * v15[3]];
          if (!canMapOperands)
            goto LABEL_394;
          if (canMapOperands[1])
          {
            __src[0] = (void *)mlir::ValueRange::dereference_iterator(canMapOperands, 0);
LABEL_379:
            canMapOperands = (_QWORD *)mlir::Value::getDefiningOp((mlir::Value *)__src);
            goto LABEL_394;
          }
        }
LABEL_393:
        canMapOperands = 0;
LABEL_394:
        *(_QWORD *)&(*v6)[4 * v58] = canMapOperands;
        continue;
      case 23:
      case 24:
      case 25:
      case 26:
        v21 = v15[2];
        v20 = v15 + 2;
        v19 = v21;
        *a1 = v20;
        v22 = a1[9];
        v23 = *(_QWORD *)&v22[4 * *(v20 - 1)];
        *a1 = v20 + 1;
        if ((*(_BYTE *)(v23 + 46) & 0x80) != 0)
        {
          v24 = (v16 - 23);
          if (*(_DWORD *)(v23 + 68) <= v24)
            *(_QWORD *)&v22[4 * v19] = 0;
          else
            *(_QWORD *)&v22[4 * v19] = *(_QWORD *)(*(_QWORD *)(v23 + 72) + 32 * v24 + 24);
        }
        else
        {
          *(_QWORD *)&v22[4 * v19] = 0;
        }
        continue;
      case 27:
        v244 = v15[4];
        v243 = v15 + 4;
        v242 = v244;
        v245 = *(unsigned int *)(v243 - 3);
        *a1 = v243;
        v246 = a1[9];
        v247 = *(_QWORD *)&v246[4 * *(v243 - 1)];
        *a1 = v243 + 1;
        if ((*(_BYTE *)(v247 + 46) & 0x80) != 0)
        {
          if (*(_DWORD *)(v247 + 68) <= v245)
            *(_QWORD *)&v246[4 * v242] = 0;
          else
            *(_QWORD *)&v246[4 * v242] = *(_QWORD *)(*(_QWORD *)(v247 + 72) + 32 * v245 + 24);
        }
        else
        {
          *(_QWORD *)&v246[4 * v242] = 0;
        }
        continue;
      case 28:
        v250 = v15[4];
        v249 = v15 + 4;
        v248 = v250;
        v251 = *(unsigned int *)(v249 - 3);
        *a1 = v249;
        v252 = *(_QWORD *)&a1[9][4 * *(v249 - 1)];
        *a1 = v249 + 1;
        if ((*(_BYTE *)(v252 + 46) & 0x80) != 0)
        {
          v253 = *(_QWORD *)(v252 + 72);
          v4 = *(unsigned int *)(v252 + 68);
          v254 = a1[16];
          if ((_DWORD)v251 == -1)
            goto LABEL_485;
        }
        else
        {
          v253 = 0;
          v4 = 0;
          v254 = a1[16];
          if ((_DWORD)v251 == -1)
            goto LABEL_485;
        }
        if (!mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedOperandSegments>((_QWORD *)(v252 + 48)))
        {
          v379 = v4 >= v251;
          v4 -= v251;
          if (!v379)
          {
            v380 = 0;
            v6 = v429;
            goto LABEL_524;
          }
          v253 += 32 * v251;
LABEL_485:
          v6 = v429;
          if ((_DWORD)v248 != 0xFFFF)
            goto LABEL_486;
          goto LABEL_521;
        }
        if (*(_BYTE *)(v252 + 47)
          && (v255 = mlir::Operation::getInherentAttr(v252, (uint64_t)"operandSegmentSizes", 19), v256))
        {
          v4 = v255;
          if (!v255)
            goto LABEL_460;
        }
        else
        {
          v4 = mlir::DictionaryAttr::get(v252 + 56, "operandSegmentSizes", 0x13uLL);
          if (!v4)
            goto LABEL_460;
        }
        v383 = mlir::detail::DenseArrayAttrImpl<int>::classof((_QWORD *)v4);
        if (v383)
          v384 = (void *)v4;
        else
          v384 = 0;
        __src[0] = v384;
        if (!v383
          || (mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src), v385 <= v251))
        {
LABEL_460:
          v380 = 0;
          v6 = v429;
          goto LABEL_524;
        }
        v386 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
        v387 = (int *)(v386 + 4 * v251);
        if (!(_DWORD)v251)
        {
          v6 = v429;
          v4 = *v387;
          if ((_DWORD)v248 != 0xFFFF)
            goto LABEL_486;
          goto LABEL_521;
        }
        v388 = (v251 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v388 < 7)
        {
          v389 = 0;
          v390 = (int *)v386;
          v6 = v429;
          do
          {
LABEL_519:
            v411 = *v390++;
            v389 += v411;
          }
          while (v390 != v387);
          goto LABEL_520;
        }
        v405 = v388 + 1;
        v406 = (v388 + 1) & 0x7FFFFFFFFFFFFFF8;
        v390 = (int *)(v386 + 4 * v406);
        v407 = (int32x4_t *)(v386 + 16);
        v408 = 0uLL;
        v409 = v406;
        v410 = 0uLL;
        v6 = v429;
        do
        {
          v408 = vaddq_s32(v407[-1], v408);
          v410 = vaddq_s32(*v407, v410);
          v407 += 2;
          v409 -= 8;
        }
        while (v409);
        v389 = vaddvq_s32(vaddq_s32(v410, v408));
        if (v405 != v406)
          goto LABEL_519;
LABEL_520:
        v4 = *v387;
        v253 += 32 * v389;
        if ((_DWORD)v248 != 0xFFFF)
        {
LABEL_486:
          mlir::ValueRange::ValueRange((unint64_t *)__src, v253, v4);
          v380 = &v254[8 * v248];
          *(_OWORD *)v380 = *(_OWORD *)__src;
          goto LABEL_524;
        }
LABEL_521:
        if (v4 == 1)
          v380 = *(unsigned __int16 **)(v253 + 24);
        else
          v380 = 0;
LABEL_524:
        v412 = *(*a1)++;
        *(_QWORD *)&a1[9][4 * v412] = v380;
        continue;
      case 29:
      case 30:
      case 31:
      case 32:
        v8 = v16 - 29;
        v11 = v15[2];
        v10 = v15 + 2;
        v9 = v11;
        *a1 = v10;
        v12 = a1[9];
        v13 = *(_QWORD *)&v12[4 * *(v10 - 1)];
        *a1 = v10 + 1;
        v14 = v13 - 16 * (v16 - 28);
        if (*(_DWORD *)(v13 + 36) <= v8)
          v14 = 0;
        *(_QWORD *)&v12[4 * v9] = v14;
        continue;
      case 33:
        v259 = v15[4];
        v258 = v15 + 4;
        v257 = v259;
        v260 = *(unsigned int *)(v258 - 3);
        *a1 = v258;
        v261 = a1[9];
        v262 = *(_QWORD *)&v261[4 * *(v258 - 1)];
        *a1 = v258 + 1;
        if (*(_DWORD *)(v262 + 36) <= v260)
        {
          *(_QWORD *)&v261[4 * v257] = 0;
        }
        else if (v260 > 5)
        {
          *(_QWORD *)&v261[4 * v257] = v262 - 24 * (v260 - 5) - 96;
        }
        else
        {
          *(_QWORD *)&v261[4 * v257] = v262 - 16 * v260 - 16;
        }
        continue;
      case 34:
        v265 = v15[4];
        v264 = v15 + 4;
        v263 = v265;
        v4 = *(unsigned int *)(v264 - 3);
        *a1 = v264;
        v266 = *(_QWORD *)&a1[9][4 * *(v264 - 1)];
        *a1 = v264 + 1;
        v267 = *(unsigned int *)(v266 + 36);
        v268 = a1[16];
        if ((_DWORD)v267)
          NextResultAtOffset = v266 - 16;
        else
          NextResultAtOffset = 0;
        if ((_DWORD)v4 == -1)
          goto LABEL_445;
        if (!mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedResultSegments>((_QWORD *)(v266 + 48)))
        {
          if (v267 < v4)
            goto LABEL_534;
          if ((_DWORD)v4)
            NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v4);
          v267 -= v4;
LABEL_445:
          if ((_DWORD)v263 != 0xFFFF)
          {
LABEL_446:
            mlir::ValueRange::ValueRange((unint64_t *)__src, NextResultAtOffset, v267);
            v381 = &v268[8 * v263];
            *(_OWORD *)v381 = *(_OWORD *)__src;
            goto LABEL_535;
          }
          goto LABEL_532;
        }
        if (*(_BYTE *)(v266 + 47)
          && (v270 = mlir::Operation::getInherentAttr(v266, (uint64_t)"resultSegmentSizes", 18), v271))
        {
          v272 = (_QWORD *)v270;
          if (!v270)
            goto LABEL_534;
        }
        else
        {
          v272 = (_QWORD *)mlir::DictionaryAttr::get(v266 + 56, "resultSegmentSizes", 0x12uLL);
          if (!v272)
            goto LABEL_534;
        }
        v391 = mlir::detail::DenseArrayAttrImpl<int>::classof(v272);
        if (v391)
          v392 = v272;
        else
          v392 = 0;
        __src[0] = v392;
        if (v391)
        {
          mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
          if (v393 > v4)
          {
            v394 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
            v395 = (int *)(v394 + 4 * v4);
            if ((_DWORD)v4)
            {
              v396 = (v4 - 1) & 0x3FFFFFFFFFFFFFFFLL;
              if (v396 < 7)
              {
                v397 = 0;
                v398 = (int *)v394;
                goto LABEL_528;
              }
              v413 = v396 + 1;
              v414 = (v396 + 1) & 0x7FFFFFFFFFFFFFF8;
              v398 = (int *)(v394 + 4 * v414);
              v415 = (int32x4_t *)(v394 + 16);
              v416 = 0uLL;
              v417 = v414;
              v418 = 0uLL;
              do
              {
                v416 = vaddq_s32(v415[-1], v416);
                v418 = vaddq_s32(*v415, v418);
                v415 += 2;
                v417 -= 8;
              }
              while (v417);
              v397 = vaddvq_s32(vaddq_s32(v418, v416));
              if (v413 != v414)
              {
                do
                {
LABEL_528:
                  v419 = *v398++;
                  v397 += v419;
                }
                while (v398 != v395);
              }
              LODWORD(v4) = *v395;
              if (v397)
                NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v397);
            }
            else
            {
              LODWORD(v4) = *v395;
            }
            v267 = (int)v4;
            if ((_DWORD)v263 != 0xFFFF)
              goto LABEL_446;
LABEL_532:
            if (v267 == 1)
            {
              v381 = (unsigned __int16 *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0);
              goto LABEL_535;
            }
          }
        }
LABEL_534:
        v381 = 0;
LABEL_535:
        v420 = *(*a1)++;
        *(_QWORD *)&a1[9][4 * v420] = v381;
        continue;
      case 35:
        v63 = v15[1];
        *a1 = v15 + 3;
        v4 = (unint64_t)&a1[11][8 * v15[2]];
        *(_QWORD *)&a1[9][4 * v63] = v4;
        if (*(_QWORD *)v4)
          operator delete[](*(void **)v4);
        *(_QWORD *)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        v64 = *a1;
        v65 = **a1;
        *a1 += 2;
        v66 = *(_QWORD *)&a1[9][4 * v64[1]];
        if (v65 == 4)
        {
          if (!v66)
            continue;
          v67 = *(_QWORD **)v66;
          if (!*(_QWORD *)v66)
          {
            v72 = operator new[](0);
            *(_QWORD *)v4 = v72;
            *(_QWORD *)(v4 + 8) = 0;
            v73 = *(_QWORD **)v66;
            if (!*(_QWORD *)v66)
              continue;
            do
            {
LABEL_488:
              *v72++ = v73[2];
              v73 = (_QWORD *)*v73;
            }
            while (v73);
            continue;
          }
          v68 = 0;
          v69 = -1;
          do
          {
            v67 = (_QWORD *)*v67;
            ++v69;
            v68 += 8;
          }
          while (v67);
          if (v69 > 0x1FFFFFFFFFFFFFFELL)
            v70 = -1;
          else
            v70 = v68;
          v71 = v69 + 1;
          v72 = operator new[](v70);
          *(_QWORD *)v4 = v72;
          *(_QWORD *)(v4 + 8) = v71;
          v73 = *(_QWORD **)v66;
          if (*(_QWORD *)v66)
            goto LABEL_488;
        }
        else
        {
          if (!v66)
            continue;
          __src[0] = &v433;
          __src[1] = (void *)0x600000000;
          v324 = *(_QWORD **)v66;
          __p[0] = *(void **)v66;
          __p[1] = 0;
          v325 = *(void **)(v66 + 8);
          if (v325)
          {
            v326 = 0;
            while (1)
            {
              v329 = (_QWORD *)mlir::ValueRange::dereference_iterator(__p, (uint64_t)v326);
              v330 = (_QWORD *)*v329;
              if (*v329)
              {
                v331 = 0;
                v332 = (_QWORD *)*v329;
                do
                {
                  ++v331;
                  v332 = (_QWORD *)*v332;
                }
                while (v332);
                v333 = LODWORD(__src[1]);
                v334 = v331 + LODWORD(__src[1]);
                if (v334 <= HIDWORD(__src[1]))
                  goto LABEL_330;
              }
              else
              {
                LODWORD(v331) = 0;
                v333 = LODWORD(__src[1]);
                v334 = LODWORD(__src[1]);
                if (LODWORD(__src[1]) <= (unint64_t)HIDWORD(__src[1]))
                  goto LABEL_330;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v433, v334, 8);
              v333 = LODWORD(__src[1]);
LABEL_330:
              if (v330)
              {
                v335 = (char *)__src[0] + 8 * v333;
                do
                {
                  *v335++ = v330[2];
                  v330 = (_QWORD *)*v330;
                }
                while (v330);
              }
              v327 = v333 + v331;
              LODWORD(__src[1]) = v333 + v331;
              v326 = ++__p[1];
              v328 = __p[0] == v324 && v326 == v325;
              if (v328)
              {
                v399 = operator new[](8 * (v333 + v331));
                v400 = *(void **)v4;
                v401 = v327;
                if (*(_QWORD *)v4)
                  goto LABEL_471;
                goto LABEL_472;
              }
            }
          }
          v327 = 0;
          v399 = operator new[](0);
          v400 = *(void **)v4;
          v401 = 0;
          if (*(_QWORD *)v4)
          {
LABEL_471:
            operator delete[](v400);
            v401 = __src[1];
          }
LABEL_472:
          *(_QWORD *)v4 = v399;
          *(_QWORD *)(v4 + 8) = v327;
          v4 = (unint64_t)__src[0];
          if (v401)
            memmove(v399, __src[0], 8 * v401);
          if ((uint64_t *)v4 != &v433)
            free((void *)v4);
        }
        continue;
      case 36:
        v74 = v15[1];
        *a1 = v15 + 3;
        v75 = a1[9];
        v76 = *(_QWORD *)&v75[4 * v15[2]];
        if (v76)
          v76 = *(_QWORD *)(v76 + 8) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v75[4 * v74] = v76;
        continue;
      case 37:
        v273 = v15[1];
        v4 = v15[2];
        *a1 = v15 + 4;
        v274 = a1[9];
        v275 = *(__n128 **)&v274[4 * v15[3]];
        if (v275)
        {
          mlir::ValueRange::getTypes(v275, (__n128 *)__src);
          v276 = __src[0];
          v277 = __src[1];
          v278 = v434;
          __p[0] = __src[0];
          __p[1] = __src[1];
          if (__src[1])
          {
            v276 = (void *)mlir::ValueRange::offset_base(__p, (uint64_t)__src[1]);
            v277 = __p[1];
          }
          mlir::TypeRange::TypeRange((unint64_t *)__p, (uint64_t)v276, v278 - (_QWORD)v277);
          *(_OWORD *)&a1[13][8 * v4] = *(_OWORD *)__p;
          *(_QWORD *)&a1[9][4 * v273] = &a1[13][8 * v4];
        }
        else
        {
          *(_QWORD *)&v274[4 * v273] = 0;
        }
        continue;
      case 38:
        v77 = v15 + 2;
        *a1 = v15 + 2;
        v78 = v15[1];
        v79 = a1[10];
        if ((unint64_t)v79 <= v78)
          v80 = v7;
        else
          v80 = v6;
        if ((unint64_t)v79 > v78)
          v79 = 0;
        v81 = 2 * (*(_QWORD *)&(*v80)[4 * (v78 - (_QWORD)v79)] == 0);
LABEL_399:
        *a1 = &v77[v81];
        v56 = *(unsigned int *)&v77[v81];
        goto LABEL_507;
      case 39:
        LOWORD(v451) = a1[25][v15[1]];
        LODWORD(v4) = (unsigned __int16)v451;
        *a1 = v15 + 2;
        if ((_DWORD)v4 != 0xFFFF)
        {
          *a1 = v15 + 5;
          v279 = v15[4];
          __src[0] = &v433;
          __src[1] = (void *)0x400000000;
          if (v279 >= 5)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v433, v279, 8);
            v280 = __src[1];
            goto LABEL_536;
          }
          v280 = 0;
          v382 = (uint64_t **)&v433;
          if ((_DWORD)v279)
          {
            do
            {
LABEL_536:
              v421 = *(*a1)++;
              v422 = *(_QWORD *)(*(_QWORD *)&a1[9][4 * v421] + 24);
              if (v280 >= HIDWORD(__src[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v433, v280 + 1, 8);
                v280 = __src[1];
              }
              *((_QWORD *)__src[0] + v280) = v422;
              v280 = ++LODWORD(__src[1]);
              LODWORD(v279) = v279 - 1;
            }
            while ((_DWORD)v279);
            v382 = (uint64_t **)__src[0];
          }
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)v428, v382, (mlir::MLIRContext *)v280, 0);
        }
        *a1 = &a1[23][*((unsigned int *)v15 + 1)];
        break;
      case 40:
        *a1 = v15 + 2;
        v281 = *(_QWORD *)&a1[9][4 * v15[1]];
        v4 = (unint64_t)&v433;
        __src[0] = &v433;
        __src[1] = (void *)0x1000000000;
        mlir::ValueRange::ValueRange((unint64_t *)__p, (uint64_t)__src[0], LODWORD(__src[1]));
        (*(void (**)(uint64_t, uint64_t, void *, void *))(*(_QWORD *)a2 + 24))(a2, v281, __p[0], __p[1]);
        v114 = __src[0];
        if (__src[0] != &v433)
          goto LABEL_480;
        continue;
      case 41:
        *a1 = v15 + 2;
        v82 = v15[1];
        v83 = a1[10];
        if ((unint64_t)v83 <= v82)
          v84 = v7;
        else
          v84 = v6;
        if ((unint64_t)v83 <= v82)
          v85 = a1[10];
        else
          v85 = 0;
        v4 = *(_QWORD *)&(*v84)[4 * (v82 - (_QWORD)v85)];
        *a1 = v15 + 3;
        v86 = v15[2];
        if ((unint64_t)v83 <= v86)
          v87 = v7;
        else
          v87 = v6;
        if ((unint64_t)v83 > v86)
          v83 = 0;
        __src[0] = *(void **)&(*v87)[4 * (v86 - (_QWORD)v83)];
        v88 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        v89 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        v91 = v89 + 8 * v90;
        if (v91 == v88)
          goto LABEL_505;
        v92 = -v88;
        while (*(_QWORD *)v88 != v4)
        {
          v88 += 8;
          v92 -= 8;
          if (v88 == v91)
            goto LABEL_505;
        }
        v378 = (uint64_t)*a1 + ((-v92 - mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src)) >> 1);
        goto LABEL_483;
      case 42:
        *a1 = v15 + 2;
        v308 = a1[10];
        v309 = *(_QWORD *)&a1[9][4 * v15[1]];
        *a1 = v15 + 3;
        v310 = v15[2];
        if ((unint64_t)v308 <= v310)
          v311 = v7;
        else
          v311 = v6;
        if ((unint64_t)v308 > v310)
          v308 = 0;
        __src[0] = *(void **)&(*v311)[4 * (v310 - (_QWORD)v308)];
        isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)__src, 4, 1, 0);
        if ((_DWORD)isValidIntOrFloat)
        {
          RawStringData = (_DWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__src);
          LOBYTE(v4) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__src);
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
          isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)__src);
        }
        else
        {
          RawStringData = 0;
        }
        if ((*(_BYTE *)(v309 + 46) & 0x80) != 0)
          v108 = *(_DWORD *)(v309 + 68);
        else
          v108 = 0;
        if (!isValidIntOrFloat)
          goto LABEL_505;
        if ((_BYTE)v4)
          goto LABEL_386;
        i = 0;
        while (RawStringData[i] != v108)
        {
          if (isValidIntOrFloat == ++i)
            goto LABEL_505;
        }
LABEL_482:
        v378 = (uint64_t)&(*a1)[2 * i];
        goto LABEL_483;
      case 43:
        v93 = v15[2];
        *a1 = v15 + 2;
        v94 = *(_QWORD *)(*(_QWORD *)&a1[9][4 * v15[1]] + 48);
        v17 = v15 + 3;
        *a1 = v15 + 3;
        if (!v93)
          goto LABEL_424;
        v95 = 0;
        v96 = a1[10];
        v97 = -10 - 2 * v93;
        v98 = v93 - 1;
        while (1)
        {
          *a1 = &v15[v95 + 4];
          v99 = v15[v95 + 3];
          v100 = (unint64_t)v96 <= v99 ? v7 : v6;
          v101 = (unint64_t)v96 <= v99 ? v96 : 0;
          if (*(_QWORD *)&(*v100)[4 * (v99 - (_QWORD)v101)] == v94)
            break;
          v97 -= 4;
          --v98;
          ++v95;
          if (v98 == -1)
          {
            v17 = &v15[v95 + 3];
            goto LABEL_424;
          }
        }
        v17 = (unsigned __int16 *)((char *)v15 - v97);
        *a1 = (unsigned __int16 *)((char *)v15 - v97);
LABEL_424:
        v56 = *(unsigned int *)v17;
        goto LABEL_507;
      case 44:
        *a1 = v15 + 2;
        v102 = a1[10];
        v103 = *(_QWORD *)&a1[9][4 * v15[1]];
        *a1 = v15 + 3;
        v104 = v15[2];
        if ((unint64_t)v102 <= v104)
          v105 = v7;
        else
          v105 = v6;
        if ((unint64_t)v102 > v104)
          v102 = 0;
        __src[0] = *(void **)&(*v105)[4 * (v104 - (_QWORD)v102)];
        mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)__src, 4, 1, 0);
        RawStringData = (_DWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__src);
        LOBYTE(v4) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__src);
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)__src);
        if (!NumElements)
          goto LABEL_505;
        v108 = *(_DWORD *)(v103 + 36);
        if ((v4 & 1) == 0)
        {
          for (i = 0; i != NumElements; ++i)
          {
            if (RawStringData[i] == v108)
              goto LABEL_482;
          }
          goto LABEL_505;
        }
LABEL_386:
        if (*RawStringData != v108)
          goto LABEL_505;
        i = 0;
        goto LABEL_482;
      case 45:
        *a1 = v15 + 2;
        v282 = v15[1];
        v283 = a1[10];
        if ((unint64_t)v283 <= v282)
          v284 = v7;
        else
          v284 = v6;
        if ((unint64_t)v283 <= v282)
          v285 = a1[10];
        else
          v285 = 0;
        v4 = *(_QWORD *)&(*v284)[4 * (v282 - (_QWORD)v285)];
        *a1 = v15 + 3;
        v286 = v15[2];
        if ((unint64_t)v283 <= v286)
          v287 = v7;
        else
          v287 = v6;
        if ((unint64_t)v283 > v286)
          v283 = 0;
        __src[0] = *(void **)&(*v287)[4 * (v286 - (_QWORD)v283)];
        v288 = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        v289 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        v291 = (void **)(v289 + 8 * v290);
        if (v291 == v288)
          goto LABEL_505;
        v292 = 0;
        while (1)
        {
          __src[0] = *v288;
          if (v4 == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src))
            break;
          ++v288;
          v292 += 8;
          if (v288 == v291)
          {
LABEL_505:
            v140 = *a1;
            goto LABEL_506;
          }
        }
        v378 = (uint64_t)*a1 + (v292 >> 1);
LABEL_483:
        v140 = (unsigned __int16 *)(v378 + 4);
        *a1 = v140;
        goto LABEL_506;
      case 46:
        *a1 = v15 + 2;
        v293 = a1[10];
        v294 = *(uint64_t **)&a1[9][4 * v15[1]];
        *a1 = v15 + 3;
        v295 = v15[2];
        if ((unint64_t)v293 <= v295)
          v296 = v7;
        else
          v296 = v6;
        if ((unint64_t)v293 > v295)
          v293 = 0;
        __src[0] = *(void **)&(*v296)[4 * (v295 - (_QWORD)v293)];
        v297 = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        v298 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        if (!v294)
          goto LABEL_505;
        v300 = (void **)(v298 + 8 * v299);
        v427 = v297;
        if (v300 == v297)
          goto LABEL_315;
        while (2)
        {
          __p[0] = *v297;
          v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
          v301 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
          v303 = v301 + 8 * v302;
          v304 = v294[1];
          if (v304 != (uint64_t)(v303 - v4) >> 3)
            goto LABEL_288;
          v305 = 0;
          if (v304)
          {
            v306 = *v294;
            while (v4 != v303)
            {
              v307 = mlir::TypeRange::dereference_iterator(v306, v305);
              __src[0] = *(void **)v4;
              if (v307 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src))
                goto LABEL_288;
              ++v305;
              v4 += 8;
              if (v304 == v305)
                goto LABEL_287;
            }
            v4 = v303;
          }
          if (v305 != v304)
            goto LABEL_288;
LABEL_287:
          if (v4 != v303)
          {
LABEL_288:
            if (++v297 == v300)
            {
LABEL_315:
              v140 = *a1;
              goto LABEL_316;
            }
            continue;
          }
          break;
        }
        v140 = (unsigned __int16 *)((char *)*a1 + (((char *)v297 - (char *)v427) >> 1) + 4);
        *a1 = v140;
LABEL_316:
        v6 = v429;
        v7 = v431;
        goto LABEL_506;
      default:
        continue;
    }
  }
}

uint64_t mlir::detail::PDLByteCode::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[32];

  v47[30] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 104) + 96);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v9)
    {
      v10 = *(uint64_t **)v8;
      v11 = 8 * v9;
      do
      {
        v12 = *v10++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, a2);
        v11 -= 8;
      }
      while (v11);
    }
  }
  v13 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v13)
    memmove(*(void **)a4, *(const void **)(a3 + 8), 8 * v13);
  v14 = *(_QWORD *)(a1 + 240);
  v15 = *(_QWORD *)(a1 + 248);
  v16 = *(void **)a4;
  v17 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3;
  v18 = *(_QWORD *)(a4 + 24);
  v19 = (*(_QWORD *)(a4 + 32) - v18) >> 4;
  v20 = *(_QWORD *)(a4 + 48);
  v21 = (*(_QWORD *)(a4 + 56) - v20) >> 4;
  v22 = a4 + 72;
  v23 = *(_QWORD *)(a4 + 96);
  v24 = (*(_QWORD *)(a4 + 104) - v23) >> 4;
  v25 = a4 + 120;
  v26 = *(_QWORD *)(a4 + 144);
  v27 = (*(_QWORD *)(a4 + 152) - v26) >> 2;
  v28 = *(_QWORD *)(a1 + 64);
  v29 = (*(_QWORD *)(a1 + 72) - v28) >> 3;
  v30 = *(_QWORD *)(a4 + 168);
  v31 = (*(_QWORD *)(a4 + 176) - v30) >> 1;
  v32 = *(_QWORD *)(a1 + 392);
  v33 = *(unsigned int *)(a1 + 400);
  v34 = *(_QWORD *)(a1 + 3736);
  v35 = (*(_QWORD *)(a1 + 3744) - v34) >> 5;
  v36 = *(_QWORD *)(a1 + 3760);
  v37 = (*(_QWORD *)(a1 + 3768) - v36) >> 5;
  v44 = (unsigned __int16 *)(v14 + 2 * *(unsigned int *)(*(_QWORD *)(a3 + 104) + 88));
  v45 = v47;
  v46 = 0x600000000;
  v47[6] = v16;
  v47[7] = v17;
  v47[8] = v18;
  v47[9] = v19;
  v47[10] = v20;
  v47[11] = v21;
  v47[12] = v22;
  v47[13] = v23;
  v47[14] = v24;
  v47[15] = v25;
  v47[16] = v26;
  v47[17] = v27;
  v47[18] = v28;
  v47[19] = v29;
  v47[20] = v14;
  v47[21] = v15;
  v47[22] = v30;
  v47[23] = v31;
  v47[24] = v32;
  v47[25] = v33;
  v47[26] = v34;
  v47[27] = v35;
  v47[28] = v36;
  v47[29] = v37;
  if (v8)
  {
    v39 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v39)
    {
      v40 = *(uint64_t **)v8;
      v41 = 8 * v39;
      do
      {
        v42 = *v40++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 24))(v42, a2);
        v41 -= 8;
      }
      while (v41);
    }
  }
  if (!(_BYTE)v38 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2) & 1) == 0)
    llvm::report_fatal_error((llvm *)"Native PDL Rewrite failed, but the pattern rewriter doesn't support recovery. Failable pattern rewrites should not be used with pattern rewriters that do not support them.", (const char *)1);
  if (v45 != v47)
    free(v45);
  return v38;
}

uint64_t *llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _WORD *buffer;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 8;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v17 = v9[1];
        ++v9;
        v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 8;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  *(_QWORD *)buffer = a3;
  buffer[4] = *a4;
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v13 = *v9 == -8;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v9[1];
      ++v9;
      v14 = v15;
      if (v15)
        v16 = v14 == -8;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v9;
}

void `anonymous namespace'::Generator::generate(uint64_t a1, Operation *a2, uint64_t *a3)
{
  void *v5;
  int8x16_t *Name;
  const unsigned __int8 *v7;
  __int16 v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Inputs;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 IsNegated;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  mlir::Block **v24;
  mlir::Block *v25;
  uint64_t v26;
  uint64_t v27;
  Operation *v28;
  __int16 v29;
  int8x16_t *v30;
  const unsigned __int8 *v31;
  __int16 v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t Results;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  Operation *NextResultAtOffset;
  Operation *v52;
  __int16 v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  __int16 v59;
  _QWORD *v60;
  uint64_t v61;
  Operation *Input;
  unint64_t Filter;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  mlir::Block **v75;
  mlir::Block *v76;
  Operation *v77;
  uint64_t FastmathAttr;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  __int16 v85;
  _QWORD *v86;
  uint64_t v87;
  void *v88;
  __int16 v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  int Count;
  __int16 InferredResultTypes;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  __int16 v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  __int16 v102;
  uint64_t v103;
  mlir::Block **v104;
  mlir::Block *v105;
  Operation *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  Operation *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t *v115;
  __int16 v116;
  _QWORD *v117;
  uint64_t v118;
  mlir::Block **v119;
  mlir::Block *v120;
  Operation *v121;
  uint64_t Type;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  __int16 v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  __int16 v135;
  _QWORD *v136;
  uint64_t v137;
  Operation *v138;
  _QWORD *v139;
  uint64_t *v140;
  __int16 v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  __int16 v147;
  uint64_t v148;
  mlir::Block **v149;
  mlir::Block *v150;
  __int16 v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  __int16 v157;
  Operation *Result;
  char v159;
  _QWORD *v160;
  Operation *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t *v168;
  __int16 v169;
  unint64_t v170;
  void *v171;
  _QWORD *v172;
  uint64_t v173;
  __int16 v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t InputOperands;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t Offsets;
  uint64_t v185;
  __int16 v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t *Value;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  Operation **v196;
  BOOL v198;
  Operation *v199;
  _QWORD *v200;
  __int16 v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t *v204;
  __int16 v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t Sizes;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  Operation *v217;
  uint64_t *v218;
  __int16 v219;
  Operation *v220;
  uint64_t *v221;
  __int16 v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t *v225;
  __int16 v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t *v244;
  __int16 v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  void *v250;
  __int16 v251;
  uint64_t v252;
  Operation *v253;
  uint64_t v254;
  uint64_t *v255;
  int v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  Operation *v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t *v268;
  __int16 v269;
  _QWORD *v270;
  uint64_t v271;
  void *v272;
  __int16 v273;
  Operation *v274;
  unsigned int Index;
  Operation *v276;
  _QWORD *v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t *v280;
  __int16 v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t *v286;
  _QWORD *v287;
  __int16 v288;
  _QWORD *v289;
  Operation *v290;
  Operation *v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t *v296;
  __int16 v297;
  Operation *v298;
  _QWORD *v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t *v302;
  __int16 v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t *v307;
  __int16 v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __int16 v313;
  unsigned int v314;
  unsigned int v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t *v318;
  int v319;
  BOOL v320;
  unsigned int v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t **v327;
  unint64_t v328;
  uint64_t *v329;
  uint64_t *v330;
  _QWORD *v331;
  uint64_t v332;
  unsigned int v333;
  unsigned int v334;
  __int16 v335;
  _QWORD *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  __int16 v342;
  mlir::Block *Successor;
  _QWORD *v344;
  uint64_t v345;
  unsigned __int16 v346;
  unsigned __int16 *v347;
  unint64_t Body;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _BYTE *v355;
  Operation *v356;
  uint64_t v357;
  int v358;
  unint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  unint64_t v362;
  __int16 v363;
  _QWORD *v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  unsigned int v368;
  unsigned int v369;
  __int16 v370;
  _QWORD *v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t *v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t *v378;
  _OWORD *v379;
  uint64_t *v380;
  uint64_t v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  unint64_t v387;
  uint64_t *v388;
  _QWORD *v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  unint64_t v393;
  unint64_t v394;
  Operation *v395;
  uint64_t *v396;
  __int16 v397;
  _QWORD *v398;
  unint64_t v399;
  void *v400;
  Operation *v401;
  Operation *v402;
  _QWORD *v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t *v406;
  _QWORD *v407;
  _QWORD *v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t *v411;
  __int16 v412;
  _QWORD *v413;
  uint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  __int16 v424;
  uint64_t *v425;
  __int16 v426;
  _QWORD *v427;
  uint64_t *v428;
  _QWORD *v429;
  __int16 v430;
  _QWORD *v431;
  uint64_t v432;
  _QWORD *v433;
  _QWORD *v434;
  uint64_t v435;
  _QWORD *v436;
  uint64_t *v437;
  __int16 v438;
  _QWORD *v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t Indices;
  uint64_t v445;
  _QWORD *v446;
  uint64_t v447;
  unint64_t *v448;
  unint64_t v449;
  Operation *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t *v457;
  __int16 v458;
  Operation *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  _QWORD *v465;
  uint64_t *v466;
  __int16 v467;
  _QWORD *v468;
  uint64_t v469;
  mlir::Block **v470;
  mlir::Block *v471;
  _QWORD *v472;
  uint64_t v473;
  mlir::Block **v474;
  mlir::Block *v475;
  Operation **v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  Operation *v480;
  uint64_t v481;
  uint64_t v482;
  _QWORD *v483;
  uint64_t v484;
  _QWORD *v485;
  uint64_t *v486;
  __int16 v487;
  uint64_t v488;
  int v489;
  unsigned int v490;
  uint64_t v491;
  _QWORD *v492;
  Operation **v493;
  uint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  Operation *v497;
  uint64_t v498;
  uint64_t v499;
  mlir::Block **v500;
  mlir::Block *v501;
  int v502;
  int v503;
  int v504;
  int8x16_t *AttrData;
  const unsigned __int8 *v506;
  uint64_t *v507;
  unsigned int v508;
  uint64_t v509;
  __int128 v510;
  void *v511;
  unsigned int v512;
  void *v513;
  uint64_t v514;
  __int128 v515;
  unsigned int v516;
  void *v517;
  uint64_t MatchedOps;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  _QWORD *v523;
  uint64_t v524;
  _QWORD *v525;
  uint64_t v526;
  mlir::Block **v527;
  mlir::Block *v528;
  _QWORD *v529;
  uint64_t v530;
  Operation **v531;
  _QWORD *v532;
  uint64_t *v533;
  __int16 v534;
  _QWORD *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  unint64_t *v542;
  unint64_t v543;
  uint64_t *v544;
  int v545;
  BOOL v546;
  unsigned int v547;
  Operation *InputAttributeNames;
  __int128 *v549;
  uint64_t v550;
  Operation *v551;
  Operation *v552;
  Operation *Rewriter;
  __int128 v554;
  uint64_t v555;
  void *__src;
  unsigned int v557;
  int v558;
  _OWORD v559[2];
  void *v560;
  unsigned int v561;
  int v562;
  __int128 v563;
  uint64_t v564;

  v564 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(*((_QWORD *)a2 + 6) + 16);
  if (a2 && v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyConstraintOp,void>::id)
  {
    InputAttributeNames = a2;
    Name = (int8x16_t *)mlir::pdl::ApplyNativeConstraintOp::getName((mlir::pdl::ApplyNativeConstraintOp *)&InputAttributeNames);
    v8 = *(_WORD *)(*llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(a1 + 72, Name, v7) + 8);
    v9 = (_QWORD *)a3[3];
    v10 = v9[1];
    if ((unint64_t)(v10 + 1) > v9[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v9 + 3, v10 + 1, 2);
      v10 = v9[1];
    }
    *(_WORD *)(*v9 + 2 * v10) = 0;
    ++v9[1];
    v11 = (_QWORD *)a3[3];
    v12 = v11[1];
    if ((unint64_t)(v12 + 1) > v11[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v11 + 3, v12 + 1, 2);
      v12 = v11[1];
    }
    *(_WORD *)(*v11 + 2 * v12) = v8;
    ++v11[1];
    Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&InputAttributeNames);
    v15 = v13;
    v16 = (_QWORD *)a3[3];
    v17 = v16[1];
    if ((unint64_t)(v17 + 1) > v16[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v16 + 3, v17 + 1, 2);
      *(_WORD *)(*v16 + 2 * v16[1]++) = v15;
      if (v15)
      {
LABEL_9:
        v18 = (unint64_t *)(Inputs + 24);
        do
        {
          v19 = *v18;
          v18 += 4;
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      *(_WORD *)(*v16 + 2 * v17) = v13;
      ++v16[1];
      if (v13)
        goto LABEL_9;
    }
    IsNegated = mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&InputAttributeNames);
    v21 = (_QWORD *)a3[3];
    v22 = v21[1];
    if ((unint64_t)(v22 + 1) > v21[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v21 + 3, v22 + 1, 2);
      v22 = v21[1];
    }
    *(_WORD *)(*v21 + 2 * v22) = IsNegated;
    ++v21[1];
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v23 = *((_QWORD *)&v554 + 1);
    if (*((_QWORD *)&v554 + 1))
    {
      v24 = (mlir::Block **)(v554 + 24);
      do
      {
        v25 = *v24;
        v24 += 4;
        --v23;
      }
      while (v23);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyRewriteOp,void>::id)
  {
    Rewriter = a2;
    v30 = (int8x16_t *)mlir::pdl_interp::ApplyRewriteOp::getName((mlir::pdl_interp::ApplyRewriteOp *)&Rewriter);
    v32 = *(_WORD *)(*llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(a1 + 48, v30, v31) + 8);
    v33 = (_QWORD *)a3[3];
    v34 = v33[1];
    if ((unint64_t)(v34 + 1) > v33[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v33 + 3, v34 + 1, 2);
      v34 = v33[1];
    }
    *(_WORD *)(*v33 + 2 * v34) = 1;
    ++v33[1];
    v35 = (_QWORD *)a3[3];
    v36 = v35[1];
    if ((unint64_t)(v36 + 1) > v35[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v35 + 3, v36 + 1, 2);
      v36 = v35[1];
    }
    *(_WORD *)(*v35 + 2 * v36) = v32;
    ++v35[1];
    v38 = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&Rewriter);
    v39 = v37;
    v40 = (_QWORD *)a3[3];
    v41 = v40[1];
    if ((unint64_t)(v41 + 1) > v40[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v40 + 3, v41 + 1, 2);
      *(_WORD *)(*v40 + 2 * v40[1]++) = v39;
      if (v39)
      {
LABEL_48:
        v42 = (unint64_t *)(v38 + 24);
        do
        {
          v43 = *v42;
          v42 += 4;
          --v39;
        }
        while (v39);
      }
    }
    else
    {
      *(_WORD *)(*v40 + 2 * v41) = v37;
      ++v40[1];
      if (v37)
        goto LABEL_48;
    }
    Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&Rewriter);
    v46 = v44;
    v47 = (_QWORD *)a3[3];
    v48 = v47[1];
    if ((unint64_t)(v48 + 1) > v47[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v47 + 3, v48 + 1, 2);
      *(_WORD *)(*v47 + 2 * v47[1]++) = v46;
      if (!v46)
        return;
    }
    else
    {
      *(_WORD *)(*v47 + 2 * v48) = v44;
      ++v47[1];
      if (!v44)
        return;
    }
    v49 = 0;
    v50 = (uint64_t *)(a1 + 24);
    do
    {
      NextResultAtOffset = (Operation *)mlir::detail::OpResultImpl::getNextResultAtOffset(Results, v49);
      v52 = NextResultAtOffset;
      if (*(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)NextResultAtOffset + 1) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
      {
        InputAttributeNames = NextResultAtOffset;
        *(_QWORD *)&v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v50, (unint64_t *)&InputAttributeNames, &v554))
        {
          v53 = *(_WORD *)(v554 + 8);
        }
        else
        {
          v54 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v50, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
          v53 = 0;
          *v54 = InputAttributeNames;
          *((_WORD *)v54 + 4) = 0;
        }
        v55 = (_QWORD *)a3[3];
        v56 = v55[1];
        if ((unint64_t)(v56 + 1) > v55[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v55 + 3, v56 + 1, 2);
          v56 = v55[1];
        }
        *(_WORD *)(*v55 + 2 * v56) = v53;
        ++v55[1];
      }
      v57 = (_QWORD *)a3[3];
      v58 = (uint64_t *)a3[4];
      InputAttributeNames = v52;
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v58, (unint64_t *)&InputAttributeNames, &v554))
      {
        v59 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v60 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v58, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v59 = 0;
        *v60 = InputAttributeNames;
        *((_WORD *)v60 + 4) = 0;
      }
      v61 = v57[1];
      if ((unint64_t)(v61 + 1) > v57[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v57, v57 + 3, v61 + 1, 2);
        v61 = v57[1];
      }
      *(_WORD *)(*v57 + 2 * v61) = v59;
      ++v57[1];
      ++v49;
    }
    while (v46 != v49);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::AreEqualOp,void>::id)
  {
    Rewriter = a2;
    Input = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)Input + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      v65 = *((_QWORD *)&v554 + 1);
      v64 = v554;
      v66 = (_QWORD *)a3[3];
      v67 = v66[1];
      if ((unint64_t)(v67 + 1) > v66[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v66 + 3, v67 + 1, 2);
        v67 = v66[1];
      }
      *(_WORD *)(*v66 + 2 * v67) = 2;
      ++v66[1];
      v68 = (_QWORD *)a3[3];
      v69 = (uint64_t *)a3[4];
      InputAttributeNames = Input;
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v69, (unint64_t *)&InputAttributeNames, &v554))
      {
        v70 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v90 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v69, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v70 = 0;
        *v90 = InputAttributeNames;
        *((_WORD *)v90 + 4) = 0;
      }
      v91 = v68[1];
      if ((unint64_t)(v91 + 1) > v68[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v68, v68 + 3, v91 + 1, 2);
        v91 = v68[1];
      }
      *(_WORD *)(*v68 + 2 * v91) = v70;
      ++v68[1];
      goto LABEL_136;
    }
    v86 = (_QWORD *)a3[3];
    v87 = v86[1];
    if ((unint64_t)(v87 + 1) > v86[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v86 + 3, v87 + 1, 2);
      v87 = v86[1];
    }
    *(_WORD *)(*v86 + 2 * v87) = 3;
    ++v86[1];
    v88 = *(void **)(*(_QWORD *)(*((_QWORD *)Input + 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
    {
      v89 = 0;
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      v89 = 1;
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      *(_QWORD *)&v554 = *((_QWORD *)Input + 1) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
        v89 = 3;
      else
        v89 = 5;
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v89 = 2;
    }
    else
    {
      v89 = 4 * (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    }
    v136 = (_QWORD *)a3[3];
    v137 = v136[1];
    if ((unint64_t)(v137 + 1) > v136[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v136 + 3, v137 + 1, 2);
      v137 = v136[1];
    }
    *(_WORD *)(*v136 + 2 * v137) = v89;
    ++v136[1];
    v138 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    v65 = *((_QWORD *)&v554 + 1);
    v64 = v554;
    v139 = (_QWORD *)a3[3];
    v140 = (uint64_t *)a3[4];
    InputAttributeNames = v138;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v140, (unint64_t *)&InputAttributeNames, &v554))
    {
      v141 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v142 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v140, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v141 = 0;
      *v142 = InputAttributeNames;
      *((_WORD *)v142 + 4) = 0;
    }
    v143 = v139[1];
    if ((unint64_t)(v143 + 1) > v139[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v139, v139 + 3, v143 + 1, 2);
      v143 = v139[1];
    }
    *(_WORD *)(*v139 + 2 * v143) = v141;
LABEL_135:
    ++v139[1];
LABEL_136:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::BranchOp,void>::id)
  {
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, a2);
    v71 = *((_QWORD *)&v554 + 1);
    v72 = v554;
    v73 = (_QWORD *)a3[3];
    v74 = v73[1];
    if ((unint64_t)(v74 + 1) > v73[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v73 + 3, v74 + 1, 2);
      v74 = v73[1];
    }
    *(_WORD *)(*v73 + 2 * v74) = 4;
    ++v73[1];
    if (v71)
    {
      v75 = (mlir::Block **)(v72 + 24);
      do
      {
        v76 = *v75;
        v75 += 4;
        --v71;
      }
      while (v71);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckAttributeOp,void>::id)
  {
    Rewriter = a2;
    v77 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    v79 = *((_QWORD *)&v554 + 1);
    v80 = v554;
    v81 = (_QWORD *)a3[3];
    v82 = v81[1];
    if ((unint64_t)(v82 + 1) > v81[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v81 + 3, v82 + 1, 2);
      v82 = v81[1];
    }
    *(_WORD *)(*v81 + 2 * v82) = 2;
    ++v81[1];
    v83 = (_QWORD *)a3[3];
    v84 = (uint64_t *)a3[4];
    InputAttributeNames = v77;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v84, (unint64_t *)&InputAttributeNames, &v554))
    {
      v85 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v99 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v84, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v85 = 0;
      *v99 = InputAttributeNames;
      *((_WORD *)v99 + 4) = 0;
    }
    v100 = v83[1];
    if ((unint64_t)(v100 + 1) > v83[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v83, v83 + 3, v100 + 1, 2);
      v100 = v83[1];
    }
    *(_WORD *)(*v83 + 2 * v100) = v85;
    ++v83[1];
    v101 = (_QWORD *)a3[3];
    v103 = v101[1];
    if ((unint64_t)(v103 + 1) > v101[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v101, v101 + 3, v103 + 1, 2);
      *(_WORD *)(*v101 + 2 * v101[1]++) = v102;
      if (!v79)
        return;
    }
    else
    {
      *(_WORD *)(*v101 + 2 * v103) = v102;
      ++v101[1];
      if (!v79)
        return;
    }
    v104 = (mlir::Block **)(v80 + 24);
    do
    {
      v105 = *v104;
      v104 += 4;
      --v79;
    }
    while (v79);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperandCountOp,void>::id)
  {
    InputAttributeNames = a2;
    v92 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
    Count = mlir::pdl_interp::CheckOperandCountOp::getCount((mlir::pdl_interp::CheckOperandCountOp *)&InputAttributeNames);
    InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v96 = *((_QWORD *)&v554 + 1);
    v95 = v554;
    v97 = a3;
    v98 = 5;
LABEL_108:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperationNameOp,void>::id)
  {
    Rewriter = a2;
    v106 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    v107 = mlir::pdl_interp::ApplyRewriteOp::getName((mlir::pdl_interp::ApplyRewriteOp *)&Rewriter);
    mlir::OperationName::OperationName(&v552, v107, v108, *(_QWORD *)(a1 + 152));
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    v109 = *((_QWORD *)&v554 + 1);
    v110 = v554;
    v111 = v552;
    v112 = (_QWORD *)a3[3];
    v113 = v112[1];
    if ((unint64_t)(v113 + 1) > v112[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v112 + 3, v113 + 1, 2);
      v113 = v112[1];
    }
    *(_WORD *)(*v112 + 2 * v113) = 6;
    ++v112[1];
    v114 = (_QWORD *)a3[3];
    v115 = (uint64_t *)a3[4];
    InputAttributeNames = v106;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v115, (unint64_t *)&InputAttributeNames, &v554))
    {
      v116 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v117 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v115, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v116 = 0;
      *v117 = InputAttributeNames;
      *((_WORD *)v117 + 4) = 0;
    }
    v118 = v114[1];
    if ((unint64_t)(v118 + 1) > v114[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v114, v114 + 3, v118 + 1, 2);
      v118 = v114[1];
    }
    *(_WORD *)(*v114 + 2 * v118) = v116;
    ++v114[1];
    if (v109)
    {
      v119 = (mlir::Block **)(v110 + 24);
      do
      {
        v120 = *v119;
        v119 += 4;
        --v109;
      }
      while (v109);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckResultCountOp,void>::id)
  {
    InputAttributeNames = a2;
    v92 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
    Count = mlir::pdl_interp::CheckOperandCountOp::getCount((mlir::pdl_interp::CheckOperandCountOp *)&InputAttributeNames);
    InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v96 = *((_QWORD *)&v554 + 1);
    v95 = v554;
    v97 = a3;
    v98 = 7;
    goto LABEL_108;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypeOp,void>::id)
  {
    Rewriter = a2;
    v121 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    Type = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    v123 = *((_QWORD *)&v554 + 1);
    v124 = v554;
    v125 = (_QWORD *)a3[3];
    v126 = v125[1];
    if ((unint64_t)(v126 + 1) > v125[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v125 + 3, v126 + 1, 2);
      v126 = v125[1];
    }
    *(_WORD *)(*v125 + 2 * v126) = 2;
    ++v125[1];
    v127 = (_QWORD *)a3[3];
    v128 = (uint64_t *)a3[4];
    InputAttributeNames = v121;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v128, (unint64_t *)&InputAttributeNames, &v554))
    {
      v129 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v144 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v128, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v129 = 0;
      *v144 = InputAttributeNames;
      *((_WORD *)v144 + 4) = 0;
    }
    v145 = v127[1];
    if ((unint64_t)(v145 + 1) > v127[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v127, v127 + 3, v145 + 1, 2);
      v145 = v127[1];
    }
    *(_WORD *)(*v127 + 2 * v145) = v129;
    ++v127[1];
    v146 = (_QWORD *)a3[3];
    v148 = v146[1];
    if ((unint64_t)(v148 + 1) > v146[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v146, v146 + 3, v148 + 1, 2);
      *(_WORD *)(*v146 + 2 * v146[1]++) = v147;
      if (!v123)
        return;
    }
    else
    {
      *(_WORD *)(*v146 + 2 * v148) = v147;
      ++v146[1];
      if (!v123)
        return;
    }
    v149 = (mlir::Block **)(v124 + 24);
    do
    {
      v150 = *v149;
      v149 += 4;
      --v123;
    }
    while (v123);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypesOp,void>::id)
  {
    InputAttributeNames = a2;
    v130 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
    v131 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v133 = *((_QWORD *)&v554 + 1);
    v132 = v554;
    v134 = a3;
    v135 = 8;
    goto LABEL_125;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ContinueOp,void>::id)
  {
    v151 = *(_WORD *)(a1 + 144);
    v152 = (_QWORD *)a3[3];
    v153 = v152[1];
    if ((unint64_t)(v153 + 1) > v152[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v152 + 3, v153 + 1, 2);
      v153 = v152[1];
    }
    *(_WORD *)(*v152 + 2 * v153) = 9;
    ++v152[1];
    v154 = (_QWORD *)a3[3];
    v155 = v154[1];
    if ((unint64_t)(v155 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v155 + 1, 2);
      v155 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v155) = v151 - 1;
    goto LABEL_151;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateAttributeOp,void>::id)
  {
    Rewriter = a2;
    v156 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    Result = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
LABEL_153:
    InputAttributeNames = Result;
    *(_QWORD *)&v554 = 0;
    v159 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)&InputAttributeNames, &v554);
    v160 = (_QWORD *)v554;
    if ((v159 & 1) == 0)
    {
      v160 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      *v160 = InputAttributeNames;
      *((_WORD *)v160 + 4) = 0;
    }
    *((_WORD *)v160 + 4) = v157;
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateOperationOp,void>::id)
  {
    v551 = a2;
    v161 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v551);
    v162 = mlir::pdl_interp::CreateOperationOp::getName((mlir::pdl_interp::CreateOperationOp *)&v551);
    mlir::OperationName::OperationName(&v550, v162, v163, *(_QWORD *)(a1 + 152));
    v164 = v550;
    v165 = (_QWORD *)a3[3];
    v166 = v165[1];
    if ((unint64_t)(v166 + 1) > v165[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v165 + 3, v166 + 1, 2);
      v166 = v165[1];
    }
    *(_WORD *)(*v165 + 2 * v166) = 11;
    ++v165[1];
    v167 = (_QWORD *)a3[3];
    v168 = (uint64_t *)a3[4];
    InputAttributeNames = v161;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v168, (unint64_t *)&InputAttributeNames, &v554))
    {
      v169 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v175 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v168, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v169 = 0;
      *v175 = InputAttributeNames;
      *((_WORD *)v175 + 4) = 0;
    }
    v176 = v167[1];
    if ((unint64_t)(v176 + 1) > v167[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v167, v167 + 3, v176 + 1, 2);
      v176 = v167[1];
    }
    *(_WORD *)(*v167 + 2 * v176) = v169;
    ++v167[1];
    InputOperands = mlir::pdl_interp::CreateOperationOp::getInputOperands((mlir::pdl_interp::CreateOperationOp *)&v551);
    v179 = v177;
    v180 = (_QWORD *)a3[3];
    v181 = v180[1];
    if ((unint64_t)(v181 + 1) > v180[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v180 + 3, v181 + 1, 2);
      *(_WORD *)(*v180 + 2 * v180[1]++) = v179;
      if (v179)
      {
LABEL_169:
        v182 = (unint64_t *)(InputOperands + 24);
        do
        {
          v183 = *v182;
          v182 += 4;
          --v179;
        }
        while (v179);
      }
    }
    else
    {
      *(_WORD *)(*v180 + 2 * v181) = v177;
      ++v180[1];
      if (v177)
        goto LABEL_169;
    }
    Offsets = mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v551);
    v186 = v185;
    *(_QWORD *)&v554 = Offsets;
    *((_QWORD *)&v554 + 1) = v185;
    v187 = (_QWORD *)a3[3];
    v188 = v187[1];
    if ((unint64_t)(v188 + 1) > v187[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v187 + 3, v188 + 1, 2);
      v188 = v187[1];
    }
    *(_WORD *)(*v187 + 2 * v188) = v186;
    ++v187[1];
    InputAttributeNames = (Operation *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v551);
    v549 = &v554;
    Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
    v190 = *(_QWORD *)v549;
    v191 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
    v193 = (uint64_t *)(v191 + 8 * v192);
    if (v193 != Value)
    {
      v195 = *(_QWORD *)v549;
      v194 = *((_QWORD *)v549 + 1);
      v196 = (Operation **)(v190 + 24);
      do
      {
        v198 = v194-- != 0;
        if (v190 == v195 && !v198)
          break;
        v199 = *v196;
        v200 = (_QWORD *)a3[3];
        v202 = v200[1];
        if ((unint64_t)(v202 + 1) > v200[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v200, v200 + 3, v202 + 1, 2);
          v202 = v200[1];
        }
        *(_WORD *)(*v200 + 2 * v202) = v201;
        ++v200[1];
        v203 = (_QWORD *)a3[3];
        v204 = (uint64_t *)a3[4];
        v552 = v199;
        Rewriter = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v204, (unint64_t *)&v552, &Rewriter))
        {
          v205 = *((_WORD *)Rewriter + 4);
        }
        else
        {
          v206 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v204, (uint64_t)&v552, (unint64_t *)&v552, Rewriter);
          v205 = 0;
          *v206 = v552;
          *((_WORD *)v206 + 4) = 0;
        }
        v207 = v203[1];
        if ((unint64_t)(v207 + 1) > v203[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v203, v203 + 3, v207 + 1, 2);
          v207 = v203[1];
        }
        *(_WORD *)(*v203 + 2 * v207) = v205;
        ++v203[1];
        ++Value;
        v196 += 4;
      }
      while (Value != v193);
    }
    if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v551))
    {
      Sizes = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v551);
      v211 = v209;
      v212 = (_QWORD *)a3[3];
      v213 = v212[1];
      if ((unint64_t)(v213 + 1) > v212[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v212 + 3, v213 + 1, 2);
        *(_WORD *)(*v212 + 2 * v212[1]++) = v211;
        if (!v211)
          return;
      }
      else
      {
        *(_WORD *)(*v212 + 2 * v213) = v209;
        ++v212[1];
        if (!v209)
          return;
      }
      v214 = (unint64_t *)(Sizes + 24);
      do
      {
        v215 = *v214;
        v214 += 4;
        --v211;
      }
      while (v211);
      return;
    }
    v154 = (_QWORD *)a3[3];
    v208 = v154[1];
    if ((unint64_t)(v208 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v208 + 1, 2);
      v208 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v208) = -1;
LABEL_151:
    ++v154[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateRangeOp,void>::id)
  {
    v170 = *((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8;
    Rewriter = a2;
    *(_QWORD *)&v554 = v170;
    v171 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136);
    if (v171 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v172 = (_QWORD *)a3[3];
      v173 = v172[1];
      if ((unint64_t)(v173 + 1) <= v172[2])
      {
        v174 = 12;
        goto LABEL_204;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v172 + 3, v173 + 1, 2);
      v174 = 12;
    }
    else
    {
      if (v171 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
        goto LABEL_205;
      v172 = (_QWORD *)a3[3];
      v173 = v172[1];
      if ((unint64_t)(v173 + 1) <= v172[2])
      {
        v174 = 13;
LABEL_204:
        *(_WORD *)(*v172 + 2 * v173) = v174;
        ++v172[1];
LABEL_205:
        v220 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
        InputAttributeNames = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
        v221 = (uint64_t *)(a1 + 24);
        *(_QWORD *)&v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v221, (unint64_t *)&InputAttributeNames, &v554))
        {
          v222 = *(_WORD *)(v554 + 8);
        }
        else
        {
          v223 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v221, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
          v222 = 0;
          *v223 = InputAttributeNames;
          *((_WORD *)v223 + 4) = 0;
        }
        v224 = (_QWORD *)a3[3];
        v225 = (uint64_t *)a3[4];
        InputAttributeNames = v220;
        *(_QWORD *)&v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v225, (unint64_t *)&InputAttributeNames, &v554))
        {
          v226 = *(_WORD *)(v554 + 8);
        }
        else
        {
          v227 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v225, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
          v226 = 0;
          *v227 = InputAttributeNames;
          *((_WORD *)v227 + 4) = 0;
        }
        v228 = v224[1];
        if ((unint64_t)(v228 + 1) > v224[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v224, v224 + 3, v228 + 1, 2);
          v228 = v224[1];
        }
        *(_WORD *)(*v224 + 2 * v228) = v226;
        ++v224[1];
        v229 = (_QWORD *)a3[3];
        v230 = v229[1];
        if ((unint64_t)(v230 + 1) > v229[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v229 + 3, v230 + 1, 2);
          v230 = v229[1];
        }
        *(_WORD *)(*v229 + 2 * v230) = v222;
        ++v229[1];
        if ((*((_BYTE *)Rewriter + 46) & 0x80) != 0)
        {
          v231 = *((_QWORD *)Rewriter + 9);
          v232 = *((unsigned int *)Rewriter + 17);
          v233 = (_QWORD *)a3[3];
          v234 = v233[1];
          v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) <= v233[2])
            goto LABEL_217;
        }
        else
        {
          v231 = 0;
          v232 = 0;
          v233 = (_QWORD *)a3[3];
          v234 = v233[1];
          v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) <= v233[2])
          {
LABEL_217:
            *(_WORD *)(*v233 + 2 * v234) = v232;
            ++v233[1];
            if (!v232)
              return;
LABEL_218:
            v236 = (unint64_t *)(v231 + 24);
            do
            {
              v237 = *v236;
              v236 += 4;
              --v232;
            }
            while (v232);
            return;
          }
        }
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v233, v233 + 3, v235, 2);
        *(_WORD *)(*v233 + 2 * v233[1]++) = v232;
        if (!v232)
          return;
        goto LABEL_218;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v172 + 3, v173 + 1, 2);
      v174 = 13;
    }
    v173 = v172[1];
    goto LABEL_204;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypeOp,void>::id)
  {
    Rewriter = a2;
    v216 = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&Rewriter);
    Result = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    goto LABEL_153;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id)
  {
    Rewriter = a2;
    v217 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    InputAttributeNames = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    v218 = (uint64_t *)(a1 + 24);
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v218, (unint64_t *)&InputAttributeNames, &v554))
    {
      v219 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v239 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v218, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v219 = 0;
      *v239 = InputAttributeNames;
      *((_WORD *)v239 + 4) = 0;
    }
    v240 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    v241 = (_QWORD *)a3[3];
    v242 = v241[1];
    if ((unint64_t)(v242 + 1) > v241[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v241 + 3, v242 + 1, 2);
      v242 = v241[1];
    }
    *(_WORD *)(*v241 + 2 * v242) = 10;
    ++v241[1];
    v243 = (_QWORD *)a3[3];
    v244 = (uint64_t *)a3[4];
    InputAttributeNames = v217;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v244, (unint64_t *)&InputAttributeNames, &v554))
    {
      v245 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v246 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v244, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v245 = 0;
      *v246 = InputAttributeNames;
      *((_WORD *)v246 + 4) = 0;
    }
    v247 = v243[1];
    if ((unint64_t)(v247 + 1) > v243[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v243, v243 + 3, v247 + 1, 2);
      v247 = v243[1];
    }
    *(_WORD *)(*v243 + 2 * v247) = v245;
    ++v243[1];
    v248 = (_QWORD *)a3[3];
    v249 = v248[1];
    if ((unint64_t)(v249 + 1) > v248[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v248 + 3, v249 + 1, 2);
      v249 = v248[1];
    }
    *(_WORD *)(*v248 + 2 * v249) = v219;
    ++v248[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::EraseOp,void>::id)
  {
    *(_QWORD *)&v554 = a2;
    v238 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v554);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ExtractOp,void>::id)
  {
    Rewriter = a2;
    v250 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136);
    if (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      v251 = 15;
    }
    else if (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
    {
      v251 = 17;
    }
    else
    {
      v251 = 16 * (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    }
    v274 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&Rewriter);
    v276 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    v277 = (_QWORD *)a3[3];
    v278 = v277[1];
    if ((unint64_t)(v278 + 1) > v277[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v277 + 3, v278 + 1, 2);
      v278 = v277[1];
    }
    *(_WORD *)(*v277 + 2 * v278) = v251;
    ++v277[1];
    v279 = (_QWORD *)a3[3];
    v280 = (uint64_t *)a3[4];
    InputAttributeNames = v274;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v280, (unint64_t *)&InputAttributeNames, &v554))
    {
      v281 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v282 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v280, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v281 = 0;
      *v282 = InputAttributeNames;
      *((_WORD *)v282 + 4) = 0;
    }
    v283 = v279[1];
    if ((unint64_t)(v283 + 1) > v279[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v279, v279 + 3, v283 + 1, 2);
      v283 = v279[1];
    }
    *(_WORD *)(*v279 + 2 * v283) = v281;
    ++v279[1];
    v284 = (_QWORD *)a3[3];
    v285 = v284[1];
    if (v284[2] < (unint64_t)(v285 + 2))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v284 + 3, v285 + 2, 2);
      v285 = v284[1];
    }
    *(_DWORD *)(*v284 + 2 * v285) = Index;
    v284[1] += 2;
    goto LABEL_287;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FinalizeOp,void>::id)
  {
    v154 = (_QWORD *)a3[3];
    v252 = v154[1];
    if ((unint64_t)(v252 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v252 + 1, 2);
      v252 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v252) = 18;
    goto LABEL_151;
  }
  if (a2 && v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ForEachOp,void>::id)
  {
    Rewriter = a2;
    v26 = *(_QWORD *)(mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&Rewriter) + 8);
    if (v26)
      v27 = v26 - 8;
    else
      v27 = 0;
    v28 = **(Operation ***)(v27 + 48);
    InputAttributeNames = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 24), (unint64_t *)&InputAttributeNames, &v554))
    {
      v29 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v262 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(a1 + 24, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v29 = 0;
      *v262 = InputAttributeNames;
      *((_WORD *)v262 + 4) = 0;
    }
    v263 = (_QWORD *)a3[3];
    v264 = v263[1];
    if ((unint64_t)(v264 + 1) > v263[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v263 + 3, v264 + 1, 2);
      v264 = v263[1];
    }
    *(_WORD *)(*v263 + 2 * v264) = 19;
    ++v263[1];
    v265 = (_QWORD *)a3[3];
    v266 = v265[1];
    if ((unint64_t)(v266 + 1) > v265[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v265 + 3, v266 + 1, 2);
      v266 = v265[1];
    }
    *(_WORD *)(*v265 + 2 * v266) = v29;
    ++v265[1];
    v267 = (_QWORD *)a3[3];
    v268 = (uint64_t *)a3[4];
    InputAttributeNames = v28;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v268, (unint64_t *)&InputAttributeNames, &v554))
    {
      v269 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v270 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v268, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v269 = 0;
      *v270 = InputAttributeNames;
      *((_WORD *)v270 + 4) = 0;
    }
    v271 = v267[1];
    if ((unint64_t)(v271 + 1) > v267[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v267, v267 + 3, v271 + 1, 2);
      v271 = v267[1];
    }
    *(_WORD *)(*v267 + 2 * v271) = v269;
    ++v267[1];
    v272 = *(void **)(*(_QWORD *)(*((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
    {
      v273 = 0;
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      v273 = 1;
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      *(_QWORD *)&v554 = *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
        v273 = 3;
      else
        v273 = 5;
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v273 = 2;
    }
    else
    {
      v273 = 4 * (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    }
    v340 = (_QWORD *)a3[3];
    v341 = v340[1];
    if ((unint64_t)(v341 + 1) > v340[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v340 + 3, v341 + 1, 2);
      v341 = v340[1];
    }
    *(_WORD *)(*v340 + 2 * v341) = v273;
    ++v340[1];
    v342 = *(_WORD *)(a1 + 144);
    Successor = (mlir::Block *)mlir::pdl_interp::ForEachOp::getSuccessor((mlir::pdl_interp::ForEachOp *)&Rewriter);
    v344 = (_QWORD *)a3[3];
    v345 = v344[1];
    if ((unint64_t)(v345 + 1) > v344[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v344 + 3, v345 + 1, 2);
      v345 = v344[1];
    }
    *(_WORD *)(*v344 + 2 * v345) = v342;
    ++v344[1];
    v346 = *(_WORD *)(a1 + 144) + 1;
    *(_WORD *)(a1 + 144) = v346;
    v347 = *(unsigned __int16 **)(a1 + 248);
    if (*v347 < v346)
      *v347 = v346;
    Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&Rewriter);
    --*(_WORD *)(a1 + 144);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeOp,void>::id)
  {
    Rewriter = a2;
    v290 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    v291 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    v292 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    v293 = (_QWORD *)a3[3];
    v294 = v293[1];
    if ((unint64_t)(v294 + 1) > v293[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v293 + 3, v294 + 1, 2);
      v294 = v293[1];
    }
    *(_WORD *)(*v293 + 2 * v294) = 20;
    ++v293[1];
    v295 = (_QWORD *)a3[3];
    v296 = (uint64_t *)a3[4];
    InputAttributeNames = v290;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v296, (unint64_t *)&InputAttributeNames, &v554))
    {
      v297 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v304 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v296, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v297 = 0;
      *v304 = InputAttributeNames;
      *((_WORD *)v304 + 4) = 0;
    }
    v305 = v295[1];
    if ((unint64_t)(v305 + 1) > v295[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v295, v295 + 3, v305 + 1, 2);
      v305 = v295[1];
    }
    *(_WORD *)(*v295 + 2 * v305) = v297;
    ++v295[1];
    v306 = (_QWORD *)a3[3];
    v307 = (uint64_t *)a3[4];
    InputAttributeNames = v291;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v307, (unint64_t *)&InputAttributeNames, &v554))
    {
      v308 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v309 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v307, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v308 = 0;
      *v309 = InputAttributeNames;
      *((_WORD *)v309 + 4) = 0;
    }
    v310 = v306[1];
    if ((unint64_t)(v310 + 1) > v306[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v306, v306 + 3, v310 + 1, 2);
      v310 = v306[1];
    }
    *(_WORD *)(*v306 + 2 * v310) = v308;
    ++v306[1];
    v287 = (_QWORD *)a3[3];
    v311 = a3[4];
    v312 = *(_QWORD *)(v311 + 120);
    v313 = **(_WORD **)(v311 + 216);
    v314 = *(_DWORD *)(v311 + 136);
    if (v314)
    {
      v315 = (v314 - 1) & ((v292 >> 4) ^ (v292 >> 9));
      v316 = (uint64_t *)(v312 + 16 * v315);
      v317 = *v316;
      if (*v316 == v292)
      {
LABEL_388:
        v288 = *((_WORD *)v316 + 4);
LABEL_389:
        v384 = v287[1];
        if ((unint64_t)(v384 + 1) > v287[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v287, v287 + 3, v384 + 1, 2);
          v384 = v287[1];
        }
        *(_WORD *)(*v287 + 2 * v384) = v288;
        ++v287[1];
        return;
      }
      v318 = 0;
      v319 = 1;
      while (v317 != -4096)
      {
        if (v318)
          v320 = 0;
        else
          v320 = v317 == -8192;
        if (v320)
          v318 = v316;
        v321 = v315 + v319++;
        v315 = v321 & (v314 - 1);
        v316 = (uint64_t *)(v312 + 16 * v315);
        v317 = *v316;
        if (*v316 == v292)
          goto LABEL_388;
      }
      if (v318)
        v316 = v318;
    }
    else
    {
      v316 = 0;
    }
    v324 = *(_QWORD *)(*(_QWORD *)(v311 + 184) + 8) - **(_QWORD **)(v311 + 184);
    v325 = *(_DWORD *)(v311 + 128);
    if (4 * v325 + 4 >= 3 * v314)
    {
      v314 *= 2;
    }
    else if (v314 + ~v325 - *(_DWORD *)(v311 + 132) > v314 >> 3)
    {
      goto LABEL_329;
    }
    llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v311 + 120, v314);
    v488 = *(_QWORD *)(v311 + 120);
    v489 = *(_DWORD *)(v311 + 136) - 1;
    v490 = v489 & ((v292 >> 4) ^ (v292 >> 9));
    v316 = (uint64_t *)(v488 + 16 * v490);
    v491 = *v316;
    if (*v316 == v292)
    {
      v326 = v292;
      goto LABEL_330;
    }
    v544 = 0;
    v545 = 1;
    while (v491 != -4096)
    {
      if (v544)
        v546 = 0;
      else
        v546 = v491 == -8192;
      if (v546)
        v544 = v316;
      v547 = v490 + v545++;
      v490 = v547 & v489;
      v316 = (uint64_t *)(v488 + 16 * v490);
      v491 = *v316;
      v326 = v292;
      if (*v316 == v292)
        goto LABEL_330;
    }
    if (v544)
      v316 = v544;
LABEL_329:
    v326 = *v316;
LABEL_330:
    ++*(_DWORD *)(v311 + 128);
    if (v326 != -4096)
      --*(_DWORD *)(v311 + 132);
    *v316 = v292;
    *((_WORD *)v316 + 4) = v313 + (v324 >> 3);
    v327 = *(uint64_t ***)(v311 + 184);
    v329 = v327[1];
    v328 = (unint64_t)v327[2];
    if ((unint64_t)v329 >= v328)
    {
      v349 = *v327;
      v350 = (char *)v329 - (char *)*v327;
      v351 = v350 >> 3;
      v352 = (v350 >> 3) + 1;
      if (v352 >> 61)
        abort();
      v353 = v328 - (_QWORD)v349;
      if (v353 >> 2 > v352)
        v352 = v353 >> 2;
      if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
        v354 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v354 = v352;
      if (v354)
      {
        if (v354 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v355 = operator new(8 * v354);
      }
      else
      {
        v355 = 0;
      }
      v373 = (uint64_t *)&v355[8 * v351];
      v374 = (uint64_t *)&v355[8 * v354];
      *v373 = v292;
      v330 = v373 + 1;
      if (v329 != v349)
      {
        v375 = (char *)v329 - (char *)v349 - 8;
        if (v375 < 0x58)
          goto LABEL_603;
        if ((unint64_t)((char *)v329 - v355 - v350) < 0x20)
          goto LABEL_603;
        v376 = (v375 >> 3) + 1;
        v377 = 8 * (v376 & 0x3FFFFFFFFFFFFFFCLL);
        v378 = &v329[v377 / 0xFFFFFFFFFFFFFFF8];
        v373 = (uint64_t *)((char *)v373 - v377);
        v379 = &v355[8 * v351 - 16];
        v380 = v329 - 2;
        v381 = v376 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v382 = *(_OWORD *)v380;
          *(v379 - 1) = *((_OWORD *)v380 - 1);
          *v379 = v382;
          v379 -= 2;
          v380 -= 4;
          v381 -= 4;
        }
        while (v381);
        v329 = v378;
        if (v376 != (v376 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_603:
          do
          {
            v383 = *--v329;
            *--v373 = v383;
          }
          while (v329 != v349);
        }
        v329 = *v327;
      }
      *v327 = v373;
      v327[1] = v330;
      v327[2] = v374;
      if (v329)
        operator delete(v329);
    }
    else
    {
      *v329 = v292;
      v330 = v329 + 1;
    }
    v327[1] = v330;
    goto LABEL_388;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeTypeOp,void>::id)
  {
    Rewriter = a2;
    v298 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    v276 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    v299 = (_QWORD *)a3[3];
    v300 = v299[1];
    if ((unint64_t)(v300 + 1) > v299[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v299 + 3, v300 + 1, 2);
      v300 = v299[1];
    }
    *(_WORD *)(*v299 + 2 * v300) = 21;
    ++v299[1];
    v301 = (_QWORD *)a3[3];
    v302 = (uint64_t *)a3[4];
    InputAttributeNames = v298;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v302, (unint64_t *)&InputAttributeNames, &v554))
    {
      v303 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v331 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v302, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v303 = 0;
      *v331 = InputAttributeNames;
      *((_WORD *)v331 + 4) = 0;
    }
    v332 = v301[1];
    if ((unint64_t)(v332 + 1) > v301[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v301, v301 + 3, v332 + 1, 2);
      v332 = v301[1];
    }
    *(_WORD *)(*v301 + 2 * v332) = v303;
    ++v301[1];
LABEL_287:
    v287 = (_QWORD *)a3[3];
    v286 = (uint64_t *)a3[4];
    InputAttributeNames = v276;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v286, (unint64_t *)&InputAttributeNames, &v554))
    {
      v288 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v289 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v286, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v288 = 0;
      *v289 = InputAttributeNames;
      *((_WORD *)v289 + 4) = 0;
    }
    goto LABEL_389;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetDefiningOpOp,void>::id)
  {
    *(_QWORD *)&v554 = a2;
    v322 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v554);
    v323 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v554);
LABEL_322:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandOp,void>::id)
  {
    *(_QWORD *)&v554 = a2;
    v333 = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v554);
    v334 = v333;
    if (v333 > 3)
    {
      v364 = (_QWORD *)a3[3];
      v365 = v364[1];
      if ((unint64_t)(v365 + 1) > v364[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v364 + 3, v365 + 1, 2);
        v365 = v364[1];
      }
      *(_WORD *)(*v364 + 2 * v365) = 27;
      ++v364[1];
      v366 = (_QWORD *)a3[3];
      v338 = v366 + 1;
      v367 = v366[1];
      if (v366[2] < (unint64_t)(v367 + 2))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v366 + 3, v367 + 2, 2);
        v367 = v366[1];
      }
      *(_DWORD *)(*v366 + 2 * v367) = v334;
      v339 = 2;
    }
    else
    {
      v335 = v333 + 23;
      v336 = (_QWORD *)a3[3];
      v338 = v336 + 1;
      v337 = v336[1];
      if ((unint64_t)(v337 + 1) > v336[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v336 + 3, v337 + 1, 2);
        v337 = v336[1];
      }
      *(_WORD *)(*v336 + 2 * v337) = v335;
      v339 = 1;
    }
    goto LABEL_405;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandsOp,void>::id)
  {
    Rewriter = a2;
    v356 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    v357 = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&Rewriter);
    if ((v357 & 0xFF00000000) != 0)
      v358 = v357;
    else
      v358 = -1;
    v359 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)v356 + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v360 = (_QWORD *)a3[3];
      v361 = v360[1];
      v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) > v360[2])
      {
LABEL_397:
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v362, 2);
        v363 = -1;
LABEL_442:
        v361 = v360[1];
        goto LABEL_456;
      }
LABEL_366:
      v363 = -1;
      goto LABEL_456;
    }
    InputAttributeNames = v356;
    v388 = (uint64_t *)(a1 + 24);
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v388, (unint64_t *)&InputAttributeNames, &v554))
    {
      v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v398 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v388, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v363 = 0;
      *v398 = InputAttributeNames;
      *((_WORD *)v398 + 4) = 0;
    }
    v360 = (_QWORD *)a3[3];
    v361 = v360[1];
    v399 = v361 + 1;
    if ((unint64_t)(v361 + 1) <= v360[2])
      goto LABEL_456;
LABEL_441:
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v399, 2);
    goto LABEL_442;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultOp,void>::id)
  {
    *(_QWORD *)&v554 = a2;
    v368 = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v554);
    v369 = v368;
    if (v368 > 3)
    {
      v389 = (_QWORD *)a3[3];
      v390 = v389[1];
      if ((unint64_t)(v390 + 1) > v389[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v389 + 3, v390 + 1, 2);
        v390 = v389[1];
      }
      *(_WORD *)(*v389 + 2 * v390) = 33;
      ++v389[1];
      v391 = (_QWORD *)a3[3];
      v338 = v391 + 1;
      v392 = v391[1];
      if (v391[2] < (unint64_t)(v392 + 2))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v391 + 3, v392 + 2, 2);
        v392 = v391[1];
      }
      *(_DWORD *)(*v391 + 2 * v392) = v369;
      v339 = 2;
    }
    else
    {
      v370 = v368 + 29;
      v371 = (_QWORD *)a3[3];
      v338 = v371 + 1;
      v372 = v371[1];
      if ((unint64_t)(v372 + 1) > v371[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v371 + 3, v372 + 1, 2);
        v372 = v371[1];
      }
      *(_WORD *)(*v371 + 2 * v372) = v370;
      v339 = 1;
    }
LABEL_405:
    *v338 += v339;
    v393 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v554);
    v394 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v554);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id)
  {
    Rewriter = a2;
    v356 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    v385 = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&Rewriter);
    if ((v385 & 0xFF00000000) != 0)
      v386 = v385;
    else
      v386 = -1;
    v387 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)v356 + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v360 = (_QWORD *)a3[3];
      v361 = v360[1];
      v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) > v360[2])
        goto LABEL_397;
      goto LABEL_366;
    }
    InputAttributeNames = v356;
    v406 = (uint64_t *)(a1 + 24);
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v406, (unint64_t *)&InputAttributeNames, &v554))
    {
      v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v418 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v406, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v363 = 0;
      *v418 = InputAttributeNames;
      *((_WORD *)v418 + 4) = 0;
    }
    v360 = (_QWORD *)a3[3];
    v361 = v360[1];
    v399 = v361 + 1;
    if ((unint64_t)(v361 + 1) <= v360[2])
      goto LABEL_456;
    goto LABEL_441;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetUsersOp,void>::id)
  {
    Rewriter = a2;
    v395 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    InputAttributeNames = v395;
    v396 = (uint64_t *)(a1 + 24);
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v396, (unint64_t *)&InputAttributeNames, &v554))
    {
      v397 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v407 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v396, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v397 = 0;
      *v407 = InputAttributeNames;
      *((_WORD *)v407 + 4) = 0;
    }
    v408 = (_QWORD *)a3[3];
    v409 = v408[1];
    if ((unint64_t)(v409 + 1) > v408[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v408 + 3, v409 + 1, 2);
      v409 = v408[1];
    }
    *(_WORD *)(*v408 + 2 * v409) = 35;
    ++v408[1];
    v410 = (_QWORD *)a3[3];
    v411 = (uint64_t *)a3[4];
    InputAttributeNames = v395;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v411, (unint64_t *)&InputAttributeNames, &v554))
    {
      v412 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v413 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v411, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v412 = 0;
      *v413 = InputAttributeNames;
      *((_WORD *)v413 + 4) = 0;
    }
    v414 = v410[1];
    if ((unint64_t)(v414 + 1) > v410[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v410, v410 + 3, v414 + 1, 2);
      v414 = v410[1];
    }
    *(_WORD *)(*v410 + 2 * v414) = v412;
    ++v410[1];
    v415 = (_QWORD *)a3[3];
    v416 = v415[1];
    if ((unint64_t)(v416 + 1) > v415[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v415 + 3, v416 + 1, 2);
      v416 = v415[1];
    }
    *(_WORD *)(*v415 + 2 * v416) = v397;
    ++v415[1];
    v323 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    goto LABEL_322;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetValueTypeOp,void>::id)
  {
    Rewriter = a2;
    v400 = *(void **)(*(_QWORD *)(*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    v401 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    v402 = v401;
    if (v400 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      InputAttributeNames = v401;
      v425 = (uint64_t *)(a1 + 24);
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v425, (unint64_t *)&InputAttributeNames, &v554))
      {
        v426 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v433 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v425, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v426 = 0;
        *v433 = InputAttributeNames;
        *((_WORD *)v433 + 4) = 0;
      }
      v356 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
      v434 = (_QWORD *)a3[3];
      v435 = v434[1];
      if ((unint64_t)(v435 + 1) > v434[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v434 + 3, v435 + 1, 2);
        v435 = v434[1];
      }
      *(_WORD *)(*v434 + 2 * v435) = 37;
      ++v434[1];
      v436 = (_QWORD *)a3[3];
      v437 = (uint64_t *)a3[4];
      InputAttributeNames = v402;
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v437, (unint64_t *)&InputAttributeNames, &v554))
      {
        v438 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v439 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v437, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v438 = 0;
        *v439 = InputAttributeNames;
        *((_WORD *)v439 + 4) = 0;
      }
      v440 = v436[1];
      if ((unint64_t)(v440 + 1) > v436[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v436, v436 + 3, v440 + 1, 2);
        v440 = v436[1];
      }
      *(_WORD *)(*v436 + 2 * v440) = v438;
      ++v436[1];
      v360 = (_QWORD *)a3[3];
      v441 = v360[1];
      if ((unint64_t)(v441 + 1) > v360[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v360 + 3, v441 + 1, 2);
        v441 = v360[1];
      }
      *(_WORD *)(*v360 + 2 * v441) = v426;
      goto LABEL_457;
    }
    v356 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    v403 = (_QWORD *)a3[3];
    v404 = v403[1];
    if ((unint64_t)(v404 + 1) > v403[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v403 + 3, v404 + 1, 2);
      v404 = v403[1];
    }
    *(_WORD *)(*v403 + 2 * v404) = 36;
    ++v403[1];
    v360 = (_QWORD *)a3[3];
    v405 = (uint64_t *)a3[4];
    InputAttributeNames = v402;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v405, (unint64_t *)&InputAttributeNames, &v554))
    {
      v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v427 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v405, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v363 = 0;
      *v427 = InputAttributeNames;
      *((_WORD *)v427 + 4) = 0;
    }
    v361 = v360[1];
    if ((unint64_t)(v361 + 1) > v360[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v361 + 1, 2);
      v361 = v360[1];
    }
LABEL_456:
    *(_WORD *)(*v360 + 2 * v361) = v363;
LABEL_457:
    ++v360[1];
    v429 = (_QWORD *)a3[3];
    v428 = (uint64_t *)a3[4];
    InputAttributeNames = v356;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v428, (unint64_t *)&InputAttributeNames, &v554))
    {
      v430 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v431 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v428, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v430 = 0;
      *v431 = InputAttributeNames;
      *((_WORD *)v431 + 4) = 0;
    }
    v432 = v429[1];
    if ((unint64_t)(v432 + 1) > v429[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v429, v429 + 3, v432 + 1, 2);
      v432 = v429[1];
    }
    *(_WORD *)(*v429 + 2 * v432) = v430;
    ++v429[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::IsNotNullOp,void>::id)
  {
    InputAttributeNames = a2;
    Filter = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v65 = *((_QWORD *)&v554 + 1);
    v64 = v554;
    v139 = (_QWORD *)a3[3];
    v417 = v139[1];
    if ((unint64_t)(v417 + 1) > v139[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v139 + 3, v417 + 1, 2);
      v417 = v139[1];
    }
    *(_WORD *)(*v139 + 2 * v417) = 38;
    goto LABEL_135;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::RecordMatchOp,void>::id)
    v253 = a2;
  else
    v253 = 0;
  if (v253)
  {
    v552 = v253;
    v254 = *(_QWORD *)(a1 + 208);
    v255 = *(uint64_t **)(a1 + 256);
    v256 = *((_DWORD *)v255 + 4);
    if (v256)
    {
      v257 = *v255;
      v258 = v256 - 1;
      v259 = (v256 - 1) & ((v253 >> 4) ^ (v253 >> 9));
      v260 = *(Operation **)(v257 + 16 * v259);
      if (v260 == v253)
      {
LABEL_259:
        v261 = *(_QWORD *)(v257 + 16 * v259 + 8);
        goto LABEL_533;
      }
      v502 = 1;
      while (v260 != (Operation *)-4096)
      {
        v503 = v259 + v502++;
        v259 = v503 & v258;
        v260 = *(Operation **)(v257 + 16 * v259);
        if (v260 == v253)
          goto LABEL_259;
      }
    }
    v261 = 0;
LABEL_533:
    v504 = *(_DWORD *)(v254 + 8);
    Rewriter = (Operation *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v552);
    InputAttributeNames = (Operation *)mlir::SymbolRefAttr::getLeafReference((mlir::SymbolRefAttr *)&Rewriter);
    AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&InputAttributeNames);
    v507 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(a1 + 96, AttrData, v506);
    mlir::detail::PDLByteCodePattern::create((uint64_t)v253, v261, *(_DWORD *)(*v507 + 8), (uint64_t)&v554);
    v508 = *(_DWORD *)(v254 + 8);
    if (v508 >= *(_DWORD *)(v254 + 12))
    {
      llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::growAndEmplaceBack<mlir::detail::PDLByteCodePattern>(v254, &v554);
      v517 = v560;
      if (v560 != &v563)
LABEL_554:
        free(v517);
LABEL_555:
      if (__src != v559)
        free(__src);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, v552);
      MatchedOps = mlir::pdl_interp::RecordMatchOp::getMatchedOps((mlir::pdl_interp::RecordMatchOp *)&v552);
      v520 = v519;
      v521 = *((_QWORD *)&v554 + 1);
      v522 = v554;
      v523 = (_QWORD *)a3[3];
      v524 = v523[1];
      if ((unint64_t)(v524 + 1) > v523[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v523 + 3, v524 + 1, 2);
        v524 = v523[1];
      }
      *(_WORD *)(*v523 + 2 * v524) = 39;
      ++v523[1];
      v525 = (_QWORD *)a3[3];
      v526 = v525[1];
      if ((unint64_t)(v526 + 1) > v525[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v525 + 3, v526 + 1, 2);
        *(_WORD *)(*v525 + 2 * v525[1]++) = v504;
        if (!v521)
          goto LABEL_563;
      }
      else
      {
        *(_WORD *)(*v525 + 2 * v526) = v504;
        ++v525[1];
        if (!v521)
          goto LABEL_563;
      }
      v527 = (mlir::Block **)(v522 + 24);
      do
      {
        v528 = *v527;
        v527 += 4;
        --v521;
      }
      while (v521);
LABEL_563:
      v529 = (_QWORD *)a3[3];
      v530 = v529[1];
      if ((unint64_t)(v530 + 1) > v529[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v529 + 3, v530 + 1, 2);
        *(_WORD *)(*v529 + 2 * v529[1]++) = v520;
        if (v520)
        {
LABEL_565:
          v531 = (Operation **)(MatchedOps + 24);
          do
          {
            v532 = (_QWORD *)a3[3];
            v533 = (uint64_t *)a3[4];
            Rewriter = *v531;
            InputAttributeNames = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v533, (unint64_t *)&Rewriter, &InputAttributeNames))
            {
              v534 = *((_WORD *)InputAttributeNames + 4);
            }
            else
            {
              v535 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v533, (uint64_t)&Rewriter, (unint64_t *)&Rewriter, InputAttributeNames);
              v534 = 0;
              *v535 = Rewriter;
              *((_WORD *)v535 + 4) = 0;
            }
            v536 = v532[1];
            if ((unint64_t)(v536 + 1) > v532[2])
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v532, v532 + 3, v536 + 1, 2);
              v536 = v532[1];
            }
            *(_WORD *)(*v532 + 2 * v536) = v534;
            ++v532[1];
            v531 += 4;
            --v520;
          }
          while (v520);
        }
      }
      else
      {
        *(_WORD *)(*v529 + 2 * v530) = v520;
        ++v529[1];
        if (v520)
          goto LABEL_565;
      }
      v538 = mlir::pdl_interp::RecordMatchOp::getInputs((mlir::pdl_interp::RecordMatchOp *)&v552);
      v539 = v537;
      v540 = (_QWORD *)a3[3];
      v541 = v540[1];
      if ((unint64_t)(v541 + 1) > v540[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v540 + 3, v541 + 1, 2);
        *(_WORD *)(*v540 + 2 * v540[1]++) = v539;
        if (!v539)
          return;
      }
      else
      {
        *(_WORD *)(*v540 + 2 * v541) = v537;
        ++v540[1];
        if (!v537)
          return;
      }
      v542 = (unint64_t *)(v538 + 24);
      do
      {
        v543 = *v542;
        v542 += 4;
        --v539;
      }
      while (v539);
      return;
    }
    v509 = *(_QWORD *)v254 + 104 * v508;
    v510 = v554;
    *(_QWORD *)(v509 + 16) = v555;
    *(_OWORD *)v509 = v510;
    v511 = (void *)(v509 + 40);
    *(_QWORD *)(v509 + 24) = v509 + 40;
    *(_QWORD *)(v509 + 32) = 0x200000000;
    v512 = v557;
    if (!v557 || (__int128 *)v509 == &v554)
    {
LABEL_545:
      v515 = v559[1];
      *(_QWORD *)(v509 + 72) = v509 + 88;
      *(_OWORD *)(v509 + 56) = v515;
      *(_QWORD *)(v509 + 80) = 0;
      v516 = v561;
      if (v561 && (__int128 *)v509 != &v554)
      {
        if (v560 == &v563)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v509 + 72, (void *)(v509 + 88), v561, 16);
          if (v561)
            memcpy(*(void **)(v509 + 72), v560, 16 * v561);
          *(_DWORD *)(v509 + 80) = v516;
        }
        else
        {
          *(_QWORD *)(v509 + 72) = v560;
          *(_DWORD *)(v509 + 80) = v516;
          *(_DWORD *)(v509 + 84) = v562;
          v560 = &v563;
          v562 = 0;
        }
        v561 = 0;
      }
      *(_OWORD *)(v509 + 88) = v563;
      ++*(_DWORD *)(v254 + 8);
      v517 = v560;
      if (v560 != &v563)
        goto LABEL_554;
      goto LABEL_555;
    }
    v513 = __src;
    if (__src != v559)
    {
      *(_QWORD *)(v509 + 24) = __src;
      *(_DWORD *)(v509 + 32) = v512;
      *(_DWORD *)(v509 + 36) = v558;
      __src = v559;
      v558 = 0;
LABEL_544:
      v557 = 0;
      goto LABEL_545;
    }
    if (v557 < 3)
    {
      v514 = v557;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v509 + 24, (void *)(v509 + 40), v557, 8);
      v514 = v557;
      if (!v557)
      {
LABEL_543:
        *(_DWORD *)(v509 + 32) = v512;
        goto LABEL_544;
      }
      v513 = __src;
      v511 = *(void **)(v509 + 24);
    }
    memcpy(v511, v513, 8 * v514);
    goto LABEL_543;
  }
  if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::ReplaceOp,void>::id)
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchAttributeOp,void>::id)
    {
      Rewriter = a2;
      v450 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
      v451 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      v452 = *((_QWORD *)&v554 + 1);
      v453 = v554;
      v454 = (_QWORD *)a3[3];
      v455 = v454[1];
      if ((unint64_t)(v455 + 1) > v454[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v454 + 3, v455 + 1, 2);
        v455 = v454[1];
      }
      *(_WORD *)(*v454 + 2 * v455) = 41;
      ++v454[1];
      v456 = (_QWORD *)a3[3];
      v457 = (uint64_t *)a3[4];
      InputAttributeNames = v450;
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v457, (unint64_t *)&InputAttributeNames, &v554))
      {
        v458 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v468 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v457, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v458 = 0;
        *v468 = InputAttributeNames;
        *((_WORD *)v468 + 4) = 0;
      }
      v469 = v456[1];
      if ((unint64_t)(v469 + 1) > v456[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v456, v456 + 3, v469 + 1, 2);
        v469 = v456[1];
      }
      *(_WORD *)(*v456 + 2 * v469) = v458;
      ++v456[1];
      if (v452)
      {
        v470 = (mlir::Block **)(v453 + 24);
        do
        {
          v471 = *v470;
          v470 += 4;
          --v452;
        }
        while (v452);
      }
      return;
    }
    if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypeOp,void>::id)
    {
      Rewriter = a2;
      v459 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
      v460 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      v461 = *((_QWORD *)&v554 + 1);
      v462 = v554;
      v463 = (_QWORD *)a3[3];
      v464 = v463[1];
      if ((unint64_t)(v464 + 1) > v463[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v463 + 3, v464 + 1, 2);
        v464 = v463[1];
      }
      *(_WORD *)(*v463 + 2 * v464) = 45;
      ++v463[1];
      v465 = (_QWORD *)a3[3];
      v466 = (uint64_t *)a3[4];
      InputAttributeNames = v459;
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v466, (unint64_t *)&InputAttributeNames, &v554))
      {
        v467 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v472 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v466, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v467 = 0;
        *v472 = InputAttributeNames;
        *((_WORD *)v472 + 4) = 0;
      }
      v473 = v465[1];
      if ((unint64_t)(v473 + 1) > v465[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v465, v465 + 3, v473 + 1, 2);
        v473 = v465[1];
      }
      *(_WORD *)(*v465 + 2 * v473) = v467;
      ++v465[1];
      if (v461)
      {
        v474 = (mlir::Block **)(v462 + 24);
        do
        {
          v475 = *v474;
          v474 += 4;
          --v461;
        }
        while (v461);
      }
      return;
    }
    if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypesOp,void>::id)
    {
      if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperandCountOp,void>::id)
      {
        InputAttributeNames = a2;
        v419 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
        v420 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
        mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
        v422 = *((_QWORD *)&v554 + 1);
        v421 = v554;
        v423 = a3;
        v424 = 42;
      }
      else
      {
        if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperationNameOp,void>::id)
        {
          Rewriter = a2;
          *(_QWORD *)&v554 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
          v476 = (Operation **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v554);
          v477 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v554);
          v479 = v478;
          v480 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
          mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
          v481 = *((_QWORD *)&v554 + 1);
          v482 = v554;
          v483 = (_QWORD *)a3[3];
          v484 = v483[1];
          if ((unint64_t)(v484 + 1) > v483[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v483 + 3, v484 + 1, 2);
            v484 = v483[1];
          }
          *(_WORD *)(*v483 + 2 * v484) = 43;
          ++v483[1];
          v485 = (_QWORD *)a3[3];
          v486 = (uint64_t *)a3[4];
          InputAttributeNames = v480;
          *(_QWORD *)&v554 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v486, (unint64_t *)&InputAttributeNames, &v554))
          {
            v487 = *(_WORD *)(v554 + 8);
          }
          else
          {
            v492 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v486, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
            v487 = 0;
            *v492 = InputAttributeNames;
            *((_WORD *)v492 + 4) = 0;
          }
          v493 = (Operation **)(v477 + 8 * v479);
          v494 = v485[1];
          if ((unint64_t)(v494 + 1) > v485[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v485, v485 + 3, v494 + 1, 2);
            v494 = v485[1];
          }
          *(_WORD *)(*v485 + 2 * v494) = v487;
          ++v485[1];
          v495 = (_QWORD *)a3[3];
          v496 = v495[1];
          if ((unint64_t)(v496 + 1) > v495[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v495 + 3, v496 + 1, 2);
            v496 = v495[1];
          }
          *(_WORD *)(*v495 + 2 * v496) = (unint64_t)((char *)v493 - (char *)v476) >> 3;
          ++v495[1];
          while (v476 != v493)
          {
            v497 = *v476++;
            InputAttributeNames = v497;
            v498 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&InputAttributeNames);
            mlir::OperationName::OperationName(&v554, v498, v499, *(_QWORD *)(a1 + 152));
          }
          if (v481)
          {
            v500 = (mlir::Block **)(v482 + 24);
            do
            {
              v501 = *v500;
              v500 += 4;
              --v481;
            }
            while (v481);
          }
          return;
        }
        if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchResultCountOp,void>::id)
          return;
        InputAttributeNames = a2;
        v419 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
        v420 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
        mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
        v422 = *((_QWORD *)&v554 + 1);
        v421 = v554;
        v423 = a3;
        v424 = 44;
      }
      return;
    }
    InputAttributeNames = a2;
    v130 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
    v131 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v133 = *((_QWORD *)&v554 + 1);
    v132 = v554;
    v134 = a3;
    v135 = 46;
LABEL_125:
    return;
  }
  *(_QWORD *)&v554 = a2;
  v442 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v554);
  Indices = mlir::memref::LoadOp::getIndices((mlir::memref::LoadOp *)&v554);
  v445 = v443;
  v446 = (_QWORD *)a3[3];
  v447 = v446[1];
  if ((unint64_t)(v447 + 1) > v446[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v446 + 3, v447 + 1, 2);
    *(_WORD *)(*v446 + 2 * v446[1]++) = v445;
    if (!v445)
      return;
  }
  else
  {
    *(_WORD *)(*v446 + 2 * v447) = v443;
    ++v446[1];
    if (!v443)
      return;
  }
  v448 = (unint64_t *)(Indices + 24);
  do
  {
    v449 = *v448;
    v448 += 4;
    --v445;
  }
  while (v445);
}

void `anonymous namespace'::Generator::generate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  mlir::GenericProgramPoint *v20;
  mlir::GenericProgramPoint *i;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v34 = v36;
  v35 = 0x800000000;
  llvm::ReversePostOrderTraversal<mlir::Region *,llvm::GraphTraits<mlir::Region *>>::Initialize((uint64_t)&v34, (uint64_t)&v33);
  v5 = (char *)v34;
  if (!(_DWORD)v35)
    goto LABEL_44;
  v6 = (char *)v34 + 8 * v35;
  do
  {
    v8 = *((_QWORD *)v6 - 1);
    v6 -= 8;
    v7 = v8;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8);
    v10 = *(_DWORD *)(a1 + 176);
    if (!v10)
      goto LABEL_27;
    v11 = *(_QWORD *)(a1 + 160);
    v12 = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
    v13 = (_QWORD *)(v11 + 16 * v12);
    v14 = *v13;
    if (v7 == *v13)
      goto LABEL_20;
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & (v10 - 1);
      v13 = (_QWORD *)(v11 + 16 * v12);
      v14 = *v13;
      if (v7 == *v13)
        goto LABEL_20;
    }
    v23 = v15 ? v15 : v13;
    v24 = *(_DWORD *)(a1 + 168);
    if (4 * v24 + 4 < 3 * v10)
    {
      if (v10 + ~v24 - *(_DWORD *)(a1 + 172) > v10 >> 3)
        goto LABEL_17;
    }
    else
    {
LABEL_27:
      v10 *= 2;
    }
    llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1 + 160, v10);
    v25 = *(_QWORD *)(a1 + 160);
    v26 = *(_DWORD *)(a1 + 176) - 1;
    v27 = v26 & ((v7 >> 4) ^ (v7 >> 9));
    v23 = (_QWORD *)(v25 + 16 * v27);
    v28 = *v23;
    if (v7 == *v23)
    {
LABEL_29:
      ++*(_DWORD *)(a1 + 168);
      if (v7 == -4096)
        goto LABEL_19;
LABEL_18:
      --*(_DWORD *)(a1 + 172);
      goto LABEL_19;
    }
    v29 = 0;
    v30 = 1;
    while (v28 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == -8192;
      if (v31)
        v29 = v23;
      v32 = v27 + v30++;
      v27 = v32 & v26;
      v23 = (_QWORD *)(v25 + 16 * (v32 & v26));
      v28 = *v23;
      if (v7 == *v23)
        goto LABEL_29;
    }
    if (v29)
      v23 = v29;
LABEL_17:
    v19 = *v23;
    ++*(_DWORD *)(a1 + 168);
    if (v19 != -4096)
      goto LABEL_18;
LABEL_19:
    *v23 = v7;
    *((_DWORD *)v23 + 2) = v9;
LABEL_20:
    v20 = (mlir::GenericProgramPoint *)(v7 + 32);
    for (i = *(mlir::GenericProgramPoint **)(v7 + 40); i != v20; i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(i);
    }
  }
  while (v6 != v5);
  v5 = (char *)v34;
LABEL_44:
  if (v5 != (char *)v36)
    free(v5);
}

uint64_t `anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_3::operator()(uint64_t a1, unint64_t a2)
{
  _WORD *v3;
  uint64_t *v4;
  __int16 v5;
  uint64_t result;
  unint64_t v7;
  void *v8;
  uint64_t *v9;
  _WORD *v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v13 = a2;
  v4 = *(uint64_t **)a1;
  v3 = *(_WORD **)(a1 + 8);
  v5 = (*v3)++;
  v14 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v4, &v13, &v14);
  if ((result & 1) == 0)
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v4, (uint64_t)&v13, &v13, v14);
    *(_QWORD *)result = v13;
    *(_WORD *)(result + 8) = v5;
  }
  v7 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v7 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    v7 = 0;
  v12 = v7;
  if (v7)
  {
    result = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
    v8 = *(void **)(*(_QWORD *)result + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v9 = v4 + 3;
      v10 = *(_WORD **)(a1 + 16);
    }
    else
    {
      if (v8 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
        return result;
      v9 = v4 + 3;
      v10 = *(_WORD **)(a1 + 24);
    }
    v11 = (*v10)++;
    v14 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v9, &v13, &v14);
    if ((result & 1) == 0)
    {
      result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v13, &v13, v14);
      *(_QWORD *)result = v13;
      *(_WORD *)(result + 8) = v11;
    }
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  llvm *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    v16 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v17 = 16 * v3;
      v18 = v4;
      do
      {
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v18, &v25);
          v19 = v25;
          *v25 = *(_QWORD *)v18;
          *((_WORD *)v19 + 4) = *((_WORD *)v18 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (llvm *)((char *)v18 + 16);
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_23;
    v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    v22 = result + 2;
    v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -4096;
      *v22 = -4096;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v24 = &result[2 * v20];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_0>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t i;
  unint64_t NextResultAtOffset;

  v2 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v2)
    v3 = a2 - 16;
  else
    v3 = 0;
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)result;
    for (i = 0; i != v2; ++i)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, i);
    }
  }
  return result;
}

uint64_t *llvm::detail::UniqueFunctionBase<void,mlir::Operation *>::CallImpl<`anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_1>(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t i;
  uint64_t v21;
  mlir::GenericProgramPoint *v22;
  mlir::GenericProgramPoint *j;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  unsigned int v53;

  v3 = result;
  v5 = *result;
  v4 = (_DWORD *)result[1];
  v6 = (*v4)++;
  v7 = *(_DWORD *)(v5 + 16);
  v8 = a2 >> 4;
  if (!v7)
    goto LABEL_49;
  v9 = (v7 - 1) & (v8 ^ (a2 >> 9));
  v10 = (_QWORD *)(*(_QWORD *)v5 + 16 * v9);
  v11 = *v10;
  if (*v10 == a2)
    goto LABEL_17;
  v12 = 0;
  v13 = 1;
  while (v11 != -4096)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == -8192;
    if (v14)
      v12 = v10;
    v15 = v9 + v13++;
    v9 = v15 & (v7 - 1);
    v10 = (_QWORD *)(*(_QWORD *)v5 + 16 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_17;
  }
  v36 = (uint64_t)(v12 ? v12 : v10);
  v37 = *(_DWORD *)(v5 + 8);
  if (4 * v37 + 4 < 3 * v7)
  {
    if (v7 + ~v37 - *(_DWORD *)(v5 + 12) > v7 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_49:
    v7 *= 2;
  }
  result = llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v5, v7);
  v38 = *(_DWORD *)(v5 + 16) - 1;
  v39 = v38 & (v8 ^ (a2 >> 9));
  v36 = *(_QWORD *)v5 + 16 * v39;
  v40 = *(_QWORD *)v36;
  if (*(_QWORD *)v36 == a2)
  {
LABEL_51:
    ++*(_DWORD *)(v5 + 8);
    if (a2 == -4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v46 = 0;
  v47 = 1;
  while (v40 != -4096)
  {
    if (v46)
      v48 = 0;
    else
      v48 = v40 == -8192;
    if (v48)
      v46 = v36;
    v49 = v39 + v47++;
    v39 = v49 & v38;
    v36 = *(_QWORD *)v5 + 16 * (v49 & v38);
    v40 = *(_QWORD *)v36;
    if (*(_QWORD *)v36 == a2)
      goto LABEL_51;
  }
  if (v46)
    v36 = v46;
LABEL_14:
  v16 = *(_QWORD *)v36;
  ++*(_DWORD *)(v5 + 8);
  if (v16 != -4096)
LABEL_15:
    --*(_DWORD *)(v5 + 12);
LABEL_16:
  *(_QWORD *)v36 = a2;
  *(_DWORD *)(v36 + 8) = v6;
LABEL_17:
  v17 = *(unsigned int *)(a2 + 44);
  if ((v17 & 0x7FFFFF) != 0)
  {
    v18 = ((a2 + 16 * ((v17 >> 23) & 1) + ((v17 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    v19 = v18 + 24 * (v17 & 0x7FFFFF);
    do
    {
      for (i = *(_QWORD *)(v18 + 8); i != v18; i = *(_QWORD *)(i + 8))
      {
        v21 = i - 8;
        if (!i)
          v21 = 0;
        v22 = (mlir::GenericProgramPoint *)(v21 + 32);
        for (j = *(mlir::GenericProgramPoint **)(v21 + 40); j != v22; j = (mlir::GenericProgramPoint *)*((_QWORD *)j + 1))
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(j);
          result = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)(v3[2] + 24) & 0xFFFFFFFFFFFFFFF8))();
        }
      }
      v18 += 24;
    }
    while (v18 != v19);
  }
  v24 = v3[3];
  v25 = (_DWORD *)v3[1];
  v26 = (*v25)++;
  v27 = *(_DWORD *)(v24 + 16);
  if (!v27)
    goto LABEL_57;
  v28 = (v27 - 1) & (v8 ^ (a2 >> 9));
  v29 = (_QWORD *)(*(_QWORD *)v24 + 16 * v28);
  v30 = *v29;
  if (*v29 != a2)
  {
    v32 = 0;
    v33 = 1;
    while (v30 != -4096)
    {
      if (v32)
        v34 = 0;
      else
        v34 = v30 == -8192;
      if (v34)
        v32 = v29;
      v35 = v28 + v33++;
      v28 = v35 & (v27 - 1);
      v29 = (_QWORD *)(*(_QWORD *)v24 + 16 * v28);
      v30 = *v29;
      if (*v29 == a2)
        return result;
    }
    if (v32)
      v41 = (uint64_t)v32;
    else
      v41 = (uint64_t)v29;
    v42 = *(_DWORD *)(v24 + 8);
    if (4 * v42 + 4 < 3 * v27)
    {
      if (v27 + ~v42 - *(_DWORD *)(v24 + 12) > v27 >> 3)
        goto LABEL_33;
      goto LABEL_58;
    }
LABEL_57:
    v27 *= 2;
LABEL_58:
    result = llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v24, v27);
    v43 = *(_DWORD *)(v24 + 16) - 1;
    v44 = v43 & (v8 ^ (a2 >> 9));
    v41 = *(_QWORD *)v24 + 16 * v44;
    v45 = *(_QWORD *)v41;
    if (*(_QWORD *)v41 == a2)
    {
LABEL_59:
      ++*(_DWORD *)(v24 + 8);
      if (a2 == -4096)
        goto LABEL_35;
      goto LABEL_34;
    }
    v50 = 0;
    v51 = 1;
    while (v45 != -4096)
    {
      if (v50)
        v52 = 0;
      else
        v52 = v45 == -8192;
      if (v52)
        v50 = v41;
      v53 = v44 + v51++;
      v44 = v53 & v43;
      v41 = *(_QWORD *)v24 + 16 * (v53 & v43);
      v45 = *(_QWORD *)v41;
      if (*(_QWORD *)v41 == a2)
        goto LABEL_59;
    }
    if (v50)
      v41 = v50;
LABEL_33:
    v31 = *(_QWORD *)v41;
    ++*(_DWORD *)(v24 + 8);
    if (v31 == -4096)
    {
LABEL_35:
      *(_QWORD *)v41 = a2;
      *(_DWORD *)(v41 + 8) = v26;
      return result;
    }
LABEL_34:
    --*(_DWORD *)(v24 + 12);
    goto LABEL_35;
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Block *)>::callback_fn<`anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_2>(uint64_t a1, uint64_t a2)
{
  uint64_t *Liveness;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  mlir::Block *ParentRegion;
  unint64_t v14;
  mlir::Block **v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  mlir::Block **v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::Block **v26;
  uint64_t j;
  unint64_t NextResultAtOffset;
  unint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t **v32;
  uint64_t *v33;

  Liveness = mlir::Liveness::getLiveness(*(_QWORD *)a1, a2);
  v33 = Liveness;
  v5 = *(_OWORD *)(a1 + 24);
  v30[0] = *(_OWORD *)(a1 + 8);
  v30[1] = v5;
  v31 = *(_QWORD *)(a1 + 40);
  v32 = &v33;
  v6 = Liveness[2];
  v7 = 24;
  if (v6 == Liveness[1])
    v7 = 28;
  v8 = *(unsigned int *)((char *)Liveness + v7);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = (unint64_t *)Liveness[2];
    while (*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_16;
    }
  }
  else
  {
    v10 = (unint64_t *)Liveness[2];
  }
  v11 = (unint64_t *)(v6 + 8 * v8);
  if (v10 != v11)
  {
    v12 = *v10;
LABEL_11:
    v29 = v12;
    ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v29);
    if (ParentRegion == (mlir::Block *)mlir::Block::getParent((mlir::Block *)a2))
    {
      v14 = v29;
      mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(a2 + 40));
    }
    while (++v10 != v11)
    {
      v12 = *v10;
      if (*v10 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v10 != v11)
          goto LABEL_11;
        break;
      }
    }
  }
LABEL_16:
  if (mlir::Block::isEntryBlock((mlir::Block *)a2))
  {
    v16 = *(unint64_t **)(a2 + 48);
    v17 = *(_QWORD *)(a2 + 56) - (_QWORD)v16;
    if (v17)
    {
      v18 = 8 * (v17 >> 3);
      do
      {
        v19 = *v16++;
        mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(a2 + 40));
        v18 -= 8;
      }
      while (v18);
    }
  }
  v21 = (mlir::GenericProgramPoint *)(a2 + 32);
  for (i = *(mlir::GenericProgramPoint **)(a2 + 40); i != v21; i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(i);
    v24 = *(unsigned int *)(v23 + 36);
    if ((_DWORD)v24)
      v25 = v23 - 16;
    else
      v25 = 0;
    if ((_DWORD)v24)
    {
      v26 = (mlir::Block **)v23;
      for (j = 0; j != v24; ++j)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, j);
      }
    }
  }
}

void `anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_2::operator() const(mlir::Block *)::{lambda(mlir::Value,mlir::Operation *)#1}::operator()(uint64_t a1, unint64_t a2, mlir::Block **a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  _BYTE *v42;
  int v43;
  _DWORD *v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  llvm *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  _QWORD *buffer;
  unsigned int v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned int v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  llvm *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  int v80;
  BOOL v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;

  v87 = a2;
  if (**(_QWORD **)a1 == a2)
    return;
  v4 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v88 = 0;
  v9 = v88;
  if (v8)
  {
    v10 = *(_QWORD **)(v88 + 8);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_DWORD *)(v11 + 16);
    if (v12)
      goto LABEL_4;
LABEL_19:
    v15 = 0;
    v24 = *(_DWORD *)(v11 + 8);
    if (4 * v24 + 4 >= 3 * v12)
    {
LABEL_57:
      v12 *= 2;
LABEL_58:
      llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v11, v12);
      v47 = *(_DWORD *)(v11 + 16) - 1;
      v48 = v47 & ((a3 >> 4) ^ (a3 >> 9));
      v15 = *(_QWORD *)v11 + 16 * v48;
      v49 = *(_QWORD *)v15;
      if (*(mlir::Block ***)v15 == a3)
      {
LABEL_59:
        ++*(_DWORD *)(v11 + 8);
        if (a3 == (mlir::Block **)-4096)
          goto LABEL_23;
        goto LABEL_22;
      }
      v79 = 0;
      v80 = 1;
      while (v49 != -4096)
      {
        if (v79)
          v81 = 0;
        else
          v81 = v49 == -8192;
        if (v81)
          v79 = v15;
        v82 = v48 + v80++;
        v48 = v82 & v47;
        v15 = *(_QWORD *)v11 + 16 * (v82 & v47);
        v49 = *(_QWORD *)v15;
        if (*(mlir::Block ***)v15 == a3)
          goto LABEL_59;
      }
      if (v79)
        v15 = v79;
LABEL_21:
      v25 = *(_QWORD *)v15;
      ++*(_DWORD *)(v11 + 8);
      if (v25 == -4096)
      {
LABEL_23:
        *(_QWORD *)v15 = a3;
        *(_DWORD *)(v15 + 8) = 0;
        v4 = v87;
        goto LABEL_24;
      }
LABEL_22:
      --*(_DWORD *)(v11 + 12);
      goto LABEL_23;
    }
LABEL_20:
    if (v12 + ~v24 - *(_DWORD *)(v11 + 12) > v12 >> 3)
      goto LABEL_21;
    goto LABEL_58;
  }
  v89 = v88;
  v21 = *(_DWORD *)(v7 + 8);
  v22 = *(unsigned int *)(v7 + 16);
  if (4 * v21 + 4 >= (3 * v22))
  {
    v23 = 2 * v22;
  }
  else
  {
    v23 = *(_DWORD *)(v7 + 16);
    if ((int)v22 + ~v21 - *(_DWORD *)(v7 + 12) > v22 >> 3)
    {
      *(_DWORD *)(v7 + 8) = v21 + 1;
      if (*(_QWORD *)v9 == -4096)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  v54 = *(llvm **)v7;
  v55 = (v23 - 1) | ((unint64_t)(v23 - 1) >> 1);
  v56 = v55 | (v55 >> 2) | ((v55 | (v55 >> 2)) >> 4);
  v57 = ((v56 | (v56 >> 8)) >> 16) | v56 | (v56 >> 8);
  if ((v57 + 1) > 0x40)
    v58 = v57 + 1;
  else
    v58 = 64;
  *(_DWORD *)(v7 + 16) = v58;
  buffer = llvm::allocate_buffer(40 * v58, (std::align_val_t)8uLL);
  *(_QWORD *)v7 = buffer;
  if (v54)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v60 = *(_DWORD *)(v7 + 16);
    if (!v60)
      goto LABEL_88;
    v61 = 40 * v60 - 40;
    if (v61 >= 0x28)
    {
      v69 = v61 / 0x28 + 1;
      v62 = &buffer[5 * (v69 & 0xFFFFFFFFFFFFFFELL)];
      v70 = v69 & 0xFFFFFFFFFFFFFFELL;
      v71 = buffer;
      do
      {
        *v71 = -4096;
        v71[5] = -4096;
        v71 += 10;
        v70 -= 2;
      }
      while (v70);
      if (v69 == (v69 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_88:
        if ((_DWORD)v22)
        {
          v73 = 40 * v22;
          v74 = v54;
          do
          {
            if ((*(_QWORD *)v74 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v90 = 0;
              v75 = v90;
              *v90 = *(_QWORD *)v74;
              v76 = *((_QWORD *)v74 + 1);
              *((_QWORD *)v74 + 1) = 0;
              v75[1] = v76;
              v77 = *(_QWORD *)((char *)v74 + 29);
              *((_OWORD *)v75 + 1) = *((_OWORD *)v74 + 1);
              *(_QWORD *)((char *)v75 + 29) = v77;
              ++*(_DWORD *)(v7 + 8);
              v78 = (_DWORD *)*((_QWORD *)v74 + 1);
              *((_QWORD *)v74 + 1) = 0;
              if (v78)
              {
                if (v78[68])
                  llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::visitNodes((uint64_t)v78, (void (*)(_QWORD *, _QWORD, uint64_t))llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::deleteNode, 0);
                operator delete(v78);
              }
            }
            v74 = (llvm *)((char *)v74 + 40);
            v73 -= 40;
          }
          while (v73);
        }
        llvm::deallocate_buffer(v54, (void *)(40 * v22));
      }
    }
    else
    {
      v62 = buffer;
    }
    v72 = &buffer[5 * v60];
    do
    {
      *v62 = -4096;
      v62 += 5;
    }
    while (v62 != v72);
    goto LABEL_88;
  }
  *(_QWORD *)(v7 + 8) = 0;
  v63 = *(_DWORD *)(v7 + 16);
  if (v63)
  {
    v64 = 40 * v63 - 40;
    v65 = buffer;
    if (v64 < 0x28)
      goto LABEL_125;
    v66 = v64 / 0x28 + 1;
    v65 = &buffer[5 * (v66 & 0xFFFFFFFFFFFFFFELL)];
    v67 = v66 & 0xFFFFFFFFFFFFFFELL;
    v68 = buffer;
    do
    {
      *v68 = -4096;
      v68[5] = -4096;
      v68 += 10;
      v67 -= 2;
    }
    while (v67);
    if (v66 != (v66 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_125:
      do
      {
        *v65 = -4096;
        v65 += 5;
      }
      while (v65 != &buffer[5 * v63]);
    }
  }
  v9 = v89;
  ++*(_DWORD *)(v7 + 8);
  if (*(_QWORD *)v9 != -4096)
LABEL_17:
    --*(_DWORD *)(v7 + 12);
LABEL_18:
  *(_QWORD *)v9 = v4;
  v10 = operator new(0x120uLL);
  v10[34] = 0;
  v10[35] = v6;
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  *((_OWORD *)v10 + 8) = 0u;
  *((_OWORD *)v10 + 9) = 0u;
  *((_OWORD *)v10 + 10) = 0u;
  *((_OWORD *)v10 + 11) = 0u;
  *((_OWORD *)v10 + 12) = 0u;
  *((_OWORD *)v10 + 13) = 0u;
  *((_OWORD *)v10 + 14) = 0u;
  *((_OWORD *)v10 + 15) = 0u;
  *((_OWORD *)v10 + 16) = 0u;
  *(_QWORD *)(v9 + 8) = v10;
  *(_BYTE *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 20) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  *(_BYTE *)(v9 + 28) = 0;
  *(_BYTE *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 36) = 0;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_19;
LABEL_4:
  v13 = v12 - 1;
  v14 = (v12 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v15 = *(_QWORD *)v11 + 16 * v14;
  v16 = *(_QWORD *)v15;
  if (*(mlir::Block ***)v15 != a3)
  {
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = *(_QWORD *)v11 + 16 * (v20 & v13);
      v16 = *(_QWORD *)v15;
      if (*(mlir::Block ***)v15 == a3)
        goto LABEL_24;
    }
    if (v17)
      v15 = v17;
    v24 = *(_DWORD *)(v11 + 8);
    if (4 * v24 + 4 >= 3 * v12)
      goto LABEL_57;
    goto LABEL_20;
  }
LABEL_24:
  v26 = *(unsigned int *)(v15 + 8);
  v27 = *(_QWORD *)(a1 + 32);
  mlir::LivenessBlockInfo::getEndOperation(**(_QWORD **)(a1 + 40), (uint64_t **)v4, a3);
  v29 = v28;
  v30 = *(_DWORD *)(v27 + 16);
  if (!v30)
    goto LABEL_64;
  v31 = v30 - 1;
  v32 = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
  v33 = *(_QWORD *)v27 + 16 * v32;
  v34 = *(_QWORD *)v33;
  if (v28 == *(_QWORD *)v33)
    goto LABEL_40;
  v35 = 0;
  v36 = 1;
  while (v34 != -4096)
  {
    if (v35)
      v37 = 0;
    else
      v37 = v34 == -8192;
    if (v37)
      v35 = v33;
    v38 = v32 + v36++;
    v32 = v38 & v31;
    v33 = *(_QWORD *)v27 + 16 * (v38 & v31);
    v34 = *(_QWORD *)v33;
    if (v28 == *(_QWORD *)v33)
      goto LABEL_40;
  }
  if (v35)
    v33 = v35;
  v50 = *(_DWORD *)(v27 + 8);
  if (4 * v50 + 4 < 3 * v30)
  {
    if (v30 + ~v50 - *(_DWORD *)(v27 + 12) > v30 >> 3)
      goto LABEL_37;
  }
  else
  {
LABEL_64:
    v30 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v27, v30);
  v51 = *(_DWORD *)(v27 + 16) - 1;
  v52 = v51 & ((v29 >> 4) ^ (v29 >> 9));
  v33 = *(_QWORD *)v27 + 16 * v52;
  v53 = *(_QWORD *)v33;
  if (v29 == *(_QWORD *)v33)
  {
LABEL_66:
    ++*(_DWORD *)(v27 + 8);
    if (v29 == -4096)
      goto LABEL_39;
    goto LABEL_38;
  }
  v83 = 0;
  v84 = 1;
  while (v53 != -4096)
  {
    if (v83)
      v85 = 0;
    else
      v85 = v53 == -8192;
    if (v85)
      v83 = v33;
    v86 = v52 + v84++;
    v52 = v86 & v51;
    v33 = *(_QWORD *)v27 + 16 * (v86 & v51);
    v53 = *(_QWORD *)v33;
    if (v29 == *(_QWORD *)v33)
      goto LABEL_66;
  }
  if (v83)
    v33 = v83;
LABEL_37:
  v39 = *(_QWORD *)v33;
  ++*(_DWORD *)(v27 + 8);
  if (v39 != -4096)
LABEL_38:
    --*(_DWORD *)(v27 + 12);
LABEL_39:
  *(_QWORD *)v33 = v29;
  *(_DWORD *)(v33 + 8) = 0;
  v4 = v87;
LABEL_40:
  llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insert((uint64_t)v10, v26, *(unsigned int *)(v33 + 8), 0);
  v40 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v40 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    v40 = 0;
  v90 = (_QWORD *)v40;
  if (v40)
  {
    v41 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v90) + 136);
    if (v41 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      v45 = *(unsigned __int8 *)(v9 + 20);
      v42 = (_BYTE *)(v9 + 20);
      v44 = v42 - 4;
      if (v45)
      {
LABEL_50:
        *v44 = 0;
        return;
      }
    }
    else if (v41 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v46 = *(unsigned __int8 *)(v9 + 28);
      v42 = (_BYTE *)(v9 + 28);
      v44 = v42 - 4;
      if (v46)
        goto LABEL_50;
    }
    else
    {
      if (v41 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
        return;
      v43 = *(unsigned __int8 *)(v9 + 36);
      v42 = (_BYTE *)(v9 + 36);
      v44 = v42 - 4;
      if (v43)
        goto LABEL_50;
    }
    *v42 = 1;
    goto LABEL_50;
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insert(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 272))
  {
    v12 = a1;
    v13 = v15;
    v14 = 0x400000000;
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeFind(&v12, a2);
LABEL_44:
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insert((uint64_t)&v12, a2, a3, a4);
    if (v13 != v15)
      free(v13);
    return;
  }
  v7 = *(unsigned int *)(a1 + 276);
  if ((_DWORD)v7 == 16)
  {
    v12 = a1;
    v13 = v15;
    HIDWORD(v14) = 4;
    if (*(_QWORD *)(a1 + 8) >= a2)
    {
      v8 = 16;
    }
    else if (*(_QWORD *)(a1 + 24) >= a2)
    {
      v8 = 0x100000010;
    }
    else if (*(_QWORD *)(a1 + 40) >= a2)
    {
      v8 = 0x200000010;
    }
    else if (*(_QWORD *)(a1 + 56) >= a2)
    {
      v8 = 0x300000010;
    }
    else if (*(_QWORD *)(a1 + 72) >= a2)
    {
      v8 = 0x400000010;
    }
    else if (*(_QWORD *)(a1 + 88) >= a2)
    {
      v8 = 0x500000010;
    }
    else if (*(_QWORD *)(a1 + 104) >= a2)
    {
      v8 = 0x600000010;
    }
    else if (*(_QWORD *)(a1 + 120) >= a2)
    {
      v8 = 0x700000010;
    }
    else if (*(_QWORD *)(a1 + 136) >= a2)
    {
      v8 = 0x800000010;
    }
    else if (*(_QWORD *)(a1 + 152) >= a2)
    {
      v8 = 0x900000010;
    }
    else if (*(_QWORD *)(a1 + 168) >= a2)
    {
      v8 = 0xA00000010;
    }
    else if (*(_QWORD *)(a1 + 184) >= a2)
    {
      v8 = 0xB00000010;
    }
    else if (*(_QWORD *)(a1 + 200) >= a2)
    {
      v8 = 0xC00000010;
    }
    else if (*(_QWORD *)(a1 + 216) >= a2)
    {
      v8 = 0xD00000010;
    }
    else if (*(_QWORD *)(a1 + 232) >= a2)
    {
      v8 = 0xE00000010;
    }
    else if (*(_QWORD *)(a1 + 248) >= a2)
    {
      v8 = 0xF00000010;
    }
    else
    {
      v8 = 0x1000000010;
    }
    v15[0] = a1;
    v15[1] = v8;
    LODWORD(v14) = 1;
    goto LABEL_44;
  }
  v9 = 0;
  if ((_DWORD)v7)
  {
    v10 = (unint64_t *)(a1 + 8);
    while (1)
    {
      v11 = *v10;
      v10 += 2;
      if (v11 >= a2)
        break;
      if ((_DWORD)v7 == ++v9)
      {
        v9 = *(_DWORD *)(a1 + 276);
        break;
      }
    }
  }
  LODWORD(v12) = v9;
  *(_DWORD *)(a1 + 276) = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(a1, &v12, v7, a2, a3, a4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,`anonymous namespace'::ByteCodeLiveRange,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::ByteCodeLiveRange>>,mlir::Value,`anonymous namespace'::ByteCodeLiveRange,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::ByteCodeLiveRange>>::LookupBucketFor<mlir::Value>(uint64_t a1, int a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;

  if (a2)
  {
    v4 = *a3;
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v5 & 1) == 0)
    {
      v25 = a1;
      v22 = a3;
      v23 = a4;
      v24 = a2;
      v21 = *a3;
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v21;
      a3 = v22;
      a2 = v24;
      a4 = v23;
      v19 = v18;
      a1 = v25;
      if (v19)
      {
        v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v20 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v4 = v21;
        a3 = v22;
        a2 = v24;
        a1 = v25;
        a4 = v23;
      }
    }
    v7 = (v6[19] + 8 * v4) ^ HIDWORD(v4);
    v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    v9 = a2 - 1;
    v10 = (-348639895 * ((v8 >> 47) ^ v8)) & (a2 - 1);
    v11 = (_QWORD *)(a1 + 40 * v10);
    v12 = *v11;
    if (*a3 == *v11)
    {
LABEL_4:
      *a4 = v11;
      return 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v12 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16)
          v14 = v11;
        v17 = v10 + v15++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(a1 + 40 * (v17 & v9));
        v12 = *v11;
        if (*a3 == *v11)
          goto LABEL_4;
      }
      if (v14)
        v11 = v14;
      *a4 = v11;
      return 0;
    }
  }
  else
  {
    *a4 = 0;
    return 0;
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::visitNodes(uint64_t a1, void (*a2)(_QWORD *, _QWORD, uint64_t), uint64_t a3)
{
  int v3;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  _BYTE v30[32];
  void *v31;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 272);
  if (v3)
  {
    v31 = v33;
    v32 = 0x400000000;
    v28 = v30;
    v29 = 0x400000000;
    if (*(_DWORD *)(a1 + 276))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(a1 + 8 + 8 * v7);
        if (v6 >= HIDWORD(v32))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v6 + 1, 8);
          v6 = v32;
        }
        *((_QWORD *)v31 + v6) = v8;
        v6 = v32 + 1;
        LODWORD(v32) = v32 + 1;
        ++v7;
      }
      while (v7 != *(_DWORD *)(a1 + 276));
      v3 = *(_DWORD *)(a1 + 272);
    }
    v9 = (v3 - 1);
    if (v3 != 1)
    {
      v10 = (_QWORD *)(a1 + (a3 >> 1));
      if ((a3 & 1) != 0)
      {
        do
        {
          v17 = v32;
          if ((_DWORD)v32)
          {
            v18 = 0;
            do
            {
              v19 = 0;
              v20 = v29;
              v21 = 8 * (*((_QWORD *)v31 + v18) & 0x3FLL) + 8;
              do
              {
                v22 = *(_QWORD *)((*((_QWORD *)v31 + v18) & 0xFFFFFFFFFFFFFFC0) + v19);
                if (v20 >= HIDWORD(v29))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v20 + 1, 8);
                  v20 = v29;
                }
                v28[v20] = v22;
                v20 = v29 + 1;
                LODWORD(v29) = v29 + 1;
                v19 += 8;
              }
              while (v21 != v19);
              (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v10 + a2))(v10, *((_QWORD *)v31 + v18++), v9);
            }
            while (v18 != v17);
          }
          LODWORD(v32) = 0;
          llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap((uint64_t)&v31, (uint64_t)&v28);
          v9 = (v9 - 1);
        }
        while ((_DWORD)v9);
      }
      else
      {
        do
        {
          v11 = v32;
          if ((_DWORD)v32)
          {
            v12 = 0;
            do
            {
              v13 = 0;
              v14 = v29;
              v15 = 8 * (*((_QWORD *)v31 + v12) & 0x3FLL) + 8;
              do
              {
                v16 = *(_QWORD *)((*((_QWORD *)v31 + v12) & 0xFFFFFFFFFFFFFFC0) + v13);
                if (v14 >= HIDWORD(v29))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v14 + 1, 8);
                  v14 = v29;
                }
                v28[v14] = v16;
                v14 = v29 + 1;
                LODWORD(v29) = v29 + 1;
                v13 += 8;
              }
              while (v15 != v13);
              a2(v10, *((_QWORD *)v31 + v12++), v9);
            }
            while (v12 != v11);
          }
          LODWORD(v32) = 0;
          llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap((uint64_t)&v31, (uint64_t)&v28);
          v9 = (v9 - 1);
        }
        while ((_DWORD)v9);
      }
    }
    if ((_DWORD)v32)
    {
      v23 = (_QWORD *)(a1 + (a3 >> 1));
      v24 = 0;
      if ((a3 & 1) != 0)
      {
        v26 = 8 * v32;
        do
        {
          (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v23 + a2))(v23, *(_QWORD *)((char *)v31 + v24), 0);
          v24 += 8;
        }
        while (v26 != v24);
      }
      else
      {
        v25 = 8 * v32;
        do
        {
          a2(v23, *(_QWORD *)((char *)v31 + v24), 0);
          v24 += 8;
        }
        while (v25 != v24);
      }
    }
    if (v28 != (_QWORD *)v30)
      free(v28);
    if (v31 != v33)
      free(v31);
  }
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::deleteNode(uint64_t result, uint64_t a2)
{
  unint64_t *v2;

  v2 = *(unint64_t **)(result + 280);
  *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFC0) = *v2;
  *v2 = a2 & 0xFFFFFFFFFFFFFFC0;
  return result;
}

void llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a1 == a2)
    return;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 != a1 + 16 && *(_QWORD *)a2 != a2 + 16)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v4;
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v5;
    v6 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v6;
    return;
  }
  v7 = *(unsigned int *)(a2 + 8);
  if (*(_DWORD *)(a1 + 12) < v7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v7, 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a2 + 12) >= v8)
    {
LABEL_7:
      v9 = *(_DWORD *)(a2 + 8);
      if (v8 >= v9)
        v10 = v9;
      else
        v10 = v8;
      if (!(_DWORD)v10)
        goto LABEL_11;
      goto LABEL_20;
    }
  }
  else
  {
    v8 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a2 + 12) >= v8)
      goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v8, 8);
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a2 + 8);
  if (v8 >= v9)
    v10 = v9;
  else
    v10 = v8;
  if (!(_DWORD)v10)
  {
LABEL_11:
    v11 = v8;
    v12 = v9;
    v13 = v8 - v9;
    if (v8 > v9)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_20:
  v14 = 0;
  do
  {
    v15 = *(_QWORD *)a2;
    v16 = *(_QWORD *)(*(_QWORD *)a1 + v14);
    *(_QWORD *)(*(_QWORD *)a1 + v14) = *(_QWORD *)(*(_QWORD *)a2 + v14);
    *(_QWORD *)(v15 + v14) = v16;
    v14 += 8;
  }
  while (8 * v10 != v14);
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a2 + 8);
  v11 = v8;
  v12 = v9;
  v13 = v8 - v9;
  if (v8 > v9)
  {
LABEL_12:
    if ((_DWORD)v10 != (_DWORD)v8)
    {
      memcpy((void *)(*(_QWORD *)a2 + 8 * v12), (const void *)(*(_QWORD *)a1 + 8 * v10), *(_QWORD *)a1 + 8 * v11 - (*(_QWORD *)a1 + 8 * v10));
      v9 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a2 + 8) = v13 + v9;
    *(_DWORD *)(a1 + 8) = v10;
    return;
  }
LABEL_23:
  v17 = v9 - v8;
  if (v9 > v8)
  {
    if ((_DWORD)v10 != v9)
    {
      memcpy((void *)(*(_QWORD *)a1 + 8 * v11), (const void *)(*(_QWORD *)a2 + 8 * v10), *(_QWORD *)a2 + 8 * v12 - (*(_QWORD *)a2 + 8 * v10));
      LODWORD(v8) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v17 + v8;
    *(_DWORD *)(a2 + 8) = v10;
  }
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insert(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;

  v8 = *(_QWORD *)a1;
  if (!*(_DWORD *)(*(_QWORD *)a1 + 272))
  {
    v9 = a1 + 8;
    result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(_QWORD *)a1, (_DWORD *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4), *(unsigned int *)(v8 + 276), a2, a3, a4);
    if (result <= 0x10)
    {
      *(_DWORD *)(v8 + 276) = result;
      *(_DWORD *)(*(_QWORD *)v9 + 8) = result;
      return result;
    }
    v11 = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::branchRoot(v8, (unsigned int *)*(unsigned int *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4));
    llvm::IntervalMapImpl::Path::replaceRoot((unsigned int *)(a1 + 8), v8 + 8, *(_DWORD *)(v8 + 276), v11);
  }
  return llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeInsert((_DWORD *)a1, a2, a3, a4);
}

uint64_t llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v44;
  BOOL v46;
  BOOL v48;
  BOOL v50;
  BOOL v52;
  BOOL v54;
  BOOL v56;
  BOOL v58;
  BOOL v60;
  BOOL v62;
  BOOL v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  const double *v71;
  const double *v72;
  const double *v73;
  double *v74;
  double *v75;
  double *v76;
  double *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  const double *v81;
  const double *v82;
  const double *v83;
  const double *v84;
  const double *v85;
  const double *v86;
  const double *v87;
  double *v88;
  double *v89;
  double *v90;
  double *v91;
  double *v92;
  double *v93;
  double *v94;
  double *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v113;
  BOOL v115;
  BOOL v117;
  BOOL v119;
  BOOL v121;
  BOOL v123;
  BOOL v125;
  BOOL v127;
  BOOL v129;
  BOOL v131;
  BOOL v133;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  __int128 *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _OWORD *v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  __int128 *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _OWORD *v170;
  float64x2x2_t v171;
  float64x2x2_t v172;
  float64x2x2_t v173;
  float64x2x2_t v174;
  float64x2x2_t v175;
  float64x2x2_t v176;
  float64x2x2_t v177;
  float64x2x2_t v178;
  float64x2x2_t v179;
  float64x2x2_t v180;
  float64x2x2_t v181;
  float64x2x2_t v182;

  v7 = *a2;
  if (!(_DWORD)v7)
    goto LABEL_11;
  v8 = (v7 - 1);
  if (*(unsigned __int8 *)(a1 + v8 + 256) != a6
    || (v9 = a1 + 16 * v8, v11 = *(_QWORD *)(v9 + 8), v10 = (_QWORD *)(v9 + 8), v11 + 1 != a4))
  {
    if ((_DWORD)v7 == 16)
      return 17;
LABEL_11:
    v16 = a3 - v7;
    if ((_DWORD)a3 == (_DWORD)v7)
    {
      v17 = (_QWORD *)(a1 + 16 * a3);
      *v17 = a4;
      v17[1] = a5;
      *(_BYTE *)(a1 + a3 + 256) = a6;
      return (a3 + 1);
    }
    if (*(unsigned __int8 *)(a1 + v7 + 256) == a6)
    {
      v18 = (_QWORD *)(a1 + 16 * v7);
      if (a5 + 1 == *v18)
      {
        *v18 = a4;
        return a3;
      }
    }
    if ((_DWORD)a3 == 16)
      return 17;
    v19 = (unsigned __int8 *)(a1 + v7 + 256);
    v20 = (~(_DWORD)v7 + a3);
    if (v20 >= 7 && (int)v7 + 1 <= a3)
    {
      v25 = (a3 - 1);
      if (v20 <= v25)
      {
        v26 = (16 * a3) | 8;
        v27 = a1 + v26;
        v28 = 16 * v20;
        if (a1 + v26 - 16 * v20 <= (unint64_t)(a1 + v26))
        {
          v29 = 16 * a3;
          if (a1 + v29 - v28 <= (unint64_t)(a1 + v29))
          {
            v30 = (16 * (a3 - 1)) | 8;
            v31 = a1 + v30;
            if (a1 + v30 - v28 <= (unint64_t)(a1 + v30))
            {
              v32 = 16 * (a3 - 1);
              if (a1 + v32 - v28 <= (unint64_t)(a1 + v32)
                && a1 + (unint64_t)a3 + 256 - v20 <= a1 + (unint64_t)a3 + 256
                && a1 + v25 + 256 - v20 <= (unint64_t)(a1 + v25 + 256))
              {
                v33 = a1 + v29 - v28;
                v34 = a1 + v26 - v28;
                v35 = v29 + a1 + 16;
                v36 = a1 + v32 - v28;
                v37 = a1 + v30 - v28;
                v38 = v32 + a1 + 16;
                v39 = a1 + a3 + 256 - v20;
                v40 = a3 + a1 + 257;
                v41 = a1 + v25 + 256 - v20;
                v42 = v25 + a1 + 257;
                v44 = v33 < v31 && v36 < v27;
                v46 = v33 < v38 && v37 < v27;
                v48 = v33 < v40 && v39 < v27;
                v50 = v33 < v42 && v41 < v27;
                v52 = v34 < v31 && v36 < v35;
                v54 = v34 < v38 && v37 < v35;
                v56 = v34 < v40 && v39 < v35;
                v58 = v34 < v42 && v41 < v35;
                v60 = v36 < v40 && v39 < v31;
                v62 = v37 < v40 && v39 < v38;
                v64 = v39 < v42 && v41 < v40;
                v65 = v34 >= v27 || v33 >= v35;
                if (!v65 || v44)
                {
                  v19 = (unsigned __int8 *)(a1 + v7 + 256);
                }
                else
                {
                  v19 = (unsigned __int8 *)(a1 + v7 + 256);
                  if (!v46 && !v48 && !v50 && !v52 && !v54 && !v56 && !v58 && !v60 && !v62 && !v64)
                  {
                    v66 = v20 + 1;
                    if (v20 < 0xF)
                    {
                      v67 = 0;
                      goto LABEL_117;
                    }
                    v67 = v66 & 0x1FFFFFFF0;
                    v78 = v66 & 0x1FFFFFFF0;
                    v79 = a3;
                    do
                    {
                      v80 = v79 - 1;
                      v81 = (const double *)(a1 - 240 + 16 * v80);
                      v82 = v81;
                      v172 = vld2q_f64(v82);
                      v82 += 4;
                      v174 = vld2q_f64(v82);
                      v83 = v81 + 8;
                      v176 = vld2q_f64(v83);
                      v84 = v81 + 12;
                      v178 = vld2q_f64(v84);
                      v85 = v81 + 16;
                      v179 = vld2q_f64(v85);
                      v86 = v81 + 20;
                      v180 = vld2q_f64(v86);
                      v87 = v81 + 24;
                      v181 = vld2q_f64(v87);
                      v81 += 28;
                      v182 = vld2q_f64(v81);
                      v88 = (double *)(a1 - 248 + 16 * v79);
                      v89 = v88 + 1;
                      vst2q_f64(v89, v172);
                      v90 = v88 + 5;
                      vst2q_f64(v90, v174);
                      v91 = v88 + 9;
                      vst2q_f64(v91, v176);
                      v92 = v88 + 13;
                      vst2q_f64(v92, v178);
                      v93 = v88 + 17;
                      vst2q_f64(v93, v179);
                      v94 = v88 + 21;
                      vst2q_f64(v94, v180);
                      v95 = v88 + 25;
                      vst2q_f64(v95, v181);
                      v88 += 29;
                      vst2q_f64(v88, v182);
                      *(_OWORD *)(a1 + 241 + v79) = *(_OWORD *)(a1 + 241 + v80);
                      v79 -= 16;
                      v78 -= 16;
                    }
                    while (v78);
                    if (v66 == v67)
                      goto LABEL_22;
                    if ((v66 & 8) != 0)
                    {
LABEL_117:
                      v16 -= v66 & 0xFFFFFFF8;
                      v68 = a3 - v67;
                      v69 = v67 - (v66 & 0x1FFFFFFF8);
                      do
                      {
                        v70 = v68 - 1;
                        v71 = (const double *)(a1 - 112 + 16 * v70);
                        v72 = v71;
                        v171 = vld2q_f64(v72);
                        v72 += 4;
                        v173 = vld2q_f64(v72);
                        v73 = v71 + 8;
                        v175 = vld2q_f64(v73);
                        v71 += 12;
                        v177 = vld2q_f64(v71);
                        v74 = (double *)(a1 - 120 + 16 * v68);
                        v75 = v74 + 1;
                        vst2q_f64(v75, v171);
                        v76 = v74 + 5;
                        vst2q_f64(v76, v173);
                        v77 = v74 + 9;
                        vst2q_f64(v77, v175);
                        v74 += 13;
                        vst2q_f64(v74, v177);
                        *(_QWORD *)(a1 + 249 + v68) = *(_QWORD *)(a1 + 249 + v70);
                        v68 -= 8;
                        v69 += 8;
                      }
                      while (v69);
                      if (v66 == (v66 & 0x1FFFFFFF8))
                        goto LABEL_22;
                      goto LABEL_20;
                    }
                    v16 -= v67;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_20:
    v21 = v7 + v16;
    do
    {
      v22 = v21 - 1;
      *(_OWORD *)(a1 + 16 * v21) = *(_OWORD *)(a1 + 16 * v22);
      *(_BYTE *)(a1 + 256 + v21--) = *(_BYTE *)(a1 + 256 + v22);
      --v16;
    }
    while (v16);
LABEL_22:
    v23 = (_QWORD *)(a1 + 16 * v7);
    *v23 = a4;
    v23[1] = a5;
    *v19 = a6;
    return (a3 + 1);
  }
  *a2 = v8;
  if ((_DWORD)a3 != (_DWORD)v7 && *(unsigned __int8 *)(a1 + v7 + 256) == a6)
  {
    v12 = 16 * v7;
    if (a5 + 1 == *(_QWORD *)(a1 + 16 * v7))
    {
      *v10 = *(_QWORD *)(a1 + 16 * v7 + 8);
      v13 = (v7 + 1);
      if ((_DWORD)v13 == (_DWORD)a3)
        return (a3 - 1);
      v14 = ~(_DWORD)v7 + a3;
      if (v14 < 8)
      {
        v15 = v7;
        goto LABEL_243;
      }
      v96 = (a3 - 2 - v7);
      if ((int)a3 - 2 < v7)
      {
        v15 = v7;
      }
      else if ((int)a3 - 1 < v13)
      {
        v15 = v7;
      }
      else
      {
        v97 = a1 + v12;
        v98 = a1 + v12 + 8;
        v99 = 16 * (a3 - 2 - v7);
        if (v98 + v99 < v98)
        {
          v15 = v7;
        }
        else if (v97 + v99 < v97)
        {
          v15 = v7;
        }
        else
        {
          v100 = 16 * (v7 + 1);
          v101 = a1 + v100;
          v102 = a1 + v100 + 8;
          if (v102 + v99 < v102)
          {
            v15 = v7;
          }
          else if (v101 + v99 < v101)
          {
            v15 = v7;
          }
          else
          {
            v103 = v12 + v99;
            v104 = a1 + (v103 | 8);
            v105 = v103 + a1 + 16;
            v106 = v7 + a1 + 256;
            v107 = v7 + a1 + v96 + 257;
            v108 = a1 + ((v99 + v100) | 8);
            v109 = v99 + v100 + a1 + 16;
            v110 = v13 + a1 + 256;
            v111 = v13 + a1 + v96 + 257;
            v113 = v97 < v107 && v106 < v104;
            v115 = v97 < v108 && v101 < v104;
            v117 = v97 < v109 && v102 < v104;
            v119 = v97 < v111 && v110 < v104;
            v121 = v98 < v107 && v106 < v105;
            v123 = v98 < v108 && v101 < v105;
            v125 = v98 < v109 && v102 < v105;
            v127 = v98 < v111 && v110 < v105;
            v129 = v106 < v108 && v101 < v107;
            v131 = v106 < v109 && v102 < v107;
            v133 = v106 < v111 && v110 < v107;
            if (v98 < v104 && v97 < v105)
            {
              v15 = v7;
              goto LABEL_243;
            }
            if (v113)
            {
              v15 = v7;
            }
            else if (v115)
            {
              v15 = v7;
            }
            else if (v117)
            {
              v15 = v7;
            }
            else if (v119)
            {
              v15 = v7;
            }
            else if (v121)
            {
              v15 = v7;
            }
            else if (v123)
            {
              v15 = v7;
            }
            else if (v125)
            {
              v15 = v7;
            }
            else if (v127)
            {
              v15 = v7;
            }
            else if (v129)
            {
              v15 = v7;
            }
            else if (v131)
            {
              v15 = v7;
            }
            else if (v133)
            {
              v15 = v7;
            }
            else
            {
              if (v14 < 0x10)
              {
                v135 = 0;
                goto LABEL_224;
              }
              v135 = v14 & 0xFFFFFFF0;
              v136 = v7;
              v137 = v14 & 0xFFFFFFF0;
              do
              {
                v138 = v136 + 1;
                v139 = (__int128 *)(a1 + 16 * v138);
                v141 = *v139;
                v140 = v139[1];
                v143 = v139[2];
                v142 = v139[3];
                v144 = v136;
                v146 = v139[4];
                v145 = v139[5];
                v148 = v139[6];
                v147 = v139[7];
                v150 = v139[8];
                v149 = v139[9];
                v152 = v139[10];
                v151 = v139[11];
                v154 = v139[12];
                v153 = v139[13];
                v156 = v139[14];
                v155 = v139[15];
                v157 = (_OWORD *)(a1 + 16 * v136);
                v157[14] = v156;
                v157[15] = v155;
                v157[12] = v154;
                v157[13] = v153;
                v157[10] = v152;
                v157[11] = v151;
                v157[8] = v150;
                v157[9] = v149;
                v157[6] = v148;
                v157[7] = v147;
                v157[4] = v146;
                v157[5] = v145;
                v157[2] = v143;
                v157[3] = v142;
                *v157 = v141;
                v157[1] = v140;
                v136 += 16;
                *(_OWORD *)(a1 + 256 + v144) = *(_OWORD *)(a1 + 256 + v138);
                v137 -= 16;
              }
              while (v137);
              if (v14 == v135)
                return (a3 - 1);
              if ((v14 & 8) != 0)
              {
LABEL_224:
                LODWORD(v13) = v13 + (v14 & 0xFFFFFFF8);
                v15 = v7 + (v14 & 0xFFFFFFF8);
                v158 = v135 - (v14 & 0xFFFFFFF8);
                v159 = v135 + v7;
                do
                {
                  v160 = v159 + 1;
                  v161 = (__int128 *)(a1 + 16 * v160);
                  v163 = *v161;
                  v162 = v161[1];
                  v165 = v161[2];
                  v164 = v161[3];
                  v167 = v161[4];
                  v166 = v161[5];
                  v169 = v161[6];
                  v168 = v161[7];
                  v170 = (_OWORD *)(a1 + 16 * v159);
                  v170[6] = v169;
                  v170[7] = v168;
                  v170[4] = v167;
                  v170[5] = v166;
                  v170[2] = v165;
                  v170[3] = v164;
                  *v170 = v163;
                  v170[1] = v162;
                  *(_QWORD *)(a1 + 256 + v159) = *(_QWORD *)(a1 + 256 + v160);
                  v159 += 8;
                  v158 += 8;
                }
                while (v158);
                if (v14 == (v14 & 0xFFFFFFF8))
                  return (a3 - 1);
                goto LABEL_243;
              }
              v15 = v7 + v135;
              LODWORD(v13) = v13 + v135;
            }
          }
        }
      }
      do
      {
LABEL_243:
        *(_OWORD *)(a1 + 16 * v15) = *(_OWORD *)(a1 + 16 * v13);
        *(_BYTE *)(a1 + 256 + v15) = *(_BYTE *)(a1 + 256 + v13);
        LODWORD(v13) = v13 + 1;
        ++v15;
      }
      while ((_DWORD)a3 != (_DWORD)v13);
      return (a3 - 1);
    }
  }
  *v10 = a5;
  return a3;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeFind(_DWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  int v14;

  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 276);
  if ((_DWORD)v5)
  {
    v6 = 0;
    while (*(_QWORD *)(v4 + 136 + 8 * v6) < a2)
    {
      if ((_DWORD)v5 == (_DWORD)++v6)
      {
        v6 = *(unsigned int *)(*(_QWORD *)a1 + 276);
        v7 = *(_DWORD *)(v4 + 272);
        v8 = (uint64_t)(a1 + 2);
        a1[4] = 0;
        v9 = a1[5];
        if (v7)
          goto LABEL_8;
        goto LABEL_11;
      }
    }
    v12 = *(_DWORD *)(v4 + 272);
    v8 = (uint64_t)(a1 + 2);
    a1[4] = 0;
    v9 = a1[5];
    if (v12)
      goto LABEL_8;
  }
  else
  {
    v6 = 0;
    v10 = *(_DWORD *)(v4 + 272);
    v8 = (uint64_t)(a1 + 2);
    a1[4] = 0;
    v9 = a1[5];
    if (v10)
    {
LABEL_8:
      v4 += 8;
      if (v9)
      {
        v11 = 0;
        goto LABEL_13;
      }
      goto LABEL_17;
    }
  }
LABEL_11:
  if (v9)
  {
    v11 = 0;
    goto LABEL_13;
  }
LABEL_17:
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8, a1 + 6, 1uLL, 16);
  v11 = a1[4];
LABEL_13:
  v13 = (_QWORD *)(*(_QWORD *)v8 + 16 * v11);
  *v13 = v4;
  v13[1] = v5 | (v6 << 32);
  v14 = a1[4];
  a1[4] = v14 + 1;
  if (v14 != -1 && *(_DWORD *)(*(_QWORD *)v8 + 12) < *(_DWORD *)(*(_QWORD *)v8 + 8))
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind((uint64_t)a1, a2);
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;

  v4 = a1 + 8;
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 8) + 16 * (v5 - 1);
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 272);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 8 * *(unsigned int *)(v6 + 12));
  v9 = v7 - v5;
  if (v7 != v5)
  {
    do
    {
      v10 = 0;
      v11 = v8 & 0xFFFFFFFFFFFFFFC0;
      do
      {
        v12 = v10;
        v13 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFC0) + 8 * v10++ + 0x60);
      }
      while (v13 < a2);
      if (v5 >= *(_DWORD *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 24), v5 + 1, 16);
        v5 = *(_DWORD *)(a1 + 16);
      }
      v14 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 16 * v5);
      *v14 = v11;
      v14[1] = (v8 & 0x3F | ((unint64_t)v12 << 32)) + 1;
      v5 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 16) = v5;
      v8 = *(_QWORD *)(v11 + 8 * v12);
      --v9;
    }
    while (v9);
  }
  v15 = 0;
  do
  {
    v16 = v15;
    v17 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFC0) + 16 * v15++ + 8);
  }
  while (v17 < a2);
  v18 = v16;
  if (v5 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 24), v5 + 1, 16);
    v5 = *(_DWORD *)(a1 + 16);
  }
  v19 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 16 * v5);
  *v19 = v8 & 0xFFFFFFFFFFFFFFC0;
  v19[1] = (v8 & 0x3F | (v18 << 32)) + 1;
  ++*(_DWORD *)(a1 + 16);
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeInsert(_DWORD *a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  llvm::IntervalMapImpl::Path *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t LeftSibling;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t result;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  _BOOL4 v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  v9 = a1[4];
  if (!v9 || (v10 = *(_QWORD *)v8, *(_DWORD *)(*(_QWORD *)v8 + 12) >= *(_DWORD *)(*(_QWORD *)v8 + 8)))
  {
    v11 = *(unsigned int *)(*(_QWORD *)a1 + 272);
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(a1 + 2), *(_DWORD *)(*(_QWORD *)a1 + 272));
    v10 = *((_QWORD *)a1 + 1);
    ++*(_DWORD *)(v10 + 16 * v11 + 12);
    v9 = a1[4];
  }
  v12 = v10 + 16 * v9;
  if (!*(_DWORD *)(v12 - 4) && **(_QWORD **)(v12 - 16) > a2)
  {
    LeftSibling = llvm::IntervalMapImpl::Path::getLeftSibling(v8, v9 - 1);
    if (LeftSibling)
    {
      if (*(unsigned __int8 *)(LeftSibling + 176) == a4)
      {
        v14 = LeftSibling & 0xFFFFFFFFFFFFFFC0;
        v15 = LeftSibling & 0x3F;
        v16 = (unint64_t *)((LeftSibling & 0xFFFFFFFFFFFFFFC0) + 16 * v15 + 8);
        if (*(_QWORD *)((LeftSibling & 0xFFFFFFFFFFFFFFC0) + 16 * v15 + 8) + 1 == a2)
        {
          v17 = a1[4];
          v18 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v17 - 16);
          llvm::IntervalMapImpl::Path::moveLeft(v8, v17 - 1);
          if (*(_QWORD *)v18 > a3 && (*(unsigned __int8 *)(v18 + 176) != a4 || a3 + 1 != *(_QWORD *)v18))
          {
            v20 = a1[4] - 1;
            *v16 = a3;
            return llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::setNodeStop((uint64_t)a1, v20, a3);
          }
          a2 = *(_QWORD *)(v14 + 16 * v15);
          llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeErase((llvm::IntervalMapImpl::Path *)a1, 0);
        }
      }
    }
    else
    {
      **(_QWORD **)a1 = a2;
    }
  }
  v22 = (_DWORD *)(*((_QWORD *)a1 + 1) + 16 * a1[4]);
  v23 = *--v22;
  v24 = *(v22 - 1);
  v25 = v23 == v24;
  result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(_QWORD *)(v22 - 3), v22, v24, a2, a3, a4);
  if (result >= 0xC)
  {
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>((llvm::IntervalMapImpl::Path *)a1, a1[4] - 1);
    v26 = (_DWORD *)(*((_QWORD *)a1 + 1) + 16 * a1[4]);
    v27 = *--v26;
    v28 = *(v26 - 1);
    v25 = v27 == v28;
    result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(_QWORD *)(v26 - 3), v26, v28, a2, a3, a4);
  }
  v29 = a1[4];
  v30 = *((_QWORD *)a1 + 1);
  *(_DWORD *)(v30 + 16 * (v29 - 1) + 8) = result;
  if (v29 != 1)
  {
    v31 = v30 + 16 * (v29 - 2);
    *(_QWORD *)(*(_QWORD *)v31 + 8 * *(unsigned int *)(v31 + 12)) = *(_QWORD *)(*(_QWORD *)v31
                                                                                + 8 * *(unsigned int *)(v31 + 12)) & 0xFFFFFFFFFFFFFFC0 | (result - 1);
  }
  if (v25)
  {
    v32 = a1[4];
    v33 = v32 - 1;
    if (v32 != 1)
    {
      v34 = *(_QWORD *)v8;
      v35 = 16 * v33;
      while (1)
      {
        v36 = v35 - 16;
        if (v35 == 16)
          break;
        v37 = v34 + v35;
        v38 = *(_QWORD *)(v37 - 16);
        v40 = v37 - 8;
        LODWORD(v37) = *(_DWORD *)(v37 - 8);
        v39 = *(unsigned int *)(v40 + 4);
        *(_QWORD *)(v38 + 8 * v39 + 96) = a3;
        LODWORD(v38) = v37 - 1;
        v35 = v36;
        if ((_DWORD)v39 != (_DWORD)v38)
          return result;
      }
      *(_QWORD *)(*(_QWORD *)v34 + 8 * *(unsigned int *)(v34 + 12) + 128) = a3;
    }
  }
  return result;
}

unint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::branchRoot(uint64_t a1, unsigned int *a2)
{
  unint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)2, *(_DWORD *)(a1 + 276), 0xBu, 0, &v15, a2, 1);
  v4 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(_QWORD *)(a1 + 280));
  v5 = (unint64_t)v4;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v6 = v15;
  if (v15)
  {
    v7 = 0;
    do
    {
      v4[v7] = *(_OWORD *)(a1 + 16 * v7);
      *((_BYTE *)v4 + v7 + 176) = *(_BYTE *)(a1 + v7 + 256);
      ++v7;
    }
    while (v6 != v7);
    v8 = v15;
  }
  else
  {
    v8 = 0;
  }
  v9 = (unint64_t)llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(_QWORD *)(a1 + 280));
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  v10 = v16;
  if (v16)
  {
    v11 = 0;
    do
    {
      v12 = v8 + v11;
      *(_OWORD *)(v9 + 16 * v11) = *(_OWORD *)(a1 + 16 * v12);
      *(_BYTE *)(v9 + v11++ + 176) = *(_BYTE *)(a1 + v12 + 256);
    }
    while (v10 != (_DWORD)v11);
    v13 = (v16 - 1);
  }
  else
  {
    v13 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1) & 0xFFFFFFC0) + 16 * (v15 - 1) + 8);
  *(_QWORD *)(a1 + 8) = v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFC0 | v13 & 0xFFFFFFFFFFFFFFC0) + 16 * v13 + 8);
  *(_QWORD *)(a1 + 16) = v9 & 0xFFFFFFFFFFFFFFC0 | v13;
  *(_QWORD *)a1 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1) & 0xFFFFFFC0);
  *(_QWORD *)(a1 + 272) = 0x200000001;
  return v3;
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::setNodeStop(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = 16 * a2;
    while (1)
    {
      v5 = v4 - 16;
      if (v4 == 16)
        break;
      v6 = v3 + v4;
      v7 = *(_QWORD *)(v6 - 16);
      v9 = v6 - 8;
      LODWORD(v6) = *(_DWORD *)(v6 - 8);
      v8 = *(unsigned int *)(v9 + 4);
      *(_QWORD *)(v7 + 8 * v8 + 96) = a3;
      LODWORD(v7) = v6 - 1;
      v4 = v5;
      if ((_DWORD)v8 != (_DWORD)v7)
        return result;
    }
    *(_QWORD *)(*(_QWORD *)v3 + 8 * *(unsigned int *)(v3 + 12) + 128) = a3;
  }
  return result;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeErase(llvm::IntervalMapImpl::Path *this, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v44;
  BOOL v46;
  BOOL v48;
  BOOL v50;
  BOOL v52;
  BOOL v54;
  BOOL v56;
  BOOL v58;
  BOOL v60;
  BOOL v62;
  BOOL v64;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  __int128 *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  int v114;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)this;
  v7 = *((unsigned int *)this + 4);
  v8 = v4 + 16 * v7;
  v9 = *(_QWORD **)(v8 - 16);
  v10 = *(_DWORD *)(v8 - 8);
  if (v10 == 1)
  {
    v11 = *(_QWORD **)(v6 + 280);
    *v9 = *v11;
    *v11 = v9;
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::eraseNode((uint64_t *)this, *(_DWORD *)(v6 + 272));
    if (a2)
    {
      if (*(_DWORD *)(v6 + 272))
      {
        v12 = *((unsigned int *)this + 4);
        if ((_DWORD)v12)
        {
          v13 = *v5;
          if (*(_DWORD *)(*v5 + 12) < *(_DWORD *)(*v5 + 8))
          {
            v14 = (int *)(v13 + 12);
            v15 = *((unsigned int *)this + 4);
            while (1)
            {
              v16 = *v14;
              v14 += 4;
              if (v16)
                break;
              if (!--v15)
              {
                v17 = *(_QWORD **)(v13 + 16 * v12 - 16);
                goto LABEL_150;
              }
            }
          }
        }
      }
    }
    return;
  }
  v18 = *(unsigned int *)(v8 - 4);
  v19 = (v18 + 1);
  if ((_DWORD)v19 != v10)
  {
    v20 = v10 + ~(_DWORD)v18;
    if (v20 < 8)
    {
      v21 = v18;
      goto LABEL_134;
    }
    v22 = (v10 - 2 - v18);
    v23 = 2 * v18;
    v24 = (char *)&v9[2 * v18];
    v25 = (unint64_t)(v24 + 8);
    v26 = 16 * v22;
    v27 = 2 * (v18 + 1);
    v28 = (char *)&v9[v27];
    v29 = (unint64_t)&v9[v27 + 1];
    if (v10 - 2 < v18
      || v10 - 1 < v19
      || (unint64_t)&v24[v26 + 8] < v25
      || &v24[v26] < v24
      || v29 + v26 < v29
      || &v9[v27 + (unint64_t)v26 / 8] < (_QWORD *)v28)
    {
      v21 = v18;
      goto LABEL_134;
    }
    v35 = (char *)v9 + ((v23 * 8 + v26) | 8);
    v36 = (unint64_t)&v9[v23 + 2 + (unint64_t)v26 / 8];
    v37 = (unint64_t)v9 + v18 + 176;
    v38 = (unint64_t)v9 + v18 + v22 + 177;
    v39 = (char *)v9 + ((v26 + v27 * 8) | 8);
    v40 = (unint64_t)&v9[(unint64_t)v26 / 8 + 2 + v27];
    v41 = (unint64_t)v9 + v19 + 176;
    v42 = (unint64_t)v9 + v19 + v22 + 177;
    v44 = (unint64_t)v24 < v38 && v37 < (unint64_t)v35;
    v46 = v24 < v39 && v28 < v35;
    v48 = (unint64_t)v24 < v40 && v29 < (unint64_t)v35;
    v50 = (unint64_t)v24 < v42 && v41 < (unint64_t)v35;
    v52 = v25 < v38 && v37 < v36;
    v54 = v25 < (unint64_t)v39 && (unint64_t)v28 < v36;
    v56 = v25 < v40 && v29 < v36;
    v58 = v25 < v42 && v41 < v36;
    v60 = v37 < (unint64_t)v39 && (unint64_t)v28 < v38;
    v62 = v37 < v40 && v29 < v38;
    v64 = v37 < v42 && v41 < v38;
    if (v25 < (unint64_t)v35 && (unint64_t)v24 < v36)
    {
      v21 = v18;
      goto LABEL_134;
    }
    if (v44)
    {
      v21 = v18;
    }
    else if (v46)
    {
      v21 = v18;
    }
    else if (v48)
    {
      v21 = v18;
    }
    else if (v50)
    {
      v21 = v18;
    }
    else if (v52)
    {
      v21 = v18;
    }
    else if (v54)
    {
      v21 = v18;
    }
    else if (v56)
    {
      v21 = v18;
    }
    else if (v58)
    {
      v21 = v18;
    }
    else if (v60)
    {
      v21 = v18;
    }
    else if (v62)
    {
      v21 = v18;
    }
    else if (v64)
    {
      v21 = v18;
    }
    else
    {
      if (v20 < 0x10)
      {
        v66 = 0;
        goto LABEL_120;
      }
      v66 = v20 & 0xFFFFFFF0;
      v67 = v18;
      v68 = v20 & 0xFFFFFFF0;
      do
      {
        v69 = v67 + 1;
        v70 = (__int128 *)&v9[2 * v69];
        v72 = *v70;
        v71 = v70[1];
        v74 = v70[2];
        v73 = v70[3];
        v75 = v67;
        v77 = v70[4];
        v76 = v70[5];
        v79 = v70[6];
        v78 = v70[7];
        v81 = v70[8];
        v80 = v70[9];
        v83 = v70[10];
        v82 = v70[11];
        v85 = v70[12];
        v84 = v70[13];
        v87 = v70[14];
        v86 = v70[15];
        v88 = &v9[2 * v67];
        v88[14] = v87;
        v88[15] = v86;
        v88[12] = v85;
        v88[13] = v84;
        v88[10] = v83;
        v88[11] = v82;
        v88[8] = v81;
        v88[9] = v80;
        v88[6] = v79;
        v88[7] = v78;
        v88[4] = v77;
        v88[5] = v76;
        v88[2] = v74;
        v88[3] = v73;
        *v88 = v72;
        v88[1] = v71;
        v67 += 16;
        *(_OWORD *)((char *)v9 + v75 + 176) = *(_OWORD *)((char *)v9 + v69 + 176);
        v68 -= 16;
      }
      while (v68);
      if (v20 == v66)
        goto LABEL_135;
      if ((v20 & 8) != 0)
      {
LABEL_120:
        LODWORD(v19) = v19 + (v20 & 0xFFFFFFF8);
        v21 = v18 + (v20 & 0xFFFFFFF8);
        v89 = v66 - (v20 & 0xFFFFFFF8);
        v90 = v66 + v18;
        do
        {
          v91 = v90 + 1;
          v92 = (__int128 *)&v9[2 * v91];
          v94 = *v92;
          v93 = v92[1];
          v96 = v92[2];
          v95 = v92[3];
          v98 = v92[4];
          v97 = v92[5];
          v100 = v92[6];
          v99 = v92[7];
          v101 = &v9[2 * v90];
          v101[6] = v100;
          v101[7] = v99;
          v101[4] = v98;
          v101[5] = v97;
          v101[2] = v96;
          v101[3] = v95;
          *v101 = v94;
          v101[1] = v93;
          *(_QWORD *)((char *)v9 + v90 + 176) = *(_QWORD *)((char *)v9 + v91 + 176);
          v90 += 8;
          v89 += 8;
        }
        while (v89);
        if (v20 == (v20 & 0xFFFFFFF8))
          goto LABEL_135;
        goto LABEL_134;
      }
      v21 = v18 + v66;
      LODWORD(v19) = v19 + v66;
    }
    do
    {
LABEL_134:
      *(_OWORD *)&v9[2 * v21] = *(_OWORD *)&v9[2 * v19];
      *((_BYTE *)v9 + v21 + 176) = *((_BYTE *)v9 + v19 + 176);
      LODWORD(v19) = v19 + 1;
      ++v21;
    }
    while (v10 != (_DWORD)v19);
LABEL_135:
    v4 = *((_QWORD *)this + 1);
    v7 = *((unsigned int *)this + 4);
    v10 = *(_DWORD *)(v4 + 16 * v7 - 8);
  }
  v102 = *(unsigned int *)(v6 + 272);
  *(_DWORD *)(v4 + 16 * v102 + 8) = v10 - 1;
  if ((_DWORD)v102)
  {
    v103 = v4 + 16 * (v102 - 1);
    *(_QWORD *)(*(_QWORD *)v103 + 8 * *(unsigned int *)(v103 + 12)) = *(_QWORD *)(*(_QWORD *)v103
                                                                                  + 8 * *(unsigned int *)(v103 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v10 - 2);
    v4 = *((_QWORD *)this + 1);
    v7 = *((unsigned int *)this + 4);
  }
  v104 = v4 + 16 * v7;
  if (*(_DWORD *)(v104 - 4) == v10 - 1)
  {
    v105 = *(unsigned int *)(v6 + 272);
    if ((_DWORD)v105)
    {
      v106 = v9[2 * (v10 - 2) + 1];
      v107 = 16 * v105;
      while (1)
      {
        v108 = v107 - 16;
        if (v107 == 16)
          break;
        v109 = v4 + v107;
        v110 = *(_QWORD *)(v109 - 16);
        v112 = v109 - 8;
        LODWORD(v109) = *(_DWORD *)(v109 - 8);
        v111 = *(unsigned int *)(v112 + 4);
        *(_QWORD *)(v110 + 8 * v111 + 96) = v106;
        LODWORD(v110) = v109 - 1;
        v107 = v108;
        if ((_DWORD)v111 != (_DWORD)v110)
          goto LABEL_153;
      }
      *(_QWORD *)(*(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 12) + 128) = v106;
    }
LABEL_153:
    llvm::IntervalMapImpl::Path::moveRight(v5, v105);
  }
  else if (a2)
  {
    if ((_DWORD)v7)
    {
      v113 = (int *)(v4 + 12);
      while (1)
      {
        v114 = *v113;
        v113 += 4;
        if (v114)
          break;
        if (!--v7)
          goto LABEL_149;
      }
    }
    else
    {
LABEL_149:
      v17 = *(_QWORD **)(v104 - 16);
LABEL_150:
      *(_QWORD *)v6 = *v17;
    }
  }
}

uint64_t llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  const double *v71;
  const double *v72;
  const double *v73;
  double *v74;
  double *v75;
  double *v76;
  double *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  const double *v81;
  const double *v82;
  const double *v83;
  const double *v84;
  const double *v85;
  const double *v86;
  const double *v87;
  double *v88;
  double *v89;
  double *v90;
  double *v91;
  double *v92;
  double *v93;
  double *v94;
  double *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v113;
  BOOL v115;
  BOOL v117;
  BOOL v119;
  BOOL v121;
  BOOL v123;
  BOOL v125;
  BOOL v127;
  BOOL v129;
  BOOL v131;
  BOOL v133;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  __int128 *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _OWORD *v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  __int128 *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _OWORD *v170;
  BOOL v171;
  float64x2x2_t v172;
  float64x2x2_t v173;
  float64x2x2_t v174;
  float64x2x2_t v175;
  float64x2x2_t v176;
  float64x2x2_t v177;
  float64x2x2_t v178;
  float64x2x2_t v179;
  float64x2x2_t v180;
  float64x2x2_t v181;
  float64x2x2_t v182;
  float64x2x2_t v183;

  v7 = *a2;
  if (!(_DWORD)v7)
    goto LABEL_11;
  v8 = (v7 - 1);
  if (*(unsigned __int8 *)(a1 + v8 + 176) != a6
    || (v9 = a1 + 16 * v8, v11 = *(_QWORD *)(v9 + 8), v10 = (_QWORD *)(v9 + 8), v11 + 1 != a4))
  {
    if ((_DWORD)v7 == 11)
      return 12;
LABEL_11:
    v16 = a3 - v7;
    if ((_DWORD)a3 == (_DWORD)v7)
    {
      v17 = (_QWORD *)(a1 + 16 * a3);
      *v17 = a4;
      v17[1] = a5;
      *(_BYTE *)(a1 + a3 + 176) = a6;
      return (a3 + 1);
    }
    v18 = (unsigned __int8 *)(a1 + v7 + 176);
    if (*v18 == a6)
    {
      v19 = (_QWORD *)(a1 + 16 * v7);
      if (a5 + 1 == *v19)
      {
        *v19 = a4;
        return a3;
      }
    }
    if ((_DWORD)a3 == 11)
      return 12;
    v20 = (~(_DWORD)v7 + a3);
    if (v20 >= 7 && (int)v7 + 1 <= a3)
    {
      v25 = (a3 - 1);
      if (v20 <= v25)
      {
        v26 = (16 * a3) | 8;
        v27 = a1 + v26;
        v28 = 16 * v20;
        if (a1 + v26 - 16 * v20 <= (unint64_t)(a1 + v26))
        {
          v29 = 16 * a3;
          if (a1 + v29 - v28 <= (unint64_t)(a1 + v29))
          {
            v30 = (16 * (a3 - 1)) | 8;
            v31 = a1 + v30;
            if (a1 + v30 - v28 <= (unint64_t)(a1 + v30))
            {
              v32 = 16 * (a3 - 1);
              if (a1 + v32 - v28 <= (unint64_t)(a1 + v32)
                && a1 + (unint64_t)a3 + 176 - v20 <= a1 + (unint64_t)a3 + 176
                && a1 + v25 + 176 - v20 <= (unint64_t)(a1 + v25 + 176))
              {
                v33 = a1 + v29 - v28;
                v34 = a1 + v26 - v28;
                v35 = v29 + a1 + 16;
                v36 = a1 + v32 - v28;
                v37 = a1 + v30 - v28;
                v38 = v32 + a1 + 16;
                v39 = a1 + a3 + 176 - v20;
                v40 = a3 + a1 + 177;
                v41 = a1 + v25 + 176 - v20;
                v42 = v25 + a1 + 177;
                v43 = v33 >= v31 || v36 >= v27;
                v44 = !v43;
                v171 = v44;
                v45 = v33 >= v38 || v37 >= v27;
                v46 = !v45;
                v47 = v33 >= v40 || v39 >= v27;
                v48 = !v47;
                v49 = v33 >= v42 || v41 >= v27;
                v50 = !v49;
                v51 = v34 >= v31 || v36 >= v35;
                v52 = !v51;
                v53 = v34 >= v38 || v37 >= v35;
                v54 = !v53;
                v55 = v34 >= v40 || v39 >= v35;
                v56 = !v55;
                v57 = v34 >= v42 || v41 >= v35;
                v58 = !v57;
                v59 = v36 >= v40 || v39 >= v31;
                v60 = !v59;
                v61 = v37 >= v40 || v39 >= v38;
                v62 = !v61;
                v63 = v39 >= v42 || v41 >= v40;
                v64 = !v63;
                v65 = v34 >= v27 || v33 >= v35;
                if (v65 && !v171 && !v46 && !v48 && !v50 && !v52 && !v54 && !v56 && !v58 && !v60 && !v62 && !v64)
                {
                  v66 = v20 + 1;
                  if (v20 < 0xF)
                  {
                    v67 = 0;
                    goto LABEL_117;
                  }
                  v67 = v66 & 0x1FFFFFFF0;
                  v78 = v66 & 0x1FFFFFFF0;
                  v79 = a3;
                  do
                  {
                    v80 = v79 - 1;
                    v81 = (const double *)(a1 - 240 + 16 * v80);
                    v82 = v81;
                    v173 = vld2q_f64(v82);
                    v82 += 4;
                    v175 = vld2q_f64(v82);
                    v83 = v81 + 8;
                    v177 = vld2q_f64(v83);
                    v84 = v81 + 12;
                    v179 = vld2q_f64(v84);
                    v85 = v81 + 16;
                    v180 = vld2q_f64(v85);
                    v86 = v81 + 20;
                    v181 = vld2q_f64(v86);
                    v87 = v81 + 24;
                    v182 = vld2q_f64(v87);
                    v81 += 28;
                    v183 = vld2q_f64(v81);
                    v88 = (double *)(a1 - 248 + 16 * v79);
                    v89 = v88 + 1;
                    vst2q_f64(v89, v173);
                    v90 = v88 + 5;
                    vst2q_f64(v90, v175);
                    v91 = v88 + 9;
                    vst2q_f64(v91, v177);
                    v92 = v88 + 13;
                    vst2q_f64(v92, v179);
                    v93 = v88 + 17;
                    vst2q_f64(v93, v180);
                    v94 = v88 + 21;
                    vst2q_f64(v94, v181);
                    v95 = v88 + 25;
                    vst2q_f64(v95, v182);
                    v88 += 29;
                    vst2q_f64(v88, v183);
                    *(_OWORD *)(a1 + 161 + v79) = *(_OWORD *)(a1 + 161 + v80);
                    v79 -= 16;
                    v78 -= 16;
                  }
                  while (v78);
                  if (v66 == v67)
                    goto LABEL_22;
                  if ((v66 & 8) != 0)
                  {
LABEL_117:
                    v16 -= v66 & 0xFFFFFFF8;
                    v68 = a3 - v67;
                    v69 = v67 - (v66 & 0x1FFFFFFF8);
                    do
                    {
                      v70 = v68 - 1;
                      v71 = (const double *)(a1 - 112 + 16 * v70);
                      v72 = v71;
                      v172 = vld2q_f64(v72);
                      v72 += 4;
                      v174 = vld2q_f64(v72);
                      v73 = v71 + 8;
                      v176 = vld2q_f64(v73);
                      v71 += 12;
                      v178 = vld2q_f64(v71);
                      v74 = (double *)(a1 - 120 + 16 * v68);
                      v75 = v74 + 1;
                      vst2q_f64(v75, v172);
                      v76 = v74 + 5;
                      vst2q_f64(v76, v174);
                      v77 = v74 + 9;
                      vst2q_f64(v77, v176);
                      v74 += 13;
                      vst2q_f64(v74, v178);
                      *(_QWORD *)(a1 + 169 + v68) = *(_QWORD *)(a1 + 169 + v70);
                      v68 -= 8;
                      v69 += 8;
                    }
                    while (v69);
                    if (v66 == (v66 & 0x1FFFFFFF8))
                      goto LABEL_22;
                    goto LABEL_20;
                  }
                  v16 -= v67;
                }
              }
            }
          }
        }
      }
    }
LABEL_20:
    v21 = v7 + v16;
    do
    {
      v22 = v21 - 1;
      *(_OWORD *)(a1 + 16 * v21) = *(_OWORD *)(a1 + 16 * v22);
      *(_BYTE *)(a1 + 176 + v21--) = *(_BYTE *)(a1 + 176 + v22);
      --v16;
    }
    while (v16);
LABEL_22:
    v23 = (_QWORD *)(a1 + 16 * v7);
    *v23 = a4;
    v23[1] = a5;
    *v18 = a6;
    return (a3 + 1);
  }
  *a2 = v8;
  if ((_DWORD)a3 != (_DWORD)v7 && *(unsigned __int8 *)(a1 + v7 + 176) == a6)
  {
    v12 = 16 * v7;
    if (a5 + 1 == *(_QWORD *)(a1 + 16 * v7))
    {
      *v10 = *(_QWORD *)(a1 + 16 * v7 + 8);
      v13 = (v7 + 1);
      if ((_DWORD)v13 == (_DWORD)a3)
        return (a3 - 1);
      v14 = ~(_DWORD)v7 + a3;
      if (v14 < 8)
      {
        v15 = v7;
        goto LABEL_242;
      }
      v96 = (a3 - 2 - v7);
      if ((int)a3 - 2 < v7)
      {
        v15 = v7;
      }
      else if ((int)a3 - 1 < v13)
      {
        v15 = v7;
      }
      else
      {
        v97 = a1 + v12;
        v98 = a1 + v12 + 8;
        v99 = 16 * (a3 - 2 - v7);
        if (v98 + v99 < v98)
        {
          v15 = v7;
        }
        else if (v97 + v99 < v97)
        {
          v15 = v7;
        }
        else
        {
          v100 = 16 * (v7 + 1);
          v101 = a1 + v100;
          v102 = a1 + v100 + 8;
          if (v102 + v99 < v102)
          {
            v15 = v7;
          }
          else if (v101 + v99 < v101)
          {
            v15 = v7;
          }
          else
          {
            v103 = v12 + v99;
            v104 = a1 + (v103 | 8);
            v105 = v103 + a1 + 16;
            v106 = v7 + a1 + 176;
            v107 = v7 + a1 + v96 + 177;
            v108 = a1 + ((v99 + v100) | 8);
            v109 = v99 + v100 + a1 + 16;
            v110 = v13 + a1 + 176;
            v111 = v13 + a1 + v96 + 177;
            v113 = v97 < v107 && v106 < v104;
            v115 = v97 < v108 && v101 < v104;
            v117 = v97 < v109 && v102 < v104;
            v119 = v97 < v111 && v110 < v104;
            v121 = v98 < v107 && v106 < v105;
            v123 = v98 < v108 && v101 < v105;
            v125 = v98 < v109 && v102 < v105;
            v127 = v98 < v111 && v110 < v105;
            v129 = v106 < v108 && v101 < v107;
            v131 = v106 < v109 && v102 < v107;
            v133 = v106 < v111 && v110 < v107;
            if (v98 < v104 && v97 < v105)
            {
              v15 = v7;
              goto LABEL_242;
            }
            if (v113)
            {
              v15 = v7;
            }
            else if (v115)
            {
              v15 = v7;
            }
            else if (v117)
            {
              v15 = v7;
            }
            else if (v119)
            {
              v15 = v7;
            }
            else if (v121)
            {
              v15 = v7;
            }
            else if (v123)
            {
              v15 = v7;
            }
            else if (v125)
            {
              v15 = v7;
            }
            else if (v127)
            {
              v15 = v7;
            }
            else if (v129)
            {
              v15 = v7;
            }
            else if (v131)
            {
              v15 = v7;
            }
            else if (v133)
            {
              v15 = v7;
            }
            else
            {
              if (v14 < 0x10)
              {
                v135 = 0;
                goto LABEL_224;
              }
              v135 = v14 & 0xFFFFFFF0;
              v136 = v7;
              v137 = v14 & 0xFFFFFFF0;
              do
              {
                v138 = v136 + 1;
                v139 = (__int128 *)(a1 + 16 * v138);
                v141 = *v139;
                v140 = v139[1];
                v143 = v139[2];
                v142 = v139[3];
                v144 = v136;
                v146 = v139[4];
                v145 = v139[5];
                v148 = v139[6];
                v147 = v139[7];
                v150 = v139[8];
                v149 = v139[9];
                v152 = v139[10];
                v151 = v139[11];
                v154 = v139[12];
                v153 = v139[13];
                v156 = v139[14];
                v155 = v139[15];
                v157 = (_OWORD *)(a1 + 16 * v136);
                v157[14] = v156;
                v157[15] = v155;
                v157[12] = v154;
                v157[13] = v153;
                v157[10] = v152;
                v157[11] = v151;
                v157[8] = v150;
                v157[9] = v149;
                v157[6] = v148;
                v157[7] = v147;
                v157[4] = v146;
                v157[5] = v145;
                v157[2] = v143;
                v157[3] = v142;
                *v157 = v141;
                v157[1] = v140;
                v136 += 16;
                *(_OWORD *)(a1 + 176 + v144) = *(_OWORD *)(a1 + 176 + v138);
                v137 -= 16;
              }
              while (v137);
              if (v14 == v135)
                return (a3 - 1);
              if ((v14 & 8) != 0)
              {
LABEL_224:
                LODWORD(v13) = v13 + (v14 & 0xFFFFFFF8);
                v15 = v7 + (v14 & 0xFFFFFFF8);
                v158 = v135 - (v14 & 0xFFFFFFF8);
                v159 = v135 + v7;
                do
                {
                  v160 = v159 + 1;
                  v161 = (__int128 *)(a1 + 16 * v160);
                  v163 = *v161;
                  v162 = v161[1];
                  v165 = v161[2];
                  v164 = v161[3];
                  v167 = v161[4];
                  v166 = v161[5];
                  v169 = v161[6];
                  v168 = v161[7];
                  v170 = (_OWORD *)(a1 + 16 * v159);
                  v170[6] = v169;
                  v170[7] = v168;
                  v170[4] = v167;
                  v170[5] = v166;
                  v170[2] = v165;
                  v170[3] = v164;
                  *v170 = v163;
                  v170[1] = v162;
                  *(_QWORD *)(a1 + 176 + v159) = *(_QWORD *)(a1 + 176 + v160);
                  v159 += 8;
                  v158 += 8;
                }
                while (v158);
                if (v14 == (v14 & 0xFFFFFFF8))
                  return (a3 - 1);
                goto LABEL_242;
              }
              v15 = v7 + v135;
              LODWORD(v13) = v13 + v135;
            }
          }
        }
      }
      do
      {
LABEL_242:
        *(_OWORD *)(a1 + 16 * v15) = *(_OWORD *)(a1 + 16 * v13);
        *(_BYTE *)(a1 + 176 + v15) = *(_BYTE *)(a1 + 176 + v13);
        LODWORD(v13) = v13 + 1;
        ++v15;
      }
      while ((_DWORD)a3 != (_DWORD)v13);
      return (a3 - 1);
    }
  }
  *v10 = a5;
  return a3;
}

uint64_t *llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(llvm::IntervalMapImpl::Path *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  llvm::IntervalMapImpl::Path *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t LeftSibling;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t RightSibling;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *inserted;
  int v32;
  uint64_t *result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  __int128 v67;
  __int128 v68;
  _DWORD v69[4];
  uint64_t v70;

  v2 = a2;
  v70 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IntervalMapImpl::Path *)((char *)this + 8);
  v3 = *((_QWORD *)this + 1);
  v67 = 0u;
  v68 = 0u;
  v5 = a2;
  v6 = *(unsigned int *)(v3 + 16 * a2 + 12);
  LeftSibling = llvm::IntervalMapImpl::Path::getLeftSibling((llvm::IntervalMapImpl::Path *)((char *)this + 8), a2);
  v8 = LeftSibling;
  if (LeftSibling)
  {
    v9 = (LeftSibling & 0x3F) + 1;
    v69[0] = v9;
    v6 = (v9 + v6);
    *(_QWORD *)&v67 = LeftSibling & 0xFFFFFFFFFFFFFFC0;
    v10 = 1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = *(_QWORD *)v4 + 16 * v5;
  v12 = *(_DWORD *)(v11 + 8);
  v69[v10] = v12;
  v13 = v12 + v9;
  v14 = v10 + 1;
  *(_QWORD *)((unint64_t)&v67 | (8 * v10)) = *(_QWORD *)v11;
  RightSibling = llvm::IntervalMapImpl::Path::getRightSibling(v4, v2);
  if (RightSibling)
  {
    v16 = (RightSibling & 0x3F) + 1;
    v69[v14] = v16;
    v13 += v16;
    *((_QWORD *)&v67 + v14) = RightSibling & 0xFFFFFFFFFFFFFFC0;
    v14 = v10 | 2;
  }
  if (v13 + 1 <= (11 * v14))
  {
    v17 = 0;
  }
  else
  {
    if ((_DWORD)v14 == 1)
      v17 = 1;
    else
      v17 = v14 - 1;
    v18 = v17;
    v69[v14] = v69[v18];
    v19 = 8 * v17;
    *((_QWORD *)&v67 + v14) = *(_QWORD *)((char *)&v67 + v19);
    v69[v18] = 0;
    v20 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(_QWORD *)(*(_QWORD *)this + 280));
    *v20 = 0u;
    v20[1] = 0u;
    v20[2] = 0u;
    v20[3] = 0u;
    v20[4] = 0u;
    v20[5] = 0u;
    v20[6] = 0u;
    v20[7] = 0u;
    v20[8] = 0u;
    v20[9] = 0u;
    v14 = (v14 + 1);
    v20[10] = 0u;
    v20[11] = 0u;
    *(_QWORD *)((char *)&v67 + v19) = v20;
  }
  v21 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v14, v13, 0xBu, v69, &v63, (unsigned int *)v6, 1);
  llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>((uint64_t)&v67, v14, (uint64_t)v69, (uint64_t)&v63);
  if (v8)
    llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
  v22 = v63 - 1;
  v23 = *(_QWORD *)(v67 + 16 * v22 + 8);
  v24 = *(_QWORD *)v4;
  *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 8) = v63;
  if (!v2)
  {
LABEL_18:
    if ((_DWORD)v14 != 1)
      goto LABEL_24;
LABEL_19:
    inserted = 0;
    v32 = v21;
    if ((_DWORD)v21)
      goto LABEL_20;
    goto LABEL_22;
  }
  *(_QWORD *)(*(_QWORD *)(v24 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v24 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v22;
  v25 = *(_QWORD *)v4;
  v26 = 16 * v5;
  while (1)
  {
    v27 = v26 - 16;
    if (v26 == 16)
      break;
    v28 = v25 + v26;
    v29 = *(unsigned int *)(v28 - 4);
    *(_QWORD *)(*(_QWORD *)(v28 - 16) + 8 * v29 + 96) = v23;
    v30 = *(_DWORD *)(v28 - 8) - 1;
    v26 = v27;
    if ((_DWORD)v29 != v30)
      goto LABEL_18;
  }
  *(_QWORD *)(*(_QWORD *)v25 + 8 * *(unsigned int *)(v25 + 12) + 128) = v23;
  if ((_DWORD)v14 == 1)
    goto LABEL_19;
LABEL_24:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  v35 = (v64 - 1);
  v36 = *(_QWORD *)(*((_QWORD *)&v67 + 1) + 16 * v35 + 8);
  if (v17 != 1)
  {
    v37 = *(_QWORD *)v4;
    *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 8) = v64;
    if (v2)
    {
      *(_QWORD *)(*(_QWORD *)(v37 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v37 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v35;
      v38 = *(_QWORD *)v4;
      v39 = 16 * v2;
      while (1)
      {
        v40 = v39 - 16;
        if (v39 == 16)
          break;
        v41 = v38 + v39;
        v42 = *(unsigned int *)(v41 - 4);
        *(_QWORD *)(*(_QWORD *)(v41 - 16) + 8 * v42 + 96) = v36;
        v43 = *(_DWORD *)(v41 - 8) - 1;
        v39 = v40;
        if ((_DWORD)v42 != v43)
          goto LABEL_32;
      }
      inserted = 0;
      *(_QWORD *)(*(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 12) + 128) = v36;
      if ((_DWORD)v14 != 2)
        goto LABEL_33;
    }
    else
    {
LABEL_32:
      inserted = 0;
      if ((_DWORD)v14 != 2)
        goto LABEL_33;
    }
LABEL_26:
    v32 = v21 - 1;
    if ((_DWORD)v21 == 1)
      goto LABEL_22;
    do
LABEL_20:
      llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
    while (!__CFADD__(v32++, 1));
    goto LABEL_22;
  }
  inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode((uint64_t)this, v2, *((_QWORD *)&v67 + 1) & 0xFFFFFFFFFFFFFFC0 | v35, v36);
  v2 += inserted;
  if ((_DWORD)v14 == 2)
    goto LABEL_26;
LABEL_33:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  v44 = (v65 - 1);
  v45 = *(_QWORD *)(v68 + 16 * v44 + 8);
  if (v17 == 2)
  {
    inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode((uint64_t)this, v2, v68 & 0xFFFFFFFFFFFFFFC0 | v44, v45);
    v2 += inserted;
    if ((_DWORD)v14 != 3)
      goto LABEL_35;
    goto LABEL_42;
  }
  v48 = *(_QWORD *)v4;
  *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 8) = v65;
  if (!v2)
  {
LABEL_41:
    if ((_DWORD)v14 != 3)
      goto LABEL_35;
LABEL_42:
    v32 = v21 - 2;
    if ((_DWORD)v21 != 2)
      goto LABEL_20;
LABEL_22:
    *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 12) = HIDWORD(v21);
    return inserted;
  }
  *(_QWORD *)(*(_QWORD *)(v48 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v48 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v44;
  v49 = *(_QWORD *)v4;
  v50 = 16 * v2;
  while (1)
  {
    v51 = v50 - 16;
    if (v50 == 16)
      break;
    v52 = v49 + v50;
    v53 = *(unsigned int *)(v52 - 4);
    *(_QWORD *)(*(_QWORD *)(v52 - 16) + 8 * v53 + 96) = v45;
    v54 = *(_DWORD *)(v52 - 8) - 1;
    v50 = v51;
    if ((_DWORD)v53 != v54)
      goto LABEL_41;
  }
  *(_QWORD *)(*(_QWORD *)v49 + 8 * *(unsigned int *)(v49 + 12) + 128) = v45;
  if ((_DWORD)v14 == 3)
    goto LABEL_42;
LABEL_35:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  v46 = (v66 - 1);
  v47 = *(_QWORD *)(*((_QWORD *)&v68 + 1) + 16 * v46 + 8);
  if (v17 == 3)
  {
    inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode((uint64_t)this, v2, *((_QWORD *)&v68 + 1) & 0xFFFFFFFFFFFFFFC0 | v46, v47);
    v2 += inserted;
  }
  else
  {
    v55 = *(_QWORD *)v4;
    *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 8) = v66;
    if (v2)
    {
      *(_QWORD *)(*(_QWORD *)(v55 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v55 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v46;
      v56 = *(_QWORD *)v4;
      v57 = 16 * v2;
      while (1)
      {
        v58 = v57 - 16;
        if (v57 == 16)
          break;
        v59 = v56 + v57;
        v60 = *(unsigned int *)(v59 - 4);
        *(_QWORD *)(*(_QWORD *)(v59 - 16) + 8 * v60 + 96) = v47;
        v61 = *(_DWORD *)(v59 - 8) - 1;
        v57 = v58;
        if ((_DWORD)v60 != v61)
          goto LABEL_54;
      }
      *(_QWORD *)(*(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 12) + 128) = v47;
    }
  }
LABEL_54:
  if ((_DWORD)v14 == 4)
  {
    v32 = v21 - 3;
    if ((_DWORD)v21 == 3)
      goto LABEL_22;
    goto LABEL_20;
  }
  result = llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  __break(1u);
  return result;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::eraseNode(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  _DWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v4 = *a1;
  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a2 - 1;
  if (a2 != 1)
  {
    v8 = v5 + 16 * v7;
    v9 = *(_QWORD **)v8;
    v10 = *(_DWORD *)(v8 + 8);
    if (v10 == 1)
    {
      v11 = *(_QWORD **)(v4 + 280);
      *v9 = *v11;
      *v11 = v9;
      llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::eraseNode(a1, a2 - 1);
      goto LABEL_69;
    }
    v18 = *(unsigned int *)(v5 + 16 * v7 + 12);
    v19 = v18 + 1;
    if ((_DWORD)v18 + 1 == v10)
    {
LABEL_62:
      v64 = v10 - 1;
      *(_DWORD *)(v5 + 16 * v7 + 8) = v10 - 1;
      v65 = (v10 - 2);
      *(_QWORD *)(*(_QWORD *)(v5 + 16 * (a2 - 2)) + 8 * *(unsigned int *)(v5 + 16 * (a2 - 2) + 12)) = *(_QWORD *)(*(_QWORD *)(v5 + 16 * (a2 - 2)) + 8 * *(unsigned int *)(v5 + 16 * (a2 - 2) + 12)) & 0xFFFFFFFFFFFFFFC0 | v65;
      v66 = *v6;
      if (*(_DWORD *)(*v6 + 16 * v7 + 12) == v64)
      {
        v67 = v9[v65 + 12];
        v68 = (_DWORD *)(v66 + 16 * v7 - 8);
        v69 = a2 - 1;
        while (--v69)
        {
          v70 = *((_QWORD *)v68 - 1);
          v72 = *v68;
          v71 = v68[1];
          v68 -= 4;
          *(_QWORD *)(v70 + 8 * v71 + 96) = v67;
          if ((_DWORD)v71 != v72 - 1)
            goto LABEL_68;
        }
        *(_QWORD *)(*(_QWORD *)v66 + 8 * *(unsigned int *)(v66 + 12) + 128) = v67;
LABEL_68:
        llvm::IntervalMapImpl::Path::moveRight(v6, a2 - 1);
      }
      goto LABEL_69;
    }
    v20 = v10 + ~(_DWORD)v18;
    if (v20 >= 0x16)
    {
      if (v10 - 2 >= v18 && v10 - 1 >= v19)
      {
        v35 = (char *)&v9[v18];
        v36 = v35 + 96;
        v37 = (char *)&v9[v19];
        v38 = v35 - v37;
        v39 = v37 + 96;
        v40 = v37 + 96 - v35;
        v41 = v36 - v37;
        v42 = v36 - v39;
        if (v38 >= 0x10 && v40 >= 0x10 && v41 >= 0x10 && v42 >= 0x10)
        {
          v19 += v20 & 0xFFFFFFFE;
          v21 = v18 + (v20 & 0xFFFFFFFE);
          v59 = v20 & 0xFFFFFFFE;
          do
          {
            v60 = (v18 + 1);
            v61 = v18;
            *(_OWORD *)&v9[v61] = *(_OWORD *)&v9[v60];
            *(_OWORD *)&v9[v61 + 12] = *(_OWORD *)&v9[v60 + 12];
            LODWORD(v18) = v18 + 2;
            v59 -= 2;
          }
          while (v59);
          if (v20 == (v20 & 0xFFFFFFFE))
            goto LABEL_61;
        }
        else
        {
          v21 = v18;
        }
      }
      else
      {
        v21 = *(_DWORD *)(v5 + 16 * v7 + 12);
      }
    }
    else
    {
      v21 = *(_DWORD *)(v5 + 16 * v7 + 12);
    }
    do
    {
      v62 = v19;
      v63 = v21;
      v9[v63] = v9[v62];
      v9[v63 + 12] = v9[v62 + 12];
      ++v19;
      ++v21;
    }
    while (v10 != v19);
LABEL_61:
    v5 = *v6;
    v10 = *(_DWORD *)(*v6 + 16 * v7 + 8);
    goto LABEL_62;
  }
  v12 = *(unsigned int *)(v5 + 12);
  v13 = *(_DWORD *)(v4 + 276);
  v14 = v12 + 1;
  if ((_DWORD)v12 + 1 != v13)
  {
    v15 = v4 + 8;
    v16 = v13 + ~(_DWORD)v12;
    if (v16 >= 0x18)
    {
      if (v13 - 2 >= v12 && v13 - 1 >= v14)
      {
        v24 = v4 + 8 * v12;
        v25 = v24 + 136;
        v24 += 8;
        v26 = v4 + 8 * v14;
        v27 = v26 + 8;
        v28 = v24 - (v26 + 8);
        v26 += 136;
        v29 = v26 - v24;
        v30 = v25 - v27;
        v31 = v25 - v26;
        if (v28 >= 0x10 && v29 >= 0x10 && v30 >= 0x10 && v31 >= 0x10)
        {
          v14 += v16 & 0xFFFFFFFE;
          v17 = v12 + (v16 & 0xFFFFFFFE);
          v46 = v16 & 0xFFFFFFFE;
          do
          {
            v47 = 8 * (v12 + 1);
            v48 = 8 * v12;
            *(_OWORD *)(v15 + v48) = *(_OWORD *)(v15 + v47);
            *(_OWORD *)(v4 + 136 + v48) = *(_OWORD *)(v4 + 136 + v47);
            LODWORD(v12) = v12 + 2;
            v46 -= 2;
          }
          while (v46);
          if (v16 == (v16 & 0xFFFFFFFE))
            goto LABEL_46;
        }
        else
        {
          v17 = v12;
        }
      }
      else
      {
        v17 = v12;
      }
    }
    else
    {
      v17 = v12;
    }
    do
    {
      v49 = 8 * v14;
      v50 = 8 * v17;
      *(_QWORD *)(v15 + v50) = *(_QWORD *)(v15 + v49);
      *(_QWORD *)(v4 + 136 + v50) = *(_QWORD *)(v4 + 136 + v49);
      ++v14;
      ++v17;
    }
    while (v13 != v14);
LABEL_46:
    v13 = *(_DWORD *)(v4 + 276);
    v5 = *v6;
  }
  v51 = v13 - 1;
  *(_DWORD *)(v4 + 276) = v51;
  *(_DWORD *)(v5 + 8) = v51;
  if (v51)
  {
LABEL_69:
    if (*((_DWORD *)a1 + 4))
    {
      v73 = *v6;
      if (*(_DWORD *)(*v6 + 12) < *(_DWORD *)(*v6 + 8))
      {
        v74 = *(_QWORD *)(*(_QWORD *)(v73 + 16 * v7)
                        + 8 * *(unsigned int *)(v73 + 16 * v7 + 12));
        v75 = 16 * a2;
        v76 = v73 + v75;
        *(_QWORD *)v76 = v74 & 0xFFFFFFFFFFFFFFC0;
        *(_DWORD *)(v76 + 8) = (v74 & 0x3F) + 1;
        *(_DWORD *)(*v6 + v75 + 12) = 0;
      }
    }
    return;
  }
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)v4 = 0u;
  v52 = *a1;
  if (*(_DWORD *)(*a1 + 272))
  {
    v53 = v52 + 8;
    v54 = *(_DWORD *)(v52 + 276);
    *((_DWORD *)a1 + 4) = 0;
    v55 = a1 + 2;
    if (*((_DWORD *)a1 + 5))
    {
      v56 = 0;
    }
    else
    {
      v77 = v52 + 8;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, a1 + 3, 1uLL, 16);
      v53 = v77;
      v56 = *((unsigned int *)a1 + 4);
    }
    v57 = (_QWORD *)(*v6 + 16 * v56);
    *v57 = v53;
  }
  else
  {
    v54 = *(_DWORD *)(v52 + 276);
    *((_DWORD *)a1 + 4) = 0;
    v55 = a1 + 2;
    if (*((_DWORD *)a1 + 5))
    {
      v58 = 0;
    }
    else
    {
      v78 = v52;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, a1 + 3, 1uLL, 16);
      v52 = v78;
      v58 = *((unsigned int *)a1 + 4);
    }
    v57 = (_QWORD *)(*v6 + 16 * v58);
    *v57 = v52;
  }
  v57[1] = v54;
  ++*v55;
}

uint64_t llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  BOOL v44;
  char v45;
  BOOL v47;
  BOOL v49;
  BOOL v51;
  BOOL v53;
  BOOL v55;
  BOOL v57;
  BOOL v59;
  BOOL v61;
  BOOL v63;
  BOOL v65;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v93;
  BOOL v95;
  BOOL v97;
  BOOL v99;
  BOOL v101;
  BOOL v103;
  BOOL v105;
  BOOL v107;
  BOOL v109;
  BOOL v111;
  BOOL v113;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unsigned int v120;
  __int128 *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const double *v132;
  const double *v133;
  const double *v134;
  const double *v135;
  const double *v136;
  const double *v137;
  const double *v138;
  uint64_t v139;
  double *v140;
  double *v141;
  double *v142;
  double *v143;
  double *v144;
  double *v145;
  double *v146;
  double *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  const double *v151;
  const double *v152;
  const double *v153;
  double *v154;
  double *v155;
  double *v156;
  double *v157;
  _OWORD *v158;
  unsigned int v159;
  uint64_t v160;
  char *v161;
  __int128 *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t i;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  BOOL v221;
  BOOL v223;
  BOOL v225;
  BOOL v227;
  BOOL v229;
  BOOL v231;
  BOOL v233;
  BOOL v235;
  BOOL v237;
  BOOL v239;
  BOOL v241;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t v246;
  const double *v247;
  const double *v248;
  const double *v249;
  double *v250;
  double *v251;
  double *v252;
  double *v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  uint64_t v264;
  unint64_t v265;
  char *v266;
  unint64_t v267;
  unint64_t v268;
  BOOL v270;
  BOOL v272;
  BOOL v274;
  BOOL v276;
  BOOL v278;
  BOOL v280;
  BOOL v282;
  BOOL v284;
  BOOL v286;
  BOOL v288;
  BOOL v290;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  unsigned int v297;
  __int128 *v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  const double *v309;
  const double *v310;
  const double *v311;
  const double *v312;
  const double *v313;
  const double *v314;
  const double *v315;
  uint64_t v316;
  double *v317;
  double *v318;
  double *v319;
  double *v320;
  double *v321;
  double *v322;
  double *v323;
  double *v324;
  uint64_t v325;
  int v326;
  unint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int v331;
  unint64_t v332;
  int v333;
  uint64_t v334;
  _OWORD *v335;
  unsigned int v336;
  uint64_t v337;
  char *v338;
  __int128 *v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  uint64_t v361;
  uint64_t v362;
  float64x2x2_t v363;
  float64x2x2_t v364;
  float64x2x2_t v365;
  float64x2x2_t v366;
  float64x2x2_t v367;
  float64x2x2_t v368;
  float64x2x2_t v369;
  float64x2x2_t v370;
  float64x2x2_t v371;
  float64x2x2_t v372;
  float64x2x2_t v373;
  float64x2x2_t v374;
  float64x2x2_t v375;
  float64x2x2_t v376;
  float64x2x2_t v377;
  float64x2x2_t v378;
  float64x2x2_t v379;
  float64x2x2_t v380;
  float64x2x2_t v381;
  float64x2x2_t v382;
  float64x2x2_t v383;
  float64x2x2_t v384;
  float64x2x2_t v385;
  float64x2x2_t v386;

  v356 = a2 - 1;
  if (a2 != 1)
  {
    v4 = (int)v356;
    v358 = a4;
    v359 = result;
    v360 = a2;
    while (1)
    {
      v5 = 4 * v4;
      v6 = *(_DWORD *)(a3 + 4 * v4);
      v7 = *(_DWORD *)(a4 + 4 * v4);
      if (v6 != v7)
        break;
LABEL_3:
      if (!(_DWORD)--v4)
      {
        if (a2 < 2)
          return result;
        v179 = 0;
        while (1)
        {
          v180 = 4 * v179;
          v181 = *(_DWORD *)(a3 + 4 * v179);
          v182 = *(_DWORD *)(a4 + 4 * v179);
          if (v181 != v182)
            break;
LABEL_270:
          if (++v179 == v356)
            return result;
        }
        LODWORD(v183) = v179;
        v362 = v179;
        while (2)
        {
          v183 = (v183 + 1);
          if ((_DWORD)v183 == a2)
            goto LABEL_270;
          v185 = *(char **)(result + 8 * v183);
          v186 = *(unsigned int *)(a3 + 4 * v183);
          v187 = *(_QWORD *)(result + 8 * v179);
          v188 = v181 - v182;
          if ((int)v188 >= 1)
          {
            v189 = (11 - v186);
            if (v181 >= v188)
              v190 = v181 - v182;
            else
              v190 = v181;
            if (v189 >= v190)
              v184 = v190;
            else
              v184 = 11 - v186;
            if (!(_DWORD)v186)
              goto LABEL_508;
            if (v186 >= 8)
            {
              v200 = (v186 - 1);
              v201 = (v200 + v184);
              if (!__CFADD__((_DWORD)v200, v184))
              {
                v202 = v185 + 8;
                v203 = 16 * (v200 + v184);
                v204 = (unint64_t)&v185[v203 + 8];
                v205 = 16 * (v186 - 1);
                v206 = (unint64_t)&v185[v205 + 8];
                v207 = (unint64_t)(v185 + 176);
                if (v204 - v205 > v204
                  || &v185[v203 - v205] > &v185[v203]
                  || (unint64_t)v202 > v206
                  || v185 > &v185[v205]
                  || &v185[v201 + 176 - v200] > &v185[v201 + 176]
                  || v207 > (unint64_t)&v185[v200 + 176])
                {
                  v191 = *(_DWORD *)(a3 + 4 * v183);
                  result = v359;
                  goto LABEL_501;
                }
                v213 = &v185[v203 - v205];
                v214 = (unint64_t)&v202[v203 - v205];
                v215 = (unint64_t)&v185[v203 + 16];
                v216 = (unint64_t)&v185[v205 + 16];
                v217 = v207 + v201 - v200;
                v218 = (unint64_t)&v185[v201 + 177];
                v219 = &v185[v200 + 177];
                v221 = (unint64_t)v213 < v206 && (unint64_t)v185 < v204;
                v223 = (unint64_t)v213 < v216 && (unint64_t)v202 < v204;
                v225 = (unint64_t)v213 < v218 && v217 < v204;
                v227 = v213 < v219 && v207 < v204;
                v229 = v214 < v206 && (unint64_t)v185 < v215;
                v231 = v214 < v216 && (unint64_t)v202 < v215;
                v233 = v214 < v218 && v217 < v215;
                v235 = v214 < (unint64_t)v219 && v207 < v215;
                v237 = (unint64_t)v185 < v218 && v217 < v206;
                v239 = (unint64_t)v202 < v218 && v217 < v216;
                v241 = v217 < (unint64_t)v219 && v207 < v218;
                if (v214 < v204 && (unint64_t)v213 < v215)
                {
                  v191 = *(_DWORD *)(a3 + 4 * v183);
                  a4 = v358;
                  result = v359;
                  a2 = v360;
                  v179 = v362;
                  goto LABEL_501;
                }
                a2 = v360;
                result = v359;
                if (v221 || v223 || v225 || v227 || v229 || v231 || v233 || v235 || v237 || v239)
                {
                  v191 = *(_DWORD *)(a3 + 4 * v183);
                  a4 = v358;
                  v179 = v362;
                  goto LABEL_501;
                }
                a4 = v358;
                v179 = v362;
                if (!v241)
                {
                  if (v186 >= 0x10)
                  {
                    v243 = v186 & 0xFFFFFFF0;
                    v306 = v243;
                    v307 = *(unsigned int *)(a3 + 4 * v183);
                    do
                    {
                      v308 = (v307 - 1);
                      v309 = (const double *)&v185[16 * v308 - 240];
                      v310 = v309;
                      v366 = vld2q_f64(v310);
                      v310 += 4;
                      v370 = vld2q_f64(v310);
                      v311 = v309 + 8;
                      v374 = vld2q_f64(v311);
                      v312 = v309 + 12;
                      v378 = vld2q_f64(v312);
                      v313 = v309 + 16;
                      v380 = vld2q_f64(v313);
                      v314 = v309 + 20;
                      v382 = vld2q_f64(v314);
                      v315 = v309 + 24;
                      v384 = vld2q_f64(v315);
                      v309 += 28;
                      v316 = (v184 - 1 + v307);
                      v386 = vld2q_f64(v309);
                      v317 = (double *)&v185[16 * v316 - 248];
                      v318 = v317 + 1;
                      vst2q_f64(v318, v366);
                      v319 = v317 + 5;
                      vst2q_f64(v319, v370);
                      v320 = v317 + 9;
                      vst2q_f64(v320, v374);
                      v321 = v317 + 13;
                      vst2q_f64(v321, v378);
                      v322 = v317 + 17;
                      vst2q_f64(v322, v380);
                      v323 = v317 + 21;
                      vst2q_f64(v323, v382);
                      v324 = v317 + 25;
                      vst2q_f64(v324, v384);
                      v317 += 29;
                      vst2q_f64(v317, v386);
                      *(_OWORD *)&v185[v316 + 161] = *(_OWORD *)&v185[v308 + 161];
                      v307 -= 16;
                      v306 -= 16;
                    }
                    while (v306);
                    if (v243 == v186)
                      goto LABEL_508;
                    if ((v186 & 8) != 0)
                      goto LABEL_399;
                    v191 = v186 & 0xF;
                  }
                  else
                  {
                    v243 = 0;
LABEL_399:
                    v191 = v186 & 7;
                    v244 = ~(_DWORD)v243 + v186 + v184;
                    v245 = ~v243 + v186;
                    v246 = v243 - (v186 & 0xFFFFFFF8);
                    do
                    {
                      v247 = (const double *)&v185[16 * v245 - 112];
                      v248 = v247;
                      v365 = vld2q_f64(v248);
                      v248 += 4;
                      v369 = vld2q_f64(v248);
                      v249 = v247 + 8;
                      v373 = vld2q_f64(v249);
                      v247 += 12;
                      v377 = vld2q_f64(v247);
                      v250 = (double *)&v185[16 * v244 - 120];
                      v251 = v250 + 1;
                      vst2q_f64(v251, v365);
                      v252 = v250 + 5;
                      vst2q_f64(v252, v369);
                      v253 = v250 + 9;
                      vst2q_f64(v253, v373);
                      v250 += 13;
                      vst2q_f64(v250, v377);
                      *(_QWORD *)&v185[v244 + 169] = *(_QWORD *)&v185[v245 + 169];
                      v244 -= 8;
                      v245 -= 8;
                      v246 += 8;
                    }
                    while (v246);
                    if ((v186 & 0xFFFFFFF8) == v186)
                    {
LABEL_508:
                      if (v184)
                      {
                        v330 = 0;
                        v331 = v181 - v184;
                        v332 = v181;
                        if (v181 >= v188)
                          v332 = v188;
                        if (v332 >= v189)
                          v333 = v189;
                        else
                          v333 = v332;
                        do
                        {
                          v334 = v331 + v330;
                          *(_OWORD *)&v185[16 * v330] = *(_OWORD *)(v187 + 16 * v334);
                          v185[v330++ + 176] = *(_BYTE *)(v187 + v334 + 176);
                        }
                        while (v333 != (_DWORD)v330);
                      }
LABEL_274:
                      *(_DWORD *)(a3 + 4 * v183) += v184;
                      v181 = *(_DWORD *)(a3 + v180) - v184;
                      *(_DWORD *)(a3 + v180) = v181;
                      v182 = *(_DWORD *)(a4 + v180);
                      if (v181 >= v182)
                        goto LABEL_270;
                      continue;
                    }
                  }
LABEL_501:
                  v325 = (v191 - 1);
                  v326 = -v191;
                  v327 = v181;
                  if (v181 >= v188)
                    v327 = v188;
                  if (v327 >= v189)
                    v328 = v189;
                  else
                    v328 = v327;
                  do
                  {
                    v329 = (v328 + v325);
                    *(_OWORD *)&v185[16 * v329] = *(_OWORD *)&v185[16 * v325];
                    v185[v329 + 176] = v185[v325-- + 176];
                    v44 = __CFADD__(v326++, 1);
                  }
                  while (!v44);
                  goto LABEL_508;
                }
              }
            }
            v191 = *(_DWORD *)(a3 + 4 * v183);
            goto LABEL_501;
          }
          break;
        }
        v192 = 11 - v181;
        if (v182 - v181 < v186)
          v193 = v182 - v181;
        else
          v193 = *(_DWORD *)(a3 + 4 * v183);
        if (v192 >= v193)
          v194 = v193;
        else
          v194 = v192;
        if ((_DWORD)v194)
        {
          for (i = 0; i != v194; ++i)
          {
            v196 = v181 + i;
            *(_OWORD *)(v187 + 16 * v196) = *(_OWORD *)&v185[16 * i];
            *(_BYTE *)(v187 + v196 + 176) = v185[i + 176];
          }
        }
        if ((_DWORD)v194 != (_DWORD)v186)
        {
          v197 = (v186 + ~(_DWORD)v194);
          if (v197 < 7)
          {
            v198 = 0;
            v199 = v194;
            goto LABEL_533;
          }
          v198 = 0;
          if ((int)v186 - 1 < v194)
          {
            v199 = v194;
            goto LABEL_533;
          }
          v254 = (unint64_t)(v185 + 8);
          v255 = 16 * v194;
          v256 = (unint64_t)&v185[v255 + 8];
          v257 = 16 * (v186 - 1 - v194);
          if (v256 + v257 < v256)
          {
            v199 = v194;
            goto LABEL_533;
          }
          v258 = (unint64_t)&v185[v255];
          if (&v185[v255 + v257] < &v185[v255])
          {
            v199 = v194;
            goto LABEL_533;
          }
          v259 = v179;
          v198 = 0;
          v260 = v254 + 16 * v197;
          v261 = (unint64_t)&v185[16 * v197 + 16];
          v262 = (unint64_t)(v185 + 176);
          v263 = &v185[v197 + 177];
          v264 = v255 + 16 * v197;
          v265 = v254 + v264;
          v266 = &v185[v264 + 16];
          v267 = (unint64_t)&v185[v194 + 176];
          v268 = (unint64_t)&v185[v194 + 177 + v197];
          v270 = v185 < v263 && v262 < v260;
          v272 = (unint64_t)v185 < v265 && v258 < v260;
          v274 = v185 < v266 && v256 < v260;
          v276 = (unint64_t)v185 < v268 && v267 < v260;
          v278 = v254 < (unint64_t)v263 && v262 < v261;
          v280 = v254 < v265 && v258 < v261;
          v282 = v254 < (unint64_t)v266 && v256 < v261;
          v284 = v254 < v268 && v267 < v261;
          v286 = v262 < v265 && v258 < (unint64_t)v263;
          v288 = v262 < (unint64_t)v266 && v256 < (unint64_t)v263;
          v290 = v262 < v268 && v267 < (unint64_t)v263;
          if (v254 < v260 && (unint64_t)v185 < v261)
          {
            v199 = v194;
            result = v359;
            v179 = v259;
            a2 = v360;
            goto LABEL_533;
          }
          result = v359;
          v179 = v259;
          if (v270 || v272 || v274)
          {
            v199 = v194;
            a2 = v360;
            goto LABEL_533;
          }
          a2 = v360;
          if (v276)
          {
            v199 = v194;
            goto LABEL_533;
          }
          if (v278)
          {
            v199 = v194;
            goto LABEL_533;
          }
          if (v280)
          {
            v199 = v194;
            goto LABEL_533;
          }
          if (v282)
          {
            v199 = v194;
            goto LABEL_533;
          }
          if (v284)
          {
            v199 = v194;
            goto LABEL_533;
          }
          if (v286)
          {
            v199 = v194;
            goto LABEL_533;
          }
          if (v288)
          {
            v199 = v194;
            goto LABEL_533;
          }
          if (v290)
          {
            v199 = v194;
            goto LABEL_533;
          }
          v292 = v197 + 1;
          if (v197 >= 0xF)
          {
            v198 = v292 & 0x1FFFFFFF0;
            v335 = v185 + 176;
            v336 = v194;
            v337 = v292 & 0x1FFFFFFF0;
            v338 = v185;
            do
            {
              v339 = (__int128 *)&v185[16 * v336];
              v341 = *v339;
              v340 = v339[1];
              v343 = v339[2];
              v342 = v339[3];
              v345 = v339[4];
              v344 = v339[5];
              v347 = v339[6];
              v346 = v339[7];
              v349 = v339[8];
              v348 = v339[9];
              v351 = v339[10];
              v350 = v339[11];
              v353 = v339[12];
              v352 = v339[13];
              v354 = v339[15];
              *((_OWORD *)v338 + 14) = v339[14];
              *((_OWORD *)v338 + 15) = v354;
              *((_OWORD *)v338 + 12) = v353;
              *((_OWORD *)v338 + 13) = v352;
              *((_OWORD *)v338 + 10) = v351;
              *((_OWORD *)v338 + 11) = v350;
              *((_OWORD *)v338 + 8) = v349;
              *((_OWORD *)v338 + 9) = v348;
              *((_OWORD *)v338 + 6) = v347;
              *((_OWORD *)v338 + 7) = v346;
              *((_OWORD *)v338 + 4) = v345;
              *((_OWORD *)v338 + 5) = v344;
              *((_OWORD *)v338 + 2) = v343;
              *((_OWORD *)v338 + 3) = v342;
              *(_OWORD *)v338 = v341;
              *((_OWORD *)v338 + 1) = v340;
              v338 += 256;
              v355 = &v185[v336];
              v336 += 16;
              *v335++ = *((_OWORD *)v355 + 11);
              v337 -= 16;
            }
            while (v337);
            if (v292 != v198)
            {
              if ((v292 & 8) == 0)
              {
                v199 = v194 + v198;
                goto LABEL_533;
              }
              goto LABEL_491;
            }
          }
          else
          {
            v198 = 0;
LABEL_491:
            v293 = v198;
            v198 = v292 & 0x1FFFFFFF8;
            v199 = v194 + (v292 & 0xFFFFFFF8);
            v294 = &v185[16 * v293];
            v295 = &v185[v293 + 176];
            v296 = v293 - (v292 & 0x1FFFFFFF8);
            v297 = v194 + v293;
            do
            {
              v298 = (__int128 *)&v185[16 * v297];
              v300 = *v298;
              v299 = v298[1];
              v302 = v298[2];
              v301 = v298[3];
              v304 = v298[4];
              v303 = v298[5];
              v305 = v298[7];
              *((_OWORD *)v294 + 6) = v298[6];
              *((_OWORD *)v294 + 7) = v305;
              *((_OWORD *)v294 + 4) = v304;
              *((_OWORD *)v294 + 5) = v303;
              *((_OWORD *)v294 + 2) = v302;
              *((_OWORD *)v294 + 3) = v301;
              *(_OWORD *)v294 = v300;
              *((_OWORD *)v294 + 1) = v299;
              v294 += 128;
              *(_QWORD *)v295 = *(_QWORD *)&v185[v297 + 176];
              v295 += 8;
              v297 += 8;
              v296 += 8;
            }
            while (v296);
            if (v292 != v198)
            {
              do
              {
LABEL_533:
                *(_OWORD *)&v185[16 * v198] = *(_OWORD *)&v185[16 * v199];
                v185[v198++ + 176] = v185[v199++ + 176];
              }
              while ((_DWORD)v186 != v199);
            }
          }
        }
        v184 = -(int)v194;
        goto LABEL_274;
      }
    }
    v8 = v4;
    v361 = v4;
    while (1)
    {
      if (!v8)
        goto LABEL_3;
      --v8;
      v10 = *(char **)(result + 8 * v4);
      v11 = *(_QWORD *)(result + 8 * v8);
      v12 = *(unsigned int *)(a3 + 4 * v8);
      v13 = v7 - v6;
      if ((int)v13 >= 1)
      {
        v14 = 11 - v6;
        if (v12 >= v13)
          v9 = v7 - v6;
        else
          v9 = *(_DWORD *)(a3 + 4 * v8);
        if (v14 < v9)
          v9 = 11 - v6;
        if (!v6)
          goto LABEL_142;
        if (v6 >= 8)
        {
          v24 = v6 - 1;
          v25 = v24 + v9;
          if (!__CFADD__((_DWORD)v24, v9))
          {
            v26 = v10 + 8;
            v27 = 16 * (v24 + v9);
            v28 = (unint64_t)&v10[v27 + 8];
            v29 = 16 * (v6 - 1);
            v30 = (unint64_t)&v10[v29 + 8];
            v31 = (unint64_t)(v10 + 176);
            if (v28 - v29 > v28
              || &v10[v27 - v29] > &v10[v27]
              || (unint64_t)v26 > v30
              || v10 > &v10[v29]
              || &v10[v25 + 176 - v24] > &v10[v25 + 176]
              || v31 > (unint64_t)&v10[v24 + 176])
            {
              v15 = v6;
            }
            else
            {
              v357 = v6;
              v37 = &v10[v27 - v29];
              v38 = (unint64_t)&v26[v27 - v29];
              v39 = (unint64_t)&v10[v27 + 16];
              v40 = (unint64_t)&v10[v29 + 16];
              v41 = v31 + v25 - v24;
              v42 = (unint64_t)&v10[v25 + 177];
              v43 = &v10[v24 + 177];
              v44 = (unint64_t)v37 >= v30 || (unint64_t)v10 >= v28;
              v45 = !v44;
              v47 = (unint64_t)v37 < v40 && (unint64_t)v26 < v28;
              v49 = (unint64_t)v37 < v42 && v41 < v28;
              v51 = v37 < v43 && v31 < v28;
              v53 = v38 < v30 && (unint64_t)v10 < v39;
              v55 = v38 < v40 && (unint64_t)v26 < v39;
              v57 = v38 < v42 && v41 < v39;
              v59 = v38 < (unint64_t)v43 && v31 < v39;
              v61 = (unint64_t)v10 < v42 && v41 < v30;
              v63 = (unint64_t)v26 < v42 && v41 < v40;
              v65 = v41 < (unint64_t)v43 && v31 < v42;
              if (v38 < v28 && (unint64_t)v37 < v39)
              {
                v15 = v6;
                a4 = v358;
                a2 = v360;
                result = v359;
                goto LABEL_133;
              }
              result = v359;
              if ((v45 & 1) == 0 && !v47 && !v49 && !v51 && !v53 && !v55)
              {
                v4 = v361;
                if (v57 || v59)
                {
                  v15 = v6;
                  a4 = v358;
                }
                else
                {
                  a4 = v358;
                  if (!v61 && !v63)
                  {
                    a2 = v360;
                    if (v65)
                    {
                      v15 = v6;
                    }
                    else if (v6 >= 0x10)
                    {
                      v67 = v6 & 0xFFFFFFF0;
                      v129 = v67;
                      v130 = v6;
                      do
                      {
                        v131 = (v130 - 1);
                        v132 = (const double *)&v10[16 * v131 - 240];
                        v133 = v132;
                        v363 = vld2q_f64(v133);
                        v133 += 4;
                        v367 = vld2q_f64(v133);
                        v134 = v132 + 8;
                        v371 = vld2q_f64(v134);
                        v135 = v132 + 12;
                        v375 = vld2q_f64(v135);
                        v136 = v132 + 16;
                        v379 = vld2q_f64(v136);
                        v137 = v132 + 20;
                        v381 = vld2q_f64(v137);
                        v138 = v132 + 24;
                        v383 = vld2q_f64(v138);
                        v132 += 28;
                        v139 = v9 - 1 + v130;
                        v385 = vld2q_f64(v132);
                        v140 = (double *)&v10[16 * v139 - 248];
                        v141 = v140 + 1;
                        vst2q_f64(v141, v363);
                        v142 = v140 + 5;
                        vst2q_f64(v142, v367);
                        v143 = v140 + 9;
                        vst2q_f64(v143, v371);
                        v144 = v140 + 13;
                        vst2q_f64(v144, v375);
                        v145 = v140 + 17;
                        vst2q_f64(v145, v379);
                        v146 = v140 + 21;
                        vst2q_f64(v146, v381);
                        v147 = v140 + 25;
                        vst2q_f64(v147, v383);
                        v140 += 29;
                        vst2q_f64(v140, v385);
                        *(_OWORD *)&v10[v139 + 161] = *(_OWORD *)&v10[v131 + 161];
                        v130 -= 16;
                        v129 -= 16;
                      }
                      while (v129);
                      if (v67 == v6)
                        goto LABEL_142;
                      if ((v6 & 8) != 0)
                        goto LABEL_248;
                      v15 = v6 & 0xF;
                    }
                    else
                    {
                      v67 = 0;
LABEL_248:
                      v15 = v6 & 7;
                      v148 = ~(_DWORD)v67 + v6 + v9;
                      v149 = ~v67 + v357;
                      v150 = v67 - (v357 & 0xFFFFFFF8);
                      do
                      {
                        v151 = (const double *)&v10[16 * v149 - 112];
                        v152 = v151;
                        v364 = vld2q_f64(v152);
                        v152 += 4;
                        v368 = vld2q_f64(v152);
                        v153 = v151 + 8;
                        v372 = vld2q_f64(v153);
                        v151 += 12;
                        v376 = vld2q_f64(v151);
                        v154 = (double *)&v10[16 * v148 - 120];
                        v155 = v154 + 1;
                        vst2q_f64(v155, v364);
                        v156 = v154 + 5;
                        vst2q_f64(v156, v368);
                        v157 = v154 + 9;
                        vst2q_f64(v157, v372);
                        v154 += 13;
                        vst2q_f64(v154, v376);
                        *(_QWORD *)&v10[v148 + 169] = *(_QWORD *)&v10[v149 + 169];
                        v148 -= 8;
                        v149 -= 8;
                        v150 += 8;
                      }
                      while (v150);
                      if ((v357 & 0xFFFFFFF8) == v357)
                      {
LABEL_142:
                        if (v9)
                        {
                          v73 = 0;
                          v74 = v12 - v9;
                          if (v12 >= v13)
                            v75 = v13;
                          else
                            v75 = v12;
                          if (v75 >= v14)
                            v76 = v14;
                          else
                            v76 = v75;
                          do
                          {
                            v77 = (v74 + v73);
                            *(_OWORD *)&v10[16 * v73] = *(_OWORD *)(v11 + 16 * v77);
                            v10[v73++ + 176] = *(_BYTE *)(v11 + v77 + 176);
                          }
                          while (v76 != (_DWORD)v73);
                        }
                        goto LABEL_7;
                      }
                    }
LABEL_134:
                    v68 = (v15 - 1);
                    v69 = -v15;
                    if (v12 >= v13)
                      v70 = v13;
                    else
                      v70 = v12;
                    if (v70 >= v14)
                      v71 = v14;
                    else
                      v71 = v70;
                    do
                    {
                      v72 = (v71 + v68);
                      *(_OWORD *)&v10[16 * v72] = *(_OWORD *)&v10[16 * v68];
                      v10[v72 + 176] = v10[v68-- + 176];
                      v44 = __CFADD__(v69++, 1);
                    }
                    while (!v44);
                    goto LABEL_142;
                  }
                  v15 = v6;
                }
                a2 = v360;
                goto LABEL_134;
              }
              v15 = v6;
            }
            a4 = v358;
            a2 = v360;
LABEL_133:
            v4 = v361;
            goto LABEL_134;
          }
        }
        v15 = v6;
        goto LABEL_134;
      }
      v16 = 11 - v12;
      if (v6 - v7 < v6)
        v17 = v6 - v7;
      else
        v17 = v6;
      if (v16 >= v17)
        v18 = v17;
      else
        v18 = v16;
      if ((_DWORD)v18)
      {
        for (j = 0; j != v18; ++j)
        {
          v20 = (v12 + j);
          *(_OWORD *)(v11 + 16 * v20) = *(_OWORD *)&v10[16 * j];
          *(_BYTE *)(v11 + v20 + 176) = v10[j + 176];
        }
      }
      if ((_DWORD)v18 != v6)
        break;
LABEL_6:
      v9 = -(int)v18;
LABEL_7:
      *(_DWORD *)(a3 + 4 * v8) -= v9;
      v6 = *(_DWORD *)(a3 + v5) + v9;
      *(_DWORD *)(a3 + v5) = v6;
      v7 = *(_DWORD *)(a4 + v5);
      if (v6 >= v7)
        goto LABEL_3;
    }
    v21 = v6 + ~(_DWORD)v18;
    if (v21 < 7)
    {
      v22 = 0;
      v23 = v18;
      goto LABEL_258;
    }
    v22 = 0;
    if (v6 - 1 < v18)
    {
      v23 = v18;
    }
    else
    {
      v78 = (unint64_t)(v10 + 8);
      v79 = 16 * v18;
      v80 = (unint64_t)&v10[v79 + 8];
      v81 = 16 * (v6 - 1 - v18);
      if (v80 + v81 < v80)
      {
        v23 = v18;
      }
      else
      {
        v82 = (unint64_t)&v10[v79];
        if (&v10[v79 + v81] < &v10[v79])
        {
          v23 = v18;
        }
        else
        {
          v22 = 0;
          v83 = v78 + 16 * v21;
          v84 = (unint64_t)&v10[16 * v21 + 16];
          v85 = (unint64_t)(v10 + 176);
          v86 = &v10[v21 + 177];
          v87 = v79 + 16 * v21;
          v88 = v78 + v87;
          v89 = &v10[v87 + 16];
          v90 = (unint64_t)&v10[v18 + 176];
          v91 = (unint64_t)&v10[v18 + 177 + v21];
          v93 = v10 < v86 && v85 < v83;
          v95 = (unint64_t)v10 < v88 && v82 < v83;
          v97 = v10 < v89 && v80 < v83;
          v99 = (unint64_t)v10 < v91 && v90 < v83;
          v101 = v78 < (unint64_t)v86 && v85 < v84;
          v103 = v78 < v88 && v82 < v84;
          v105 = v78 < (unint64_t)v89 && v80 < v84;
          v107 = v78 < v91 && v90 < v84;
          v109 = v85 < v88 && v82 < (unint64_t)v86;
          v111 = v85 < (unint64_t)v89 && v80 < (unint64_t)v86;
          v113 = v85 < v91 && v90 < (unint64_t)v86;
          if (v78 < v83 && (unint64_t)v10 < v84)
          {
            v23 = v18;
            result = v359;
            v4 = v361;
            goto LABEL_258;
          }
          result = v359;
          if (v93 || v95 || v97 || v99 || v101 || v103 || v105 || v107 || v109 || v111 || v113)
          {
            v23 = v18;
            v4 = v361;
          }
          else
          {
            v115 = v21 + 1;
            if (v21 < 0xF)
            {
              v22 = 0;
              v4 = v361;
              goto LABEL_238;
            }
            v22 = v115 & 0x1FFFFFFF0;
            v158 = v10 + 176;
            v159 = v18;
            v160 = v115 & 0x1FFFFFFF0;
            v161 = v10;
            do
            {
              v162 = (__int128 *)&v10[16 * v159];
              v164 = *v162;
              v163 = v162[1];
              v166 = v162[2];
              v165 = v162[3];
              v168 = v162[4];
              v167 = v162[5];
              v170 = v162[6];
              v169 = v162[7];
              v172 = v162[8];
              v171 = v162[9];
              v174 = v162[10];
              v173 = v162[11];
              v176 = v162[12];
              v175 = v162[13];
              v177 = v162[15];
              *((_OWORD *)v161 + 14) = v162[14];
              *((_OWORD *)v161 + 15) = v177;
              *((_OWORD *)v161 + 12) = v176;
              *((_OWORD *)v161 + 13) = v175;
              *((_OWORD *)v161 + 10) = v174;
              *((_OWORD *)v161 + 11) = v173;
              *((_OWORD *)v161 + 8) = v172;
              *((_OWORD *)v161 + 9) = v171;
              *((_OWORD *)v161 + 6) = v170;
              *((_OWORD *)v161 + 7) = v169;
              *((_OWORD *)v161 + 4) = v168;
              *((_OWORD *)v161 + 5) = v167;
              *((_OWORD *)v161 + 2) = v166;
              *((_OWORD *)v161 + 3) = v165;
              *(_OWORD *)v161 = v164;
              *((_OWORD *)v161 + 1) = v163;
              v161 += 256;
              v178 = &v10[v159];
              v159 += 16;
              *v158++ = *((_OWORD *)v178 + 11);
              v160 -= 16;
            }
            while (v160);
            v4 = v361;
            if (v115 == v22)
              goto LABEL_6;
            if ((v115 & 8) != 0)
            {
LABEL_238:
              v116 = v22;
              v22 = v115 & 0x1FFFFFFF8;
              v23 = v18 + (v115 & 0xFFFFFFF8);
              v117 = &v10[16 * v116];
              v118 = &v10[v116 + 176];
              v119 = v116 - (v115 & 0x1FFFFFFF8);
              v120 = v18 + v116;
              do
              {
                v121 = (__int128 *)&v10[16 * v120];
                v123 = *v121;
                v122 = v121[1];
                v125 = v121[2];
                v124 = v121[3];
                v127 = v121[4];
                v126 = v121[5];
                v128 = v121[7];
                *((_OWORD *)v117 + 6) = v121[6];
                *((_OWORD *)v117 + 7) = v128;
                *((_OWORD *)v117 + 4) = v127;
                *((_OWORD *)v117 + 5) = v126;
                *((_OWORD *)v117 + 2) = v125;
                *((_OWORD *)v117 + 3) = v124;
                *(_OWORD *)v117 = v123;
                *((_OWORD *)v117 + 1) = v122;
                v117 += 128;
                *(_QWORD *)v118 = *(_QWORD *)&v10[v120 + 176];
                v118 += 8;
                v120 += 8;
                v119 += 8;
              }
              while (v119);
              if (v115 == v22)
                goto LABEL_6;
              goto LABEL_258;
            }
            v23 = v18 + v22;
          }
        }
      }
    }
    do
    {
LABEL_258:
      *(_OWORD *)&v10[16 * v22] = *(_OWORD *)&v10[16 * v23];
      v10[v22++ + 176] = v10[v23++ + 176];
    }
    while (v6 != v23);
    goto LABEL_6;
  }
  return result;
}

uint64_t *llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;

  v7 = (unsigned int *)(a1 + 8);
  v8 = *(_QWORD *)a1;
  v9 = (uint64_t *)(a2 == 1);
  if (a2 == 1)
  {
    v10 = *(unsigned int *)(v8 + 276);
    if (v10 <= 0xF)
    {
      v11 = v8 + 8;
      v12 = *(unsigned int *)(*(_QWORD *)v7 + 12);
      if ((_DWORD)v10 != (_DWORD)v12)
      {
        v13 = v10 - v12;
        v14 = (v10 + ~(_DWORD)v12);
        if (v14 < 0x39 || (int)v12 + 1 > v10)
          goto LABEL_26;
        v15 = 8 * v10 + v8;
        v16 = v15 + 8;
        v17 = v15 + 8 - 8 * v14;
        v18 = v15 + 136;
        v19 = v15 + 136 - 8 * v14;
        v20 = 8 * (v10 - 1);
        v21 = v14 > (int)v10 - 1 || v17 > v16;
        v22 = v21 || v19 > v18;
        v23 = v22 || v20 + v8 + 8 - 8 * v14 > (unint64_t)(v20 + v8 + 8);
        if (v23 || v20 + v8 + 136 - 8 * v14 > (unint64_t)(v20 + v8 + 136))
          goto LABEL_26;
        v25 = 8 * v10 + v8;
        v26 = v20 + v8;
        v27 = v20 + v8 + 8;
        if ((unint64_t)(v27 - (v25 + 8)) < 0x10)
          goto LABEL_26;
        v28 = v26 + 136;
        if ((unint64_t)(v25 + 8 - v28) < 0x10)
          goto LABEL_26;
        v29 = v25 + 136;
        if ((unint64_t)(v27 - v29) < 0x10)
          goto LABEL_26;
        if ((unint64_t)(v28 - v29) < 0x10)
          goto LABEL_26;
        v30 = v14 + 1;
        v13 -= v30 & 0xFFFFFFFE;
        v31 = v30 & 0x1FFFFFFFELL;
        do
        {
          v32 = 8 * (v10 - 1);
          v33 = 8 * v10;
          *(_OWORD *)(v8 + v33) = *(_OWORD *)(v8 + v32);
          *(_OWORD *)(v8 + 128 + v33) = *(_OWORD *)(v8 + 128 + v32);
          LODWORD(v10) = v10 - 2;
          v31 -= 2;
        }
        while (v31);
        if (v30 != (v30 & 0x1FFFFFFFELL))
        {
LABEL_26:
          v34 = v12 + v13;
          do
          {
            v35 = 8 * v34--;
            v36 = 8 * v34;
            *(_QWORD *)(v11 + v35) = *(_QWORD *)(v11 + v36);
            *(_QWORD *)(v8 + 136 + v35) = *(_QWORD *)(v8 + 136 + v36);
            --v13;
          }
          while (v13);
        }
      }
      v37 = (_QWORD *)(v11 + 8 * v12);
      *v37 = a3;
      v37[16] = a4;
      LODWORD(v37) = *(_DWORD *)(v8 + 276) + 1;
      *(_DWORD *)(v8 + 276) = (_DWORD)v37;
      v38 = *(_QWORD *)v7;
      *(_DWORD *)(v38 + 8) = (_DWORD)v37;
      v39 = *(_QWORD *)(*(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 12));
      *(_QWORD *)(v38 + 16) = v39 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v38 + 24) = (v39 & 0x3F) + 1;
      return 0;
    }
    v41 = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::splitRoot(*(_QWORD *)a1, (unsigned int *)*(unsigned int *)(*(_QWORD *)v7 + 12));
    llvm::IntervalMapImpl::Path::replaceRoot(v7, v8 + 8, *(_DWORD *)(v8 + 276), v41);
    a2 = 2;
  }
  v42 = (a2 - 1);
  if (*(_DWORD *)(a1 + 16)
    && (v43 = *(_QWORD *)v7, *(_DWORD *)(*(_QWORD *)v7 + 12) < *(_DWORD *)(*(_QWORD *)v7 + 8)))
  {
    v44 = *(_DWORD *)(v43 + 16 * v42 + 8);
    if (v44 != 12)
      goto LABEL_33;
  }
  else
  {
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)v7, a2 - 1);
    v43 = *(_QWORD *)v7;
    ++*(_DWORD *)(*(_QWORD *)v7 + 16 * v42 + 12);
    v44 = *(_DWORD *)(v43 + 16 * v42 + 8);
    if (v44 != 12)
    {
LABEL_33:
      v45 = (uint64_t *)(v43 + 16 * v42);
      v46 = *v45;
      v47 = *((unsigned int *)v45 + 3);
      if (v44 == (_DWORD)v47)
        goto LABEL_61;
LABEL_37:
      v50 = v44 - v47;
      v51 = v44 + ~(_DWORD)v47;
      if (v51 < 0x35 || (int)v47 + 1 > v44)
        goto LABEL_59;
      v52 = 8 * v44;
      v53 = 8 * (v44 - 1);
      v54 = v51 > v44 - 1 || v46 + v52 - 8 * v51 > (unint64_t)(v46 + v52);
      v55 = v54 || v46 + v52 + 96 - 8 * v51 > (unint64_t)(v46 + v52 + 96);
      v56 = v55 || v46 + v53 - 8 * v51 > (unint64_t)(v46 + v53);
      if (v56 || v46 + v53 + 96 - 8 * v51 > (unint64_t)(v46 + v53 + 96))
        goto LABEL_59;
      v58 = v52 + v46;
      v59 = v53 + v46;
      if ((unint64_t)(v59 - v58) < 0x10)
        goto LABEL_59;
      if ((unint64_t)(v58 - (v59 + 96)) < 0x10)
        goto LABEL_59;
      v60 = v58 + 96;
      if ((unint64_t)(v59 - v60) < 0x10)
        goto LABEL_59;
      if ((unint64_t)(v59 + 96 - v60) < 0x10)
        goto LABEL_59;
      v61 = v51 + 1;
      v50 -= v61 & 0xFFFFFFFE;
      v62 = v61 & 0x1FFFFFFFELL;
      do
      {
        v63 = 8 * (v44 - 1);
        v64 = 8 * v44;
        *(_OWORD *)(v46 - 8 + v64) = *(_OWORD *)(v46 - 8 + v63);
        *(_OWORD *)(v46 + 88 + v64) = *(_OWORD *)(v46 + 88 + v63);
        v44 -= 2;
        v62 -= 2;
      }
      while (v62);
      if (v61 != (v61 & 0x1FFFFFFFELL))
      {
LABEL_59:
        v65 = v47 + v50;
        do
        {
          v66 = 8 * v65--;
          v67 = 8 * v65;
          *(_QWORD *)(v46 + v66) = *(_QWORD *)(v46 + v67);
          *(_QWORD *)(v46 + 96 + v66) = *(_QWORD *)(v46 + 96 + v67);
          --v50;
        }
        while (v50);
      }
      goto LABEL_61;
    }
  }
  v9 = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>((llvm::IntervalMapImpl::Path *)a1, v42);
  v42 = (v42 + (_DWORD)v9);
  v48 = *(_QWORD *)(a1 + 8);
  v44 = *(_DWORD *)(v48 + 16 * v42 + 8);
  v49 = (uint64_t *)(v48 + 16 * v42);
  v46 = *v49;
  v47 = *((unsigned int *)v49 + 3);
  if (v44 != (_DWORD)v47)
    goto LABEL_37;
LABEL_61:
  v68 = (_QWORD *)(v46 + 8 * v47);
  *v68 = a3;
  v68[12] = a4;
  v69 = *(_QWORD *)v7;
  v70 = *(_QWORD *)v7 + 16 * v42;
  v71 = *(unsigned int *)(v70 + 8);
  *(_DWORD *)(v70 + 8) = v71 + 1;
  if ((_DWORD)v42)
  {
    *(_QWORD *)(*(_QWORD *)(v69 + 16 * (v42 - 1))
              + 8 * *(unsigned int *)(v69 + 16 * (v42 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v69 + 16 * (v42 - 1))
                                                                                                + 8
                                                                                                * *(unsigned int *)(v69 + 16 * (v42 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v71;
    v69 = *(_QWORD *)v7;
    v72 = *(_QWORD *)v7 + 16 * v42;
    v73 = *(_DWORD *)(v72 + 12);
    if (v73 == *(_DWORD *)(v72 + 8) - 1)
    {
      v74 = (_DWORD *)(v72 - 8);
      v75 = v42;
      while (--v75)
      {
        v76 = *((_QWORD *)v74 - 1);
        v78 = *v74;
        v77 = v74[1];
        v74 -= 4;
        *(_QWORD *)(v76 + 8 * v77 + 96) = a4;
        if ((_DWORD)v77 != v78 - 1)
          goto LABEL_69;
      }
      *(_QWORD *)(*(_QWORD *)v69 + 8 * *(unsigned int *)(v69 + 12) + 128) = a4;
    }
  }
  else
  {
    v73 = *(_DWORD *)(v70 + 12);
  }
LABEL_69:
  v79 = *(_QWORD *)(*(_QWORD *)(v69 + 16 * v42) + 8 * v73);
  v80 = v69 + 16 * (v42 + 1);
  *(_QWORD *)v80 = v79 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v80 + 8) = (v79 & 0x3F) + 1;
  return v9;
}

_QWORD *llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  char *v9;
  char *v10;

  result = *(_QWORD **)a1;
  if (result)
  {
    *(_QWORD *)a1 = *result;
  }
  else
  {
    *(_QWORD *)(a1 + 88) += 192;
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
      v4 = ((v3 + 63) & 0xFFFFFFFFFFFFFFC0) - v3 + 192 > *(_QWORD *)(a1 + 16) - v3;
    else
      v4 = 1;
    if (v4)
    {
      v5 = *(_DWORD *)(a1 + 32) >> 7;
      if (v5 >= 0x1E)
        LOBYTE(v5) = 30;
      v6 = 4096 << v5;
      buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
      v8 = *(unsigned int *)(a1 + 32);
      if (v8 >= *(_DWORD *)(a1 + 36))
      {
        v10 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8 + 1, 8);
        buffer = v10;
        LODWORD(v8) = *(_DWORD *)(a1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v8) = buffer;
      ++*(_DWORD *)(a1 + 32);
      v9 = &buffer[v6];
      result = (_QWORD *)((unint64_t)(buffer + 63) & 0xFFFFFFFFFFFFFFC0);
      *(_QWORD *)(a1 + 8) = result + 24;
      *(_QWORD *)(a1 + 16) = v9;
    }
    else
    {
      result = (_QWORD *)((v3 + 63) & 0xFFFFFFFFFFFFFFC0);
      *(_QWORD *)(a1 + 8) = result + 24;
    }
  }
  return result;
}

unint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::splitRoot(uint64_t a1, unsigned int *a2)
{
  unint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)2, *(_DWORD *)(a1 + 276), 0xBu, 0, &v35, a2, 1);
  v4 = a1 + 8;
  v5 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(_QWORD *)(a1 + 280));
  v6 = (unint64_t)v5;
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v7 = v35;
  if (v35)
  {
    if (v35 >= 6
      && ((unint64_t)v5 < 8 * (unint64_t)v35 + a1 + 136
        ? (v8 = v4 >= (unint64_t)v5 + 8 * v35 + 96)
        : (v8 = 1),
          v8))
    {
      v9 = v35 & 0xFFFFFFFE;
      v10 = (__int128 *)(a1 + 136);
      v11 = v9;
      v12 = v5;
      do
      {
        *v12 = *(v10 - 8);
        v13 = *v10++;
        v12[6] = v13;
        ++v12;
        v11 -= 2;
      }
      while (v11);
      if (v9 == v7)
        goto LABEL_15;
    }
    else
    {
      v9 = 0;
    }
    v14 = v7 - v9;
    v15 = 8 * v9;
    v16 = (uint64_t *)(8 * v9 + a1 + 136);
    v17 = (_QWORD *)((char *)v5 + v15);
    do
    {
      *v17 = *(v16 - 16);
      v18 = *v16++;
      v17[12] = v18;
      ++v17;
      --v14;
    }
    while (v14);
LABEL_15:
    v19 = v35;
    goto LABEL_17;
  }
  v19 = 0;
LABEL_17:
  v20 = (unint64_t)llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(_QWORD *)(a1 + 280));
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  *(_OWORD *)(v20 + 144) = 0u;
  *(_OWORD *)(v20 + 160) = 0u;
  *(_OWORD *)(v20 + 176) = 0u;
  v21 = v36;
  if (!v36)
  {
    v29 = 0xFFFFFFFFLL;
    goto LABEL_27;
  }
  if (v36 < 0xC
    || __CFADD__(v19, v36 - 1)
    || (v22 = 8 * (v36 - 1), v23 = a1 + 8 * v19, v20 < v23 + v22 + 144) && v23 + 8 < v22 + v20 + 104)
  {
    v24 = 0;
    v25 = v19;
  }
  else
  {
    v24 = v36 & 0xFFFFFFFE;
    v25 = v19 + (v36 & 0xFFFFFFFE);
    v31 = v19;
    v32 = v24;
    v33 = (_OWORD *)v20;
    do
    {
      v34 = (_OWORD *)(v4 + 8 * v31);
      *v33 = *v34;
      v33[6] = v34[8];
      ++v33;
      v31 += 2;
      v32 -= 2;
    }
    while (v32);
    if (v24 == v21)
      goto LABEL_25;
  }
  v26 = v21 + v19;
  v27 = (_QWORD *)(v20 + 8 * v24);
  do
  {
    v28 = (_QWORD *)(v4 + 8 * v25);
    *v27 = *v28;
    v27[12] = v28[16];
    ++v25;
    ++v27;
  }
  while (v26 != v25);
LABEL_25:
  v29 = v36 - 1;
LABEL_27:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFC0 | (v19 - 1) & 0xFFFFFFC0) + 8 * (v35 - 1) + 0x60);
  *(_QWORD *)(a1 + 8) = v6 & 0xFFFFFFFFFFFFFFC0 | (v19 - 1);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFC0 | v29 & 0xFFFFFFFFFFFFFFC0) + 8 * v29 + 0x60);
  *(_QWORD *)(a1 + 16) = v20 & 0xFFFFFFFFFFFFFFC0 | v29;
  *(_DWORD *)(a1 + 276) = 2;
  ++*(_DWORD *)(a1 + 272);
  return v3;
}

uint64_t *llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>(llvm::IntervalMapImpl::Path *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::IntervalMapImpl::Path *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t LeftSibling;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t RightSibling;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t inserted;
  int v32;
  uint64_t *result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  __int128 v67;
  __int128 v68;
  _DWORD v69[4];
  uint64_t v70;

  v2 = a2;
  v70 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IntervalMapImpl::Path *)((char *)this + 8);
  v3 = *((_QWORD *)this + 1);
  v67 = 0u;
  v68 = 0u;
  v5 = a2;
  v6 = *(unsigned int *)(v3 + 16 * a2 + 12);
  LeftSibling = llvm::IntervalMapImpl::Path::getLeftSibling((llvm::IntervalMapImpl::Path *)((char *)this + 8), a2);
  v8 = LeftSibling;
  if (LeftSibling)
  {
    v9 = (LeftSibling & 0x3F) + 1;
    v69[0] = v9;
    v6 = (v9 + v6);
    *(_QWORD *)&v67 = LeftSibling & 0xFFFFFFFFFFFFFFC0;
    v10 = 1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = *(_QWORD *)v4 + 16 * v5;
  v12 = *(_DWORD *)(v11 + 8);
  v69[v10] = v12;
  v13 = v12 + v9;
  v14 = v10 + 1;
  *(_QWORD *)((unint64_t)&v67 | (8 * v10)) = *(_QWORD *)v11;
  RightSibling = llvm::IntervalMapImpl::Path::getRightSibling(v4, v2);
  if (RightSibling)
  {
    v16 = (RightSibling & 0x3F) + 1;
    v69[v14] = v16;
    v13 += v16;
    *((_QWORD *)&v67 + v14) = RightSibling & 0xFFFFFFFFFFFFFFC0;
    v14 = v10 | 2;
  }
  if (v13 + 1 <= (12 * v14))
  {
    v17 = 0;
  }
  else
  {
    if ((_DWORD)v14 == 1)
      v17 = 1;
    else
      v17 = v14 - 1;
    v18 = v17;
    v69[v14] = v69[v18];
    v19 = 8 * v17;
    *((_QWORD *)&v67 + v14) = *(_QWORD *)((char *)&v67 + v19);
    v69[v18] = 0;
    v20 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(_QWORD *)(*(_QWORD *)this + 280));
    *v20 = 0u;
    v20[1] = 0u;
    v20[2] = 0u;
    v20[3] = 0u;
    v20[4] = 0u;
    v20[5] = 0u;
    v20[6] = 0u;
    v20[7] = 0u;
    v20[8] = 0u;
    v20[9] = 0u;
    v14 = (v14 + 1);
    v20[10] = 0u;
    v20[11] = 0u;
    *(_QWORD *)((char *)&v67 + v19) = v20;
  }
  v21 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v14, v13, 0xCu, v69, &v63, (unsigned int *)v6, 1);
  llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>((uint64_t)&v67, v14, (uint64_t)v69, (uint64_t)&v63);
  if (v8)
    llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
  v22 = v63 - 1;
  v23 = *(_QWORD *)(v67 + 8 * v22 + 96);
  v24 = *(_QWORD *)v4;
  *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 8) = v63;
  if (!(_DWORD)v2)
  {
LABEL_18:
    if ((_DWORD)v14 != 1)
      goto LABEL_24;
LABEL_19:
    inserted = 0;
    v32 = v21;
    if ((_DWORD)v21)
      goto LABEL_20;
    goto LABEL_22;
  }
  *(_QWORD *)(*(_QWORD *)(v24 + 16 * (v2 - 1))
            + 8 * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v24 + 16 * (v2 - 1))
                                                                                             + 8
                                                                                             * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v22;
  v25 = *(_QWORD *)v4;
  v26 = 16 * v5;
  while (1)
  {
    v27 = v26 - 16;
    if (v26 == 16)
      break;
    v28 = v25 + v26;
    v29 = *(unsigned int *)(v28 - 4);
    *(_QWORD *)(*(_QWORD *)(v28 - 16) + 8 * v29 + 96) = v23;
    v30 = *(_DWORD *)(v28 - 8) - 1;
    v26 = v27;
    if ((_DWORD)v29 != v30)
      goto LABEL_18;
  }
  *(_QWORD *)(*(_QWORD *)v25 + 8 * *(unsigned int *)(v25 + 12) + 128) = v23;
  if ((_DWORD)v14 == 1)
    goto LABEL_19;
LABEL_24:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  v35 = (v64 - 1);
  v36 = *(_QWORD *)(*((_QWORD *)&v67 + 1) + 8 * v35 + 96);
  if (v17 != 1)
  {
    v37 = *(_QWORD *)v4;
    *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 8) = v64;
    if ((_DWORD)v2)
    {
      *(_QWORD *)(*(_QWORD *)(v37 + 16 * (v2 - 1))
                + 8 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v37 + 16 * (v2 - 1))
                                                                                                 + 8
                                                                                                 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v35;
      v38 = *(_QWORD *)v4;
      v39 = 16 * v2;
      while (1)
      {
        v40 = v39 - 16;
        if (v39 == 16)
          break;
        v41 = v38 + v39;
        v42 = *(unsigned int *)(v41 - 4);
        *(_QWORD *)(*(_QWORD *)(v41 - 16) + 8 * v42 + 96) = v36;
        v43 = *(_DWORD *)(v41 - 8) - 1;
        v39 = v40;
        if ((_DWORD)v42 != v43)
          goto LABEL_32;
      }
      inserted = 0;
      *(_QWORD *)(*(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 12) + 128) = v36;
      if ((_DWORD)v14 != 2)
        goto LABEL_33;
    }
    else
    {
LABEL_32:
      inserted = 0;
      if ((_DWORD)v14 != 2)
        goto LABEL_33;
    }
LABEL_26:
    v32 = v21 - 1;
    if ((_DWORD)v21 == 1)
      goto LABEL_22;
    do
LABEL_20:
      llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
    while (!__CFADD__(v32++, 1));
    goto LABEL_22;
  }
  inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(this, v2, *((_QWORD *)&v67 + 1) & 0xFFFFFFFFFFFFFFC0 | v35, v36);
  v2 = (v2 + inserted);
  if ((_DWORD)v14 == 2)
    goto LABEL_26;
LABEL_33:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  v44 = (v65 - 1);
  v45 = *(_QWORD *)(v68 + 8 * v44 + 96);
  if (v17 == 2)
  {
    inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(this, v2, v68 & 0xFFFFFFFFFFFFFFC0 | v44, v45);
    v2 = (v2 + inserted);
    if ((_DWORD)v14 != 3)
      goto LABEL_35;
    goto LABEL_42;
  }
  v48 = *(_QWORD *)v4;
  *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 8) = v65;
  if (!(_DWORD)v2)
  {
LABEL_41:
    if ((_DWORD)v14 != 3)
      goto LABEL_35;
LABEL_42:
    v32 = v21 - 2;
    if ((_DWORD)v21 != 2)
      goto LABEL_20;
LABEL_22:
    *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 12) = HIDWORD(v21);
    return (uint64_t *)inserted;
  }
  *(_QWORD *)(*(_QWORD *)(v48 + 16 * (v2 - 1))
            + 8 * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v48 + 16 * (v2 - 1))
                                                                                             + 8
                                                                                             * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v44;
  v49 = *(_QWORD *)v4;
  v50 = 16 * v2;
  while (1)
  {
    v51 = v50 - 16;
    if (v50 == 16)
      break;
    v52 = v49 + v50;
    v53 = *(unsigned int *)(v52 - 4);
    *(_QWORD *)(*(_QWORD *)(v52 - 16) + 8 * v53 + 96) = v45;
    v54 = *(_DWORD *)(v52 - 8) - 1;
    v50 = v51;
    if ((_DWORD)v53 != v54)
      goto LABEL_41;
  }
  *(_QWORD *)(*(_QWORD *)v49 + 8 * *(unsigned int *)(v49 + 12) + 128) = v45;
  if ((_DWORD)v14 == 3)
    goto LABEL_42;
LABEL_35:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  v46 = (v66 - 1);
  v47 = *(_QWORD *)(*((_QWORD *)&v68 + 1) + 8 * v46 + 96);
  if (v17 == 3)
  {
    inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(this, v2, *((_QWORD *)&v68 + 1) & 0xFFFFFFFFFFFFFFC0 | v46, v47);
    LODWORD(v2) = v2 + inserted;
  }
  else
  {
    v55 = *(_QWORD *)v4;
    *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 8) = v66;
    if ((_DWORD)v2)
    {
      *(_QWORD *)(*(_QWORD *)(v55 + 16 * (v2 - 1))
                + 8 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v55 + 16 * (v2 - 1))
                                                                                                 + 8
                                                                                                 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v46;
      v56 = *(_QWORD *)v4;
      v57 = 16 * v2;
      while (1)
      {
        v58 = v57 - 16;
        if (v57 == 16)
          break;
        v59 = v56 + v57;
        v60 = *(unsigned int *)(v59 - 4);
        *(_QWORD *)(*(_QWORD *)(v59 - 16) + 8 * v60 + 96) = v47;
        v61 = *(_DWORD *)(v59 - 8) - 1;
        v57 = v58;
        if ((_DWORD)v60 != v61)
          goto LABEL_54;
      }
      *(_QWORD *)(*(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 12) + 128) = v47;
    }
  }
LABEL_54:
  if ((_DWORD)v14 == 4)
  {
    v32 = v21 - 3;
    if ((_DWORD)v21 == 3)
      goto LABEL_22;
    goto LABEL_20;
  }
  result = llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  __break(1u);
  return result;
}

uint64_t llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  _QWORD *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  _OWORD *v51;
  _OWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  BOOL v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  _OWORD *v104;
  _OWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  _OWORD *v125;
  _OWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  _OWORD *v130;
  _OWORD *v131;

  v4 = a2 - 1;
  if (a2 != 1)
  {
    v5 = (int)v4;
    while (1)
    {
      v6 = *(_DWORD *)(a3 + 4 * v5);
      v7 = *(_DWORD *)(a4 + 4 * v5);
      if (v6 != v7)
        break;
LABEL_3:
      if (!(_DWORD)--v5)
      {
        if (a2 < 2)
          return result;
        v74 = 0;
        while (1)
        {
          v75 = *(_DWORD *)(a3 + 4 * v74);
          v76 = *(_DWORD *)(a4 + 4 * v74);
          if (v75 != v76)
            break;
LABEL_102:
          if (++v74 == v4)
            return result;
        }
        LODWORD(v77) = v74;
        while (2)
        {
          v77 = (v77 + 1);
          if ((_DWORD)v77 == a2)
            goto LABEL_102;
          v79 = *(_QWORD *)(result + 8 * v77);
          v80 = *(unsigned int *)(a3 + 4 * v77);
          v81 = *(_QWORD *)(result + 8 * v74);
          v82 = v75 - v76;
          if ((int)(v75 - v76) >= 1)
          {
            LODWORD(v83) = 12 - v80;
            if (v75 >= v82)
              v78 = v75 - v76;
            else
              v78 = v75;
            if (v83 < v78)
              v78 = 12 - v80;
            if ((_DWORD)v80)
            {
              if (v80 < 0x32 || __CFADD__(v80 - 1, v78))
                goto LABEL_153;
              v84 = 8 * ((_DWORD)v80 - 1 + v78);
              v85 = 8 * (v80 - 1);
              v86 = v79 + v84 - v85 > v79 + v84 || v79 + 96 + v84 - v85 > v79 + 96 + v84;
              v87 = v86 || v79 > v79 + v85;
              v88 = v87 || v79 + 96 > v79 + 96 + v85;
              if (v88
                || (v89 = v85 + v79, (unint64_t)(v85 - v84) < 0x10)
                || (v90 = v79 + 96 + v85, v84 + v79 - v90 < 0x10)
                || (v91 = v79 + 96 + v84, v89 - v91 < 0x10)
                || v90 - v91 < 0x10)
              {
LABEL_153:
                v92 = *(_DWORD *)(a3 + 4 * v77);
              }
              else
              {
                v92 = *(_DWORD *)(a3 + 4 * v77) & 1;
                v93 = v80 & 0xFFFFFFFE;
                v94 = *(unsigned int *)(a3 + 4 * v77);
                do
                {
                  v95 = 8 * (v94 - 1);
                  v96 = 8 * (v78 - 1 + v94);
                  *(_OWORD *)(v79 - 8 + v96) = *(_OWORD *)(v79 - 8 + v95);
                  *(_OWORD *)(v79 + 88 + v96) = *(_OWORD *)(v79 + 88 + v95);
                  v94 -= 2;
                  v93 -= 2;
                }
                while (v93);
                if ((v80 & 0xFFFFFFFE) == v80)
                  goto LABEL_156;
              }
              v106 = (_QWORD *)(v79 + 8 * (v92 - 1));
              do
              {
                v107 = (_QWORD *)(v79 + 8 * (v78 - 1 + v92));
                *v107 = *v106;
                v107[12] = v106[12];
                --v106;
                --v92;
              }
              while (v92);
            }
LABEL_156:
            if (v78)
            {
              v108 = 0;
              v109 = v75 - v78;
              if (v75 < v82)
                v82 = v75;
              if (v82 >= v83)
                v83 = v83;
              else
                v83 = v82;
              if (v83 < 0xA || v75 - 1 < v109)
              {
LABEL_167:
                v112 = v75 - v78;
                goto LABEL_168;
              }
              v110 = 8 * (v78 - 1);
              v111 = 8 * (v75 - v78);
              if (v79 < v81 + v111 + v110 + 104 && v81 + v111 < v79 + v110 + 104)
              {
                v108 = 0;
                goto LABEL_167;
              }
              v108 = v83 & 0xFFFFFFFE;
              v112 = v109 + (v83 & 0xFFFFFFFE);
              v129 = v108;
              v130 = (_OWORD *)v79;
              do
              {
                v131 = (_OWORD *)(v81 + 8 * v109);
                *v130 = *v131;
                v130[6] = v131[6];
                ++v130;
                v109 += 2;
                v129 -= 2;
              }
              while (v129);
              if (v108 != v83)
              {
LABEL_168:
                v113 = (_QWORD *)(v79 + 8 * v108);
                do
                {
                  v114 = (_QWORD *)(v81 + 8 * v112);
                  *v113 = *v114;
                  v113[12] = v114[12];
                  ++v112;
                  ++v113;
                }
                while (v75 != v112);
              }
            }
LABEL_106:
            *(_DWORD *)(a3 + 4 * v77) += v78;
            v75 = *(_DWORD *)(a3 + 4 * v74) - v78;
            *(_DWORD *)(a3 + 4 * v74) = v75;
            v76 = *(_DWORD *)(a4 + 4 * v74);
            if (v75 >= v76)
              goto LABEL_102;
            continue;
          }
          break;
        }
        v97 = 12 - v75;
        if (v76 - v75 < v80)
          LODWORD(v98) = v76 - v75;
        else
          LODWORD(v98) = *(_DWORD *)(a3 + 4 * v77);
        if (v97 >= v98)
          v98 = v98;
        else
          v98 = v97;
        if ((_DWORD)v98)
        {
          if (v98 < 0xA
            || __CFADD__(v75, v98 - 1)
            || ((v99 = v81 + 8 * v75, v79 < v99 + 8 * v98 + 96) ? (v100 = v99 >= v79 + 8 * v98 + 96) : (v100 = 1),
                !v100))
          {
            v101 = 0;
            v102 = v75;
            goto LABEL_172;
          }
          v101 = v98 & 0xFFFFFFFE;
          v102 = v75 + (v98 & 0xFFFFFFFE);
          v103 = v101;
          v104 = *(_OWORD **)(result + 8 * v77);
          do
          {
            v105 = (_OWORD *)(v81 + 8 * v75);
            *v105 = *v104;
            v105[6] = v104[6];
            ++v104;
            v75 += 2;
            v103 -= 2;
          }
          while (v103);
          if (v101 != v98)
          {
LABEL_172:
            v115 = v98 - v101;
            v116 = (_QWORD *)(v79 + 8 * v101);
            do
            {
              v117 = (_QWORD *)(v81 + 8 * v102);
              *v117 = *v116;
              v117[12] = v116[12];
              ++v102;
              ++v116;
              --v115;
            }
            while (v115);
          }
        }
        if ((_DWORD)v98 != (_DWORD)v80)
        {
          v118 = 0;
          v119 = (v80 + ~(_DWORD)v98);
          if (v119 < 0x15
            || (int)v80 - 1 < v98
            || (v118 = 0, v120 = 8 * v98, (unint64_t)(v120 + 96) < 0x10)
            || (unint64_t)(96 - v120) < 0x10
            || !(_DWORD)v98)
          {
            v122 = v98;
            goto LABEL_185;
          }
          v121 = v119 + 1;
          v118 = (v119 + 1) & 0x1FFFFFFFELL;
          v122 = v98 + v118;
          v123 = v98;
          v124 = v118;
          v125 = (_OWORD *)v79;
          do
          {
            v126 = (_OWORD *)(v79 + 8 * v123);
            *v125 = *v126;
            v125[6] = v126[6];
            ++v125;
            v123 += 2;
            v124 -= 2;
          }
          while (v124);
          if (v121 != v118)
          {
LABEL_185:
            v127 = (_QWORD *)(v79 + 8 * v118);
            do
            {
              v128 = (_QWORD *)(v79 + 8 * v122);
              *v127 = *v128;
              v127[12] = v128[12];
              ++v122;
              ++v127;
            }
            while ((_DWORD)v80 != v122);
          }
        }
        v78 = -(int)v98;
        goto LABEL_106;
      }
    }
    v8 = v5;
    while (1)
    {
      if (!v8)
        goto LABEL_3;
      --v8;
      v10 = *(_QWORD *)(result + 8 * v5);
      v11 = *(_QWORD *)(result + 8 * v8);
      v12 = *(unsigned int *)(a3 + 4 * v8);
      v13 = v7 - v6;
      if ((int)(v7 - v6) < 1)
      {
        v44 = 12 - v12;
        if (v6 - v7 < v6)
          LODWORD(v45) = v6 - v7;
        else
          LODWORD(v45) = v6;
        if (v44 >= v45)
          v45 = v45;
        else
          v45 = v44;
        if ((_DWORD)v45)
        {
          if (v45 < 0xA
            || __CFADD__((_DWORD)v12, v45 - 1)
            || ((v46 = v11 + 8 * v12, v10 < v46 + 8 * v45 + 96) ? (v47 = v46 >= v10 + 8 * v45 + 96) : (v47 = 1), !v47))
          {
            v48 = 0;
            v49 = *(_DWORD *)(a3 + 4 * v8);
            goto LABEL_75;
          }
          v48 = v45 & 0xFFFFFFFE;
          v49 = v12 + (v45 & 0xFFFFFFFE);
          v50 = v48;
          v51 = *(_OWORD **)(result + 8 * v5);
          do
          {
            v52 = (_OWORD *)(v11 + 8 * v12);
            *v52 = *v51;
            v52[6] = v51[6];
            ++v51;
            LODWORD(v12) = v12 + 2;
            v50 -= 2;
          }
          while (v50);
          if (v48 != v45)
          {
LABEL_75:
            v53 = v45 - v48;
            v54 = (_QWORD *)(v10 + 8 * v48);
            do
            {
              v55 = (_QWORD *)(v11 + 8 * v49);
              *v55 = *v54;
              v55[12] = v54[12];
              ++v49;
              ++v54;
              --v53;
            }
            while (v53);
          }
        }
        if ((_DWORD)v45 != v6)
        {
          v56 = 0;
          v57 = v6 + ~(_DWORD)v45;
          if (v57 < 0x15
            || v6 - 1 < v45
            || (v56 = 0, v58 = 8 * v45, (unint64_t)(v58 + 96) < 0x10)
            || (unint64_t)(96 - v58) < 0x10
            || !(_DWORD)v45)
          {
            v60 = v45;
            goto LABEL_88;
          }
          v59 = v57 + 1;
          v56 = (v57 + 1) & 0x1FFFFFFFELL;
          v60 = v45 + v56;
          v61 = v45;
          v62 = v56;
          v63 = (_OWORD *)v10;
          do
          {
            v64 = (_OWORD *)(v10 + 8 * v61);
            *v63 = *v64;
            v63[6] = v64[6];
            ++v63;
            v61 += 2;
            v62 -= 2;
          }
          while (v62);
          if (v59 != v56)
          {
LABEL_88:
            v65 = (_QWORD *)(v10 + 8 * v56);
            do
            {
              v66 = (_QWORD *)(v10 + 8 * v60);
              *v65 = *v66;
              v65[12] = v66[12];
              ++v60;
              ++v65;
            }
            while (v6 != v60);
          }
        }
        v9 = -(int)v45;
        goto LABEL_7;
      }
      LODWORD(v14) = 12 - v6;
      if (v12 >= v13)
        v9 = v7 - v6;
      else
        v9 = *(_DWORD *)(a3 + 4 * v8);
      if (v14 < v9)
        v9 = 12 - v6;
      if (v6)
      {
        v15 = v6;
        if (v6 < 0x32)
          goto LABEL_38;
        v16 = v6 - 1;
        v17 = v6 - 1 + v9;
        if (__CFADD__(v16, v9))
          goto LABEL_38;
        v18 = 8 * v17;
        v19 = 8 * v16;
        v20 = v10 + v18 - v19 > v10 + v18 || v10 + 96 + v18 - v19 > v10 + 96 + v18;
        v21 = v20 || v10 > v10 + v19;
        if (v21 || v10 + 96 > v10 + 96 + v19)
          goto LABEL_38;
        v23 = v18 + v10;
        v24 = v10 + 96 + v18;
        v25 = v19 + v10;
        v26 = v19 + v10 - v23;
        v27 = v10 + 96 + v19;
        v28 = v23 - v27;
        v29 = v25 - v24;
        v30 = v27 - v24;
        v31 = v26 >= 0x10 && v28 >= 0x10;
        v32 = v31 && v29 >= 0x10;
        if (!v32 || v30 < 0x10)
        {
LABEL_38:
          v34 = v15;
LABEL_39:
          v35 = (_QWORD *)(v10 + 8 * (v34 - 1));
          do
          {
            v36 = (_QWORD *)(v10 + 8 * (v9 - 1 + v34));
            *v36 = *v35;
            v36[12] = v35[12];
            --v35;
            --v34;
          }
          while (v34);
          goto LABEL_41;
        }
        v34 = v15 & 1;
        v70 = v15 & 0xFFFFFFFE;
        v71 = v15;
        do
        {
          v72 = 8 * (v71 - 1);
          v73 = 8 * (v9 - 1 + v71);
          *(_OWORD *)(v10 - 8 + v73) = *(_OWORD *)(v10 - 8 + v72);
          *(_OWORD *)(v10 + 88 + v73) = *(_OWORD *)(v10 + 88 + v72);
          v71 -= 2;
          v70 -= 2;
        }
        while (v70);
        if ((v15 & 0xFFFFFFFE) != v15)
          goto LABEL_39;
      }
LABEL_41:
      if (v9)
      {
        v37 = 0;
        v38 = v12 - v9;
        if (v12 < v13)
          v13 = v12;
        if (v13 >= v14)
          v14 = v14;
        else
          v14 = v13;
        if (v14 < 0xA || (int)v12 - 1 < v38)
        {
LABEL_52:
          v41 = v12 - v9;
        }
        else
        {
          v39 = 8 * (v9 - 1);
          v40 = 8 * (v12 - v9);
          if (v10 < v11 + v40 + v39 + 104 && v11 + v40 < v10 + v39 + 104)
          {
            v37 = 0;
            goto LABEL_52;
          }
          v37 = v14 & 0xFFFFFFFE;
          v41 = v38 + (v14 & 0xFFFFFFFE);
          v67 = v37;
          v68 = (_OWORD *)v10;
          do
          {
            v69 = (_OWORD *)(v11 + 8 * v38);
            *v68 = *v69;
            v68[6] = v69[6];
            ++v68;
            v38 += 2;
            v67 -= 2;
          }
          while (v67);
          if (v37 == v14)
            goto LABEL_7;
        }
        v42 = (_QWORD *)(v10 + 8 * v37);
        do
        {
          v43 = (_QWORD *)(v11 + 8 * v41);
          *v42 = *v43;
          v42[12] = v43[12];
          ++v41;
          ++v42;
        }
        while ((_DWORD)v12 != v41);
      }
LABEL_7:
      *(_DWORD *)(a3 + 4 * v8) -= v9;
      v6 = *(_DWORD *)(a3 + 4 * v5) + v9;
      *(_DWORD *)(a3 + 4 * v5) = v6;
      v7 = *(_DWORD *)(a4 + 4 * v5);
      if (v6 >= v7)
        goto LABEL_3;
    }
  }
  return result;
}

void llvm::IntervalMapOverlaps<llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>,llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>>::advance(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v3 + 12) < *(_DWORD *)(v3 + 8))
    {
      v4 = *(unsigned int *)(a1 + 104);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a1 + 96);
        if (*(_DWORD *)(v5 + 12) < *(_DWORD *)(v5 + 8))
        {
          v6 = v3 + 16 * v1;
          v7 = *(_QWORD *)(v6 - 16);
          v8 = *(unsigned int *)(v6 - 4);
          v9 = a1 + 88;
          v10 = v5 + 16 * v4;
          v11 = *(_QWORD *)(v10 - 16);
          v12 = *(unsigned int *)(v10 - 4);
          v13 = *(_QWORD *)(v11 + 16 * v12);
          if (*(_QWORD *)(v7 + 16 * v8 + 8) >= v13)
          {
            v15 = *(_QWORD *)(v7 + 16 * v8);
            if (*(_QWORD *)(v11 + 16 * v12 + 8) < v15)
            {
              v16 = *(_QWORD *)v9;
              if (!*(_DWORD *)(*(_QWORD *)v9 + 272))
              {
                v17 = *(_DWORD *)(v16 + 276);
                if ((_DWORD)v12 == v17)
                  goto LABEL_25;
                do
                {
                  if (*(_QWORD *)(v16 + 16 * v12 + 8) >= v15)
                    goto LABEL_25;
                  LODWORD(v12) = v12 + 1;
                }
                while (v17 != (_DWORD)v12);
LABEL_24:
                LODWORD(v12) = v17;
                goto LABEL_25;
              }
              goto LABEL_23;
            }
          }
          else
          {
            v14 = *(_QWORD *)a1;
            if (*(_DWORD *)(*(_QWORD *)a1 + 272))
            {
              llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(a1, v13);
            }
            else
            {
              v18 = *(_DWORD *)(v14 + 276);
              if ((_DWORD)v8 != v18)
              {
                while (*(_QWORD *)(v14 + 16 * v8 + 8) < v13)
                {
                  LODWORD(v8) = v8 + 1;
                  if (v18 == (_DWORD)v8)
                  {
                    LODWORD(v8) = *(_DWORD *)(v14 + 276);
                    break;
                  }
                }
              }
              *(_DWORD *)(v6 - 4) = v8;
            }
            v19 = *(unsigned int *)(a1 + 16);
            if ((_DWORD)v19)
            {
              v20 = *(_QWORD *)(a1 + 8);
              if (*(_DWORD *)(v20 + 12) < *(_DWORD *)(v20 + 8))
              {
                v21 = *(_QWORD *)(a1 + 96) + 16 * *(unsigned int *)(a1 + 104);
                v22 = *(_QWORD *)(v21 - 16);
                v23 = *(unsigned int *)(v21 - 4);
                if (*(_QWORD *)(v22 + 16 * v23 + 8) < *(_QWORD *)(*(_QWORD *)(v20 + 16 * v19 - 16)
                                                                 + 16 * *(unsigned int *)(v20 + 16 * v19 - 4)))
                {
                  v24 = *(_QWORD *)(v22 + 16 * v23);
                  do
                  {
                    if (!v19)
                      break;
                    if (*(_DWORD *)(v20 + 12) < *(_DWORD *)(v20 + 8))
                    {
                      v27 = *(_QWORD *)a1;
                      if (*(_DWORD *)(*(_QWORD *)a1 + 272))
                      {
                        llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(a1, v24);
                      }
                      else
                      {
                        v28 = v20 + 16 * v19;
                        v29 = *(_DWORD *)(v28 - 4);
                        v30 = *(_DWORD *)(v27 + 276);
                        if (v29 != v30)
                        {
                          while (*(_QWORD *)(v27 + 16 * v29 + 8) < v24)
                          {
                            if (v30 == ++v29)
                            {
                              v29 = *(_DWORD *)(v27 + 276);
                              break;
                            }
                          }
                        }
                        *(_DWORD *)(v28 - 4) = v29;
                      }
                    }
                    v31 = *(unsigned int *)(a1 + 16);
                    if (!(_DWORD)v31)
                      break;
                    v32 = *(_QWORD *)(a1 + 8);
                    if (*(_DWORD *)(v32 + 12) >= *(_DWORD *)(v32 + 8))
                      break;
                    v33 = *(_QWORD *)(a1 + 96);
                    v34 = *(unsigned int *)(a1 + 104);
                    v10 = v33 + 16 * v34;
                    v12 = *(unsigned int *)(v10 - 4);
                    v15 = *(_QWORD *)(*(_QWORD *)(v32 + 16 * v31 - 16) + 16 * *(unsigned int *)(v32 + 16 * v31 - 4));
                    if (*(_QWORD *)(*(_QWORD *)(v10 - 16) + 16 * v12 + 8) >= v15)
                      break;
                    if ((_DWORD)v34 && *(_DWORD *)(v33 + 12) < *(_DWORD *)(v33 + 8))
                    {
                      v35 = *(_QWORD *)v9;
                      if (*(_DWORD *)(*(_QWORD *)v9 + 272))
                      {
LABEL_23:
                        llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(a1 + 88, v15);
                      }
                      else
                      {
                        v17 = *(_DWORD *)(v35 + 276);
                        if ((_DWORD)v12 != v17)
                        {
                          while (*(_QWORD *)(v35 + 16 * v12 + 8) < v15)
                          {
                            LODWORD(v12) = v12 + 1;
                            if (v17 == (_DWORD)v12)
                              goto LABEL_24;
                          }
                        }
LABEL_25:
                        *(_DWORD *)(v10 - 4) = v12;
                      }
                    }
                    v25 = *(unsigned int *)(a1 + 104);
                    if (!(_DWORD)v25)
                      break;
                    v26 = *(_QWORD *)(a1 + 96);
                    if (*(_DWORD *)(v26 + 12) >= *(_DWORD *)(v26 + 8))
                      break;
                    v20 = *(_QWORD *)(a1 + 8);
                    v19 = *(unsigned int *)(a1 + 16);
                    v24 = *(_QWORD *)(*(_QWORD *)(v26 + 16 * v25 - 16) + 16 * *(unsigned int *)(v26 + 16 * v25 - 4));
                  }
                  while (*(_QWORD *)(*(_QWORD *)(v20 + 16 * v19 - 16) + 16 * *(unsigned int *)(v20 + 16 * v19 - 4) + 8) < v24);
                }
              }
            }
          }
        }
      }
    }
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 16);
  v5 = v3 + 16 * v4;
  v6 = *(_QWORD *)(v5 - 16);
  if (*(_QWORD *)(v6 + 16 * (*(_DWORD *)(v5 - 8) - 1) + 8) >= a2)
  {
    v16 = *(_DWORD *)(v5 - 4);
    do
      v17 = *(_QWORD *)(v6 + 16 * v16++ + 8);
    while (v17 < a2);
    *(_DWORD *)(v5 - 4) = v16 - 1;
    return;
  }
  *(_DWORD *)(a1 + 16) = v4 - 1;
  v7 = v4 - 2;
  if ((_DWORD)v4 == 2)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(unsigned int *)(v3 + 12);
    v20 = *(_QWORD *)a1 + 8;
    v21 = *(unsigned int *)(*(_QWORD *)a1 + 276);
    if ((_DWORD)v19 != (_DWORD)v21)
      goto LABEL_20;
  }
  else
  {
    if ((_DWORD)v4 != 3)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 16 * (v4 - 3))
                     + 8 * *(unsigned int *)(v3 + 16 * (v4 - 3) + 12)
                     + 96) >= a2)
      {
LABEL_9:
        v10 = (uint64_t *)(v3 + 16 * v7);
        v11 = *v10;
        v14 = *((_DWORD *)v10 + 3);
        v12 = (_DWORD *)v10 + 3;
        v13 = v14;
        do
          v15 = *(_QWORD *)(v11 + 8 * v13++ + 96);
        while (v15 < a2);
        *v12 = v13 - 1;
        goto LABEL_12;
      }
      v8 = v4 - 4;
      while (1)
      {
        *(_DWORD *)(a1 + 16) = v8 + 2;
        if (!v8)
          break;
        v9 = *(_QWORD *)(*(_QWORD *)(v3 + 16 * v8) + 8 * *(unsigned int *)(v3 + 16 * v8 + 12) + 96);
        --v8;
        if (v9 >= a2)
        {
          v7 = v8 + 2;
          goto LABEL_9;
        }
      }
    }
    v18 = *(_QWORD *)a1;
    v19 = *(unsigned int *)(v3 + 12);
    if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v19 + 136) >= a2)
    {
      v28 = *(_DWORD *)(v3 + 28);
      do
        v29 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v28++ + 96);
      while (v29 < a2);
      *(_DWORD *)(v3 + 28) = v28 - 1;
      goto LABEL_12;
    }
    v20 = v18 + 8;
    v21 = *(unsigned int *)(v18 + 276);
    if ((_DWORD)v19 != (_DWORD)v21)
    {
LABEL_20:
      while (*(_QWORD *)(v20 + 8 * v19 + 128) < a2)
      {
        v19 = (v19 + 1);
        if ((_DWORD)v21 == (_DWORD)v19)
        {
          v19 = v21;
          break;
        }
      }
    }
  }
  v22 = *(_DWORD *)(v18 + 272);
  *(_DWORD *)(a1 + 16) = 0;
  v23 = *(_DWORD *)(a1 + 20);
  if (v22)
  {
    if (v23)
    {
      v24 = 0;
    }
    else
    {
      v38 = a2;
      v40 = a1;
      v34 = v21;
      v36 = a1 + 8;
      v30 = v20;
      v32 = v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, (void *)(a1 + 24), 1uLL, 16);
      v20 = v30;
      v19 = v32;
      v21 = v34;
      v2 = v36;
      a2 = v38;
      a1 = v40;
      v24 = *(unsigned int *)(v40 + 16);
      v3 = *(_QWORD *)(v40 + 8);
    }
    v25 = (uint64_t *)(v3 + 16 * v24);
    *v25 = v20;
    v25[1] = v21 | (v19 << 32);
    LODWORD(v25) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = (_DWORD)v25 + 1;
    if ((_DWORD)v25 == -1)
      return;
    goto LABEL_31;
  }
  if (v23)
  {
    v26 = 0;
  }
  else
  {
    v39 = a2;
    v41 = a1;
    v35 = v21;
    v37 = a1 + 8;
    v31 = v18;
    v33 = v19;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, (void *)(a1 + 24), 1uLL, 16);
    v18 = v31;
    v19 = v33;
    v21 = v35;
    v2 = v37;
    a2 = v39;
    a1 = v41;
    v26 = *(unsigned int *)(v41 + 16);
    v3 = *(_QWORD *)(v41 + 8);
  }
  v27 = (_QWORD *)(v3 + 16 * v26);
  *v27 = v18;
  v27[1] = v21 | (v19 << 32);
  LODWORD(v27) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = (_DWORD)v27 + 1;
  if ((_DWORD)v27 != -1)
  {
LABEL_31:
    if (*(_DWORD *)(*(_QWORD *)v2 + 12) >= *(_DWORD *)(*(_QWORD *)v2 + 8))
      return;
LABEL_12:
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind(a1, a2);
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::goToBegin(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;

  v2 = a1 + 1;
  v3 = *a1;
  if (*(_DWORD *)(*a1 + 272))
  {
    v4 = *(_DWORD *)(v3 + 276);
    *((_DWORD *)a1 + 4) = 0;
    if (*((_DWORD *)a1 + 5))
    {
      v5 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 1), a1 + 3, 1uLL, 16);
      v5 = *((unsigned int *)a1 + 4);
    }
    v6 = (_QWORD *)(*v2 + 16 * v5);
    *v6 = v3 + 8;
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 276);
    *((_DWORD *)a1 + 4) = 0;
    if (*((_DWORD *)a1 + 5))
    {
      v7 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 1), a1 + 3, 1uLL, 16);
      v7 = *((unsigned int *)a1 + 4);
    }
    v6 = (_QWORD *)(*v2 + 16 * v7);
    *v6 = v3;
  }
  v6[1] = v4;
  v8 = *((_DWORD *)a1 + 4);
  v9 = v8 + 1;
  *((_DWORD *)a1 + 4) = v8 + 1;
  v10 = *(_DWORD *)(*a1 + 272);
  if (v10)
    v11 = v8 >= v10;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v12 = a1[1];
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 16 * v8) + 8 * *(unsigned int *)(v12 + 16 * v8 + 12));
      if (v9 >= *((_DWORD *)a1 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, a1 + 3, v9 + 1, 16);
        v9 = *((_DWORD *)a1 + 4);
        v12 = a1[1];
      }
      v14 = (unint64_t *)(v12 + 16 * v9);
      *v14 = v13 & 0xFFFFFFFFFFFFFFC0;
      v14[1] = (v13 & 0x3F) + 1;
      v8 = *((_DWORD *)a1 + 4);
      v9 = v8 + 1;
      *((_DWORD *)a1 + 4) = v8 + 1;
    }
    while (v8 < v10);
  }
}

double mlir::Region::getOps<mlir::pdl_interp::FuncOp>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::GenericProgramPoint *v4;
  uint64_t (*v5)(void);
  __int128 v6;
  double result;
  _BYTE v8[32];
  __int128 v9;
  mlir::GenericProgramPoint *v10;
  __int128 v11;
  _BYTE v12[32];
  BOOL (*i)(uint64_t);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  BOOL (*v17)(uint64_t);
  __int128 v18;
  uint64_t v19;

  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&v12[8] = v18;
  v4 = v10;
  *(_QWORD *)v12 = v10;
  v11 = v9;
  *(_QWORD *)&v12[24] = v19;
  for (i = mlir::detail::op_filter_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::filter;
        *(_QWORD *)v12 != *(_QWORD *)&v12[24];
        v4 = *(mlir::GenericProgramPoint **)v12)
  {
    v5 = (uint64_t (*)(void))i;
    mlir::GenericProgramPoint::~GenericProgramPoint(v4);
    if ((v5() & 1) != 0)
      break;
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  v14 = v11;
  v15 = *(_OWORD *)v12;
  v16 = *(_OWORD *)&v12[16];
  v17 = i;
  *(_QWORD *)v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(_QWORD *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = mlir::detail::op_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::unwrap;
  *(_QWORD *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::filter;
  *(_QWORD *)(a2 + 120) = mlir::detail::op_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id;
}

uint64_t *llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _WORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v10 = buffer + 8;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v10 = buffer + 8;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *(_QWORD *)buffer = a3;
  buffer[4] = 0;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

void `anonymous namespace'::ByteCodeWriter::appendPDLValue(uint64_t a1, unint64_t a2)
{
  void *v4;
  __int16 v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
  {
    v5 = 0;
    v6 = *(_QWORD **)(a1 + 24);
    v7 = v6[1];
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) <= v6[2])
      goto LABEL_12;
    goto LABEL_22;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
  {
    v5 = 1;
    v6 = *(_QWORD **)(a1 + 24);
    v7 = v6[1];
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) <= v6[2])
      goto LABEL_12;
    goto LABEL_22;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v15 = (_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v15) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
      v5 = 3;
    else
      v5 = 5;
    v6 = *(_QWORD **)(a1 + 24);
    v7 = v6[1];
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > v6[2])
      goto LABEL_22;
  }
  else
  {
    if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
      v5 = 2;
    else
      v5 = 4 * (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    v6 = *(_QWORD **)(a1 + 24);
    v7 = v6[1];
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > v6[2])
    {
LABEL_22:
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, v6 + 3, v8, 2);
      v7 = v6[1];
    }
  }
LABEL_12:
  *(_WORD *)(*v6 + 2 * v7) = v5;
  ++v6[1];
  v10 = *(_QWORD **)(a1 + 24);
  v9 = *(uint64_t **)(a1 + 32);
  v14 = a2;
  v15 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v9, &v14, &v15))
  {
    v11 = *((_WORD *)v15 + 4);
  }
  else
  {
    v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v14, &v14, v15);
    v11 = 0;
    *v12 = v14;
    *((_WORD *)v12 + 4) = 0;
  }
  v13 = v10[1];
  if ((unint64_t)(v13 + 1) > v10[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v10, v10 + 3, v13 + 1, 2);
    v13 = v10[1];
  }
  *(_WORD *)(*v10 + 2 * v13) = v11;
  ++v10[1];
}

void `anonymous namespace'::ByteCodeWriter::append(_anonymous_namespace_::ByteCodeWriter *this, mlir::Block *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  mlir::Block *v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  mlir::Block *v17;

  v17 = a2;
  v3 = *((_DWORD *)this + 4);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(*(_QWORD *)this + 40 * v5);
    v7 = (mlir::Block *)*v6;
    if ((mlir::Block *)*v6 == a2)
      goto LABEL_14;
    v8 = 0;
    v9 = 1;
    while (v7 != (mlir::Block *)-4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == (mlir::Block *)-8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (uint64_t *)(*(_QWORD *)this + 40 * v5);
      v7 = (mlir::Block *)*v6;
      if ((mlir::Block *)*v6 == a2)
        goto LABEL_14;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
  }
  else
  {
    v12 = 0;
  }
  v6 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::InsertIntoBucket<mlir::Block * const&>((uint64_t)this, v12, (uint64_t *)&v17);
LABEL_14:
  v13 = *(_DWORD *)(*((_QWORD *)this + 3) + 8);
  v14 = *((unsigned int *)v6 + 4);
  if (v14 >= *((_DWORD *)v6 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v6 + 1), v6 + 3, v14 + 1, 4);
    LODWORD(v14) = *((_DWORD *)v6 + 4);
  }
  *(_DWORD *)(v6[1] + 4 * v14) = v13;
  ++*((_DWORD *)v6 + 4);
  v15 = (_QWORD *)*((_QWORD *)this + 3);
  v16 = v15[1];
  if (v15[2] < (unint64_t)(v16 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v15, v15 + 3, v16 + 2, 2);
    v16 = v15[1];
  }
  *(_DWORD *)(*v15 + 2 * v16) = 0;
  v15[1] += 2;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::InsertIntoBucket<mlir::Block * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(40 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = 5 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = 40 * v17 - 40;
  v19 = buffer;
  if (v18 < 0x28)
    goto LABEL_34;
  v20 = v18 / 0x28 + 1;
  v19 = &buffer[5 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  v22 = buffer;
  do
  {
    *v22 = -4096;
    v22[5] = -4096;
    v22 += 10;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 5;
    }
    while (v19 != &buffer[5 * v17]);
  }
  v7 = *a3;
  v23 = v17 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = &buffer[5 * v24];
  v25 = *a2;
  if (*a3 != *a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = &buffer[5 * v24];
      v25 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x400000000;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6 - 40;
    if (v8 < 0x28)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[5 * v6];
      do
      {
        *v9 = -4096;
        v9 += 5;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x28 + 1;
    v9 = &v7[5 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[5] = -4096;
      v12 += 10;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = *(_DWORD *)(a1 + 16) - 1;
        v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
        v17 = (_QWORD *)(*(_QWORD *)a1 + 40 * v16);
        v18 = *v17;
        if (v14 != *v17)
        {
          v20 = 0;
          v21 = 1;
          while (v18 != -4096)
          {
            if (v20)
              v22 = 0;
            else
              v22 = v18 == -8192;
            if (v22)
              v20 = v17;
            v23 = v16 + v21++;
            v16 = v23 & v15;
            v17 = (_QWORD *)(*(_QWORD *)a1 + 40 * (v23 & v15));
            v18 = *v17;
            if (v14 == *v17)
              goto LABEL_14;
          }
          if (v20)
            v17 = v20;
        }
LABEL_14:
        *v17 = v14;
        v17[1] = v17 + 3;
        v17[2] = 0x400000000;
        if (*((_DWORD *)v4 + 4))
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
        ++*(_DWORD *)(a1 + 8);
        v19 = (uint64_t *)v4[1];
        if (v19 != v4 + 3)
          free(v19);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
}

void `anonymous namespace'::ByteCodeWriter::append<mlir::detail::TypedValue<mlir::pdl::PDLType>,mlir::SuccessorRange>(_anonymous_namespace_::ByteCodeWriter *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t *v8;
  __int16 v9;
  _QWORD *v10;
  uint64_t v11;
  mlir::Block **v12;
  mlir::Block *v13;
  unint64_t v14;
  _QWORD *v15;

  v7 = (_QWORD *)*((_QWORD *)a1 + 3);
  v8 = (uint64_t *)*((_QWORD *)a1 + 4);
  v14 = a2;
  v15 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v8, &v14, &v15))
  {
    v9 = *((_WORD *)v15 + 4);
  }
  else
  {
    v10 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v8, (uint64_t)&v14, &v14, v15);
    v9 = 0;
    *v10 = v14;
    *((_WORD *)v10 + 4) = 0;
  }
  v11 = v7[1];
  if ((unint64_t)(v11 + 1) > v7[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v7, v7 + 3, v11 + 1, 2);
    *(_WORD *)(*v7 + 2 * v7[1]++) = v9;
    if (!a4)
      return;
  }
  else
  {
    *(_WORD *)(*v7 + 2 * v11) = v9;
    ++v7[1];
    if (!a4)
      return;
  }
  v12 = (mlir::Block **)(a3 + 24);
  do
  {
    v13 = *v12;
    v12 += 4;
    --a4;
  }
  while (a4);
}

uint64_t *`anonymous namespace'::Generator::getMemIndex<mlir::Attribute>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  BOOL v49;
  unsigned int v50;

  v6 = *(_QWORD *)(a1 + 120);
  v4 = a1 + 120;
  v5 = v6;
  v7 = **(_WORD **)(v4 + 96);
  v8 = *(_DWORD *)(v4 + 16);
  if (!v8)
  {
    v10 = 0;
    goto LABEL_13;
  }
  v9 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (uint64_t *)(v5 + 16 * v9);
  v11 = *v10;
  if (*v10 != a2)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & (v8 - 1);
      v10 = (uint64_t *)(v5 + 16 * v9);
      v11 = *v10;
      if (*v10 == a2)
        return v10 + 1;
    }
    if (v12)
      v10 = v12;
LABEL_13:
    v16 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 8) - **(_QWORD **)(v4 + 64);
    v17 = *(_DWORD *)(a1 + 128);
    if (4 * v17 + 4 >= 3 * v8)
    {
      v8 *= 2;
    }
    else if (v8 + ~v17 - *(_DWORD *)(a1 + 132) > v8 >> 3)
    {
      goto LABEL_15;
    }
    llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v4, v8);
    v43 = *(_QWORD *)(a1 + 120);
    v44 = *(_DWORD *)(a1 + 136) - 1;
    v45 = v44 & ((a2 >> 4) ^ (a2 >> 9));
    v10 = (uint64_t *)(v43 + 16 * v45);
    v46 = *v10;
    if (*v10 == a2)
    {
      v18 = a2;
LABEL_16:
      ++*(_DWORD *)(a1 + 128);
      if (v18 != -4096)
        --*(_DWORD *)(a1 + 132);
      *v10 = a2;
      *((_WORD *)v10 + 4) = v7 + (v16 >> 3);
      v19 = *(char ***)(a1 + 184);
      v21 = v19[1];
      v20 = (unint64_t)v19[2];
      if ((unint64_t)v21 < v20)
      {
        *(_QWORD *)v21 = a2;
        v22 = (uint64_t)(v21 + 8);
LABEL_40:
        v19[1] = (char *)v22;
        return v10 + 1;
      }
      v23 = *v19;
      v24 = v21 - *v19;
      v25 = v24 >> 3;
      v26 = (v24 >> 3) + 1;
      if (v26 >> 61)
        abort();
      v27 = v20 - (_QWORD)v23;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v29 = operator new(8 * v28);
        v30 = &v29[8 * v25];
        v31 = &v29[8 * v28];
        *(_QWORD *)v30 = a2;
        v22 = (uint64_t)(v30 + 8);
        v32 = (char *)(v21 - v23);
        if (v21 == v23)
          goto LABEL_38;
      }
      else
      {
        v29 = 0;
        v30 = (char *)(8 * v25);
        v31 = 0;
        *(_QWORD *)(8 * v25) = a2;
        v22 = 8 * v25 + 8;
        v32 = (char *)(v21 - v23);
        if (v21 == v23)
        {
LABEL_38:
          *v19 = v30;
          v19[1] = (char *)v22;
          v19[2] = v31;
          if (v21)
            operator delete(v21);
          goto LABEL_40;
        }
      }
      v33 = (unint64_t)(v32 - 8);
      if (v33 < 0x58)
        goto LABEL_64;
      if ((unint64_t)(v21 - v29 - v24) < 0x20)
        goto LABEL_64;
      v34 = (v33 >> 3) + 1;
      v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
      v36 = &v21[-v35];
      v30 -= v35;
      v37 = &v29[8 * v25 - 16];
      v38 = v21 - 16;
      v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v40 = *(_OWORD *)v38;
        *(v37 - 1) = *((_OWORD *)v38 - 1);
        *v37 = v40;
        v37 -= 2;
        v38 -= 32;
        v39 -= 4;
      }
      while (v39);
      v21 = v36;
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_64:
        do
        {
          v41 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v30 - 1) = v41;
          v30 -= 8;
        }
        while (v21 != v23);
      }
      v21 = *v19;
      goto LABEL_38;
    }
    v47 = 0;
    v48 = 1;
    while (v46 != -4096)
    {
      if (v47)
        v49 = 0;
      else
        v49 = v46 == -8192;
      if (v49)
        v47 = v10;
      v50 = v45 + v48++;
      v45 = v50 & v44;
      v10 = (uint64_t *)(v43 + 16 * v45);
      v46 = *v10;
      v18 = a2;
      if (*v10 == a2)
        goto LABEL_16;
    }
    if (v47)
      v10 = v47;
LABEL_15:
    v18 = *v10;
    goto LABEL_16;
  }
  return v10 + 1;
}

_QWORD *llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_39;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_39:
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if ((_DWORD)v3)
    {
      v15 = 0;
      v16 = v11 - 1;
      v17 = v4;
      do
      {
        v24 = *(_QWORD *)v17;
        if ((*(_QWORD *)v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = ((v24 >> 4) ^ (v24 >> 9)) & v16;
          v23 = *(_QWORD *)a1 + 16 * v25;
          v26 = *(_QWORD *)v23;
          if (v24 != *(_QWORD *)v23)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v23;
              v30 = v25 + v28++;
              v25 = v30 & v16;
              v23 = *(_QWORD *)a1 + 16 * (v30 & v16);
              v26 = *(_QWORD *)v23;
              if (v24 == *(_QWORD *)v23)
                goto LABEL_23;
            }
            if (v27)
              v23 = v27;
          }
LABEL_23:
          *(_QWORD *)v23 = v24;
          *(_WORD *)(v23 + 8) = *((_WORD *)v17 + 4);
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_18;
    v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    v20 = result + 2;
    v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -4096;
      *v20 = -4096;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v22 = &result[2 * v18];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

void `anonymous namespace'::ByteCodeWriter::append<`anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::OperationType>,unsigned int,unsigned short,mlir::SuccessorRange>(uint64_t *a1, __int16 a2, unint64_t a3, int a4, __int16 a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  __int16 v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  mlir::Block **v25;
  mlir::Block *v26;
  unint64_t v27;
  _QWORD *v28;

  v14 = (_QWORD *)a1[3];
  v15 = v14[1];
  if ((unint64_t)(v15 + 1) > v14[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v14 + 3, v15 + 1, 2);
    v15 = v14[1];
  }
  *(_WORD *)(*v14 + 2 * v15) = a2;
  ++v14[1];
  v16 = (_QWORD *)a1[3];
  v17 = (uint64_t *)a1[4];
  v27 = a3;
  v28 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v17, &v27, &v28))
  {
    v18 = *((_WORD *)v28 + 4);
  }
  else
  {
    v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v17, (uint64_t)&v27, &v27, v28);
    v18 = 0;
    *v19 = v27;
    *((_WORD *)v19 + 4) = 0;
  }
  v20 = v16[1];
  if ((unint64_t)(v20 + 1) > v16[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v16, v16 + 3, v20 + 1, 2);
    v20 = v16[1];
  }
  *(_WORD *)(*v16 + 2 * v20) = v18;
  ++v16[1];
  v21 = (_QWORD *)a1[3];
  v22 = v21[1];
  if (v21[2] < (unint64_t)(v22 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v21 + 3, v22 + 2, 2);
    v22 = v21[1];
  }
  *(_DWORD *)(*v21 + 2 * v22) = a4;
  v21[1] += 2;
  v23 = (_QWORD *)a1[3];
  v24 = v23[1];
  if ((unint64_t)(v24 + 1) > v23[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v23 + 3, v24 + 1, 2);
    *(_WORD *)(*v23 + 2 * v23[1]++) = a5;
    if (!a7)
      return;
  }
  else
  {
    *(_WORD *)(*v23 + 2 * v24) = a5;
    ++v23[1];
    if (!a7)
      return;
  }
  v25 = (mlir::Block **)(a6 + 24);
  do
  {
    v26 = *v25;
    v25 += 4;
    --a7;
  }
  while (a7);
}

void `anonymous namespace'::ByteCodeWriter::append<mlir::OperationName>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  char **v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  BOOL v53;
  unsigned int v54;

  v6 = a2 + 120;
  v7 = *(_QWORD *)(a2 + 120);
  v8 = **(_WORD **)(a2 + 216);
  v10 = **(_QWORD **)(a2 + 184);
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 184) + 8);
  v11 = *(_DWORD *)(a2 + 136);
  if (v11)
  {
    v12 = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v13 = (uint64_t *)(v7 + 16 * v12);
    v14 = *v13;
    if (*v13 == a3)
      goto LABEL_41;
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & (v11 - 1);
      v13 = (uint64_t *)(v7 + 16 * v12);
      v14 = *v13;
      if (*v13 == a3)
        goto LABEL_41;
    }
    if (v15)
      v13 = v15;
  }
  else
  {
    v13 = 0;
  }
  v19 = v9 - v10;
  v20 = *(_DWORD *)(a2 + 128);
  if (4 * v20 + 4 >= 3 * v11)
  {
    v11 *= 2;
  }
  else if (v11 + ~v20 - *(_DWORD *)(a2 + 132) > v11 >> 3)
  {
LABEL_15:
    v21 = *v13;
    goto LABEL_16;
  }
  llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v6, v11);
  v47 = *(_QWORD *)(a2 + 120);
  v48 = *(_DWORD *)(a2 + 136) - 1;
  v49 = v48 & ((a3 >> 4) ^ (a3 >> 9));
  v13 = (uint64_t *)(v47 + 16 * v49);
  v50 = *v13;
  if (*v13 != a3)
  {
    v51 = 0;
    v52 = 1;
    while (v50 != -4096)
    {
      if (v51)
        v53 = 0;
      else
        v53 = v50 == -8192;
      if (v53)
        v51 = v13;
      v54 = v49 + v52++;
      v49 = v54 & v48;
      v13 = (uint64_t *)(v47 + 16 * v49);
      v50 = *v13;
      v21 = a3;
      if (*v13 == a3)
        goto LABEL_16;
    }
    if (v51)
      v13 = v51;
    goto LABEL_15;
  }
  v21 = a3;
LABEL_16:
  ++*(_DWORD *)(a2 + 128);
  if (v21 != -4096)
    --*(_DWORD *)(a2 + 132);
  *v13 = a3;
  *((_WORD *)v13 + 4) = v8 + (v19 >> 3);
  v22 = *(char ***)(a2 + 184);
  v24 = v22[1];
  v23 = (unint64_t)v22[2];
  if ((unint64_t)v24 >= v23)
  {
    v26 = *v22;
    v27 = v24 - *v22;
    v28 = v27 >> 3;
    v29 = (v27 >> 3) + 1;
    if (v29 >> 61)
      abort();
    v30 = v23 - (_QWORD)v26;
    if (v30 >> 2 > v29)
      v29 = v30 >> 2;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v32 = operator new(8 * v31);
      v33 = &v32[8 * v28];
      v34 = &v32[8 * v31];
      *(_QWORD *)v33 = a3;
      v25 = (uint64_t)(v33 + 8);
      v35 = (char *)(v24 - v26);
      if (v24 == v26)
        goto LABEL_38;
    }
    else
    {
      v32 = 0;
      v33 = (char *)(8 * v28);
      v34 = 0;
      *(_QWORD *)(8 * v28) = a3;
      v25 = 8 * v28 + 8;
      v35 = (char *)(v24 - v26);
      if (v24 == v26)
      {
LABEL_38:
        *v22 = v33;
        v22[1] = (char *)v25;
        v22[2] = v34;
        if (v24)
          operator delete(v24);
        goto LABEL_40;
      }
    }
    v36 = (unint64_t)(v35 - 8);
    if (v36 < 0x58)
      goto LABEL_66;
    if ((unint64_t)(v24 - v32 - v27) < 0x20)
      goto LABEL_66;
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v24[-v38];
    v33 -= v38;
    v40 = &v32[8 * v28 - 16];
    v41 = v24 - 16;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    v24 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_66:
      do
      {
        v44 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *((_QWORD *)v33 - 1) = v44;
        v33 -= 8;
      }
      while (v24 != v26);
    }
    v24 = *v22;
    goto LABEL_38;
  }
  *(_QWORD *)v24 = a3;
  v25 = (uint64_t)(v24 + 8);
LABEL_40:
  v22[1] = (char *)v25;
LABEL_41:
  v45 = *((_WORD *)v13 + 4);
  v46 = a1[1];
  if ((unint64_t)(v46 + 1) > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v46 + 1, 2);
    v46 = a1[1];
  }
  *(_WORD *)(*a1 + 2 * v46) = v45;
  ++a1[1];
}

void `anonymous namespace'::ByteCodeWriter::append<`anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::RangeType>,mlir::ArrayAttr,mlir::SuccessorRange>(uint64_t *a1, __int16 a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  mlir::Block **v19;
  mlir::Block *v20;
  unint64_t v21;
  _QWORD *v22;

  v12 = (_QWORD *)a1[3];
  v13 = v12[1];
  if ((unint64_t)(v13 + 1) > v12[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v12 + 3, v13 + 1, 2);
    v13 = v12[1];
  }
  *(_WORD *)(*v12 + 2 * v13) = a2;
  ++v12[1];
  v14 = (_QWORD *)a1[3];
  v15 = (uint64_t *)a1[4];
  v21 = a3;
  v22 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v15, &v21, &v22))
  {
    v16 = *((_WORD *)v22 + 4);
  }
  else
  {
    v17 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v15, (uint64_t)&v21, &v21, v22);
    v16 = 0;
    *v17 = v21;
    *((_WORD *)v17 + 4) = 0;
  }
  v18 = v14[1];
  if ((unint64_t)(v18 + 1) > v14[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v14, v14 + 3, v18 + 1, 2);
    v18 = v14[1];
  }
  *(_WORD *)(*v14 + 2 * v18) = v16;
  ++v14[1];
  if (a6)
  {
    v19 = (mlir::Block **)(a5 + 24);
    do
    {
      v20 = *v19;
      v19 += 4;
      --a6;
    }
    while (a6);
  }
}

void `anonymous namespace'::ByteCodeWriter::append<`anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::OperationType>>(uint64_t a1, __int16 a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  __int16 v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v6 = *(_QWORD **)(a1 + 24);
  v7 = v6[1];
  if ((unint64_t)(v7 + 1) > v6[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*(_QWORD *)(a1 + 24), v6 + 3, v7 + 1, 2);
    v7 = v6[1];
  }
  *(_WORD *)(*v6 + 2 * v7) = a2;
  ++v6[1];
  v8 = *(_QWORD **)(a1 + 24);
  v9 = *(uint64_t **)(a1 + 32);
  v13 = a3;
  v14 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v9, &v13, &v14))
  {
    v10 = *((_WORD *)v14 + 4);
  }
  else
  {
    v11 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v13, &v13, v14);
    v10 = 0;
    *v11 = v13;
    *((_WORD *)v11 + 4) = 0;
  }
  v12 = v8[1];
  if ((unint64_t)(v12 + 1) > v8[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v8, v8 + 3, v12 + 1, 2);
    v12 = v8[1];
  }
  *(_WORD *)(*v8 + 2 * v12) = v10;
  ++v8[1];
}

void `anonymous namespace'::ByteCodeWriter::append<mlir::detail::TypedValue<mlir::pdl::OperationType>,mlir::detail::TypedValue<mlir::pdl::ValueType>>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  __int16 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int16 v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v5 = *(_QWORD **)(a1 + 24);
  v6 = *(uint64_t **)(a1 + 32);
  v15 = a2;
  v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v6, &v15, &v16))
  {
    v7 = *((_WORD *)v16 + 4);
  }
  else
  {
    v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v6, (uint64_t)&v15, &v15, v16);
    v7 = 0;
    *v8 = v15;
    *((_WORD *)v8 + 4) = 0;
  }
  v9 = v5[1];
  if ((unint64_t)(v9 + 1) > v5[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v5, v5 + 3, v9 + 1, 2);
    v9 = v5[1];
  }
  *(_WORD *)(*v5 + 2 * v9) = v7;
  ++v5[1];
  v11 = *(_QWORD **)(a1 + 24);
  v10 = *(uint64_t **)(a1 + 32);
  v15 = a3;
  v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v10, &v15, &v16))
  {
    v12 = *((_WORD *)v16 + 4);
  }
  else
  {
    v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v10, (uint64_t)&v15, &v15, v16);
    v12 = 0;
    *v13 = v15;
    *((_WORD *)v13 + 4) = 0;
  }
  v14 = v11[1];
  if ((unint64_t)(v14 + 1) > v11[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v11, v11 + 3, v14 + 1, 2);
    v14 = v11[1];
  }
  *(_WORD *)(*v11 + 2 * v14) = v12;
  ++v11[1];
}

void `anonymous namespace'::ByteCodeWriter::append<`anonymous namespace'::OpCode,unsigned int,mlir::detail::TypedValue<mlir::pdl::OperationType>>(uint64_t a1, __int16 a2, int a3, unint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  __int16 v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;

  v8 = *(_QWORD **)(a1 + 24);
  v9 = v8[1];
  if ((unint64_t)(v9 + 1) > v8[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*(_QWORD *)(a1 + 24), v8 + 3, v9 + 1, 2);
    v9 = v8[1];
  }
  *(_WORD *)(*v8 + 2 * v9) = a2;
  ++v8[1];
  v10 = *(_QWORD **)(a1 + 24);
  v11 = v10[1];
  if (v10[2] < (unint64_t)(v11 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*(_QWORD *)(a1 + 24), v10 + 3, v11 + 2, 2);
    v11 = v10[1];
  }
  *(_DWORD *)(*v10 + 2 * v11) = a3;
  v10[1] += 2;
  v12 = *(_QWORD **)(a1 + 24);
  v13 = *(uint64_t **)(a1 + 32);
  v17 = a4;
  v18 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v13, &v17, &v18))
  {
    v14 = *((_WORD *)v18 + 4);
  }
  else
  {
    v15 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v13, (uint64_t)&v17, &v17, v18);
    v14 = 0;
    *v15 = v17;
    *((_WORD *)v15 + 4) = 0;
  }
  v16 = v12[1];
  if ((unint64_t)(v16 + 1) > v12[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v12, v12 + 3, v16 + 1, 2);
    v16 = v12[1];
  }
  *(_WORD *)(*v12 + 2 * v16) = v14;
  ++v12[1];
}

uint64_t llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::growAndEmplaceBack<mlir::detail::PDLByteCodePattern>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v14;

  v14 = 0;
  v4 = a1 + 16;
  v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 104, &v14);
  v6 = &v5[104 * *(unsigned int *)(a1 + 8)];
  v7 = *a2;
  *((_QWORD *)v6 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v6 = v7;
  *((_QWORD *)v6 + 3) = v6 + 40;
  *((_QWORD *)v6 + 4) = 0x200000000;
  if (*((_DWORD *)a2 + 8))
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v6 + 24), (uint64_t)a2 + 24);
  v8 = *(__int128 *)((char *)a2 + 56);
  v9 = v6 + 88;
  *((_QWORD *)v6 + 9) = v6 + 88;
  v10 = (uint64_t)(v6 + 72);
  *(_OWORD *)(v10 - 16) = v8;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_DWORD *)a2 + 20))
    llvm::SmallVectorImpl<llvm::SMRange>::operator=(v10, (uint64_t)a2 + 72);
  *v9 = *(__int128 *)((char *)a2 + 88);
  llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v5);
  v11 = v14;
  if (*(_QWORD *)a1 != v4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v5;
  v12 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 12) = v11;
  return (uint64_t)&v5[104 * v12 - 104];
}

void llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 104 * v2;
    do
    {
      v8 = v6 + v5;
      v9 = a2 + v5;
      v10 = *(_OWORD *)(v6 + v5);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v6 + v5 + 16);
      *(_OWORD *)v9 = v10;
      *(_QWORD *)(a2 + v5 + 24) = a2 + v5 + 40;
      *(_QWORD *)(v9 + 32) = 0x200000000;
      if (*(_DWORD *)(v6 + v5 + 32))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a2 + v5 + 24, v8 + 24);
      v11 = *(_OWORD *)(v8 + 56);
      v12 = (_OWORD *)(v9 + 88);
      *(_QWORD *)(v9 + 72) = v9 + 88;
      v13 = v9 + 72;
      *(_OWORD *)(v13 - 16) = v11;
      *(_QWORD *)(v13 + 8) = 0;
      if (*(_DWORD *)(v8 + 80))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v13, v6 + v5 + 72);
      *v12 = *(_OWORD *)(v8 + 88);
      v5 += 104;
    }
    while (v8 + 104 != v7);
    v14 = *((_DWORD *)a1 + 2);
    if (v14)
    {
      v15 = *a1;
      v16 = 104 * v14;
      do
      {
        v17 = v15 + v16;
        v18 = *(void **)(v15 + v16 - 32);
        if ((void *)(v15 + v16 - 16) != v18)
          free(v18);
        v19 = *(void **)(v17 - 80);
        if ((void *)(v17 - 64) != v19)
          free(v19);
        v16 -= 104;
      }
      while (v16);
    }
  }
}

void `anonymous namespace'::ByteCodeWriter::append<`anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::OperationType>,mlir::DenseIntElementsAttr,mlir::SuccessorRange>(uint64_t *a1, __int16 a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  char **v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  mlir::Block **v59;
  mlir::Block *v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;

  v12 = (_QWORD *)a1[3];
  v13 = v12[1];
  if ((unint64_t)(v13 + 1) > v12[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v12 + 3, v13 + 1, 2);
    v13 = v12[1];
  }
  *(_WORD *)(*v12 + 2 * v13) = a2;
  ++v12[1];
  v14 = (_QWORD *)a1[3];
  v15 = (uint64_t *)a1[4];
  v71 = a3;
  v72 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v15, &v71, &v72))
  {
    v16 = *((_WORD *)v72 + 4);
  }
  else
  {
    v17 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v15, (uint64_t)&v71, &v71, v72);
    v16 = 0;
    *v17 = v71;
    *((_WORD *)v17 + 4) = 0;
  }
  v18 = v14[1];
  if ((unint64_t)(v18 + 1) > v14[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v14, v14 + 3, v18 + 1, 2);
    v18 = v14[1];
  }
  *(_WORD *)(*v14 + 2 * v18) = v16;
  ++v14[1];
  v19 = (_QWORD *)a1[3];
  v20 = a1[4];
  v21 = *(_QWORD *)(v20 + 120);
  v22 = **(_WORD **)(v20 + 216);
  v23 = *(_DWORD *)(v20 + 136);
  if (v23)
  {
    v24 = (v23 - 1) & ((a4 >> 4) ^ (a4 >> 9));
    v25 = (uint64_t *)(v21 + 16 * v24);
    v26 = *v25;
    if (*v25 == a4)
      goto LABEL_48;
    v27 = 0;
    v28 = 1;
    while (v26 != -4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -8192;
      if (v29)
        v27 = v25;
      v30 = v24 + v28++;
      v24 = v30 & (v23 - 1);
      v25 = (uint64_t *)(v21 + 16 * v24);
      v26 = *v25;
      if (*v25 == a4)
        goto LABEL_48;
    }
    v70 = a5;
    if (v27)
      v25 = v27;
  }
  else
  {
    v70 = a5;
    v25 = 0;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v20 + 184) + 8) - **(_QWORD **)(v20 + 184);
  v32 = *(_DWORD *)(v20 + 128);
  if (4 * v32 + 4 >= 3 * v23)
  {
    v23 *= 2;
  }
  else if (v23 + ~v32 - *(_DWORD *)(v20 + 132) > v23 >> 3)
  {
LABEL_22:
    v33 = *v25;
    goto LABEL_23;
  }
  llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v20 + 120, v23);
  v61 = *(_QWORD *)(v20 + 120);
  v62 = *(_DWORD *)(v20 + 136) - 1;
  v63 = v62 & ((a4 >> 4) ^ (a4 >> 9));
  v25 = (uint64_t *)(v61 + 16 * v63);
  v64 = *v25;
  if (*v25 != a4)
  {
    v65 = 0;
    v66 = 1;
    while (v64 != -4096)
    {
      if (v65)
        v67 = 0;
      else
        v67 = v64 == -8192;
      if (v67)
        v65 = v25;
      v68 = v63 + v66++;
      v63 = v68 & v62;
      v25 = (uint64_t *)(v61 + 16 * v63);
      v64 = *v25;
      v33 = a4;
      if (*v25 == a4)
        goto LABEL_23;
    }
    if (v65)
      v25 = v65;
    goto LABEL_22;
  }
  v33 = a4;
LABEL_23:
  ++*(_DWORD *)(v20 + 128);
  if (v33 != -4096)
    --*(_DWORD *)(v20 + 132);
  *v25 = a4;
  *((_WORD *)v25 + 4) = v22 + (v31 >> 3);
  v34 = *(char ***)(v20 + 184);
  v36 = v34[1];
  v35 = (unint64_t)v34[2];
  if ((unint64_t)v36 >= v35)
  {
    v38 = *v34;
    v39 = v36 - *v34;
    v40 = v39 >> 3;
    v41 = (v39 >> 3) + 1;
    if (v41 >> 61)
      abort();
    v42 = v35 - (_QWORD)v38;
    if (v42 >> 2 > v41)
      v41 = v42 >> 2;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
      v43 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      v69 = (char *)(v36 - *v34);
      if (v43 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v44 = operator new(8 * v43);
      v39 = (uint64_t)v69;
      v45 = &v44[8 * v40];
      v46 = &v44[8 * v43];
      *(_QWORD *)v45 = a4;
      v37 = (uint64_t)(v45 + 8);
      v47 = (char *)(v36 - v38);
      if (v36 == v38)
        goto LABEL_45;
    }
    else
    {
      v44 = 0;
      v45 = (char *)(8 * v40);
      v46 = 0;
      *(_QWORD *)(8 * v40) = a4;
      v37 = 8 * v40 + 8;
      v47 = (char *)(v36 - v38);
      if (v36 == v38)
      {
LABEL_45:
        *v34 = v45;
        v34[1] = (char *)v37;
        v34[2] = v46;
        a5 = v70;
        if (v36)
          operator delete(v36);
        goto LABEL_47;
      }
    }
    v48 = (unint64_t)(v47 - 8);
    if (v48 < 0x58)
      goto LABEL_77;
    if ((unint64_t)(v36 - v44 - v39) < 0x20)
      goto LABEL_77;
    v49 = (v48 >> 3) + 1;
    v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
    v51 = &v36[-v50];
    v45 -= v50;
    v52 = &v44[8 * v40 - 16];
    v53 = v36 - 16;
    v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v55 = *(_OWORD *)v53;
      *(v52 - 1) = *((_OWORD *)v53 - 1);
      *v52 = v55;
      v52 -= 2;
      v53 -= 32;
      v54 -= 4;
    }
    while (v54);
    v36 = v51;
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_77:
      do
      {
        v56 = *((_QWORD *)v36 - 1);
        v36 -= 8;
        *((_QWORD *)v45 - 1) = v56;
        v45 -= 8;
      }
      while (v36 != v38);
    }
    v36 = *v34;
    goto LABEL_45;
  }
  *(_QWORD *)v36 = a4;
  v37 = (uint64_t)(v36 + 8);
  a5 = v70;
LABEL_47:
  v34[1] = (char *)v37;
LABEL_48:
  v57 = *((_WORD *)v25 + 4);
  v58 = v19[1];
  if ((unint64_t)(v58 + 1) > v19[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v19, v19 + 3, v58 + 1, 2);
    *(_WORD *)(*v19 + 2 * v19[1]++) = v57;
    if (!a6)
      return;
  }
  else
  {
    *(_WORD *)(*v19 + 2 * v58) = v57;
    ++v19[1];
    if (!a6)
      return;
  }
  v59 = (mlir::Block **)(a5 + 24);
  do
  {
    v60 = *v59;
    v59 += 4;
    --a6;
  }
  while (a6);
}

void llvm::ReversePostOrderTraversal<mlir::Region *,llvm::GraphTraits<mlir::Region *>>::Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::Block *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  _OWORD v7[4];
  void *v8[2];
  _OWORD v9[20];
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[41];

  v14[40] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v2)
    v3 = (mlir::Block *)(v2 - 8);
  else
    v3 = 0;
  llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>::po_iterator((uint64_t)&v11, v3);
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v8[0] = 0;
  memset(v7, 0, sizeof(v7));
  v4 = (char *)v7 + 8;
  v5 = (char *)v7 + 8;
  v6 = 8;
  v8[1] = (char *)v9 + 8;
  DWORD1(v9[0]) = 8;
  std::copy[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((const void **)&v11, (uint64_t)&v4);
  if (v8[1] != (char *)v9 + 8)
    free(v8[1]);
  if (v5 != v4)
    free(v5);
  if (v13 != v14)
    free(v13);
  if (v12 != v11)
    free(v12);
}

uint64_t std::copy[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>(const void **a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  void *v12;
  void *v13;
  const void *v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[320];
  void *v18;
  void *v19;
  const void *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[41];
  void *v24;
  void *v25;
  _QWORD v26[42];

  v26[41] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v18, &v20, (const llvm::SmallPtrSetImplBase *)a1);
  v21 = v23;
  v22 = 0x800000000;
  if (&v18 != (void **)a1)
  {
    v4 = *((_DWORD *)a1 + 26);
    if (v4)
    {
      if (v4 < 9)
      {
        v6 = v23;
        v5 = *((_DWORD *)a1 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, *((unsigned int *)a1 + 26), 40);
        v5 = *((_DWORD *)a1 + 26);
        if (!v5)
        {
LABEL_8:
          LODWORD(v22) = v4;
          goto LABEL_9;
        }
        v6 = v21;
      }
      memcpy(v6, a1[12], 40 * v5);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v12, &v14, (const llvm::SmallPtrSetImplBase *)a2);
  v15 = v17;
  v16 = 0x800000000;
  if (&v12 != (void **)a2)
  {
    v7 = *(_DWORD *)(a2 + 104);
    if (v7)
    {
      if (v7 < 9)
      {
        v9 = v17;
        v8 = *(_DWORD *)(a2 + 104);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, *(unsigned int *)(a2 + 104), 40);
        v8 = *(_DWORD *)(a2 + 104);
        if (!v8)
        {
LABEL_16:
          LODWORD(v16) = v7;
          goto LABEL_17;
        }
        v9 = v15;
      }
      memcpy(v9, *(const void **)(a2 + 96), 40 * v8);
      goto LABEL_16;
    }
  }
LABEL_17:
  std::__copy[abi:nn180100]<std::_ClassicAlgPolicy,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((uint64_t)&v18, (uint64_t)&v12);
  v10 = v26[40];
  if (v25 != v26)
    free(v25);
  if (v24 != (void *)v23[40])
    free(v24);
  if (v15 != v17)
    free(v15);
  if (v13 != v12)
    free(v13);
  if (v21 != v23)
    free(v21);
  if (v19 != v18)
    free(v19);
  return v10;
}

void std::__copy[abi:nn180100]<std::_ClassicAlgPolicy,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7[2];
  _BYTE v8[320];
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12[2];
  _QWORD v13[41];

  v13[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v9, &v11, 8, (uint64_t *)a1);
  v12[0] = v13;
  v12[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v12, (uint64_t *)(a1 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v4, &v6, 8, (uint64_t *)a2);
  v7[0] = v8;
  v7[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v7, (uint64_t *)(a2 + 96));
  std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((uint64_t)&v9, (uint64_t)&v4);
  if (v7[0] != v8)
    free(v7[0]);
  if (v5 != v4)
    free(v5);
  if (v12[0] != v13)
    free(v12[0]);
  if (v10 != v9)
    free(v10);
}

void std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7[2];
  _BYTE v8[320];
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12[2];
  _QWORD v13[41];

  v13[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v9, &v11, 8, (uint64_t *)a1);
  v12[0] = v13;
  v12[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v12, (uint64_t *)(a1 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v4, &v6, 8, (uint64_t *)a2);
  v7[0] = v8;
  v7[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v7, (uint64_t *)(a2 + 96));
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>,0>();
  if (v7[0] != v8)
    free(v7[0]);
  if (v5 != v4)
    free(v5);
  if (v12[0] != v13)
    free(v12[0]);
  if (v10 != v9)
    free(v10);
}

void std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>,0>()
{
  const llvm::SmallPtrSetImplBase *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const llvm::SmallPtrSetImplBase *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17[2];
  _BYTE v18[320];
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22[2];
  _BYTE v23[320];
  void *v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32[2];
  _BYTE v33[320];
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37[2];
  _BYTE v38[320];
  void *v39;
  void *v40;
  void *v41;
  int v42;
  _QWORD v43[41];
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47[2];
  _BYTE v48[320];
  void *v49;
  void *v50;
  const void *v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[320];
  void *v55;
  void *v56;
  void *v57;
  int v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  int v63;
  _QWORD v64[41];

  v0 = (const llvm::SmallPtrSetImplBase *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v7 = v6;
  v64[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v49, &v51, v0);
  v52 = v54;
  v53 = 0x800000000;
  if (&v49 != (void **)v5)
  {
    v8 = *((_DWORD *)v5 + 26);
    if (v8)
    {
      if (v8 < 9)
      {
        v10 = v54;
        v9 = *((_DWORD *)v5 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v54, *((unsigned int *)v5 + 26), 40);
        v9 = *((_DWORD *)v5 + 26);
        if (!v9)
        {
LABEL_8:
          LODWORD(v53) = v8;
          goto LABEL_9;
        }
        v10 = v52;
      }
      memcpy(v10, *((const void **)v5 + 12), 40 * v9);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v44, &v46, 8, (uint64_t *)v4);
  v47[0] = v48;
  v47[1] = (void *)0x800000000;
  if (*(_DWORD *)(v4 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v47, (uint64_t *)(v4 + 96));
  std::__unwrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>((uint64_t)&v49, (uint64_t)&v44, &v55);
  if (v47[0] != v48)
    free(v47[0]);
  if (v45 != v44)
    free(v45);
  if (v52 != v54)
    free(v52);
  if (v50 != v49)
    free(v50);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v34, &v36, 8, (uint64_t *)&v55);
  v37[0] = v38;
  v37[1] = (void *)0x800000000;
  if (v58)
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v37, (uint64_t *)&v57);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v29, &v31, 8, (uint64_t *)&v60);
  v32[0] = v33;
  v32[1] = (void *)0x800000000;
  if (v63)
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v32, (uint64_t *)&v62);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((llvm::SmallPtrSetImplBase *)&v34, (uint64_t)&v29, v2, (uint64_t)&v39);
  if (v32[0] != v33)
    free(v32[0]);
  if (v30 != v29)
    free(v30);
  if (v37[0] != v38)
    free(v37[0]);
  if (v35 != v34)
    free(v35);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v19, &v21, 8, (uint64_t *)v5);
  v22[0] = v23;
  v22[1] = (void *)0x800000000;
  if (*((_DWORD *)v5 + 26))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v22, (uint64_t *)v5 + 12);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v14, &v16, 8, (uint64_t *)&v39);
  v17[0] = v18;
  v17[1] = (void *)0x800000000;
  if (v42)
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v17, (uint64_t *)&v41);
  std::__rewrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>((uint64_t)&v19, (uint64_t)&v14, (uint64_t)&v24);
  v11 = v43[40];
  v12 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(v7, (void *)(v7 + 32), 8, (uint64_t *)&v24);
  *(_QWORD *)(v12 + 96) = v7 + 112;
  v13 = v12 + 96;
  *(_QWORD *)(v13 + 8) = 0x800000000;
  if (v27)
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v13, (uint64_t *)&v26);
  *(_QWORD *)(v7 + 432) = v11;
  if (v26 != &v28)
    free(v26);
  if (v25 != v24)
    free(v25);
  if (v17[0] != v18)
    free(v17[0]);
  if (v15 != v14)
    free(v15);
  if (v22[0] != v23)
    free(v22[0]);
  if (v20 != v19)
    free(v20);
  if (v41 != v43)
    free(v41);
  if (v40 != v39)
    free(v40);
  if (v62 != v64)
    free(v62);
  if (v61 != v60)
    free(v61);
  if (v57 != &v59)
    free(v57);
  if (v56 != v55)
    free(v56);
}

void std::__unwrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11[2];
  _BYTE v12[320];
  void *v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21[2];
  _BYTE v22[320];
  void *v23;
  void *v24;
  void *v25;
  int v26;
  _QWORD v27[41];

  v27[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v18, &v20, 8, (uint64_t *)a1);
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v21, (uint64_t *)(a1 + 96));
  std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>,0>((const void **)&v18, (uint64_t)&v23);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v8, &v10, 8, (uint64_t *)a2);
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v11, (uint64_t *)(a2 + 96));
  std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>,0>((const void **)&v8, (uint64_t)&v13);
  v6 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)a3, a3 + 4, 8, (uint64_t *)&v23);
  *(_QWORD *)(v6 + 96) = a3 + 14;
  v7 = v6 + 96;
  *(_QWORD *)(v7 + 8) = 0x800000000;
  if (v26)
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v7, (uint64_t *)&v25);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(a3 + 54), a3 + 58, 8, (uint64_t *)&v13);
  a3[66] = a3 + 68;
  a3[67] = 0x800000000;
  if (v16)
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)(a3 + 66), (uint64_t *)&v15);
  if (v15 != &v17)
    free(v15);
  if (v14 != v13)
    free(v14);
  if (v11[0] != v12)
    free(v11[0]);
  if (v9 != v8)
    free(v9);
  if (v25 != v27)
    free(v25);
  if (v24 != v23)
    free(v24);
  if (v21[0] != v22)
    free(v21[0]);
  if (v19 != v18)
    free(v19);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>@<X0>(llvm::SmallPtrSetImplBase *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t result;

  v8 = (uint64_t *)((char *)this + 96);
  v9 = (void *)(a3 + 16);
  while (1)
  {
    v10 = *((_DWORD *)this + 26);
    v11 = *((_QWORD *)this + 12);
    if (v10 != *(_DWORD *)(a2 + 104))
      goto LABEL_12;
    if (!v10)
      break;
    v12 = *(_QWORD **)(a2 + 96);
    v13 = (_QWORD *)*((_QWORD *)this + 12);
    while (*v13 == *v12 && v13[1] == v12[1] && v13[2] == v12[2] && v13[3] == v12[3] && v13[4] == v12[4])
    {
      v13 += 5;
      v12 += 5;
      if (v13 == (_QWORD *)(v11 + 40 * v10))
        goto LABEL_16;
    }
LABEL_12:
    v14 = *(_QWORD *)(v11 + 40 * v10 - 40);
    v15 = *(unsigned int *)(a3 + 8);
    if (v15 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v9, v15 + 1, 8);
      v15 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
    ++*(_DWORD *)(a3 + 8);
    v16 = *((_DWORD *)this + 26) - 1;
    *((_DWORD *)this + 26) = v16;
    if (v16)
      llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild(this);
  }
LABEL_16:
  v17 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a4, (void *)(a4 + 32), 8, (uint64_t *)this);
  *(_QWORD *)(v17 + 96) = a4 + 112;
  result = v17 + 96;
  *(_QWORD *)(result + 8) = 0x800000000;
  if (*((_DWORD *)this + 26))
    result = llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(result, v8);
  *(_QWORD *)(a4 + 432) = a3;
  return result;
}

void std::__rewrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9[2];
  _BYTE v10[320];
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14[2];
  _QWORD v15[41];

  v15[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v11, &v13, 8, (uint64_t *)a1);
  v14[0] = v15;
  v14[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v14, (uint64_t *)(a1 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v6, &v8, 8, (uint64_t *)a2);
  v9[0] = v10;
  v9[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v9, (uint64_t *)(a2 + 96));
  std::__rewrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>>((uint64_t)&v11, (uint64_t)&v6, a3);
  if (v9[0] != v10)
    free(v9[0]);
  if (v7 != v6)
    free(v7);
  if (v14[0] != v15)
    free(v14[0]);
  if (v12 != v11)
    free(v12);
}

void std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>,0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[41];

  v13[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v8, &v10, (const llvm::SmallPtrSetImplBase *)a1);
  v11 = v13;
  v12 = 0x800000000;
  if (&v8 != (void **)a1)
  {
    v4 = *((_DWORD *)a1 + 26);
    if (v4)
    {
      if (v4 < 9)
      {
        v6 = v13;
        v5 = *((_DWORD *)a1 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, *((unsigned int *)a1 + 26), 40);
        v5 = *((_DWORD *)a1 + 26);
        if (!v5)
        {
LABEL_8:
          LODWORD(v12) = v4;
          goto LABEL_9;
        }
        v6 = v11;
      }
      memcpy(v6, a1[12], 40 * v5);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a2, (void *)(a2 + 32), 8, (uint64_t *)&v8);
  *(_QWORD *)(a2 + 96) = a2 + 112;
  v7 = a2 + 96;
  *(_QWORD *)(v7 + 8) = 0x800000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v7, (uint64_t *)&v11);
  if (v11 != v13)
    free(v11);
  if (v9 != v8)
    free(v9);
}

void std::__rewrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE v12[320];
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[41];

  v17[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v13, &v15, 8, (uint64_t *)a1);
  v16[0] = v17;
  v16[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v16, (uint64_t *)(a1 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v7, &v9, 8, (uint64_t *)a2);
  v10 = v12;
  v11 = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)&v10, (uint64_t *)(a2 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a3, (void *)(a3 + 32), 8, (uint64_t *)&v7);
  *(_QWORD *)(a3 + 96) = a3 + 112;
  v6 = a3 + 96;
  *(_QWORD *)(v6 + 8) = 0x800000000;
  if ((_DWORD)v11)
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v6, (uint64_t *)&v10);
  if (v10 != v12)
    free(v10);
  if (v8 != v7)
    free(v8);
  if (v16[0] != v17)
    free(v16[0]);
  if (v14 != v13)
    free(v14);
}

uint64_t llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>::po_iterator(uint64_t a1, mlir::Block *a2)
{
  void *v4;
  uint64_t *v5;
  mlir::Block *v6;
  mlir::Block *v7;
  mlir::Block *v8;
  uint64_t v9;
  mlir::Block **v10;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  mlir::Block *v20;
  mlir::Block *v21;
  uint64_t v22;
  mlir::Block *v23;
  mlir::Block *v24;

  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  v4 = (void *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = a1 + 112;
  v5 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0x800000000;
  *(_QWORD *)(a1 + 16) = 0x100000008;
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v20, a2);
  v6 = v20;
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v20, a2);
  v8 = v20;
  v7 = v21;
  v9 = *(unsigned int *)(a1 + 104);
  if (v9 >= *(_DWORD *)(a1 + 108))
  {
    v20 = a2;
    v21 = v6;
    v22 = 0;
    v23 = v8;
    v24 = v7;
    v12 = v9 + 1;
    v13 = *v5 + 40 * (unint64_t)v9 > (unint64_t)&v20;
    if (*v5 <= (unint64_t)&v20 && v13)
    {
      v19 = (char *)&v20 - *v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v5, v4, v12, 40);
      v14 = *v5;
      v15 = &v19[*v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v5, v4, v12, 40);
      v14 = *v5;
      v15 = (char *)&v20;
    }
    v16 = v14 + 40 * *(unsigned int *)(a1 + 104);
    v17 = *(_OWORD *)v15;
    v18 = *((_OWORD *)v15 + 1);
    *(_QWORD *)(v16 + 32) = *((_QWORD *)v15 + 4);
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
  }
  else
  {
    v10 = (mlir::Block **)(*(_QWORD *)(a1 + 96) + 40 * v9);
    *v10 = a2;
    v10[1] = v6;
    v10[2] = 0;
    v10[3] = v8;
    v10[4] = v7;
  }
  ++*(_DWORD *)(a1 + 104);
  llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)a1);
  return a1;
}

_QWORD *`anonymous namespace'::ByteCodeExecutor::readList<mlir::PDLValue,mlir::PDLValue>(_QWORD *result, uint64_t a2)
{
  int v2;

  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(unsigned __int16 *)*result;
  *result += 2;
  if (v2)
    __asm { BR              X11 }
  return result;
}

_OWORD *std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v2];
  v10 = &v8[16 * v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v11 = v9 + 16;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      *((_OWORD *)v9 - 1) = *((_OWORD *)v13 - 1);
      v9 -= 16;
      *((_QWORD *)v13 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v13 -= 16;
    }
    while (v13 != v12);
    v13 = (char *)*a1;
    v14 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v14 != v13)
    {
      v16 = (void *)*((_QWORD *)v14 - 2);
      v14 -= 16;
      v15 = v16;
      if (v16)
        operator delete[](v15);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void mlir::PDLResultList::~PDLResultList(mlir::PDLResultList *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char *v12;
  char *v13;

  v2 = (char *)*((_QWORD *)this + 32);
  v3 = *((unsigned int *)this + 66);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 - 16;
    do
    {
      v6 = *(void **)&v5[v4];
      if (v6)
        operator delete[](v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 32);
  }
  if (v2 != (char *)this + 272)
    free(v2);
  v7 = (char *)*((_QWORD *)this + 24);
  v8 = *((unsigned int *)this + 50);
  if ((_DWORD)v8)
  {
    v9 = 16 * v8;
    v10 = v7 - 16;
    do
    {
      v11 = *(void **)&v10[v9];
      if (v11)
        operator delete[](v11);
      v9 -= 16;
    }
    while (v9);
    v7 = (char *)*((_QWORD *)this + 24);
  }
  if (v7 != (char *)this + 208)
    free(v7);
  v12 = (char *)*((_QWORD *)this + 16);
  if (v12 != (char *)this + 144)
    free(v12);
  v13 = (char *)*((_QWORD *)this + 8);
  if (v13 != (char *)this + 80)
    free(v13);
  if (*(mlir::PDLResultList **)this != (mlir::PDLResultList *)((char *)this + 16))
    free(*(void **)this);
}

void `anonymous namespace'::ByteCodeExecutor::readList(unsigned __int16 **a1, uint64_t a2)
{
  int v2;
  int v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(*a1)++;
  if (v2)
  {
    v5 = 0;
    v6 = (void *)(a2 + 16);
    do
    {
      while (1)
      {
        v7 = (uint64_t)*a1;
        v8 = **a1;
        *a1 += 2;
        v9 = *(uint64_t **)&a1[9][4 * *(unsigned __int16 *)(v7 + 2)];
        if (v8 != 4)
          break;
        v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v10 + 1, 8);
          v10 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = v9;
        ++*(_DWORD *)(a2 + 8);
        if (++v5 == v2)
          return;
      }
      v12 = *v9;
      v11 = v9[1];
      v13 = *(unsigned int *)(a2 + 8);
      if (v11 + v13 > (unint64_t)*(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v11 + v13, 8);
        v13 = *(unsigned int *)(a2 + 8);
      }
      v14 = *(_QWORD *)a2;
      v18 = v12;
      v19 = 0;
      if (v11)
      {
        v15 = 0;
        v16 = (uint64_t *)(v14 + 8 * v13);
        do
        {
          *v16++ = mlir::ValueRange::dereference_iterator(&v18, v15);
          v15 = ++v19;
        }
        while (v18 != v12 || v15 != v11);
        LODWORD(v13) = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(a2 + 8) = v13 + v11;
      ++v5;
    }
    while (v5 != v2);
  }
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedOperandSegments>(_QWORD *a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v15 = 96;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, __guard))(*(_QWORD *)*a1 + 32))(*a1, v2[423]);
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedResultSegments>(_QWORD *a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedResultSegments<Empty>]";
      v15 = 95;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedResultSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedResultSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v2[433]);
}

uint64_t llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCode::MatchResult,false>::growAndEmplaceBack<mlir::Location &,mlir::detail::PDLByteCodePattern const&,mlir::PatternBenefit &>(uint64_t a1, _QWORD *a2, uint64_t a3, __int16 *a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  __int16 v11;
  int v12;
  unsigned int v13;
  unint64_t v15;

  v15 = 0;
  v8 = a1 + 16;
  v9 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 120, &v15);
  v10 = &v9[120 * *(unsigned int *)(a1 + 8)];
  v11 = *a4;
  *(_QWORD *)v10 = *a2;
  *((_QWORD *)v10 + 1) = v10 + 24;
  *((_QWORD *)v10 + 13) = a3;
  *((_QWORD *)v10 + 11) = v10 + 104;
  *((_QWORD *)v10 + 2) = 0x600000000;
  *((_QWORD *)v10 + 9) = v10 + 88;
  *((_QWORD *)v10 + 10) = 0;
  *((_QWORD *)v10 + 12) = 0;
  *((_WORD *)v10 + 56) = v11;
  llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCode::MatchResult,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v9);
  v12 = v15;
  if (*(_QWORD *)a1 != v8)
    free(*(void **)a1);
  *(_QWORD *)a1 = v9;
  v13 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 12) = v12;
  return (uint64_t)&v9[120 * v13 - 120];
}

void llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCode::MatchResult,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 120 * v2;
    do
    {
      v9 = v6 + v5;
      v10 = (_QWORD *)(a2 + v5);
      *v10 = *(_QWORD *)(v6 + v5);
      *(_QWORD *)(a2 + v5 + 8) = a2 + v5 + 24;
      v10[2] = 0x600000000;
      if (*(_DWORD *)(v6 + v5 + 16))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a2 + v5 + 8, v9 + 8);
      v11 = v10 + 11;
      v10[9] = v10 + 11;
      v10[10] = 0;
      v12 = (uint64_t)(v10 + 9);
      if (*(_DWORD *)(v9 + 80))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v12, v6 + v5 + 72);
      v13 = (_QWORD *)(a2 + v5 + 104);
      *v11 = v13;
      *(_QWORD *)(a2 + v5 + 96) = 0;
      if (*(_DWORD *)(v9 + 96))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v11, v6 + v5 + 88);
      v8 = *(_QWORD *)(v9 + 104);
      *(_WORD *)(a2 + v5 + 112) = *(_WORD *)(v9 + 112);
      *v13 = v8;
      v5 += 120;
    }
    while (v9 + 120 != v7);
    v14 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v14)
    {
      v15 = *a1;
      v16 = 120 * v14;
      do
      {
        v17 = *(void **)(v15 + v16 - 32);
        if ((void *)(v15 + v16 - 16) != v17)
          free(v17);
        v18 = *(void **)(v15 + v16 - 48);
        if ((void *)(v15 + v16 - 32) != v18)
          free(v18);
        v19 = *(void **)(v15 + v16 - 112);
        if ((void *)(v15 + v16 - 96) != v19)
          free(v19);
        v16 -= 120;
      }
      while (v16);
    }
  }
}

double llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::assignRemote(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = &v4[8 * v5];
    do
    {
      v8 = (unsigned int *)*((_QWORD *)v6 - 1);
      v6 -= 8;
      v7 = v8;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        v9 = *(unsigned int **)v7;
        v10 = v7[2];
        if ((_DWORD)v10)
        {
          v11 = 8 * v10;
          v12 = (char *)(v9 - 2);
          do
          {
            v13 = *(_QWORD *)&v12[v11];
            *(_QWORD *)&v12[v11] = 0;
            if (v13)
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            v11 -= 8;
          }
          while (v11);
          v9 = *(unsigned int **)v7;
        }
        if (v9 != v7 + 4)
          free(v9);
        operator delete(v7);
      }
    }
    while (v6 != v4);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void std::vector<void const*>::__append(unint64_t *a1, unint64_t a2, const double *a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (_QWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_44;
      v17 = v16 + 1;
      v8 = (_QWORD *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = vld1q_dup_f64(a3);
      v19 = (float64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
          *v8++ = *(_QWORD *)a3;
        while (v8 != (_QWORD *)(v7 + 8 * a2));
      }
      v8 = (_QWORD *)(v7 + 8 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    v9 = v7 - *a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + a2;
    if (v11 >> 61)
      abort();
    v12 = v6 - *a1;
    v13 = v12 >> 2;
    if (v12 >> 2 <= v11)
      v13 = (v9 >> 3) + a2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v10];
    v22 = (char *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_45;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[8 * v10];
      if (&v15[8 * a2 + v9] > (char *)a3)
        goto LABEL_45;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vld1q_dup_f64(a3);
    v27 = (float64x2_t *)&v15[8 * v10 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      do
      {
        *(double *)v24 = *a3;
        v24 += 8;
      }
      while (v24 != v22);
    }
    v29 = (_QWORD *)*a1;
    if (v7 != *a1)
    {
      v30 = v7 - *a1 - 8;
      if (v30 < 0x58)
        goto LABEL_46;
      if (v7 - (unint64_t)&v15[v9] < 0x20)
        goto LABEL_46;
      v31 = (v30 >> 3) + 1;
      v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (_QWORD *)(v7 - v32);
      v21 -= v32;
      v33 = &v15[8 * v10 - 16];
      v34 = (__int128 *)(v7 - 16);
      v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
        {
          v37 = *--v8;
          *(_QWORD *)(v21 - 8) = v37;
          v21 -= 8;
        }
        while (v8 != v29);
      }
      v8 = (_QWORD *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
}

void std::vector<llvm::OwningArrayRef<mlir::Operation *>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      abort();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
    }
    else
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        *((_QWORD *)v5 - 2) = 0;
        *((_QWORD *)v5 - 1) = 0;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
      v17 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
      while (v17 != v5)
      {
        v19 = (void *)*((_QWORD *)v17 - 2);
        v17 -= 16;
        v18 = v19;
        if (v19)
          operator delete[](v18);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void std::vector<mlir::TypeRange>::__append(char **a1, unint64_t a2, _OWORD *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;

  v7 = a1[1];
  v6 = a1[2];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      v13 = 16 * a2;
      v14 = &v7[16 * a2];
      do
      {
        *(_OWORD *)v7 = *a3;
        v7 += 16;
        v13 -= 16;
      }
      while (v13);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (v7 - *a1) >> 4;
    if ((v8 + a2) >> 60)
      abort();
    v9 = v6 - *a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2)
      v10 = v8 + a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v15 = &v12[16 * v8];
    v16 = 16 * a2;
    v17 = &v15[16 * a2];
    v18 = v15;
    do
    {
      *(_OWORD *)v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v19);
      v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
      operator delete(v7);
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v8;
  std::vector<unsigned int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  std::vector<unsigned int>::size_type v16;
  std::vector<unsigned int>::size_type v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  std::vector<unsigned int>::size_type v23;
  unsigned int *v24;
  std::vector<unsigned int>::size_type v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  unsigned int v36;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v8 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      v16 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || end < __x + 1 && &end[__n] > __x)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = &end[v17 & 0x7FFFFFFFFFFFFFF8];
      v18 = vld1q_dup_f32((const float *)__x);
      v19 = (float32x4_t *)(end + 4);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *__x;
        while (v8 != &end[__n]);
      }
      v8 = &end[__n];
    }
    this->__end_ = v8;
  }
  else
  {
    begin = this->__begin_;
    v10 = (char *)end - (char *)this->__begin_;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + __n;
    if (v12 >> 62)
      abort();
    v13 = (char *)value - (char *)begin;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unsigned int *)&v15[4 * v11];
    v22 = &v21[__n];
    v23 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < __x + 1)
    {
      v24 = (unsigned int *)&v15[4 * v11];
      if (&v15[4 * __n + v10] > (_BYTE *)__x)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = &v21[v25 & 0x7FFFFFFFFFFFFFF8];
    v26 = vld1q_dup_f32((const float *)__x);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
        *v24++ = *__x;
      while (v24 != v22);
    }
    if (end != begin)
    {
      v29 = (char *)end - (char *)begin - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if ((unint64_t)((char *)end - &v15[v10]) < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = &end[v31 / 0xFFFFFFFFFFFFFFFCLL];
      v21 = (unsigned int *)((char *)v21 - v31);
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(end - 4);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *(v32 - 1) = *(v33 - 1);
        *v32 = v35;
        v32 -= 2;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *--v21 = v36;
        }
        while (v8 != begin);
      }
    }
    this->__begin_ = v21;
    this->__end_ = v22;
    this->__end_cap_.__value_ = (unsigned int *)&v15[4 * v14];
    if (begin)
      operator delete(begin);
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  void **v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  int v30;
  void *v31;
  _DWORD *v32;
  _DWORD *v33;
  int v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53[2];
  _BYTE v54[48];
  void *v55[2];
  void *v56[2];
  uint64_t v57;
  unsigned __int16 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
    return;
  v6 = a1;
  if (a3 == 2)
  {
    if (*(unsigned __int16 *)(a1 + 112) < *((unsigned __int16 *)a2 - 4))
      std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(a1, (uint64_t)(a2 - 15));
    return;
  }
  if ((uint64_t)a3 > 0)
  {
    v10 = a3 >> 1;
    v11 = (_QWORD *)(a1 + 120 * (a3 >> 1));
    v12 = a3 >> 1;
    if ((uint64_t)a3 <= a5)
    {
      std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(a1, v11, v12, a4);
      v41 = &a4[15 * v10];
      std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v6 + 120 * (a3 >> 1), a2, a3 - (a3 >> 1), v41);
      v42 = &a4[15 * a3];
      v43 = (uint64_t)v41;
      v44 = (uint64_t)a4;
      while ((_QWORD *)v43 != v42)
      {
        if (*(unsigned __int16 *)(v44 + 112) >= *(unsigned __int16 *)(v43 + 112))
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(v6, v44);
          v44 += 120;
          v6 += 120;
          if ((_QWORD *)v44 == v41)
            goto LABEL_59;
        }
        else
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(v6, v43);
          v43 += 120;
          v6 += 120;
          if ((_QWORD *)v44 == v41)
          {
LABEL_59:
            if ((_QWORD *)v43 != v42)
            {
              v45 = 0;
              do
              {
                mlir::detail::PDLByteCode::MatchResult::operator=(v6 + v45, v43 + v45);
                v45 += 120;
              }
              while ((_QWORD *)(v43 + v45) != v42);
            }
            goto LABEL_66;
          }
        }
      }
      if ((_QWORD *)v44 != v41)
      {
        v46 = 0;
        do
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(v6 + v46, v44 + v46);
          v46 += 120;
        }
        while ((_QWORD *)(v44 + v46) != v41);
      }
LABEL_66:
      if (a4)
      {
        v47 = a3;
        v48 = a4 + 13;
        do
        {
          v49 = (_QWORD *)*(v48 - 2);
          if (v48 != v49)
            free(v49);
          v50 = (_QWORD *)*(v48 - 4);
          if (v48 - 2 != v50)
            free(v50);
          v51 = (_QWORD *)*(v48 - 12);
          if (v48 - 10 != v51)
            free(v51);
          v48 += 15;
          --v47;
        }
        while (v47);
      }
    }
    else
    {
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(a1, v11, v12, a4, a5);
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v6 + 120 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v6, v6 + 120 * (a3 >> 1), (uint64_t)a2, a3 >> 1, a3 - (a3 >> 1), (uint64_t)a4, a5);
    }
    return;
  }
  if ((_QWORD *)a1 == a2)
    return;
  v13 = (_QWORD *)(a1 + 120);
  if ((_QWORD *)(a1 + 120) == a2)
    return;
  v14 = 0;
  v15 = a1;
  while (2)
  {
    v16 = v13;
    if (*(unsigned __int16 *)(v15 + 112) >= *(unsigned __int16 *)(v15 + 232))
      goto LABEL_11;
    v52 = *v13;
    v53[0] = v54;
    v53[1] = (void *)0x600000000;
    if (*(_DWORD *)(v15 + 136))
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v53, v15 + 128);
    v55[0] = v56;
    v55[1] = 0;
    if (*(_DWORD *)(v15 + 200))
      llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v55, v15 + 192);
    v56[0] = &v57;
    v56[1] = 0;
    if (*(_DWORD *)(v15 + 216))
      llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v56, v15 + 208);
    v57 = *(_QWORD *)(v15 + 224);
    v58 = *(_WORD *)(v15 + 232);
    v17 = v14;
    while (1)
    {
      v18 = v6 + v17;
      v19 = *(const void **)(v6 + v17 + 8);
      *(_QWORD *)(v6 + v17 + 120) = *(_QWORD *)(v6 + v17);
      v20 = (void **)(v6 + v17 + 128);
      v21 = v6 + v17 + 24;
      if ((const void *)v21 == v19)
      {
        v35 = (_DWORD *)(v18 + 16);
        v36 = *(unsigned int *)(v18 + 16);
        v37 = *(unsigned int *)(v18 + 136);
        if (v37 >= v36)
        {
          if ((_DWORD)v36)
            memmove(*v20, v19, 8 * v36);
        }
        else
        {
          if (*(_DWORD *)(v6 + v17 + 140) < v36)
          {
            *(_DWORD *)(v18 + 136) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v20, (void *)(v6 + v17 + 144), v36, 8);
            v37 = 0;
            v38 = *v35;
            if (!*v35)
              goto LABEL_39;
            goto LABEL_38;
          }
          if ((_DWORD)v37)
          {
            memmove(*v20, v19, 8 * v37);
            v38 = *v35;
            if (v37 == v38)
              goto LABEL_39;
            goto LABEL_38;
          }
          v37 = 0;
          v38 = *v35;
          if (*v35)
LABEL_38:
            memcpy((void *)(*(_QWORD *)(v18 + 128) + 8 * v37), (const void *)(*(_QWORD *)(v18 + 8) + 8 * v37), 8 * v38 - 8 * v37);
        }
LABEL_39:
        *(_DWORD *)(v18 + 136) = v36;
        *v35 = 0;
        v24 = v6 + v17;
        v25 = *(_DWORD *)(v6 + v17 + 80);
        if (!v25)
          goto LABEL_40;
        goto LABEL_24;
      }
      v22 = *v20;
      if ((void *)(v18 + 144) != v22)
      {
        free(v22);
        v19 = *(const void **)(v18 + 8);
      }
      v23 = v6 + v17;
      *(_QWORD *)(v18 + 128) = v19;
      *(_QWORD *)(v23 + 136) = *(_QWORD *)(v6 + v17 + 16);
      *(_QWORD *)(v18 + 8) = v21;
      *(_DWORD *)(v23 + 20) = 0;
      *(_DWORD *)(v15 + 16) = 0;
      v24 = v6 + v17;
      v25 = *(_DWORD *)(v6 + v17 + 80);
      if (!v25)
      {
LABEL_40:
        *(_DWORD *)(v24 + 200) = 0;
        v29 = v6 + v17;
        v30 = *(_DWORD *)(v6 + v17 + 96);
        if (!v30)
          goto LABEL_41;
        goto LABEL_27;
      }
LABEL_24:
      v26 = *(void **)(v24 + 192);
      if ((void *)(v24 + 208) != v26)
      {
        free(v26);
        v25 = *(_DWORD *)(v24 + 80);
      }
      v27 = (_DWORD *)(v6 + v17);
      *(_QWORD *)(v24 + 192) = *(_QWORD *)(v24 + 72);
      v28 = *(_DWORD *)(v6 + v17 + 84);
      v27[50] = v25;
      v27[51] = v28;
      *(_QWORD *)(v24 + 72) = v6 + v17 + 88;
      v27[21] = 0;
      *(_DWORD *)(v15 + 80) = 0;
      v29 = v6 + v17;
      v30 = *(_DWORD *)(v6 + v17 + 96);
      if (!v30)
      {
LABEL_41:
        v32 = (_DWORD *)(v29 + 216);
        goto LABEL_42;
      }
LABEL_27:
      v31 = *(void **)(v29 + 208);
      if ((void *)(v29 + 224) != v31)
      {
        free(v31);
        v30 = *(_DWORD *)(v29 + 96);
      }
      v32 = (_DWORD *)(v15 + 96);
      v33 = (_DWORD *)(v6 + v17);
      *(_QWORD *)(v29 + 208) = *(_QWORD *)(v29 + 88);
      v34 = *(_DWORD *)(v6 + v17 + 100);
      v33[54] = v30;
      v33[55] = v34;
      *(_QWORD *)(v29 + 88) = v6 + v17 + 104;
      v33[25] = 0;
LABEL_42:
      *v32 = 0;
      v39 = v6 + v17;
      *(_QWORD *)(v39 + 224) = *(_QWORD *)(v6 + v17 + 104);
      *(_WORD *)(v39 + 232) = *(_WORD *)(v6 + v17 + 112);
      if (!v17)
        break;
      v15 -= 120;
      v17 -= 120;
      if (*(unsigned __int16 *)(v39 - 8) >= v58)
      {
        v40 = v6 + v17 + 120;
        goto LABEL_48;
      }
    }
    v40 = v6;
LABEL_48:
    mlir::detail::PDLByteCode::MatchResult::operator=(v40, (uint64_t)&v52);
    if (v56[0] != &v57)
      free(v56[0]);
    if (v55[0] != v56)
      free(v55[0]);
    if (v53[0] != v54)
      free(v53[0]);
LABEL_11:
    v13 = v16 + 15;
    v14 += 120;
    v15 = (uint64_t)v16;
    if (v16 + 15 != a2)
      continue;
    break;
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(uint64_t result, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _DWORD *v26;
  char *v27;
  _QWORD *v28;
  void **v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  if (a3)
  {
    v4 = a4;
    v6 = a2;
    v7 = result;
    if (a3 == 2)
    {
      v11 = *(unsigned __int16 *)(result + 112);
      v12 = (uint64_t)(a4 + 1);
      v13 = a4 + 3;
      if (v11 < *((unsigned __int16 *)a2 - 4))
      {
        *a4 = *(a2 - 15);
        a4[1] = v13;
        a4[2] = 0x600000000;
        if (*((_DWORD *)a2 - 26))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v12, (uint64_t)(a2 - 14));
        v4[9] = v4 + 11;
        v4[10] = 0;
        if (*((_DWORD *)v6 - 10))
          llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 9), (uint64_t)(v6 - 6));
        v4[11] = v4 + 13;
        v4[12] = 0;
        if (*((_DWORD *)v6 - 6))
          llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), (uint64_t)(v6 - 4));
        v14 = *(v6 - 2);
        *((_WORD *)v4 + 56) = *((_WORD *)v6 - 4);
        v4[13] = v14;
        v15 = *(_QWORD *)v7;
        v4[16] = v4 + 18;
        v4[15] = v15;
        v4[17] = 0x600000000;
        if (*(_DWORD *)(v7 + 16))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v4 + 16), v7 + 8);
        v8 = (uint64_t)(v4 + 26);
        v4[24] = v4 + 26;
        v4[25] = 0;
        result = (uint64_t)(v4 + 24);
        if (*(_DWORD *)(v7 + 80))
          result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
        v9 = v4 + 28;
        v4[26] = v4 + 28;
        v4[27] = 0;
        if (!*(_DWORD *)(v7 + 96))
          goto LABEL_10;
LABEL_9:
        result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(v8, v7 + 88);
LABEL_10:
        v10 = *(_QWORD *)(v7 + 104);
        *((_WORD *)v9 + 4) = *(_WORD *)(v7 + 112);
        *v9 = v10;
        return result;
      }
      *a4 = *(_QWORD *)v7;
      a4[1] = v13;
      a4[2] = 0x600000000;
      if (*(_DWORD *)(v7 + 16))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v12, v7 + 8);
      v4[9] = v4 + 11;
      v4[10] = 0;
      if (*(_DWORD *)(v7 + 80))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 9), v7 + 72);
      v4[11] = v4 + 13;
      v4[12] = 0;
      if (*(_DWORD *)(v7 + 96))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v7 + 88);
      v47 = *(_QWORD *)(v7 + 104);
      *((_WORD *)v4 + 56) = *(_WORD *)(v7 + 112);
      v4[13] = v47;
      v48 = *(v6 - 15);
      v4[16] = v4 + 18;
      v4[15] = v48;
      v4[17] = 0x600000000;
      if (*((_DWORD *)v6 - 26))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v4 + 16), (uint64_t)(v6 - 14));
      v4[24] = v4 + 26;
      v4[25] = 0;
      result = (uint64_t)(v4 + 24);
      if (*((_DWORD *)v6 - 10))
        result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, (uint64_t)(v6 - 6));
      v4[26] = v4 + 28;
      v4[27] = 0;
      if (*((_DWORD *)v6 - 6))
        result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 26), (uint64_t)(v6 - 4));
      v49 = *(v6 - 2);
      *((_WORD *)v4 + 116) = *((_WORD *)v6 - 4);
      v4[28] = v49;
    }
    else
    {
      if (a3 == 1)
      {
        *a4 = *(_QWORD *)result;
        a4[1] = a4 + 3;
        a4[2] = 0x600000000;
        if (*(_DWORD *)(result + 16))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a4 + 1), result + 8);
        v8 = (uint64_t)(v4 + 11);
        v4[9] = v4 + 11;
        v4[10] = 0;
        result = (uint64_t)(v4 + 9);
        if (*(_DWORD *)(v7 + 80))
          result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
        v9 = v4 + 13;
        v4[11] = v4 + 13;
        v4[12] = 0;
        if (!*(_DWORD *)(v7 + 96))
          goto LABEL_10;
        goto LABEL_9;
      }
      if ((uint64_t)a3 > 8)
      {
        v50 = a3 >> 1;
        v51 = 120 * (a3 >> 1);
        v52 = result + v51;
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(result, result + v51, a3 >> 1, a4, a3 >> 1);
        result = std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v7 + v51, v6, a3 - v50, &v4[(unint64_t)v51 / 8], a3 - v50);
        v53 = v7 + v51;
        while ((_QWORD *)v53 != v6)
        {
          v55 = (uint64_t)(v4 + 1);
          v56 = v4 + 3;
          if (*(unsigned __int16 *)(v7 + 112) >= *(unsigned __int16 *)(v53 + 112))
          {
            *v4 = *(_QWORD *)v7;
            v4[1] = v56;
            v4[2] = 0x600000000;
            if (*(_DWORD *)(v7 + 16))
              llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v55, v7 + 8);
            v4[9] = v4 + 11;
            v4[10] = 0;
            result = (uint64_t)(v4 + 9);
            if (*(_DWORD *)(v7 + 80))
              result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
            v4[11] = v4 + 13;
            v4[12] = 0;
            if (*(_DWORD *)(v7 + 96))
              result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v7 + 88);
            v54 = *(_QWORD *)(v7 + 104);
            *((_WORD *)v4 + 56) = *(_WORD *)(v7 + 112);
            v4[13] = v54;
            v7 += 120;
            v4 += 15;
            if (v7 == v52)
            {
LABEL_122:
              if ((_QWORD *)v53 != v6)
              {
                v65 = 0;
                do
                {
                  v67 = v53 + v65 * 8;
                  v68 = &v4[v65];
                  *v68 = *(_QWORD *)(v53 + v65 * 8);
                  v4[v65 + 1] = &v4[v65 + 3];
                  v68[2] = 0x600000000;
                  if (*(_DWORD *)(v53 + v65 * 8 + 16))
                    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v4[v65 + 1], v67 + 8);
                  v68[9] = v68 + 11;
                  result = (uint64_t)(v68 + 9);
                  v68[10] = 0;
                  if (*(_DWORD *)(v67 + 80))
                    result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v53 + v65 * 8 + 72);
                  v69 = &v4[v65 + 13];
                  v68[11] = v69;
                  v4[v65 + 12] = 0;
                  if (*(_DWORD *)(v67 + 96))
                    result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v68 + 11), v53 + v65 * 8 + 88);
                  v66 = *(_QWORD *)(v67 + 104);
                  LOWORD(v4[v65 + 14]) = *(_WORD *)(v67 + 112);
                  *v69 = v66;
                  v65 += 15;
                }
                while ((_QWORD *)(v67 + 120) != v6);
              }
              return result;
            }
          }
          else
          {
            *v4 = *(_QWORD *)v53;
            v4[1] = v56;
            v4[2] = 0x600000000;
            if (*(_DWORD *)(v53 + 16))
              llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v55, v53 + 8);
            v4[9] = v4 + 11;
            v4[10] = 0;
            result = (uint64_t)(v4 + 9);
            if (*(_DWORD *)(v53 + 80))
              result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v53 + 72);
            v4[11] = v4 + 13;
            v4[12] = 0;
            if (*(_DWORD *)(v53 + 96))
              result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v53 + 88);
            v57 = *(_QWORD *)(v53 + 104);
            *((_WORD *)v4 + 56) = *(_WORD *)(v53 + 112);
            v4[13] = v57;
            v53 += 120;
            v4 += 15;
            if (v7 == v52)
              goto LABEL_122;
          }
        }
        if (v7 != v52)
        {
          v58 = 0;
          do
          {
            v60 = v7 + v58 * 8;
            v61 = &v4[v58];
            *v61 = *(_QWORD *)(v7 + v58 * 8);
            v4[v58 + 1] = &v4[v58 + 3];
            result = (uint64_t)&v4[v58 + 1];
            v61[2] = 0x600000000;
            if (*(_DWORD *)(v7 + v58 * 8 + 16))
              result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, v60 + 8);
            v62 = v61 + 11;
            v61[9] = v61 + 11;
            v61[10] = 0;
            v63 = (uint64_t)(v61 + 9);
            if (*(_DWORD *)(v60 + 80))
              result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(v63, v7 + v58 * 8 + 72);
            v64 = &v4[v58 + 13];
            *v62 = v64;
            v4[v58 + 12] = 0;
            if (*(_DWORD *)(v60 + 96))
              result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v62, v7 + v58 * 8 + 88);
            v59 = *(_QWORD *)(v60 + 104);
            LOWORD(v4[v58 + 14]) = *(_WORD *)(v60 + 112);
            *v64 = v59;
            v58 += 15;
          }
          while (v60 + 120 != v52);
        }
      }
      else if ((_QWORD *)result != a2)
      {
        *a4 = *(_QWORD *)result;
        a4[1] = a4 + 3;
        a4[2] = 0x600000000;
        if (*(_DWORD *)(result + 16))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a4 + 1), result + 8);
        v4[9] = v4 + 11;
        v4[10] = 0;
        result = (uint64_t)(v4 + 9);
        if (*(_DWORD *)(v7 + 80))
          result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
        v4[11] = v4 + 13;
        v4[12] = 0;
        if (*(_DWORD *)(v7 + 96))
          result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v7 + 88);
        v16 = *(_QWORD *)(v7 + 104);
        *((_WORD *)v4 + 56) = *(_WORD *)(v7 + 112);
        v4[13] = v16;
        v17 = (_QWORD *)(v7 + 120);
        if ((_QWORD *)(v7 + 120) != v6)
        {
          v18 = 0;
          v19 = v4;
          v70 = v6;
          while (1)
          {
            while (1)
            {
              v21 = v17;
              v22 = (uint64_t)(v19 + 16);
              v23 = v19 + 18;
              if (*((unsigned __int16 *)v19 + 56) < *(unsigned __int16 *)(v7 + 232))
                break;
              v46 = v21;
              v19[15] = *v21;
              v19[16] = v23;
              v19[17] = 0x600000000;
              if (*(_DWORD *)(v7 + 136))
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v22, v7 + 128);
              v19[24] = v19 + 26;
              v19[25] = 0;
              result = (uint64_t)(v19 + 24);
              if (*(_DWORD *)(v7 + 200))
                result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 192);
              v19[26] = v19 + 28;
              v19[27] = 0;
              if (*(_DWORD *)(v7 + 216))
                result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v19 + 26), v7 + 208);
              v20 = *(_QWORD *)(v7 + 224);
              *((_WORD *)v19 + 116) = *(_WORD *)(v7 + 232);
              v19[28] = v20;
              v7 = (uint64_t)v46;
              v19 += 15;
              v17 = v46 + 15;
              v18 += 120;
              if (v46 + 15 == v6)
                return result;
            }
            v72 = (uint64_t)v21;
            v19[15] = *v19;
            v19[16] = v23;
            v19[17] = 0x600000000;
            if (*((_DWORD *)v19 + 4))
              llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v22, (uint64_t)(v19 + 1));
            v19[24] = v19 + 26;
            v19[25] = 0;
            if (*((_DWORD *)v19 + 20))
              llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v19 + 24), (uint64_t)(v19 + 9));
            v19[26] = v19 + 28;
            v19[27] = 0;
            if (*((_DWORD *)v19 + 24))
              llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v19 + 26), (uint64_t)(v19 + 11));
            v19[28] = v19[13];
            *((_WORD *)v19 + 116) = *((_WORD *)v19 + 56);
            v24 = v4;
            if (v19 != v4)
              break;
LABEL_79:
            v7 = v72;
            result = mlir::detail::PDLByteCode::MatchResult::operator=((uint64_t)v24, v72);
            v19 += 15;
            v17 = (_QWORD *)(v72 + 120);
            v18 += 120;
            if ((_QWORD *)(v72 + 120) == v6)
              return result;
          }
          v71 = v18;
          v25 = v19;
          v73 = v7;
          while (1)
          {
            v24 = (_QWORD *)((char *)v4 + v18);
            if (*(unsigned __int16 *)((char *)v4 + v18 - 8) >= *(unsigned __int16 *)(v7 + 232))
            {
LABEL_78:
              v6 = v70;
              v18 = v71;
              goto LABEL_79;
            }
            v28 = (_QWORD *)*(v24 - 14);
            *v24 = *(v24 - 15);
            v29 = (void **)(v24 + 1);
            if (v24 - 12 == v28)
              break;
            v30 = (char *)v4 + v18;
            if ((char *)v4 + v18 + 24 != *v29)
            {
              free(*v29);
              v28 = (_QWORD *)*(v24 - 14);
            }
            *v29 = v28;
            *((_QWORD *)v30 + 2) = *((_QWORD *)v30 - 13);
            *(v24 - 14) = v24 - 12;
            *((_DWORD *)v30 - 25) = 0;
            *((_DWORD *)v25 - 26) = 0;
            v31 = (char *)v4 + v18;
            v32 = *(_DWORD *)((char *)v4 + v18 - 40);
            if (!v32)
            {
LABEL_65:
              *((_DWORD *)v31 + 20) = 0;
              v36 = (char *)v4 + v18;
              v37 = *(_DWORD *)((char *)v4 + v18 - 24);
              if (v37)
                goto LABEL_66;
              goto LABEL_44;
            }
LABEL_51:
            v33 = (char *)*((_QWORD *)v31 + 9);
            if (v31 + 88 != v33)
            {
              free(v33);
              v32 = *((_DWORD *)v31 - 10);
            }
            v34 = (char *)v4 + v18;
            *((_QWORD *)v31 + 9) = *((_QWORD *)v31 - 6);
            v35 = *(_DWORD *)((char *)v4 + v18 - 36);
            *((_DWORD *)v34 + 20) = v32;
            *((_DWORD *)v34 + 21) = v35;
            *((_QWORD *)v31 - 6) = (char *)v4 + v18 - 32;
            *((_DWORD *)v34 - 9) = 0;
            *((_DWORD *)v25 - 10) = 0;
            v36 = (char *)v4 + v18;
            v37 = *(_DWORD *)((char *)v4 + v18 - 24);
            if (v37)
            {
LABEL_66:
              v43 = (char *)*((_QWORD *)v36 + 11);
              if (v36 + 104 != v43)
              {
                free(v43);
                v37 = *((_DWORD *)v36 - 6);
              }
              v26 = v25 - 3;
              v44 = (char *)v4 + v18;
              *((_QWORD *)v36 + 11) = *((_QWORD *)v36 - 4);
              v45 = *(_DWORD *)((char *)v4 + v18 - 20);
              *((_DWORD *)v44 + 24) = v37;
              *((_DWORD *)v44 + 25) = v45;
              *((_QWORD *)v36 - 4) = (char *)v4 + v18 - 16;
              *((_DWORD *)v44 - 5) = 0;
              goto LABEL_45;
            }
LABEL_44:
            v26 = v36 + 96;
LABEL_45:
            v25 -= 15;
            *v26 = 0;
            v27 = (char *)v4 + v18;
            *((_QWORD *)v27 + 13) = *(_QWORD *)((char *)v4 + v18 - 16);
            *((_WORD *)v27 + 56) = *((_WORD *)v24 - 4);
            v18 -= 120;
            if (!v18)
            {
              v24 = v4;
              goto LABEL_78;
            }
          }
          v38 = (char *)v4 + v18;
          v39 = (_DWORD *)((char *)v4 + v18 - 104);
          v40 = *v39;
          v41 = *(unsigned int *)((char *)v4 + v18 + 16);
          if (v41 >= v40)
          {
            if ((_DWORD)v40)
              memmove(*v29, v28, 8 * v40);
          }
          else
          {
            if (*((_DWORD *)v38 + 5) < v40)
            {
              *((_DWORD *)v38 + 4) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v24 + 1), (char *)v4 + v18 + 24, v40, 8);
              v41 = 0;
              v42 = *v39;
              if (!*v39)
                goto LABEL_64;
              goto LABEL_63;
            }
            if ((_DWORD)v41)
            {
              memmove(*v29, v28, 8 * v41);
              v42 = *v39;
              if (v41 == v42)
                goto LABEL_64;
              goto LABEL_63;
            }
            v41 = 0;
            v42 = *v39;
            if (*v39)
LABEL_63:
              memcpy((char *)*v29 + 8 * v41, (const void *)(*(v24 - 14) + 8 * v41), 8 * v42 - 8 * v41);
          }
LABEL_64:
          *((_DWORD *)v38 + 4) = v40;
          v7 = v73;
          *v39 = 0;
          v31 = (char *)v4 + v18;
          v32 = *(_DWORD *)((char *)v4 + v18 - 40);
          if (!v32)
            goto LABEL_65;
          goto LABEL_51;
        }
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  if (!a5)
    return;
  v7 = a5;
  while (v7 > a7 && a4 > a7)
  {
    if (!a4)
      return;
    v11 = 0;
    v12 = -a4;
    while (1)
    {
      v13 = a1 + v11;
      if (*(unsigned __int16 *)(a1 + v11 + 112) < *(unsigned __int16 *)(a2 + 112))
        break;
      v11 += 120;
      if (__CFADD__(v12++, 1))
        return;
    }
    v15 = -v12;
    v80 = a3;
    if (-v12 >= v7)
    {
      if (v12 == -1)
      {
        std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(a1 + v11, a2);
        return;
      }
      if (v12 > 0)
        v15 = 1 - v12;
      v26 = v15 >> 1;
      v21 = a1 + 120 * (v15 >> 1) + v11;
      if (a3 == a2)
      {
        v18 = a3;
      }
      else
      {
        v27 = 0xEEEEEEEEEEEEEEEFLL * ((a3 - a2) >> 3);
        v18 = a2;
        do
        {
          v28 = v27 >> 1;
          v29 = v18 + 120 * (v27 >> 1);
          v30 = *(unsigned __int16 *)(v29 + 112);
          v31 = v29 + 120;
          v27 += ~(v27 >> 1);
          if (v30 > *(unsigned __int16 *)(v21 + 112))
            v18 = v31;
          else
            v27 = v28;
        }
        while (v27);
      }
      v17 = 0xEEEEEEEEEEEEEEEFLL * ((v18 - a2) >> 3);
      v32 = v18;
      if (v21 != a2)
      {
LABEL_37:
        v32 = v21;
        if (a2 != v18)
        {
          v77 = v26;
          v78 = v17;
          v79 = a7;
          std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v21, a2);
          v32 = v21 + 120;
          for (i = a2 + 120; i != v18; i += 120)
          {
            if (v32 == a2)
              a2 = i;
            std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v32, i);
            v32 += 120;
          }
          if (v32 != a2)
          {
            v34 = v32;
            v35 = a2;
            while (1)
            {
              std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v34, a2);
              a2 += 120;
              v36 = v34 + 120 == v35;
              if (a2 == v18)
              {
                if (v34 + 120 == v35)
                  goto LABEL_56;
                a2 = v35 + 120;
                v34 += 240;
                while (1)
                {
                  std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v34 - 120, v35);
                  v36 = v34 == v35;
                  if (a2 != v18)
                    break;
                  v37 = v34 == v35;
                  v34 += 120;
                  if (v37)
                    goto LABEL_56;
                }
              }
              else
              {
                v34 += 120;
              }
              if (v36)
                v35 = a2;
            }
          }
          v32 = a2;
LABEL_56:
          v17 = v78;
          a7 = v79;
          v26 = v77;
        }
      }
    }
    else
    {
      if (v7 >= 0)
        v16 = v7;
      else
        v16 = v7 + 1;
      v17 = v16 >> 1;
      v18 = a2 + 120 * (v16 >> 1);
      if (v13 == a2)
      {
        v19 = a1 + v11;
        v21 = a2;
      }
      else
      {
        v19 = a1 + v11;
        v20 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - a1 - v11) >> 3);
        v21 = v13;
        do
        {
          v22 = v20 >> 1;
          v23 = v21 + 120 * (v20 >> 1);
          v24 = *(unsigned __int16 *)(v23 + 112);
          v25 = v23 + 120;
          v20 += ~(v20 >> 1);
          if (v24 < *(unsigned __int16 *)(v18 + 112))
            v20 = v22;
          else
            v21 = v25;
        }
        while (v20);
      }
      v26 = 0xEEEEEEEEEEEEEEEFLL * ((v21 - v19) >> 3);
      v32 = v18;
      if (v21 != a2)
        goto LABEL_37;
    }
    a4 = -(v26 + v12);
    v38 = v7 - v17;
    if (v26 + v17 >= v7 - (v26 + v17) - v12)
    {
      v40 = v26;
      v41 = -(v26 + v12);
      v42 = v17;
      v43 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v32, v18, v80, v41, v38, a6);
      a7 = v43;
      v44 = v21;
      a4 = v40;
      a3 = v32;
      v7 = v42;
      a1 = v13;
      a2 = v44;
      if (!v7)
        return;
    }
    else
    {
      v39 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v13, v21, v32, v26, v17, a6);
      a7 = v39;
      a3 = v80;
      v7 = v38;
      a1 = v32;
      a2 = v18;
      if (!v38)
        return;
    }
  }
  if (a4 <= v7)
  {
    if (a1 == a2)
      return;
    v55 = a3;
    v56 = 0;
    v47 = 0;
    v48 = a6;
    do
    {
      v58 = a1 + v56;
      v59 = (_QWORD *)(a6 + v56);
      *v59 = *(_QWORD *)(a1 + v56);
      *(_QWORD *)(a6 + v56 + 8) = a6 + v56 + 24;
      v59[2] = 0x600000000;
      if (*(_DWORD *)(a1 + v56 + 16))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a6 + v56 + 8, v58 + 8);
      v60 = v59 + 11;
      v59[9] = v59 + 11;
      v59[10] = 0;
      v61 = (uint64_t)(v59 + 9);
      if (*(_DWORD *)(v58 + 80))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v61, a1 + v56 + 72);
      v62 = (_QWORD *)(a6 + v56 + 104);
      *v60 = v62;
      *(_QWORD *)(a6 + v56 + 96) = 0;
      if (*(_DWORD *)(v58 + 96))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v60, a1 + v56 + 88);
      v57 = *(_QWORD *)(v58 + 104);
      *(_WORD *)(a6 + v56 + 112) = *(_WORD *)(v58 + 112);
      *v62 = v57;
      ++v47;
      v56 += 120;
    }
    while (v58 + 120 != a2);
    if (v56)
    {
      v68 = a6 + v56;
      v69 = a6;
      while (a2 != v55)
      {
        if (*(unsigned __int16 *)(v69 + 112) >= *(unsigned __int16 *)(a2 + 112))
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(a1, v69);
          v69 += 120;
          a1 += 120;
          if (v68 == v69)
            goto LABEL_105;
        }
        else
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(a1, a2);
          a2 += 120;
          a1 += 120;
          if (v68 == v69)
            goto LABEL_105;
        }
      }
      v72 = 0;
      do
      {
        mlir::detail::PDLByteCode::MatchResult::operator=(a1 + v72, v69 + v72);
        v72 += 120;
      }
      while (v68 - 120 != v69 + v72 - 120);
    }
  }
  else
  {
    if (a2 == a3)
      return;
    v45 = a3;
    v46 = 0;
    v47 = 0;
    v48 = a6;
    do
    {
      v50 = (_QWORD *)(a6 + v46);
      v51 = a2 + v46;
      *v50 = *(_QWORD *)(a2 + v46);
      *(_QWORD *)(a6 + v46 + 8) = a6 + v46 + 24;
      v50[2] = 0x600000000;
      if (*(_DWORD *)(a2 + v46 + 16))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a6 + v46 + 8, v51 + 8);
      v52 = v50 + 11;
      v50[9] = v50 + 11;
      v50[10] = 0;
      v53 = (uint64_t)(v50 + 9);
      if (*(_DWORD *)(v51 + 80))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v53, a2 + v46 + 72);
      v54 = (_QWORD *)(a6 + v46 + 104);
      *v52 = v54;
      *(_QWORD *)(a6 + v46 + 96) = 0;
      if (*(_DWORD *)(v51 + 96))
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v52, a2 + v46 + 88);
      v49 = *(_QWORD *)(v51 + 104);
      *(_WORD *)(a6 + v46 + 112) = *(_WORD *)(v51 + 112);
      *v54 = v49;
      ++v47;
      v46 += 120;
    }
    while (v51 + 120 != v45);
    if (v46)
    {
      v63 = a6 + v46;
      v64 = v45 - 120;
      while (a2 != a1)
      {
        v65 = *(unsigned __int16 *)(a2 - 8);
        v66 = *(unsigned __int16 *)(v63 - 8);
        if (v65 >= v66)
          v67 = v63 - 120;
        else
          v67 = a2 - 120;
        if (v65 >= v66)
          v63 -= 120;
        else
          a2 -= 120;
        mlir::detail::PDLByteCode::MatchResult::operator=(v64, v67);
        v64 -= 120;
        if (v63 == a6)
          goto LABEL_105;
      }
      v70 = 0;
      do
      {
        v71 = v64 + v70;
        v70 -= 120;
        mlir::detail::PDLByteCode::MatchResult::operator=(v71, v63 + v70);
      }
      while (v63 + v70 != a6);
    }
  }
LABEL_105:
  if (v48 && v47)
  {
    v73 = (_QWORD *)(a6 + 104);
    do
    {
      v74 = (_QWORD *)*(v73 - 2);
      if (v73 != v74)
        free(v74);
      v75 = (char *)*(v73 - 4);
      if (v73 - 2 != (_QWORD *)v75)
        free(v75);
      v76 = (char *)*(v73 - 12);
      if (v73 - 10 != (_QWORD *)v76)
        free(v76);
      v73 += 15;
      --v47;
    }
    while (v47);
  }
}

void std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5[2];
  _BYTE v6[48];
  void *v7[2];
  void *v8[2];
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v5[0] = v6;
  v5[1] = (void *)0x600000000;
  if (*(_DWORD *)(a1 + 16))
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v5, a1 + 8);
  v7[0] = v8;
  v7[1] = 0;
  if (*(_DWORD *)(a1 + 80))
    llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v7, a1 + 72);
  v8[0] = &v9;
  v8[1] = 0;
  if (*(_DWORD *)(a1 + 96))
    llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v8, a1 + 88);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_WORD *)(a1 + 112);
  mlir::detail::PDLByteCode::MatchResult::operator=(a1, a2);
  mlir::detail::PDLByteCode::MatchResult::operator=(a2, (uint64_t)&v4);
  if (v8[0] != &v9)
    free(v8[0]);
  if (v7[0] != v8)
    free(v7[0]);
  if (v5[0] != v6)
    free(v5[0]);
}

uint64_t mlir::detail::PDLByteCode::MatchResult::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int *v5;
  void *v6;
  int v7;
  int v8;
  int *v9;
  void *v10;
  int v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a1 + 8, a2 + 8);
  if (a1 != a2)
  {
    v5 = (int *)(a2 + 80);
    v4 = *(_DWORD *)(a2 + 80);
    if (v4)
    {
      v6 = *(void **)(a1 + 72);
      if (v6 != (void *)(a1 + 88))
      {
        free(v6);
        v4 = *v5;
      }
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v7 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)(a1 + 80) = v4;
      *(_DWORD *)(a1 + 84) = v7;
      *(_QWORD *)(a2 + 72) = a2 + 88;
      *(_DWORD *)(a2 + 84) = 0;
      *v5 = 0;
      v9 = (int *)(a2 + 96);
      v8 = *(_DWORD *)(a2 + 96);
      if (v8)
        goto LABEL_6;
    }
    else
    {
      *(_DWORD *)(a1 + 80) = 0;
      v9 = (int *)(a2 + 96);
      v8 = *(_DWORD *)(a2 + 96);
      if (v8)
      {
LABEL_6:
        v10 = *(void **)(a1 + 88);
        if (v10 != (void *)(a1 + 104))
        {
          free(v10);
          v8 = *v9;
        }
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        v11 = *(_DWORD *)(a2 + 100);
        *(_DWORD *)(a1 + 96) = v8;
        *(_DWORD *)(a1 + 100) = v11;
        *(_QWORD *)(a2 + 88) = a2 + 104;
        *(_DWORD *)(a2 + 100) = 0;
        goto LABEL_11;
      }
    }
    v9 = (int *)(a1 + 96);
LABEL_11:
    *v9 = 0;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  return a1;
}

mlir::FrozenRewritePatternSet *mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::FrozenRewritePatternSet *this)
{
  char *v2;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &unk_1E0E51EF0;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((_QWORD *)this + 1) = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)this = v2 + 24;
  return this;
}

void mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5, uint64_t a6)
{
  char *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  BOOL v45;
  int v46;
  uint64_t *v47;
  unsigned int (*v48)(uint64_t, _QWORD);
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  llvm *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  mlir::GenericProgramPoint *v94;
  mlir::GenericProgramPoint *v95;
  mlir::GenericProgramPoint *v96;
  mlir::ForwardIterator *v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  mlir::GenericProgramPoint *v103;
  mlir::GenericProgramPoint *v104;
  mlir::GenericProgramPoint *v105;
  mlir::ForwardIterator *v106;
  uint64_t v107;
  uint64_t *v108;
  void *v109;
  void *v110;
  mlir::detail::PDLByteCode *v111;
  llvm *v112[2];
  int v113;
  uint64_t v114;
  void **v115[2];
  void *__p;
  void *v117;
  uint64_t v118;
  llvm *v119;
  uint64_t v120;
  unsigned int v121;
  llvm *v122;
  uint64_t v123;
  int v124;
  void *v125[2];
  _QWORD v126[16];

  v126[14] = *MEMORY[0x1E0C80C00];
  v12 = (char *)operator new(0x68uLL);
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &unk_1E0E51EF0;
  *((_QWORD *)v12 + 1) = 0;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_QWORD *)(a1 + 8) = v12;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_QWORD *)a1 = v12 + 24;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  if (a4)
  {
    v13 = 24 * a4;
    do
    {
      LODWORD(v14) = *((char *)a3 + 23);
      v15 = *a3;
      v16 = (v14 & 0x80000000) != 0;
      if ((v14 & 0x80000000) == 0)
        v15 = a3;
      v125[0] = v15;
      v14 = v14;
      if (v16)
        v14 = (unint64_t)a3[1];
      v125[1] = (void *)v14;
      __p = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v122, (uint64_t)v125, &__p) & 1) == 0)
      {
        v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)&v122, (uint64_t)v125, (uint64_t)v125, __p);
        *(_OWORD *)v17 = *(_OWORD *)v125;
      }
      a3 += 3;
      v13 -= 24;
    }
    while (v13);
  }
  if (a6)
  {
    v18 = 24 * a6;
    do
    {
      LODWORD(v19) = *((char *)a5 + 23);
      v20 = *a5;
      v21 = (v19 & 0x80000000) != 0;
      if ((v19 & 0x80000000) == 0)
        v20 = a5;
      v125[0] = v20;
      v19 = v19;
      if (v21)
        v19 = (unint64_t)a5[1];
      v125[1] = (void *)v19;
      __p = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v119, (uint64_t)v125, &__p) & 1) == 0)
      {
        v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)&v119, (uint64_t)v125, (uint64_t)v125, __p);
        *(_OWORD *)v22 = *(_OWORD *)v125;
      }
      a5 += 3;
      v18 -= 24;
    }
    while (v18);
  }
  __p = 0;
  v117 = 0;
  v118 = 0;
  v115[0] = &__p;
  v115[1] = (void **)a1;
  v23 = *(uint64_t **)(a2 + 8);
  v24 = *(uint64_t **)(a2 + 16);
  v107 = a2;
  if (v23 == v24)
  {
LABEL_108:
    v85 = v107;
    v86 = *(_QWORD *)(v107 + 32);
    v114 = v86;
    if (v86)
    {
      v112[0] = *(llvm **)(v107 + 104);
      v87 = *(llvm **)(v107 + 112);
      *(_QWORD *)(v107 + 104) = 0;
      *(_QWORD *)(v107 + 112) = 0;
      v113 = *(_DWORD *)(v107 + 120);
      *(_DWORD *)(v107 + 120) = 0;
      v88 = v86 + 64;
      v90 = *(unsigned int *)(v86 + 40);
      v89 = *(unsigned int *)(v86 + 44);
      v112[1] = v87;
      v91.n128_f64[0] = mlir::Region::getOps<mlir::pdl::PatternOp>((mlir::Region *)(((v86 + 64 + 16 * ((v89 >> 23) & 1) + ((v89 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * v90), (uint64_t)v125);
      if (v126[0] != v126[8])
      {
        v92 = *(_QWORD *)(((v88
                          + 16 * (((unint64_t)*(unsigned int *)(v86 + 44) >> 23) & 1)
                          + (((unint64_t)*(unsigned int *)(v86 + 44) >> 21) & 0x7F8)
                          + 7) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(v86 + 40)
                        + 8);
        if (v92)
          v93 = v92 - 8;
        else
          v93 = 0;
        v94 = (mlir::GenericProgramPoint *)(v93 + 32);
        v95 = *(mlir::GenericProgramPoint **)(v93 + 40);
        if (v95 != (mlir::GenericProgramPoint *)(v93 + 32))
        {
          do
          {
            v96 = (mlir::GenericProgramPoint *)*((_QWORD *)v95 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v95);
            mlir::detail::walk<mlir::ForwardIterator>(v97, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<convertPDLToPDLInterp(mlir::ModuleOp,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet *>> &)::$_0>, (uint64_t)&v111, 1);
            v95 = v96;
          }
          while (v96 != v94);
        }
        mlir::PassManager::PassManager(v125, *(_QWORD *)(v86 + 48), 1, v91);
        mlir::PassManager::enableVerifier((uint64_t)v125, 0);
        mlir::createPDLToPDLInterpPass((uint64_t)v112, &v109);
        v98 = v109;
        v109 = 0;
        v110 = v98;
        mlir::OpPassManager::addPass((_BYTE **)v125, (uint64_t *)&v110);
        v99 = v110;
        v110 = 0;
        if (v99)
          (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
        v100 = v109;
        v109 = 0;
        if (v100)
          (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
        if (!mlir::PassManager::run((mlir::PassManager *)v125, (mlir::Operation *)v86))
        {
          mlir::PassManager::~PassManager((mlir::PassManager *)v125);
          llvm::report_fatal_error((llvm *)"failed to lower PDL pattern module to the PDL Interpreter", (const char *)1);
        }
        v101 = *(_QWORD *)(((v88
                           + 16 * (((unint64_t)*(unsigned int *)(v86 + 44) >> 23) & 1)
                           + (((unint64_t)*(unsigned int *)(v86 + 44) >> 21) & 0x7F8)
                           + 7) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(v86 + 40)
                         + 8);
        if (v101)
          v102 = v101 - 8;
        else
          v102 = 0;
        v103 = (mlir::GenericProgramPoint *)(v102 + 32);
        v104 = *(mlir::GenericProgramPoint **)(v102 + 40);
        if (v104 != (mlir::GenericProgramPoint *)(v102 + 32))
        {
          do
          {
            v105 = (mlir::GenericProgramPoint *)*((_QWORD *)v104 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v104);
            mlir::detail::walk<mlir::ForwardIterator>(v106, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<convertPDLToPDLInterp(mlir::ModuleOp,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet *>> &)::$_0>, (uint64_t)&v111, 1);
            v104 = v105;
          }
          while (v105 != v103);
        }
        mlir::PassManager::~PassManager((mlir::PassManager *)v125);
        v85 = v107;
      }
      v125[0] = v126;
      v125[1] = (void *)0x600000000;
      if (*(_DWORD *)(v85 + 48))
        llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=((uint64_t)v125, v85 + 40);
      llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap((llvm::StringMapImpl *)&v110, (uint64_t *)(v85 + 128));
      llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap((llvm::StringMapImpl *)&v109, (uint64_t *)(v85 + 152));
      std::make_unique[abi:nn180100]<mlir::detail::PDLByteCode,mlir::ModuleOp &,llvm::SmallVector<std::unique_ptr<mlir::PDLPatternConfigSet>,6u>,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet*,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet*>> &,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>>(&v114, (uint64_t)v125, (uint64_t)v112, (uint64_t)&v110, (uint64_t)&v109);
    }
    if (__p)
    {
      v117 = __p;
      operator delete(__p);
    }
    llvm::deallocate_buffer(v119, (void *)(16 * v121));
  }
  v108 = *(uint64_t **)(a2 + 16);
  while (1)
  {
    if ((_DWORD)v120)
    {
      *(_OWORD *)v125 = *(_OWORD *)(*v23 + 64);
      v112[0] = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v119, (uint64_t)v125, v112) & 1) == 0)
      {
        v26 = *(unsigned int *)(*v23 + 88);
        if (!(_DWORD)v26)
          goto LABEL_22;
        v27 = *(__int128 **)(*v23 + 80);
        v28 = 16 * v26 - 16;
        do
        {
          v29 = *v27++;
          *(_OWORD *)v125 = v29;
          v112[0] = 0;
          v30 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v119, (uint64_t)v125, v112);
          if ((v30 & 1) != 0)
            break;
          v31 = v28;
          v28 -= 16;
        }
        while (v31);
        if (!v30)
          goto LABEL_22;
      }
    }
    v32 = *v23;
    if ((_DWORD)v123)
    {
      *(_OWORD *)v125 = *(_OWORD *)(v32 + 64);
      v112[0] = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v122, (uint64_t)v125, v112) & 1) != 0)goto LABEL_22;
      v32 = *v23;
      v33 = *(unsigned int *)(*v23 + 88);
      if ((_DWORD)v33)
      {
        v34 = *(_OWORD **)(v32 + 80);
        v35 = 16 * v33;
        do
        {
          *(_OWORD *)v125 = *v34;
          v112[0] = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v122, (uint64_t)v125, v112) & 1) != 0)goto LABEL_22;
          ++v34;
          v35 -= 16;
        }
        while (v35);
        v32 = *v23;
      }
    }
    v36 = *(_DWORD *)(v32 + 16);
    if (v36 == 1)
      break;
    if (v36 == 2)
    {
      v125[0] = *(void **)(v32 + 8);
      v125[1] = (void *)1;
      v112[0] = (llvm *)v125;
      v47 = v23;
      v48 = (unsigned int (*)(uint64_t, _QWORD))llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_3>;
    }
    else
    {
      if (*(_DWORD *)(*v23 + 16) != 3)
      {
        v63 = *(_QWORD **)a1;
        v64 = *(uint64_t **)(*(_QWORD *)a1 + 56);
        if ((unint64_t)v64 >= *(_QWORD *)(*(_QWORD *)a1 + 64))
        {
          v66 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(v63 + 6, v23);
        }
        else
        {
          v65 = *v23;
          *v23 = 0;
          *v64 = v65;
          v66 = v64 + 1;
        }
        v63[7] = v66;
        goto LABEL_22;
      }
      v125[0] = *(void **)(*v23 + 8);
      v125[1] = (void *)1;
      v112[0] = (llvm *)v125;
      v47 = v23;
      v48 = (unsigned int (*)(uint64_t, _QWORD))llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_4>;
    }
    mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_0::operator()(v115, v47, v48, (uint64_t)v112);
LABEL_22:
    if (++v23 == v24)
      goto LABEL_108;
  }
  v37 = *(_QWORD *)(v32 + 8);
  v38 = *(_DWORD **)a1;
  v39 = *(_DWORD *)(*(_QWORD *)a1 + 16);
  if (!v39)
    goto LABEL_91;
  v40 = ((v37 >> 4) ^ (v37 >> 9)) & (v39 - 1);
  v41 = (_QWORD *)(*(_QWORD *)v38 + 32 * v40);
  v42 = *v41;
  if (v37 == *v41)
    goto LABEL_59;
  v43 = 0;
  v44 = 1;
  while (v42 != -4096)
  {
    if (v43)
      v45 = 0;
    else
      v45 = v42 == -8192;
    if (v45)
      v43 = v41;
    v46 = v40 + v44++;
    v40 = v46 & (v39 - 1);
    v41 = (_QWORD *)(*(_QWORD *)v38 + 32 * v40);
    v42 = *v41;
    if (v37 == *v41)
      goto LABEL_59;
  }
  if (v43)
    v41 = v43;
  v76 = v38[2];
  if (4 * v76 + 4 < 3 * v39)
  {
    if (v39 + ~v76 - v38[3] > v39 >> 3)
    {
      v49 = *v41;
      ++v38[2];
      if (v49 == -4096)
      {
LABEL_58:
        *v41 = v37;
        v41[1] = 0;
        v41[2] = 0;
        v41[3] = 0;
        v32 = *v23;
LABEL_59:
        v51 = (uint64_t *)v41[2];
        v50 = v41[3];
        if ((unint64_t)v51 < v50)
        {
          *v51 = v32;
          v41[2] = v51 + 1;
          v52 = *(_QWORD **)a1;
          v53 = *(uint64_t **)(*(_QWORD *)a1 + 32);
          if ((unint64_t)v53 >= *(_QWORD *)(*(_QWORD *)a1 + 40))
            goto LABEL_85;
LABEL_21:
          v25 = *v23;
          *v23 = 0;
          *v53 = v25;
          v52[4] = v53 + 1;
          goto LABEL_22;
        }
        v54 = a1;
        v55 = (char *)v41[1];
        v56 = ((char *)v51 - v55) >> 3;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 61)
          abort();
        v58 = v50 - (_QWORD)v55;
        if (v58 >> 2 > v57)
          v57 = v58 >> 2;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v60 = (char *)operator new(8 * v59);
          v61 = (uint64_t *)&v60[8 * v56];
          *v61 = v32;
          v62 = (uint64_t)(v61 + 1);
          if (v51 == (uint64_t *)v55)
          {
LABEL_82:
            v41[1] = v61;
            v41[2] = v62;
            v41[3] = &v60[8 * v59];
            a1 = v54;
            if (v51)
              operator delete(v51);
            v24 = v108;
            v41[2] = v62;
            v52 = *(_QWORD **)a1;
            v53 = *(uint64_t **)(*(_QWORD *)a1 + 32);
            if ((unint64_t)v53 >= *(_QWORD *)(*(_QWORD *)a1 + 40))
            {
LABEL_85:
              v52[4] = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(v52 + 3, v23);
              goto LABEL_22;
            }
            goto LABEL_21;
          }
        }
        else
        {
          v60 = 0;
          v61 = (uint64_t *)(8 * v56);
          *(_QWORD *)(8 * v56) = v32;
          v62 = 8 * v56 + 8;
          if (v51 == (uint64_t *)v55)
            goto LABEL_82;
        }
        v67 = (char *)(v51 - 1) - v55;
        if (v67 < 0x58)
          goto LABEL_137;
        if ((unint64_t)(v55 - v60) < 0x20)
          goto LABEL_137;
        v68 = (v67 >> 3) + 1;
        v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        v70 = &v51[v69 / 0xFFFFFFFFFFFFFFF8];
        v61 = (uint64_t *)((char *)v61 - v69);
        v71 = &v60[8 * v56 - 16];
        v72 = v51 - 2;
        v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v74 = *(_OWORD *)v72;
          *((_OWORD *)v71 - 1) = *((_OWORD *)v72 - 1);
          *(_OWORD *)v71 = v74;
          v71 -= 32;
          v72 -= 4;
          v73 -= 4;
        }
        while (v73);
        v51 = v70;
        if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_137:
          do
          {
            v75 = *--v51;
            *--v61 = v75;
          }
          while (v51 != (uint64_t *)v55);
        }
        v51 = (uint64_t *)v41[1];
        goto LABEL_82;
      }
LABEL_57:
      --v38[3];
      goto LABEL_58;
    }
  }
  else
  {
LABEL_91:
    v39 *= 2;
  }
  llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(*(_QWORD *)a1, v39);
  v77 = v38[4] - 1;
  v78 = v77 & ((v37 >> 4) ^ (v37 >> 9));
  v41 = (_QWORD *)(*(_QWORD *)v38 + 32 * v78);
  v79 = *v41;
  if (v37 == *v41)
  {
LABEL_93:
    ++v38[2];
    if (v37 == -4096)
      goto LABEL_58;
  }
  else
  {
    v80 = 0;
    v81 = 1;
    while (v79 != -4096)
    {
      if (v80)
        v82 = 0;
      else
        v82 = v79 == -8192;
      if (v82)
        v80 = v41;
      v83 = v78 + v81++;
      v78 = v83 & v77;
      v41 = (_QWORD *)(*(_QWORD *)v38 + 32 * v78);
      v79 = *v41;
      if (v37 == *v41)
        goto LABEL_93;
    }
    if (v80)
      v41 = v80;
    v84 = *v41;
    ++v38[2];
    if (v84 == -4096)
      goto LABEL_58;
  }
  goto LABEL_57;
}

_QWORD *mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_0::operator()(void ***a1, uint64_t *a2, unsigned int (*a3)(uint64_t, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int (*v9)(uint64_t, _QWORD);
  uint64_t RegisteredOperations;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  char *v15;
  char *v16;
  void **v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *result;
  uint64_t *v63;
  _QWORD *v65;

  v4 = a4;
  v6 = (uint64_t *)a1[1];
  v8 = **a1;
  v7 = (*a1)[1];
  v63 = v6;
  if (v8 != v7)
  {
    v9 = a3;
LABEL_8:
    v65 = v7;
    while (1)
    {
      v20 = *v8;
      if (!v9(v4, *v8))
        goto LABEL_11;
      v21 = *v6;
      v22 = *(_DWORD *)(*v6 + 16);
      if (!v22)
        goto LABEL_55;
      v23 = (v22 - 1) & ((v20 >> 4) ^ (v20 >> 9));
      v24 = (_QWORD *)(*(_QWORD *)v21 + 32 * v23);
      v25 = *v24;
      if (*v24 == v20)
        goto LABEL_30;
      v26 = 0;
      v27 = 1;
      while (v25 != -4096)
      {
        if (v26)
          v28 = 0;
        else
          v28 = v25 == -8192;
        if (v28)
          v26 = v24;
        v29 = v23 + v27++;
        v23 = v29 & (v22 - 1);
        v24 = (_QWORD *)(*(_QWORD *)v21 + 32 * v23);
        v25 = *v24;
        if (*v24 == v20)
          goto LABEL_30;
      }
      if (v26)
        v24 = v26;
      v50 = *(_DWORD *)(v21 + 8);
      if (4 * v50 + 4 < 3 * v22)
      {
        if (v22 + ~v50 - *(_DWORD *)(v21 + 12) > v22 >> 3)
          goto LABEL_26;
      }
      else
      {
LABEL_55:
        v22 *= 2;
      }
      llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(*v6, v22);
      v51 = *(_DWORD *)(v21 + 16) - 1;
      v52 = v51 & ((v20 >> 4) ^ (v20 >> 9));
      v24 = (_QWORD *)(*(_QWORD *)v21 + 32 * v52);
      v53 = *v24;
      if (*v24 == v20)
      {
        v30 = v20;
        goto LABEL_27;
      }
      v54 = 0;
      v55 = 1;
      while (v53 != -4096)
      {
        if (v54)
          v56 = 0;
        else
          v56 = v53 == -8192;
        if (v56)
          v54 = v24;
        v57 = v52 + v55++;
        v52 = v57 & v51;
        v24 = (_QWORD *)(*(_QWORD *)v21 + 32 * v52);
        v53 = *v24;
        v30 = v20;
        v4 = a4;
        v6 = v63;
        v9 = a3;
        if (*v24 == v20)
          goto LABEL_27;
      }
      if (v54)
        v24 = v54;
      v4 = a4;
      v6 = v63;
      v9 = a3;
LABEL_26:
      v30 = *v24;
LABEL_27:
      ++*(_DWORD *)(v21 + 8);
      if (v30 != -4096)
        --*(_DWORD *)(v21 + 12);
      *v24 = v20;
      v24[1] = 0;
      v24[2] = 0;
      v24[3] = 0;
LABEL_30:
      v31 = *a2;
      v33 = (uint64_t *)v24[2];
      v32 = v24[3];
      if ((unint64_t)v33 < v32)
      {
        *v33 = v31;
        v19 = (uint64_t)(v33 + 1);
        goto LABEL_10;
      }
      v34 = (char *)v24[1];
      v35 = ((char *)v33 - v34) >> 3;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        goto LABEL_76;
      v37 = v32 - (_QWORD)v34;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        if (v38 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v39 = (char *)operator new(8 * v38);
        v40 = (uint64_t *)&v39[8 * v35];
        *v40 = v31;
        v19 = (uint64_t)(v40 + 1);
        if (v33 == (uint64_t *)v34)
        {
LABEL_43:
          v4 = a4;
          v6 = v63;
          v24[1] = v40;
          v24[2] = v19;
          v24[3] = &v39[8 * v38];
          v9 = a3;
          if (!v33)
            goto LABEL_10;
LABEL_51:
          operator delete(v33);
          goto LABEL_10;
        }
      }
      else
      {
        v39 = 0;
        v40 = (uint64_t *)(8 * v35);
        *(_QWORD *)(8 * v35) = v31;
        v19 = 8 * v35 + 8;
        if (v33 == (uint64_t *)v34)
          goto LABEL_43;
      }
      v41 = (char *)(v33 - 1) - v34;
      if (v41 < 0x58)
      {
        v6 = v63;
        do
        {
LABEL_49:
          v49 = *--v33;
          *--v40 = v49;
        }
        while (v33 != (uint64_t *)v34);
        goto LABEL_50;
      }
      v6 = v63;
      if ((unint64_t)(v34 - v39) < 0x20)
        goto LABEL_49;
      v42 = (v41 >> 3) + 1;
      v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      v44 = &v33[v43 / 0xFFFFFFFFFFFFFFF8];
      v40 = (uint64_t *)((char *)v40 - v43);
      v45 = &v39[8 * v35 - 16];
      v46 = v33 - 2;
      v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v48 = *(_OWORD *)v46;
        *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
        *(_OWORD *)v45 = v48;
        v45 -= 32;
        v46 -= 4;
        v47 -= 4;
      }
      while (v47);
      v33 = v44;
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_49;
LABEL_50:
      v33 = (uint64_t *)v24[1];
      v24[1] = v40;
      v24[2] = v19;
      v24[3] = &v39[8 * v38];
      v4 = a4;
      v9 = a3;
      if (v33)
        goto LABEL_51;
LABEL_10:
      v24[2] = v19;
      v7 = v65;
LABEL_11:
      if (++v8 == v7)
        goto LABEL_70;
    }
  }
  RegisteredOperations = mlir::MLIRContext::getRegisteredOperations((mlir::MLIRContext *)(*(_QWORD *)(*a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (v12)
  {
    v13 = v12;
    if (v12 < 0)
LABEL_76:
      abort();
    v14 = (const void *)RegisteredOperations;
    v15 = (char *)operator new(8 * v12);
    v16 = &v15[8 * v13];
    memcpy(v15, v14, 8 * v13);
    v4 = a4;
    v6 = v63;
    v17 = *a1;
    v18 = **a1;
    if (v18)
      goto LABEL_6;
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v17 = *a1;
    v18 = **a1;
    if (v18)
    {
LABEL_6:
      v17[1] = v18;
      operator delete(v18);
    }
  }
  *v17 = v15;
  v17[1] = v16;
  v17[2] = v16;
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = a3;
  if (v8 != v7)
    goto LABEL_8;
LABEL_70:
  v58 = *v6;
  v59 = *(uint64_t **)(*v6 + 32);
  if ((unint64_t)v59 >= *(_QWORD *)(*v6 + 40))
  {
    result = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>((_QWORD *)(v58 + 24), a2);
  }
  else
  {
    v60 = *a2;
    *a2 = 0;
    *v59 = v60;
    result = v59 + 1;
  }
  *(_QWORD *)(v58 + 32) = result;
  return result;
}

void std::make_unique[abi:nn180100]<mlir::detail::PDLByteCode,mlir::ModuleOp &,llvm::SmallVector<std::unique_ptr<mlir::PDLPatternConfigSet>,6u>,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet*,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet*>> &,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  void *v14;
  __int128 v15;
  void *v16[2];
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v10 = operator new(0xED8uLL);
  v11 = *a1;
  v16[0] = v17;
  v16[1] = (void *)0x600000000;
  if (*(_DWORD *)(a2 + 8))
    llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=((uint64_t)v16, a2);
  v14 = *(void **)a4;
  v15 = *(_OWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v12 = *(void **)a5;
  v13 = *(_OWORD *)(a5 + 8);
  *(_DWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  mlir::detail::PDLByteCode::PDLByteCode(v10, v11, v16, a3, &v14, &v12);
}

void mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet(mlir::FrozenRewritePatternSet *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  unsigned int v8;
  void *v9;
  size_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v14;
  const void *v15;
  BOOL v16;
  int v17;
  uint64_t result;
  int v19;
  int v20;
  const void *v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  const void *v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  const void *v38;
  BOOL v39;
  int v40;
  void *__s1;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v14 = 0;
    result = 0;
    goto LABEL_70;
  }
  v6 = *a1;
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
  v8 = v4 - 1;
  v9 = *(void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    if (v9 == (void *)-2)
    {
      v11 = 0;
      v19 = 1;
      v20 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 16 * (HashValue & v8));
      v21 = (const void *)*v14;
      if (*v14 == -1)
        goto LABEL_21;
LABEL_19:
      if (v21 != (const void *)-2 && v14[1])
      {
LABEL_21:
        while (v21 != (const void *)-1)
        {
          if (v11)
            v22 = 0;
          else
            v22 = v21 == (const void *)-2;
          if (v22)
            v11 = v14;
          v23 = v19 + v20;
          ++v19;
          v20 = v23 & v8;
          v14 = (_QWORD *)(v6 + 16 * (v23 & v8));
          v21 = (const void *)*v14;
          if (*v14 != -1)
            goto LABEL_19;
        }
        goto LABEL_66;
      }
    }
    else
    {
      v11 = 0;
      v31 = 1;
      v32 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 16 * (HashValue & v8));
      v33 = *v14;
      if (*v14 == -2)
        goto LABEL_47;
LABEL_43:
      if (v33 == -1)
      {
        if (v9 != (void *)-1)
        {
LABEL_47:
          while (v33 != -1)
          {
            if (v11)
              v34 = 0;
            else
              v34 = v33 == -2;
            if (v34)
              v11 = v14;
            v35 = v31 + v32;
            ++v31;
            v32 = v35 & v8;
            v14 = (_QWORD *)(v6 + 16 * (v35 & v8));
            v33 = *v14;
            if (*v14 != -2)
              goto LABEL_43;
          }
          goto LABEL_66;
        }
      }
      else if (v14[1])
      {
        goto LABEL_47;
      }
    }
    goto LABEL_69;
  }
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      v11 = 0;
      v36 = 1;
      v37 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 16 * (HashValue & v8));
      v38 = (const void *)*v14;
      if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_63;
      while (v38 != (const void *)-1)
      {
        if (v11)
          v39 = 0;
        else
          v39 = v38 == (const void *)-2;
        if (v39)
          v11 = v14;
        v40 = v36 + v37;
        ++v36;
        v37 = v40 & v8;
        v14 = (_QWORD *)(v6 + 16 * (v40 & v8));
        v38 = (const void *)*v14;
        if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_63:
          if (v10 == v14[1] && !memcmp(__s1, v38, v10))
            goto LABEL_69;
        }
      }
      goto LABEL_66;
    }
    v11 = 0;
    v24 = 1;
    v25 = HashValue & v8;
    v14 = (_QWORD *)(v6 + 16 * (HashValue & v8));
    v26 = (const void *)*v14;
    if (*v14 == -2)
      goto LABEL_34;
LABEL_31:
    if (v26 != (const void *)-1)
    {
      if (v10 != v14[1] || (v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), v24 = v27, v28))
      {
LABEL_34:
        while (v26 != (const void *)-1)
        {
          if (v11)
            v29 = 0;
          else
            v29 = v26 == (const void *)-2;
          if (v29)
            v11 = v14;
          v30 = v24 + v25;
          ++v24;
          v25 = v30 & v8;
          v14 = (_QWORD *)(v6 + 16 * (v30 & v8));
          v26 = (const void *)*v14;
          if (*v14 != -2)
            goto LABEL_31;
        }
        goto LABEL_66;
      }
    }
LABEL_69:
    result = 1;
    goto LABEL_70;
  }
  v11 = 0;
  v12 = 1;
  v13 = HashValue & v8;
  v14 = (_QWORD *)(v6 + 16 * (HashValue & v8));
  v15 = (const void *)*v14;
  if (*v14 == -1)
    goto LABEL_8;
LABEL_5:
  if (v15 == (const void *)-2 || v10 == v14[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v15, v10))
    goto LABEL_69;
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11)
      v16 = 0;
    else
      v16 = v15 == (const void *)-2;
    if (v16)
      v11 = v14;
    v17 = v12 + v13;
    ++v12;
    v13 = v17 & v8;
    v14 = (_QWORD *)(v6 + 16 * (v17 & v8));
    v15 = (const void *)*v14;
    if (*v14 != -1)
      goto LABEL_5;
  }
LABEL_66:
  result = 0;
  if (v11)
    v14 = v11;
LABEL_70:
  *a3 = v14;
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<convertPDLToPDLInterp(mlir::ModuleOp,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet *>> &)::$_0>(uint64_t a1, mlir::Operation *a2)
{
  if (mlir::isOpTriviallyDead((void ***)a2, a2))
    mlir::Operation::erase(a2);
}

llvm::StringMapImpl *llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap(llvm::StringMapImpl *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t *v9;
  size_t v11;
  size_t *v12;
  _QWORD *buffer;
  size_t *v14;
  char *v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x2800000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    v4 = *(_QWORD *)this;
    v5 = *((unsigned int *)this + 2);
    v6 = *a2;
    *(_QWORD *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v19 = v4 + 8 * v5 + 8;
      v8 = v6 + 8 * v5 + 8;
      do
      {
        while (1)
        {
          v9 = *(size_t **)(*a2 + 8 * v7);
          if (v9 && v9 + 1 != 0)
            break;
          *(_QWORD *)(*(_QWORD *)this + 8 * v7++) = v9;
          if (v5 == v7)
            return this;
        }
        v12 = v9 + 1;
        v11 = *v9;
        buffer = llvm::allocate_buffer(*v9 + 41, (std::align_val_t)8uLL);
        v14 = buffer;
        v15 = (char *)(buffer + 5);
        if (v11)
          memcpy(buffer + 5, v9 + 5, v11);
        v15[v11] = 0;
        *v14 = v11;
        v16 = v14 + 1;
        v17 = v9[4];
        if (v17)
        {
          if ((size_t *)v17 == v12)
          {
            v14[4] = (size_t)v16;
            (*(void (**)(size_t *))(*v12 + 24))(v9 + 1);
          }
          else
          {
            v14[4] = (*(uint64_t (**)(size_t, _QWORD *))(*(_QWORD *)v17 + 16))(v17, v16);
          }
        }
        else
        {
          v14[4] = 0;
        }
        *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v14;
        *(_DWORD *)(v19 + 4 * v7) = *(_DWORD *)(v8 + 4 * v7);
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet::Impl>::__on_zero_shared(uint64_t a1)
{
  mlir::FrozenRewritePatternSet::Impl::~Impl((mlir::FrozenRewritePatternSet::Impl *)(a1 + 24));
}

void mlir::FrozenRewritePatternSet::Impl::~Impl(mlir::FrozenRewritePatternSet::Impl *this)
{
  mlir::detail::PDLByteCode *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v2 = (mlir::detail::PDLByteCode *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
  {
    mlir::detail::PDLByteCode::~PDLByteCode(v2);
    operator delete(v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 6);
  if (v4)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 7);
    v6 = (void *)*((_QWORD *)this + 6);
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v4;
    operator delete(v6);
  }
  v9 = (_QWORD *)*((_QWORD *)this + 3);
  if (v9)
  {
    v10 = (_QWORD *)*((_QWORD *)this + 4);
    v11 = (void *)*((_QWORD *)this + 3);
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v9;
    operator delete(v11);
  }
  v14 = *((unsigned int *)this + 4);
  v15 = *(llvm **)this;
  if ((_DWORD)v14)
  {
    v16 = (_QWORD *)((char *)v15 + 16);
    v17 = 32 * v14;
    do
    {
      if ((*(v16 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v18 = (void *)*(v16 - 1);
        if (v18)
        {
          *v16 = v18;
          operator delete(v18);
        }
      }
      v16 += 4;
      v17 -= 32;
    }
    while (v17);
    v15 = *(llvm **)this;
    v19 = (void *)(32 * *((unsigned int *)this + 4));
  }
  else
  {
    v19 = 0;
  }
  llvm::deallocate_buffer(v15, v19);
}

uint64_t sub_180644448()
{
  uint64_t v0;

  return v0;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  void *v17;
  uint64_t v18;
  llvm *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result[v13 & 0x1FFFFFFFFFFFFFFCLL];
      v14 = result + 2;
      v15 = v13 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v14 - 2) = xmmword_181234BE0;
        *(v14 - 1) = xmmword_181234BE0;
        *v14 = xmmword_181234BE0;
        v14[1] = xmmword_181234BE0;
        v14 += 4;
        v15 -= 4;
      }
      while (v15);
      if (v13 != (v13 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v16 = &result[v11];
        do
          *v10++ = xmmword_181234BE0;
        while (v10 != v16);
      }
    }
    v17 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v18 = 16 * v3;
      v19 = v4;
      do
      {
        if (*(_QWORD *)v19 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v26 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v19, &v26);
          *v26 = *(_OWORD *)v19;
          ++*(_DWORD *)(a1 + 8);
        }
        v19 = (llvm *)((char *)v19 + 16);
        v18 -= 16;
      }
      while (v18);
    }
    llvm::deallocate_buffer(v4, v17);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = (v20 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v21 < 3)
      goto LABEL_23;
    v22 = v21 + 1;
    v10 = &result[v22 & 0x1FFFFFFFFFFFFFFCLL];
    v23 = result + 2;
    v24 = v22 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v23 - 2) = xmmword_181234BE0;
      *(v23 - 1) = xmmword_181234BE0;
      *v23 = xmmword_181234BE0;
      v23[1] = xmmword_181234BE0;
      v23 += 4;
      v24 -= 4;
    }
    while (v24);
    if (v22 != (v22 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v25 = &result[v20];
      do
        *v10++ = xmmword_181234BE0;
      while (v10 != v25);
    }
  }
  return result;
}

_QWORD *llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v23 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = *(_DWORD *)(a1 + 16) - 1;
          v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          v22 = (_QWORD *)(*(_QWORD *)a1 + 32 * v25);
          v26 = *v22;
          if (v23 != *v22)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v22;
              v30 = v25 + v28++;
              v25 = v30 & v24;
              v22 = (_QWORD *)(*(_QWORD *)a1 + 32 * v25);
              v26 = *v22;
              if (v23 == *v22)
                goto LABEL_24;
            }
            if (v27)
              v22 = v27;
          }
LABEL_24:
          *v22 = v23;
          v22[1] = 0;
          v22[2] = 0;
          v22[3] = 0;
          *(_OWORD *)(v22 + 1) = *(_OWORD *)((char *)v16 + 8);
          v22[3] = *((_QWORD *)v16 + 3);
          *((_QWORD *)v16 + 1) = 0;
          *((_QWORD *)v16 + 2) = 0;
          *((_QWORD *)v16 + 3) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v18 & 0xFFFFFFFFFFFFFFELL)];
    v19 = result + 4;
    v20 = v18 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -4096;
      *v19 = -4096;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[4 * v17];
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_3>(unint64_t **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;

  v2 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v2)
    return 0;
  v3 = **a1;
  v4 = *(_QWORD **)(a2 + 32);
  v5 = &v4[2 * v2];
  do
  {
    v6 = v2 >> 1;
    v7 = &v4[2 * (v2 >> 1)];
    v9 = *v7;
    v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3)
      v4 = v8;
    else
      v2 = v6;
  }
  while (v2);
  return v4 != v5 && *v4 == v3 && v4[1] != 0;
}

uint64_t llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_4>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, **a1);
}

void mlir::detail::PDLByteCode::~PDLByteCode(mlir::detail::PDLByteCode *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v2 = *((_QWORD *)this + 470);
  if (v2)
  {
    v3 = *((_QWORD *)this + 471);
    v4 = (void *)*((_QWORD *)this + 470);
    if (v3 == v2)
    {
LABEL_11:
      *((_QWORD *)this + 471) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 470);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v8 = *((_QWORD *)this + 467);
  if (!v8)
    goto LABEL_23;
  v9 = *((_QWORD *)this + 468);
  v10 = (void *)*((_QWORD *)this + 467);
  if (v9 != v8)
  {
    while (1)
    {
      v13 = v9 - 32;
      v11 = *(_QWORD **)(v9 - 8);
      if ((_QWORD *)(v9 - 32) == v11)
      {
        v11 = (_QWORD *)(v9 - 32);
        v12 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_17;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_17:
      v9 = v13;
      if (v13 == v8)
      {
        v10 = (void *)*((_QWORD *)this + 467);
        break;
      }
    }
  }
  *((_QWORD *)this + 468) = v8;
  operator delete(v10);
LABEL_23:
  v14 = (char *)*((_QWORD *)this + 49);
  v15 = *((_DWORD *)this + 100);
  if (v15)
  {
    v16 = 104 * v15;
    do
    {
      v17 = &v14[v16];
      v18 = *(char **)&v14[v16 - 32];
      if (&v14[v16 - 16] != v18)
        free(v18);
      v19 = (char *)*((_QWORD *)v17 - 10);
      if (v17 - 64 != v19)
        free(v19);
      v16 -= 104;
    }
    while (v16);
    v14 = (char *)*((_QWORD *)this + 49);
  }
  if (v14 != (char *)this + 408)
    free(v14);
  v20 = (char *)*((_QWORD *)this + 30);
  if (v20 != (char *)this + 264)
    free(v20);
  v21 = (char *)*((_QWORD *)this + 11);
  if (v21 != (char *)this + 112)
    free(v21);
  v22 = (void *)*((_QWORD *)this + 8);
  if (v22)
  {
    *((_QWORD *)this + 9) = v22;
    operator delete(v22);
  }
  v23 = *(char **)this;
  v24 = *((unsigned int *)this + 2);
  if ((_DWORD)v24)
  {
    v25 = &v23[8 * v24];
    do
    {
      v27 = (unsigned int *)*((_QWORD *)v25 - 1);
      v25 -= 8;
      v26 = v27;
      *(_QWORD *)v25 = 0;
      if (v27)
      {
        v28 = *(unsigned int **)v26;
        v29 = v26[2];
        if ((_DWORD)v29)
        {
          v30 = 8 * v29;
          v31 = (char *)(v28 - 2);
          do
          {
            v32 = *(_QWORD *)&v31[v30];
            *(_QWORD *)&v31[v30] = 0;
            if (v32)
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v30 -= 8;
          }
          while (v30);
          v28 = *(unsigned int **)v26;
        }
        if (v28 != v26 + 4)
          free(v28);
        operator delete(v26);
      }
    }
    while (v25 != v23);
    v23 = *(char **)this;
  }
  if (v23 != (char *)this + 16)
    free(v23);
}

mlir::PatternApplicator *mlir::PatternApplicator::PatternApplicator(mlir::PatternApplicator *this, const mlir::FrozenRewritePatternSet *a2)
{
  mlir::detail::PDLByteCode *v3;
  mlir::detail::PDLByteCodeMutableState *v4;

  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 4) = (char *)this + 48;
  *((_QWORD *)this + 5) = 0x100000000;
  *((_QWORD *)this + 7) = 0;
  v3 = *(mlir::detail::PDLByteCode **)(*(_QWORD *)a2 + 72);
  if (v3)
  {
    v4 = (mlir::detail::PDLByteCodeMutableState *)operator new(0xC0uLL);
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 9) = 0u;
    *((_OWORD *)v4 + 10) = 0u;
    *((_OWORD *)v4 + 11) = 0u;
    *((_QWORD *)this + 7) = v4;
    mlir::detail::PDLByteCode::initializeMutableState(v3, v4);
  }
  return this;
}

void mlir::PatternApplicator::~PatternApplicator(mlir::PatternApplicator *this)
{
  mlir::detail::PDLByteCodeMutableState *v2;
  void *v3;
  char *v4;
  uint64_t v5;
  llvm *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v2 = (mlir::detail::PDLByteCodeMutableState *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
  {
    mlir::detail::PDLByteCodeMutableState::~PDLByteCodeMutableState(v2);
    operator delete(v3);
  }
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  v5 = *((unsigned int *)this + 6);
  v6 = (llvm *)*((_QWORD *)this + 1);
  if ((_DWORD)v5)
  {
    v7 = (char *)v6 + 24;
    v8 = 40 * v5;
    do
    {
      if ((*((_QWORD *)v7 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = (char *)*((_QWORD *)v7 - 2);
        if (v7 != v9)
          free(v9);
      }
      v7 += 40;
      v8 -= 40;
    }
    while (v8);
    v6 = (llvm *)*((_QWORD *)this + 1);
    v10 = 40 * *((unsigned int *)this + 6);
  }
  else
  {
    v10 = 0;
  }
  llvm::deallocate_buffer(v6, (void *)v10);
}

uint64_t sub_180644CE8()
{
  uint64_t v0;

  return v0;
}

void mlir::PatternApplicator::applyCostModel(uint64_t **a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t *buffer;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  _QWORD v70[3];
  uint64_t *v71;
  _QWORD v72[2];
  uint64_t v73;
  llvm *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v72[0] = a2;
  v72[1] = a3;
  v4 = *(_QWORD *)(**a1 + 72);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 400);
    if (v5)
    {
      v8 = 0;
      v9 = *(_QWORD *)(v4 + 392);
      v10 = 104 * v5;
      do
      {
        v11 = (uint64_t)a1[7];
        v12 = a2(a3, v9);
        mlir::detail::PDLByteCodeMutableState::updatePatternBenefit(v11, v8++, v12);
        v9 += 104;
        v10 -= 104;
      }
      while (v10);
    }
  }
  v13 = *((_DWORD *)a1 + 4);
  if (!v13 && !*((_DWORD *)a1 + 5))
  {
LABEL_10:
    v15 = **a1;
    if (!*(_DWORD *)(v15 + 8))
      goto LABEL_85;
    goto LABEL_21;
  }
  v14 = *((unsigned int *)a1 + 6);
  if (v14 > 4 * v13 && v14 >= 0x41)
  {
    llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::shrink_and_clear((uint64_t)(a1 + 1));
    goto LABEL_10;
  }
  if ((_DWORD)v14)
  {
    v16 = (uint64_t)(a1[1] + 3);
    for (i = 40 * v14; i; i -= 40)
    {
      v18 = *(_QWORD *)(v16 - 24);
      if (v18 != -8192)
      {
        if (v18 == -4096)
          goto LABEL_15;
        v19 = *(void **)(v16 - 16);
        if ((void *)v16 != v19)
          free(v19);
      }
      *(_QWORD *)(v16 - 24) = -4096;
LABEL_15:
      v16 += 40;
    }
  }
  a1[2] = 0;
  v15 = **a1;
  if (!*(_DWORD *)(v15 + 8))
    goto LABEL_85;
LABEL_21:
  v20 = *(unsigned int *)(v15 + 16);
  if ((_DWORD)v20)
  {
    v21 = 32 * v20;
    v22 = *(uint64_t **)v15;
    while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v22 += 4;
      v21 -= 32;
      if (!v21)
        goto LABEL_85;
    }
  }
  else
  {
    v22 = *(uint64_t **)v15;
  }
  v23 = *(_QWORD *)v15 + 32 * v20;
  if (v22 == (uint64_t *)v23)
    goto LABEL_85;
LABEL_28:
  v24 = (uint64_t *)v22[1];
  v25 = v22[2];
  while (v24 != (uint64_t *)v25)
  {
    v30 = *v24;
    if (*(__int16 *)(*v24 + 20) == -1)
      goto LABEL_33;
    v31 = a1[1];
    v32 = *((unsigned int *)a1 + 6);
    if (!(_DWORD)v32)
      goto LABEL_54;
    v26 = ((*v22 >> 4) ^ (*v22 >> 9)) & (v32 - 1);
    v27 = &v31[5 * v26];
    v28 = *v27;
    if (*v22 != *v27)
    {
      v34 = 0;
      v35 = 1;
      while (v28 != -4096)
      {
        if (v34)
          v36 = 0;
        else
          v36 = v28 == -8192;
        if (v36)
          v34 = v27;
        v37 = v26 + v35++;
        v26 = v37 & (v32 - 1);
        v27 = &v31[5 * v26];
        v28 = *v27;
        if (*v22 == *v27)
          goto LABEL_30;
      }
      if (v34)
        v27 = v34;
      v38 = *((_DWORD *)a1 + 4);
      if (4 * v38 + 4 >= (3 * v32))
      {
LABEL_54:
        v39 = 2 * v32;
        goto LABEL_56;
      }
      if ((int)v32 + ~v38 - *((_DWORD *)a1 + 5) <= v32 >> 3)
      {
        v39 = *((_DWORD *)a1 + 6);
LABEL_56:
        v40 = (v39 - 1) | ((unint64_t)(v39 - 1) >> 1);
        v41 = v40 | (v40 >> 2) | ((v40 | (v40 >> 2)) >> 4);
        v42 = ((v41 | (v41 >> 8)) >> 16) | v41 | (v41 >> 8);
        if ((v42 + 1) > 0x40)
          v43 = v42 + 1;
        else
          v43 = 64;
        *((_DWORD *)a1 + 6) = v43;
        buffer = (uint64_t *)llvm::allocate_buffer(40 * v43, (std::align_val_t)8uLL);
        a1[1] = buffer;
        if (v31)
        {
          v45 = 5 * v32;
          llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>,mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::moveFromOldBuckets((uint64_t)(a1 + 1), v31, &v31[v45]);
          llvm::deallocate_buffer((llvm *)v31, (void *)(v45 * 8));
        }
        a1[2] = 0;
        v46 = *((unsigned int *)a1 + 6);
        v47 = 40 * v46 - 40;
        v48 = buffer;
        if (v47 < 0x28)
          goto LABEL_109;
        v49 = v47 / 0x28 + 1;
        v48 = &buffer[5 * (v49 & 0xFFFFFFFFFFFFFFELL)];
        v50 = v49 & 0xFFFFFFFFFFFFFFELL;
        v51 = buffer;
        do
        {
          *v51 = -4096;
          v51[5] = -4096;
          v51 += 10;
          v50 -= 2;
        }
        while (v50);
        if (v49 != (v49 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_109:
          do
          {
            *v48 = -4096;
            v48 += 5;
          }
          while (v48 != &buffer[5 * v46]);
        }
        v52 = *v22;
        v53 = v46 - 1;
        v54 = ((*v22 >> 4) ^ (*v22 >> 9)) & v53;
        v27 = &buffer[5 * v54];
        v55 = *v27;
        if (*v22 != *v27)
        {
          v56 = 0;
          v57 = 1;
          while (v55 != -4096)
          {
            if (v56)
              v58 = 0;
            else
              v58 = v55 == -8192;
            if (v58)
              v56 = v27;
            v59 = v54 + v57++;
            v54 = v59 & v53;
            v27 = &buffer[5 * v54];
            v55 = *v27;
            if (v52 == *v27)
              goto LABEL_67;
          }
          if (v56)
            v27 = v56;
          goto LABEL_39;
        }
LABEL_67:
        ++*((_DWORD *)a1 + 4);
        if (v52 != -4096)
LABEL_40:
          --*((_DWORD *)a1 + 5);
      }
      else
      {
LABEL_39:
        v33 = *v27;
        ++*((_DWORD *)a1 + 4);
        if (v33 != -4096)
          goto LABEL_40;
      }
      *v27 = *v22;
      v27[1] = (uint64_t)(v27 + 3);
      v27[2] = 0x200000000;
    }
LABEL_30:
    v29 = *((unsigned int *)v27 + 4);
    if (v29 >= *((unsigned int *)v27 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v27 + 1), v27 + 3, v29 + 1, 8);
      v29 = *((unsigned int *)v27 + 4);
    }
    *(_QWORD *)(v27[1] + 8 * v29) = v30;
    ++*((_DWORD *)v27 + 4);
LABEL_33:
    ++v24;
  }
  while (1)
  {
    v22 += 4;
    if (v22 == (uint64_t *)v23)
      break;
    if ((*v22 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (v22 != (uint64_t *)v23)
        goto LABEL_28;
      break;
    }
  }
  v15 = **a1;
LABEL_85:
  v60 = (uint64_t)(a1 + 4);
  *((_DWORD *)a1 + 10) = 0;
  v61 = *(uint64_t **)(v15 + 48);
  v62 = *(uint64_t **)(v15 + 56);
  if (v61 != v62)
  {
    v63 = 0;
    do
    {
      v64 = *v61;
      if (*(__int16 *)(*v61 + 20) != -1)
      {
        if (v63 >= *((_DWORD *)a1 + 11))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 4), a1 + 6, v63 + 1, 8);
          v63 = *((_DWORD *)a1 + 10);
        }
        a1[4][v63] = v64;
        v63 = *((_DWORD *)a1 + 10) + 1;
        *((_DWORD *)a1 + 10) = v63;
      }
      ++v61;
    }
    while (v61 != v62);
  }
  v73 = 1;
  v74 = (llvm *)-4096;
  v76 = -4096;
  v77 = -4096;
  v78 = -4096;
  v71 = &v73;
  v70[0] = v72;
  v70[1] = &v73;
  v70[2] = &v71;
  if (*((_DWORD *)a1 + 4))
  {
    v65 = a1[1];
    v66 = *((unsigned int *)a1 + 6);
    if ((_DWORD)v66)
    {
      v67 = 40 * v66;
      v68 = a1[1];
      while ((*v68 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v68 += 5;
        v67 -= 40;
        if (!v67)
          goto LABEL_97;
      }
    }
    else
    {
      v68 = a1[1];
    }
    v69 = &v65[5 * v66];
LABEL_102:
    if (v68 != v69)
    {
      mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_1::operator()((uint64_t)v70, (uint64_t)(v68 + 1));
      while (1)
      {
        v68 += 5;
        if (v68 == v69)
          break;
        if ((*v68 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_102;
      }
    }
  }
LABEL_97:
  mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_1::operator()((uint64_t)v70, v60);
  if ((v73 & 1) == 0)
    llvm::deallocate_buffer(v74, (void *)(16 * v75));
}

void mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  int *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  unsigned int v13;
  int **v14;
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int **v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  char *v24;
  unint64_t v25;
  const std::nothrow_t *v26;
  unint64_t v27;
  char *v28;
  BOOL v29;
  int *v30;
  int *v31;
  unint64_t v32;
  int *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  char *v52;
  __int16 v53;
  int *v54;

  if (*(_DWORD *)(a2 + 8) == 1)
  {
    if ((**(unsigned __int16 (***)(_QWORD, uint64_t))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8), **(_QWORD **)a2 + 8) == 0xFFFF)*(_DWORD *)(a2 + 8) = 0;
    return;
  }
  v4 = *(int **)(a1 + 8);
  v5 = *v4;
  if (*v4 > 1 || v4[1])
  {
    if ((v5 & 1) != 0)
    {
      v30 = v4 + 2;
      v31 = v4 + 18;
      v32 = 48;
    }
    else
    {
      v6 = (2 * v5) & 0xFFFFFFFC;
      v7 = v4[4];
      if (v6 < v7 && v7 >= 0x41)
      {
        llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::shrink_and_clear((char *)v4);
        goto LABEL_10;
      }
      if (!(_DWORD)v7)
      {
LABEL_49:
        *v4 = v7;
        v4[1] = 0;
        v8 = *(char **)a2;
        v9 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v9)
          goto LABEL_11;
LABEL_50:
        v25 = 0;
        v54 = **(int ***)(a1 + 16);
        v24 = v8;
LABEL_51:
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(v24, v8, &v54, v25, 0, 0);
        v37 = *(_DWORD *)(a2 + 8);
        if (v37)
          goto LABEL_52;
        return;
      }
      v30 = (int *)*((_QWORD *)v4 + 1);
      v31 = &v30[4 * v7];
      v32 = (char *)v31 - (char *)v30 - 16;
      if (v32 < 0x10)
      {
        v33 = (int *)*((_QWORD *)v4 + 1);
        do
        {
LABEL_47:
          *(_QWORD *)v33 = -4096;
          v33 += 4;
        }
        while (v33 != v31);
LABEL_48:
        LODWORD(v7) = *v4 & 1;
        goto LABEL_49;
      }
    }
    v34 = (v32 >> 4) + 1;
    v33 = &v30[4 * (v34 & 0x1FFFFFFFFFFFFFFELL)];
    v35 = v30 + 4;
    v36 = v34 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v35 - 2) = -4096;
      *v35 = -4096;
      v35 += 4;
      v36 -= 2;
    }
    while (v36);
    if (v34 == (v34 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_10:
  v8 = *(char **)a2;
  v9 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v9)
    goto LABEL_50;
LABEL_11:
  v10 = &v8[8 * v9];
  do
  {
    if (*(_QWORD *)v8)
      v16 = (int *)(*(_QWORD *)v8 + 8);
    else
      v16 = 0;
    v54 = v16;
    v17 = *(_QWORD *)(a1 + 8);
    v53 = (**(uint64_t (***)(_QWORD))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8));
    v18 = v17 + 8;
    if ((*(_BYTE *)v17 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v11 = *(_DWORD *)(v17 + 16);
      if (!v11)
      {
        v19 = 0;
        goto LABEL_22;
      }
      v18 = *(_QWORD *)(v17 + 8);
    }
    v12 = v11 - 1;
    v13 = ((v54 >> 4) ^ (v54 >> 9)) & v12;
    v14 = (int **)(v18 + 16 * v13);
    v15 = *v14;
    if (v54 == *v14)
      goto LABEL_14;
    v20 = 0;
    v21 = 1;
    while (v15 != (int *)-4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v15 == (int *)-8192;
      if (v22)
        v20 = v14;
      v23 = v13 + v21++;
      v13 = v23 & v12;
      v14 = (int **)(v18 + 16 * v13);
      v15 = *v14;
      if (v54 == *v14)
        goto LABEL_14;
    }
    if (v20)
      v19 = (uint64_t)v20;
    else
      v19 = (uint64_t)v14;
LABEL_22:
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&,mlir::PatternBenefit>(v17, v19, &v54, &v53);
LABEL_14:
    v8 += 8;
  }
  while (v8 != v10);
  v24 = *(char **)a2;
  v25 = *(unsigned int *)(a2 + 8);
  v8 = (char *)(*(_QWORD *)a2 + 8 * v25);
  v54 = **(int ***)(a1 + 16);
  if (v25 < 0x81)
    goto LABEL_51;
  v26 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v27 = v25;
  while (1)
  {
    v28 = (char *)operator new(8 * v27, v26);
    if (v28)
      break;
    v29 = v27 > 1;
    v27 >>= 1;
    if (!v29)
      goto LABEL_51;
  }
  v52 = v28;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(v24, v8, &v54, v25, v28, v27);
  operator delete(v52);
  v37 = *(_DWORD *)(a2 + 8);
  if (v37)
  {
    while (1)
    {
LABEL_52:
      v38 = *(_QWORD *)(a1 + 8);
      v39 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v37 - 8);
      v40 = (int *)(v39 + 8);
      if (!v39)
        v40 = 0;
      v54 = v40;
      v41 = v38 + 8;
      if ((*(_BYTE *)v38 & 1) != 0)
      {
        v42 = 4;
      }
      else
      {
        v42 = *(_DWORD *)(v38 + 16);
        if (!v42)
        {
          v47 = 0;
          goto LABEL_63;
        }
        v41 = *(_QWORD *)(v38 + 8);
      }
      v43 = v42 - 1;
      v44 = (v42 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      v45 = v41 + 16 * v44;
      v46 = *(_QWORD *)v45;
      if (v40 == *(int **)v45)
        goto LABEL_59;
      v48 = 0;
      v49 = 1;
      while (v46 != -4096)
      {
        if (v48)
          v50 = 0;
        else
          v50 = v46 == -8192;
        if (v50)
          v48 = v45;
        v51 = v44 + v49++;
        v44 = v51 & v43;
        v45 = v41 + 16 * (v51 & v43);
        v46 = *(_QWORD *)v45;
        if (v40 == *(int **)v45)
          goto LABEL_59;
      }
      if (v48)
        v47 = v48;
      else
        v47 = v45;
LABEL_63:
      v45 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>(v38, v47, &v54);
LABEL_59:
      if (*(__int16 *)(v45 + 8) == -1)
      {
        v37 = *(_DWORD *)(a2 + 8) - 1;
        *(_DWORD *)(a2 + 8) = v37;
        if (v37)
          continue;
      }
      return;
    }
  }
}

uint64_t **mlir::PatternApplicator::walkAllPatterns(uint64_t **result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v5 = result;
  v6 = **result;
  if (*(_DWORD *)(v6 + 8))
  {
    v7 = *(unsigned int *)(v6 + 16);
    if ((_DWORD)v7)
    {
      v8 = 32 * v7;
      v9 = *(_QWORD **)v6;
      while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 4;
        v8 -= 32;
        if (!v8)
          goto LABEL_15;
      }
    }
    else
    {
      v9 = *(_QWORD **)v6;
    }
    v10 = *(_QWORD *)v6 + 32 * v7;
    if (v9 != (_QWORD *)v10)
    {
LABEL_9:
      v11 = (uint64_t *)v9[1];
      for (i = (uint64_t *)v9[2]; v11 != i; result = (uint64_t **)a2(a3, v13 + 8))
        v13 = *v11++;
      while (1)
      {
        v9 += 4;
        if (v9 == (_QWORD *)v10)
          break;
        if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v9 != (_QWORD *)v10)
            goto LABEL_9;
          break;
        }
      }
      v6 = **v5;
    }
  }
LABEL_15:
  v14 = *(uint64_t **)(v6 + 48);
  v15 = *(uint64_t **)(v6 + 56);
  if (v14 != v15)
  {
    do
    {
      v16 = *v14++;
      result = (uint64_t **)a2(a3, v16 + 8);
    }
    while (v14 != v15);
    v6 = **v5;
  }
  v17 = *(_QWORD *)(v6 + 72);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 + 400);
    if (v18)
    {
      v19 = *(_QWORD *)(v17 + 392);
      v20 = 104 * v18;
      do
      {
        result = (uint64_t **)a2(a3, v19);
        v19 += 104;
        v20 -= 104;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t mlir::PatternApplicator::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  mlir::MLIRContext *Context;
  uint64_t v36;
  mlir::detail::PDLByteCodeMutableState *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v44[10];
  char v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[2];
  unsigned __int8 v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[62];

  v58[60] = *MEMORY[0x1E0C80C00];
  v53[0] = a6;
  v53[1] = a7;
  v52[0] = a9;
  v52[1] = a10;
  v51 = a2;
  v56 = v58;
  v57 = 0x400000000;
  v14 = *(_QWORD *)(**(_QWORD **)a1 + 72);
  v50 = v14;
  if (v14)
  {
    mlir::detail::PDLByteCode::match(v14, a2, a3, (uint64_t)&v56, *(_QWORD *)(a1 + 56));
    a2 = v51;
  }
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 24);
  if (!v16)
  {
LABEL_9:
    v19 = (uint64_t *)(v15 + 40 * v16);
    goto LABEL_10;
  }
  v17 = *(_QWORD *)(a2 + 48);
  v18 = ((v17 >> 4) ^ (v17 >> 9)) & (v16 - 1);
  v19 = (uint64_t *)(v15 + 40 * v18);
  v20 = *v19;
  if (v17 != *v19)
  {
    v21 = 1;
    while (v20 != -4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v16 - 1);
      v19 = (uint64_t *)(v15 + 40 * v18);
      v20 = *v19;
      if (v17 == *v19)
        goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_10:
  if (v19 == (uint64_t *)(v15 + 40 * v16))
  {
    v24 = 0;
    v23 = 0;
  }
  else
  {
    v23 = v19[1];
    v24 = *((_DWORD *)v19 + 4);
  }
  v49 = 0;
  v25 = *(unsigned int *)(a1 + 40);
  v48 = 0;
  v26 = v57;
  v54 = 0;
  do
  {
    while (1)
    {
      do
      {
        v46 = 0;
        v47 = 0;
        if (HIDWORD(v49) >= v24)
        {
          v29 = v49;
          if (v49 >= v25)
          {
            v33 = v48;
            if (v48 >= v26)
              goto LABEL_45;
            v34 = (char *)v56;
            goto LABEL_37;
          }
          v30 = *(_QWORD *)(a1 + 32);
LABEL_25:
          v31 = *(_QWORD *)(v30 + 8 * v29);
          goto LABEL_26;
        }
        v27 = *(_QWORD *)(v23 + 8 * HIDWORD(v49));
        if (v27)
          v28 = v27 + 8;
        else
          v28 = 0;
        v47 = v28;
        v29 = v49;
        if (v49 >= v25)
        {
          v32 = (unsigned int *)&v49 + 1;
          v33 = v48;
          if (v48 >= v26)
            goto LABEL_38;
LABEL_32:
          v34 = (char *)v56;
          if (v28 && *(unsigned __int16 *)(v28 + 12) >= *((unsigned __int16 *)v56 + 60 * v33 + 56))
            goto LABEL_39;
LABEL_37:
          v46 = &v34[120 * v33];
          v28 = *((_QWORD *)v46 + 13);
          v47 = v28;
          v32 = &v48;
          goto LABEL_38;
        }
        v30 = *(_QWORD *)(a1 + 32);
        if (!v27)
          goto LABEL_25;
        v31 = *(_QWORD *)(v30 + 8 * v49);
        if (*(unsigned __int16 *)(v28 + 12) >= *(unsigned __int16 *)(v31 + 20))
        {
          v32 = (unsigned int *)&v49 + 1;
          v28 = v27 + 8;
          v33 = v48;
          if (v48 < v26)
            goto LABEL_32;
          goto LABEL_38;
        }
LABEL_26:
        if (v31)
          v28 = v31 + 8;
        else
          v28 = 0;
        v47 = v28;
        v32 = (unsigned int *)&v49;
        v33 = v48;
        if (v48 < v26)
          goto LABEL_32;
LABEL_38:
        if (!v28)
          goto LABEL_45;
LABEL_39:
        ++*v32;
      }
      while (a4 && !a4(a5));
      v45 = 0;
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v51 + 24));
      v44[0] = a3;
      v44[1] = (uint64_t)&v51;
      v44[2] = (uint64_t)&v46;
      v44[3] = (uint64_t)&v54;
      v44[4] = (uint64_t)&v50;
      v44[5] = a1;
      v44[6] = (uint64_t)&v47;
      v44[7] = (uint64_t)v52;
      v44[8] = (uint64_t)&v45;
      v44[9] = (uint64_t)v53;
      v55 = v51 & 0xFFFFFFFFFFFFFFF9;
      v36 = v47;
      if (mlir::MLIRContext::hasActionHandler(Context))
        break;
      llvm::function_ref<void ()(void)>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &,llvm::function_ref<BOOL ()(mlir::Pattern const&)>,llvm::function_ref<void ()(mlir::Pattern const&)>,llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>)::$_0>(v44);
      if (v45)
        goto LABEL_45;
    }
    mlir::MLIRContext::executeActionInternal<mlir::ApplyPatternAction,mlir::Pattern const&>((uint64_t *)Context, (uint64_t)llvm::function_ref<void ()(void)>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &,llvm::function_ref<BOOL ()(mlir::Pattern const&)>,llvm::function_ref<void ()(mlir::Pattern const&)>,llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>)::$_0>, (uint64_t)v44, (uint64_t)&v55, 1, v36);
  }
  while (!v45);
LABEL_45:
  v37 = *(mlir::detail::PDLByteCodeMutableState **)(a1 + 56);
  if (v37)
    mlir::detail::PDLByteCodeMutableState::cleanupAfterMatchAndRewrite(v37);
  v38 = (char *)v56;
  if ((_DWORD)v57)
  {
    v39 = 120 * v57;
    do
    {
      v40 = *(char **)&v38[v39 - 32];
      if (&v38[v39 - 16] != v40)
        free(v40);
      v41 = *(char **)&v38[v39 - 48];
      if (&v38[v39 - 32] != v41)
        free(v41);
      v42 = *(char **)&v38[v39 - 112];
      if (&v38[v39 - 96] != v42)
        free(v42);
      v39 -= 120;
    }
    while (v39);
    v38 = (char *)v56;
  }
  if (v38 != (char *)v58)
    free(v38);
  return v54;
}

char *llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::shrink_and_clear(char *result)
{
  char *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    *(_DWORD *)result &= 1u;
    *((_DWORD *)result + 1) = 0;
    v6 = result + 8;
    v7 = result + 72;
    v8 = 48;
    goto LABEL_15;
  }
  if ((v2 & 1) != 0)
  {
    if (v5 <= 4)
    {
      *(_QWORD *)result = 1;
    }
    else
    {
      *(_DWORD *)result &= ~1u;
      result = (char *)llvm::allocate_buffer(16 * v5, (std::align_val_t)8uLL);
      *((_QWORD *)v1 + 1) = result;
      *((_QWORD *)v1 + 2) = v5;
      v14 = *(_DWORD *)v1;
      *(_QWORD *)v1 = *(_DWORD *)v1 & 1;
      if ((v14 & 1) == 0)
      {
        v15 = &result[16 * v5];
        v16 = 16 * v5 - 16;
        if (v16 < 0x10)
        {
          v18 = result;
          goto LABEL_31;
        }
LABEL_24:
        v17 = (v16 >> 4) + 1;
        v18 = &result[16 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
        v19 = result + 16;
        v20 = v17 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v19 - 2) = -4096;
          *v19 = -4096;
          v19 += 4;
          v20 -= 2;
        }
        while (v20);
        if (v17 == (v17 & 0x1FFFFFFFFFFFFFFELL))
          return result;
        do
        {
LABEL_31:
          *(_QWORD *)v18 = -4096;
          v18 += 16;
        }
        while (v18 != v15);
        return result;
      }
    }
    result = v1 + 8;
    v15 = v1 + 72;
    v16 = 48;
    goto LABEL_24;
  }
  v10 = *((unsigned int *)result + 4);
  if ((_DWORD)v5 != (_DWORD)v10)
    llvm::deallocate_buffer(*((llvm **)result + 1), (void *)(16 * v10));
  *(_QWORD *)result = 0;
  if (!(_DWORD)v5)
    return result;
  v6 = (char *)*((_QWORD *)result + 1);
  v7 = &v6[16 * v5];
  v8 = 16 * v5 - 16;
  if (v8 < 0x10)
  {
    v9 = (char *)*((_QWORD *)result + 1);
    do
    {
LABEL_18:
      *(_QWORD *)v9 = -4096;
      v9 += 16;
    }
    while (v9 != v7);
    return result;
  }
LABEL_15:
  v11 = (v8 >> 4) + 1;
  v9 = &v6[16 * (v11 & 0x1FFFFFFFFFFFFFFELL)];
  v12 = v6 + 16;
  v13 = v11 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v12 - 2) = -4096;
    *v12 = -4096;
    v12 += 4;
    v13 -= 2;
  }
  while (v13);
  if (v11 != (v11 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_18;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&,mlir::PatternBenefit>(uint64_t a1, uint64_t a2, _QWORD *a3, _WORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v10 = 4;
  else
    v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::grow(a1, v10);
  v13 = a1 + 8;
  v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v14 = 4;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v13 = *(_QWORD *)(a1 + 8);
  }
  v11 = *(_DWORD *)a1 & 1;
  v15 = v14 - 1;
  v16 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v14 - 1);
  a2 = v13 + 16 * v16;
  v17 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = a2;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      a2 = v13 + 16 * (v21 & v15);
      v17 = *(_QWORD *)a2;
      if (*a3 == *(_QWORD *)a2)
        goto LABEL_7;
    }
    if (v18)
      a2 = v18;
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*(_QWORD *)a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  *(_QWORD *)a2 = *a3;
  *(_WORD *)(a2 + 8) = *a4;
  return a2;
}

int *llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int16 v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v15 = (char *)(16 * v7);
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets((int *)a1, v6, (uint64_t *)&v15[(_QWORD)v6]);
    llvm::deallocate_buffer((llvm *)v6, v15);
  }
  v8 = &v16;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v9 = *(_QWORD *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_10;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_WORD *)(a1 + 16);
    v8 = v18;
    v9 = *(_QWORD *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      v10 = *(_QWORD *)(a1 + 40);
      if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_11;
      goto LABEL_19;
    }
  }
  *v8 = v9;
  *((_WORD *)v8 + 4) = *(_WORD *)(a1 + 32);
  v8 += 2;
  v10 = *(_QWORD *)(a1 + 40);
  if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    v11 = *(_QWORD *)(a1 + 56);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
LABEL_20:
    *v8 = v11;
    *((_WORD *)v8 + 4) = *(_WORD *)(a1 + 64);
    v8 += 2;
    if (a2 < 5)
      return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets((int *)a1, &v16, v8);
    goto LABEL_13;
  }
LABEL_19:
  *v8 = v10;
  *((_WORD *)v8 + 4) = *(_WORD *)(a1 + 48);
  v8 += 2;
  v11 = *(_QWORD *)(a1 + 56);
  if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    goto LABEL_20;
LABEL_12:
  if (a2 >= 5)
  {
LABEL_13:
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets((int *)a1, &v16, v8);
}

int *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int *v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 18;
    v5 = result + 2;
    v7 = 48;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_11;
    v5 = (int *)*((_QWORD *)result + 1);
    v6 = &v5[4 * v4];
    v7 = (char *)v6 - (char *)v5 - 16;
    if (v7 < 0x10)
    {
      v9 = (int *)*((_QWORD *)result + 1);
      do
      {
LABEL_10:
        *(_QWORD *)v9 = -4096;
        v9 += 4;
      }
      while (v9 != v6);
      goto LABEL_11;
    }
  }
  v8 = (v7 >> 4) + 1;
  v9 = &v5[4 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
  v10 = v5 + 4;
  v11 = v8 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = -4096;
    *v10 = -4096;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_10;
LABEL_11:
  while (a2 != a3)
  {
    v18 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v13 = 4;
        v12 = result + 2;
      }
      else
      {
        v12 = (int *)*((_QWORD *)result + 1);
        v13 = result[4];
      }
      v14 = v13 - 1;
      v15 = (v13 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v16 = (uint64_t *)&v12[4 * v15];
      v17 = *v16;
      if (v18 != *v16)
      {
        v19 = 0;
        v20 = 1;
        while (v17 != -4096)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v17 == -8192;
          if (v21)
            v19 = v16;
          v22 = v15 + v20++;
          v15 = v22 & v14;
          v16 = (uint64_t *)&v12[4 * (v22 & v14)];
          v17 = *v16;
          if (v18 == *v16)
            goto LABEL_15;
        }
        if (v19)
          v16 = v19;
      }
LABEL_15:
      *v16 = v18;
      *((_WORD *)v16 + 4) = *((_WORD *)a2 + 4);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(char *a1, char *a2, int **a3, unint64_t a4, char *a5, uint64_t a6)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int *v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;

  if (a4 < 2)
    return;
  v8 = a1;
  if (a4 == 2)
  {
    v9 = *((_QWORD *)a2 - 1);
    if (v9)
      v10 = v9 + 8;
    else
      v10 = 0;
    if (*(_QWORD *)a1)
      v11 = *(_QWORD *)a1 + 8;
    else
      v11 = 0;
    if (mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v10, v11))
    {
      v12 = *(_QWORD *)v8;
      *(_QWORD *)v8 = *((_QWORD *)a2 - 1);
      *((_QWORD *)a2 - 1) = v12;
    }
    return;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2)
      return;
    v14 = a1 + 8;
    if (a1 + 8 == a2)
      return;
    v15 = a1;
LABEL_19:
    v17 = v14;
    v19 = *(_QWORD *)v15;
    v18 = *((_QWORD *)v15 + 1);
    if (v18)
      v20 = v18 + 8;
    else
      v20 = 0;
    if (v19)
      v21 = v19 + 8;
    else
      v21 = 0;
    if (!mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v20, v21))goto LABEL_18;
    v22 = *(_QWORD *)v17;
    if (*(_QWORD *)v17)
      v23 = *(_QWORD *)v17 + 8;
    else
      v23 = 0;
    v24 = (v23 >> 4) ^ (v23 >> 9);
    v16 = v17;
    while (1)
    {
      *(_QWORD *)v16 = *(_QWORD *)v15;
      if (v15 == v8)
      {
        v16 = v8;
LABEL_17:
        *(_QWORD *)v16 = v22;
LABEL_18:
        v14 = v17 + 8;
        v15 = v17;
        if (v17 + 8 != a2)
          goto LABEL_19;
        return;
      }
      v16 = v15;
      v31 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v32 = v31 + 8;
      if (v31)
        v33 = v32;
      else
        v33 = 0;
      v90 = v33;
      v91 = v23;
      v34 = *a3;
      v36 = (uint64_t)(*a3 + 2);
      v35 = **a3;
      if ((v35 & 1) != 0)
      {
        v37 = 4;
      }
      else
      {
        v37 = v34[4];
        if (!v37)
        {
          v42 = 0;
          goto LABEL_46;
        }
        v36 = *((_QWORD *)v34 + 1);
      }
      v38 = v37 - 1;
      v39 = v38 & v24;
      v40 = v36 + 16 * (v38 & v24);
      v41 = *(_QWORD *)v40;
      if (*(_QWORD *)v40 == v23)
        goto LABEL_42;
      v48 = 0;
      v49 = 1;
      while (v41 != -4096)
      {
        if (v48)
          v50 = 0;
        else
          v50 = v41 == -8192;
        if (v50)
          v48 = v40;
        v51 = v39 + v49++;
        v39 = v51 & v38;
        v40 = v36 + 16 * v39;
        v41 = *(_QWORD *)v40;
        if (*(_QWORD *)v40 == v23)
          goto LABEL_42;
      }
      if (v48)
        v42 = v48;
      else
        v42 = v40;
LABEL_46:
      v40 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v34, v42, &v91);
      v34 = *a3;
      v35 = **a3;
LABEL_42:
      if ((v35 & 1) != 0)
      {
        v25 = v34 + 2;
        v26 = 4;
      }
      else
      {
        v26 = v34[4];
        if (!v26)
        {
          v43 = 0;
LABEL_48:
          v29 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v34, v43, &v90);
          goto LABEL_32;
        }
        v25 = (int *)*((_QWORD *)v34 + 1);
      }
      v27 = v26 - 1;
      v28 = ((v90 >> 4) ^ (v90 >> 9)) & (v26 - 1);
      v29 = (uint64_t)&v25[4 * v28];
      v30 = *(_QWORD *)v29;
      if (v90 != *(_QWORD *)v29)
      {
        v44 = 0;
        v45 = 1;
        while (v30 != -4096)
        {
          if (v44)
            v46 = 0;
          else
            v46 = v30 == -8192;
          if (v46)
            v44 = v29;
          v47 = v28 + v45++;
          v28 = v47 & v27;
          v29 = (uint64_t)&v25[4 * (v47 & v27)];
          v30 = *(_QWORD *)v29;
          if (v90 == *(_QWORD *)v29)
            goto LABEL_32;
        }
        if (v44)
          v43 = v44;
        else
          v43 = v29;
        goto LABEL_48;
      }
LABEL_32:
      if (*(unsigned __int16 *)(v29 + 8) >= *(unsigned __int16 *)(v40 + 8))
        goto LABEL_17;
    }
  }
  v54 = a4 >> 1;
  v55 = &a1[8 * (a4 >> 1)];
  v56 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a1, v55, a3, v56, a5, a6);
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
    std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>((uint64_t)v8, &v8[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
    return;
  }
  std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a1, v55, a3, v56, (uint64_t *)a5);
  v57 = (uint64_t *)&a5[8 * v54];
  std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v57);
  v58 = v8;
  v59 = v57;
  v60 = a5;
  v61 = &a5[8 * a4];
  do
  {
    if (v59 == (uint64_t *)v61)
    {
      if (v60 == (char *)v57)
        return;
      v80 = &a5[8 * v54] - v60 - 8;
      if (v80 >= 0x38 && (unint64_t)(v58 - v60) >= 0x20)
      {
        v84 = 0;
        v85 = (v80 >> 3) + 1;
        v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
        v81 = &v8[v86];
        v82 = (uint64_t *)&v60[v86];
        v87 = v85 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v88 = &v8[v84];
          v89 = *(_OWORD *)&v60[v84 + 16];
          *(_OWORD *)v88 = *(_OWORD *)&v60[v84];
          *((_OWORD *)v88 + 1) = v89;
          v84 += 32;
          v87 -= 4;
        }
        while (v87);
        if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
          return;
      }
      else
      {
        v81 = v8;
        v82 = (uint64_t *)v60;
      }
      do
      {
        v83 = *v82++;
        *(_QWORD *)v81 = v83;
        v81 += 8;
      }
      while (v82 != v57);
      return;
    }
    v62 = v59;
    v63 = *v59;
    if (v63)
      v64 = v63 + 8;
    else
      v64 = 0;
    if (*(_QWORD *)v60)
      v65 = *(_QWORD *)v60 + 8;
    else
      v65 = 0;
    v66 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v64, v65);
    if (v66)
      v67 = v62;
    else
      v67 = v60;
    v60 += 8 * !v66;
    v59 = &v62[v66];
    *(_QWORD *)v8 = *v67;
    v8 += 8;
    v58 += 8;
  }
  while (v60 != (char *)v57);
  if (v59 != (uint64_t *)v61)
  {
    v68 = -8;
    if (!v66)
      v68 = 0;
    v69 = &a5[8 * a4] - (char *)v62 + v68 - 8;
    if (v69 < 0x68)
      goto LABEL_110;
    v70 = 1;
    if (!v66)
      v70 = 0;
    if ((unint64_t)(v58 - (char *)&v62[v70]) < 0x20)
      goto LABEL_110;
    v71 = 0;
    v72 = (v69 >> 3) + 1;
    v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    v74 = &v8[v73 * 8];
    v75 = &v59[v73];
    v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v77 = &v8[v71 * 8];
      v78 = *(_OWORD *)&v59[v71 + 2];
      *(_OWORD *)v77 = *(_OWORD *)&v59[v71];
      *((_OWORD *)v77 + 1) = v78;
      v71 += 4;
      v76 -= 4;
    }
    while (v76);
    v8 = v74;
    v59 = v75;
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_110:
      do
      {
        v79 = *v59++;
        *(_QWORD *)v8 = v79;
        v8 += 8;
      }
      while (v59 != (uint64_t *)v61);
    }
  }
}

BOOL mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(int **a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a3;
  v30 = a2;
  v4 = *a1;
  v6 = v4 + 2;
  v5 = *v4;
  if ((*v4 & 1) != 0)
  {
    v7 = 4;
  }
  else
  {
    v7 = v4[4];
    if (!v7)
    {
      v19 = 0;
      goto LABEL_13;
    }
    v6 = (_DWORD *)*((_QWORD *)v4 + 1);
  }
  v8 = v7 - 1;
  v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (uint64_t)&v6[4 * v9];
  v11 = *(_QWORD *)v10;
  if (*(_QWORD *)v10 == a2)
    goto LABEL_6;
  v21 = 0;
  v22 = 1;
  while (v11 != -4096)
  {
    if (v21)
      v23 = 0;
    else
      v23 = v11 == -8192;
    if (v23)
      v21 = v10;
    v24 = v9 + v22++;
    v9 = v24 & v8;
    v10 = (uint64_t)&v6[4 * v9];
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10 == a2)
      goto LABEL_6;
  }
  if (v21)
    v19 = v21;
  else
    v19 = v10;
LABEL_13:
  v10 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v4, v19, &v30);
  v4 = *a1;
  v5 = **a1;
LABEL_6:
  if ((v5 & 1) != 0)
  {
    v13 = v4 + 2;
    v12 = 4;
  }
  else
  {
    v12 = v4[4];
    if (!v12)
    {
      v20 = 0;
LABEL_15:
      v16 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v4, v20, &v29);
      return *(unsigned __int16 *)(v16 + 8) < *(unsigned __int16 *)(v10 + 8);
    }
    v13 = (_DWORD *)*((_QWORD *)v4 + 1);
  }
  v14 = v12 - 1;
  v15 = ((v29 >> 4) ^ (v29 >> 9)) & (v12 - 1);
  v16 = (uint64_t)&v13[4 * v15];
  v17 = *(_QWORD *)v16;
  if (v29 != *(_QWORD *)v16)
  {
    v25 = 0;
    v26 = 1;
    while (v17 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v17 == -8192;
      if (v27)
        v25 = v16;
      v28 = v15 + v26++;
      v15 = v28 & v14;
      v16 = (uint64_t)&v13[4 * (v28 & v14)];
      v17 = *(_QWORD *)v16;
      if (v29 == *(_QWORD *)v16)
        return *(unsigned __int16 *)(v16 + 8) < *(unsigned __int16 *)(v10 + 8);
    }
    if (v25)
      v20 = v25;
    else
      v20 = v16;
    goto LABEL_15;
  }
  return *(unsigned __int16 *)(v16 + 8) < *(unsigned __int16 *)(v10 + 8);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(char *a1, char *a2, int **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  char *v7;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  __n128 result;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;

  if (a4)
  {
    v5 = a5;
    v7 = a1;
    if (a4 == 1)
    {
LABEL_15:
      *v5 = *(_QWORD *)v7;
      return result;
    }
    if (a4 == 2)
    {
      v11 = a2 - 8;
      v10 = *((_QWORD *)a2 - 1);
      if (v10)
        v12 = v10 + 8;
      else
        v12 = 0;
      if (*(_QWORD *)a1)
        v13 = *(_QWORD *)a1 + 8;
      else
        v13 = 0;
      v14 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v12, v13);
      if (v14)
        v16 = v11;
      else
        v16 = v7;
      *v5++ = *(_QWORD *)v16;
      if (!v14)
        v7 = v11;
      goto LABEL_15;
    }
    if ((uint64_t)a4 <= 8)
    {
      if (a1 == a2)
        return result;
      v17 = a1 + 8;
      *a5 = *(_QWORD *)a1;
      if (a1 + 8 == a2)
        return result;
      v18 = a5;
      while (1)
      {
        v21 = v18;
        v23 = *v18++;
        v22 = v23;
        v24 = *(_QWORD *)v17 ? *(_QWORD *)v17 + 8 : 0;
        v25 = v22 ? v22 + 8 : 0;
        v26 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v24, v25);
        v19 = v18;
        if (v26)
        {
          v21[1] = *v21;
          v19 = v5;
          if (v21 != v5)
            break;
        }
LABEL_22:
        v20 = *(_QWORD *)v17;
        v17 += 8;
        *v19 = v20;
        if (v17 == a2)
          return result;
      }
      v27 = v21;
      while (1)
      {
        v28 = *(_QWORD *)v17 + 8;
        if (!*(_QWORD *)v17)
          v28 = 0;
        v29 = *--v27;
        v30 = v29 + 8;
        if (v29)
          v31 = v30;
        else
          v31 = 0;
        v90 = v31;
        v91 = v28;
        v32 = *a3;
        v34 = (uint64_t)(*a3 + 2);
        v33 = **a3;
        if ((v33 & 1) != 0)
        {
          v35 = 4;
        }
        else
        {
          v35 = v32[4];
          if (!v35)
          {
            v46 = 0;
            goto LABEL_51;
          }
          v34 = *((_QWORD *)v32 + 1);
        }
        v36 = v35 - 1;
        v37 = v36 & ((v28 >> 4) ^ (v28 >> 9));
        v38 = v34 + 16 * v37;
        v39 = *(_QWORD *)v38;
        if (*(_QWORD *)v38 == v28)
          goto LABEL_42;
        v48 = 0;
        v49 = 1;
        while (v39 != -4096)
        {
          if (v48)
            v50 = 0;
          else
            v50 = v39 == -8192;
          if (v50)
            v48 = v38;
          v51 = v37 + v49++;
          v37 = v51 & v36;
          v38 = v34 + 16 * v37;
          v39 = *(_QWORD *)v38;
          if (*(_QWORD *)v38 == v28)
            goto LABEL_42;
        }
        if (v48)
          v46 = v48;
        else
          v46 = v38;
LABEL_51:
        v38 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v32, v46, &v91);
        v32 = *a3;
        v33 = **a3;
LABEL_42:
        if ((v33 & 1) != 0)
        {
          v41 = v32 + 2;
          v40 = 4;
        }
        else
        {
          v40 = v32[4];
          if (!v40)
          {
            v47 = 0;
LABEL_53:
            v44 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v32, v47, &v90);
            goto LABEL_47;
          }
          v41 = (int *)*((_QWORD *)v32 + 1);
        }
        v42 = v40 - 1;
        v43 = ((v90 >> 4) ^ (v90 >> 9)) & (v40 - 1);
        v44 = (uint64_t)&v41[4 * v43];
        v45 = *(_QWORD *)v44;
        if (v90 != *(_QWORD *)v44)
        {
          v52 = 0;
          v53 = 1;
          while (v45 != -4096)
          {
            if (v52)
              v54 = 0;
            else
              v54 = v45 == -8192;
            if (v54)
              v52 = v44;
            v55 = v43 + v53++;
            v43 = v55 & v42;
            v44 = (uint64_t)&v41[4 * (v55 & v42)];
            v45 = *(_QWORD *)v44;
            if (v90 == *(_QWORD *)v44)
              goto LABEL_47;
          }
          if (v52)
            v47 = v52;
          else
            v47 = v44;
          goto LABEL_53;
        }
LABEL_47:
        if (*(unsigned __int16 *)(v44 + 8) >= *(unsigned __int16 *)(v38 + 8))
        {
          v19 = v21;
          goto LABEL_22;
        }
        *v21 = *(v21 - 1);
        v21 = v27;
        if (v27 == v5)
        {
          v19 = v5;
          goto LABEL_22;
        }
      }
    }
    v56 = a4 >> 1;
    v57 = 8 * (a4 >> 1);
    v58 = &a1[v57];
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a1, &a1[v57], a3, a4 >> 1, a5, a4 >> 1);
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(&v7[v57], a2, a3, a4 - v56, &v5[(unint64_t)v57 / 8], a4 - v56);
    v59 = (char *)v5;
    v60 = v7;
    v61 = v58;
    do
    {
      if (v61 == a2)
      {
        if (v60 == v58)
          return result;
        v80 = &v7[8 * v56] - v60 - 8;
        if (v80 >= 0x38 && (unint64_t)(v59 - v60) >= 0x20)
        {
          v84 = 0;
          v85 = (v80 >> 3) + 1;
          v86 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          v81 = &v5[v86];
          v82 = &v60[v86 * 8];
          v87 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v88 = &v5[v84];
            result = *(__n128 *)&v60[v84 * 8];
            v89 = *(_OWORD *)&v60[v84 * 8 + 16];
            *(__n128 *)v88 = result;
            *((_OWORD *)v88 + 1) = v89;
            v84 += 4;
            v87 -= 4;
          }
          while (v87);
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v81 = v5;
          v82 = v60;
        }
        do
        {
          v83 = *(_QWORD *)v82;
          v82 += 8;
          *v81++ = v83;
        }
        while (v82 != v58);
        return result;
      }
      v62 = v61;
      v63 = *(_QWORD *)v61;
      if (v63)
        v64 = v63 + 8;
      else
        v64 = 0;
      if (*(_QWORD *)v60)
        v65 = *(_QWORD *)v60 + 8;
      else
        v65 = 0;
      v66 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v64, v65);
      if (v66)
        v67 = v62;
      else
        v67 = v60;
      v61 = &v62[8 * v66];
      v60 += 8 * !v66;
      *v5++ = *(_QWORD *)v67;
      v59 += 8;
    }
    while (v60 != v58);
    if (v61 != a2)
    {
      v68 = -8;
      if (!v66)
        v68 = 0;
      v69 = a2 - v62 + v68 - 8;
      if (v69 < 0x68)
        goto LABEL_113;
      v70 = 8;
      if (!v66)
        v70 = 0;
      if ((unint64_t)(v59 - v62 - v70) < 0x20)
        goto LABEL_113;
      v71 = 0;
      v72 = (v69 >> 3) + 1;
      v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      v74 = &v5[v73];
      v75 = &v61[v73 * 8];
      v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v77 = &v5[v71];
        result = *(__n128 *)&v61[v71 * 8];
        v78 = *(_OWORD *)&v61[v71 * 8 + 16];
        *(__n128 *)v77 = result;
        *((_OWORD *)v77 + 1) = v78;
        v71 += 4;
        v76 -= 4;
      }
      while (v76);
      v5 = v74;
      v61 = v75;
      if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_113:
        do
        {
          v79 = *(_QWORD *)v61;
          v61 += 8;
          *v5++ = v79;
        }
        while (v61 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(uint64_t result, char *a2, char *a3, int **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  char *v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  BOOL v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  _OWORD *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  int *v135;

  if (!a6)
    return result;
  v10 = a6;
  v15 = (char *)result;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v18 = *(_QWORD *)a2 ? *(_QWORD *)a2 + 8 : 0;
      v19 = *(_QWORD *)&v15[8 * v17];
      v20 = v19 ? v19 + 8 : 0;
      result = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v18, v20);
      if ((result & 1) != 0)
        break;
      ++v17;
      v16 -= 8;
      if (a5 == v17)
        return result;
    }
    result = (uint64_t)&v15[-v16];
    v133 = a3;
    v134 = v10;
    if (a5 - v17 >= v10)
    {
      if (a5 - 1 == v17)
      {
        v111 = *(_QWORD *)&v15[8 * v17];
        *(_QWORD *)&v15[8 * v17] = *(_QWORD *)a2;
        *(_QWORD *)a2 = v111;
        return result;
      }
      v124 = a8;
      v33 = (a5 - v17) / 2;
      v34 = &v15[8 * v33];
      v135 = *a4;
      if (a3 == a2)
      {
        v23 = a3;
      }
      else
      {
        v127 = &v15[-v16];
        v130 = a7;
        v35 = (a3 - a2) >> 3;
        v23 = a2;
        do
        {
          v36 = &v23[8 * (v35 >> 1)];
          v38 = *(_QWORD *)v36;
          v37 = v36 + 8;
          v39 = *(_QWORD *)&v34[8 * v17];
          v40 = v38 + 8;
          if (v38)
            v41 = v40;
          else
            v41 = 0;
          if (v39)
            v42 = v39 + 8;
          else
            v42 = 0;
          v43 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(&v135, v41, v42);
          if (v43)
            v35 += ~(v35 >> 1);
          else
            v35 >>= 1;
          if (v43)
            v23 = v37;
        }
        while (v35);
        result = (uint64_t)v127;
        a7 = v130;
        v33 = (a5 - v17) / 2;
      }
      v26 = &v34[-v16];
      v22 = (v23 - a2) >> 3;
      a8 = v124;
      a3 = v23;
      if (v26 != a2)
      {
LABEL_53:
        a3 = v26;
        if (a2 != v23)
        {
          if (v26 + 8 == a2)
          {
            v131 = a7;
            v125 = a8;
            v51 = *(_QWORD *)v26;
            v52 = v23 - a2;
            v53 = result;
            v54 = a2;
            v55 = v23 - a2;
            v56 = v33;
            v57 = v22;
            memmove(v26, v54, v55);
            v22 = v57;
            v33 = v56;
            result = v53;
            a3 = &v26[v52];
            *(_QWORD *)&v26[v52] = v51;
            a8 = v125;
            a7 = v131;
          }
          else if (a2 + 8 == v23)
          {
            v58 = *((_QWORD *)v23 - 1);
            a3 = v26 + 8;
            if (v23 - 8 != v26)
            {
              v128 = result;
              v132 = *((_QWORD *)v23 - 1);
              v59 = v33;
              v60 = v22;
              memmove(v26 + 8, v26, v23 - 8 - v26);
              result = v128;
              v58 = v132;
              v22 = v60;
              v33 = v59;
            }
            *(_QWORD *)v26 = v58;
          }
          else
          {
            v44 = (a2 - v26) >> 3;
            v45 = (v23 - a2) >> 3;
            if (v44 == v45)
            {
              v46 = 0;
              do
              {
                v47 = *(_QWORD *)&v26[v46];
                *(_QWORD *)&v26[v46] = *(_QWORD *)&a2[v46];
                v48 = (uint64_t)&v26[v46 + 8];
                *(_QWORD *)&a2[v46] = v47;
                v49 = (uint64_t)&a2[v46 + 8];
                v46 += 8;
              }
              while ((char *)v48 != a2 && v49 != (_QWORD)v23);
              a3 = a2;
            }
            else
            {
              v61 = (v23 - a2) >> 3;
              v62 = (a2 - v26) >> 3;
              do
              {
                v63 = v62;
                v62 = v61;
                v61 = v63 % v61;
              }
              while (v61);
              if (v62)
              {
                v64 = &v26[8 * v62];
                do
                {
                  v66 = *((_QWORD *)v64 - 1);
                  v64 -= 8;
                  v65 = v66;
                  v67 = &v64[8 * v44];
                  v68 = v64;
                  do
                  {
                    v69 = v68;
                    v68 = v67;
                    *(_QWORD *)v69 = *(_QWORD *)v67;
                    v70 = (v23 - v67) >> 3;
                    v71 = __OFSUB__(v44, v70);
                    v73 = v44 - v70;
                    v72 = (v73 < 0) ^ v71;
                    v67 = &v26[8 * v73];
                    if (v72)
                      v67 = &v68[8 * v44];
                  }
                  while (v67 != v64);
                  *(_QWORD *)v68 = v65;
                }
                while (v64 != v26);
              }
              a3 = &v26[8 * v45];
            }
          }
        }
      }
    }
    else
    {
      if (v10 >= 0)
        v21 = v10;
      else
        v21 = v10 + 1;
      v22 = v21 >> 1;
      v23 = &a2[8 * (v21 >> 1)];
      if ((char *)result == a2)
      {
        v26 = a2;
        v33 = (uint64_t)&a2[-result] >> 3;
        a3 = &a2[8 * (v21 >> 1)];
      }
      else
      {
        v123 = v21 >> 1;
        v126 = &v15[-v16];
        v129 = a7;
        v24 = a8;
        v25 = (uint64_t)(a2 - v15 + v16) >> 3;
        v26 = (char *)result;
        do
        {
          v27 = &v26[8 * (v25 >> 1)];
          v30 = *(_QWORD *)v27;
          v29 = v27 + 8;
          v28 = v30;
          if (*(_QWORD *)v23)
            v31 = *(_QWORD *)v23 + 8;
          else
            v31 = 0;
          if (v28)
            v32 = v28 + 8;
          else
            v32 = 0;
          if (mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v31, v32))
          {
            v25 >>= 1;
          }
          else
          {
            v26 = v29;
            v25 += ~(v25 >> 1);
          }
        }
        while (v25);
        a8 = v24;
        result = (uint64_t)v126;
        a7 = v129;
        v22 = v123;
        v33 = (v26 - v126) >> 3;
        a3 = v23;
        if (v26 != a2)
          goto LABEL_53;
      }
    }
    v74 = a5 - v33 - v17;
    v75 = v134 - v22;
    if (v33 + v22 >= v134 + a5 - (v33 + v22) - v17)
    {
      v77 = (char *)result;
      a5 = v33;
      v78 = v74;
      v79 = v22;
      result = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a3, v23, v133, a4, v78, v134 - v22, a7, a8);
      v80 = v26;
      v81 = v79;
      v15 = v77;
      a2 = v80;
      v10 = v81;
      if (!v81)
        return result;
    }
    else
    {
      result = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(result, v26, a3, a4, v33, v22, a7, a8);
      v76 = a3;
      a3 = v133;
      a5 = v74;
      v15 = v76;
      a2 = v23;
      v10 = v75;
      if (!v75)
        return result;
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v98 = a2 - v15 - 8;
      v99 = a7;
      v100 = v15;
      if (v98 < 0x18)
        goto LABEL_141;
      v99 = a7;
      v100 = v15;
      if ((unint64_t)(a7 - v15) < 0x20)
        goto LABEL_141;
      v101 = (v98 >> 3) + 1;
      v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
      v99 = &a7[v102];
      v100 = &v15[v102];
      v103 = (__int128 *)(v15 + 16);
      v104 = a7 + 16;
      v105 = v101 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v106 = *v103;
        *(v104 - 1) = *(v103 - 1);
        *v104 = v106;
        v103 += 2;
        v104 += 2;
        v105 -= 4;
      }
      while (v105);
      if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_141:
        do
        {
          v107 = *(_QWORD *)v100;
          v100 += 8;
          *(_QWORD *)v99 = v107;
          v99 += 8;
        }
        while (v100 != a2);
      }
      if (v99 != a7)
      {
        while (a2 != a3)
        {
          if (*(_QWORD *)a2)
            v108 = *(_QWORD *)a2 + 8;
          else
            v108 = 0;
          if (*(_QWORD *)a7)
            v109 = *(_QWORD *)a7 + 8;
          else
            v109 = 0;
          result = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v108, v109);
          if ((_DWORD)result)
            v110 = a2;
          else
            v110 = a7;
          a7 += 8 * (result ^ 1);
          a2 += 8 * result;
          *(_QWORD *)v15 = *(_QWORD *)v110;
          v15 += 8;
          if (a7 == v99)
            return result;
        }
        return (uint64_t)memmove(v15, a7, v99 - a7);
      }
    }
  }
  else if (a2 != a3)
  {
    v82 = a3 - a2 - 8;
    v83 = a7;
    v84 = a2;
    if (v82 < 0x18)
      goto LABEL_142;
    v83 = a7;
    v84 = a2;
    if ((unint64_t)(a7 - a2) < 0x20)
      goto LABEL_142;
    v85 = (v82 >> 3) + 1;
    v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
    v83 = &a7[v86];
    v84 = &a2[v86];
    v87 = (__int128 *)(a2 + 16);
    v88 = a7 + 16;
    v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v90 = *v87;
      *(v88 - 1) = *(v87 - 1);
      *v88 = v90;
      v87 += 2;
      v88 += 2;
      v89 -= 4;
    }
    while (v89);
    if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_142:
      do
      {
        v91 = *(_QWORD *)v84;
        v84 += 8;
        *(_QWORD *)v83 = v91;
        v83 += 8;
      }
      while (v84 != a3);
    }
    if (v83 != a7)
    {
      v92 = a3;
      while (a2 != v15)
      {
        v93 = *((_QWORD *)a2 - 1);
        v94 = *((_QWORD *)v83 - 1);
        if (v94)
          v95 = v94 + 8;
        else
          v95 = 0;
        if (v93)
          v96 = v93 + 8;
        else
          v96 = 0;
        result = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v95, v96);
        if ((_DWORD)result)
          v97 = a2;
        else
          v97 = v83;
        if ((_DWORD)result)
          a2 -= 8;
        else
          v83 -= 8;
        *((_QWORD *)a3 - 1) = *((_QWORD *)v97 - 1);
        a3 -= 8;
        v92 -= 8;
        if (v83 == a7)
          return result;
      }
      v112 = v83 - a7 - 8;
      if (v112 < 0x58 || (unint64_t)(v83 - v92) < 0x20)
      {
        v113 = v83;
        v114 = a3;
        goto LABEL_132;
      }
      v117 = 0;
      v118 = (v112 >> 3) + 1;
      v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
      v113 = &v83[-v119];
      v114 = &a3[-v119];
      v120 = v118 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v121 = *(_OWORD *)&v83[v117 - 16];
        v122 = &a3[v117];
        *((_OWORD *)v122 - 2) = *(_OWORD *)&v83[v117 - 32];
        *((_OWORD *)v122 - 1) = v121;
        v117 -= 32;
        v120 -= 4;
      }
      while (v120);
      if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_132:
        v115 = v114 - 8;
        do
        {
          v116 = *((_QWORD *)v113 - 1);
          v113 -= 8;
          *(_QWORD *)v115 = v116;
          v115 -= 8;
        }
        while (v113 != a7);
      }
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::grow(a1, v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = v11 + 16 * v14;
  v15 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = v11 + 16 * (v19 & v13);
      v15 = *(_QWORD *)a2;
      if (*a3 == *(_QWORD *)a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*(_QWORD *)a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  *(_QWORD *)a2 = *a3;
  *(_WORD *)(a2 + 8) = -1;
  return a2;
}

void mlir::detail::PDLByteCodeMutableState::~PDLByteCodeMutableState(mlir::detail::PDLByteCodeMutableState *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    v5 = *((_QWORD *)this + 16);
    v6 = (void *)*((_QWORD *)this + 15);
    if (v5 != v4)
    {
      do
      {
        v8 = *(void **)(v5 - 16);
        v5 -= 16;
        v7 = v8;
        if (v8)
          operator delete[](v7);
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v4;
    operator delete(v6);
  }
  v9 = (void *)*((_QWORD *)this + 12);
  if (v9)
  {
    *((_QWORD *)this + 13) = v9;
    operator delete(v9);
  }
  v10 = *((_QWORD *)this + 9);
  if (v10)
  {
    v11 = *((_QWORD *)this + 10);
    v12 = (void *)*((_QWORD *)this + 9);
    if (v11 != v10)
    {
      do
      {
        v14 = *(void **)(v11 - 16);
        v11 -= 16;
        v13 = v14;
        if (v14)
          operator delete[](v13);
      }
      while (v11 != v10);
      v12 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v10;
    operator delete(v12);
  }
  v15 = (void *)*((_QWORD *)this + 6);
  if (v15)
  {
    *((_QWORD *)this + 7) = v15;
    operator delete(v15);
  }
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    v17 = *((_QWORD *)this + 4);
    v18 = (void *)*((_QWORD *)this + 3);
    if (v17 != v16)
    {
      do
      {
        v20 = *(void **)(v17 - 16);
        v17 -= 16;
        v19 = v20;
        if (v20)
          operator delete[](v19);
      }
      while (v17 != v16);
      v18 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v16;
    operator delete(v18);
  }
  v21 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v21;
    operator delete(v21);
  }
}

void llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::shrink_and_clear(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  unsigned int v8;
  llvm *v9;
  unint64_t v10;
  llvm *v11;
  unint64_t v12;
  uint64_t v13;
  llvm *v14;
  llvm *v15;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)a1 + 24;
    v5 = 40 * v2;
    do
    {
      if ((*(_QWORD *)(v4 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = *(void **)(v4 - 16);
        if ((void *)v4 != v6)
          free(v6);
      }
      v4 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64)
    v7 = 64;
  if (v3)
    v8 = v7;
  else
    v8 = 0;
  if (v8 != *(_DWORD *)(a1 + 16))
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(40 * v2));
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    v9 = *(llvm **)a1;
    v10 = 40 * v8 - 40;
    if (v10 < 0x28)
    {
      v11 = *(llvm **)a1;
LABEL_20:
      v15 = (llvm *)((char *)v9 + 40 * v8);
      do
      {
        *(_QWORD *)v11 = -4096;
        v11 = (llvm *)((char *)v11 + 40);
      }
      while (v11 != v15);
      return;
    }
    v12 = v10 / 0x28 + 1;
    v11 = (llvm *)((char *)v9 + 40 * (v12 & 0xFFFFFFFFFFFFFFELL));
    v13 = v12 & 0xFFFFFFFFFFFFFFELL;
    v14 = *(llvm **)a1;
    do
    {
      *(_QWORD *)v14 = -4096;
      *((_QWORD *)v14 + 5) = -4096;
      v14 = (llvm *)((char *)v14 + 80);
      v13 -= 2;
    }
    while (v13);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_20;
  }
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>,mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6 - 40;
    if (v8 < 0x28)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[5 * v6];
      do
      {
        *v9 = -4096;
        v9 += 5;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x28 + 1;
    v9 = &v7[5 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[5] = -4096;
      v12 += 10;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = *(_DWORD *)(a1 + 16) - 1;
        v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
        v17 = (_QWORD *)(*(_QWORD *)a1 + 40 * v16);
        v18 = *v17;
        if (v14 != *v17)
        {
          v20 = 0;
          v21 = 1;
          while (v18 != -4096)
          {
            if (v20)
              v22 = 0;
            else
              v22 = v18 == -8192;
            if (v22)
              v20 = v17;
            v23 = v16 + v21++;
            v16 = v23 & v15;
            v17 = (_QWORD *)(*(_QWORD *)a1 + 40 * (v23 & v15));
            v18 = *v17;
            if (v14 == *v17)
              goto LABEL_14;
          }
          if (v20)
            v17 = v20;
        }
LABEL_14:
        *v17 = v14;
        v17[1] = v17 + 3;
        v17[2] = 0x200000000;
        if (*((_DWORD *)v4 + 4))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
        ++*(_DWORD *)(a1 + 8);
        v19 = (uint64_t *)v4[1];
        if (v19 != v4 + 3)
          free(v19);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::MLIRContext::executeActionInternal<mlir::ApplyPatternAction,mlir::Pattern const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v6;
  _QWORD *v7;
  unint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  const char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if ((v6 & 1) == 0)
  {
    v23 = a3;
    v24 = a1;
    v21 = a6;
    v22 = a2;
    v19 = a4;
    v20 = a5;
    a4 = v19;
    a5 = v20;
    a6 = v21;
    a2 = v22;
    v11 = v10;
    a3 = v23;
    a1 = v24;
    if (v11)
    {
      v25 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ApplyPatternAction]";
      v26 = 74;
      v12 = llvm::StringRef::find((uint64_t *)&v25, "DesiredTypeName = ", 0x12uLL, 0);
      if (v26 >= v12)
        v13 = v12;
      else
        v13 = v26;
      v14 = &v25[v13];
      v15 = v26 - v13;
      if (v26 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v26 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::ApplyPatternAction,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      a4 = v19;
      a5 = v20;
      a6 = v21;
      a2 = v22;
      a3 = v23;
      a1 = v24;
    }
  }
  v8 = v7[435];
  v27 = a4;
  v28 = a5;
  v25 = (const char *)&unk_1E0E2BB78;
  v26 = v8;
  v29 = a6;
  return mlir::MLIRContext::executeActionInternal(a1, a2, a3, (uint64_t)&v25);
}

const char *mlir::tracing::ActionImpl<mlir::ApplyPatternAction>::getTag()
{
  return "apply-pattern";
}

llvm::raw_ostream *mlir::ApplyPatternAction::print(mlir::ApplyPatternAction *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v2;
  _BYTE *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  llvm::raw_ostream *result;
  uint64_t v9;
  const char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a2;
  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v4)
  {
    v6 = (void *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v6 <= 0xCuLL)
    {
LABEL_3:
      v2 = llvm::raw_ostream::write(v2, "apply-pattern", 0xDuLL);
      v7 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v7) > 9)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    *v4 = 96;
    v5 = *((_QWORD *)a2 + 3);
    v6 = (void *)(*((_QWORD *)a2 + 4) + 1);
    *((_QWORD *)a2 + 4) = v6;
    if ((unint64_t)(v5 - (_QWORD)v6) <= 0xC)
      goto LABEL_3;
  }
  qmemcpy(v6, "apply-pattern", 13);
  v12 = *((_QWORD *)v2 + 3);
  v7 = *((_QWORD *)v2 + 4) + 13;
  *((_QWORD *)v2 + 4) = v7;
  if ((unint64_t)(v12 - v7) > 9)
  {
LABEL_4:
    *(_WORD *)(v7 + 8) = 8250;
    *(_QWORD *)v7 = *(_QWORD *)" pattern: ";
    result = (llvm::raw_ostream *)(*((_QWORD *)v2 + 4) + 10);
    *((_QWORD *)v2 + 4) = result;
    v9 = *((_QWORD *)this + 4);
    v10 = *(const char **)(v9 + 56);
    v11 = *(_QWORD *)(v9 + 64);
    if (v11 <= *((_QWORD *)v2 + 3) - (_QWORD)result)
      goto LABEL_5;
    return llvm::raw_ostream::write(v2, v10, v11);
  }
LABEL_10:
  v2 = llvm::raw_ostream::write(v2, " pattern: ", 0xAuLL);
  result = (llvm::raw_ostream *)*((_QWORD *)v2 + 4);
  v13 = *((_QWORD *)this + 4);
  v10 = *(const char **)(v13 + 56);
  v11 = *(_QWORD *)(v13 + 64);
  if (v11 > *((_QWORD *)v2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(v2, v10, v11);
LABEL_5:
  if (v11)
  {
    result = (llvm::raw_ostream *)memcpy(result, v10, v11);
    *((_QWORD *)v2 + 4) += v11;
  }
  return result;
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &,llvm::function_ref<BOOL ()(mlir::Pattern const&)>,llvm::function_ref<void ()(mlir::Pattern const&)>,llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  mlir::GenericProgramPoint **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v2 = a1[5];
  v4 = *a1;
  v3 = (mlir::GenericProgramPoint **)a1[1];
  v5 = *((_QWORD *)*v3 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(*v3);
  *(_QWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 32) = v6;
  v7 = *(_QWORD *)a1[2];
  if (!v7)
  {
    v9 = *(_QWORD *)a1[6];
    if (v9)
      v10 = v9 - 8;
    else
      v10 = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 32))(v10, *(_QWORD *)a1[1], *a1);
    *(_BYTE *)a1[3] = result;
    if (!(_BYTE)result)
      goto LABEL_13;
LABEL_8:
    v11 = a1[7];
    if (*(_QWORD *)v11)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD))v11)(*(_QWORD *)(v11 + 8), *(_QWORD *)a1[6]);
      v12 = (_BYTE *)a1[3];
      if (!(_BYTE)result)
      {
        *v12 = 0;
        goto LABEL_13;
      }
      if (!*v12)
        goto LABEL_13;
    }
    *(_BYTE *)a1[8] = 1;
    return result;
  }
  result = mlir::detail::PDLByteCode::rewrite(*(_QWORD *)a1[4], *a1, v7, *(_QWORD *)(v2 + 56));
  *(_BYTE *)a1[3] = result;
  if ((_BYTE)result)
    goto LABEL_8;
LABEL_13:
  v13 = a1[9];
  if (*(_QWORD *)v13)
    return (*(uint64_t (**)(_QWORD, _QWORD))v13)(*(_QWORD *)(v13 + 8), *(_QWORD *)a1[6]);
  return result;
}

const char *mlir::scf::SCFDialect::initialize(mlir::scf::SCFDialect *this)
{
  char *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  const char *result;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  const char *v17;
  unint64_t v18;

  mlir::Dialect::addOperations<mlir::scf::ConditionOp,mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::ForallOp,mlir::scf::IfOp,mlir::scf::InParallelOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::ReduceOp,mlir::scf::ReduceReturnOp,mlir::scf::WhileOp,mlir::scf::YieldOp>((uint64_t)this);
  v2 = (char *)operator new(0x18uLL);
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v16 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v8 = v7;
    v2 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
      v18 = 79;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v16;
    }
  }
  v5 = v4[157];
  *((_QWORD *)v2 + 1) = this;
  *((_QWORD *)v2 + 2) = v5;
  *(_QWORD *)v2 = off_1E0E18110;
  v17 = v2;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

mlir::scf::SCFDialect *mlir::scf::SCFDialect::SCFDialect(mlir::scf::SCFDialect *this, mlir::MLIRContext *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v6;

  v3 = (_QWORD *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"scf", 3, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::SCFDialect,void>::id);
  *v3 = off_1E0E4BE30;
  v4 = (uint64_t *)v3[4];
  if (!mlir::MLIRContext::isDialectLoading(v4, (uint64_t)"arith", 5))
  {
    v6 = v4;
    mlir::MLIRContext::getOrLoadDialect(v4, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v6);
  }
  mlir::scf::SCFDialect::initialize(this);
  return this;
}

void mlir::scf::SCFDialect::~SCFDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_180648104(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::scf::ConditionOp,mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::ForallOp,mlir::scf::IfOp,mlir::scf::InParallelOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::ReduceOp,mlir::scf::ReduceReturnOp,mlir::scf::WhileOp,mlir::scf::YieldOp>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v2 = operator new(0x70uLL);
  v14 = mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, 0, 0);
  v3 = (uint64_t)v14;
  v14 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  mlir::RegisteredOperationName::insert<mlir::scf::ExecuteRegionOp>(a1);
  v4 = operator new(0x70uLL);
  v14 = mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, 0, 0);
  v5 = (uint64_t)v14;
  v14 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new(0x70uLL);
  v14 = mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, (uint64_t)&mlir::scf::ForallOp::getAttributeNames(void)::attrNames, 5);
  v7 = (uint64_t)v14;
  v14 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  mlir::RegisteredOperationName::insert<mlir::scf::IfOp>(a1);
  v8 = operator new(0x70uLL);
  v14 = mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, 0, 0);
  v9 = (uint64_t)v14;
  v14 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  mlir::RegisteredOperationName::insert<mlir::scf::IndexSwitchOp>(a1);
  v10 = operator new(0x70uLL);
  v14 = mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, (uint64_t)&mlir::scf::ParallelOp::getAttributeNames(void)::attrNames, 1);
  v11 = (uint64_t)v14;
  v14 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  mlir::RegisteredOperationName::insert<mlir::scf::ReduceOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::scf::ReduceReturnOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::scf::WhileOp>(a1);
  v12 = operator new(0x70uLL);
  v14 = mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, 0, 0);
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL mlir::scf::ExecuteRegionOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  uint64_t v4;

  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 536))(a1, (uint64_t)a2 + 64)
    && (v4 = mlir::OperationState::addRegion(a2),
        (*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0)))
  {
    return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::scf::ExecuteRegionOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  mlir::Operation *v9;
  mlir::ArrayAttr *v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v14[4];
  uint64_t v15[2];

  v4 = *((unsigned int *)*this + 9);
  v5 = (uint64_t)*this - 16;
  if (!(_DWORD)v4)
    v5 = 0;
  v15[0] = v5;
  v15[1] = v4;
  mlir::OperandRange::getTypes(v15, v14);
  if (v14[0] != v14[2] || v14[1] != v14[3])
    mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>((uint64_t)a2, v14);
  v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v8 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 32);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v8 + 1;
    *v8 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), 0, 1, 0);
  v9 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v14[0] = mlir::Operation::getAttrDictionary(v9);
    v10 = (mlir::ArrayAttr *)v14;
  }
  else
  {
    v10 = (mlir::Operation *)((char *)v9 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v10);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v12, 0, 0);
}

uint64_t mlir::scf::ExecuteRegionOp::verify(uint64_t **this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  const void **v20[4];
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
                  + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                  + 7) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *((unsigned int *)*this + 10));
  if ((_QWORD *)*v1 == v1)
  {
    v20[0] = (const void **)"region needs to have at least one block";
    v21 = 259;
    mlir::OpState::emitOpError(this, v20, (uint64_t)v22);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v13 = (_QWORD **)__p;
      if (__p)
      {
        v14 = v28;
        v15 = __p;
        if (v28 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v28 = v13;
        operator delete(v15);
      }
      v8 = v25;
      if (!v25)
        goto LABEL_37;
      v16 = v26;
      v10 = v25;
      if (v26 == v25)
        goto LABEL_36;
      do
      {
        v18 = (void *)*--v16;
        v17 = v18;
        *v16 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v16 != v8);
      goto LABEL_35;
    }
  }
  else
  {
    v2 = v1[1];
    if (v2)
      v3 = v2 - 8;
    else
      v3 = 0;
    if (((*(_QWORD *)(v3 + 56) - *(_QWORD *)(v3 + 48)) & 0x7FFFFFFF8) == 0)
      return 1;
    v20[0] = (const void **)"region cannot have any arguments";
    v21 = 259;
    mlir::OpState::emitOpError(this, v20, (uint64_t)v22);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v5 = (_QWORD **)__p;
      if (__p)
      {
        v6 = v28;
        v7 = __p;
        if (v28 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v28 = v5;
        operator delete(v7);
      }
      v8 = v25;
      if (!v25)
        goto LABEL_37;
      v9 = v26;
      v10 = v25;
      if (v26 == v25)
      {
LABEL_36:
        v26 = v8;
        operator delete(v10);
LABEL_37:
        if (v23 != &v24)
          free(v23);
        return v4;
      }
      do
      {
        v12 = (void *)*--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          operator delete[](v11);
      }
      while (v9 != v8);
LABEL_35:
      v10 = v25;
      goto LABEL_36;
    }
  }
  return v4;
}

void mlir::scf::ConditionOp::getSuccessorRegions(mlir::Operation **a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  mlir::Block *v8;
  unsigned int *ParentOp;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42[40];
  _QWORD **v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46[3];

  v46[2] = *MEMORY[0x1E0C80C00];
  mlir::scf::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v42, *a1);
  v43 = a2;
  v44 = a3;
  v8 = (mlir::Block *)*((_QWORD *)*a1 + 2);
  if (v8)
  {
    ParentOp = (unsigned int *)mlir::Block::getParentOp(v8);
    v10 = *v43;
    if (*v43)
      goto LABEL_3;
LABEL_26:
    v41 = 0;
    v12 = ParentOp[11];
    if ((v12 & 0x7FFFFF) != 0)
    {
LABEL_9:
      v13 = (((unint64_t)&ParentOp[4 * ((v12 >> 23) & 1) + 17] + ((v12 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * ParentOp[10];
      v14 = v13 + 24;
      if (*(_QWORD *)(v13 + 24) != v13 + 24)
        goto LABEL_10;
      goto LABEL_28;
    }
LABEL_27:
    v13 = 0;
    v14 = 24;
    if (MEMORY[0x18] != 24)
    {
LABEL_10:
      v15 = *(_QWORD *)(v13 + 32);
      if (v15)
        v16 = v15 - 8;
      else
        v16 = 0;
      v17 = *(_QWORD *)(v16 + 48);
      v18 = (*(_QWORD *)(v16 + 56) - v17) >> 3;
      v19 = *(_DWORD *)(a4 + 8);
      if (v19 < *(_DWORD *)(a4 + 12))
        goto LABEL_14;
      goto LABEL_29;
    }
LABEL_28:
    v17 = 0;
    v18 = 0;
    v19 = *(_DWORD *)(a4 + 8);
    if (v19 < *(_DWORD *)(a4 + 12))
    {
LABEL_14:
      v20 = (uint64_t *)(*(_QWORD *)a4 + 24 * v19);
      *v20 = v14;
      mlir::ValueRange::ValueRange((unint64_t *)v20 + 1, v17, v18);
LABEL_15:
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_16;
    }
LABEL_29:
    v45 = v14;
    v25 = (char *)&v45;
    mlir::ValueRange::ValueRange(v46, v17, v18);
    v26 = *(unsigned int *)(a4 + 8);
    v27 = *(_QWORD *)a4;
    if (v26 >= *(_DWORD *)(a4 + 12))
    {
      v35 = v26 + 1;
      v36 = v27 + 24 * v26 > (unint64_t)&v45;
      if (v27 <= (unint64_t)&v45 && v36)
      {
        v39 = (char *)&v46[-1] - v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35, 24);
        v27 = *(_QWORD *)a4;
        v25 = &v39[*(_QWORD *)a4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35, 24);
        v27 = *(_QWORD *)a4;
        v25 = (char *)&v45;
      }
    }
    v28 = v27 + 24 * *(unsigned int *)(a4 + 8);
    v29 = *(_OWORD *)v25;
    *(_QWORD *)(v28 + 16) = *((_QWORD *)v25 + 2);
    *(_OWORD *)v28 = v29;
    goto LABEL_15;
  }
  ParentOp = 0;
  v10 = *a2;
  if (!v10)
    goto LABEL_26;
LABEL_3:
  if (mlir::BoolAttr::classof(v10))
    v11 = v10;
  else
    v11 = 0;
  v41 = v11;
  if (!v11 || mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41))
  {
    v12 = ParentOp[11];
    if ((v12 & 0x7FFFFF) != 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_16:
  if (!v41 || !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41))
  {
    v21 = ParentOp[9];
    if ((_DWORD)v21)
      v22 = (uint64_t)(ParentOp - 4);
    else
      v22 = 0;
    v23 = *(_DWORD *)(a4 + 8);
    if (v23 >= *(_DWORD *)(a4 + 12))
    {
      v45 = 0;
      v30 = (char *)&v45;
      mlir::ValueRange::ValueRange(v46, v22, v21);
      v31 = *(unsigned int *)(a4 + 8);
      v32 = *(_QWORD *)a4;
      if (v31 >= *(_DWORD *)(a4 + 12))
      {
        v37 = v31 + 1;
        v38 = v32 + 24 * v31 > (unint64_t)&v45;
        if (v32 <= (unint64_t)&v45 && v38)
        {
          v40 = (char *)&v46[-1] - v32;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v37, 24);
          v32 = *(_QWORD *)a4;
          v30 = &v40[*(_QWORD *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v37, 24);
          v32 = *(_QWORD *)a4;
          v30 = (char *)&v45;
        }
      }
      v33 = v32 + 24 * *(unsigned int *)(a4 + 8);
      v34 = *(_OWORD *)v30;
      *(_QWORD *)(v33 + 16) = *((_QWORD *)v30 + 2);
      *(_OWORD *)v33 = v34;
    }
    else
    {
      v24 = (_QWORD *)(*(_QWORD *)a4 + 24 * v23);
      *v24 = 0;
      mlir::ValueRange::ValueRange(v24 + 1, v22, v21);
    }
    ++*(_DWORD *)(a4 + 8);
  }
}

unint64_t mlir::scf::WhileOp::getAfter(mlir::scf::WhileOp *this)
{
  unint64_t v1;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v1 & 0x7FFFFF) != 0)
    return ((*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
         + 24;
  else
    return 24;
}

_QWORD *mlir::scf::ForOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t), uint64_t a10)
{
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t Loc;
  _QWORD *result;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  v38 = a3;
  v39 = a4;
  v40 = a5;
  mlir::ValueRange::ValueRange(v41, (uint64_t)&v38, 3uLL);
  mlir::OperationState::addOperands(a2, v41[0], v41[1]);
  mlir::OperationState::addOperands(a2, a6, a7);
  v38 = a6;
  v39 = 0;
  if (a7)
  {
    v15 = 0;
    do
    {
      v17 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v38, v15) + 8);
      v18 = *(unsigned int *)(a2 + 72);
      if (v18 >= *(unsigned int *)(a2 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18 + 1, 8);
        v18 = *(unsigned int *)(a2 + 72);
      }
      *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v18) = v17 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(a2 + 72);
      v15 = ++v39;
    }
    while (v38 != a6 || v15 != a7);
  }
  v19 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8;
  v20 = (uint64_t *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v21 = operator new(0x48uLL);
  *v21 = 0u;
  v21[1] = 0u;
  *((_QWORD *)v21 + 4) = v21 + 2;
  *((_QWORD *)v21 + 5) = v21 + 2;
  *((_QWORD *)v21 + 7) = 0;
  *((_QWORD *)v21 + 8) = 0;
  *((_QWORD *)v21 + 6) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v20, (uint64_t)v21);
  v22 = *v20;
  *((_QWORD *)v21 + 2) = v20;
  *((_QWORD *)v21 + 1) = v22;
  v21 = (_OWORD *)((char *)v21 + 8);
  *(_QWORD *)(v22 + 8) = v21;
  *v20 = (uint64_t)v21;
  v23 = v20[1];
  if (v23)
    v24 = (_QWORD *)(v23 - 8);
  else
    v24 = 0;
  mlir::Block::addArgument(v24, v19, *(_QWORD *)a2);
  v38 = a6;
  v39 = 0;
  if (!a7)
  {
    if (!a9)
      return (_QWORD *)mlir::impl::ensureRegionTerminator(v20, a1, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::buildTerminator);
    goto LABEL_22;
  }
  v25 = 0;
  do
  {
    v36 = mlir::ValueRange::dereference_iterator(&v38, v25);
    v26 = *(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8;
    Loc = mlir::Value::getLoc((mlir::Value *)&v36);
    result = mlir::Block::addArgument(v24, v26, Loc);
    v25 = ++v39;
  }
  while (v38 != a6 || v25 != a7);
  if (a9)
  {
LABEL_22:
    v30 = (_OWORD *)(a1 + 16);
    v35 = *(_OWORD *)(a1 + 16);
    v31 = v24[5];
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(a1 + 24) = v31;
    v32 = *(_QWORD *)a2;
    v33 = (uint64_t *)v24[6];
    v34 = *v33;
    mlir::ValueRange::ValueRange(v37, (uint64_t)(v33 + 1), ((uint64_t)(v24[7] - (_QWORD)v33) >> 3) - 1);
    result = (_QWORD *)a9(a10, a1, v32, v34, v37[0], v37[1]);
    if ((_QWORD)v35)
    {
      *v30 = v35;
    }
    else
    {
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  return result;
}

uint64_t mlir::scf::ForOp::verify(uint64_t **this)
{
  uint64_t DefiningOp;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  const void **v21[4];
  __int16 v22;
  unint64_t v23;
  void *v24[2];
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v21[0] = *(const void ***)((*this)[9] + 88);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v21);
  if (!DefiningOp)
    goto LABEL_13;
  v3 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    goto LABEL_13;
  v24[0] = &v25;
  v24[1] = (void *)0x100000000;
  mlir::Operation::fold(v3, 0, 0, (uint64_t)v24);
  v4 = (*(_QWORD *)v24[0] & 0xFFFFFFFFFFFFFFF8) == 0
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v24[0] & 0xFFFFFFFFFFFFFFF8) + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (!v4)
    v23 = *(_QWORD *)v24[0] & 0xFFFFFFFFFFFFFFF8;
  if (v24[0] != &v25)
    free(v24[0]);
  if (!v4 && mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v23) <= 0)
  {
    v21[0] = (const void **)"constant step operand must be positive";
    v22 = 259;
    mlir::OpState::emitOpError(this, v21, (uint64_t)v24);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    if (v32)
    {
      v14 = (_QWORD **)__p;
      if (__p)
      {
        v15 = v31;
        v16 = __p;
        if (v31 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v31 = v14;
        operator delete(v16);
      }
      v9 = v28;
      if (!v28)
        goto LABEL_45;
      v17 = v29;
      v11 = v28;
      if (v29 == v28)
        goto LABEL_44;
      do
      {
        v19 = (void *)*--v17;
        v18 = v19;
        *v17 = 0;
        if (v19)
          operator delete[](v18);
      }
      while (v17 != v9);
      goto LABEL_43;
    }
  }
  else
  {
LABEL_13:
    if ((*((_BYTE *)*this + 46) & 0x80) != 0 && *((unsigned int *)*this + 17) - 3 == *((_DWORD *)*this + 9))
      return 1;
    v21[0] = (const void **)"mismatch in number of loop-carried values and defined values";
    v22 = 259;
    mlir::OpState::emitOpError(this, v21, (uint64_t)v24);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    if (v32)
    {
      v6 = (_QWORD **)__p;
      if (__p)
      {
        v7 = v31;
        v8 = __p;
        if (v31 != __p)
        {
          do
            v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          v8 = __p;
        }
        v31 = v6;
        operator delete(v8);
      }
      v9 = v28;
      if (!v28)
        goto LABEL_45;
      v10 = v29;
      v11 = v28;
      if (v29 == v28)
      {
LABEL_44:
        v29 = v9;
        operator delete(v11);
LABEL_45:
        if (v26 != &v27)
          free(v26);
        return v5;
      }
      do
      {
        v13 = (void *)*--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          operator delete[](v12);
      }
      while (v10 != v9);
LABEL_43:
      v11 = v28;
      goto LABEL_44;
    }
  }
  return v5;
}

uint64_t mlir::scf::ForOp::verifyRegions(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t NextResultAtOffset;
  unint64_t v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  int *v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  int *v46;
  char *v47;
  char *v48;
  __int128 v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  int *v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  int *v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  int *v66;
  char *v67;
  char *v68;
  __int128 v69;
  _QWORD **v70;
  _QWORD **v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  unint64_t v81;
  BOOL v82;
  unint64_t v83;
  BOOL v84;
  unint64_t v85;
  BOOL v86;
  int64_t v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  const void **v93[4];
  __int16 v94;
  int v95;
  const char *v96;
  uint64_t v97;
  _QWORD v98[3];
  void *v99;
  unsigned int v100;
  unsigned int v101;
  _BYTE v102[96];
  void *v103;
  _QWORD *v104;
  void *__p;
  _QWORD **v106;
  char v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *(_QWORD *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v3)
    v4 = v3 - 8;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 48);
  v6 = v2[9];
  if ((*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v16 = *(_QWORD *)(v4 + 56) - v5;
    v17 = ((unint64_t)v16 >> 3) - 1;
    if ((_DWORD)v17 == *((_DWORD *)v2 + 9))
    {
      v18 = *((unsigned int *)v2 + 17);
      v19 = (uint64_t)(v2 - 2);
      if (((unint64_t)v16 >> 3) == 1)
        v20 = 0;
      else
        v20 = v19;
      v7 = 1;
      if ((_DWORD)v18 != 3 && v16 != 8)
      {
        v21 = 0;
        v22 = v5 + 8;
        v23 = 8 * (v16 >> 3) - 16;
        v24 = (uint64_t *)(v6 + 120);
        v25 = v18 - 4;
        while (1)
        {
          if (v17 == v21)
            return 1;
          v26 = *v24;
          NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
          v28 = *(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (v28 != (*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8))
            break;
          if ((*(_QWORD *)(*(_QWORD *)(v22 + 8 * v21) + 8) & 0xFFFFFFFFFFFFFFF8) != v28)
          {
            v94 = 257;
            mlir::OpState::emitOpError(this, v93, (uint64_t)v98);
            if (v98[0])
            {
              v95 = 3;
              v96 = "types mismatch between ";
              v97 = 23;
              v56 = &v95;
              v57 = (char *)v99;
              if (v100 >= v101)
              {
                v78 = v100 + 1;
                if (v99 <= &v95 && (char *)v99 + 24 * v100 > (char *)&v95)
                {
                  v88 = (char *)&v95 - (_BYTE *)v99;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v78, 24);
                  v57 = (char *)v99;
                  v56 = (int *)((char *)v99 + v88);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v78, 24);
                  v56 = &v95;
                  v57 = (char *)v99;
                }
              }
              v58 = &v57[24 * v100];
              v59 = *(_OWORD *)v56;
              *((_QWORD *)v58 + 2) = *((_QWORD *)v56 + 2);
              *(_OWORD *)v58 = v59;
              v60 = ++v100;
              if (v98[0])
              {
                v95 = 5;
                v96 = (const char *)v21;
                v61 = &v95;
                v62 = (char *)v99;
                if (v60 >= v101)
                {
                  v81 = v60 + 1;
                  v82 = (char *)v99 + 24 * v60 > (char *)&v95;
                  if (v99 <= &v95 && v82)
                  {
                    v90 = (char *)&v95 - (_BYTE *)v99;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v81, 24);
                    v62 = (char *)v99;
                    v61 = (int *)((char *)v99 + v90);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v81, 24);
                    v61 = &v95;
                    v62 = (char *)v99;
                  }
                }
                v63 = &v62[24 * v100];
                v64 = *(_OWORD *)v61;
                *((_QWORD *)v63 + 2) = *((_QWORD *)v61 + 2);
                *(_OWORD *)v63 = v64;
                v65 = ++v100;
                if (v98[0])
                {
                  v95 = 3;
                  v96 = "th iter region arg and defined value";
                  v97 = 36;
                  v66 = &v95;
                  v67 = (char *)v99;
                  if (v65 >= v101)
                  {
                    v85 = v65 + 1;
                    v86 = (char *)v99 + 24 * v65 > (char *)&v95;
                    if (v99 <= &v95 && v86)
                    {
                      v92 = (char *)&v95 - (_BYTE *)v99;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v85, 24);
                      v67 = (char *)v99;
                      v66 = (int *)((char *)v99 + v92);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v85, 24);
                      v66 = &v95;
                      v67 = (char *)v99;
                    }
                  }
                  v68 = &v67[24 * v100];
                  v69 = *(_OWORD *)v66;
                  *((_QWORD *)v68 + 2) = *((_QWORD *)v66 + 2);
                  *(_OWORD *)v68 = v69;
                  ++v100;
                }
              }
            }
            v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
            if (v98[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
            if (!v107)
              return v7;
            v70 = (_QWORD **)__p;
            if (__p)
            {
              v71 = v106;
              v72 = __p;
              if (v106 != __p)
              {
                do
                  v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
                while (v71 != v70);
                v72 = __p;
              }
              v106 = v70;
              operator delete(v72);
            }
            v11 = v103;
            if (!v103)
              goto LABEL_91;
            v73 = v104;
            v13 = v103;
            if (v104 == v103)
              goto LABEL_90;
            do
            {
              v75 = (void *)*--v73;
              v74 = v75;
              *v73 = 0;
              if (v75)
                operator delete[](v74);
            }
            while (v73 != v11);
            goto LABEL_89;
          }
          v7 = 1;
          if (v25 != v21)
          {
            ++v21;
            v29 = v23;
            v23 -= 8;
            v24 += 4;
            if (v29)
              continue;
          }
          return v7;
        }
        v94 = 257;
        mlir::OpState::emitOpError(this, v93, (uint64_t)v98);
        if (v98[0])
        {
          v95 = 3;
          v96 = "types mismatch between ";
          v97 = 23;
          v36 = &v95;
          v37 = (char *)v99;
          if (v100 >= v101)
          {
            v77 = v100 + 1;
            if (v99 <= &v95 && (char *)v99 + 24 * v100 > (char *)&v95)
            {
              v87 = (char *)&v95 - (_BYTE *)v99;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v77, 24);
              v37 = (char *)v99;
              v36 = (int *)((char *)v99 + v87);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v77, 24);
              v36 = &v95;
              v37 = (char *)v99;
            }
          }
          v38 = &v37[24 * v100];
          v39 = *(_OWORD *)v36;
          *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
          *(_OWORD *)v38 = v39;
          v40 = ++v100;
          if (v98[0])
          {
            v95 = 5;
            v96 = (const char *)v21;
            v41 = &v95;
            v42 = (char *)v99;
            if (v40 >= v101)
            {
              v79 = v40 + 1;
              v80 = (char *)v99 + 24 * v40 > (char *)&v95;
              if (v99 <= &v95 && v80)
              {
                v89 = (char *)&v95 - (_BYTE *)v99;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v79, 24);
                v42 = (char *)v99;
                v41 = (int *)((char *)v99 + v89);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v79, 24);
                v41 = &v95;
                v42 = (char *)v99;
              }
            }
            v43 = &v42[24 * v100];
            v44 = *(_OWORD *)v41;
            *((_QWORD *)v43 + 2) = *((_QWORD *)v41 + 2);
            *(_OWORD *)v43 = v44;
            v45 = ++v100;
            if (v98[0])
            {
              v95 = 3;
              v96 = "th iter operand and defined value";
              v97 = 33;
              v46 = &v95;
              v47 = (char *)v99;
              if (v45 >= v101)
              {
                v83 = v45 + 1;
                v84 = (char *)v99 + 24 * v45 > (char *)&v95;
                if (v99 <= &v95 && v84)
                {
                  v91 = (char *)&v95 - (_BYTE *)v99;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v83, 24);
                  v47 = (char *)v99;
                  v46 = (int *)((char *)v99 + v91);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v83, 24);
                  v46 = &v95;
                  v47 = (char *)v99;
                }
              }
              v48 = &v47[24 * v100];
              v49 = *(_OWORD *)v46;
              *((_QWORD *)v48 + 2) = *((_QWORD *)v46 + 2);
              *(_OWORD *)v48 = v49;
              ++v100;
            }
          }
        }
        v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
        if (v98[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
        if (!v107)
          return v7;
        v50 = (_QWORD **)__p;
        if (__p)
        {
          v51 = v106;
          v52 = __p;
          if (v106 != __p)
          {
            do
              v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
            while (v51 != v50);
            v52 = __p;
          }
          v106 = v50;
          operator delete(v52);
        }
        v11 = v103;
        if (!v103)
          goto LABEL_91;
        v53 = v104;
        v13 = v103;
        if (v104 == v103)
          goto LABEL_90;
        do
        {
          v55 = (void *)*--v53;
          v54 = v55;
          *v53 = 0;
          if (v55)
            operator delete[](v54);
        }
        while (v53 != v11);
        goto LABEL_89;
      }
    }
    else
    {
      v93[0] = (const void **)"mismatch in number of basic block args and defined values";
      v94 = 259;
      mlir::OpState::emitOpError(this, v93, (uint64_t)v98);
      v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
      if (v98[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
      if (v107)
      {
        v30 = (_QWORD **)__p;
        if (__p)
        {
          v31 = v106;
          v32 = __p;
          if (v106 != __p)
          {
            do
              v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            v32 = __p;
          }
          v106 = v30;
          operator delete(v32);
        }
        v11 = v103;
        if (!v103)
          goto LABEL_91;
        v33 = v104;
        v13 = v103;
        if (v104 == v103)
          goto LABEL_90;
        do
        {
          v35 = (void *)*--v33;
          v34 = v35;
          *v33 = 0;
          if (v35)
            operator delete[](v34);
        }
        while (v33 != v11);
        goto LABEL_89;
      }
    }
  }
  else
  {
    v93[0] = (const void **)"expected induction variable to be same type as bounds and step";
    v94 = 259;
    mlir::OpState::emitOpError(this, v93, (uint64_t)v98);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
    if (v98[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
    if (v107)
    {
      v8 = (_QWORD **)__p;
      if (__p)
      {
        v9 = v106;
        v10 = __p;
        if (v106 != __p)
        {
          do
            v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          v10 = __p;
        }
        v106 = v8;
        operator delete(v10);
      }
      v11 = v103;
      if (!v103)
        goto LABEL_91;
      v12 = v104;
      v13 = v103;
      if (v104 == v103)
      {
LABEL_90:
        v104 = v11;
        operator delete(v13);
LABEL_91:
        if (v99 != v102)
          free(v99);
        return v7;
      }
      do
      {
        v15 = (void *)*--v12;
        v14 = v15;
        *v12 = 0;
        if (v15)
          operator delete[](v14);
      }
      while (v12 != v11);
LABEL_89:
      v13 = v103;
      goto LABEL_90;
    }
  }
  return v7;
}

uint64_t mlir::scf::ForOp::promoteIfSingleIteration(mlir::scf::ForOp *this, mlir::RewriterBase *a2)
{
  uint64_t v4;
  char v5;
  BOOL v6;
  uint64_t v8;
  mlir::GenericProgramPoint **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t YieldedValues;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22[2];
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v4 = mlir::constantTripCount(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) | 4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56) | 4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 88) | 4);
  if (v5)
    v6 = v4 == 1;
  else
    v6 = 0;
  if (!v6)
    return 0;
  v8 = *(_QWORD *)(((*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                 + 8);
  if (v8)
    v9 = (mlir::GenericProgramPoint **)(v8 - 8);
  else
    v9 = 0;
  mlir::Block::getTerminator(v9);
  v11 = v10;
  v12 = *(unsigned int *)(*(_QWORD *)this + 36);
  if ((_DWORD)v12)
    v13 = *(_QWORD *)this - 16;
  else
    v13 = 0;
  mlir::ValueRange::ValueRange(v27, v13, v12);
  YieldedValues = mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues((uint64_t)this);
  mlir::RewriterBase::replaceAllUsesWith((uint64_t)a2, v27[0], v27[1], YieldedValues, v15);
  v23 = &v25;
  v16 = *(_QWORD *)this;
  v17 = *(_QWORD *)(*(_QWORD *)this + 72);
  v25 = *(_QWORD *)(v17 + 24);
  v24 = 0x600000001;
  llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)&v23, (uint64_t)&v26, v17 + 96, 0, v17 + 96, *(unsigned int *)(v16 + 68) - 3);
  v18 = *(_QWORD *)this;
  v19 = *(_QWORD *)(((*(_QWORD *)this
                    + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                  + 8);
  if (v19)
    v20 = v19 - 8;
  else
    v20 = 0;
  v21 = *(_QWORD *)(v18 + 16);
  mlir::ValueRange::ValueRange(v22, (uint64_t)v23, v24);
  (*(void (**)(mlir::RewriterBase *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 56))(a2, v20, v21, v18, v22[0], v22[1]);
  (*(void (**)(mlir::RewriterBase *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v11);
  (*(void (**)(mlir::RewriterBase *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)this);
  if (v23 != &v25)
    free(v23);
  return 1;
}

unint64_t mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues(uint64_t a1)
{
  uint64_t v1;
  mlir::GenericProgramPoint **v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int OperandNumber;
  uint64_t v10;
  unint64_t v12;
  unsigned int v13[4];
  void *v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(((*(_QWORD *)a1
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)a1 + 40)
                 + 8);
  if (v1)
    v2 = (mlir::GenericProgramPoint **)(v1 - 8);
  else
    v2 = 0;
  mlir::Block::getTerminator(v2);
  if ((*(_BYTE *)(v3 + 46) & 0x80) != 0)
    v4 = *(_DWORD *)(v3 + 68);
  else
    v4 = 0;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v13, v3, 0, v4, 0, 0);
  v5 = mlir::MutableOperandRange::operator mlir::OperandRange(v13);
  v7 = v6;
  if (v14 != v15)
    free(v14);
  if (v7)
  {
    v8 = *(_QWORD *)(v5 + 16);
    OperandNumber = mlir::OpOperand::getOperandNumber(v5);
    if ((*(_BYTE *)(v8 + 46) & 0x80) != 0)
      v10 = *(_QWORD *)(v8 + 72);
    else
      v10 = 0;
    mlir::ValueRange::ValueRange(&v12, v10 + 32 * OperandNumber, v7);
  }
  else
  {
    mlir::ValueRange::ValueRange(&v12, 0, 0);
  }
  return v12;
}

uint64_t mlir::scf::ForOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _DWORD *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  mlir::Operation *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  mlir::Operation *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  uint64_t v37;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  mlir::Operation *v40;
  unint64_t v41;
  unint64_t v42;
  _BOOL8 v43;
  mlir::Operation *v44;
  mlir::ArrayAttr *v45;
  uint64_t Value;
  uint64_t v47;
  uint64_t v49[2];
  uint64_t v50[4];
  _QWORD v51[2];
  unint64_t v52[3];

  v52[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  v6 = *(_QWORD *)((((unint64_t)*this
                   + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6)
    v7 = v6 - 8;
  else
    v7 = 0;
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, **(_QWORD **)(v7 + 48));
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 32;
    *(_WORD *)v9 = 15648;
    *((_QWORD *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_DWORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 3uLL)
  {
    *v11 = 544175136;
    *((_QWORD *)v10 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v10, " to ", 4uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 5)
  {
    *(_WORD *)(v13 + 4) = 8304;
    *(_DWORD *)v13 = 1702130464;
    *((_QWORD *)v12 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v12, " step ", 6uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 88));
  v14 = *this;
  v15 = *((unsigned int *)*this + 11);
  v16 = *(_QWORD *)((((unint64_t)*this + 16 * ((v15 >> 23) & 1) + ((v15 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10)
                  + 8);
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v17 + 48);
  v19 = ((*(_QWORD *)(v17 + 56) - v18) >> 3) - 1;
  v20 = (_QWORD *)(v18 + 8);
  if ((v15 & 0x800000) != 0)
  {
    v21 = *((unsigned int *)v14 + 17);
    v22 = *((_QWORD *)v14 + 9);
    v23 = v21 - 3;
  }
  else
  {
    v22 = 0;
    v23 = -3;
  }
  mlir::ValueRange::ValueRange(v52, v22 + 96, v23);
  printInitializationList(a2, v20, v19, v52[0], v52[1], " iter_args", 0xAuLL);
  if ((*((_BYTE *)*this + 46) & 0x80) == 0 || *((_DWORD *)*this + 17) != 3)
  {
    v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v25 = *((_QWORD *)v24 + 4);
    if ((unint64_t)(*((_QWORD *)v24 + 3) - v25) > 4)
    {
      *(_BYTE *)(v25 + 4) = 40;
      *(_DWORD *)v25 = 540945696;
      *((_QWORD *)v24 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v24, " -> (", 5uLL);
    }
    v26 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v27 = *((unsigned int *)v26 + 17);
      v28 = *((_QWORD *)v26 + 9);
      v29 = v27 - 3;
    }
    else
    {
      v28 = 0;
      v29 = -3;
    }
    v49[0] = v28 + 96;
    v49[1] = v29;
    mlir::OperandRange::getTypes(v49, v50);
    v51[0] = ", ";
    v51[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v50[0], v50[1], v50[2], v50[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)v51);
    v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v31 = (_BYTE *)*((_QWORD *)v30 + 4);
    if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
    {
      llvm::raw_ostream::write(v30, 41);
    }
    else
    {
      *((_QWORD *)v30 + 4) = v31 + 1;
      *v31 = 41;
    }
  }
  v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = (_BYTE *)*((_QWORD *)v32 + 4);
  if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
  {
    llvm::raw_ostream::write(v32, 32);
  }
  else
  {
    *((_QWORD *)v32 + 4) = v33 + 1;
    *v33 = 32;
  }
  v34 = *(_QWORD *)((((unint64_t)*this
                    + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10)
                  + 8);
  if (v34)
    v35 = v34 - 8;
  else
    v35 = 0;
  v50[0] = *(_QWORD *)(**(_QWORD **)(v35 + 48) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::Type::isIndex((mlir::Type *)v50))
  {
LABEL_43:
    v40 = *this;
    v41 = *((unsigned int *)*this + 11);
    if ((v41 & 0x7FFFFF) != 0)
      goto LABEL_44;
LABEL_51:
    v42 = 0;
    if ((v41 & 0x800000) != 0)
      goto LABEL_45;
    goto LABEL_52;
  }
  v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v37 = *((_QWORD *)v36 + 4);
  if ((unint64_t)(*((_QWORD *)v36 + 3) - v37) > 2)
  {
    *(_BYTE *)(v37 + 2) = 32;
    *(_WORD *)v37 = 14880;
    *((_QWORD *)v36 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v36, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 32))(a2, v50[0]);
  v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v39 = (_BYTE *)*((_QWORD *)v38 + 4);
  if ((unint64_t)v39 < *((_QWORD *)v38 + 3))
  {
    *((_QWORD *)v38 + 4) = v39 + 1;
    *v39 = 32;
    goto LABEL_43;
  }
  llvm::raw_ostream::write(v38, 32);
  v40 = *this;
  v41 = *((unsigned int *)*this + 11);
  if ((v41 & 0x7FFFFF) == 0)
    goto LABEL_51;
LABEL_44:
  v42 = (((unint64_t)v40 + 16 * ((v41 >> 23) & 1) + ((v41 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)v40 + 10);
  if ((v41 & 0x800000) != 0)
  {
LABEL_45:
    v43 = *((_DWORD *)v40 + 17) != 3;
    goto LABEL_46;
  }
LABEL_52:
  v43 = 1;
LABEL_46:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, _BOOL8, _QWORD))(*(_QWORD *)a2 + 224))(a2, v42, 0, v43, 0);
  v44 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v50[0] = mlir::Operation::getAttrDictionary(v44);
    v45 = (mlir::ArrayAttr *)v50;
  }
  else
  {
    v45 = (mlir::Operation *)((char *)v44 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v45);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v47, 0, 0);
}

llvm::raw_ostream *printInitializationList(llvm::raw_ostream *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7)
{
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  void *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::raw_ostream *v24;
  _WORD *v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v13 = result;
    v14 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 16))(result);
    v15 = (void *)*((_QWORD *)v14 + 4);
    if (a7 <= *((_QWORD *)v14 + 3) - (_QWORD)v15)
    {
      if (a7)
      {
        memcpy(v15, a6, a7);
        *((_QWORD *)v14 + 4) += a7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v14, (const char *)a6, a7);
    }
    v16 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v13 + 16))(v13);
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
    {
      llvm::raw_ostream::write(v16, 40);
      v30 = a2;
      v32 = a4;
      v33 = 0;
      if (!a3)
        goto LABEL_26;
    }
    else
    {
      *((_QWORD *)v16 + 4) = v17 + 1;
      *v17 = 40;
      v30 = a2;
      v32 = a4;
      v33 = 0;
      if (!a3)
      {
LABEL_26:
        result = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v13 + 16))(v13);
        v29 = (_BYTE *)*((_QWORD *)result + 4);
        if (*((_BYTE **)result + 3) == v29)
          return llvm::raw_ostream::write(result, ")", 1uLL);
        *v29 = 41;
        ++*((_QWORD *)result + 4);
        return result;
      }
    }
    v18 = &a2[a3];
    v19 = mlir::ValueRange::dereference_iterator(&v32, 0);
    (*(void (**)(llvm::raw_ostream *, _QWORD))(*(_QWORD *)v13 + 160))(v13, *a2);
    v20 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v13 + 16))(v13);
    v21 = *((_QWORD *)v20 + 4);
    if ((unint64_t)(*((_QWORD *)v20 + 3) - v21) > 2)
    {
      *(_BYTE *)(v21 + 2) = 32;
      *(_WORD *)v21 = 15648;
      *((_QWORD *)v20 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v20, " = ", 3uLL);
    }
    (*(void (**)(llvm::raw_ostream *, uint64_t))(*(_QWORD *)v13 + 160))(v13, v19);
    v22 = v33 + 1;
    v31 = v30 + 1;
    ++v33;
    for (; v31 != v18; ++v33)
    {
      if (v32 == a4 && v22 == a5)
        break;
      v24 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v13 + 16))(v13);
      v25 = (_WORD *)*((_QWORD *)v24 + 4);
      if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 1uLL)
      {
        *v25 = 8236;
        *((_QWORD *)v24 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v24, ", ", 2uLL);
      }
      v26 = mlir::ValueRange::dereference_iterator(&v32, v33);
      (*(void (**)(llvm::raw_ostream *, _QWORD))(*(_QWORD *)v13 + 160))(v13, *v31);
      v27 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v13 + 16))(v13);
      v28 = *((_QWORD *)v27 + 4);
      if ((unint64_t)(*((_QWORD *)v27 + 3) - v28) > 2)
      {
        *(_BYTE *)(v28 + 2) = 32;
        *(_WORD *)v28 = 15648;
        *((_QWORD *)v27 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v27, " = ", 3uLL);
      }
      (*(void (**)(llvm::raw_ostream *, uint64_t))(*(_QWORD *)v13 + 160))(v13, v26);
      v22 = v33 + 1;
      ++v31;
    }
    goto LABEL_26;
  }
  return result;
}

uint64_t mlir::scf::ForOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  __n128 v5;
  char v6;
  mlir::MLIRContext *v7;
  uint64_t IndexType;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  const char *v22;
  __int16 v23;
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[6];
  char v28;
  char v29;
  uint64_t v30;
  void *v31[24];
  void *v32;
  uint64_t v33;
  _BYTE v34[128];
  void *v35;
  uint64_t v36;
  _BYTE v37[16];
  __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v30 = 0;
  memset(v27, 0, 24);
  v29 = 0;
  v27[4] = 0;
  v27[5] = 0;
  v28 = 0;
  memset(v26, 0, 24);
  memset(v25, 0, 24);
  memset(v24, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v27, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v26, 1))
    return 0;
  v38 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "to", 2, &v35))return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v25, 1))
    return 0;
  v38 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "step", 4, &v35)|| !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v24, 1))
  {
    return 0;
  }
  v35 = v37;
  v36 = 0x400000000;
  v32 = v34;
  v33 = 0x400000000;
  v5 = llvm::SmallVectorTemplateBase<mlir::OpAsmParser::Argument,true>::push_back((uint64_t)&v35, (unint64_t)v27);
  v6 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, __n128))(*(_QWORD *)a1 + 376))(a1, "iter_args", 9, v5);
  if (v6
    && (!mlir::OpAsmParser::parseAssignmentList(a1)
     || !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 528))(a1, a2 + 64)))
  {
    goto LABEL_34;
  }
  if (*(unsigned int *)(a2 + 72) + 1 == v36)
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v30))
        goto LABEL_34;
      IndexType = v30;
    }
    else
    {
      IndexType = mlir::Builder::getIndexType(v4, v7);
      v30 = IndexType;
    }
    *((_QWORD *)v35 + 4) = IndexType;
    if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v26)
      && (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v25, v30, a2 + 16)&& (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v24, v30, a2 + 16))
    {
      if (v6)
      {
        if ((_DWORD)v36 != 1)
        {
          if ((_DWORD)v33)
          {
            v12 = *(unsigned int *)(a2 + 72);
            if ((_DWORD)v12)
            {
              v13 = 0;
              v14 = (char *)v32;
              v15 = *(_QWORD **)(a2 + 64);
              v20 = ((unint64_t)v36 << 6) - 128;
              v21 = (char *)v35 + 96;
              v19 = (v12 << 6) - 64;
              v16 = ((unint64_t)v33 << 6) - 64;
              while (1)
              {
                *(_QWORD *)&v21[v13] = *v15;
                if (!(*(unsigned __int8 (**)(uint64_t, char *))(*(_QWORD *)a1 + 696))(a1, v14))
                  goto LABEL_34;
                if (v20 != v13 && v16 != v13)
                {
                  v14 += 32;
                  ++v15;
                  v17 = v19 == v13;
                  v13 += 64;
                  if (!v17)
                    continue;
                }
                break;
              }
            }
          }
        }
      }
      v18 = (_QWORD *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
      if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, void *, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v18, v35, v36, 0))
      {
        mlir::impl::ensureRegionTerminator(v18, v4, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::buildTerminator);
        v9 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112) != 0;
        goto LABEL_35;
      }
    }
LABEL_34:
    v9 = 0;
    goto LABEL_35;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v22 = "mismatch in number of loop-carried values and defined values";
  v23 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v31, a1, v11, &v22);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v31);
LABEL_35:
  if (v32 != v34)
    free(v32);
  if (v35 != v37)
    free(v35);
  return v9;
}

__n128 llvm::SmallVectorTemplateBase<mlir::OpAsmParser::Argument,true>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v4 + 1;
    v11 = v5 + (v4 << 6);
    if (v5 <= a2 && v11 > a2)
    {
      v13 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 64);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v13;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 64);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  result = *(__n128 *)v2;
  v8 = *(_OWORD *)(v2 + 16);
  v9 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v6 + 48) = v9;
  *(__n128 *)v6 = result;
  *(_OWORD *)(v6 + 16) = v8;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t mlir::OpAsmParser::parseAssignmentList(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v13;
  __int16 v14;
  _QWORD v15[3];
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *__p;
  _QWORD **v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 792))(a1);
  if ((unsigned __int16)v2 <= 0xFFu)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v13 = "expected '('";
    v14 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v15, a1, v3, &v13);
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v15[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
    if (v22)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v21;
        v6 = __p;
        if (v21 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v21 = v4;
        operator delete(v6);
      }
      v7 = v18;
      if (v18)
      {
        v8 = v19;
        v9 = v18;
        if (v19 != v18)
        {
          do
          {
            v11 = (void *)*--v8;
            v10 = v11;
            *v8 = 0;
            if (v11)
              operator delete[](v10);
          }
          while (v8 != v7);
          v9 = v18;
        }
        v19 = v7;
        operator delete(v9);
      }
      if (v16 != &v17)
        free(v16);
    }
  }
  return v2;
}

uint64_t mlir::scf::ForOp::getInitsMutable(mlir::scf::ForOp *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int v5[4];
  void *v6;
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v2 = *(_DWORD *)(v1 + 68) - 3;
  else
    v2 = -3;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v5, v1, 3, v2, 0, 0);
  v3 = mlir::MutableOperandRange::operator mlir::OperandRange(v5);
  if (v6 != v7)
    free(v6);
  return v3;
}

void mlir::scf::ForOp::replaceWithAdditionalYields(mlir::GenericProgramPoint **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  uint64_t v23;
  unint64_t v24;
  const double *v25;
  unsigned __int128 *v26;
  unint64_t v27;
  const double *v28;
  unsigned __int128 v29;
  unsigned __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *Context;
  uint64_t v44;
  char v45;
  uint64_t v46;
  mlir::GenericProgramPoint *v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  mlir::GenericProgramPoint **v54;
  mlir::GenericProgramPoint *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t **v76;
  uint64_t *v77;
  uint64_t **v78;
  mlir::GenericProgramPoint *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t InterfaceFor;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98[2];
  unint64_t v99[2];
  void *v100;
  uint64_t v101;
  _BYTE v102[48];
  void *v103;
  uint64_t v104;
  uint64_t **v105;
  uint64_t v106[4];
  __int16 v107;
  uint64_t *v108;
  uint64_t v109;
  __int16 *v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v11 = (_QWORD *)(a2 + 24);
  v95 = *(_OWORD *)(a2 + 24);
  v12 = *a1;
  v13 = *((_QWORD *)v12 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  *v11 = v13;
  v11[1] = v14;
  v96 = v11;
  v15 = *a1;
  if ((*((_BYTE *)*a1 + 46) & 0x80) == 0)
  {
    v100 = v102;
    v101 = 0x600000000;
    v17 = -3;
    v18 = 96;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v17, 8);
    v19 = v101;
    v20 = v100;
    v21 = (char *)v100 + 8 * v101;
    if (v17 < 0xD)
      goto LABEL_17;
LABEL_7:
    if ((unint64_t)v21 >= v18 + 32 * v17 || v18 + 24 >= (unint64_t)&v20[8 * v17 + 8 * v19])
    {
      v23 = v17 & 3;
      if ((v17 & 3) == 0)
        v23 = 4;
      v24 = v17 - v23;
      v21 += 8 * v24;
      v25 = (const double *)(v18 + 88);
      v26 = (unsigned __int128 *)&v20[8 * v19 + 16];
      v27 = v24;
      do
      {
        v28 = v25 - 8;
        v29 = (unsigned __int128)vld4q_f64(v28);
        v30 = (unsigned __int128)vld4q_f64(v25);
        *(v26 - 1) = v29;
        *v26 = v30;
        v25 += 16;
        v26 += 2;
        v27 -= 4;
      }
      while (v27);
LABEL_18:
      v31 = (uint64_t *)(v18 + 32 * v24 + 24);
      do
      {
        v32 = *v31;
        v31 += 4;
        *(_QWORD *)v21 = v32;
        v21 += 8;
        ++v24;
      }
      while (v17 != v24);
      LODWORD(v101) = v101 + v17;
      v33 = v101;
      v34 = a4 + v101;
      if (v34 > HIDWORD(v101))
        goto LABEL_21;
      goto LABEL_22;
    }
LABEL_17:
    v24 = 0;
    goto LABEL_18;
  }
  v16 = *((unsigned int *)v15 + 17);
  v17 = v16 - 3;
  v18 = *((_QWORD *)v15 + 9) + 96;
  v100 = v102;
  v101 = 0x600000000;
  if ((unint64_t)(v16 - 3) >= 7)
    goto LABEL_3;
  v19 = 0;
  if (v16 != 3)
  {
    v20 = v102;
    v21 = v102;
    if (v17 < 0xD)
      goto LABEL_17;
    goto LABEL_7;
  }
  v33 = 0;
  LODWORD(v101) = 0;
  v34 = a4;
  if (a4 > 6)
  {
LABEL_21:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v34, 8);
    v33 = v101;
  }
LABEL_22:
  v103 = a3;
  v104 = 0;
  if (a4)
  {
    v35 = 0;
    v36 = (uint64_t *)((char *)v100 + 8 * v33);
    do
    {
      *v36++ = mlir::ValueRange::dereference_iterator(&v103, v35);
      v35 = ++v104;
    }
    while (v103 != a3 || v35 != a4);
    LODWORD(v33) = v101;
  }
  LODWORD(v101) = v33 + a4;
  v38 = *((_QWORD *)*a1 + 3);
  v39 = (_QWORD *)*((_QWORD *)*a1 + 9);
  v40 = v39[3];
  v41 = v39[7];
  v42 = v39[11];
  v97 = v38;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v97);
  v44 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.for", (const unsigned __int8 *)7, Context);
  if (!v45)
  {
    v112 = 1283;
    v110 = (__int16 *)"scf.for";
    v111 = 7;
                       "been added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-"
                       "dependent-whats-up-with-dialects-management";
    v107 = 259;
    llvm::operator+((uint64_t *)&v108, v106, (uint64_t)&v103);
    llvm::report_fatal_error((llvm::Twine *)&v103, 1);
  }
  mlir::OperationState::OperationState(&v103, v38, v44);
  mlir::ValueRange::ValueRange((unint64_t *)&v108, (uint64_t)v100, v101);
  mlir::scf::ForOp::build((uint64_t)(v96 - 2), (uint64_t)&v103, v40, v41, v42, (uint64_t)v108, v109, v46, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))llvm::function_ref<void ()(mlir::OpBuilder &,mlir::Location,mlir::Value,mlir::ValueRange)>::callback_fn<mlir::scf::ForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_0>, (uint64_t)v106);
  v47 = mlir::OpBuilder::create((mlir::OpBuilder *)(v96 - 2), (const mlir::OperationState *)&v103);
  v48 = *(void **)(*((_QWORD *)v47 + 6) + 16);
  mlir::OperationState::~OperationState((mlir::OperationState *)&v103);
  v50 = *((unsigned int *)*a1 + 10);
  v49 = *((unsigned int *)*a1 + 11);
  v51 = (uint64_t)*a1 + 16 * ((v49 >> 23) & 1);
  if (v48 == &mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id)
    v52 = (uint64_t)v47;
  else
    v52 = 0;
  v97 = v52;
  v53 = *(_QWORD *)(((v51 + ((v49 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v50 + 8);
  if (v53)
    v54 = (mlir::GenericProgramPoint **)(v53 - 8);
  else
    v54 = 0;
  mlir::Block::getTerminator(v54);
  v56 = (uint64_t)v55;
  v57 = *(_QWORD *)(((v52
                    + 64
                    + 16 * (((unint64_t)*(unsigned int *)(v52 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(v52 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v52 + 40)
                  + 8);
  if (v57)
    v58 = v57 - 8;
  else
    v58 = 0;
  v59 = *(_QWORD *)(v58 + 48);
  v60 = (*(_QWORD *)(v58 + 56) - v59) >> 3;
  if (v60 <= a4)
    v61 = v59;
  else
    v61 = v59 + 8 * (v60 - a4);
  if (v60 >= a4)
    v62 = a4;
  else
    v62 = v60;
  v91 = *(_OWORD *)(a2 + 24);
  v63 = *((_QWORD *)v55 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v55);
  *(_QWORD *)(a2 + 24) = v63;
  *(_QWORD *)(a2 + 32) = v64;
  v106[0] = *((_QWORD *)*a1 + 3);
  v108 = (uint64_t *)v61;
  v109 = v62;
  v65 = *(_QWORD *)(a6 + 24);
  if (v65)
  {
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD *, uint64_t *, uint64_t **))(*(_QWORD *)v65 + 48))(&v103, v65, v96 - 2, v106, &v108);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v56);
    if ((*(_BYTE *)(v56 + 46) & 0x80) != 0)
      v66 = *(_DWORD *)(v56 + 68);
    else
      v66 = 0;
    mlir::MutableOperandRange::MutableOperandRange((uint64_t)&v108, v56, 0, v66, 0, 0);
    mlir::ValueRange::ValueRange((unint64_t *)v106, (uint64_t)v103, v104);
    mlir::MutableOperandRange::append((uint64_t)&v108, v106[0], v106[1]);
    if (v110 != &v112)
      free(v110);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v56);
    if (v103 != &v105)
      free(v103);
    if ((_QWORD)v91)
    {
      *(_OWORD *)v96 = v91;
    }
    else
    {
      *v96 = 0;
      v96[1] = 0;
    }
    v67 = *(_QWORD *)((((unint64_t)*a1
                      + 16 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1)
                      + (((unint64_t)*((unsigned int *)*a1 + 11) >> 21) & 0x7F8)
                      + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *((unsigned int *)*a1 + 10)
                    + 8);
    if (v67)
      v68 = v67 - 8;
    else
      v68 = 0;
    v69 = *(_QWORD *)(((v52
                      + 64
                      + 16 * (((unint64_t)*(unsigned int *)(v52 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(v52 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(v52 + 40)
                    + 8);
    if (v69)
      v70 = v69 - 8;
    else
      v70 = 0;
    v71 = *(_QWORD *)(v70 + 48);
    v72 = *(_QWORD *)(v68 + 48);
    if ((*(_QWORD *)(v70 + 56) - v71) >> 3 >= (unint64_t)((unint64_t)(*(_QWORD *)(v68 + 56)
                                                                                                 - v72) >> 3))
      v73 = ((unint64_t)(*(_QWORD *)(v68 + 56) - v72) >> 3);
    else
      v73 = (*(_QWORD *)(v70 + 56) - v71) >> 3;
    mlir::ValueRange::ValueRange(v99, v71, v73);
    mlir::RewriterBase::mergeBlocks(a2, v68, v70, v99[0], v99[1]);
    if (a5)
    {
      v103 = a3;
      v104 = 0;
      v105 = (uint64_t **)v61;
      v74 = (uint64_t)v47;
      if (a4 && v62)
      {
        v75 = 0;
        do
        {
          v76 = (uint64_t **)mlir::ValueRange::dereference_iterator(&v103, v75);
          v77 = *v105;
          v108 = &v97;
          mlir::RewriterBase::replaceUsesWithIf(a2, v76, v77, (uint64_t (*)(uint64_t, uint64_t *))llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::scf::ForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_2>, (uint64_t)&v108);
          v75 = v104 + 1;
          v78 = v105 + 1;
          v104 = v75;
          ++v105;
        }
        while ((v75 != a4 || v103 != a3) && v78 != (uint64_t **)(v61 + 8 * v62));
        v74 = v97;
      }
    }
    else
    {
      v74 = (uint64_t)v47;
    }
    v81 = *a1;
    v82 = *(_DWORD *)(v74 + 36);
    v83 = v74 - 16;
    if (v82)
      v84 = v83;
    else
      v84 = 0;
    v85 = *((_DWORD *)v81 + 9);
    if (v82 >= v85)
      v86 = v85;
    else
      v86 = v82;
    mlir::ValueRange::ValueRange(v98, v84, v86);
    (*(void (**)(uint64_t, mlir::GenericProgramPoint *, unint64_t, unint64_t))(*(_QWORD *)a2 + 24))(a2, v81, v98[0], v98[1]);
    v87 = v97;
    if (v97)
      InterfaceFor = mlir::OpInterface<mlir::LoopLikeOpInterface,mlir::detail::LoopLikeOpInterfaceInterfaceTraits>::getInterfaceFor(v97);
    else
      InterfaceFor = 0;
    v89 = v95;
    *(_QWORD *)a7 = v87;
    *(_QWORD *)(a7 + 8) = InterfaceFor;
    *(_BYTE *)(a7 + 16) = 1;
    if (v100 != v102)
    {
      free(v100);
      v89 = v95;
    }
    if ((_QWORD)v89)
    {
      *(_OWORD *)v96 = v89;
    }
    else
    {
      *v96 = 0;
      v96[1] = 0;
    }
  }
  else
  {
    v90 = std::__throw_bad_function_call[abi:nn180100]();
    mlir::scf::ForOp::getSuccessorRegions(v90);
  }
}

__n128 mlir::scf::ForOp::getSuccessorRegions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 *v25;
  __n128 result;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  BOOL v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 44);
  if ((v6 & 0x7FFFFF) != 0)
  {
    v7 = (v6 >> 23) & 1;
    v8 = (v6 >> 21) & 0x7F8;
    v9 = *(unsigned int *)(v5 + 40);
    v10 = ((v5 + 16 * v7 + v8 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v9;
  }
  else
  {
    v10 = 0;
    v9 = *(unsigned int *)(v5 + 40);
    v7 = (v6 >> 23) & 1;
    v8 = (v6 >> 21) & 0x7F8;
  }
  v11 = *(_QWORD *)(((v5 + 16 * v7 + v8 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v9 + 8);
  if (v11)
    v12 = v11 - 8;
  else
    v12 = 0;
  v13 = *(_QWORD *)(v12 + 48);
  v14 = ((*(_QWORD *)(v12 + 56) - v13) >> 3) - 1;
  v33 = v10;
  v15 = (__n128 *)&v33;
  mlir::ValueRange::ValueRange(v34, v13 + 8, v14);
  v16 = *(unsigned int *)(a3 + 8);
  v17 = *(_QWORD *)a3;
  if (v16 < *(_DWORD *)(a3 + 12))
    goto LABEL_8;
  v27 = v16 + 1;
  v28 = v17 + 24 * v16 > (unint64_t)&v33;
  if (v17 > (unint64_t)&v33 || !v28)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v27, 24);
    v17 = *(_QWORD *)a3;
LABEL_8:
    v18 = (char *)&v33;
    goto LABEL_9;
  }
  v31 = (char *)&v34[-1] - v17;
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v27, 24);
  v17 = *(_QWORD *)a3;
  v18 = &v31[*(_QWORD *)a3];
LABEL_9:
  v19 = v17 + 24 * *(unsigned int *)(a3 + 8);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = *((_QWORD *)v18 + 2);
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(a3 + 8);
  v21 = *(unsigned int *)(*a1 + 36);
  if ((_DWORD)v21)
    v22 = *a1 - 16;
  else
    v22 = 0;
  v33 = 0;
  mlir::ValueRange::ValueRange(v34, v22, v21);
  v23 = *(unsigned int *)(a3 + 8);
  v24 = *(_QWORD *)a3;
  if (v23 >= *(_DWORD *)(a3 + 12))
  {
    v29 = v23 + 1;
    v30 = v24 + 24 * v23 > (unint64_t)&v33;
    if (v24 <= (unint64_t)&v33 && v30)
    {
      v32 = (char *)&v34[-1] - v24;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v29, 24);
      v24 = *(_QWORD *)a3;
      v15 = (__n128 *)&v32[*(_QWORD *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v29, 24);
      v24 = *(_QWORD *)a3;
      v15 = (__n128 *)&v33;
    }
  }
  v25 = (__n128 *)(v24 + 24 * *(unsigned int *)(a3 + 8));
  result = *v15;
  v25[1].n128_u64[0] = v15[1].n128_u64[0];
  *v25 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t mlir::scf::ForallOp::promoteIfSingleIteration(mlir::scf::ForallOp *this, mlir::RewriterBase *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  mlir::RewriterBase *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  _BYTE v26[48];
  void *v27;
  uint64_t v28;
  _BYTE v29[48];
  void *__src;
  uint64_t v31;
  _BYTE v32[48];
  void *__dst;
  uint64_t v34;
  _BYTE v35[48];
  void *v36;
  uint64_t v37;
  _BYTE v38[48];
  void *v39;
  uint64_t v40;
  _QWORD v41[8];

  v41[6] = *MEMORY[0x1E0C80C00];
  mlir::scf::ForallOp::getMixedLowerBound(this, (uint64_t)&__src);
  mlir::scf::ForallOp::getMixedUpperBound(this, (uint64_t)&v27);
  mlir::scf::ForallOp::getMixedStep(this, (uint64_t)&v24);
  __dst = v35;
  v34 = 0x600000000;
  v4 = v31;
  if ((_DWORD)v31)
  {
    if (__src == v32)
    {
      v5 = v31;
      if (v31 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v35, v31, 8), (v5 = v31) != 0))
      {
        memcpy(__dst, __src, 8 * v5);
      }
      LODWORD(v34) = v4;
    }
    else
    {
      __dst = __src;
      v34 = v31;
      __src = v32;
      HIDWORD(v31) = 0;
    }
    LODWORD(v31) = 0;
  }
  v36 = v38;
  v37 = 0x600000000;
  v6 = v28;
  if ((_DWORD)v28)
  {
    if (v27 != v29)
    {
      v36 = v27;
      v37 = v28;
      v27 = v29;
      HIDWORD(v28) = 0;
LABEL_18:
      LODWORD(v28) = 0;
      goto LABEL_19;
    }
    if (v28 < 7)
    {
      v7 = v28;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v28, 8);
      v7 = v28;
      if (!(_DWORD)v28)
        goto LABEL_17;
    }
    memcpy(v36, v27, 8 * v7);
LABEL_17:
    LODWORD(v37) = v6;
    goto LABEL_18;
  }
LABEL_19:
  v39 = v41;
  v40 = 0x600000000;
  v8 = v25;
  v9 = v24;
  if (!(_DWORD)v25)
    goto LABEL_29;
  if (v24 == v26)
  {
    if (v25 < 7)
    {
      v10 = v25;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v25, 8);
      v10 = v25;
      v9 = v24;
      if (!(_DWORD)v25)
        goto LABEL_27;
    }
    memcpy(v39, v9, 8 * v10);
    v9 = v24;
LABEL_27:
    LODWORD(v40) = v8;
    goto LABEL_28;
  }
  v39 = v24;
  v40 = v25;
  v24 = v26;
  HIDWORD(v25) = 0;
  v9 = v26;
LABEL_28:
  LODWORD(v25) = 0;
LABEL_29:
  if (v9 != v26)
    free(v9);
  if (v27 != v29)
    free(v27);
  if (__src != v32)
    free(__src);
  v11 = 0;
  v12 = (uint64_t *)v39;
  if ((_DWORD)v34 && (_DWORD)v37 && (_DWORD)v40)
  {
    v13 = a2;
    v14 = (uint64_t *)__dst;
    v15 = (uint64_t *)v36;
    v16 = 8 * v40 - 8;
    v17 = 8 * v37 - 8;
    v18 = 8 * v34 - 8;
    do
    {
      v19 = mlir::constantTripCount(*v14, *v15, *v12);
      if (v20)
        v21 = v19 == 1;
      else
        v21 = 0;
      v11 = !v21;
      if (!v21)
        break;
      if (!v18)
        break;
      if (!v17)
        break;
      ++v14;
      ++v15;
      ++v12;
      v22 = v16;
      v16 -= 8;
      v17 -= 8;
      v18 -= 8;
    }
    while (v22);
    v12 = (uint64_t *)v39;
    a2 = v13;
  }
  if (v12 != v41)
    free(v12);
  if (v36 != v38)
    free(v36);
  if (__dst != v35)
    free(__dst);
  if ((v11 & 1) != 0)
    return 0;
  mlir::scf::promote((uint64_t)a2, *(_QWORD *)this);
  return 1;
}

void mlir::scf::ForallOp::getMixedLowerBound(mlir::scf::ForallOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Context;
  unint64_t v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  v5 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 8);
  v13 = Context;
  v14 = v6;
  v7 = (void **)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v14);
  v9 = v8;
  v10 = *(unsigned int *)(*(_QWORD *)this + 44);
  v11 = *(_QWORD *)this + 16 * ((v10 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v11 = 0;
  if ((v10 & 0x800000) != 0)
    v12 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v12 = 0;
  mlir::ValueRange::ValueRange(v15, v12, *(unsigned int *)(v11 + 32));
  mlir::getMixedValues(v7, v9, v15[0], v15[1], (mlir::Builder *)&v13, a2);
}

void mlir::scf::ForallOp::getMixedUpperBound(mlir::scf::ForallOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Context;
  unint64_t v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  v5 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 24);
  v15 = Context;
  v16 = v6;
  v7 = (void **)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v16);
  v9 = v8;
  v10 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v11 = *(_QWORD *)this + 16 * ((v10 >> 23) & 1) + 64;
  else
    v11 = 0;
  v12 = *(unsigned int *)(v11 + 32);
  v13 = *(_DWORD *)(v11 + 36);
  if ((v10 & 0x800000) != 0)
    v14 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v14 = 0;
  mlir::ValueRange::ValueRange(v17, v14 + 32 * v12, (v13 + v12) - v12);
  mlir::getMixedValues(v7, v9, v17[0], v17[1], (mlir::Builder *)&v15, a2);
}

void mlir::scf::ForallOp::getMixedStep(mlir::scf::ForallOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Context;
  unint64_t v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  v5 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 16);
  v16 = Context;
  v17 = v6;
  v7 = (void **)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v17);
  v9 = v8;
  v10 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v11 = (_DWORD *)(*(_QWORD *)this + 16 * ((v10 >> 23) & 1) + 64);
  else
    v11 = 0;
  v12 = v11[8];
  v13 = v11[9];
  v14 = v11[10];
  if ((v10 & 0x800000) != 0)
    v15 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v15 = 0;
  mlir::ValueRange::ValueRange(v18, v15 + 32 * (v13 + v12), (v14 + v13 + v12) - (unint64_t)(v13 + v12));
  mlir::getMixedValues(v7, v9, v18[0], v18[1], (mlir::Builder *)&v16, a2);
}

void mlir::scf::promote(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::IndexType **v5;
  uint64_t v6;
  mlir::GenericProgramPoint **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  char *v23;
  uint64_t *i;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  const double *v31;
  unsigned __int128 *v32;
  unint64_t v33;
  const double *v34;
  unsigned __int128 v35;
  unsigned __int128 v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  mlir::GenericProgramPoint *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  mlir::GenericProgramPoint *v52;
  uint64_t v53;
  uint64_t Input;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  mlir::GenericProgramPoint *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69[2];
  uint64_t v70[2];
  uint64_t v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  unint64_t v75;
  uint64_t v76;
  uint64_t Dest;
  uint64_t v78;
  mlir::GenericProgramPoint *v79;
  unint64_t v80[2];
  unint64_t v81[2];
  unint64_t v82[2];
  char *v83;
  unsigned int v84;
  unsigned int v85;
  _BYTE v86[48];
  _QWORD *v87;
  uint64_t v88;
  _QWORD v89[8];

  v89[6] = *MEMORY[0x1E0C80C00];
  v79 = (mlir::GenericProgramPoint *)a2;
  v4 = a1 + 24;
  v68 = *(_OWORD *)(a1 + 24);
  v5 = (mlir::IndexType **)(a1 + 8);
  v6 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v6)
    v7 = (mlir::GenericProgramPoint **)(v6 - 8);
  else
    v7 = 0;
  mlir::Block::getTerminator(v7);
  v9 = v8;
  v10 = *(_QWORD *)(a2 + 24);
  mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v79, (uint64_t)&v87);
  mlir::getValueOrCreateConstantIndexOp(v5, v10, v87, v88, (uint64_t)&v83);
  if (v87 != v89)
    free(v87);
  v11 = *((unsigned int *)v79 + 11);
  if (HIBYTE(*((_DWORD *)v79 + 11)))
    v12 = (_DWORD *)((char *)v79 + 16 * ((v11 >> 23) & 1) + 64);
  else
    v12 = 0;
  v13 = v12[8];
  v14 = v12[9];
  v16 = v12[10];
  v15 = v12[11];
  if ((v11 & 0x800000) == 0)
  {
    v66 = (v14 + v13 + v16);
    v18 = 32 * v66;
    v19 = (v15 + v66) - v66;
    v20 = 32 * v66;
    v21 = v84;
    v22 = v19 + v84;
    if (v22 <= v85)
      goto LABEL_12;
    goto LABEL_11;
  }
  v17 = (v14 + v13 + v16);
  v18 = *((_QWORD *)v79 + 9) + 32 * v17;
  v19 = (v15 + v17) - v17;
  v20 = v18;
  v21 = v84;
  v22 = v19 + v84;
  if (v22 > v85)
  {
LABEL_11:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v22, 8);
    v21 = v84;
  }
LABEL_12:
  if (v19 || v18 != v20)
  {
    v23 = &v83[8 * v21];
    if (v18 != v20)
    {
      for (i = (uint64_t *)(v18 + 24); ; i += 4)
      {
        v25 = *i;
        *(_QWORD *)v23 = v25;
        v23 += 8;
      }
    }
    if (v19 > 0xC
      && ((v26 = v21, v27 = &v83[8 * v19 + 8 * v21], (unint64_t)v23 < v18 + 32 * v19)
        ? (v28 = v18 + 24 >= (unint64_t)v27)
        : (v28 = 1),
          v28))
    {
      v29 = v19 & 3;
      if ((v19 & 3) == 0)
        v29 = 4;
      v30 = v19 - v29;
      v23 += 8 * v30;
      v31 = (const double *)(v18 + 88);
      v32 = (unsigned __int128 *)&v83[8 * v26 + 16];
      v33 = v30;
      do
      {
        v34 = v31 - 8;
        v35 = (unsigned __int128)vld4q_f64(v34);
        v36 = (unsigned __int128)vld4q_f64(v31);
        *(v32 - 1) = v35;
        *v32 = v36;
        v31 += 16;
        v32 += 2;
        v33 -= 4;
      }
      while (v33);
    }
    else
    {
      v30 = 0;
    }
    v37 = v19 - v30;
    v38 = (uint64_t *)(v18 + 32 * v30 + 24);
    do
    {
      v39 = *v38;
      v38 += 4;
      *(_QWORD *)v23 = v39;
      v23 += 8;
      --v37;
    }
    while (v37);
    v21 = v84;
  }
  v40 = v21 + v19;
  v84 = v21 + v19;
  v41 = v79;
  v42 = *(_QWORD *)((((unint64_t)v79
                    + 16 * (((unint64_t)*((unsigned int *)v79 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v79 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v79 + 10)
                  + 8);
  if (v42)
    v43 = v42 - 8;
  else
    v43 = 0;
  v44 = *((_QWORD *)v79 + 2);
  mlir::ValueRange::ValueRange(v82, (uint64_t)v83, v40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, mlir::GenericProgramPoint *, unint64_t, unint64_t))(*(_QWORD *)a1 + 56))(a1, v43, v44, v41, v82[0], v82[1]);
  v45 = *((_QWORD *)v79 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v79);
  v47 = *(_QWORD *)(v46 + 8);
  *(_QWORD *)(a1 + 24) = v45;
  *(_QWORD *)(a1 + 32) = v47;
  v87 = v89;
  v88 = 0x600000000;
  v48 = *((unsigned int *)v79 + 9);
  if (v48 >= 7)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v48, 8);
  v67 = v9;
  v49 = *(_QWORD *)(((v9
                    + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(v9 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v9 + 40)
                  + 8);
  if (v49)
    v50 = v49 - 8;
  else
    v50 = 0;
  v51 = (mlir::GenericProgramPoint *)(v50 + 32);
  v52 = *(mlir::GenericProgramPoint **)(v50 + 40);
  if (v52 != (mlir::GenericProgramPoint *)(v50 + 32))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v52);
      v78 = v53;
      Dest = mlir::tensor::ParallelInsertSliceOp::getDest((mlir::tensor::ParallelInsertSliceOp *)&v78);
      Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v78);
      v55 = *((_QWORD *)v79 + 3);
      v75 = *(_QWORD *)(Dest + 8) & 0xFFFFFFFFFFFFFFF8;
      v76 = Input;
      v74[0] = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v78);
      v74[1] = v56;
      v73[0] = mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v78);
      v73[1] = v57;
      v72[0] = mlir::tensor::InsertSliceOp::getStrides((mlir::tensor::InsertSliceOp *)&v78);
      v72[1] = v58;
      v71[0] = mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v78);
      v71[1] = v59;
      v70[0] = mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v78);
      v70[1] = v60;
      v69[0] = mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v78);
      v69[1] = v61;
      v62 = mlir::OpBuilder::create<mlir::tensor::InsertSliceOp,mlir::Type,mlir::Value &,mlir::Value &,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(v5, v55, (uint64_t *)&v75, &v76, &Dest, (uint64_t)v74, (uint64_t)v73, (uint64_t)v72, v71, v70, v69);
      v63 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 8);
        v63 = v88;
      }
      v87[v63] = (char *)v62 - 16;
      LODWORD(v88) = v88 + 1;
      v52 = (mlir::GenericProgramPoint *)*((_QWORD *)v52 + 1);
    }
    while (v52 != v51);
  }
  v64 = *((unsigned int *)v79 + 9);
  if ((_DWORD)v64)
    v65 = (char *)v79 - 16;
  else
    v65 = 0;
  mlir::ValueRange::ValueRange(v81, (uint64_t)v65, v64);
  mlir::ValueRange::ValueRange(v80, (uint64_t)v87, v88);
  mlir::RewriterBase::replaceAllUsesWith(a1, v81[0], v81[1], v80[0], v80[1]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v67);
  (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a1 + 40))(a1, v79);
  if (v87 != v89)
    free(v87);
  if (v83 != v86)
    free(v83);
  if ((_QWORD)v68)
  {
    *(_OWORD *)v4 = v68;
  }
  else
  {
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::InsertSliceOp,mlir::Type,mlir::Value &,mlir::Value &,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t *Context;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  __int16 v31;
  uint64_t v32[4];
  __int16 v33;
  unint64_t v34[2];
  unint64_t v35[2];
  unint64_t v36[2];
  _QWORD v37[40];

  v37[38] = *MEMORY[0x1E0C80C00];
  v29 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v29);
  v20 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.insert_slice", (const unsigned __int8 *)0x13, Context);
  if (!v21)
  {
    v33 = 1283;
    v32[2] = (uint64_t)"tensor.insert_slice";
    v32[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v31 = 259;
    llvm::operator+(v32, (uint64_t *)&v30, (uint64_t)v37);
    llvm::report_fatal_error((llvm::Twine *)v37, 1);
  }
  mlir::OperationState::OperationState(v37, a2, v20);
  v28 = *a3;
  v22 = *a4;
  v23 = *a5;
  mlir::ValueRange::ValueRange(v36, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  mlir::ValueRange::ValueRange(v35, *(_QWORD *)a7, *(_QWORD *)(a7 + 8));
  mlir::ValueRange::ValueRange(v34, *(_QWORD *)a8, *(_QWORD *)(a8 + 8));
  mlir::tensor::InsertSliceOp::build(a1, (uint64_t)v37, v28, v22, v23, v36[0], v36[1], v24, v35[0], v35[1], v34[0], v34[1], *a9, a9[1], *a10, a10[1], *a11, a11[1]);
  v25 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v37);
  if (*(_UNKNOWN **)(*((_QWORD *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::InsertSliceOp,void>::id)
    v26 = v25;
  else
    v26 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v37);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.yield", (const unsigned __int8 *)9, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"scf.yield";
    v15[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

void mlir::scf::ForOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  const char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  const char *v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  unint64_t v141;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"scf.for", 7, (__int16)v140, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E172E0;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ForOpIterArgsFolder]";
  v141 = 92;
  v9 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v9)
    v10 = v9;
  else
    v10 = v141;
  v11 = &v140[v10];
  v12 = v141 - v10;
  if (v141 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v141 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_154;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_155;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_158;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_158:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"scf.for", 7, (__int16)v140, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E18618;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyTrivialLoops]";
  v141 = 93;
  v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v43)
    v44 = v43;
  else
    v44 = v141;
  v45 = &v140[v44];
  v46 = v141 - v44;
  if (v141 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v141 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_154;
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      goto LABEL_155;
    v55 = (char *)operator new(8 * v54);
    v56 = &v55[8 * v51];
    v57 = &v55[8 * v54];
    *(_QWORD *)v56 = v38;
    v42 = (uint64_t)(v56 + 8);
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
  }
  else
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_159;
      }
      v60 = (v59 >> 3) + 1;
      v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v41[-v61];
      v56 -= v61;
      v63 = &v55[8 * v51 - 16];
      v64 = v41 - 16;
      v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_159:
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      v41 = (char *)a1[1];
      v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        v71 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        v70 = v71;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
  v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"scf.for", 7, (__int16)v140, a2, 0, 0);
  *(_QWORD *)v72 = off_1E0E19F70;
  if (*((_QWORD *)v72 + 9))
  {
    v73 = v72[22];
    if (v73 <= v72[23])
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    v75 = (char *)a1[2];
    v74 = a1[3];
    if ((unint64_t)v75 < v74)
      goto LABEL_80;
    goto LABEL_91;
  }
  v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::LastTensorLoadCanonicalization]";
  v141 = 103;
  v77 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v77)
    v78 = v77;
  else
    v78 = v141;
  v79 = &v140[v78];
  v80 = v141 - v78;
  if (v141 - v78 >= 0x12)
    v81 = 18;
  else
    v81 = v141 - v78;
  v82 = &v79[v81];
  v83 = v80 - v81;
  if (v83 >= v83 - 1)
    --v83;
  *((_QWORD *)v72 + 8) = v82;
  *((_QWORD *)v72 + 9) = v83;
  v73 = v72[22];
  if (v73 > v72[23])
    goto LABEL_90;
LABEL_79:
  v72[22] = v73;
  v75 = (char *)a1[2];
  v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(_QWORD *)v75 = v72;
    v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v84 = (char *)a1[1];
  v85 = (v75 - v84) >> 3;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
    goto LABEL_154;
  v87 = v74 - (_QWORD)v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (v88)
  {
    if (v88 >> 61)
      goto LABEL_155;
    v89 = (char *)operator new(8 * v88);
    v90 = &v89[8 * v85];
    v91 = &v89[8 * v88];
    *(_QWORD *)v90 = v72;
    v76 = (uint64_t)(v90 + 8);
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
      goto LABEL_100;
  }
  else
  {
    v89 = 0;
    v90 = (char *)(8 * v85);
    v91 = 0;
    *(_QWORD *)(8 * v85) = v72;
    v76 = 8 * v85 + 8;
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_160;
      }
      v94 = (v93 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v96 = &v75[-v95];
      v90 -= v95;
      v97 = &v89[8 * v85 - 16];
      v98 = v75 - 16;
      v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_160:
        do
        {
          v102 = *((_QWORD *)v75 - 1);
          v75 -= 8;
          *(_QWORD *)v75 = 0;
          *((_QWORD *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      v75 = (char *)a1[1];
      v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        v105 = *((_QWORD *)v103 - 1);
        v103 -= 8;
        v104 = v105;
        *(_QWORD *)v103 = 0;
        if (v105)
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75)
    operator delete(v75);
LABEL_115:
  a1[2] = v76;
  v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"scf.for", 7, (__int16)v140, a2, 0, 0);
  *(_QWORD *)v106 = off_1E0E18868;
  if (*((_QWORD *)v106 + 9))
  {
    v107 = v106[22];
    if (v107 <= v106[23])
      goto LABEL_117;
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    v109 = (char *)a1[2];
    v108 = a1[3];
    if ((unint64_t)v109 < v108)
      goto LABEL_118;
    goto LABEL_129;
  }
  v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ForOpTensorCastFolder]";
  v141 = 94;
  v111 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v111)
    v112 = v111;
  else
    v112 = v141;
  v113 = &v140[v112];
  v114 = v141 - v112;
  if (v141 - v112 >= 0x12)
    v115 = 18;
  else
    v115 = v141 - v112;
  v116 = &v113[v115];
  v117 = v114 - v115;
  if (v117 >= v117 - 1)
    --v117;
  *((_QWORD *)v106 + 8) = v116;
  *((_QWORD *)v106 + 9) = v117;
  v107 = v106[22];
  if (v107 > v106[23])
    goto LABEL_128;
LABEL_117:
  v106[22] = v107;
  v109 = (char *)a1[2];
  v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(_QWORD *)v109 = v106;
    v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  v118 = (char *)a1[1];
  v119 = (v109 - v118) >> 3;
  v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61)
LABEL_154:
    abort();
  v121 = v108 - (_QWORD)v118;
  if (v121 >> 2 > v120)
    v120 = v121 >> 2;
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
    v122 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v122 = v120;
  if (!v122)
  {
    v123 = 0;
    v124 = (char *)(8 * v119);
    v125 = 0;
    *(_QWORD *)(8 * v119) = v106;
    v110 = 8 * v119 + 8;
    v126 = (char *)(v109 - v118);
    if (v109 != v118)
      goto LABEL_138;
    goto LABEL_150;
  }
  if (v122 >> 61)
LABEL_155:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v123 = (char *)operator new(8 * v122);
  v124 = &v123[8 * v119];
  v125 = &v123[8 * v122];
  *(_QWORD *)v124 = v106;
  v110 = (uint64_t)(v124 + 8);
  v126 = (char *)(v109 - v118);
  if (v109 != v118)
  {
LABEL_138:
    v127 = (unint64_t)(v126 - 8);
    if (v127 < 0x78
      || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
      && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
    {
      goto LABEL_161;
    }
    v128 = (v127 >> 3) + 1;
    v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
    v130 = &v109[-v129];
    v124 -= v129;
    v131 = &v123[8 * v119 - 16];
    v132 = v109 - 16;
    v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v135 = *((_OWORD *)v132 - 1);
      v134 = *(_OWORD *)v132;
      *((_OWORD *)v132 - 1) = 0uLL;
      *(_OWORD *)v132 = 0uLL;
      *((_OWORD *)v131 - 1) = v135;
      *(_OWORD *)v131 = v134;
      v131 -= 32;
      v132 -= 32;
      v133 -= 4;
    }
    while (v133);
    v109 = v130;
    if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_161:
      do
      {
        v136 = *((_QWORD *)v109 - 1);
        v109 -= 8;
        *(_QWORD *)v109 = 0;
        *((_QWORD *)v124 - 1) = v136;
        v124 -= 8;
      }
      while (v109 != v118);
    }
    v109 = (char *)a1[1];
    v137 = (char *)a1[2];
    a1[1] = v124;
    a1[2] = v110;
    a1[3] = v125;
    while (v137 != v109)
    {
      v139 = *((_QWORD *)v137 - 1);
      v137 -= 8;
      v138 = v139;
      *(_QWORD *)v137 = 0;
      if (v139)
        (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
    }
    goto LABEL_151;
  }
LABEL_150:
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109)
    operator delete(v109);
LABEL_153:
  a1[2] = v110;
}

void mlir::scf::ForOp::getConstantStep(mlir::scf::ForOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t DefiningOp;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 88);
  v7 = 0;
  v8 = v3;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v8);
  if (!DefiningOp)
    goto LABEL_11;
  v5 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    goto LABEL_11;
  v9 = v11;
  v10 = 0x100000000;
  mlir::Operation::fold(v5, 0, 0, (uint64_t)&v9);
  v6 = (*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) == 0
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (!v6)
    v7 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v11)
    free(v9);
  if (!v6)
  {
    mlir::IntegerAttr::getValue(&v7, (llvm::APInt *)&v9);
    *(_DWORD *)(a2 + 8) = v10;
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
LABEL_11:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

BOOL mlir::scf::ForallOp::verify(uint64_t **this)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  uint64_t Value;
  uint64_t v26;
  _QWORD **v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  int64x2_t *v31;
  const char *v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64x2_t *v38;
  const char *v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int64x2_t *StaticStrides;
  const char *v47;
  const char *v48;
  uint64_t DynamicStep;
  unint64_t v50;
  uint64_t v51;
  const char *v52;
  int *v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  int *v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  int *v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  int *v70;
  char *v71;
  char *v72;
  __int128 v73;
  _QWORD **v74;
  _QWORD **v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  void *v81;
  int *v82;
  char *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  int *v87;
  char *v88;
  char *v89;
  __int128 v90;
  _QWORD **v91;
  _QWORD **v92;
  void *v93;
  _QWORD *v94;
  void *v95;
  void *v96;
  int *v97;
  char *v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  int *v102;
  char *v103;
  char *v104;
  __int128 v105;
  _QWORD **v106;
  _QWORD **v107;
  void *v108;
  _QWORD *v109;
  void *v110;
  void *v111;
  int *v112;
  char *v113;
  char *v114;
  __int128 v115;
  uint64_t v116;
  int *v117;
  char *v118;
  char *v119;
  __int128 v120;
  _QWORD **v121;
  _QWORD **v122;
  void *v123;
  _QWORD *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  int *v128;
  char *v129;
  char *v130;
  __int128 v131;
  _QWORD **v132;
  _QWORD **v133;
  void *v134;
  _QWORD *v135;
  void *v136;
  void *v137;
  unint64_t v139;
  unint64_t v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  BOOL v145;
  unint64_t v146;
  BOOL v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  BOOL v151;
  unint64_t v152;
  BOOL v153;
  unint64_t v154;
  int64_t v155;
  int64_t v156;
  int64_t v157;
  int64_t v158;
  int64_t v159;
  int64_t v160;
  int64_t v161;
  int64_t v162;
  int64_t v163;
  int64_t v164;
  int64_t v165;
  const void **v166[4];
  __int16 v167;
  int v168;
  const char *v169;
  uint64_t v170;
  unint64_t v171[2];
  unint64_t v172[2];
  unint64_t v173[2];
  unint64_t v174;
  _BOOL8 v175[2];
  void *v176;
  unsigned int v177;
  unsigned int v178;
  _BYTE v179[96];
  void *v180;
  _QWORD *v181;
  void *__p;
  _QWORD **v183;
  char v184;
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  v174 = *(_QWORD *)(v2 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v174);
  v4 = *this;
  v5 = *((unsigned int *)*this + 9);
  v6 = *((unsigned int *)*this + 11);
  v7 = (v6 >> 23) & 1;
  if (BYTE3(v6))
    v8 = &(*this)[2 * v7 + 8];
  else
    v8 = 0;
  v9 = (*((_DWORD *)v8 + 9) + *((_DWORD *)v8 + 8) + *((_DWORD *)v8 + 10));
  if ((*((_DWORD *)v8 + 11) + v9) - v9 == v5)
  {
    v10 = v3;
    v11 = *(_QWORD *)((((unint64_t)&(*this)[2 * v7 + 8] + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *((unsigned int *)v4 + 10)
                    + 8);
    if (v11)
      v12 = v11 - 8;
    else
      v12 = 0;
    v13 = (const char *)v3;
    if (v3 + v5 == ((*(_QWORD *)(v12 + 56) - *(_QWORD *)(v12 + 48)) >> 3))
    {
      if (!v3)
      {
LABEL_16:
        v15 = &v4[2 * v7 + 8];
        if (BYTE3(v6))
          v16 = v15;
        else
          v16 = 0;
        v17 = *((_DWORD *)v16 + 11);
        if (v17)
        {
          v18 = 0;
          v19 = (*((_DWORD *)v16 + 9) + *((_DWORD *)v16 + 8) + *((_DWORD *)v16 + 10));
          v20 = (v17 + v19) - v19;
          v21 = v4[9] + 32 * v19;
          v22 = 1;
          while ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * (v10 + v22 - 1)) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v21 + 32 * v18 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
          {
            v18 = v22++;
            if (v20 <= v18)
              goto LABEL_23;
          }
          v166[0] = (const void **)"type mismatch between ";
          v167 = 259;
          mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
          if (v174)
          {
            v168 = 5;
            v169 = (const char *)v18;
            v112 = &v168;
            v113 = (char *)v176;
            if (v177 >= v178)
            {
              v149 = v177 + 1;
              if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
              {
                v162 = (char *)&v168 - (_BYTE *)v176;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v149, 24);
                v113 = (char *)v176;
                v112 = (int *)((char *)v176 + v162);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v149, 24);
                v112 = &v168;
                v113 = (char *)v176;
              }
            }
            v114 = &v113[24 * v177];
            v115 = *(_OWORD *)v112;
            *((_QWORD *)v114 + 2) = *((_QWORD *)v112 + 2);
            *(_OWORD *)v114 = v115;
            v116 = ++v177;
            if (v174)
            {
              v168 = 3;
              v169 = "-th output and corresponding block argument";
              v170 = 43;
              v117 = &v168;
              v118 = (char *)v176;
              if (v116 >= v178)
              {
                v152 = v116 + 1;
                v153 = (char *)v176 + 24 * v116 > (char *)&v168;
                if (v176 <= &v168 && v153)
                {
                  v164 = (char *)&v168 - (_BYTE *)v176;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v152, 24);
                  v118 = (char *)v176;
                  v117 = (int *)((char *)v176 + v164);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v152, 24);
                  v117 = &v168;
                  v118 = (char *)v176;
                }
              }
              v119 = &v118[24 * v177];
              v120 = *(_OWORD *)v117;
              *((_QWORD *)v119 + 2) = *((_QWORD *)v117 + 2);
              *(_OWORD *)v119 = v120;
              ++v177;
            }
          }
          v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
          if (v174)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
          if (!v184)
            return v51;
          v121 = (_QWORD **)__p;
          if (__p)
          {
            v122 = v183;
            v123 = __p;
            if (v183 != __p)
            {
              do
                v122 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v122 - 1);
              while (v122 != v121);
              v123 = __p;
            }
            v183 = v121;
            operator delete(v123);
          }
          v77 = v180;
          if (!v180)
            goto LABEL_151;
          v124 = v181;
          v79 = v180;
          if (v181 == v180)
            goto LABEL_150;
          do
          {
            v126 = (void *)*--v124;
            v125 = v126;
            *v124 = 0;
            if (v126)
              operator delete[](v125);
          }
          while (v124 != v77);
        }
        else
        {
LABEL_23:
          if (!*v15)
            goto LABEL_30;
          v174 = *v15;
          v175[0] = 1;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v174);
          if (!v23)
            goto LABEL_30;
          v174 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
          v175[0] = v174 != 0;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v174);
          if (v24 != v13)
          {
            v167 = 257;
            mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
            v127 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v174, "mapping attribute size must match op rank");
            v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v127);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v174);
            return v51;
          }
          v174 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
          v175[0] = v174 != 0;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v174);
          if (!v26)
          {
LABEL_30:
            v29 = *this;
            if (HIBYTE(*((_DWORD *)*this + 11)))
              v30 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
            else
              v30 = 0;
            v174 = *(_QWORD *)(v30 + 8);
            v31 = (int64x2_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v174);
            v33 = v32;
            v34 = *((unsigned int *)*this + 11);
            v35 = (uint64_t)&(*this)[2 * ((v34 >> 23) & 1) + 8];
            if (!HIBYTE(*((_DWORD *)*this + 11)))
              v35 = 0;
            if ((v34 & 0x800000) != 0)
              v36 = (*this)[9];
            else
              v36 = 0;
            mlir::ValueRange::ValueRange(v173, v36, *(unsigned int *)(v35 + 32));
            if (!mlir::verifyListOfOperandsOrIntegers(v29, (const void **)"lower bound", (const char *)0xB, v10, v31, v33, v173[0], v173[1]))return 0;
            v37 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
            if (!HIBYTE(*((_DWORD *)*this + 11)))
              v37 = 0;
            v174 = *(_QWORD *)(v37 + 24);
            v38 = (int64x2_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v174);
            v40 = v39;
            v41 = *((unsigned int *)*this + 11);
            v42 = HIBYTE(*((_DWORD *)*this + 11)) ? (uint64_t)&(*this)[2 * ((v41 >> 23) & 1) + 8] : 0;
            v43 = *(unsigned int *)(v42 + 32);
            v44 = *(_DWORD *)(v42 + 36);
            v45 = (v41 & 0x800000) != 0 ? (*this)[9] : 0;
            mlir::ValueRange::ValueRange(v172, v45 + 32 * v43, (v44 + v43) - v43);
            if (!mlir::verifyListOfOperandsOrIntegers(v29, (const void **)"upper bound", (const char *)0xB, v10, v38, v40, v172[0], v172[1]))return 0;
            StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)this);
            v48 = v47;
            DynamicStep = mlir::scf::ForallOp::getDynamicStep((mlir::scf::ForallOp *)this);
            mlir::ValueRange::ValueRange(v171, DynamicStep, v50);
            return mlir::verifyListOfOperandsOrIntegers(v29, (const void **)"step", (const char *)4, v10, StaticStrides, v48, v171[0], v171[1]) != 0;
          }
          v27 = (_QWORD **)Value;
          v28 = 8 * v26;
          while (mlir::detail::InterfaceMap::lookup<mlir::DeviceMappingAttrInterface>(**v27 + 8))
          {
            ++v27;
            v28 -= 8;
            if (!v28)
              goto LABEL_30;
          }
          v167 = 257;
          mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
          if (v174)
          {
            mlir::Diagnostic::operator<<((uint64_t)v175, **(_QWORD **)((*this)[6] + 96));
            if (v174)
            {
              v168 = 3;
              v169 = " is not device mapping attribute";
              v170 = 32;
              v128 = &v168;
              v129 = (char *)v176;
              if (v177 >= v178)
              {
                v154 = v177 + 1;
                if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
                {
                  v165 = (char *)&v168 - (_BYTE *)v176;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v154, 24);
                  v129 = (char *)v176;
                  v128 = (int *)((char *)v176 + v165);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v154, 24);
                  v128 = &v168;
                  v129 = (char *)v176;
                }
              }
              v130 = &v129[24 * v177];
              v131 = *(_OWORD *)v128;
              *((_QWORD *)v130 + 2) = *((_QWORD *)v128 + 2);
              *(_OWORD *)v130 = v131;
              ++v177;
            }
          }
          v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
          if (v174)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
          if (!v184)
            return v51;
          v132 = (_QWORD **)__p;
          if (__p)
          {
            v133 = v183;
            v134 = __p;
            if (v183 != __p)
            {
              do
                v133 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v133 - 1);
              while (v133 != v132);
              v134 = __p;
            }
            v183 = v132;
            operator delete(v134);
          }
          v77 = v180;
          if (!v180)
            goto LABEL_151;
          v135 = v181;
          v79 = v180;
          if (v181 == v180)
          {
LABEL_150:
            v181 = v77;
            operator delete(v79);
LABEL_151:
            if (v176 != v179)
              free(v176);
            return v51;
          }
          do
          {
            v137 = (void *)*--v135;
            v136 = v137;
            *v135 = 0;
            if (v137)
              operator delete[](v136);
          }
          while (v135 != v77);
        }
LABEL_149:
        v79 = v180;
        goto LABEL_150;
      }
      v14 = 0;
      while (1)
      {
        v174 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * (_QWORD)v14) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!mlir::Type::isIndex((mlir::Type *)&v174))
          break;
        if (v13 == ++v14)
        {
          v4 = *this;
          v6 = *((unsigned int *)*this + 11);
          v7 = (v6 >> 23) & 1;
          goto LABEL_16;
        }
      }
      v166[0] = (const void **)"expects ";
      v167 = 259;
      mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
      if (v174)
      {
        v168 = 2;
        v169 = v14;
        v97 = &v168;
        v98 = (char *)v176;
        if (v177 >= v178)
        {
          v148 = v177 + 1;
          if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
          {
            v161 = (char *)&v168 - (_BYTE *)v176;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v148, 24);
            v98 = (char *)v176;
            v97 = (int *)((char *)v176 + v161);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v148, 24);
            v97 = &v168;
            v98 = (char *)v176;
          }
        }
        v99 = &v98[24 * v177];
        v100 = *(_OWORD *)v97;
        *((_QWORD *)v99 + 2) = *((_QWORD *)v97 + 2);
        *(_OWORD *)v99 = v100;
        v101 = ++v177;
        if (v174)
        {
          v168 = 3;
          v169 = "-th block argument to be an index";
          v170 = 33;
          v102 = &v168;
          v103 = (char *)v176;
          if (v101 >= v178)
          {
            v150 = v101 + 1;
            v151 = (char *)v176 + 24 * v101 > (char *)&v168;
            if (v176 <= &v168 && v151)
            {
              v163 = (char *)&v168 - (_BYTE *)v176;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v150, 24);
              v103 = (char *)v176;
              v102 = (int *)((char *)v176 + v163);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v150, 24);
              v102 = &v168;
              v103 = (char *)v176;
            }
          }
          v104 = &v103[24 * v177];
          v105 = *(_OWORD *)v102;
          *((_QWORD *)v104 + 2) = *((_QWORD *)v102 + 2);
          *(_OWORD *)v104 = v105;
          ++v177;
        }
      }
      v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
      if (v174)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
      if (v184)
      {
        v106 = (_QWORD **)__p;
        if (__p)
        {
          v107 = v183;
          v108 = __p;
          if (v183 != __p)
          {
            do
              v107 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v107 - 1);
            while (v107 != v106);
            v108 = __p;
          }
          v183 = v106;
          operator delete(v108);
        }
        v77 = v180;
        if (!v180)
          goto LABEL_151;
        v109 = v181;
        v79 = v180;
        if (v181 == v180)
          goto LABEL_150;
        do
        {
          v111 = (void *)*--v109;
          v110 = v111;
          *v109 = 0;
          if (v111)
            operator delete[](v110);
        }
        while (v109 != v77);
        goto LABEL_149;
      }
    }
    else
    {
      v166[0] = (const void **)"region expects ";
      v167 = 259;
      mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
      if (v174)
      {
        v168 = 5;
        v169 = v13;
        v82 = &v168;
        v83 = (char *)v176;
        if (v177 >= v178)
        {
          v142 = v177 + 1;
          if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
          {
            v157 = (char *)&v168 - (_BYTE *)v176;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v142, 24);
            v83 = (char *)v176;
            v82 = (int *)((char *)v176 + v157);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v142, 24);
            v82 = &v168;
            v83 = (char *)v176;
          }
        }
        v84 = &v83[24 * v177];
        v85 = *(_OWORD *)v82;
        *((_QWORD *)v84 + 2) = *((_QWORD *)v82 + 2);
        *(_OWORD *)v84 = v85;
        v86 = ++v177;
        if (v174)
        {
          v168 = 3;
          v169 = " arguments";
          v170 = 10;
          v87 = &v168;
          v88 = (char *)v176;
          if (v86 >= v178)
          {
            v144 = v86 + 1;
            v145 = (char *)v176 + 24 * v86 > (char *)&v168;
            if (v176 <= &v168 && v145)
            {
              v159 = (char *)&v168 - (_BYTE *)v176;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v144, 24);
              v88 = (char *)v176;
              v87 = (int *)((char *)v176 + v159);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v144, 24);
              v87 = &v168;
              v88 = (char *)v176;
            }
          }
          v89 = &v88[24 * v177];
          v90 = *(_OWORD *)v87;
          *((_QWORD *)v89 + 2) = *((_QWORD *)v87 + 2);
          *(_OWORD *)v89 = v90;
          ++v177;
        }
      }
      v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
      if (v174)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
      if (v184)
      {
        v91 = (_QWORD **)__p;
        if (__p)
        {
          v92 = v183;
          v93 = __p;
          if (v183 != __p)
          {
            do
              v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
            while (v92 != v91);
            v93 = __p;
          }
          v183 = v91;
          operator delete(v93);
        }
        v77 = v180;
        if (!v180)
          goto LABEL_151;
        v94 = v181;
        v79 = v180;
        if (v181 == v180)
          goto LABEL_150;
        do
        {
          v96 = (void *)*--v94;
          v95 = v96;
          *v94 = 0;
          if (v96)
            operator delete[](v95);
        }
        while (v94 != v77);
        goto LABEL_149;
      }
    }
  }
  else
  {
    v166[0] = (const void **)"produces ";
    v167 = 259;
    mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
    if (v174)
    {
      v52 = (const char *)*((unsigned int *)*this + 9);
      v168 = 5;
      v169 = v52;
      v53 = &v168;
      v54 = (char *)v176;
      if (v177 >= v178)
      {
        v139 = v177 + 1;
        if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
        {
          v155 = (char *)&v168 - (_BYTE *)v176;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v139, 24);
          v54 = (char *)v176;
          v53 = (int *)((char *)v176 + v155);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v139, 24);
          v53 = &v168;
          v54 = (char *)v176;
        }
      }
      v55 = &v54[24 * v177];
      v56 = *(_OWORD *)v53;
      *((_QWORD *)v55 + 2) = *((_QWORD *)v53 + 2);
      *(_OWORD *)v55 = v56;
      v57 = ++v177;
      if (v174)
      {
        v168 = 3;
        v169 = " results, but has only ";
        v170 = 23;
        v58 = &v168;
        v59 = (char *)v176;
        if (v57 >= v178)
        {
          v140 = v57 + 1;
          v141 = (char *)v176 + 24 * v57 > (char *)&v168;
          if (v176 <= &v168 && v141)
          {
            v156 = (char *)&v168 - (_BYTE *)v176;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v140, 24);
            v59 = (char *)v176;
            v58 = (int *)((char *)v176 + v156);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v140, 24);
            v58 = &v168;
            v59 = (char *)v176;
          }
        }
        v60 = &v59[24 * v177];
        v61 = *(_OWORD *)v58;
        *((_QWORD *)v60 + 2) = *((_QWORD *)v58 + 2);
        *(_OWORD *)v60 = v61;
        ++v177;
        if (v174)
        {
          v62 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
          if (!HIBYTE(*((_DWORD *)*this + 11)))
            v62 = 0;
          v63 = *((_DWORD *)v62 + 11);
          v64 = (*((_DWORD *)v62 + 9) + *((_DWORD *)v62 + 8) + *((_DWORD *)v62 + 10));
          v168 = 5;
          v169 = (const char *)((v63 + v64) - v64);
          v65 = &v168;
          v66 = (char *)v176;
          if (v177 >= v178)
          {
            v143 = v177 + 1;
            if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
            {
              v158 = (char *)&v168 - (_BYTE *)v176;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v143, 24);
              v66 = (char *)v176;
              v65 = (int *)((char *)v176 + v158);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v143, 24);
              v65 = &v168;
              v66 = (char *)v176;
            }
          }
          v67 = &v66[24 * v177];
          v68 = *(_OWORD *)v65;
          *((_QWORD *)v67 + 2) = *((_QWORD *)v65 + 2);
          *(_OWORD *)v67 = v68;
          v69 = ++v177;
          if (v174)
          {
            v168 = 3;
            v169 = " outputs";
            v170 = 8;
            v70 = &v168;
            v71 = (char *)v176;
            if (v69 >= v178)
            {
              v146 = v69 + 1;
              v147 = (char *)v176 + 24 * v69 > (char *)&v168;
              if (v176 <= &v168 && v147)
              {
                v160 = (char *)&v168 - (_BYTE *)v176;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v146, 24);
                v71 = (char *)v176;
                v70 = (int *)((char *)v176 + v160);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v146, 24);
                v70 = &v168;
                v71 = (char *)v176;
              }
            }
            v72 = &v71[24 * v177];
            v73 = *(_OWORD *)v70;
            *((_QWORD *)v72 + 2) = *((_QWORD *)v70 + 2);
            *(_OWORD *)v72 = v73;
            ++v177;
          }
        }
      }
    }
    v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
    if (v174)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
    if (v184)
    {
      v74 = (_QWORD **)__p;
      if (__p)
      {
        v75 = v183;
        v76 = __p;
        if (v183 != __p)
        {
          do
            v75 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v75 - 1);
          while (v75 != v74);
          v76 = __p;
        }
        v183 = v74;
        operator delete(v76);
      }
      v77 = v180;
      if (!v180)
        goto LABEL_151;
      v78 = v181;
      v79 = v180;
      if (v181 == v180)
        goto LABEL_150;
      do
      {
        v81 = (void *)*--v78;
        v80 = v81;
        *v78 = 0;
        if (v81)
          operator delete[](v80);
      }
      while (v78 != v77);
      goto LABEL_149;
    }
  }
  return v51;
}

uint64_t mlir::scf::ForallOp::getDynamicStep(mlir::scf::ForallOp *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = *(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64;
  else
    v2 = 0;
  v3 = (*(_DWORD *)(v2 + 36) + *(_DWORD *)(v2 + 32));
  if ((v1 & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * v3;
  else
    return 32 * v3;
}

uint64_t mlir::scf::ForallOp::print(mlir::scf::ForallOp *this, mlir::OpAsmPrinter *a2)
{
  _BYTE *v4;
  llvm::raw_ostream *v5;
  _WORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int isNormalized;
  llvm::raw_ostream *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::raw_ostream *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _DWORD *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm::raw_ostream *v79;
  _DWORD *v80;
  uint64_t v81;
  const char *v82;
  llvm::raw_ostream *v83;
  _WORD *v84;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  unint64_t AttrDictionary;
  uint64_t v100;
  uint64_t AttrData;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107[2];
  unint64_t v108[2];
  unint64_t v109[2];
  unint64_t v110[2];
  unint64_t v111[3];

  v111[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE **)this;
  v5 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v6 = (_WORD *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 10272;
    *((_QWORD *)v5 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v5, " (", 2uLL);
  }
  v7 = *(unsigned int *)(*(_QWORD *)this + 44);
  v8 = *(_QWORD *)this + 16 * ((v7 >> 23) & 1) + 64;
  v9 = *(_QWORD *)(((v8 + ((v7 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                 + 8);
  if (v9)
    v10 = v9 - 8;
  else
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 48);
  v12 = (*(_QWORD *)(v10 + 56) - v11) >> 3;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v8 = 0;
  AttrDictionary = *(_QWORD *)(v8 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  if (v12 >= v13)
    v14 = v13;
  else
    v14 = v12;
  mlir::ValueRange::ValueRange(&AttrDictionary, v11, v14);
  mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>((uint64_t)a2, AttrDictionary, 0, AttrDictionary, v100);
  isNormalized = mlir::scf::ForallOp::isNormalized(this);
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = *((_QWORD *)v16 + 4);
  v18 = *((_QWORD *)v16 + 3) - v17;
  if (isNormalized)
  {
    if (v18 > 4)
    {
      *(_BYTE *)(v17 + 4) = 32;
      *(_DWORD *)v17 = 1852383273;
      *((_QWORD *)v16 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v16, ") in ", 5uLL);
    }
    v19 = *(unsigned int *)(*(_QWORD *)this + 44);
    v20 = *(_QWORD *)this + 16 * ((v19 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v20 = 0;
    v21 = *(unsigned int *)(v20 + 32);
    if ((v19 & 0x800000) != 0)
      v22 = *(_QWORD *)(*(_QWORD *)this + 72);
    else
      v22 = 0;
    v23 = v22 + 32 * v21;
    v24 = (*(_DWORD *)(v20 + 36) + v21) - v21;
    AttrDictionary = *(_QWORD *)(v20 + 24);
    v25 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    v27 = v26;
    mlir::ValueRange::ValueRange(v111, 0, 0);
    v28 = v111[0];
    v29 = v111[1];
  }
  else
  {
    if (v18 > 3)
    {
      *(_DWORD *)v17 = 540876841;
      *((_QWORD *)v16 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v16, ") = ", 4uLL);
    }
    v30 = *(unsigned int *)(*(_QWORD *)this + 44);
    v31 = *(_QWORD *)this + 16 * ((v30 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v31 = 0;
    v32 = *(unsigned int *)(v31 + 32);
    if ((v30 & 0x800000) != 0)
      v33 = *(_QWORD *)(*(_QWORD *)this + 72);
    else
      v33 = 0;
    AttrDictionary = *(_QWORD *)(v31 + 8);
    v34 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    v36 = v35;
    mlir::ValueRange::ValueRange(v110, 0, 0);
    mlir::printDynamicIndexList((uint64_t)a2, (uint64_t)v4, v33, v32, v34, v36, v110[0], v110[1], 0, 0, 1);
    v37 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v38 = (_DWORD *)*((_QWORD *)v37 + 4);
    if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 3uLL)
    {
      *v38 = 544175136;
      *((_QWORD *)v37 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v37, " to ", 4uLL);
    }
    v39 = *(unsigned int *)(*(_QWORD *)this + 44);
    v40 = *(_QWORD *)this + 16 * ((v39 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v40 = 0;
    v41 = *(unsigned int *)(v40 + 32);
    if ((v39 & 0x800000) != 0)
      v42 = *(_QWORD *)(*(_QWORD *)this + 72);
    else
      v42 = 0;
    v43 = v42 + 32 * v41;
    v44 = (*(_DWORD *)(v40 + 36) + v41) - v41;
    AttrDictionary = *(_QWORD *)(v40 + 24);
    v45 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    v47 = v46;
    mlir::ValueRange::ValueRange(v109, 0, 0);
    mlir::printDynamicIndexList((uint64_t)a2, (uint64_t)v4, v43, v44, v45, v47, v109[0], v109[1], 0, 0, 1);
    v48 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v49 = *((_QWORD *)v48 + 4);
    if ((unint64_t)(*((_QWORD *)v48 + 3) - v49) > 5)
    {
      *(_WORD *)(v49 + 4) = 8304;
      *(_DWORD *)v49 = 1702130464;
      *((_QWORD *)v48 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v48, " step ", 6uLL);
    }
    v50 = *(unsigned int *)(*(_QWORD *)this + 44);
    v51 = *(_QWORD *)this + 16 * ((v50 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v51 = 0;
    if ((v50 & 0x800000) != 0)
      v52 = *(_QWORD *)(*(_QWORD *)this + 72);
    else
      v52 = 0;
    v53 = (*(_DWORD *)(v51 + 36) + *(_DWORD *)(v51 + 32));
    v23 = v52 + 32 * v53;
    v24 = (*(_DWORD *)(v51 + 40) + v53) - v53;
    AttrDictionary = *(_QWORD *)(v51 + 16);
    v25 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    v27 = v54;
    mlir::ValueRange::ValueRange(v108, 0, 0);
    v28 = v108[0];
    v29 = v108[1];
  }
  mlir::printDynamicIndexList((uint64_t)a2, (uint64_t)v4, v23, v24, v25, v27, v28, v29, 0, 0, 1);
  v55 = *(unsigned int *)(*(_QWORD *)this + 44);
  v56 = *(_QWORD *)this + 16 * ((v55 >> 23) & 1) + 64;
  v57 = *(_QWORD *)(((v56 + ((v55 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                  + 8);
  if (v57)
    v58 = v57 - 8;
  else
    v58 = 0;
  v59 = *(_QWORD *)(v58 + 48);
  v60 = (*(_QWORD *)(v58 + 56) - v59) >> 3;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v56 = 0;
  AttrDictionary = *(_QWORD *)(v56 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  v62 = v60 - v61;
  v63 = (_QWORD *)(v59 + 8 * v61);
  v64 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v65 = (_DWORD *)(*(_QWORD *)this + 16 * ((v64 >> 23) & 1) + 64);
  else
    v65 = 0;
  v66 = v65[8];
  v67 = v65[9];
  v69 = v65[10];
  v68 = v65[11];
  if ((v64 & 0x800000) != 0)
    v70 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v70 = 0;
  mlir::ValueRange::ValueRange(v107, v70 + 32 * (v67 + v66 + v69), (v68 + v67 + v66 + v69) - (unint64_t)(v67 + v66 + v69));
  printInitializationList(a2, v63, v62, v107[0], v107[1], " shared_outs", 0xCuLL);
  v71 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v72 = (_BYTE *)*((_QWORD *)v71 + 4);
  if (*((_BYTE **)v71 + 3) == v72)
  {
    llvm::raw_ostream::write(v71, " ", 1uLL);
  }
  else
  {
    *v72 = 32;
    ++*((_QWORD *)v71 + 4);
  }
  v73 = *(unsigned int *)(*(_QWORD *)this + 44);
  v74 = *(_QWORD *)this + 16 * ((v73 >> 23) & 1) + 64;
  v75 = *(_QWORD *)(((v74 + ((v73 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                  + 8);
  if (v75)
    v76 = v75 - 8;
  else
    v76 = 0;
  v77 = *(_QWORD *)(v76 + 56) - *(_QWORD *)(v76 + 48);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v74 = 0;
  AttrDictionary = *(_QWORD *)(v74 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  if (v78 != v77 >> 3)
  {
    v79 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v80 = (_DWORD *)*((_QWORD *)v79 + 4);
    if (*((_QWORD *)v79 + 3) - (_QWORD)v80 > 3uLL)
    {
      *v80 = 673201709;
      *((_QWORD *)v79 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v79, "-> (", 4uLL);
    }
    v81 = *(unsigned int *)(*(_QWORD *)this + 36);
    v82 = (const char *)(*(_QWORD *)this - 16);
    if (!(_DWORD)v81)
      v82 = 0;
    v97 = v82;
    v98 = v81;
    mlir::OperandRange::getTypes((uint64_t *)&v97, (uint64_t *)&AttrDictionary);
    v97 = ", ";
    v98 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(AttrDictionary, v100, AttrData, v102, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v97);
    v83 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v84 = (_WORD *)*((_QWORD *)v83 + 4);
    if (*((_QWORD *)v83 + 3) - (_QWORD)v84 > 1uLL)
    {
      *v84 = 8233;
      *((_QWORD *)v83 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v83, ") ", 2uLL);
    }
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)a2 + 224))(a2, ((*(_QWORD *)this+ 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(*(_QWORD *)this + 40), 0, *(_DWORD *)(*(_QWORD *)this + 36) != 0, 0);
  if (v4[47])
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  v88 = v87;
  v97 = *(const char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 48) + 96)
                       + 8 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 48) + 104)
                       - 8);
  AttrDictionary = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v97);
  v100 = v89;
  v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 48) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v96);
  v102 = v90;
  v95 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 48) + 96) + 24);
  v103 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v95);
  v104 = v91;
  v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 48) + 96) + 16);
  v105 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v94);
  v106 = v92;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)a2 + 192))(a2, Value, v88, &AttrDictionary, 4);
}

uint64_t mlir::scf::ForallOp::isNormalized(mlir::scf::ForallOp *this)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t ConstantIntValue;
  char v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  void *v16;
  unsigned int v17;
  _BYTE v18[48];
  void *v19;
  unsigned int v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  mlir::scf::ForallOp::getMixedLowerBound(this, (uint64_t)&v19);
  if (!v20)
  {
LABEL_9:
    mlir::scf::ForallOp::getMixedStep(this, (uint64_t)&v16);
    v7 = (uint64_t *)v16;
    if (v17)
    {
      v8 = 8 * v17 - 8;
      do
      {
        v9 = *v7++;
        ConstantIntValue = mlir::getConstantIntValue(v9);
        if (v11)
          v12 = ConstantIntValue == 1;
        else
          v12 = 0;
        v14 = v12;
        v13 = (_DWORD)v14 != 1 || v8 == 0;
        v8 -= 8;
      }
      while (!v13);
      v7 = (uint64_t *)v16;
      if (v16 == v18)
        goto LABEL_26;
    }
    else
    {
      v14 = 1;
      if (v16 == v18)
        goto LABEL_26;
    }
    free(v7);
    goto LABEL_26;
  }
  v2 = (uint64_t *)v19;
  v3 = 8 * v20;
  while (1)
  {
    v4 = mlir::getConstantIntValue(*v2);
    if (!v5 || v4 != 0)
      break;
    ++v2;
    v3 -= 8;
    if (!v3)
      goto LABEL_9;
  }
  v14 = 0;
LABEL_26:
  if (v19 != v21)
    free(v19);
  return v14;
}

uint64_t mlir::scf::ForallOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  mlir::MLIRContext *v4;
  uint64_t IndexType;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v18;
  uint64_t v19;
  mlir::MLIRContext *v20;
  mlir::Region *v21;
  unsigned int v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  int64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  __int128 *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  char *v46;
  mlir::MLIRContext **v48;
  uint64_t DenseI32ArrayAttr;
  mlir::Region *v50;
  void *v51;
  int64_t v52;
  mlir::Region *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t DenseI64ArrayAttr;
  mlir::MLIRContext *v57[4];
  void *v58;
  uint64_t v59;
  _BYTE v60[256];
  const char *v61;
  int v62;
  int v63;
  __int16 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[128];
  void *__b;
  uint64_t v69;
  _BYTE v70[16];
  __int16 v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[32];
  void *v75;
  uint64_t v76;
  _BYTE v77[32];
  void *v78;
  uint64_t v79;
  _BYTE v80[32];
  void *v81;
  uint64_t v82;
  _QWORD v83[34];

  v83[32] = *MEMORY[0x1E0C80C00];
  v57[0] = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
  memset(&v57[1], 0, 24);
  IndexType = mlir::Builder::getIndexType(v57, v4);
  v81 = v83;
  v82 = 0x400000000;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 736))(a1, &v81, 1, 0, 0))
  {
    v10 = 0;
    goto LABEL_37;
  }
  v55 = 0;
  DenseI64ArrayAttr = 0;
  v54 = 0;
  v78 = v80;
  v79 = 0x100000000;
  v75 = v77;
  v76 = 0x100000000;
  v72 = v74;
  v73 = 0x100000000;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "in", 2))
  {
    __b = 0;
    if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v75, &v55, (uint64_t *)&__b, 0, 1))
    {
      if ((_DWORD)v76)
      {
        v6 = (char *)v75;
        v7 = 32 * v76;
        while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v6, IndexType, a2 + 16))
        {
          v6 += 32;
          v7 -= 32;
          if (!v7)
            goto LABEL_8;
        }
        goto LABEL_30;
      }
LABEL_8:
      v8 = v82;
      __b = v70;
      HIDWORD(v69) = 6;
      if (v82 < 7)
      {
        if ((_DWORD)v82)
          bzero(v70, 8 * v82);
        v9 = v70;
      }
      else
      {
        LODWORD(v69) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v82, 8);
        v9 = __b;
        bzero(__b, 8 * v8);
      }
      LODWORD(v69) = v8;
      DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(v57, (uint64_t)v9, v8);
      if (__b != v70)
        free(__b);
      __b = v70;
      HIDWORD(v69) = 6;
      if (v8 < 7)
      {
        if ((_DWORD)v8)
          memset_pattern16(v70, &unk_181233190, 8 * v8);
        v18 = v70;
      }
      else
      {
        LODWORD(v69) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v8, 8);
        v18 = __b;
        memset_pattern16(__b, &unk_181233190, 8 * v8);
      }
      LODWORD(v69) = v8;
      v54 = mlir::Builder::getDenseI64ArrayAttr(v57, (uint64_t)v18, v8);
      if (__b != v70)
        free(__b);
LABEL_52:
      __b = v70;
      v69 = 0x400000000;
      v65 = v67;
      v66 = 0x400000000;
      v19 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "shared_outs", 11))
      {
        if ((_DWORD)v66 == *(_DWORD *)(a2 + 72))
        {
          if (mlir::OpAsmParser::parseAssignmentList((uint64_t)a1)
            && (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(_QWORD *)a1 + 536))(a1, a2 + 64)
            && mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>((uint64_t)a1, (uint64_t *)&v65, a2 + 64, v19, a2 + 16))
          {
            goto LABEL_57;
          }
          v10 = 0;
        }
        else
        {
          v61 = "mismatch between out operands and types";
          v64 = 259;
          (*(void (**)(void **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v58, a1, v19, &v61);
          v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v58);
        }
LABEL_90:
        if (v65 != v67)
          free(v65);
        if (__b != v70)
          free(__b);
        goto LABEL_31;
      }
LABEL_57:
      v58 = v60;
      v59 = 0x400000000;
      v21 = (mlir::Region *)operator new(0x18uLL);
      *(_QWORD *)v21 = v21;
      *((_QWORD *)v21 + 1) = v21;
      *((_QWORD *)v21 + 2) = 0;
      v53 = v21;
      v22 = v82;
      if ((_DWORD)v82)
      {
        v23 = (char *)v81;
        v24 = (unint64_t)v82 << 6;
        v25 = (char *)v81;
        do
        {
          *((_QWORD *)v25 + 4) = mlir::Builder::getIndexType(v57, v20);
          v26 = (char *)v58;
          v27 = (__int128 *)v25;
          if (v59 >= HIDWORD(v59))
          {
            v32 = v59 + 1;
            if (v58 <= v25 && (char *)v58 + 64 * (unint64_t)v59 > v25)
            {
              v34 = v23 - (_BYTE *)v58;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v32, 64);
              v26 = (char *)v58;
              v27 = (__int128 *)((char *)v58 + v34);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v32, 64);
              v26 = (char *)v58;
              v27 = (__int128 *)v25;
            }
          }
          v28 = &v26[64 * (unint64_t)v59];
          v29 = *v27;
          v30 = v27[1];
          v31 = v27[3];
          *((_OWORD *)v28 + 2) = v27[2];
          *((_OWORD *)v28 + 3) = v31;
          *(_OWORD *)v28 = v29;
          *((_OWORD *)v28 + 1) = v30;
          v22 = v59 + 1;
          LODWORD(v59) = v59 + 1;
          v25 += 64;
          v23 += 64;
          v24 -= 64;
        }
        while (v24);
      }
      if ((_DWORD)v69)
      {
        v35 = 0;
        v36 = (char *)__b;
        v37 = (unint64_t)v69 << 6;
        v38 = (char *)__b;
        do
        {
          *((_QWORD *)v38 + 4) = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v35);
          v39 = (char *)v58;
          v40 = (__int128 *)v38;
          if (v22 >= HIDWORD(v59))
          {
            v45 = v22 + 1;
            v46 = (char *)v58 + 64 * (unint64_t)v22;
            if (v58 <= v38 && v46 > v38)
            {
              v52 = v36 - (_BYTE *)v58;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v45, 64);
              v39 = (char *)v58;
              v40 = (__int128 *)((char *)v58 + v52);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v45, 64);
              v39 = (char *)v58;
              v40 = (__int128 *)v38;
            }
          }
          v41 = &v39[64 * (unint64_t)v59];
          v42 = *v40;
          v43 = v40[1];
          v44 = v40[3];
          *((_OWORD *)v41 + 2) = v40[2];
          *((_OWORD *)v41 + 3) = v44;
          *(_OWORD *)v41 = v42;
          *((_OWORD *)v41 + 1) = v43;
          v22 = v59 + 1;
          LODWORD(v59) = v59 + 1;
          v38 += 64;
          v36 += 64;
          v35 += 8;
          v37 -= 64;
        }
        while (v37);
      }
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, mlir::Region *, void *, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v21, v58, v22, 0))
      {
        mlir::scf::ForallOp::ensureTerminator(v21, v57, *(_QWORD *)a2);
        mlir::OperationState::addRegion(a2, (unint64_t)&v53);
        if ((*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
        {
          mlir::OperationState::addAttribute((mlir::Attribute *)a2, (uint64_t)"staticLowerBound", 16, DenseI64ArrayAttr);
          mlir::OperationState::addAttribute((mlir::Attribute *)a2, (uint64_t)"staticUpperBound", 16, v55);
          mlir::OperationState::addAttribute((mlir::Attribute *)a2, (uint64_t)"staticStep", 10, v54);
          v48 = (mlir::MLIRContext **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
          v61 = (const char *)__PAIR64__(v76, v79);
          v62 = v73;
          v63 = v66;
          DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(v48, (uint64_t)&v61, 4);
          mlir::OperationState::addAttribute((mlir::Attribute *)a2, (uint64_t)"operandSegmentSizes", 19, DenseI32ArrayAttr);
          v10 = 1;
        }
        else
        {
          v10 = 0;
        }
      }
      else
      {
        v10 = 0;
      }
      v50 = v53;
      v53 = 0;
      if (v50)
      {
        mlir::Region::~Region(v50);
        operator delete(v51);
      }
      if (v58 != v60)
        free(v58);
      goto LABEL_90;
    }
  }
  else if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 136))(a1))
  {
    __b = 0;
    if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v78, &DenseI64ArrayAttr, (uint64_t *)&__b, 0, 1))
    {
      if ((_DWORD)v79)
      {
        v11 = (char *)v78;
        v12 = 32 * v79;
        while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v11, IndexType, a2 + 16))
        {
          v11 += 32;
          v12 -= 32;
          if (!v12)
            goto LABEL_17;
        }
        goto LABEL_30;
      }
LABEL_17:
      v71 = 257;
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "to", 2, &__b))
      {
        __b = 0;
        if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v75, &v55, (uint64_t *)&__b, 0, 1))
        {
          if ((_DWORD)v76)
          {
            v13 = (char *)v75;
            v14 = 32 * v76;
            while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v13, IndexType, a2 + 16))
            {
              v13 += 32;
              v14 -= 32;
              if (!v14)
                goto LABEL_23;
            }
            goto LABEL_30;
          }
LABEL_23:
          v71 = 257;
          if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "step", 4, &__b))
          {
            __b = 0;
            if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v72, &v54, (uint64_t *)&__b, 0, 1))
            {
              if ((_DWORD)v73)
              {
                v15 = (char *)v72;
                v16 = 32 * v73;
                while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v15, IndexType, a2 + 16))
                {
                  v15 += 32;
                  v16 -= 32;
                  if (!v16)
                    goto LABEL_52;
                }
                goto LABEL_30;
              }
              goto LABEL_52;
            }
          }
        }
      }
    }
  }
LABEL_30:
  v10 = 0;
LABEL_31:
  if (v72 != v74)
    free(v72);
  if (v75 != v77)
    free(v75);
  if (v78 != v80)
    free(v78);
LABEL_37:
  if (v81 != v83)
    free(v81);
  return v10;
}

void mlir::scf::ForallOp::ensureTerminator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  mlir::GenericProgramPoint **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  mlir::impl::ensureRegionTerminator(a1, (uint64_t)a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::scf::ForallOp>::buildTerminator);
  v5 = a1[1];
  if (v5)
    v6 = (mlir::GenericProgramPoint **)(v5 - 8);
  else
    v6 = 0;
  mlir::Block::getTerminator(v6);
  if (*(_UNKNOWN **)(*(_QWORD *)(v7 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::InParallelOp,void>::id)
    v8 = v7;
  else
    v8 = 0;
  v9 = (_QWORD *)(((v8
                  + 16 * (((unint64_t)*(unsigned int *)(v8 + 44) >> 23) & 1)
                  + (((unint64_t)*(unsigned int *)(v8 + 44) >> 21) & 0x7F8)
                  + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(v8 + 40));
  if ((_QWORD *)*v9 == v9)
  {
    mlir::ValueRange::ValueRange(v10, 0, 0);
    mlir::OpBuilder::createBlock(a2, (uint64_t)v9, 0, v10[0], v10[1], 0, 0);
  }
}

void mlir::scf::ForallOp::build(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, char a12, void (*a13)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t), uint64_t a14)
{
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t DenseI64ArrayAttr;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t DenseI32ArrayAttr;
  mlir::StringAttr *Context;
  uint64_t v34;
  _QWORD *v35;
  _OWORD *v36;
  mlir::MLIRContext *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t IndexType;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  int64x2_t v44;
  int64x2_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  int64x2_t v51;
  int64x2_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int64x2_t v57;
  int64x2_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  void *v63;
  __int128 v64;
  unint64_t v65[2];
  unint64_t v66[2];
  void *v67;
  uint64_t v68;
  _QWORD v69[6];
  void *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78[2];
  unint64_t v79[2];
  _DWORD v80[4];
  unint64_t v81[2];
  unint64_t v82[2];
  unint64_t v83[2];
  void *v84;
  uint64_t v85;
  _BYTE v86[48];
  void *v87;
  uint64_t v88;
  _BYTE v89[48];
  void *v90;
  uint64_t v91;
  _BYTE v92[48];
  void *v93;
  uint64_t v94;
  _BYTE v95[48];
  _BYTE *v96;
  uint64_t v97;
  _BYTE v98[48];
  _QWORD *v99;
  uint64_t v100;
  _QWORD v101[8];

  v101[6] = *MEMORY[0x1E0C80C00];
  v99 = v101;
  v100 = 0x600000000;
  v96 = v98;
  v97 = 0x600000000;
  v93 = v95;
  v94 = 0x600000000;
  v90 = v92;
  v91 = 0x600000000;
  v87 = v89;
  v88 = 0x600000000;
  v84 = v86;
  v85 = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a3, a4, (uint64_t)&v90, (uint64_t)&v99);
  mlir::dispatchIndexOpFoldResults(a5, a6, (uint64_t)&v87, (uint64_t)&v96);
  mlir::dispatchIndexOpFoldResults(a7, a8, (uint64_t)&v84, (uint64_t)&v93);
  mlir::ValueRange::ValueRange(v83, (uint64_t)v90, v91);
  mlir::OperationState::addOperands(a2, v83[0], v83[1]);
  mlir::ValueRange::ValueRange(v82, (uint64_t)v87, v88);
  mlir::OperationState::addOperands(a2, v82[0], v82[1]);
  mlir::ValueRange::ValueRange(v81, (uint64_t)v84, v85);
  mlir::OperationState::addOperands(a2, v81[0], v81[1]);
  mlir::OperationState::addOperands(a2, a9, a10);
  mlir::TypeRange::TypeRange((unint64_t *)&v70, a9, a10);
  v22 = v70;
  v21 = v71;
  v23 = *(unsigned int *)(a2 + 72);
  if (v71 + v23 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v71 + v23, 8);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  if (v21)
  {
    v24 = 0;
    v25 = *(_QWORD *)(a2 + 64) + 8 * v23;
    do
    {
      *(_QWORD *)(v25 + 8 * v24) = mlir::TypeRange::dereference_iterator((uint64_t)v22, v24);
      ++v24;
    }
    while (v21 != v24);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v23 + v21;
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v99, v100);
  mlir::NamedAttribute::NamedAttribute(&v70, v26, DenseI64ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v70, v71);
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24);
  v29 = mlir::Builder::getDenseI64ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v96, v97);
  mlir::NamedAttribute::NamedAttribute(&v70, v28, v29);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v70, v71);
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16);
  v31 = mlir::Builder::getDenseI64ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v93, v94);
  mlir::NamedAttribute::NamedAttribute(&v70, v30, v31);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v70, v71);
  v80[0] = v91;
  v80[1] = v88;
  v80[2] = v85;
  v80[3] = a10;
  DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v80, 4);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  LOWORD(v74) = 261;
  v70 = "operandSegmentSizes";
  v71 = 19;
  v34 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v70);
  mlir::NamedAttribute::NamedAttribute(&v67, v34, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v67, v68);
  if (a12)
  {
    mlir::NamedAttribute::NamedAttribute(&v70, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a11);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v70, v71);
  }
  v35 = (_QWORD *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v36 = (_OWORD *)(a1 + 16);
  v64 = *(_OWORD *)(a1 + 16);
  mlir::ValueRange::ValueRange(v79, 0, 0);
  mlir::OpBuilder::createBlock((_QWORD *)a1, (uint64_t)v35, 0, v79[0], v79[1], 0, 0);
  v38 = v35[1];
  if (v38)
    v39 = (_QWORD *)(v38 - 8);
  else
    v39 = 0;
  IndexType = mlir::Builder::getIndexType((mlir::IndexType **)a1, v37);
  v41 = IndexType;
  v70 = &v72;
  HIDWORD(v71) = 6;
  if (a4 < 7)
  {
    if (a4)
    {
      v72 = IndexType;
      if (a4 != 1)
      {
        v73 = IndexType;
        if (a4 != 2)
        {
          v74 = IndexType;
          if (a4 != 3)
          {
            v75 = IndexType;
            if (a4 != 4)
            {
              v76 = IndexType;
              if (a4 != 5)
                v77 = IndexType;
            }
          }
        }
      }
    }
  }
  else
  {
    LODWORD(v71) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, &v72, a4, 8);
    v42 = (unint64_t *)((char *)v70 + 8 * (a4 & 0xFFFFFFFFFFFFFFFCLL));
    v43 = a4 & 3;
    v44 = vdupq_n_s64(v41);
    v45 = (int64x2_t *)((char *)v70 + 16);
    v46 = a4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v45[-1] = v44;
      *v45 = v44;
      v45 += 2;
      v46 -= 4;
    }
    while (v46);
    if (a4 != (a4 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        *v42++ = v41;
        --v43;
      }
      while (v43);
    }
  }
  LODWORD(v71) = a4;
  mlir::ValueRange::ValueRange(v78, (uint64_t)v70, a4);
  v47 = v100;
  v67 = v69;
  v68 = 0x600000000;
  v48 = *(_QWORD *)a2;
  if (v100 < 7)
  {
    if ((_DWORD)v100)
    {
      v69[0] = *(_QWORD *)a2;
      if ((_DWORD)v100 != 1)
      {
        v69[1] = v48;
        if ((_DWORD)v100 != 2)
        {
          v69[2] = v48;
          if ((_DWORD)v100 != 3)
          {
            v69[3] = v48;
            if ((_DWORD)v100 != 4)
            {
              v69[4] = v48;
              if ((_DWORD)v100 != 5)
                v69[5] = v48;
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, v100, 8);
    v49 = (unint64_t *)((char *)v67 + 8 * (v47 & 0xFFFFFFFC));
    v50 = v47 & 3;
    v51 = vdupq_n_s64(v48);
    v52 = (int64x2_t *)((char *)v67 + 16);
    v53 = v47 & 0xFFFFFFFC;
    do
    {
      v52[-1] = v51;
      *v52 = v51;
      v52 += 2;
      v53 -= 4;
    }
    while (v53);
    if ((v47 & 0xFFFFFFFC) != v47)
    {
      do
      {
        *v49++ = v48;
        --v50;
      }
      while (v50);
    }
  }
  LODWORD(v68) = v47;
  mlir::Block::addArguments(v39, v78[0], v78[1], (uint64_t)v67, v47);
  if (v67 != v69)
    free(v67);
  if (v70 != &v72)
    free(v70);
  mlir::TypeRange::TypeRange(v66, a9, a10);
  v70 = &v72;
  v71 = 0x600000000;
  v54 = *(_QWORD *)a2;
  if (a10 < 7)
  {
    if (a10)
    {
      v72 = *(_QWORD *)a2;
      if (a10 != 1)
      {
        v73 = v54;
        if (a10 != 2)
        {
          v74 = v54;
          if (a10 != 3)
          {
            v75 = v54;
            if (a10 != 4)
            {
              v76 = v54;
              if (a10 != 5)
                v77 = v54;
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, &v72, a10, 8);
    v55 = (unint64_t *)((char *)v70 + 8 * (a10 & 0xFFFFFFFFFFFFFFFCLL));
    v56 = a10 & 3;
    v57 = vdupq_n_s64(v54);
    v58 = (int64x2_t *)((char *)v70 + 16);
    v59 = a10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v58[-1] = v57;
      *v58 = v57;
      v58 += 2;
      v59 -= 4;
    }
    while (v59);
    if (a10 != (a10 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        *v55++ = v54;
        --v56;
      }
      while (v56);
    }
  }
  LODWORD(v71) = a10;
  mlir::Block::addArguments(v39, v66[0], v66[1], (uint64_t)v70, a10);
  if (v70 != &v72)
    free(v70);
  v60 = v39[5];
  *(_QWORD *)(a1 + 16) = v39;
  *(_QWORD *)(a1 + 24) = v60;
  v61 = *(_QWORD *)a2;
  if (a13)
  {
    mlir::ValueRange::ValueRange(v65, v39[6], (uint64_t)(v39[7] - v39[6]) >> 3);
    a13(a14, a1, v61, v65[0], v65[1]);
    v62 = v64;
    if ((_QWORD)v64)
      goto LABEL_59;
  }
  else
  {
    mlir::scf::ForallOp::ensureTerminator(v35, (_QWORD *)a1, v61);
    v62 = v64;
    if ((_QWORD)v64)
    {
LABEL_59:
      *v36 = v62;
      v63 = v84;
      if (v84 == v86)
        goto LABEL_61;
      goto LABEL_60;
    }
  }
  *(_QWORD *)v36 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v63 = v84;
  if (v84 != v86)
LABEL_60:
    free(v63);
LABEL_61:
  if (v87 != v89)
    free(v87);
  if (v90 != v92)
    free(v90);
  if (v93 != v95)
    free(v93);
  if (v96 != v98)
    free(v96);
  if (v99 != v101)
    free(v99);
}

uint64_t mlir::scf::ForallOp::getSingleInductionVar(mlir::scf::ForallOp *this)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13[3];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v13[0] = *(_QWORD *)(v2 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v13);
  result = 0;
  if (v4 == 1)
  {
    v5 = *(unsigned int *)(*(_QWORD *)this + 44);
    v6 = *(_QWORD *)this + 16 * ((v5 >> 23) & 1) + 64;
    v7 = *(_QWORD *)(((v6 + ((v5 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                   + 8);
    if (v7)
      v8 = v7 - 8;
    else
      v8 = 0;
    v9 = *(_QWORD *)(v8 + 48);
    v10 = (*(_QWORD *)(v8 + 56) - v9) >> 3;
    if (!BYTE3(v5))
      v6 = 0;
    v13[0] = *(_QWORD *)(v6 + 8);
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v13);
    if (v10 >= v11)
      v12 = v11;
    else
      v12 = v10;
    mlir::ValueRange::ValueRange(v13, v9, v12);
    return mlir::ValueRange::dereference_iterator(v13, 0);
  }
  return result;
}

void mlir::scf::ForallOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  const char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  const char *v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  unint64_t v141;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.dim", 10, (__int16)v140, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E15840;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::DimOfForallOp]";
  v141 = 86;
  v9 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v9)
    v10 = v9;
  else
    v10 = v141;
  v11 = &v140[v10];
  v12 = v141 - v10;
  if (v141 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v141 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_154;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_155;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_158;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_158:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"scf.forall", 10, (__int16)v140, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E1A200;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldTensorCastOfOutputIntoForallOp]";
  v141 = 107;
  v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v43)
    v44 = v43;
  else
    v44 = v141;
  v45 = &v140[v44];
  v46 = v141 - v44;
  if (v141 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v141 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_154;
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      goto LABEL_155;
    v55 = (char *)operator new(8 * v54);
    v56 = &v55[8 * v51];
    v57 = &v55[8 * v54];
    *(_QWORD *)v56 = v38;
    v42 = (uint64_t)(v56 + 8);
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
  }
  else
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_159;
      }
      v60 = (v59 >> 3) + 1;
      v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v41[-v61];
      v56 -= v61;
      v63 = &v55[8 * v51 - 16];
      v64 = v41 - 16;
      v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_159:
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      v41 = (char *)a1[1];
      v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        v71 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        v70 = v71;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
  v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"scf.forall", 10, (__int16)v140, a2, 0, 0);
  *(_QWORD *)v72 = off_1E0E19E88;
  if (*((_QWORD *)v72 + 9))
  {
    v73 = v72[22];
    if (v73 <= v72[23])
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    v75 = (char *)a1[2];
    v74 = a1[3];
    if ((unint64_t)v75 < v74)
      goto LABEL_80;
    goto LABEL_91;
  }
  v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ForallOpControlOperandsFolder]";
  v141 = 102;
  v77 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v77)
    v78 = v77;
  else
    v78 = v141;
  v79 = &v140[v78];
  v80 = v141 - v78;
  if (v141 - v78 >= 0x12)
    v81 = 18;
  else
    v81 = v141 - v78;
  v82 = &v79[v81];
  v83 = v80 - v81;
  if (v83 >= v83 - 1)
    --v83;
  *((_QWORD *)v72 + 8) = v82;
  *((_QWORD *)v72 + 9) = v83;
  v73 = v72[22];
  if (v73 > v72[23])
    goto LABEL_90;
LABEL_79:
  v72[22] = v73;
  v75 = (char *)a1[2];
  v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(_QWORD *)v75 = v72;
    v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v84 = (char *)a1[1];
  v85 = (v75 - v84) >> 3;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
    goto LABEL_154;
  v87 = v74 - (_QWORD)v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (v88)
  {
    if (v88 >> 61)
      goto LABEL_155;
    v89 = (char *)operator new(8 * v88);
    v90 = &v89[8 * v85];
    v91 = &v89[8 * v88];
    *(_QWORD *)v90 = v72;
    v76 = (uint64_t)(v90 + 8);
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
      goto LABEL_100;
  }
  else
  {
    v89 = 0;
    v90 = (char *)(8 * v85);
    v91 = 0;
    *(_QWORD *)(8 * v85) = v72;
    v76 = 8 * v85 + 8;
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_160;
      }
      v94 = (v93 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v96 = &v75[-v95];
      v90 -= v95;
      v97 = &v89[8 * v85 - 16];
      v98 = v75 - 16;
      v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_160:
        do
        {
          v102 = *((_QWORD *)v75 - 1);
          v75 -= 8;
          *(_QWORD *)v75 = 0;
          *((_QWORD *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      v75 = (char *)a1[1];
      v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        v105 = *((_QWORD *)v103 - 1);
        v103 -= 8;
        v104 = v105;
        *(_QWORD *)v103 = 0;
        if (v105)
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75)
    operator delete(v75);
LABEL_115:
  a1[2] = v76;
  v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"scf.forall", 10, (__int16)v140, a2, 0, 0);
  *(_QWORD *)v106 = off_1E0E1A460;
  if (*((_QWORD *)v106 + 9))
  {
    v107 = v106[22];
    if (v107 <= v106[23])
      goto LABEL_117;
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    v109 = (char *)a1[2];
    v108 = a1[3];
    if ((unint64_t)v109 < v108)
      goto LABEL_118;
    goto LABEL_129;
  }
  v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ForallOpSingleOrZeroIterationDimsFolder]";
  v141 = 112;
  v111 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v111)
    v112 = v111;
  else
    v112 = v141;
  v113 = &v140[v112];
  v114 = v141 - v112;
  if (v141 - v112 >= 0x12)
    v115 = 18;
  else
    v115 = v141 - v112;
  v116 = &v113[v115];
  v117 = v114 - v115;
  if (v117 >= v117 - 1)
    --v117;
  *((_QWORD *)v106 + 8) = v116;
  *((_QWORD *)v106 + 9) = v117;
  v107 = v106[22];
  if (v107 > v106[23])
    goto LABEL_128;
LABEL_117:
  v106[22] = v107;
  v109 = (char *)a1[2];
  v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(_QWORD *)v109 = v106;
    v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  v118 = (char *)a1[1];
  v119 = (v109 - v118) >> 3;
  v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61)
LABEL_154:
    abort();
  v121 = v108 - (_QWORD)v118;
  if (v121 >> 2 > v120)
    v120 = v121 >> 2;
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
    v122 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v122 = v120;
  if (!v122)
  {
    v123 = 0;
    v124 = (char *)(8 * v119);
    v125 = 0;
    *(_QWORD *)(8 * v119) = v106;
    v110 = 8 * v119 + 8;
    v126 = (char *)(v109 - v118);
    if (v109 != v118)
      goto LABEL_138;
    goto LABEL_150;
  }
  if (v122 >> 61)
LABEL_155:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v123 = (char *)operator new(8 * v122);
  v124 = &v123[8 * v119];
  v125 = &v123[8 * v122];
  *(_QWORD *)v124 = v106;
  v110 = (uint64_t)(v124 + 8);
  v126 = (char *)(v109 - v118);
  if (v109 != v118)
  {
LABEL_138:
    v127 = (unint64_t)(v126 - 8);
    if (v127 < 0x78
      || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
      && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
    {
      goto LABEL_161;
    }
    v128 = (v127 >> 3) + 1;
    v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
    v130 = &v109[-v129];
    v124 -= v129;
    v131 = &v123[8 * v119 - 16];
    v132 = v109 - 16;
    v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v135 = *((_OWORD *)v132 - 1);
      v134 = *(_OWORD *)v132;
      *((_OWORD *)v132 - 1) = 0uLL;
      *(_OWORD *)v132 = 0uLL;
      *((_OWORD *)v131 - 1) = v135;
      *(_OWORD *)v131 = v134;
      v131 -= 32;
      v132 -= 32;
      v133 -= 4;
    }
    while (v133);
    v109 = v130;
    if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_161:
      do
      {
        v136 = *((_QWORD *)v109 - 1);
        v109 -= 8;
        *(_QWORD *)v109 = 0;
        *((_QWORD *)v124 - 1) = v136;
        v124 -= 8;
      }
      while (v109 != v118);
    }
    v109 = (char *)a1[1];
    v137 = (char *)a1[2];
    a1[1] = v124;
    a1[2] = v110;
    a1[3] = v125;
    while (v137 != v109)
    {
      v139 = *((_QWORD *)v137 - 1);
      v137 -= 8;
      v138 = v139;
      *(_QWORD *)v137 = 0;
      if (v139)
        (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
    }
    goto LABEL_151;
  }
LABEL_150:
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109)
    operator delete(v109);
LABEL_153:
  a1[2] = v110;
}

__n128 mlir::scf::ForallOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  __n128 *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  __n128 result;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  BOOL v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(*(_QWORD *)a1 + 44);
  if ((v4 & 0x7FFFFF) != 0)
    v5 = ((*(_QWORD *)a1 + 16 * ((v4 >> 23) & 1) + ((v4 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(*(_QWORD *)a1 + 40);
  else
    v5 = 0;
  v22 = v5;
  v6 = (__n128 *)&v22;
  mlir::ValueRange::ValueRange(v23, 0, 0);
  v7 = *(unsigned int *)(a3 + 8);
  v8 = *(_QWORD *)a3;
  if (v7 < *(_DWORD *)(a3 + 12))
    goto LABEL_5;
  v16 = v7 + 1;
  v17 = v8 + 24 * v7 > (unint64_t)&v22;
  if (v8 > (unint64_t)&v22 || !v17)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
    v8 = *(_QWORD *)a3;
LABEL_5:
    v9 = (char *)&v22;
    goto LABEL_6;
  }
  v20 = (char *)&v23[-1] - v8;
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
  v8 = *(_QWORD *)a3;
  v9 = &v20[*(_QWORD *)a3];
LABEL_6:
  v10 = v8 + 24 * *(unsigned int *)(a3 + 8);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a3 + 8);
  v22 = 0;
  mlir::ValueRange::ValueRange(v23, 0, 0);
  v12 = *(unsigned int *)(a3 + 8);
  v13 = *(_QWORD *)a3;
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    v18 = v12 + 1;
    v19 = v13 + 24 * v12 > (unint64_t)&v22;
    if (v13 <= (unint64_t)&v22 && v19)
    {
      v21 = (char *)&v23[-1] - v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v18, 24);
      v13 = *(_QWORD *)a3;
      v6 = (__n128 *)&v21[*(_QWORD *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v18, 24);
      v13 = *(_QWORD *)a3;
      v6 = (__n128 *)&v22;
    }
  }
  v14 = (__n128 *)(v13 + 24 * *(unsigned int *)(a3 + 8));
  result = *v6;
  v14[1].n128_u64[0] = v6[1].n128_u64[0];
  *v14 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t mlir::scf::InParallelOp::verify(uint64_t **this)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t Dest;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  const void ***v33;
  char *v34;
  char *v35;
  __int128 v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  _QWORD **v43;
  _QWORD **v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  unint64_t v50;
  int64_t v51;
  const void **v52;
  __int16 v53;
  const void **v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t *v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD **v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)(*this)[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp
      && *(_QWORD *)(*(_QWORD *)(ParentOp + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id)
    {
      v14 = *(_QWORD *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                                                   + 8]
                        + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                        + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)*this + 10)
                      + 8);
      if (v14)
        v15 = v14 - 8;
      else
        v15 = 0;
      v16 = (mlir::GenericProgramPoint *)(v15 + 32);
      v17 = *(mlir::GenericProgramPoint **)(v15 + 40);
      if (v17 == (mlir::GenericProgramPoint *)(v15 + 32))
        return 1;
      v18 = ParentOp;
      v19 = ParentOp + 64;
      while (1)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v17);
        if (*(_UNKNOWN **)(v20[6] + 16) != &mlir::detail::TypeIDResolver<mlir::tensor::ParallelInsertSliceOp,void>::id)
          break;
        v21 = v20;
        v58 = v20;
        Dest = mlir::tensor::ParallelInsertSliceOp::getDest((mlir::tensor::ParallelInsertSliceOp *)&v58);
        v23 = *(unsigned int *)(v18 + 44);
        v24 = *(_QWORD *)(((v19 + 16 * ((v23 >> 23) & 1) + ((v23 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(v18 + 40)
                        + 8);
        if (v24)
          v25 = v24 - 8;
        else
          v25 = 0;
        v26 = *(_QWORD *)(v25 + 48);
        v27 = *(_QWORD *)(v25 + 56) - v26;
        v28 = v27 >> 3;
        if (HIBYTE(*(_DWORD *)(v18 + 44)))
          v29 = v19 + 16 * ((v23 >> 23) & 1);
        else
          v29 = 0;
        v58 = *(uint64_t **)(v29 + 8);
        mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v58);
        v31 = (_QWORD *)(v26 + 8 * v30);
        if (v28 != v30)
        {
          v32 = 8 * v28 - 8 * v30;
          v31 = (_QWORD *)(v26 + 8 * v30);
          while (*v31 != Dest)
          {
            ++v31;
            v32 -= 8;
            if (!v32)
            {
              v31 = (_QWORD *)(v26 + (v27 & 0xFFFFFFFFFFFFFFF8));
              break;
            }
          }
        }
        if (v28 - v30 == ((uint64_t)v31 - v26 + -8 * v30) >> 3)
        {
          v54 = (const void **)"may only insert into an output block argument";
          v57 = 259;
          mlir::Operation::emitOpError(v21, &v54, (uint64_t)&v58);
          v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
          if (v58)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
          if (!v68)
            return v5;
          v43 = (_QWORD **)__p;
          if (__p)
          {
            v44 = v67;
            v45 = __p;
            if (v67 != __p)
            {
              do
                v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
              while (v44 != v43);
              v45 = __p;
            }
            v67 = v43;
            operator delete(v45);
          }
          v9 = v64;
          if (!v64)
            goto LABEL_74;
          v46 = v65;
          v11 = v64;
          if (v65 == v64)
            goto LABEL_73;
          do
          {
            v48 = (void *)*--v46;
            v47 = v48;
            *v46 = 0;
            if (v48)
              operator delete[](v47);
          }
          while (v46 != v9);
          goto LABEL_72;
        }
        v17 = (mlir::GenericProgramPoint *)*((_QWORD *)v17 + 1);
        if (v17 == v16)
          return 1;
      }
      v52 = (const void **)"expected only ";
      v53 = 259;
      mlir::OpState::emitOpError(this, &v52, (uint64_t)&v58);
      if (v58)
      {
        v57 = 262;
        v54 = (const void **)"tensor.parallel_insert_slice";
        v55 = 28;
        mlir::Diagnostic::operator<<((uint64_t)&v59, &v54);
        if (v58)
        {
          LODWORD(v54) = 3;
          v55 = (uint64_t)" ops";
          v56 = 4;
          v33 = &v54;
          v34 = (char *)v60;
          if (v61 >= v62)
          {
            v50 = v61 + 1;
            if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
            {
              v51 = (char *)&v54 - (_BYTE *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
              v34 = (char *)v60;
              v33 = (const void ***)((char *)v60 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
              v33 = &v54;
              v34 = (char *)v60;
            }
          }
          v35 = &v34[24 * v61];
          v36 = *(_OWORD *)v33;
          *((_QWORD *)v35 + 2) = v33[2];
          *(_OWORD *)v35 = v36;
          ++v61;
        }
      }
      v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
      if (v58)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
      if (!v68)
        return v5;
      v37 = (_QWORD **)__p;
      if (__p)
      {
        v38 = v67;
        v39 = __p;
        if (v67 != __p)
        {
          do
            v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
          while (v38 != v37);
          v39 = __p;
        }
        v67 = v37;
        operator delete(v39);
      }
      v9 = v64;
      if (!v64)
        goto LABEL_74;
      v40 = v65;
      v11 = v64;
      if (v65 == v64)
        goto LABEL_73;
      do
      {
        v42 = (void *)*--v40;
        v41 = v42;
        *v40 = 0;
        if (v42)
          operator delete[](v41);
      }
      while (v40 != v9);
      goto LABEL_72;
    }
  }
  v54 = (const void **)"expected forall op parent";
  v57 = 259;
  mlir::OpState::emitOpError(this, &v54, (uint64_t)&v58);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
  if (v58)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
  if (v68)
  {
    v6 = (_QWORD **)__p;
    if (__p)
    {
      v7 = v67;
      v8 = __p;
      if (v67 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v67 = v6;
      operator delete(v8);
    }
    v9 = v64;
    if (!v64)
      goto LABEL_74;
    v10 = v65;
    v11 = v64;
    if (v65 == v64)
    {
LABEL_73:
      v65 = v9;
      operator delete(v11);
LABEL_74:
      if (v60 != v63)
        free(v60);
      return v5;
    }
    do
    {
      v13 = (void *)*--v10;
      v12 = v13;
      *v10 = 0;
      if (v13)
        operator delete[](v12);
    }
    while (v10 != v9);
LABEL_72:
    v11 = v64;
    goto LABEL_73;
  }
  return v5;
}

uint64_t mlir::scf::InParallelOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v9;
  unint64_t AttrDictionary;

  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), 0, 0, 0);
  v6 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v9, 0, 0);
}

BOOL mlir::scf::InParallelOp::parse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  mlir::Region *v5;
  _BOOL8 v6;
  void *v7;
  void *v9;
  _QWORD v10[4];
  mlir::Region *v11;
  unint64_t v12[2];
  void *v13;
  uint64_t v14;
  _QWORD v15[65];

  v15[64] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v13 = v15;
  v14 = 0x800000000;
  v5 = (mlir::Region *)operator new(0x18uLL);
  *(_QWORD *)v5 = v5;
  *((_QWORD *)v5 + 1) = v5;
  *((_QWORD *)v5 + 2) = 0;
  v11 = v5;
  if (!(*(unsigned __int8 (**)(uint64_t, mlir::Region *, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v5, v15, 0, 0))
  {
    v6 = 0;
    v11 = 0;
    goto LABEL_9;
  }
  if (*(mlir::Region **)v5 == v5)
  {
    v10[0] = *v4;
    memset(&v10[1], 0, 24);
    mlir::ValueRange::ValueRange(v12, 0, 0);
    mlir::OpBuilder::createBlock(v10, (uint64_t)v5, 0, v12[0], v12[1], 0, 0);
  }
  mlir::OperationState::addRegion(a2, (unint64_t)&v11);
  v6 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112) != 0;
  v5 = v11;
  v11 = 0;
  if (v5)
  {
LABEL_9:
    mlir::Region::~Region(v5);
    operator delete(v9);
    v7 = v13;
    if (v13 == v15)
      return v6;
    goto LABEL_6;
  }
  v7 = v13;
  if (v13 != v15)
LABEL_6:
    free(v7);
  return v6;
}

uint64_t mlir::scf::IfOp::thenBlock(mlir::scf::IfOp *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(((*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)this + 40));
  if (v1)
    return v1 - 8;
  else
    return 0;
}

uint64_t mlir::scf::IfOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18[2];
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a4 + 32))
    return 0;
  v6 = (_QWORD *)mlir::RegionRange::dereference_iterator((_QWORD *)(a4 + 24), 0);
  if ((_QWORD *)*v6 == v6)
    return 0;
  v7 = v6[1];
  v8 = v7 ? v7 - 8 : 0;
  v9 = *(mlir::GenericProgramPoint **)(v8 + 32);
  if (v9 == (mlir::GenericProgramPoint *)(v8 + 32))
    return 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(v9);
  if (!v10
    || *(_QWORD *)(*(_QWORD *)(v10 + 48) + 16) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
  {
    return 0;
  }
  if ((*(_BYTE *)(v10 + 46) & 0x80) != 0)
  {
    v13 = *(_QWORD *)(v10 + 72);
    v14 = *(unsigned int *)(v10 + 68);
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v19 = v13;
  v20 = v14;
  mlir::OperandRange::getTypes(&v19, &v15);
  mlir::ValueRange::ValueRange((unint64_t *)&v19, v15 + 32 * v16, v17 - v16);
  mlir::TypeRange::TypeRange(v18, v19, v20);
  llvm::SmallVectorImpl<mlir::Type>::insert<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,void>(a5, *(_QWORD *)a5 + 8 * *(unsigned int *)(a5 + 8), v18[0], 0, v18[0], v18[1]);
  return 1;
}

unint64_t *llvm::SmallVectorImpl<mlir::Type>::insert<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t *v23;
  BOOL v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t *v42;

  v8 = a4;
  v11 = *(_QWORD *)a1;
  v12 = (a2 - *(_QWORD *)a1) >> 3;
  v14 = *(unsigned int *)(a1 + 8);
  v13 = *(unsigned int *)(a1 + 12);
  v15 = *(_DWORD *)(a1 + 8);
  v16 = a6 - a4;
  v17 = a6 - a4 + v14;
  if (*(_QWORD *)a1 + 8 * v14 != a2)
  {
    if (v17 > v13)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
      v11 = *(_QWORD *)a1;
      v14 = *(unsigned int *)(a1 + 8);
      v15 = *(_DWORD *)(a1 + 8);
    }
    v18 = (unint64_t *)(v11 + 8 * v12);
    v19 = v12;
    v20 = (unint64_t *)(v11 + 8 * v14);
    v21 = v20 - v18;
    if (v21 < v16)
    {
      v22 = v15 + v16;
      *(_DWORD *)(a1 + 8) = v22;
      if (v19 != v14)
      {
        memcpy((void *)(v11 + 8 * v22 - 8 * v21), v18, (char *)v20 - (char *)v18);
        v23 = v18;
        do
        {
          *v23++ = mlir::TypeRange::dereference_iterator(a3, v8++);
          --v21;
        }
        while (v21);
      }
      if (a3 != a5 || v8 != a6)
      {
        if (a3 != a5)
        {
          while (1)
            *v20++ = mlir::TypeRange::dereference_iterator(a3, v8++);
        }
        do
          *v20++ = mlir::TypeRange::dereference_iterator(a3, v8++);
        while (a6 != v8);
      }
      return v18;
    }
    v26 = 8 * v16;
    v27 = v14 + ((uint64_t)(8 * v16) >> 3);
    v28 = v14;
    if (v27 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v27, 8);
      v28 = *(unsigned int *)(a1 + 8);
      v15 = *(_DWORD *)(a1 + 8);
    }
    v29 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    if (a6 == v8)
      goto LABEL_33;
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    v31 = 8 * a6;
    v32 = 8 * a6 - 8 * v8 - 8;
    if (v32 >= 0x98)
    {
      v34 = 8 * v28 + *(_QWORD *)a1;
      v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v31 - (v11 + 8 * (v8 + v14)) + v34) >= 0x20)
      {
        v35 = (v32 >> 3) + 1;
        v36 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        v30 = (_QWORD *)((char *)v30 + v36 * 8);
        v33 = &v29[v36];
        v37 = (__int128 *)(8 * v8 + 8 * v14 - v31 + v11 + 16);
        v38 = (_OWORD *)(v34 + 16);
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_33;
      }
    }
    else
    {
      v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v41 = *v33++;
      *v30++ = v41;
    }
    while (v33 != v20);
LABEL_33:
    *(_DWORD *)(a1 + 8) = v15 + v16;
    if (v29 != v18)
      memmove(&v18[(unint64_t)v26 / 8], v18, (char *)&v20[v26 / 0xFFFFFFFFFFFFFFF8] - (char *)v18);
    if (a3 != a5 || a6 != v8)
    {
      if (a3 != a5)
      {
        while (1)
          *v18++ = mlir::TypeRange::dereference_iterator(a3, v8++);
      }
      v42 = v18;
      do
        *v42++ = mlir::TypeRange::dereference_iterator(a3, v8++);
      while (a6 != v8);
    }
    return v18;
  }
  if (v17 > v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
    v15 = *(_DWORD *)(a1 + 8);
    v11 = *(_QWORD *)a1;
  }
  v24 = a3 != a5;
  if (a6 != v8 || a3 != a5)
  {
    v25 = (unint64_t *)(v11 + 8 * v15);
    if (v24)
    {
      while (1)
        *v25++ = mlir::TypeRange::dereference_iterator(a3, v8++);
    }
    do
      *v25++ = mlir::TypeRange::dereference_iterator(a3, v8++);
    while (a6 != v8);
    v15 = *(_DWORD *)(a1 + 8);
    v11 = *(_QWORD *)a1;
  }
  *(_DWORD *)(a1 + 8) = v15 + v16;
  return (unint64_t *)(v11 + 8 * v12);
}

_OWORD *mlir::scf::IfOp::build(_QWORD *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::scf::IfOp::build(a1, a2, a3, a4, a5, 0, 0);
}

_OWORD *mlir::scf::IfOp::build(_QWORD *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *result;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25[2];
  unint64_t v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v24 = a5;
  v13 = a2 + 16;
  v14 = a2[18];
  if (a4 + v14 > (unint64_t)a2[19])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, a2 + 20, a4 + v14, 8);
    LODWORD(v14) = a2[18];
  }
  if (a4)
  {
    v15 = 0;
    v16 = *v13 + 8 * v14;
    do
    {
      *(_QWORD *)(v16 + 8 * v15) = mlir::TypeRange::dereference_iterator(a3, v15);
      ++v15;
    }
    while (a4 != v15);
    LODWORD(v14) = a2[18];
  }
  a2[18] = v14 + a4;
  mlir::OperationState::addOperands((uint64_t)a2, (uint64_t)&v24, 1);
  v17 = a1 + 2;
  v23 = *((_OWORD *)a1 + 1);
  v18 = mlir::OperationState::addRegion((mlir::OperationState *)a2);
  if (!a6)
  {
    result = (_OWORD *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
    if (!a7)
      goto LABEL_9;
LABEL_13:
    v22 = (uint64_t)result;
    mlir::ValueRange::ValueRange(v25, 0, 0);
    result = mlir::OpBuilder::createBlock(a1, v22, 0, v25[0], v25[1], 0, 0);
    v20 = v23;
    if ((_QWORD)v23)
      goto LABEL_10;
LABEL_14:
    *v17 = 0;
    a1[3] = 0;
    return result;
  }
  v21 = v18;
  mlir::ValueRange::ValueRange(v26, 0, 0);
  mlir::OpBuilder::createBlock(a1, v21, 0, v26[0], v26[1], 0, 0);
  result = (_OWORD *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  if (a7)
    goto LABEL_13;
LABEL_9:
  v20 = v23;
  if (!(_QWORD)v23)
    goto LABEL_14;
LABEL_10:
  *(_OWORD *)v17 = v20;
  return result;
}

uint64_t mlir::scf::IfOp::build(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _QWORD *v16;
  uint64_t result;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22[2];
  unint64_t v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v21 = a5;
  v11 = a2 + 16;
  v12 = a2[18];
  if (a4 + v12 > (unint64_t)a2[19])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, a2 + 20, a4 + v12, 8);
    LODWORD(v12) = a2[18];
  }
  if (a4)
  {
    v13 = 0;
    v14 = *v11 + 8 * v12;
    do
    {
      *(_QWORD *)(v14 + 8 * v13) = mlir::TypeRange::dereference_iterator(a3, v13);
      ++v13;
    }
    while (a4 != v13);
    LODWORD(v12) = a2[18];
  }
  a2[18] = v12 + a4;
  mlir::OperationState::addOperands((uint64_t)a2, (uint64_t)&v21, 1);
  v15 = (_OWORD *)(a1 + 16);
  v20 = *(_OWORD *)(a1 + 16);
  v16 = (_QWORD *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  mlir::ValueRange::ValueRange(v23, 0, 0);
  mlir::OpBuilder::createBlock((_QWORD *)a1, (uint64_t)v16, 0, v23[0], v23[1], 0, 0);
  if (a4)
  {
    result = mlir::OperationState::addRegion((mlir::OperationState *)a2);
    if (!a6)
      goto LABEL_12;
  }
  else
  {
    mlir::impl::ensureRegionTerminator(v16, a1, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>::buildTerminator);
    result = mlir::OperationState::addRegion((mlir::OperationState *)a2);
    if (!a6)
      goto LABEL_12;
  }
  v18 = (_QWORD *)result;
  mlir::ValueRange::ValueRange(v22, 0, 0);
  result = (uint64_t)mlir::OpBuilder::createBlock((_QWORD *)a1, (uint64_t)v18, 0, v22[0], v22[1], 0, 0);
  if (!a4)
  {
    result = mlir::impl::ensureRegionTerminator(v18, a1, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>::buildTerminator);
    v19 = v20;
    if ((_QWORD)v20)
      goto LABEL_13;
    goto LABEL_15;
  }
LABEL_12:
  v19 = v20;
  if ((_QWORD)v20)
  {
LABEL_13:
    *v15 = v19;
    return result;
  }
LABEL_15:
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t mlir::scf::IfOp::verify(uint64_t **this)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  const void **v14;
  __int16 v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *__p;
  _QWORD **v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = *this;
  if (!*((_DWORD *)*this + 9))
    return 1;
  v2 = *((unsigned int *)v1 + 11);
  if ((v2 & 0x7FFFFF) != 0)
  {
    v3 = (((unint64_t)&v1[2 * ((v2 >> 23) & 1) + 8] + ((v2 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)v1 + 10);
    if (*(_QWORD *)(v3 + 24) != v3 + 24)
      return 1;
  }
  else if (MEMORY[0x18] != 24)
  {
    return 1;
  }
  v14 = (const void **)"must have an else block if defining values";
  v15 = 259;
  mlir::OpState::emitOpError(this, &v14, (uint64_t)v16);
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
  if (v16[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
  if (v23)
  {
    v6 = (_QWORD **)__p;
    if (__p)
    {
      v7 = v22;
      v8 = __p;
      if (v22 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v22 = v6;
      operator delete(v8);
    }
    v9 = v19;
    if (v19)
    {
      v10 = v20;
      v11 = v19;
      if (v20 != v19)
      {
        do
        {
          v13 = (void *)*--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            operator delete[](v12);
        }
        while (v10 != v9);
        v11 = v19;
      }
      v20 = v9;
      operator delete(v11);
    }
    if (v17 != &v18)
      free(v17);
  }
  return v4;
}

BOOL mlir::scf::IfOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  mlir::Builder *v6;
  uint64_t IntegerType;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v11[4];

  llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve((uint64_t)a2 + 224, 2uLL);
  v4 = (_QWORD *)mlir::OperationState::addRegion(a2);
  v5 = (_QWORD *)mlir::OperationState::addRegion(a2);
  v6 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  memset(v11, 0, 24);
  IntegerType = mlir::Builder::getIntegerType(v6, 1u);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v11, 1)
    && (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v11, IntegerType, (uint64_t)a2 + 16)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 536))(a1, (uint64_t)a2 + 64)&& (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    mlir::impl::ensureRegionTerminator(v4, v8, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>::buildTerminator);
    if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "else", 4))
      return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
    if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v5, 0, 0, 0))
    {
      v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      mlir::impl::ensureRegionTerminator(v5, v9, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>::buildTerminator);
      return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
    }
  }
  return 0;
}

uint64_t mlir::scf::IfOp::print(unsigned int **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  unsigned int v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mlir::ArrayAttr *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  uint64_t Value;
  uint64_t v24;
  uint64_t v26[4];
  const char *v27;
  uint64_t v28;

  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (*this)[9];
  if (v6)
  {
    v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v8 = *((_QWORD *)v7 + 4);
    if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 4)
    {
      *(_BYTE *)(v8 + 4) = 40;
      *(_DWORD *)v8 = 540945696;
      *((_QWORD *)v7 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v7, " -> (", 5uLL);
    }
    v9 = (*this)[9];
    v10 = (const char *)(*this - 4);
    if (!(_DWORD)v9)
      v10 = 0;
    v27 = v10;
    v28 = v9;
    mlir::OperandRange::getTypes((uint64_t *)&v27, v26);
    v27 = ", ";
    v28 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v26[0], v26[1], v26[2], v26[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)&v27);
    v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v12 = (_BYTE *)*((_QWORD *)v11 + 4);
    if (*((_BYTE **)v11 + 3) == v12)
    {
      llvm::raw_ostream::write(v11, ")", 1uLL);
    }
    else
    {
      *v12 = 41;
      ++*((_QWORD *)v11 + 4);
    }
  }
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 17]+ (((unint64_t)(*this)[11] >> 21) & 0x7F8)+ 3) & 0xFFFFFFFFFFFFFFF8)+ 32 * (*this)[10], 0, v6 != 0, 0);
  v15 = *this;
  v16 = (*this)[11];
  if ((v16 & 0x7FFFFF) != 0)
  {
    v17 = (((unint64_t)&v15[4 * ((v16 >> 23) & 1) + 17] + ((v16 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * v15[10];
    v19 = *(_QWORD *)(v17 + 24);
    v18 = v17 + 24;
    if (v19 == v18)
      goto LABEL_18;
LABEL_21:
    v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v22 = *((_QWORD *)v21 + 4);
    if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 5)
    {
      *(_WORD *)(v22 + 4) = 8293;
      *(_DWORD *)v22 = 1936483616;
      *((_QWORD *)v21 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v21, " else ", 6uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)a2 + 224))(a2, v18, 0, v6 != 0, 0);
    v15 = *this;
    if (!HIBYTE((*this)[11]))
      goto LABEL_19;
LABEL_25:
    v26[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)v15);
    v20 = (mlir::ArrayAttr *)v26;
    goto LABEL_26;
  }
  v18 = 24;
  if (MEMORY[0x18] != 24)
    goto LABEL_21;
LABEL_18:
  if (BYTE3(v16))
    goto LABEL_25;
LABEL_19:
  v20 = (mlir::ArrayAttr *)(v15 + 14);
LABEL_26:
  Value = mlir::ArrayAttr::getValue(v20);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v24, 0, 0);
}

__n128 mlir::scf::IfOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  __n128 result;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  BOOL v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v10 = *(unsigned int *)(*(_QWORD *)a1 + 44);
    if ((v10 & 0x7FFFFF) != 0)
      v11 = ((*(_QWORD *)a1 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(*(_QWORD *)a1 + 40);
    else
      v11 = 0;
    v29 = v11;
    v12 = (char *)&v29;
    mlir::ValueRange::ValueRange(v30, 0, 0);
    v13 = *(unsigned int *)(a3 + 8);
    v14 = *(_QWORD *)a3;
    if (v13 >= *(_DWORD *)(a3 + 12))
    {
      v25 = v13 + 1;
      v26 = v14 + 24 * v13 > (unint64_t)&v29;
      if (v14 <= (unint64_t)&v29 && v26)
      {
        v28 = (char *)&v30[-1] - v14;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v25, 24);
        v14 = *(_QWORD *)a3;
        v12 = &v28[*(_QWORD *)a3];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v25, 24);
        v14 = *(_QWORD *)a3;
        v12 = (char *)&v29;
      }
    }
    v15 = v14 + 24 * *(unsigned int *)(a3 + 8);
    v16 = *(_OWORD *)v12;
    *(_QWORD *)(v15 + 16) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v15 = v16;
    ++*(_DWORD *)(a3 + 8);
    v17 = *(unsigned int *)(*(_QWORD *)a1 + 44);
    if ((v17 & 0x7FFFFF) != 0)
    {
      v18 = ((*(_QWORD *)a1 + 16 * ((v17 >> 23) & 1) + ((v17 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(*(_QWORD *)a1 + 40);
      v20 = *(_QWORD *)(v18 + 24);
      v19 = v18 + 24;
      if (v20 != v19)
      {
LABEL_13:
        v29 = v19;
        goto LABEL_16;
      }
    }
    else
    {
      v19 = 24;
      if (MEMORY[0x18] != 24)
        goto LABEL_13;
    }
    v29 = 0;
LABEL_16:
    v7 = (__n128 *)&v29;
    mlir::ValueRange::ValueRange(v30, 0, 0);
    v8 = *(unsigned int *)(a3 + 8);
    v9 = *(_QWORD *)a3;
    if (v8 < *(_DWORD *)(a3 + 12))
      goto LABEL_17;
    goto LABEL_18;
  }
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 36);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)a1 - 16;
  else
    v6 = 0;
  v29 = 0;
  v7 = (__n128 *)&v29;
  mlir::ValueRange::ValueRange(v30, v6, v5);
  v8 = *(unsigned int *)(a3 + 8);
  v9 = *(_QWORD *)a3;
  if (v8 >= *(_DWORD *)(a3 + 12))
  {
LABEL_18:
    v23 = v8 + 1;
    v24 = v9 + 24 * v8 > (unint64_t)&v29;
    if (v9 <= (unint64_t)&v29 && v24)
    {
      v27 = (char *)&v30[-1] - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23, 24);
      v9 = *(_QWORD *)a3;
      v7 = (__n128 *)&v27[*(_QWORD *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23, 24);
      v9 = *(_QWORD *)a3;
      v7 = (__n128 *)&v29;
    }
  }
LABEL_17:
  v21 = (__n128 *)(v9 + 24 * *(unsigned int *)(a3 + 8));
  result = *v7;
  v21[1].n128_u64[0] = v7[1].n128_u64[0];
  *v21 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

void mlir::scf::IfOp::getEntrySuccessorRegions(unsigned int **a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  char v43[40];
  _QWORD **v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v43, *a1);
  v44 = a2;
  v45 = a3;
  v8 = *a2;
  if (!*a2)
  {
    v42 = 0;
    v10 = *a1;
    v11 = (*a1)[11];
    if ((v11 & 0x7FFFFF) != 0)
    {
LABEL_8:
      v12 = (((unint64_t)&v10[4 * ((v11 >> 23) & 1) + 17] + ((v11 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v10[10];
      v13 = *(_DWORD *)(a4 + 8);
      if (v13 < *(_DWORD *)(a4 + 12))
      {
LABEL_9:
        v14 = (unint64_t *)(*(_QWORD *)a4 + 24 * v13);
        *v14 = v12;
        mlir::ValueRange::ValueRange(v14 + 1, 0, 0);
LABEL_10:
        ++*(_DWORD *)(a4 + 8);
        goto LABEL_11;
      }
LABEL_19:
      v46 = v12;
      v21 = (char *)&v46;
      mlir::ValueRange::ValueRange(v47, 0, 0);
      v22 = *(unsigned int *)(a4 + 8);
      v23 = *(_QWORD *)a4;
      if (v22 >= *(_DWORD *)(a4 + 12))
      {
        v36 = v22 + 1;
        v37 = v23 + 24 * v22 > (unint64_t)&v46;
        if (v23 <= (unint64_t)&v46 && v37)
        {
          v40 = (char *)&v47[-1] - v23;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v36, 24);
          v23 = *(_QWORD *)a4;
          v21 = &v40[*(_QWORD *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v36, 24);
          v23 = *(_QWORD *)a4;
          v21 = (char *)&v46;
        }
      }
      v24 = v23 + 24 * *(unsigned int *)(a4 + 8);
      v25 = *(_OWORD *)v21;
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v24 = v25;
      goto LABEL_10;
    }
LABEL_18:
    v12 = 0;
    v13 = *(_DWORD *)(a4 + 8);
    if (v13 < *(_DWORD *)(a4 + 12))
      goto LABEL_9;
    goto LABEL_19;
  }
  if (mlir::BoolAttr::classof(*a2))
    v9 = v8;
  else
    v9 = 0;
  v42 = v9;
  if (!v9 || mlir::BoolAttr::getValue((mlir::BoolAttr *)&v42))
  {
    v10 = *a1;
    v11 = (*a1)[11];
    if ((v11 & 0x7FFFFF) != 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_11:
  if (!v42 || !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v42))
  {
    v15 = *a1;
    v16 = (*a1)[11];
    if ((v16 & 0x7FFFFF) != 0)
    {
      v17 = (((unint64_t)&v15[4 * ((v16 >> 23) & 1) + 17] + ((v16 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v15[10];
      if (*(_QWORD *)(v17 + 24) != v17 + 24)
      {
        v18 = v17 + 24;
        v19 = *(_DWORD *)(a4 + 8);
        if (v19 < *(_DWORD *)(a4 + 12))
        {
LABEL_16:
          v20 = (uint64_t *)(*(_QWORD *)a4 + 24 * v19);
          *v20 = v18;
          mlir::ValueRange::ValueRange((unint64_t *)v20 + 1, 0, 0);
LABEL_30:
          ++*(_DWORD *)(a4 + 8);
          return;
        }
LABEL_23:
        v46 = v18;
        v26 = (char *)&v46;
        mlir::ValueRange::ValueRange(v47, 0, 0);
        v27 = *(unsigned int *)(a4 + 8);
        v28 = *(_QWORD *)a4;
        if (v27 >= *(_DWORD *)(a4 + 12))
        {
LABEL_37:
          v38 = v27 + 1;
          v39 = v28 + 24 * v27 > (unint64_t)&v46;
          if (v28 <= (unint64_t)&v46 && v39)
          {
            v41 = (char *)&v47[-1] - v28;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v38, 24);
            v28 = *(_QWORD *)a4;
            v26 = &v41[*(_QWORD *)a4];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v38, 24);
            v28 = *(_QWORD *)a4;
            v26 = (char *)&v46;
          }
        }
LABEL_33:
        v34 = v28 + 24 * *(unsigned int *)(a4 + 8);
        v35 = *(_OWORD *)v26;
        *(_QWORD *)(v34 + 16) = *((_QWORD *)v26 + 2);
        *(_OWORD *)v34 = v35;
        goto LABEL_30;
      }
    }
    else if (MEMORY[0x18] != 24)
    {
      v18 = 24;
      v19 = *(_DWORD *)(a4 + 8);
      if (v19 < *(_DWORD *)(a4 + 12))
        goto LABEL_16;
      goto LABEL_23;
    }
    v29 = v15[9];
    v30 = v15 - 4;
    if ((_DWORD)v29)
      v31 = (uint64_t)v30;
    else
      v31 = 0;
    v32 = *(_DWORD *)(a4 + 8);
    if (v32 < *(_DWORD *)(a4 + 12))
    {
      v33 = (_QWORD *)(*(_QWORD *)a4 + 24 * v32);
      *v33 = 0;
      mlir::ValueRange::ValueRange(v33 + 1, v31, v29);
      goto LABEL_30;
    }
    v46 = 0;
    v26 = (char *)&v46;
    mlir::ValueRange::ValueRange(v47, v31, v29);
    v27 = *(unsigned int *)(a4 + 8);
    v28 = *(_QWORD *)a4;
    if (v27 >= *(_DWORD *)(a4 + 12))
      goto LABEL_37;
    goto LABEL_33;
  }
}

uint64_t mlir::scf::IfOp::fold(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  void *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *Input;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL (*v33)(llvm::APInt *);
  uint64_t v34;
  uint64_t Filter;

  v2 = *a1;
  v3 = *(unsigned int *)(*a1 + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    v4 = ((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(v2 + 40);
    if (*(_QWORD *)(v4 + 24) != v4 + 24)
      goto LABEL_3;
    return 0;
  }
  if (MEMORY[0x18] == 24)
    return 0;
LABEL_3:
  Filter = *(_QWORD *)(*(_QWORD *)(v2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
  if (result)
  {
    v6 = *(void **)(*(_QWORD *)(result + 48) + 16);
    v7 = v6 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id;
    if (v6 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
      v8 = result;
    else
      v8 = 0;
    v34 = v8;
    if (v7)
    {
      v33 = mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
      Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v34);
      result = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
      if (result)
      {
        result = mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(void **))&v33, (mlir::Operation *)result);
        if ((_DWORD)result)
        {
          v9 = *(uint64_t **)(*a1 + 72);
          Input = (uint64_t *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v34);
          v11 = (uint64_t *)v9[1];
          if (v11)
          {
            *v11 = *v9;
            if (*v9)
              *(_QWORD *)(*v9 + 8) = v9[1];
          }
          v9[3] = (uint64_t)Input;
          v9[1] = (uint64_t)Input;
          v12 = *Input;
          *v9 = *Input;
          if (v12)
            *(_QWORD *)(v12 + 8) = v9;
          *Input = (uint64_t)v9;
          v13 = *(unsigned int *)(*a1 + 44);
          if ((v13 & 0x7FFFFF) != 0)
          {
            v14 = (_QWORD *)(((*a1 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                           + 32 * *(unsigned int *)(*a1 + 40));
            v15 = (uint64_t *)v14[1];
          }
          else
          {
            v14 = 0;
            v15 = (uint64_t *)MEMORY[8];
          }
          if (v15)
            v16 = v15 - 1;
          else
            v16 = 0;
          v17 = v14 + 3;
          if ((_QWORD *)v14[3] != v14 + 3 && v15 != v17)
          {
            v18 = (uint64_t *)v14[4];
            llvm::ilist_traits<mlir::Block>::transferNodesFromList((uint64_t)v14, (uint64_t)(v14 + 3), (uint64_t)v18, (uint64_t)(v14 + 3));
            if (v18 != v17)
            {
              v19 = *v17;
              v20 = *v18;
              *(_QWORD *)(v20 + 8) = v17;
              *v17 = v20;
              v21 = *v15;
              *(_QWORD *)(v19 + 8) = v15;
              *v18 = v21;
              *(_QWORD *)(v21 + 8) = v18;
              *v15 = v19;
            }
          }
          v22 = *(unsigned int *)(*a1 + 44);
          if ((v22 & 0x7FFFFF) != 0)
          {
            v23 = ((*a1 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(*a1 + 40);
            v24 = v23 + 24;
            v25 = v23 + 32;
          }
          else
          {
            v23 = 0;
            v24 = 24;
            v25 = 32;
          }
          v26 = *(uint64_t **)v25;
          if (v15)
            v27 = v16 + 1;
          else
            v27 = 0;
          v28 = (uint64_t *)v27[1];
          if (v27 != v26 && v28 != v26)
          {
            llvm::ilist_traits<mlir::Block>::transferNodesFromList(v24, v23, (uint64_t)v27, v27[1]);
            if (v28 != v27)
            {
              v30 = *v28;
              v31 = *v27;
              *(_QWORD *)(v31 + 8) = v28;
              *v28 = v31;
              v32 = *v26;
              *(_QWORD *)(v30 + 8) = v26;
              *v27 = v32;
              *(_QWORD *)(v32 + 8) = v27;
              *v26 = v30;
            }
          }
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void mlir::scf::IfOp::getRegionInvocationBounds(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  _BOOL4 Value;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v5 = (uint64_t)*a2;
  if (!*a2 || (!(v6 = mlir::BoolAttr::classof(*a2)) ? (v7 = 0) : (v7 = v5), v22 = v7, !v6))
  {
    if (*(_DWORD *)(a4 + 12) > 1u)
    {
      v15 = *(unsigned int *)(a4 + 8);
      v16 = 2;
      if (v15 < 2)
        v16 = *(unsigned int *)(a4 + 8);
      if (v16)
      {
        v17 = *(_QWORD *)a4;
        *(_QWORD *)v17 = 0x100000000;
        *(_DWORD *)(v17 + 8) = 1;
        if (v16 != 1)
        {
          *(_QWORD *)(v17 + 12) = 0x100000000;
          *(_DWORD *)(v17 + 20) = 1;
        }
        v15 = *(unsigned int *)(a4 + 8);
      }
      if (v15 > 1)
        goto LABEL_22;
      v14 = *(_QWORD *)a4 + 12 * v15;
      *(_QWORD *)v14 = 0x100000000;
      *(_DWORD *)(v14 + 8) = 1;
      if (v15 == 1)
        goto LABEL_22;
    }
    else
    {
      *(_DWORD *)(a4 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), 2uLL, 12);
      v14 = *(_QWORD *)a4;
      *(_QWORD *)v14 = 0x100000000;
      *(_DWORD *)(v14 + 8) = 1;
    }
    *(_QWORD *)(v14 + 12) = 0x100000000;
    *(_DWORD *)(v14 + 20) = 1;
LABEL_22:
    *(_DWORD *)(a4 + 8) = 2;
    return;
  }
  Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v22);
  v9 = *(unsigned int *)(a4 + 8);
  if (v9 >= *(_DWORD *)(a4 + 12))
  {
    LODWORD(v23[0]) = 0;
    *(_QWORD *)((char *)v23 + 4) = Value | 0x100000000;
    v18 = v23[0];
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v9 + 1, 12);
    v19 = *(_QWORD *)a4 + 12 * *(unsigned int *)(a4 + 8);
    *(_QWORD *)v19 = v18;
    *(_DWORD *)(v19 + 8) = 1;
  }
  else
  {
    v10 = *(_QWORD *)a4 + 12 * v9;
    *(_DWORD *)v10 = 0;
    *(_QWORD *)(v10 + 4) = Value | 0x100000000;
  }
  ++*(_DWORD *)(a4 + 8);
  v11 = !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v22);
  v12 = *(unsigned int *)(a4 + 8);
  if (v12 >= *(_DWORD *)(a4 + 12))
  {
    LODWORD(v23[0]) = 0;
    *(_QWORD *)((char *)v23 + 4) = v11 | 0x100000000;
    v20 = v23[0];
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v12 + 1, 12);
    v21 = *(_QWORD *)a4 + 12 * *(unsigned int *)(a4 + 8);
    *(_QWORD *)v21 = v20;
    *(_DWORD *)(v21 + 8) = 1;
  }
  else
  {
    v13 = *(_QWORD *)a4 + 12 * v12;
    *(_DWORD *)v13 = 0;
    *(_QWORD *)(v13 + 4) = v11 | 0x100000000;
  }
  ++*(_DWORD *)(a4 + 8);
}

void mlir::scf::IfOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  const char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  const char *v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  const char *v147;
  unint64_t v148;
  uint64_t v149;
  const char *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  const char *v181;
  unint64_t v182;
  uint64_t v183;
  const char *v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int *v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  const char *v215;
  unint64_t v216;
  uint64_t v217;
  const char *v218;
  unint64_t v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int *v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  const char *v249;
  unint64_t v250;
  uint64_t v251;
  const char *v252;
  unint64_t v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  const char *v276;
  unint64_t v277;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E15058;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::CombineIfs]";
  v277 = 83;
  v9 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v9)
    v10 = v9;
  else
    v10 = v277;
  v11 = &v276[v10];
  v12 = v277 - v10;
  if (v277 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v277 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_306;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_307;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_310;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_310:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E15E90;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::CombineNestedIfs]";
  v277 = 89;
  v43 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v43)
    v44 = v43;
  else
    v44 = v277;
  v45 = &v276[v44];
  v46 = v277 - v44;
  if (v277 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v277 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_306;
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      goto LABEL_307;
    v55 = (char *)operator new(8 * v54);
    v56 = &v55[8 * v51];
    v57 = &v55[8 * v54];
    *(_QWORD *)v56 = v38;
    v42 = (uint64_t)(v56 + 8);
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
  }
  else
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_311;
      }
      v60 = (v59 >> 3) + 1;
      v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v41[-v61];
      v56 -= v61;
      v63 = &v55[8 * v51 - 16];
      v64 = v41 - 16;
      v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_311:
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      v41 = (char *)a1[1];
      v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        v71 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        v70 = v71;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
  v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(_QWORD *)v72 = off_1E0E18288;
  if (*((_QWORD *)v72 + 9))
  {
    v73 = v72[22];
    if (v73 <= v72[23])
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    v75 = (char *)a1[2];
    v74 = a1[3];
    if ((unint64_t)v75 < v74)
      goto LABEL_80;
    goto LABEL_91;
  }
  v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ConditionPropagation]";
  v277 = 93;
  v77 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v77)
    v78 = v77;
  else
    v78 = v277;
  v79 = &v276[v78];
  v80 = v277 - v78;
  if (v277 - v78 >= 0x12)
    v81 = 18;
  else
    v81 = v277 - v78;
  v82 = &v79[v81];
  v83 = v80 - v81;
  if (v83 >= v83 - 1)
    --v83;
  *((_QWORD *)v72 + 8) = v82;
  *((_QWORD *)v72 + 9) = v83;
  v73 = v72[22];
  if (v73 > v72[23])
    goto LABEL_90;
LABEL_79:
  v72[22] = v73;
  v75 = (char *)a1[2];
  v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(_QWORD *)v75 = v72;
    v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v84 = (char *)a1[1];
  v85 = (v75 - v84) >> 3;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
    goto LABEL_306;
  v87 = v74 - (_QWORD)v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (v88)
  {
    if (v88 >> 61)
      goto LABEL_307;
    v89 = (char *)operator new(8 * v88);
    v90 = &v89[8 * v85];
    v91 = &v89[8 * v88];
    *(_QWORD *)v90 = v72;
    v76 = (uint64_t)(v90 + 8);
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
      goto LABEL_100;
  }
  else
  {
    v89 = 0;
    v90 = (char *)(8 * v85);
    v91 = 0;
    *(_QWORD *)(8 * v85) = v72;
    v76 = 8 * v85 + 8;
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_312;
      }
      v94 = (v93 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v96 = &v75[-v95];
      v90 -= v95;
      v97 = &v89[8 * v85 - 16];
      v98 = v75 - 16;
      v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_312:
        do
        {
          v102 = *((_QWORD *)v75 - 1);
          v75 -= 8;
          *(_QWORD *)v75 = 0;
          *((_QWORD *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      v75 = (char *)a1[1];
      v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        v105 = *((_QWORD *)v103 - 1);
        v103 -= 8;
        v104 = v105;
        *(_QWORD *)v103 = 0;
        if (v105)
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75)
    operator delete(v75);
LABEL_115:
  a1[2] = v76;
  v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(_QWORD *)v106 = off_1E0E19350;
  if (*((_QWORD *)v106 + 9))
  {
    v107 = v106[22];
    if (v107 <= v106[23])
      goto LABEL_117;
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    v109 = (char *)a1[2];
    v108 = a1[3];
    if ((unint64_t)v109 < v108)
      goto LABEL_118;
    goto LABEL_129;
  }
  v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ConvertTrivialIfToSelect]";
  v277 = 97;
  v111 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v111)
    v112 = v111;
  else
    v112 = v277;
  v113 = &v276[v112];
  v114 = v277 - v112;
  if (v277 - v112 >= 0x12)
    v115 = 18;
  else
    v115 = v277 - v112;
  v116 = &v113[v115];
  v117 = v114 - v115;
  if (v117 >= v117 - 1)
    --v117;
  *((_QWORD *)v106 + 8) = v116;
  *((_QWORD *)v106 + 9) = v117;
  v107 = v106[22];
  if (v107 > v106[23])
    goto LABEL_128;
LABEL_117:
  v106[22] = v107;
  v109 = (char *)a1[2];
  v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(_QWORD *)v109 = v106;
    v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  v118 = (char *)a1[1];
  v119 = (v109 - v118) >> 3;
  v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61)
    goto LABEL_306;
  v121 = v108 - (_QWORD)v118;
  if (v121 >> 2 > v120)
    v120 = v121 >> 2;
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
    v122 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v122 = v120;
  if (v122)
  {
    if (v122 >> 61)
      goto LABEL_307;
    v123 = (char *)operator new(8 * v122);
    v124 = &v123[8 * v119];
    v125 = &v123[8 * v122];
    *(_QWORD *)v124 = v106;
    v110 = (uint64_t)(v124 + 8);
    v126 = (char *)(v109 - v118);
    if (v109 != v118)
      goto LABEL_138;
  }
  else
  {
    v123 = 0;
    v124 = (char *)(8 * v119);
    v125 = 0;
    *(_QWORD *)(8 * v119) = v106;
    v110 = 8 * v119 + 8;
    v126 = (char *)(v109 - v118);
    if (v109 != v118)
    {
LABEL_138:
      v127 = (unint64_t)(v126 - 8);
      if (v127 < 0x78
        || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
        && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
      {
        goto LABEL_313;
      }
      v128 = (v127 >> 3) + 1;
      v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      v130 = &v109[-v129];
      v124 -= v129;
      v131 = &v123[8 * v119 - 16];
      v132 = v109 - 16;
      v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v135 = *((_OWORD *)v132 - 1);
        v134 = *(_OWORD *)v132;
        *((_OWORD *)v132 - 1) = 0uLL;
        *(_OWORD *)v132 = 0uLL;
        *((_OWORD *)v131 - 1) = v135;
        *(_OWORD *)v131 = v134;
        v131 -= 32;
        v132 -= 32;
        v133 -= 4;
      }
      while (v133);
      v109 = v130;
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_313:
        do
        {
          v136 = *((_QWORD *)v109 - 1);
          v109 -= 8;
          *(_QWORD *)v109 = 0;
          *((_QWORD *)v124 - 1) = v136;
          v124 -= 8;
        }
        while (v109 != v118);
      }
      v109 = (char *)a1[1];
      v137 = (char *)a1[2];
      a1[1] = v124;
      a1[2] = v110;
      a1[3] = v125;
      while (v137 != v109)
      {
        v139 = *((_QWORD *)v137 - 1);
        v137 -= 8;
        v138 = v139;
        *(_QWORD *)v137 = 0;
        if (v139)
          (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
      }
      goto LABEL_151;
    }
  }
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109)
    operator delete(v109);
LABEL_153:
  a1[2] = v110;
  v140 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v140 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(_QWORD *)v140 = off_1E0E188C0;
  if (*((_QWORD *)v140 + 9))
  {
    v141 = v140[22];
    if (v141 <= v140[23])
      goto LABEL_155;
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v140 + 20), v140 + 24, v141, 16);
    v140[22] = v140[22];
    v143 = (char *)a1[2];
    v142 = a1[3];
    if ((unint64_t)v143 < v142)
      goto LABEL_156;
    goto LABEL_167;
  }
  v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RemoveEmptyElseBranch]";
  v277 = 94;
  v145 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v145)
    v146 = v145;
  else
    v146 = v277;
  v147 = &v276[v146];
  v148 = v277 - v146;
  if (v277 - v146 >= 0x12)
    v149 = 18;
  else
    v149 = v277 - v146;
  v150 = &v147[v149];
  v151 = v148 - v149;
  if (v151 >= v151 - 1)
    --v151;
  *((_QWORD *)v140 + 8) = v150;
  *((_QWORD *)v140 + 9) = v151;
  v141 = v140[22];
  if (v141 > v140[23])
    goto LABEL_166;
LABEL_155:
  v140[22] = v141;
  v143 = (char *)a1[2];
  v142 = a1[3];
  if ((unint64_t)v143 < v142)
  {
LABEL_156:
    *(_QWORD *)v143 = v140;
    v144 = (uint64_t)(v143 + 8);
    goto LABEL_191;
  }
LABEL_167:
  v152 = (char *)a1[1];
  v153 = (v143 - v152) >> 3;
  v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 61)
    goto LABEL_306;
  v155 = v142 - (_QWORD)v152;
  if (v155 >> 2 > v154)
    v154 = v155 >> 2;
  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
    v156 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v156 = v154;
  if (v156)
  {
    if (v156 >> 61)
      goto LABEL_307;
    v157 = (char *)operator new(8 * v156);
    v158 = &v157[8 * v153];
    v159 = &v157[8 * v156];
    *(_QWORD *)v158 = v140;
    v144 = (uint64_t)(v158 + 8);
    v160 = (char *)(v143 - v152);
    if (v143 != v152)
      goto LABEL_176;
  }
  else
  {
    v157 = 0;
    v158 = (char *)(8 * v153);
    v159 = 0;
    *(_QWORD *)(8 * v153) = v140;
    v144 = 8 * v153 + 8;
    v160 = (char *)(v143 - v152);
    if (v143 != v152)
    {
LABEL_176:
      v161 = (unint64_t)(v160 - 8);
      if (v161 < 0x78
        || &v143[-(v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v158
        && &v157[v143 - v152 - (v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v143)
      {
        goto LABEL_314;
      }
      v162 = (v161 >> 3) + 1;
      v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
      v164 = &v143[-v163];
      v158 -= v163;
      v165 = &v157[8 * v153 - 16];
      v166 = v143 - 16;
      v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v169 = *((_OWORD *)v166 - 1);
        v168 = *(_OWORD *)v166;
        *((_OWORD *)v166 - 1) = 0uLL;
        *(_OWORD *)v166 = 0uLL;
        *((_OWORD *)v165 - 1) = v169;
        *(_OWORD *)v165 = v168;
        v165 -= 32;
        v166 -= 32;
        v167 -= 4;
      }
      while (v167);
      v143 = v164;
      if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_314:
        do
        {
          v170 = *((_QWORD *)v143 - 1);
          v143 -= 8;
          *(_QWORD *)v143 = 0;
          *((_QWORD *)v158 - 1) = v170;
          v158 -= 8;
        }
        while (v143 != v152);
      }
      v143 = (char *)a1[1];
      v171 = (char *)a1[2];
      a1[1] = v158;
      a1[2] = v144;
      a1[3] = v159;
      while (v171 != v143)
      {
        v173 = *((_QWORD *)v171 - 1);
        v171 -= 8;
        v172 = v173;
        *(_QWORD *)v171 = 0;
        if (v173)
          (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
      }
      goto LABEL_189;
    }
  }
  a1[1] = v158;
  a1[2] = v144;
  a1[3] = v159;
LABEL_189:
  if (v143)
    operator delete(v143);
LABEL_191:
  a1[2] = v144;
  v174 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v174 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(_QWORD *)v174 = off_1E0E18918;
  if (*((_QWORD *)v174 + 9))
  {
    v175 = v174[22];
    if (v175 <= v174[23])
      goto LABEL_193;
LABEL_204:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v174 + 20), v174 + 24, v175, 16);
    v174[22] = v174[22];
    v177 = (char *)a1[2];
    v176 = a1[3];
    if ((unint64_t)v177 < v176)
      goto LABEL_194;
    goto LABEL_205;
  }
  v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RemoveStaticCondition]";
  v277 = 94;
  v179 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v179)
    v180 = v179;
  else
    v180 = v277;
  v181 = &v276[v180];
  v182 = v277 - v180;
  if (v277 - v180 >= 0x12)
    v183 = 18;
  else
    v183 = v277 - v180;
  v184 = &v181[v183];
  v185 = v182 - v183;
  if (v185 >= v185 - 1)
    --v185;
  *((_QWORD *)v174 + 8) = v184;
  *((_QWORD *)v174 + 9) = v185;
  v175 = v174[22];
  if (v175 > v174[23])
    goto LABEL_204;
LABEL_193:
  v174[22] = v175;
  v177 = (char *)a1[2];
  v176 = a1[3];
  if ((unint64_t)v177 < v176)
  {
LABEL_194:
    *(_QWORD *)v177 = v174;
    v178 = (uint64_t)(v177 + 8);
    goto LABEL_229;
  }
LABEL_205:
  v186 = (char *)a1[1];
  v187 = (v177 - v186) >> 3;
  v188 = v187 + 1;
  if ((unint64_t)(v187 + 1) >> 61)
    goto LABEL_306;
  v189 = v176 - (_QWORD)v186;
  if (v189 >> 2 > v188)
    v188 = v189 >> 2;
  if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8)
    v190 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v190 = v188;
  if (v190)
  {
    if (v190 >> 61)
      goto LABEL_307;
    v191 = (char *)operator new(8 * v190);
    v192 = &v191[8 * v187];
    v193 = &v191[8 * v190];
    *(_QWORD *)v192 = v174;
    v178 = (uint64_t)(v192 + 8);
    v194 = (char *)(v177 - v186);
    if (v177 != v186)
      goto LABEL_214;
  }
  else
  {
    v191 = 0;
    v192 = (char *)(8 * v187);
    v193 = 0;
    *(_QWORD *)(8 * v187) = v174;
    v178 = 8 * v187 + 8;
    v194 = (char *)(v177 - v186);
    if (v177 != v186)
    {
LABEL_214:
      v195 = (unint64_t)(v194 - 8);
      if (v195 < 0x78
        || &v177[-(v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v192
        && &v191[v177 - v186 - (v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v177)
      {
        goto LABEL_315;
      }
      v196 = (v195 >> 3) + 1;
      v197 = 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
      v198 = &v177[-v197];
      v192 -= v197;
      v199 = &v191[8 * v187 - 16];
      v200 = v177 - 16;
      v201 = v196 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v203 = *((_OWORD *)v200 - 1);
        v202 = *(_OWORD *)v200;
        *((_OWORD *)v200 - 1) = 0uLL;
        *(_OWORD *)v200 = 0uLL;
        *((_OWORD *)v199 - 1) = v203;
        *(_OWORD *)v199 = v202;
        v199 -= 32;
        v200 -= 32;
        v201 -= 4;
      }
      while (v201);
      v177 = v198;
      if (v196 != (v196 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_315:
        do
        {
          v204 = *((_QWORD *)v177 - 1);
          v177 -= 8;
          *(_QWORD *)v177 = 0;
          *((_QWORD *)v192 - 1) = v204;
          v192 -= 8;
        }
        while (v177 != v186);
      }
      v177 = (char *)a1[1];
      v205 = (char *)a1[2];
      a1[1] = v192;
      a1[2] = v178;
      a1[3] = v193;
      while (v205 != v177)
      {
        v207 = *((_QWORD *)v205 - 1);
        v205 -= 8;
        v206 = v207;
        *(_QWORD *)v205 = 0;
        if (v207)
          (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
      }
      goto LABEL_227;
    }
  }
  a1[1] = v192;
  a1[2] = v178;
  a1[3] = v193;
LABEL_227:
  if (v177)
    operator delete(v177);
LABEL_229:
  a1[2] = v178;
  v208 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v208 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(_QWORD *)v208 = off_1E0E180B8;
  if (*((_QWORD *)v208 + 9))
  {
    v209 = v208[22];
    if (v209 <= v208[23])
      goto LABEL_231;
LABEL_242:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v208 + 20), v208 + 24, v209, 16);
    v208[22] = v208[22];
    v211 = (char *)a1[2];
    v210 = a1[3];
    if ((unint64_t)v211 < v210)
      goto LABEL_232;
    goto LABEL_243;
  }
  v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RemoveUnusedResults]";
  v277 = 92;
  v213 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v213)
    v214 = v213;
  else
    v214 = v277;
  v215 = &v276[v214];
  v216 = v277 - v214;
  if (v277 - v214 >= 0x12)
    v217 = 18;
  else
    v217 = v277 - v214;
  v218 = &v215[v217];
  v219 = v216 - v217;
  if (v219 >= v219 - 1)
    --v219;
  *((_QWORD *)v208 + 8) = v218;
  *((_QWORD *)v208 + 9) = v219;
  v209 = v208[22];
  if (v209 > v208[23])
    goto LABEL_242;
LABEL_231:
  v208[22] = v209;
  v211 = (char *)a1[2];
  v210 = a1[3];
  if ((unint64_t)v211 < v210)
  {
LABEL_232:
    *(_QWORD *)v211 = v208;
    v212 = (uint64_t)(v211 + 8);
    goto LABEL_267;
  }
LABEL_243:
  v220 = (char *)a1[1];
  v221 = (v211 - v220) >> 3;
  v222 = v221 + 1;
  if ((unint64_t)(v221 + 1) >> 61)
    goto LABEL_306;
  v223 = v210 - (_QWORD)v220;
  if (v223 >> 2 > v222)
    v222 = v223 >> 2;
  if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8)
    v224 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v224 = v222;
  if (v224)
  {
    if (v224 >> 61)
      goto LABEL_307;
    v225 = (char *)operator new(8 * v224);
    v226 = &v225[8 * v221];
    v227 = &v225[8 * v224];
    *(_QWORD *)v226 = v208;
    v212 = (uint64_t)(v226 + 8);
    v228 = (char *)(v211 - v220);
    if (v211 != v220)
      goto LABEL_252;
  }
  else
  {
    v225 = 0;
    v226 = (char *)(8 * v221);
    v227 = 0;
    *(_QWORD *)(8 * v221) = v208;
    v212 = 8 * v221 + 8;
    v228 = (char *)(v211 - v220);
    if (v211 != v220)
    {
LABEL_252:
      v229 = (unint64_t)(v228 - 8);
      if (v229 < 0x78
        || &v211[-(v229 & 0xFFFFFFFFFFFFFFF8) - 8] < v226
        && &v225[v211 - v220 - (v229 & 0xFFFFFFFFFFFFFFF8) - 8] < v211)
      {
        goto LABEL_316;
      }
      v230 = (v229 >> 3) + 1;
      v231 = 8 * (v230 & 0x3FFFFFFFFFFFFFFCLL);
      v232 = &v211[-v231];
      v226 -= v231;
      v233 = &v225[8 * v221 - 16];
      v234 = v211 - 16;
      v235 = v230 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v237 = *((_OWORD *)v234 - 1);
        v236 = *(_OWORD *)v234;
        *((_OWORD *)v234 - 1) = 0uLL;
        *(_OWORD *)v234 = 0uLL;
        *((_OWORD *)v233 - 1) = v237;
        *(_OWORD *)v233 = v236;
        v233 -= 32;
        v234 -= 32;
        v235 -= 4;
      }
      while (v235);
      v211 = v232;
      if (v230 != (v230 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_316:
        do
        {
          v238 = *((_QWORD *)v211 - 1);
          v211 -= 8;
          *(_QWORD *)v211 = 0;
          *((_QWORD *)v226 - 1) = v238;
          v226 -= 8;
        }
        while (v211 != v220);
      }
      v211 = (char *)a1[1];
      v239 = (char *)a1[2];
      a1[1] = v226;
      a1[2] = v212;
      a1[3] = v227;
      while (v239 != v211)
      {
        v241 = *((_QWORD *)v239 - 1);
        v239 -= 8;
        v240 = v241;
        *(_QWORD *)v239 = 0;
        if (v241)
          (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
      }
      goto LABEL_265;
    }
  }
  a1[1] = v226;
  a1[2] = v212;
  a1[3] = v227;
LABEL_265:
  if (v211)
    operator delete(v211);
LABEL_267:
  a1[2] = v212;
  v242 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v242 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(_QWORD *)v242 = off_1E0E1A258;
  if (*((_QWORD *)v242 + 9))
  {
    v243 = v242[22];
    if (v243 <= v242[23])
      goto LABEL_269;
LABEL_280:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v242 + 20), v242 + 24, v243, 16);
    v242[22] = v242[22];
    v245 = (char *)a1[2];
    v244 = a1[3];
    if ((unint64_t)v245 < v244)
      goto LABEL_270;
    goto LABEL_281;
  }
  v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ReplaceIfYieldWithConditionOrValue]";
  v277 = 107;
  v247 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v247)
    v248 = v247;
  else
    v248 = v277;
  v249 = &v276[v248];
  v250 = v277 - v248;
  if (v277 - v248 >= 0x12)
    v251 = 18;
  else
    v251 = v277 - v248;
  v252 = &v249[v251];
  v253 = v250 - v251;
  if (v253 >= v253 - 1)
    --v253;
  *((_QWORD *)v242 + 8) = v252;
  *((_QWORD *)v242 + 9) = v253;
  v243 = v242[22];
  if (v243 > v242[23])
    goto LABEL_280;
LABEL_269:
  v242[22] = v243;
  v245 = (char *)a1[2];
  v244 = a1[3];
  if ((unint64_t)v245 < v244)
  {
LABEL_270:
    *(_QWORD *)v245 = v242;
    v246 = (uint64_t)(v245 + 8);
    goto LABEL_305;
  }
LABEL_281:
  v254 = (char *)a1[1];
  v255 = (v245 - v254) >> 3;
  v256 = v255 + 1;
  if ((unint64_t)(v255 + 1) >> 61)
LABEL_306:
    abort();
  v257 = v244 - (_QWORD)v254;
  if (v257 >> 2 > v256)
    v256 = v257 >> 2;
  if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF8)
    v258 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v258 = v256;
  if (!v258)
  {
    v259 = 0;
    v260 = (char *)(8 * v255);
    v261 = 0;
    *(_QWORD *)(8 * v255) = v242;
    v246 = 8 * v255 + 8;
    v262 = (char *)(v245 - v254);
    if (v245 != v254)
      goto LABEL_290;
    goto LABEL_302;
  }
  if (v258 >> 61)
LABEL_307:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v259 = (char *)operator new(8 * v258);
  v260 = &v259[8 * v255];
  v261 = &v259[8 * v258];
  *(_QWORD *)v260 = v242;
  v246 = (uint64_t)(v260 + 8);
  v262 = (char *)(v245 - v254);
  if (v245 != v254)
  {
LABEL_290:
    v263 = (unint64_t)(v262 - 8);
    if (v263 < 0x78
      || &v245[-(v263 & 0xFFFFFFFFFFFFFFF8) - 8] < v260
      && &v259[v245 - v254 - (v263 & 0xFFFFFFFFFFFFFFF8) - 8] < v245)
    {
      goto LABEL_317;
    }
    v264 = (v263 >> 3) + 1;
    v265 = 8 * (v264 & 0x3FFFFFFFFFFFFFFCLL);
    v266 = &v245[-v265];
    v260 -= v265;
    v267 = &v259[8 * v255 - 16];
    v268 = v245 - 16;
    v269 = v264 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v271 = *((_OWORD *)v268 - 1);
      v270 = *(_OWORD *)v268;
      *((_OWORD *)v268 - 1) = 0uLL;
      *(_OWORD *)v268 = 0uLL;
      *((_OWORD *)v267 - 1) = v271;
      *(_OWORD *)v267 = v270;
      v267 -= 32;
      v268 -= 32;
      v269 -= 4;
    }
    while (v269);
    v245 = v266;
    if (v264 != (v264 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_317:
      do
      {
        v272 = *((_QWORD *)v245 - 1);
        v245 -= 8;
        *(_QWORD *)v245 = 0;
        *((_QWORD *)v260 - 1) = v272;
        v260 -= 8;
      }
      while (v245 != v254);
    }
    v245 = (char *)a1[1];
    v273 = (char *)a1[2];
    a1[1] = v260;
    a1[2] = v246;
    a1[3] = v261;
    while (v273 != v245)
    {
      v275 = *((_QWORD *)v273 - 1);
      v273 -= 8;
      v274 = v275;
      *(_QWORD *)v273 = 0;
      if (v275)
        (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
    }
    goto LABEL_303;
  }
LABEL_302:
  a1[1] = v260;
  a1[2] = v246;
  a1[3] = v261;
LABEL_303:
  if (v245)
    operator delete(v245);
LABEL_305:
  a1[2] = v246;
}

uint64_t mlir::scf::IfOp::elseBlock(mlir::scf::IfOp *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v9;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v1 & 0x7FFFFF) != 0)
  {
    v2 = ((*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(*(_QWORD *)this + 40);
    v5 = *(_QWORD *)(v2 + 24);
    v3 = v2 + 24;
    v4 = v5;
    v6 = v5 - 8;
    if (v5)
      v7 = v4 == v3;
    else
      v7 = 1;
    if (v7)
      return 0;
    else
      return v6;
  }
  else
  {
    if (MEMORY[0x18])
      v9 = MEMORY[0x18] == 24;
    else
      v9 = 1;
    if (v9)
      return 0;
    else
      return MEMORY[0x18] - 8;
  }
}

void mlir::scf::ParallelOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, void (*a10)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t), uint64_t a11)
{
  int v15;
  uint64_t DenseI32ArrayAttr;
  mlir::StringAttr *Context;
  uint64_t v20;
  mlir::MLIRContext *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  _OWORD *v32;
  unint64_t v33;
  uint64_t IndexType;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  int64x2_t v39;
  int64x2_t *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  int64x2_t v46;
  int64x2_t *v47;
  _QWORD *v48;
  _QWORD *Block;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56[2];
  unint64_t v57[2];
  unint64_t v58[2];
  void *v59;
  uint64_t v60;
  _QWORD v61[8];
  __n128 v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD v71[4];
  __n128 v72;
  uint64_t v73;

  v15 = a4;
  v73 = *MEMORY[0x1E0C80C00];
  v72 = a9;
  mlir::OperationState::addOperands(a2, a3, a4);
  mlir::OperationState::addOperands(a2, a5, a6);
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::OperationState::addOperands(a2, a9.n128_i64[0], a9.n128_i64[1]);
  v71[0] = v15;
  v71[1] = a6;
  v71[2] = a8;
  v71[3] = a9.n128_u32[2];
  DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v71, 4);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  LOWORD(v65) = 261;
  v62.n128_u64[0] = (unint64_t)"operandSegmentSizes";
  v62.n128_u64[1] = 19;
  v20 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v62);
  mlir::NamedAttribute::NamedAttribute(&v59, v20, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v59, v60);
  mlir::ValueRange::getTypes(&v72, &v62);
  v22 = v62.n128_i64[1];
  v23 = (void *)v62.n128_u64[0];
  v24 = v63;
  v25 = v64;
  v26 = v64 - v62.n128_u32[2];
  v27 = *(unsigned int *)(a2 + 72);
  v28 = v64 - v62.n128_u64[1] + v27;
  if (v28 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v28, 8);
    v27 = *(unsigned int *)(a2 + 72);
  }
  v29 = *(_QWORD *)(a2 + 64);
  v59 = v23;
  v60 = v22;
  if (v25 != v22 || v23 != v24)
  {
    v30 = (unint64_t *)(v29 + 8 * v27);
    do
    {
      *v30++ = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v59, v22) + 8) & 0xFFFFFFFFFFFFFFF8;
      v22 = ++v60;
    }
    while (v59 != v24 || v22 != v25);
    LODWORD(v27) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v27 + v26;
  v32 = (_OWORD *)(a1 + 16);
  v55 = *(_OWORD *)(a1 + 16);
  v33 = a8;
  IndexType = mlir::Builder::getIndexType((mlir::IndexType **)a1, v21);
  v35 = IndexType;
  v62.n128_u64[0] = (unint64_t)&v63;
  v62.n128_u32[3] = 8;
  if (a8 < 9uLL)
  {
    if (!(_DWORD)a8)
    {
      v62.n128_u32[2] = a8;
      v59 = v61;
      HIDWORD(v60) = 8;
      LODWORD(a8) = 0;
      goto LABEL_44;
    }
    v63 = (void *)IndexType;
    if (a8 != 1)
    {
      v64 = IndexType;
      if (a8 != 2)
      {
        v65 = IndexType;
        if (a8 != 3)
        {
          v66 = IndexType;
          if (a8 != 4)
          {
            v67 = IndexType;
            if (a8 != 5)
            {
              v68 = IndexType;
              if (a8 != 6)
              {
                v69 = IndexType;
                if (a8 != 7)
                {
                  v41 = (unint64_t *)&v70;
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v62.n128_u32[2] = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, &v63, a8, 8);
    v36 = a8 & 3;
    v37 = a8 - v36;
    v38 = (unint64_t *)(v62.n128_u64[0] + 8 * v37);
    v39 = vdupq_n_s64(v35);
    v40 = (int64x2_t *)(v62.n128_u64[0] + 16);
    do
    {
      v40[-1] = v39;
      *v40 = v39;
      v40 += 2;
      v37 -= 4;
    }
    while (v37);
    if ((a8 & 3) != 0)
    {
      *v38 = v35;
      if (v36 != 1)
      {
        v38[1] = v35;
        if (v36 != 2)
        {
          v41 = v38 + 2;
LABEL_19:
          *v41 = v35;
        }
      }
    }
  }
  v62.n128_u32[2] = a8;
  v59 = v61;
  v60 = 0x800000000;
  v42 = *(_QWORD *)a2;
  if (a8 < 9uLL)
  {
    v61[0] = *(_QWORD *)a2;
    if (a8 != 1)
    {
      v61[1] = v42;
      if (a8 != 2)
      {
        v61[2] = v42;
        if (a8 != 3)
        {
          v61[3] = v42;
          if (a8 != 4)
          {
            v61[4] = v42;
            if (a8 != 5)
            {
              v61[5] = v42;
              if (a8 != 6)
              {
                v61[6] = v42;
                if (a8 != 7)
                  v61[7] = v42;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, a8, 8);
    v43 = a8 & 3;
    v44 = a8 - v43;
    v45 = (unint64_t *)((char *)v59 + 8 * v44);
    v46 = vdupq_n_s64(v42);
    v47 = (int64x2_t *)((char *)v59 + 16);
    do
    {
      v47[-1] = v46;
      *v47 = v46;
      v47 += 2;
      v44 -= 4;
    }
    while (v44);
    if ((a8 & 3) != 0)
    {
      *v45 = v42;
      if (v43 != 1)
      {
        v45[1] = v42;
        if (v43 != 2)
          v45[2] = v42;
      }
    }
  }
LABEL_44:
  LODWORD(v60) = a8;
  v48 = (_QWORD *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  mlir::ValueRange::ValueRange(v58, v62.n128_i64[0], v62.n128_u32[2]);
  Block = mlir::OpBuilder::createBlock((_QWORD *)a1, (uint64_t)v48, 0, v58[0], v58[1], (uint64_t)v59, v60);
  if (a10)
  {
    v50 = Block;
    v51 = Block[5];
    *(_QWORD *)(a1 + 16) = Block;
    *(_QWORD *)(a1 + 24) = v51;
    v52 = *(_QWORD *)a2;
    v53 = Block[6];
    if ((Block[7] - v53) >> 3 >= v33)
      v54 = v33;
    else
      v54 = (Block[7] - v53) >> 3;
    mlir::ValueRange::ValueRange(v57, v53, v54);
    mlir::ValueRange::ValueRange(v56, v50[6] + 8 * v33, ((uint64_t)(v50[7] - v50[6]) >> 3) - v33);
    a10(a11, a1, v52, v57[0], v57[1], v56[0], v56[1]);
  }
  mlir::impl::ensureRegionTerminator(v48, a1, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ParallelOp>::buildTerminator);
  if (v59 != v61)
    free(v59);
  if ((void **)v62.n128_u64[0] != &v63)
    free((void *)v62.n128_u64[0]);
  if ((_QWORD)v55)
  {
    *v32 = v55;
  }
  else
  {
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t mlir::scf::ParallelOp::verify(uint64_t **this)
{
  unint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t ConstantIntValue;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const void **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD **v85;
  _QWORD **v86;
  void *v87;
  _QWORD *v88;
  void *v89;
  void *v90;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  BOOL v95;
  unint64_t v96;
  BOOL v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  unint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int16 v109;
  uint64_t *v110;
  _OWORD v111[2];
  const void **v112;
  uint64_t v113;
  _BYTE v114[16];
  __int16 v115;
  __int128 v116;
  __int128 v117;
  _OWORD v118[6];
  void *v119;
  _QWORD *v120;
  void *__p;
  _QWORD **v122;
  char v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)*this + 11);
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * ((v2 >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *((_DWORD *)v3 + 2);
  if ((v2 & 0x800000) != 0)
  {
    v5 = (*this)[9];
    if (v4)
      goto LABEL_6;
  }
  else
  {
    v5 = 0;
    if (v4)
    {
LABEL_6:
      v6 = (*((_DWORD *)v3 + 1) + *(_DWORD *)v3);
      v7 = (v4 + v6) - v6;
      v8 = (_QWORD *)(v5 + 32 * v6 + 24);
      v9 = v7;
      do
      {
        ConstantIntValue = mlir::getConstantIntValue(*v8 | 4);
        if (v11)
          v12 = ConstantIntValue <= 0;
        else
          v12 = 0;
        if (v12)
        {
          v112 = (const void **)"constant step operand must be positive";
          v115 = 259;
          mlir::OpState::emitOpError(this, &v112, (uint64_t)&v116);
          v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
          if ((_QWORD)v116)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
          if (!v123)
            return v22;
          v23 = (_QWORD **)__p;
          if (__p)
          {
            v24 = v122;
            v25 = __p;
            if (v122 != __p)
            {
              do
                v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
              while (v24 != v23);
              v25 = __p;
            }
            v122 = v23;
            operator delete(v25);
          }
          v26 = v119;
          if (!v119)
            goto LABEL_117;
          v27 = v120;
          v28 = v119;
          if (v120 == v119)
            goto LABEL_116;
          do
          {
            v30 = (void *)*--v27;
            v29 = v30;
            *v27 = 0;
            if (v30)
              operator delete[](v29);
          }
          while (v27 != v26);
          goto LABEL_115;
        }
        v8 += 4;
        --v9;
      }
      while (v9);
      v13 = *(_QWORD *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                                                   + 8]
                        + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                        + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)*this + 10)
                      + 8);
      if (v13)
        v14 = v13 - 8;
      else
        v14 = 0;
      v16 = *(_QWORD *)(v14 + 48);
      v15 = *(_QWORD *)(v14 + 56);
      if (v7 == ((unint64_t)(v15 - v16) >> 3))
      {
        if (v15 != v16)
        {
          v17 = 8 * ((v15 - v16) >> 3);
          while (1)
          {
            *(_QWORD *)&v116 = *(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!mlir::Type::isIndex((mlir::Type *)&v116))
              break;
            v16 += 8;
            v17 -= 8;
            if (!v17)
              goto LABEL_20;
          }
          v112 = (const void **)"expects arguments for the induction variable to be of index type";
          v115 = 259;
          mlir::OpState::emitOpError(this, &v112, (uint64_t)&v116);
          v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
          if ((_QWORD)v116)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
          if (v123)
          {
            v56 = (_QWORD **)__p;
            if (__p)
            {
              v57 = v122;
              v58 = __p;
              if (v122 != __p)
              {
                do
                  v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
                while (v57 != v56);
                v58 = __p;
              }
              v122 = v56;
              operator delete(v58);
            }
            v59 = v119;
            if (v119)
            {
              v60 = v120;
              v61 = v119;
              if (v120 != v119)
              {
                do
                {
                  v63 = (void *)*--v60;
                  v62 = v63;
                  *v60 = 0;
                  if (v63)
                    operator delete[](v62);
                }
                while (v60 != v59);
                v61 = v119;
              }
              v120 = v59;
              operator delete(v61);
            }
            v78 = (const void **)*((_QWORD *)&v117 + 1);
            if (*((_OWORD **)&v117 + 1) != (_OWORD *)((char *)v118 + 8))
              goto LABEL_118;
          }
          return v22;
        }
LABEL_20:
        v18 = verifyAndGetTerminator<mlir::scf::YieldOp>(*this, (_QWORD *)((((unint64_t)&(*this)[2* (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ 8]+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10)), (const void **)"expects body to terminate with 'scf.yield'", (const char *)0x2A);
        v110 = (uint64_t *)v18;
        if (!v18)
          return 0;
        if ((*(_BYTE *)(v18 + 46) & 0x80) != 0 && *(_DWORD *)(v18 + 68))
        {
          v109 = 257;
          mlir::OpState::emitOpError(&v110, (const void ***)&v107, (uint64_t)&v116);
          v19 = (_QWORD *)mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "not allowed to have operands inside '");
          v20 = (uint64_t)v19;
          if (*v19)
          {
            v115 = 262;
            v112 = (const void **)"scf.parallel";
            v113 = 12;
            mlir::Diagnostic::operator<<((uint64_t)(v19 + 1), &v112);
          }
          v21 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v20, "'");
          v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v21);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v116);
          return v22;
        }
        mlir::Block::getOps<mlir::scf::ReduceOp>(v14, (mlir::GenericProgramPoint **)&v116);
        v112 = (const void **)v114;
        v113 = 0x400000000;
        v107 = v116;
        v108 = v117;
        v111[0] = v118[0];
        v111[1] = v118[1];
        llvm::SmallVectorImpl<mlir::scf::ReduceOp>::append<mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>,void>((uint64_t)&v112, (uint64_t)&v107, (mlir::GenericProgramPoint **)v111);
        v64 = *this;
        v65 = *((unsigned int *)*this + 9);
        *(_QWORD *)&v111[0] = v65;
        v66 = v113;
        v106 = v113;
        mlir::scf::ParallelOp::getInitVals((mlir::scf::ParallelOp *)this);
        v105 = v67;
        if ((_DWORD)v65 != (_DWORD)v66)
        {
          v109 = 257;
          mlir::OpState::emitOpError(this, (const void ***)&v107, (uint64_t)&v116);
          v74 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "expects number of results: ");
          v75 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v74, (uint64_t *)v111);
          v76 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v75, " to be the same as number of reductions: ");
          v77 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v76, &v106);
          goto LABEL_97;
        }
        if (v67 == v65)
        {
          if ((_DWORD)v65)
            v68 = (uint64_t)(v64 - 2);
          else
            v68 = 0;
          if ((_DWORD)v65)
          {
            v69 = 0;
            v70 = v112;
            v71 = 8 * v66 - 8;
            v72 = v65 - 1;
            v22 = 1;
            while (1)
            {
              v104 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v68, v69) + 8) & 0xFFFFFFFFFFFFFFF8;
              v103 = (uint64_t *)v70[v69];
              v102 = *(_QWORD *)(*(_QWORD *)(v103[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
              if (v104 != v102)
                break;
              if (v72 != v69)
              {
                ++v69;
                v73 = v71;
                v71 -= 8;
                if (v73)
                  continue;
              }
              goto LABEL_98;
            }
            v109 = 257;
            mlir::OpState::emitOpError(&v103, (const void ***)&v107, (uint64_t)&v116);
            v82 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "expects type of reduce: ");
            v83 = mlir::InFlightDiagnostic::append<mlir::Type &>(v82, (uint64_t *)&v102);
            v84 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v83, " to be the same as result type: ");
            v77 = mlir::InFlightDiagnostic::append<mlir::Type &>(v84, (uint64_t *)&v104);
LABEL_97:
            v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v77);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v116);
          }
          else
          {
            v22 = 1;
          }
LABEL_98:
          v78 = v112;
          if (v112 != (const void **)v114)
            goto LABEL_118;
          return v22;
        }
        v109 = 257;
        mlir::OpState::emitOpError(this, (const void ***)&v107, (uint64_t)&v116);
        v79 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "expects number of results: ");
        v80 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v79, (uint64_t *)v111);
        v81 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v80, " to be the same as number of initial values: ");
        v77 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v81, &v105);
        goto LABEL_97;
      }
      v115 = 257;
      mlir::OpState::emitOpError(this, &v112, (uint64_t)&v116);
      if ((_QWORD)v116)
      {
        LODWORD(v107) = 3;
        *((_QWORD *)&v107 + 1) = "expects the same number of induction variables: ";
        *(_QWORD *)&v108 = 48;
        v31 = (char *)&v107;
        v32 = *((_QWORD *)&v117 + 1);
        if (LODWORD(v118[0]) >= DWORD1(v118[0]))
        {
          v92 = LODWORD(v118[0]) + 1;
          if (*((_QWORD *)&v117 + 1) <= (unint64_t)&v107
            && *((_QWORD *)&v117 + 1) + 24 * (unint64_t)LODWORD(v118[0]) > (unint64_t)&v107)
          {
            v98 = (char *)&v107 - *((_QWORD *)&v117 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v92, 24);
            v32 = *((_QWORD *)&v117 + 1);
            v31 = &v98[*((_QWORD *)&v117 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v92, 24);
            v31 = (char *)&v107;
            v32 = *((_QWORD *)&v117 + 1);
          }
        }
        v33 = v32 + 24 * LODWORD(v118[0]);
        v34 = *(_OWORD *)v31;
        *(_QWORD *)(v33 + 16) = *((_QWORD *)v31 + 2);
        *(_OWORD *)v33 = v34;
        ++LODWORD(v118[0]);
        if ((_QWORD)v116)
        {
          v35 = *(_QWORD *)(v14 + 56) - *(_QWORD *)(v14 + 48);
          LODWORD(v107) = 5;
          *((_QWORD *)&v107 + 1) = (v35 >> 3);
          v36 = (char *)&v107;
          v37 = *((_QWORD *)&v117 + 1);
          if (LODWORD(v118[0]) >= DWORD1(v118[0]))
          {
            v93 = LODWORD(v118[0]) + 1;
            if (*((_QWORD *)&v117 + 1) <= (unint64_t)&v107
              && *((_QWORD *)&v117 + 1) + 24 * (unint64_t)LODWORD(v118[0]) > (unint64_t)&v107)
            {
              v99 = (char *)&v107 - *((_QWORD *)&v117 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v93, 24);
              v37 = *((_QWORD *)&v117 + 1);
              v36 = &v99[*((_QWORD *)&v117 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v93, 24);
              v36 = (char *)&v107;
              v37 = *((_QWORD *)&v117 + 1);
            }
          }
          v38 = v37 + 24 * LODWORD(v118[0]);
          v39 = *(_OWORD *)v36;
          *(_QWORD *)(v38 + 16) = *((_QWORD *)v36 + 2);
          *(_OWORD *)v38 = v39;
          v40 = ++LODWORD(v118[0]);
          if ((_QWORD)v116)
          {
            LODWORD(v107) = 3;
            *((_QWORD *)&v107 + 1) = " as bound and step values: ";
            *(_QWORD *)&v108 = 27;
            v41 = (char *)&v107;
            v42 = *((_QWORD *)&v117 + 1);
            if (v40 >= DWORD1(v118[0]))
            {
              v94 = v40 + 1;
              v95 = *((_QWORD *)&v117 + 1) + 24 * (unint64_t)v40 > (unint64_t)&v107;
              if (*((_QWORD *)&v117 + 1) <= (unint64_t)&v107 && v95)
              {
                v100 = (char *)&v107 - *((_QWORD *)&v117 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v94, 24);
                v42 = *((_QWORD *)&v117 + 1);
                v41 = &v100[*((_QWORD *)&v117 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v94, 24);
                v41 = (char *)&v107;
                v42 = *((_QWORD *)&v117 + 1);
              }
            }
            v43 = v42 + 24 * LODWORD(v118[0]);
            v44 = *(_OWORD *)v41;
            *(_QWORD *)(v43 + 16) = *((_QWORD *)v41 + 2);
            *(_OWORD *)v43 = v44;
            v45 = ++LODWORD(v118[0]);
            if ((_QWORD)v116)
            {
              LODWORD(v107) = 5;
              *((_QWORD *)&v107 + 1) = v7;
              v46 = (char *)&v107;
              v47 = *((_QWORD *)&v117 + 1);
              if (v45 >= DWORD1(v118[0]))
              {
                v96 = v45 + 1;
                v97 = *((_QWORD *)&v117 + 1) + 24 * (unint64_t)v45 > (unint64_t)&v107;
                if (*((_QWORD *)&v117 + 1) <= (unint64_t)&v107 && v97)
                {
                  v101 = (char *)&v107 - *((_QWORD *)&v117 + 1);
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v96, 24);
                  v47 = *((_QWORD *)&v117 + 1);
                  v46 = &v101[*((_QWORD *)&v117 + 1)];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v96, 24);
                  v46 = (char *)&v107;
                  v47 = *((_QWORD *)&v117 + 1);
                }
              }
              v48 = v47 + 24 * LODWORD(v118[0]);
              v49 = *(_OWORD *)v46;
              *(_QWORD *)(v48 + 16) = *((_QWORD *)v46 + 2);
              *(_OWORD *)v48 = v49;
              ++LODWORD(v118[0]);
            }
          }
        }
      }
      v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
      if ((_QWORD)v116)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
      if (!v123)
        return v22;
      v50 = (_QWORD **)__p;
      if (__p)
      {
        v51 = v122;
        v52 = __p;
        if (v122 != __p)
        {
          do
            v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          v52 = __p;
        }
        v122 = v50;
        operator delete(v52);
      }
      v26 = v119;
      if (!v119)
        goto LABEL_117;
      v53 = v120;
      v28 = v119;
      if (v120 == v119)
        goto LABEL_116;
      do
      {
        v55 = (void *)*--v53;
        v54 = v55;
        *v53 = 0;
        if (v55)
          operator delete[](v54);
      }
      while (v53 != v26);
      goto LABEL_115;
    }
  }
  v112 = (const void **)"needs at least one tuple element for lowerBound, upperBound and step";
  v115 = 259;
  mlir::OpState::emitOpError(this, &v112, (uint64_t)&v116);
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
  if ((_QWORD)v116)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
  if (!v123)
    return v22;
  v85 = (_QWORD **)__p;
  if (__p)
  {
    v86 = v122;
    v87 = __p;
    if (v122 != __p)
    {
      do
        v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
      while (v86 != v85);
      v87 = __p;
    }
    v122 = v85;
    operator delete(v87);
  }
  v26 = v119;
  if (!v119)
    goto LABEL_117;
  v88 = v120;
  v28 = v119;
  if (v120 != v119)
  {
    do
    {
      v90 = (void *)*--v88;
      v89 = v90;
      *v88 = 0;
      if (v90)
        operator delete[](v89);
    }
    while (v88 != v26);
LABEL_115:
    v28 = v119;
  }
LABEL_116:
  v120 = v26;
  operator delete(v28);
LABEL_117:
  v78 = (const void **)*((_QWORD *)&v117 + 1);
  if (*((_OWORD **)&v117 + 1) != (_OWORD *)((char *)v118 + 8))
LABEL_118:
    free(v78);
  return v22;
}

uint64_t verifyAndGetTerminator<mlir::scf::YieldOp>(uint64_t *a1, _QWORD *a2, const void **a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const void ***v16;
  uint64_t v17;
  __int128 v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v28;
  BOOL v29;
  char *v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD **v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((_QWORD *)*a2 == a2
    || ((v7 = a2[1]) != 0 ? (v8 = v7 - 8) : (v8 = 0),
        v9 = *(mlir::GenericProgramPoint **)(v8 + 32),
        v9 == (mlir::GenericProgramPoint *)(v8 + 32)))
  {
    v11 = 0;
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v9);
    v11 = v10;
    if (v10
      && *(_UNKNOWN **)(*(_QWORD *)(v10 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
    {
      return v11;
    }
  }
  v34 = 261;
  v31 = a3;
  v32 = a4;
  mlir::Operation::emitOpError(a1, &v31, (uint64_t)&v35);
  if (v11)
  {
    v12 = mlir::Diagnostic::attachNote(&v36, *(_QWORD *)(v11 + 24), 1);
    v13 = v12 + 16;
    v14 = *(_QWORD *)(v12 + 16);
    LODWORD(v31) = 3;
    v32 = "terminator here";
    v33 = 15;
    v15 = *(unsigned int *)(v12 + 24);
    v16 = &v31;
    if (v15 >= *(_DWORD *)(v12 + 28))
    {
      v28 = v15 + 1;
      v29 = v14 + 24 * v15 > (unint64_t)&v31;
      if (v14 <= (unint64_t)&v31 && v29)
      {
        v30 = (char *)&v31 - v14;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(v12 + 32), v28, 24);
        v14 = *(_QWORD *)(v12 + 16);
        v16 = (const void ***)&v30[v14];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(v12 + 32), v28, 24);
        v14 = *(_QWORD *)(v12 + 16);
        v16 = &v31;
      }
    }
    v17 = v14 + 24 * *(unsigned int *)(v12 + 24);
    v18 = *(_OWORD *)v16;
    *(_QWORD *)(v17 + 16) = v16[2];
    *(_OWORD *)v17 = v18;
    ++*(_DWORD *)(v12 + 24);
  }
  if (v35)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  if (v43)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v42;
      v21 = __p;
      if (v42 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v42 = v19;
      operator delete(v21);
    }
    v22 = v39;
    if (v39)
    {
      v23 = v40;
      v24 = v39;
      if (v40 != v39)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v39;
      }
      v40 = v22;
      operator delete(v24);
    }
    if (v37 != &v38)
      free(v37);
  }
  return 0;
}

void mlir::Block::getOps<mlir::scf::ReduceOp>(uint64_t a1@<X0>, mlir::GenericProgramPoint **a2@<X8>)
{
  mlir::GenericProgramPoint *v3;
  mlir::GenericProgramPoint *v4;
  uint64_t v5;

  v3 = (mlir::GenericProgramPoint *)(a1 + 32);
  v4 = (mlir::GenericProgramPoint *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) != a1 + 32)
  {
    v4 = *(mlir::GenericProgramPoint **)(a1 + 40);
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v4);
      if (*(_UNKNOWN **)(*(_QWORD *)(v5 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ReduceOp,void>::id)
        break;
      v4 = (mlir::GenericProgramPoint *)*((_QWORD *)v4 + 1);
      if (v4 == v3)
      {
        v4 = v3;
        break;
      }
    }
  }
  *a2 = v4;
  a2[1] = v3;
  a2[2] = (mlir::GenericProgramPoint *)mlir::detail::op_filter_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::filter;
  a2[3] = (mlir::GenericProgramPoint *)mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::unwrap;
  a2[4] = v3;
  a2[5] = v3;
  a2[6] = (mlir::GenericProgramPoint *)mlir::detail::op_filter_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::filter;
  a2[7] = (mlir::GenericProgramPoint *)mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::unwrap;
}

uint64_t mlir::scf::ParallelOp::getInitVals(mlir::scf::ParallelOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  else
    v2 = 0;
  v3 = (v2[2] + v2[1] + *v2);
  if ((v1 & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * v3;
  else
    return 32 * v3;
}

uint64_t mlir::scf::ParallelOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  mlir::MLIRContext *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  mlir::MLIRContext *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  mlir::MLIRContext *v22;
  _QWORD *v23;
  void *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t DenseI32ArrayAttr;
  uint64_t v32;
  _QWORD *v33;
  _DWORD v34[4];
  void *v35;
  uint64_t v36;
  _WORD v37[64];
  void *v38;
  uint64_t v39;
  _WORD v40[64];
  void *v41;
  uint64_t v42;
  _BYTE v43[128];
  void *v44;
  uint64_t v45;
  _BYTE v46[128];
  void *v47;
  uint64_t v48;
  _QWORD v49[34];

  v49[32] = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v47 = v49;
  v48 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 736))(a1, &v47, 1, 0, 0))
  {
    v28 = 0;
    v29 = v47;
    if (v47 == v49)
      return v28;
    goto LABEL_31;
  }
  v44 = v46;
  v45 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1)
    || !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 688))(a1, &v44, 1, 1, v48))
  {
    goto LABEL_27;
  }
  IndexType = mlir::Builder::getIndexType(v4, v5);
  if ((_DWORD)v45)
  {
    v7 = IndexType;
    v8 = (char *)v44;
    v9 = 32 * v45;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, v7, (uint64_t)a2 + 16))
    {
      v8 += 32;
      v9 -= 32;
      if (!v9)
        goto LABEL_8;
    }
LABEL_27:
    v28 = 0;
    goto LABEL_28;
  }
LABEL_8:
  v41 = v43;
  v42 = 0x400000000;
  v40[8] = 257;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "to", 2, &v38)&& (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 688))(a1, &v41, 1, 1, v48))
  {
    v11 = mlir::Builder::getIndexType(v4, v10);
    if (!(_DWORD)v42)
    {
LABEL_14:
      v38 = v40;
      v39 = 0x400000000;
      v37[8] = 257;
      if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "step", 4, &v35)&& (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 688))(a1, &v38, 1, 1, v48))
      {
        v16 = mlir::Builder::getIndexType(v4, v15);
        if ((_DWORD)v39)
        {
          v17 = v16;
          v18 = (char *)v38;
          v19 = 32 * v39;
          while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v18, v17, (uint64_t)a2 + 16))
          {
            v18 += 32;
            v19 -= 32;
            if (!v19)
              goto LABEL_20;
          }
          v28 = 0;
        }
        else
        {
LABEL_20:
          v35 = v37;
          v36 = 0x400000000;
          if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "init", 4)&& !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v35, 1, 1, 0xFFFFFFFFLL))
          {
            goto LABEL_45;
          }
          v20 = (uint64_t)a2 + 64;
          if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 536))(a1, (uint64_t)a2 + 64))
            goto LABEL_45;
          v21 = mlir::OperationState::addRegion(a2);
          v23 = (_QWORD *)v21;
          v24 = v47;
          if ((_DWORD)v48)
          {
            v33 = (_QWORD *)v21;
            v25 = (unint64_t)v48 << 6;
            v26 = (uint64_t *)((char *)v47 + 32);
            do
            {
              *v26 = mlir::Builder::getIndexType(v4, v22);
              v26 += 8;
              v25 -= 64;
            }
            while (v25);
            v24 = v47;
            v27 = v48;
            v23 = v33;
            v20 = (uint64_t)a2 + 64;
          }
          else
          {
            v27 = 0;
          }
          if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 744))(a1, v23, v24, v27, 0)&& (v34[0] = v45, v34[1] = v42, v34[2] = v39, v34[3] = v36, DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(v4, (uint64_t)v34, 4), mlir::OperationState::addAttribute(a2, (uint64_t)"operandSegmentSizes", 19, DenseI32ArrayAttr), (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112))&& (v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1), mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v35, v20, v32, (uint64_t)a2 + 16)))
          {
            mlir::impl::ensureRegionTerminator(v23, v4, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::buildTerminator);
            v28 = 1;
          }
          else
          {
LABEL_45:
            v28 = 0;
          }
          if (v35 != v37)
            free(v35);
        }
      }
      else
      {
        v28 = 0;
      }
      if (v38 != v40)
        free(v38);
      goto LABEL_36;
    }
    v12 = v11;
    v13 = (char *)v41;
    v14 = 32 * v42;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v13, v12, (uint64_t)a2 + 16))
    {
      v13 += 32;
      v14 -= 32;
      if (!v14)
        goto LABEL_14;
    }
  }
  v28 = 0;
LABEL_36:
  if (v41 != v43)
    free(v41);
LABEL_28:
  if (v44 != v46)
    free(v44);
  v29 = v47;
  if (v47 != v49)
LABEL_31:
    free(v29);
  return v28;
}

uint64_t mlir::scf::ParallelOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  _QWORD *v30;
  unint64_t v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  unint64_t v43;
  llvm::raw_ostream *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;
  unint64_t v51;
  int *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  llvm::raw_ostream *v61;
  llvm::raw_ostream *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  llvm::raw_ostream *v66;
  _BYTE *v67;
  mlir::Operation *v68;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v71;
  const char *AttrDictionary;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77[2];

  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_WORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 1uLL)
  {
    *v5 = 10272;
    *((_QWORD *)v4 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v4, " (", 2uLL);
  }
  v6 = *(_QWORD *)((((unint64_t)*this
                   + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6)
    v7 = v6 - 8;
  else
    v7 = 0;
  v8 = *(_QWORD **)(v7 + 48);
  v9 = *(_QWORD *)(v7 + 56);
  v10 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = v9 - (_QWORD)v8;
  if (v11)
  {
    v12 = (llvm::raw_ostream *)v10;
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *v8);
    if (v11 != 8)
    {
      v46 = v11 >> 3;
      v47 = v8 + 1;
      v48 = 8 * v46 - 8;
      do
      {
        v50 = (_WORD *)*((_QWORD *)v12 + 4);
        if (*((_QWORD *)v12 + 3) - (_QWORD)v50 > 1uLL)
        {
          *v50 = 8236;
          *((_QWORD *)v12 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v12, ", ", 2uLL);
        }
        v49 = *v47++;
        (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v49);
        v48 -= 8;
      }
      while (v48);
    }
  }
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v14 = *((_QWORD *)v13 + 4);
  if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 4)
  {
    *(_BYTE *)(v14 + 4) = 40;
    *(_DWORD *)v14 = 540876841;
    *((_QWORD *)v13 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v13, ") = (", 5uLL);
  }
  v15 = *((unsigned int *)*this + 11);
  v16 = *((unsigned int *)*this + 4 * ((v15 >> 23) & 1) + 16);
  if ((v15 & 0x800000) != 0)
    v17 = *((_QWORD *)*this + 9);
  else
    v17 = 0;
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  AttrDictionary = ", ";
  v74 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v17, 0, v17, v16, (uint64_t)a2, v18, (uint64_t)&AttrDictionary);
  v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v20 = *((_QWORD *)v19 + 4);
  if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 5)
  {
    *(_WORD *)(v20 + 4) = 10272;
    *(_DWORD *)v20 = 1869881385;
    *((_QWORD *)v19 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v19, ") to (", 6uLL);
  }
  v21 = *((unsigned int *)*this + 11);
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v22 = (unsigned int *)((char *)*this + 16 * ((v21 >> 23) & 1) + 64);
  else
    v22 = 0;
  v23 = *v22;
  v24 = v22[1];
  if ((v21 & 0x800000) != 0)
    v25 = *((_QWORD *)*this + 9);
  else
    v25 = 0;
  v26 = v25 + 32 * v23;
  v27 = v24 + v23 - v23;
  v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  AttrDictionary = ", ";
  v74 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v26, 0, v26, v27, (uint64_t)a2, v28, (uint64_t)&AttrDictionary);
  v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v30 = (_QWORD *)*((_QWORD *)v29 + 4);
  if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 7uLL)
  {
    *v30 = 0x2820706574732029;
    *((_QWORD *)v29 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v29, ") step (", 8uLL);
  }
  v31 = *((unsigned int *)*this + 11);
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v32 = (int *)((char *)*this + 16 * ((v31 >> 23) & 1) + 64);
  else
    v32 = 0;
  v33 = *v32;
  v34 = v32[1];
  v35 = v32[2];
  if ((v31 & 0x800000) != 0)
    v36 = *((_QWORD *)*this + 9);
  else
    v36 = 0;
  v37 = (v34 + v33);
  v38 = v36 + 32 * v37;
  v39 = (v35 + v37) - v37;
  v40 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  AttrDictionary = ", ";
  v74 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v38, 0, v38, v39, (uint64_t)a2, v40, (uint64_t)&AttrDictionary);
  v41 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v42 = (_BYTE *)*((_QWORD *)v41 + 4);
  if (*((_BYTE **)v41 + 3) == v42)
  {
    llvm::raw_ostream::write(v41, ")", 1uLL);
  }
  else
  {
    *v42 = 41;
    ++*((_QWORD *)v41 + 4);
  }
  v43 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v43 = 0;
  if (*(_DWORD *)(v43 + 12))
  {
    v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v45 = (_DWORD *)*((_QWORD *)v44 + 4);
    if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 6uLL)
    {
      *(_DWORD *)((char *)v45 + 3) = 673215593;
      *v45 = 1768843552;
      *((_QWORD *)v44 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v44, " init (", 7uLL);
    }
    v51 = *((unsigned int *)*this + 11);
    if (HIBYTE(*((_DWORD *)*this + 11)))
      v52 = (int *)((char *)*this + 16 * ((v51 >> 23) & 1) + 64);
    else
      v52 = 0;
    v53 = *v52;
    v54 = v52[1];
    v56 = v52[2];
    v55 = v52[3];
    if ((v51 & 0x800000) != 0)
      v57 = *((_QWORD *)*this + 9);
    else
      v57 = 0;
    v58 = (v54 + v53 + v56);
    v59 = v57 + 32 * v58;
    v60 = (v55 + v58) - v58;
    v61 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    AttrDictionary = ", ";
    v74 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v59, 0, v59, v60, (uint64_t)a2, v61, (uint64_t)&AttrDictionary);
    v62 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v63 = (_BYTE *)*((_QWORD *)v62 + 4);
    if (*((_BYTE **)v62 + 3) == v63)
    {
      llvm::raw_ostream::write(v62, ")", 1uLL);
    }
    else
    {
      *v63 = 41;
      ++*((_QWORD *)v62 + 4);
    }
  }
  v64 = *((unsigned int *)*this + 9);
  v65 = (uint64_t)*this - 16;
  if (!(_DWORD)v64)
    v65 = 0;
  v77[0] = v65;
  v77[1] = v64;
  mlir::OperandRange::getTypes(v77, (uint64_t *)&AttrDictionary);
  if (AttrDictionary != v75 || v74 != v76)
    mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>((uint64_t)a2, (uint64_t *)&AttrDictionary);
  v66 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v67 = (_BYTE *)*((_QWORD *)v66 + 4);
  if ((unint64_t)v67 >= *((_QWORD *)v66 + 3))
  {
    llvm::raw_ostream::write(v66, 32);
  }
  else
  {
    *((_QWORD *)v66 + 4) = v67 + 1;
    *v67 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), 0, 1, 0);
  v68 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v68);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v68 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  AttrDictionary = "operandSegmentSizes";
  v74 = 19;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(_QWORD *)a2 + 192))(a2, Value, v71, &AttrDictionary, 1);
}

void mlir::scf::ParallelOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"scf.parallel", 12, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E1A528;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ParallelOpSingleOrZeroIterationDimsFolder]";
  v73 = 114;
  v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9)
    v10 = v9;
  else
    v10 = v73;
  v11 = &v72[v10];
  v12 = v73 - v10;
  if (v73 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v73 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"scf.parallel", 12, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E19518;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::MergeNestedParallelLoops]";
  v73 = 97;
  v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43)
    v44 = v43;
  else
    v44 = v73;
  v45 = &v72[v44];
  v46 = v73 - v44;
  if (v73 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v73 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = &v55[8 * v51];
  v57 = &v55[8 * v54];
  *(_QWORD *)v56 = v38;
  v42 = (uint64_t)(v56 + 8);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 -= v61;
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *((_QWORD *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

uint64_t mlir::scf::ReduceOp::verifyRegions(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _QWORD **v33;
  _QWORD **v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  int64_t v43;
  const void **v44[4];
  __int16 v45;
  int v46;
  const char *v47;
  uint64_t v48;
  _QWORD v49[3];
  void *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[96];
  void *v54;
  _QWORD *v55;
  void *__p;
  _QWORD **v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *(_QWORD *)((((unint64_t)*this + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8) + 87) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v3)
    v4 = v3 - 8;
  else
    v4 = 0;
  if (*(_QWORD *)(v4 + 32) == v4 + 32)
  {
    v44[0] = (const void **)"the block inside reduce should not be empty";
    v45 = 259;
    mlir::OpState::emitOpError(this, v44, (uint64_t)v49);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    if (v58)
    {
      v33 = (_QWORD **)__p;
      if (__p)
      {
        v34 = v57;
        v35 = __p;
        if (v57 != __p)
        {
          do
            v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          v35 = __p;
        }
        v57 = v33;
        operator delete(v35);
      }
      v14 = v54;
      if (!v54)
        goto LABEL_60;
      v36 = v55;
      v16 = v54;
      if (v55 == v54)
        goto LABEL_59;
      do
      {
        v38 = (void *)*--v36;
        v37 = v38;
        *v36 = 0;
        if (v38)
          operator delete[](v37);
      }
      while (v36 != v14);
      goto LABEL_58;
    }
    return v10;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v4 + 48);
  v7 = *(_QWORD *)(v4 + 56);
  if (((v7 - v6) & 0x7FFFFFFF8) != 0x10)
    goto LABEL_25;
  if (v7 != v6)
  {
    v8 = 8 * ((v7 - v6) >> 3);
    while (v5 == (*(_QWORD *)(*(_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v6 += 8;
      v8 -= 8;
      if (!v8)
        goto LABEL_10;
    }
LABEL_25:
    v45 = 257;
    mlir::OpState::emitOpError(this, v44, (uint64_t)v49);
    if (v49[0])
    {
      v46 = 3;
      v47 = "expects two arguments to reduce block of type ";
      v48 = 46;
      v19 = &v46;
      v20 = (char *)v50;
      if (v51 >= v52)
      {
        v40 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          v42 = (char *)&v46 - (_BYTE *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v40, 24);
          v20 = (char *)v50;
          v19 = (int *)((char *)v50 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v40, 24);
          v19 = &v46;
          v20 = (char *)v50;
        }
      }
      v21 = &v20[24 * v51];
      v22 = *(_OWORD *)v19;
      *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v21 = v22;
      ++v51;
      if (v49[0])
      {
        v23 = &v46;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v46, v5);
        v24 = (char *)v50;
        if (v51 >= v52)
        {
          v41 = v51 + 1;
          if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
          {
            v43 = (char *)&v46 - (_BYTE *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v41, 24);
            v24 = (char *)v50;
            v23 = (int *)((char *)v50 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v41, 24);
            v23 = &v46;
            v24 = (char *)v50;
          }
        }
        v25 = &v24[24 * v51];
        v26 = *(_OWORD *)v23;
        *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
        *(_OWORD *)v25 = v26;
        ++v51;
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    if (v58)
    {
      v27 = (_QWORD **)__p;
      if (__p)
      {
        v28 = v57;
        v29 = __p;
        if (v57 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v57 = v27;
        operator delete(v29);
      }
      v14 = v54;
      if (!v54)
        goto LABEL_60;
      v30 = v55;
      v16 = v54;
      if (v55 == v54)
        goto LABEL_59;
      do
      {
        v32 = (void *)*--v30;
        v31 = v32;
        *v30 = 0;
        if (v32)
          operator delete[](v31);
      }
      while (v30 != v14);
      goto LABEL_58;
    }
    return v10;
  }
LABEL_10:
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)v4);
  if (*(_UNKNOWN **)(*(_QWORD *)(v9 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ReduceReturnOp,void>::id)
    return 1;
  v44[0] = (const void **)"the block inside reduce should be terminated with a 'scf.reduce.return' op";
  v45 = 259;
  mlir::OpState::emitOpError(this, v44, (uint64_t)v49);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
  if (v49[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
  if (v58)
  {
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v57;
      v13 = __p;
      if (v57 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v57 = v11;
      operator delete(v13);
    }
    v14 = v54;
    if (!v54)
      goto LABEL_60;
    v15 = v55;
    v16 = v54;
    if (v55 == v54)
    {
LABEL_59:
      v55 = v14;
      operator delete(v16);
LABEL_60:
      if (v50 != v53)
        free(v50);
      return v10;
    }
    do
    {
      v18 = (void *)*--v15;
      v17 = v18;
      *v15 = 0;
      if (v18)
        operator delete[](v17);
    }
    while (v15 != v14);
LABEL_58:
    v16 = v54;
    goto LABEL_59;
  }
  return v10;
}

BOOL mlir::scf::ReduceOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  memset(v7, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v7, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 544))(a1, &v6)
    || !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v7, v6, (uint64_t)a2 + 16))
  {
    return 0;
  }
  v4 = mlir::OperationState::addRegion(a2);
  return (*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0) != 0;
}

uint64_t mlir::scf::ReduceOp::print(mlir::scf::ReduceOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _WORD *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;

  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "(", 1uLL);
  }
  else
  {
    *v5 = 40;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 1uLL)
  {
    *v7 = 8233;
    *((_QWORD *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, ") ", 2uLL);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 32;
    *(_WORD *)v9 = 14880;
    *((_QWORD *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, ((*(_QWORD *)this+ 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(*(_QWORD *)this + 40), 1, 1, 0);
}

uint64_t mlir::scf::ReduceReturnOp::verify(uint64_t **this)
{
  unint64_t v2;
  int *v3;
  char *v4;
  char *v5;
  __int128 v6;
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  const void **v33;
  __int16 v34;
  int v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(mlir::Block::getParentOp((mlir::Block *)(*this)[2]) + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v2 == (*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v34 = 257;
  mlir::OpState::emitOpError(this, &v33, (uint64_t)v38);
  if (v38[0])
  {
    v35 = 3;
    v36 = "needs to have type ";
    v37 = 19;
    v3 = &v35;
    v4 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v35 && (char *)v39 + 24 * v40 > (char *)&v35)
      {
        v30 = (char *)&v35 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = (char *)v39;
        v3 = (int *)((char *)v39 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v3 = &v35;
        v4 = (char *)v39;
      }
    }
    v5 = &v4[24 * v40];
    v6 = *(_OWORD *)v3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v5 = v6;
    ++v40;
    if (v38[0])
    {
      v7 = &v35;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v35, v2);
      v8 = (char *)v39;
      if (v40 >= v41)
      {
        v27 = v40 + 1;
        if (v39 <= &v35 && (char *)v39 + 24 * v40 > (char *)&v35)
        {
          v31 = (char *)&v35 - (_BYTE *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
          v8 = (char *)v39;
          v7 = (int *)((char *)v39 + v31);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
          v7 = &v35;
          v8 = (char *)v39;
        }
      }
      v9 = &v8[24 * v40];
      v10 = *(_OWORD *)v7;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v9 = v10;
      v11 = ++v40;
      if (v38[0])
      {
        v35 = 3;
        v36 = " (the type of the enclosing ReduceOp)";
        v37 = 37;
        v12 = &v35;
        v13 = (char *)v39;
        if (v11 >= v41)
        {
          v28 = v11 + 1;
          v29 = (char *)v39 + 24 * v11 > (char *)&v35;
          if (v39 <= &v35 && v29)
          {
            v32 = (char *)&v35 - (_BYTE *)v39;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
            v13 = (char *)v39;
            v12 = (int *)((char *)v39 + v32);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
            v12 = &v35;
            v13 = (char *)v39;
          }
        }
        v14 = &v13[24 * v40];
        v15 = *(_OWORD *)v12;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
        *(_OWORD *)v14 = v15;
        ++v40;
      }
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v38);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

void mlir::scf::WhileOp::build(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t), uint64_t a8, void (*a9)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t), uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t Loc;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *Block;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int64x2_t v35;
  int64x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v42;
  uint64_t v43;
  unint64_t v44[2];
  __n128 v45;
  _QWORD v46[4];
  unint64_t v47[2];
  __n128 v48;
  uint64_t v49;
  unint64_t v50[2];
  void *v51;
  uint64_t v52;
  _BYTE v53[32];
  __n128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v54.n128_u64[0] = a5;
  v54.n128_u64[1] = a6;
  mlir::OperationState::addOperands(a2, a5, a6);
  v17 = *(unsigned int *)(a2 + 72);
  if (a4 + v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v17, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    v18 = 0;
    v19 = *(_QWORD *)(a2 + 64) + 8 * v17;
    do
    {
      *(_QWORD *)(v19 + 8 * v18) = mlir::TypeRange::dereference_iterator(a3, v18);
      ++v18;
    }
    while (a4 != v18);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + a4;
  v20 = (_OWORD *)(a1 + 16);
  v21 = *(_OWORD *)(a1 + 16);
  v51 = v53;
  v52 = 0x400000000;
  v42 = v21;
  if (a6 < 5)
  {
    v45 = (__n128)(unint64_t)a5;
    if (!a6)
      goto LABEL_18;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, a6, 8);
    v45 = (__n128)(unint64_t)a5;
  }
  v22 = 0;
  do
  {
    v43 = mlir::ValueRange::dereference_iterator(&v45, v22);
    Loc = mlir::Value::getLoc((mlir::Value *)&v43);
    v24 = v52;
    if (v52 >= (unint64_t)HIDWORD(v52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, v52 + 1, 8);
      v24 = v52;
    }
    *((_QWORD *)v51 + v24) = Loc;
    LODWORD(v52) = v52 + 1;
    v22 = ++v45.n128_u64[1];
  }
  while (v45.n128_u64[0] != a5 || v22 != a6);
LABEL_18:
  v26 = mlir::OperationState::addRegion((mlir::OperationState *)a2);
  mlir::ValueRange::getTypes(&v54, &v48);
  v28 = v48.n128_u64[1];
  v27 = v48.n128_u64[0];
  v29 = v49;
  v45 = v48;
  if (v48.n128_u64[1])
  {
    v27 = mlir::ValueRange::offset_base(&v45, v48.n128_i64[1]);
    v28 = v45.n128_u64[1];
  }
  mlir::TypeRange::TypeRange(v50, v27, v29 - v28);
  Block = mlir::OpBuilder::createBlock((_QWORD *)a1, v26, 0, v50[0], v50[1], (uint64_t)v51, v52);
  if (a7)
  {
    v31 = *(_QWORD *)a2;
    mlir::ValueRange::ValueRange(v47, *((_QWORD *)Block + 6), (uint64_t)(*((_QWORD *)Block + 7) - *((_QWORD *)Block + 6)) >> 3);
    a7(a8, a1, v31, v47[0], v47[1]);
  }
  v45.n128_u64[0] = (unint64_t)v46;
  v45.n128_u64[1] = 0x400000000;
  v32 = *(_QWORD *)a2;
  if (a4 < 5)
  {
    if (a4)
    {
      v46[0] = *(_QWORD *)a2;
      if (a4 != 1)
      {
        v46[1] = v32;
        if (a4 != 2)
        {
          v46[2] = v32;
          if (a4 != 3)
            v46[3] = v32;
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v46, a4, 8);
    v33 = (unint64_t *)(v45.n128_u64[0] + 8 * (a4 & 0xFFFFFFFFFFFFFFFCLL));
    v34 = a4 & 3;
    v35 = vdupq_n_s64(v32);
    v36 = (int64x2_t *)(v45.n128_u64[0] + 16);
    v37 = a4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v36[-1] = v35;
      *v36 = v35;
      v36 += 2;
      v37 -= 4;
    }
    while (v37);
    if (a4 != (a4 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        *v33++ = v32;
        --v34;
      }
      while (v34);
    }
  }
  v45.n128_u32[2] = a4;
  v38 = mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v39 = mlir::OpBuilder::createBlock((_QWORD *)a1, v38, 0, a3, a4, v45.n128_i64[0], v45.n128_u32[2]);
  if (a9)
  {
    v40 = *(_QWORD *)a2;
    mlir::ValueRange::ValueRange(v44, *((_QWORD *)v39 + 6), (uint64_t)(*((_QWORD *)v39 + 7) - *((_QWORD *)v39 + 6)) >> 3);
    a9(a10, a1, v40, v44[0], v44[1]);
  }
  if ((_QWORD *)v45.n128_u64[0] != v46)
    free((void *)v45.n128_u64[0]);
  if (v51 != v53)
    free(v51);
  if ((_QWORD)v42)
  {
    *v20 = v42;
  }
  else
  {
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void mlir::scf::WhileOp::getSuccessorRegions(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 44);
  if (!a2)
  {
    v7 = (_QWORD *)(((v4 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v4 + 40));
    if ((_QWORD *)*v7 == v7)
      goto LABEL_28;
    goto LABEL_17;
  }
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (_QWORD *)(((v4 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v4 + 40));
    if (v7 + 3 == a2)
    {
      if ((_QWORD *)*v7 == v7)
      {
LABEL_28:
        v18 = 0;
        v19 = 0;
        v24 = *(_DWORD *)(a3 + 8);
        if (v24 >= *(_DWORD *)(a3 + 12))
        {
LABEL_29:
          v42 = v7;
          goto LABEL_30;
        }
LABEL_21:
        v25 = (_QWORD *)(*(_QWORD *)a3 + 24 * v24);
        *v25 = v7;
        v21 = v25 + 1;
        goto LABEL_22;
      }
LABEL_17:
      v22 = v7[1];
      if (v22)
        v23 = v22 - 8;
      else
        v23 = 0;
      v18 = *(_QWORD *)(v23 + 48);
      v19 = (*(_QWORD *)(v23 + 56) - v18) >> 3;
      v24 = *(_DWORD *)(a3 + 8);
      if (v24 >= *(_DWORD *)(a3 + 12))
        goto LABEL_29;
      goto LABEL_21;
    }
  }
  v8 = *(unsigned int *)(v4 + 36);
  if ((_DWORD)v8)
    v9 = v4 - 16;
  else
    v9 = 0;
  v10 = *(_DWORD *)(a3 + 8);
  if (v10 >= *(_DWORD *)(a3 + 12))
  {
    v42 = 0;
    v31 = (char *)&v42;
    mlir::ValueRange::ValueRange(v43, v9, v8);
    v32 = *(unsigned int *)(a3 + 8);
    v33 = *(_QWORD *)a3;
    if (v32 >= *(_DWORD *)(a3 + 12))
    {
      v38 = v32 + 1;
      v39 = v33 + 24 * v32 > (unint64_t)&v42;
      if (v33 <= (unint64_t)&v42 && v39)
      {
        v41 = (char *)&v43[-1] - v33;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v38, 24);
        v33 = *(_QWORD *)a3;
        v31 = &v41[*(_QWORD *)a3];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v38, 24);
        v33 = *(_QWORD *)a3;
        v31 = (char *)&v42;
      }
    }
    v34 = v33 + 24 * *(unsigned int *)(a3 + 8);
    v35 = *(_OWORD *)v31;
    *(_QWORD *)(v34 + 16) = *((_QWORD *)v31 + 2);
    *(_OWORD *)v34 = v35;
  }
  else
  {
    v11 = (_QWORD *)(*(_QWORD *)a3 + 24 * v10);
    *v11 = 0;
    mlir::ValueRange::ValueRange(v11 + 1, v9, v8);
  }
  v12 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v12;
  v13 = *(unsigned int *)(*a1 + 44);
  if ((v13 & 0x7FFFFF) != 0)
  {
    v14 = ((*a1 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(*a1 + 40);
    v15 = v14 + 24;
    if (*(_QWORD *)(v14 + 24) != v14 + 24)
      goto LABEL_11;
LABEL_25:
    v18 = 0;
    v19 = 0;
    if (v12 < *(_DWORD *)(a3 + 12))
    {
LABEL_15:
      v20 = (uint64_t *)(*(_QWORD *)a3 + 24 * v12);
      *v20 = v15;
      v21 = (unint64_t *)(v20 + 1);
LABEL_22:
      mlir::ValueRange::ValueRange(v21, v18, v19);
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  v14 = 0;
  v15 = 24;
  if (MEMORY[0x18] == 24)
    goto LABEL_25;
LABEL_11:
  v16 = *(_QWORD *)(v14 + 32);
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v17 + 48);
  v19 = (*(_QWORD *)(v17 + 56) - v18) >> 3;
  if (v12 < *(_DWORD *)(a3 + 12))
    goto LABEL_15;
LABEL_26:
  v42 = (_QWORD *)v15;
LABEL_30:
  v26 = (char *)&v42;
  mlir::ValueRange::ValueRange(v43, v18, v19);
  v27 = *(unsigned int *)(a3 + 8);
  v28 = *(_QWORD *)a3;
  if (v27 >= *(_DWORD *)(a3 + 12))
  {
    v36 = v27 + 1;
    v37 = v28 + 24 * v27 > (unint64_t)&v42;
    if (v28 <= (unint64_t)&v42 && v37)
    {
      v40 = (char *)&v43[-1] - v28;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v36, 24);
      v28 = *(_QWORD *)a3;
      v26 = &v40[*(_QWORD *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v36, 24);
      v28 = *(_QWORD *)a3;
      v26 = (char *)&v42;
    }
  }
  v29 = v28 + 24 * *(unsigned int *)(a3 + 8);
  v30 = *(_OWORD *)v26;
  *(_QWORD *)(v29 + 16) = *((_QWORD *)v26 + 2);
  *(_OWORD *)v29 = v30;
LABEL_23:
  ++*(_DWORD *)(a3 + 8);
}

uint64_t mlir::scf::WhileOp::parse(uint64_t a1, mlir::OperationState *this)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  BOOL v7;
  uint64_t v8;
  const void *Results;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  int Kind;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Inputs;
  uint64_t v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  unsigned int v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  int *v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  void *v59;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  BOOL v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  char v77[32];
  __int16 v78;
  uint64_t v79;
  int v80;
  const char *v81;
  uint64_t v82;
  _QWORD v83[3];
  void *v84;
  unsigned int v85;
  unsigned int v86;
  _BYTE v87[96];
  void *v88;
  _QWORD *v89;
  void *__p;
  _QWORD **v91;
  char v92;
  void *v93;
  uint64_t v94;
  _BYTE v95[128];
  void *v96;
  uint64_t v97;
  _QWORD v98[34];

  v98[32] = *MEMORY[0x1E0C80C00];
  v96 = v98;
  v97 = 0x400000000;
  v93 = v95;
  v94 = 0x400000000;
  v4 = mlir::OperationState::addRegion(this);
  v5 = mlir::OperationState::addRegion(this);
  v6 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 792))(a1, &v96, &v93);
  v7 = v6 >= 0x100u && v6 == 0;
  if (v7
    || (v79 = 0,
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        !mlir::AsmParser::parseColonType<mlir::FunctionType>(a1, &v79)))
  {
LABEL_53:
    v51 = 0;
    goto LABEL_54;
  }
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v79);
  v11 = v10;
  v12 = 8 * v10;
  v13 = *((unsigned int *)this + 18);
  v14 = v13 + ((8 * v10) >> 3);
  if (v14 > *((unsigned int *)this + 19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v14, 8);
    LODWORD(v13) = *((_DWORD *)this + 18);
  }
  if (v11)
  {
    memcpy((void *)(*((_QWORD *)this + 8) + 8 * v13), Results, v12);
    LODWORD(v13) = *((_DWORD *)this + 18);
  }
  *((_DWORD *)this + 18) = v13 + (v12 >> 3);
  Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v79);
  if ((_DWORD)v94 == Kind)
  {
    v83[0] = mlir::FunctionType::getInputs((mlir::FunctionType *)&v79);
    v83[1] = v16;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,3u> &,llvm::ArrayRef<mlir::Type>>(a1, (uint64_t *)&v93, v83, v17, (uint64_t)this + 16))
    {
      if ((_DWORD)v97)
      {
        v18 = 0;
        v19 = 8 * v97;
        do
        {
          Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v79);
          *((_QWORD *)v96 + v18 + 4) = *(_QWORD *)(Inputs + v18);
          v18 += 8;
        }
        while (v19 != v18);
        v21 = v97;
      }
      else
      {
        v21 = 0;
      }
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t, void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, v96, v21, 0))
      {
        LOWORD(v85) = 257;
        if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "do", 2, v83))
        {
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v5, 0, 0, 0))
          {
            v51 = (*(unsigned __int8 (**)(uint64_t, char *))(*(_QWORD *)a1 + 464))(a1, (char *)this + 112) != 0;
            goto LABEL_54;
          }
        }
      }
    }
    goto LABEL_53;
  }
  v78 = 257;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(v83, a1, v8, v77);
  if (v83[0])
  {
    v80 = 3;
    v81 = "expected as many input types as operands ";
    v82 = 41;
    v22 = &v80;
    v23 = (char *)v84;
    if (v85 >= v86)
    {
      v61 = v85 + 1;
      if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
      {
        v71 = (char *)&v80 - (_BYTE *)v84;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
        v23 = (char *)v84;
        v22 = (int *)((char *)v84 + v71);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
        v22 = &v80;
        v23 = (char *)v84;
      }
    }
    v24 = &v23[24 * v85];
    v25 = *(_OWORD *)v22;
    *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
    *(_OWORD *)v24 = v25;
    v26 = ++v85;
    if (v83[0])
    {
      v80 = 3;
      v81 = "(expected ";
      v82 = 10;
      v27 = &v80;
      v28 = (char *)v84;
      if (v26 >= v86)
      {
        v63 = v26 + 1;
        v64 = (char *)v84 + 24 * v26 > (char *)&v80;
        if (v84 <= &v80 && v64)
        {
          v73 = (char *)&v80 - (_BYTE *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
          v28 = (char *)v84;
          v27 = (int *)((char *)v84 + v73);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
          v27 = &v80;
          v28 = (char *)v84;
        }
      }
      v29 = &v28[24 * v85];
      v30 = *(_OWORD *)v27;
      *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
      *(_OWORD *)v29 = v30;
      v31 = ++v85;
      if (v83[0])
      {
        v80 = 5;
        v81 = (const char *)v94;
        v32 = &v80;
        v33 = (char *)v84;
        if (v31 >= v86)
        {
          v67 = v31 + 1;
          v68 = (char *)v84 + 24 * v31 > (char *)&v80;
          if (v84 <= &v80 && v68)
          {
            v75 = (char *)&v80 - (_BYTE *)v84;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v67, 24);
            v33 = (char *)v84;
            v32 = (int *)((char *)v84 + v75);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v67, 24);
            v32 = &v80;
            v33 = (char *)v84;
          }
        }
        v34 = &v33[24 * v85];
        v35 = *(_OWORD *)v32;
        *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
        *(_OWORD *)v34 = v35;
        v36 = ++v85;
        if (v83[0])
        {
          v80 = 3;
          v81 = " got ";
          v82 = 5;
          v37 = &v80;
          v38 = (char *)v84;
          if (v36 >= v86)
          {
            v69 = v36 + 1;
            v70 = (char *)v84 + 24 * v36 > (char *)&v80;
            if (v84 <= &v80 && v70)
            {
              v76 = (char *)&v80 - (_BYTE *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v69, 24);
              v38 = (char *)v84;
              v37 = (int *)((char *)v84 + v76);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v69, 24);
              v37 = &v80;
              v38 = (char *)v84;
            }
          }
          v39 = &v38[24 * v85];
          v40 = *(_OWORD *)v37;
          *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
          *(_OWORD *)v39 = v40;
          ++v85;
        }
      }
    }
  }
  v41 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v79);
  if (v83[0])
  {
    v80 = 5;
    v81 = (const char *)v41;
    v42 = &v80;
    v43 = (char *)v84;
    if (v85 >= v86)
    {
      v62 = v85 + 1;
      if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
      {
        v72 = (char *)&v80 - (_BYTE *)v84;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
        v43 = (char *)v84;
        v42 = (int *)((char *)v84 + v72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
        v42 = &v80;
        v43 = (char *)v84;
      }
    }
    v44 = &v43[24 * v85];
    v45 = *(_OWORD *)v42;
    *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
    *(_OWORD *)v44 = v45;
    v46 = ++v85;
    if (v83[0])
    {
      v80 = 3;
      v81 = ")";
      v82 = 1;
      v47 = &v80;
      v48 = (char *)v84;
      if (v46 >= v86)
      {
        v65 = v46 + 1;
        v66 = (char *)v84 + 24 * v46 > (char *)&v80;
        if (v84 <= &v80 && v66)
        {
          v74 = (char *)&v80 - (_BYTE *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v65, 24);
          v48 = (char *)v84;
          v47 = (int *)((char *)v84 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v65, 24);
          v47 = &v80;
          v48 = (char *)v84;
        }
      }
      v49 = &v48[24 * v85];
      v50 = *(_OWORD *)v47;
      *((_QWORD *)v49 + 2) = *((_QWORD *)v47 + 2);
      *(_OWORD *)v49 = v50;
      ++v85;
    }
  }
  v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v83);
  if (v83[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v83);
  if (v92)
  {
    v52 = (_QWORD **)__p;
    if (__p)
    {
      v53 = v91;
      v54 = __p;
      if (v91 != __p)
      {
        do
          v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
        while (v53 != v52);
        v54 = __p;
      }
      v91 = v52;
      operator delete(v54);
    }
    v55 = v88;
    if (v88)
    {
      v56 = v89;
      v57 = v88;
      if (v89 != v88)
      {
        do
        {
          v59 = (void *)*--v56;
          v58 = v59;
          *v56 = 0;
          if (v59)
            operator delete[](v58);
        }
        while (v56 != v55);
        v57 = v88;
      }
      v89 = v55;
      operator delete(v57);
    }
    if (v84 != v87)
      free(v84);
  }
LABEL_54:
  if (v93 != v95)
    free(v93);
  if (v96 != v98)
    free(v96);
  return v51;
}

uint64_t mlir::AsmParser::parseColonType<mlir::FunctionType>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD **v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 544))(a1, &v18))
    return 0;
  v5 = v18;
  if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v16 = "invalid kind of type specified";
  v17 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v19, a1, v4, &v16);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  if (v26)
  {
    v8 = (_QWORD **)__p;
    if (__p)
    {
      v9 = v25;
      v10 = __p;
      if (v25 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v25 = v8;
      operator delete(v10);
    }
    v11 = v22;
    if (v22)
    {
      v12 = v23;
      v13 = v22;
      if (v23 != v22)
      {
        do
        {
          v15 = (void *)*--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            operator delete[](v14);
        }
        while (v12 != v11);
        v13 = v22;
      }
      v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21)
      free(v20);
  }
  return v6;
}

uint64_t mlir::scf::WhileOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  mlir::Operation *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  mlir::Operation *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _DWORD *v22;
  mlir::Operation *v23;
  unint64_t v24;
  unint64_t v25;
  mlir::Operation *v26;
  mlir::ArrayAttr *v27;
  uint64_t Value;
  uint64_t v29;
  uint64_t v31[2];
  uint64_t v32[4];
  uint64_t v33[2];
  uint64_t v34[4];
  unint64_t v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v4 = *this;
  v5 = *((unsigned int *)*this + 11);
  v6 = *(_QWORD *)((((unint64_t)*this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6)
    v7 = v6 - 8;
  else
    v7 = 0;
  v8 = *(_QWORD **)(v7 + 48);
  v9 = (uint64_t)(*(_QWORD *)(v7 + 56) - (_QWORD)v8) >> 3;
  if ((v5 & 0x800000) != 0)
  {
    v10 = *((unsigned int *)v4 + 17);
    v11 = *((_QWORD *)v4 + 9);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  mlir::ValueRange::ValueRange(v35, v11, v10);
  printInitializationList(a2, v8, v9, v35[0], v35[1], " ", 1uLL);
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 2)
  {
    *(_BYTE *)(v13 + 2) = 32;
    *(_WORD *)v13 = 14880;
    *((_QWORD *)v12 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v12, " : ", 3uLL);
  }
  v14 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v15 = *((unsigned int *)v14 + 17);
    v16 = *((_QWORD *)v14 + 9);
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v33[0] = v16;
  v33[1] = v15;
  mlir::OperandRange::getTypes(v33, v34);
  v17 = *((unsigned int *)*this + 9);
  v18 = (uint64_t)*this - 16;
  if (!(_DWORD)v17)
    v18 = 0;
  v31[0] = v18;
  v31[1] = v17;
  mlir::OperandRange::getTypes(v31, v32);
  mlir::AsmPrinter::printFunctionalType<mlir::ValueTypeRange<mlir::OperandRange>,mlir::ValueTypeRange<mlir::ResultRange>>((uint64_t)a2, v34, v32);
  v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v20 = (_BYTE *)*((_QWORD *)v19 + 4);
  if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
  }
  else
  {
    *((_QWORD *)v19 + 4) = v20 + 1;
    *v20 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), 0, 1, 0);
  v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v22 = (_DWORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 3uLL)
  {
    *v22 = 544171040;
    *((_QWORD *)v21 + 4) += 4;
    v23 = *this;
    v24 = *((unsigned int *)*this + 11);
    if ((v24 & 0x7FFFFF) != 0)
      goto LABEL_18;
  }
  else
  {
    llvm::raw_ostream::write(v21, " do ", 4uLL);
    v23 = *this;
    v24 = *((unsigned int *)*this + 11);
    if ((v24 & 0x7FFFFF) != 0)
    {
LABEL_18:
      v25 = (((unint64_t)v23 + 16 * ((v24 >> 23) & 1) + ((v24 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v23 + 10);
      goto LABEL_21;
    }
  }
  v25 = 0;
LABEL_21:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, v25 + 24, 1, 1, 0);
  v26 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v34[0] = mlir::Operation::getAttrDictionary(v26);
    v27 = (mlir::ArrayAttr *)v34;
  }
  else
  {
    v27 = (mlir::Operation *)((char *)v26 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v27);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 200))(a2, Value, v29, 0, 0);
}

BOOL mlir::scf::WhileOp::verify(mlir::scf::WhileOp *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const void ***v17;
  uint64_t v18;
  __int128 v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  unint64_t v29;
  BOOL v30;
  char *v31;
  const void **v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD **v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  v3 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    v4 = (_QWORD *)(((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v2 + 40));
    if ((_QWORD *)*v4 == v4)
      goto LABEL_13;
  }
  else
  {
    v4 = 0;
    if (!MEMORY[0])
    {
LABEL_13:
      v9 = 0;
      goto LABEL_14;
    }
  }
  v5 = v4[1];
  if (v5)
    v6 = v5 - 8;
  else
    v6 = 0;
  v7 = *(mlir::GenericProgramPoint **)(v6 + 32);
  if (v7 == (mlir::GenericProgramPoint *)(v6 + 32))
    goto LABEL_13;
  mlir::GenericProgramPoint::~GenericProgramPoint(v7);
  v9 = v8;
  if (v8
    && *(_UNKNOWN **)(*(_QWORD *)(v8 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id)
  {
    v10 = *(_QWORD *)this;
    v11 = *(unsigned int *)(*(_QWORD *)this + 44);
    if ((v11 & 0x7FFFFF) != 0)
      v12 = ((v10 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v10 + 40);
    else
      v12 = 0;
    return verifyAndGetTerminator<mlir::scf::YieldOp>((uint64_t *)v10, (_QWORD *)(v12 + 24), (const void **)"expects the 'after' region to terminate with 'scf.yield'", (const char *)0x38) != 0;
  }
LABEL_14:
  v35 = 261;
  v32 = (const void **)"expects the 'before' region to terminate with 'scf.condition'";
  v33 = 61;
  mlir::Operation::emitOpError((uint64_t *)v2, &v32, (uint64_t)&v36);
  if (v9)
  {
    v13 = mlir::Diagnostic::attachNote(&v37, *(_QWORD *)(v9 + 24), 1);
    v14 = v13 + 16;
    v15 = *(_QWORD *)(v13 + 16);
    LODWORD(v32) = 3;
    v33 = (uint64_t)"terminator here";
    v34 = 15;
    v16 = *(unsigned int *)(v13 + 24);
    v17 = &v32;
    if (v16 >= *(_DWORD *)(v13 + 28))
    {
      v29 = v16 + 1;
      v30 = v15 + 24 * v16 > (unint64_t)&v32;
      if (v15 <= (unint64_t)&v32 && v30)
      {
        v31 = (char *)&v32 - v15;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v13 + 32), v29, 24);
        v15 = *(_QWORD *)(v13 + 16);
        v17 = (const void ***)&v31[v15];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v13 + 32), v29, 24);
        v15 = *(_QWORD *)(v13 + 16);
        v17 = &v32;
      }
    }
    v18 = v15 + 24 * *(unsigned int *)(v13 + 24);
    v19 = *(_OWORD *)v17;
    *(_QWORD *)(v18 + 16) = v17[2];
    *(_OWORD *)v18 = v19;
    ++*(_DWORD *)(v13 + 24);
  }
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  if (v44)
  {
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v43;
      v22 = __p;
      if (v43 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v43 = v20;
      operator delete(v22);
    }
    v23 = v40;
    if (v40)
    {
      v24 = v41;
      v25 = v40;
      if (v41 != v40)
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          *v24 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v24 != v23);
        v25 = v40;
      }
      v41 = v23;
      operator delete(v25);
    }
    if (v38 != &v39)
      free(v38);
  }
  return 0;
}

void mlir::scf::WhileOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  const char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  const char *v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  const char *v147;
  unint64_t v148;
  uint64_t v149;
  const char *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  const char *v181;
  unint64_t v182;
  uint64_t v183;
  const char *v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int *v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  const char *v215;
  unint64_t v216;
  uint64_t v217;
  const char *v218;
  unint64_t v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  unint64_t v243;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E1A408;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RemoveLoopInvariantArgsFromBeforeBlock]";
  v243 = 111;
  v9 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v9)
    v10 = v9;
  else
    v10 = v243;
  v11 = &v242[v10];
  v12 = v243 - v10;
  if (v243 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v243 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_268;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_269;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_272;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_272:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E1A150;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RemoveLoopInvariantValueYielded]";
  v243 = 104;
  v43 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v43)
    v44 = v43;
  else
    v44 = v243;
  v45 = &v242[v44];
  v46 = v243 - v44;
  if (v243 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v243 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_268;
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      goto LABEL_269;
    v55 = (char *)operator new(8 * v54);
    v56 = &v55[8 * v51];
    v57 = &v55[8 * v54];
    *(_QWORD *)v56 = v38;
    v42 = (uint64_t)(v56 + 8);
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
  }
  else
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_273;
      }
      v60 = (v59 >> 3) + 1;
      v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v41[-v61];
      v56 -= v61;
      v63 = &v55[8 * v51 - 16];
      v64 = v41 - 16;
      v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_273:
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      v41 = (char *)a1[1];
      v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        v71 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        v70 = v71;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
  v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(_QWORD *)v72 = off_1E0E181A8;
  if (*((_QWORD *)v72 + 9))
  {
    v73 = v72[22];
    if (v73 <= v72[23])
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    v75 = (char *)a1[2];
    v74 = a1[3];
    if ((unint64_t)v75 < v74)
      goto LABEL_80;
    goto LABEL_91;
  }
  v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::WhileConditionTruth]";
  v243 = 92;
  v77 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v77)
    v78 = v77;
  else
    v78 = v243;
  v79 = &v242[v78];
  v80 = v243 - v78;
  if (v243 - v78 >= 0x12)
    v81 = 18;
  else
    v81 = v243 - v78;
  v82 = &v79[v81];
  v83 = v80 - v81;
  if (v83 >= v83 - 1)
    --v83;
  *((_QWORD *)v72 + 8) = v82;
  *((_QWORD *)v72 + 9) = v83;
  v73 = v72[22];
  if (v73 > v72[23])
    goto LABEL_90;
LABEL_79:
  v72[22] = v73;
  v75 = (char *)a1[2];
  v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(_QWORD *)v75 = v72;
    v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v84 = (char *)a1[1];
  v85 = (v75 - v84) >> 3;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
    goto LABEL_268;
  v87 = v74 - (_QWORD)v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (v88)
  {
    if (v88 >> 61)
      goto LABEL_269;
    v89 = (char *)operator new(8 * v88);
    v90 = &v89[8 * v85];
    v91 = &v89[8 * v88];
    *(_QWORD *)v90 = v72;
    v76 = (uint64_t)(v90 + 8);
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
      goto LABEL_100;
  }
  else
  {
    v89 = 0;
    v90 = (char *)(8 * v85);
    v91 = 0;
    *(_QWORD *)(8 * v85) = v72;
    v76 = 8 * v85 + 8;
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_274;
      }
      v94 = (v93 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v96 = &v75[-v95];
      v90 -= v95;
      v97 = &v89[8 * v85 - 16];
      v98 = v75 - 16;
      v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_274:
        do
        {
          v102 = *((_QWORD *)v75 - 1);
          v75 -= 8;
          *(_QWORD *)v75 = 0;
          *((_QWORD *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      v75 = (char *)a1[1];
      v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        v105 = *((_QWORD *)v103 - 1);
        v103 -= 8;
        v104 = v105;
        *(_QWORD *)v103 = 0;
        if (v105)
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75)
    operator delete(v75);
LABEL_115:
  a1[2] = v76;
  v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(_QWORD *)v106 = off_1E0E15598;
  if (*((_QWORD *)v106 + 9))
  {
    v107 = v106[22];
    if (v107 <= v106[23])
      goto LABEL_117;
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    v109 = (char *)a1[2];
    v108 = a1[3];
    if ((unint64_t)v109 < v108)
      goto LABEL_118;
    goto LABEL_129;
  }
  v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::WhileCmpCond]";
  v243 = 85;
  v111 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v111)
    v112 = v111;
  else
    v112 = v243;
  v113 = &v242[v112];
  v114 = v243 - v112;
  if (v243 - v112 >= 0x12)
    v115 = 18;
  else
    v115 = v243 - v112;
  v116 = &v113[v115];
  v117 = v114 - v115;
  if (v117 >= v117 - 1)
    --v117;
  *((_QWORD *)v106 + 8) = v116;
  *((_QWORD *)v106 + 9) = v117;
  v107 = v106[22];
  if (v107 > v106[23])
    goto LABEL_128;
LABEL_117:
  v106[22] = v107;
  v109 = (char *)a1[2];
  v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(_QWORD *)v109 = v106;
    v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  v118 = (char *)a1[1];
  v119 = (v109 - v118) >> 3;
  v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61)
    goto LABEL_268;
  v121 = v108 - (_QWORD)v118;
  if (v121 >> 2 > v120)
    v120 = v121 >> 2;
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
    v122 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v122 = v120;
  if (v122)
  {
    if (v122 >> 61)
      goto LABEL_269;
    v123 = (char *)operator new(8 * v122);
    v124 = &v123[8 * v119];
    v125 = &v123[8 * v122];
    *(_QWORD *)v124 = v106;
    v110 = (uint64_t)(v124 + 8);
    v126 = (char *)(v109 - v118);
    if (v109 != v118)
      goto LABEL_138;
  }
  else
  {
    v123 = 0;
    v124 = (char *)(8 * v119);
    v125 = 0;
    *(_QWORD *)(8 * v119) = v106;
    v110 = 8 * v119 + 8;
    v126 = (char *)(v109 - v118);
    if (v109 != v118)
    {
LABEL_138:
      v127 = (unint64_t)(v126 - 8);
      if (v127 < 0x78
        || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
        && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
      {
        goto LABEL_275;
      }
      v128 = (v127 >> 3) + 1;
      v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      v130 = &v109[-v129];
      v124 -= v129;
      v131 = &v123[8 * v119 - 16];
      v132 = v109 - 16;
      v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v135 = *((_OWORD *)v132 - 1);
        v134 = *(_OWORD *)v132;
        *((_OWORD *)v132 - 1) = 0uLL;
        *(_OWORD *)v132 = 0uLL;
        *((_OWORD *)v131 - 1) = v135;
        *(_OWORD *)v131 = v134;
        v131 -= 32;
        v132 -= 32;
        v133 -= 4;
      }
      while (v133);
      v109 = v130;
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_275:
        do
        {
          v136 = *((_QWORD *)v109 - 1);
          v109 -= 8;
          *(_QWORD *)v109 = 0;
          *((_QWORD *)v124 - 1) = v136;
          v124 -= 8;
        }
        while (v109 != v118);
      }
      v109 = (char *)a1[1];
      v137 = (char *)a1[2];
      a1[1] = v124;
      a1[2] = v110;
      a1[3] = v125;
      while (v137 != v109)
      {
        v139 = *((_QWORD *)v137 - 1);
        v137 -= 8;
        v138 = v139;
        *(_QWORD *)v137 = 0;
        if (v139)
          (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
      }
      goto LABEL_151;
    }
  }
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109)
    operator delete(v109);
LABEL_153:
  a1[2] = v110;
  v140 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v140 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(_QWORD *)v140 = off_1E0E16CB8;
  if (*((_QWORD *)v140 + 9))
  {
    v141 = v140[22];
    if (v141 <= v140[23])
      goto LABEL_155;
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v140 + 20), v140 + 24, v141, 16);
    v140[22] = v140[22];
    v143 = (char *)a1[2];
    v142 = a1[3];
    if ((unint64_t)v143 < v142)
      goto LABEL_156;
    goto LABEL_167;
  }
  v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::WhileUnusedResult]";
  v243 = 90;
  v145 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v145)
    v146 = v145;
  else
    v146 = v243;
  v147 = &v242[v146];
  v148 = v243 - v146;
  if (v243 - v146 >= 0x12)
    v149 = 18;
  else
    v149 = v243 - v146;
  v150 = &v147[v149];
  v151 = v148 - v149;
  if (v151 >= v151 - 1)
    --v151;
  *((_QWORD *)v140 + 8) = v150;
  *((_QWORD *)v140 + 9) = v151;
  v141 = v140[22];
  if (v141 > v140[23])
    goto LABEL_166;
LABEL_155:
  v140[22] = v141;
  v143 = (char *)a1[2];
  v142 = a1[3];
  if ((unint64_t)v143 < v142)
  {
LABEL_156:
    *(_QWORD *)v143 = v140;
    v144 = (uint64_t)(v143 + 8);
    goto LABEL_191;
  }
LABEL_167:
  v152 = (char *)a1[1];
  v153 = (v143 - v152) >> 3;
  v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 61)
    goto LABEL_268;
  v155 = v142 - (_QWORD)v152;
  if (v155 >> 2 > v154)
    v154 = v155 >> 2;
  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
    v156 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v156 = v154;
  if (v156)
  {
    if (v156 >> 61)
      goto LABEL_269;
    v157 = (char *)operator new(8 * v156);
    v158 = &v157[8 * v153];
    v159 = &v157[8 * v156];
    *(_QWORD *)v158 = v140;
    v144 = (uint64_t)(v158 + 8);
    v160 = (char *)(v143 - v152);
    if (v143 != v152)
      goto LABEL_176;
  }
  else
  {
    v157 = 0;
    v158 = (char *)(8 * v153);
    v159 = 0;
    *(_QWORD *)(8 * v153) = v140;
    v144 = 8 * v153 + 8;
    v160 = (char *)(v143 - v152);
    if (v143 != v152)
    {
LABEL_176:
      v161 = (unint64_t)(v160 - 8);
      if (v161 < 0x78
        || &v143[-(v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v158
        && &v157[v143 - v152 - (v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v143)
      {
        goto LABEL_276;
      }
      v162 = (v161 >> 3) + 1;
      v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
      v164 = &v143[-v163];
      v158 -= v163;
      v165 = &v157[8 * v153 - 16];
      v166 = v143 - 16;
      v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v169 = *((_OWORD *)v166 - 1);
        v168 = *(_OWORD *)v166;
        *((_OWORD *)v166 - 1) = 0uLL;
        *(_OWORD *)v166 = 0uLL;
        *((_OWORD *)v165 - 1) = v169;
        *(_OWORD *)v165 = v168;
        v165 -= 32;
        v166 -= 32;
        v167 -= 4;
      }
      while (v167);
      v143 = v164;
      if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_276:
        do
        {
          v170 = *((_QWORD *)v143 - 1);
          v143 -= 8;
          *(_QWORD *)v143 = 0;
          *((_QWORD *)v158 - 1) = v170;
          v158 -= 8;
        }
        while (v143 != v152);
      }
      v143 = (char *)a1[1];
      v171 = (char *)a1[2];
      a1[1] = v158;
      a1[2] = v144;
      a1[3] = v159;
      while (v171 != v143)
      {
        v173 = *((_QWORD *)v171 - 1);
        v171 -= 8;
        v172 = v173;
        *(_QWORD *)v171 = 0;
        if (v173)
          (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
      }
      goto LABEL_189;
    }
  }
  a1[1] = v158;
  a1[2] = v144;
  a1[3] = v159;
LABEL_189:
  if (v143)
    operator delete(v143);
LABEL_191:
  a1[2] = v144;
  v174 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v174 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(_QWORD *)v174 = off_1E0E19E30;
  if (*((_QWORD *)v174 + 9))
  {
    v175 = v174[22];
    if (v175 <= v174[23])
      goto LABEL_193;
LABEL_204:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v174 + 20), v174 + 24, v175, 16);
    v174[22] = v174[22];
    v177 = (char *)a1[2];
    v176 = a1[3];
    if ((unint64_t)v177 < v176)
      goto LABEL_194;
    goto LABEL_205;
  }
  v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::WhileRemoveDuplicatedResults]";
  v243 = 101;
  v179 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v179)
    v180 = v179;
  else
    v180 = v243;
  v181 = &v242[v180];
  v182 = v243 - v180;
  if (v243 - v180 >= 0x12)
    v183 = 18;
  else
    v183 = v243 - v180;
  v184 = &v181[v183];
  v185 = v182 - v183;
  if (v185 >= v185 - 1)
    --v185;
  *((_QWORD *)v174 + 8) = v184;
  *((_QWORD *)v174 + 9) = v185;
  v175 = v174[22];
  if (v175 > v174[23])
    goto LABEL_204;
LABEL_193:
  v174[22] = v175;
  v177 = (char *)a1[2];
  v176 = a1[3];
  if ((unint64_t)v177 < v176)
  {
LABEL_194:
    *(_QWORD *)v177 = v174;
    v178 = (uint64_t)(v177 + 8);
    goto LABEL_229;
  }
LABEL_205:
  v186 = (char *)a1[1];
  v187 = (v177 - v186) >> 3;
  v188 = v187 + 1;
  if ((unint64_t)(v187 + 1) >> 61)
    goto LABEL_268;
  v189 = v176 - (_QWORD)v186;
  if (v189 >> 2 > v188)
    v188 = v189 >> 2;
  if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8)
    v190 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v190 = v188;
  if (v190)
  {
    if (v190 >> 61)
      goto LABEL_269;
    v191 = (char *)operator new(8 * v190);
    v192 = &v191[8 * v187];
    v193 = &v191[8 * v190];
    *(_QWORD *)v192 = v174;
    v178 = (uint64_t)(v192 + 8);
    v194 = (char *)(v177 - v186);
    if (v177 != v186)
      goto LABEL_214;
  }
  else
  {
    v191 = 0;
    v192 = (char *)(8 * v187);
    v193 = 0;
    *(_QWORD *)(8 * v187) = v174;
    v178 = 8 * v187 + 8;
    v194 = (char *)(v177 - v186);
    if (v177 != v186)
    {
LABEL_214:
      v195 = (unint64_t)(v194 - 8);
      if (v195 < 0x78
        || &v177[-(v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v192
        && &v191[v177 - v186 - (v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v177)
      {
        goto LABEL_277;
      }
      v196 = (v195 >> 3) + 1;
      v197 = 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
      v198 = &v177[-v197];
      v192 -= v197;
      v199 = &v191[8 * v187 - 16];
      v200 = v177 - 16;
      v201 = v196 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v203 = *((_OWORD *)v200 - 1);
        v202 = *(_OWORD *)v200;
        *((_OWORD *)v200 - 1) = 0uLL;
        *(_OWORD *)v200 = 0uLL;
        *((_OWORD *)v199 - 1) = v203;
        *(_OWORD *)v199 = v202;
        v199 -= 32;
        v200 -= 32;
        v201 -= 4;
      }
      while (v201);
      v177 = v198;
      if (v196 != (v196 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_277:
        do
        {
          v204 = *((_QWORD *)v177 - 1);
          v177 -= 8;
          *(_QWORD *)v177 = 0;
          *((_QWORD *)v192 - 1) = v204;
          v192 -= 8;
        }
        while (v177 != v186);
      }
      v177 = (char *)a1[1];
      v205 = (char *)a1[2];
      a1[1] = v192;
      a1[2] = v178;
      a1[3] = v193;
      while (v205 != v177)
      {
        v207 = *((_QWORD *)v205 - 1);
        v205 -= 8;
        v206 = v207;
        *(_QWORD *)v205 = 0;
        if (v207)
          (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
      }
      goto LABEL_227;
    }
  }
  a1[1] = v192;
  a1[2] = v178;
  a1[3] = v193;
LABEL_227:
  if (v177)
    operator delete(v177);
LABEL_229:
  a1[2] = v178;
  v208 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v208 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(_QWORD *)v208 = off_1E0E18A70;
  if (*((_QWORD *)v208 + 9))
  {
    v209 = v208[22];
    if (v209 <= v208[23])
      goto LABEL_231;
LABEL_242:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v208 + 20), v208 + 24, v209, 16);
    v208[22] = v208[22];
    v211 = (char *)a1[2];
    v210 = a1[3];
    if ((unint64_t)v211 < v210)
      goto LABEL_232;
    goto LABEL_243;
  }
  v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::WhileRemoveUnusedArgs]";
  v243 = 94;
  v213 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v213)
    v214 = v213;
  else
    v214 = v243;
  v215 = &v242[v214];
  v216 = v243 - v214;
  if (v243 - v214 >= 0x12)
    v217 = 18;
  else
    v217 = v243 - v214;
  v218 = &v215[v217];
  v219 = v216 - v217;
  if (v219 >= v219 - 1)
    --v219;
  *((_QWORD *)v208 + 8) = v218;
  *((_QWORD *)v208 + 9) = v219;
  v209 = v208[22];
  if (v209 > v208[23])
    goto LABEL_242;
LABEL_231:
  v208[22] = v209;
  v211 = (char *)a1[2];
  v210 = a1[3];
  if ((unint64_t)v211 < v210)
  {
LABEL_232:
    *(_QWORD *)v211 = v208;
    v212 = (uint64_t)(v211 + 8);
    goto LABEL_267;
  }
LABEL_243:
  v220 = (char *)a1[1];
  v221 = (v211 - v220) >> 3;
  v222 = v221 + 1;
  if ((unint64_t)(v221 + 1) >> 61)
LABEL_268:
    abort();
  v223 = v210 - (_QWORD)v220;
  if (v223 >> 2 > v222)
    v222 = v223 >> 2;
  if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8)
    v224 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v224 = v222;
  if (!v224)
  {
    v225 = 0;
    v226 = (char *)(8 * v221);
    v227 = 0;
    *(_QWORD *)(8 * v221) = v208;
    v212 = 8 * v221 + 8;
    v228 = (char *)(v211 - v220);
    if (v211 != v220)
      goto LABEL_252;
    goto LABEL_264;
  }
  if (v224 >> 61)
LABEL_269:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v225 = (char *)operator new(8 * v224);
  v226 = &v225[8 * v221];
  v227 = &v225[8 * v224];
  *(_QWORD *)v226 = v208;
  v212 = (uint64_t)(v226 + 8);
  v228 = (char *)(v211 - v220);
  if (v211 != v220)
  {
LABEL_252:
    v229 = (unint64_t)(v228 - 8);
    if (v229 < 0x78
      || &v211[-(v229 & 0xFFFFFFFFFFFFFFF8) - 8] < v226
      && &v225[v211 - v220 - (v229 & 0xFFFFFFFFFFFFFFF8) - 8] < v211)
    {
      goto LABEL_278;
    }
    v230 = (v229 >> 3) + 1;
    v231 = 8 * (v230 & 0x3FFFFFFFFFFFFFFCLL);
    v232 = &v211[-v231];
    v226 -= v231;
    v233 = &v225[8 * v221 - 16];
    v234 = v211 - 16;
    v235 = v230 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v237 = *((_OWORD *)v234 - 1);
      v236 = *(_OWORD *)v234;
      *((_OWORD *)v234 - 1) = 0uLL;
      *(_OWORD *)v234 = 0uLL;
      *((_OWORD *)v233 - 1) = v237;
      *(_OWORD *)v233 = v236;
      v233 -= 32;
      v234 -= 32;
      v235 -= 4;
    }
    while (v235);
    v211 = v232;
    if (v230 != (v230 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_278:
      do
      {
        v238 = *((_QWORD *)v211 - 1);
        v211 -= 8;
        *(_QWORD *)v211 = 0;
        *((_QWORD *)v226 - 1) = v238;
        v226 -= 8;
      }
      while (v211 != v220);
    }
    v211 = (char *)a1[1];
    v239 = (char *)a1[2];
    a1[1] = v226;
    a1[2] = v212;
    a1[3] = v227;
    while (v239 != v211)
    {
      v241 = *((_QWORD *)v239 - 1);
      v239 -= 8;
      v240 = v241;
      *(_QWORD *)v239 = 0;
      if (v241)
        (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
    }
    goto LABEL_265;
  }
LABEL_264:
  a1[1] = v226;
  a1[2] = v212;
  a1[3] = v227;
LABEL_265:
  if (v211)
    operator delete(v211);
LABEL_267:
  a1[2] = v212;
}

uint64_t mlir::scf::IndexSwitchOp::verify(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  __int128 v23;
  const char *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  _QWORD **v35;
  _QWORD **v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  __int128 v46;
  _QWORD **v47;
  _QWORD **v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  void *v54;
  const void **v55;
  uint64_t v56;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  const char *v70;
  llvm *v71[2];
  unsigned int v72;
  const void **v73[4];
  __int16 v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  const void **v78[2];
  const void ***v79;
  void *v80;
  unsigned int v81;
  unsigned int v82;
  _BYTE v83[96];
  void *v84;
  _QWORD *v85;
  void *__p;
  _QWORD **v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v78[0] = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v78);
  v2 = *this;
  v3 = *((unsigned int *)*this + 11);
  if (v4 == (v3 & 0x7FFFFF) - 1)
  {
    v71[0] = 0;
    v71[1] = 0;
    v72 = 0;
    v78[0] = (const void **)v2[2 * ((v3 >> 23) & 1) + 8];
    v5 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v78);
    if (v6)
    {
      v7 = (uint64_t *)v5;
      v8 = 8 * v6;
      while (1)
      {
        v70 = 0;
        v70 = (const char *)*v7;
        llvm::DenseMapBase<llvm::DenseMap<long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>,long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v71, (uint64_t *)&v70, (uint64_t)v78);
        if (!(_BYTE)v79)
          break;
        ++v7;
        v8 -= 8;
        if (!v8)
          goto LABEL_6;
      }
      v73[0] = (const void **)"has duplicate case value: ";
      v74 = 259;
      mlir::OpState::emitOpError(this, v73, (uint64_t)v78);
      if (v78[0])
      {
        LODWORD(v75) = 2;
        v76 = v70;
        v43 = &v75;
        v44 = (char *)v80;
        if (v81 >= v82)
        {
          v64 = v81 + 1;
          if (v80 <= &v75 && (char *)v80 + 24 * v81 > (char *)&v75)
          {
            v69 = (char *)&v75 - (_BYTE *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            v44 = (char *)v80;
            v43 = (uint64_t *)((char *)v80 + v69);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            v43 = &v75;
            v44 = (char *)v80;
          }
        }
        v45 = &v44[24 * v81];
        v46 = *(_OWORD *)v43;
        *((_QWORD *)v45 + 2) = v43[2];
        *(_OWORD *)v45 = v46;
        ++v81;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
      if (v78[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
      if (v88)
      {
        v47 = (_QWORD **)__p;
        if (__p)
        {
          v48 = v87;
          v49 = __p;
          if (v87 != __p)
          {
            do
              v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
            while (v48 != v47);
            v49 = __p;
          }
          v87 = v47;
          operator delete(v49);
        }
        v50 = v84;
        if (v84)
        {
          v51 = v85;
          v52 = v84;
          if (v85 != v84)
          {
            do
            {
              v54 = (void *)*--v51;
              v53 = v54;
              *v51 = 0;
              if (v54)
                operator delete[](v53);
            }
            while (v51 != v50);
            v52 = v84;
          }
          v85 = v50;
          operator delete(v52);
        }
        if (v80 != v83)
          free(v80);
      }
    }
    else
    {
LABEL_6:
      v9 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
           + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *((unsigned int *)*this + 10);
      v78[0] = (const void **)"default region";
      LOWORD(v81) = 259;
      if (mlir::scf::IndexSwitchOp::verify(void)::$_0::operator()(this, v9, v78))
      {
        v10 = *((unsigned int *)*this + 11);
        v11 = v10 & 0x7FFFFF;
        if ((v10 & 0x7FFFFF) != 0)
        {
          if (v11 == 1)
            goto LABEL_65;
          v12 = (((unint64_t)&(*this)[2 * ((v10 >> 23) & 1) + 8] + ((v10 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *((unsigned int *)*this + 10);
          v13 = v12 + 24 * v11;
        }
        else
        {
          v13 = 0;
          v12 = 0;
        }
        v55 = 0;
        v56 = v12 + 24;
        do
        {
          v73[0] = v55;
          v78[0] = (const void **)"case region #";
          v79 = v73;
          LOWORD(v81) = 2819;
          if (!mlir::scf::IndexSwitchOp::verify(void)::$_0::operator()(this, v56, v78))
            break;
          v55 = (const void **)((char *)v55 + 1);
          v56 += 24;
        }
        while (v56 != v13);
      }
    }
LABEL_65:
    llvm::deallocate_buffer(v71[0], (void *)(8 * v72));
  }
  v73[0] = (const void **)"has ";
  v74 = 259;
  mlir::OpState::emitOpError(this, v73, (uint64_t)v78);
  if (v78[0])
  {
    v14 = (*((_DWORD *)*this + 11) & 0x7FFFFF) - 1;
    LODWORD(v75) = 5;
    v76 = (const char *)v14;
    v15 = &v75;
    v16 = (char *)v80;
    if (v81 >= v82)
    {
      v58 = v81 + 1;
      if (v80 <= &v75 && (char *)v80 + 24 * v81 > (char *)&v75)
      {
        v65 = (char *)&v75 - (_BYTE *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v58, 24);
        v16 = (char *)v80;
        v15 = (uint64_t *)((char *)v80 + v65);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v58, 24);
        v15 = &v75;
        v16 = (char *)v80;
      }
    }
    v17 = &v16[24 * v81];
    v18 = *(_OWORD *)v15;
    *((_QWORD *)v17 + 2) = v15[2];
    *(_OWORD *)v17 = v18;
    v19 = ++v81;
    if (v78[0])
    {
      LODWORD(v75) = 3;
      v76 = " case regions but ";
      v77 = 18;
      v20 = &v75;
      v21 = (char *)v80;
      if (v19 >= v82)
      {
        v60 = v19 + 1;
        v61 = (char *)v80 + 24 * v19 > (char *)&v75;
        if (v80 <= &v75 && v61)
        {
          v67 = (char *)&v75 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
          v21 = (char *)v80;
          v20 = (uint64_t *)((char *)v80 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
          v20 = &v75;
          v21 = (char *)v80;
        }
      }
      v22 = &v21[24 * v81];
      v23 = *(_OWORD *)v20;
      *((_QWORD *)v22 + 2) = v20[2];
      *(_OWORD *)v22 = v23;
      ++v81;
    }
  }
  v75 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v75);
  if (v78[0])
  {
    LODWORD(v75) = 5;
    v76 = v24;
    v25 = &v75;
    v26 = (char *)v80;
    if (v81 >= v82)
    {
      v59 = v81 + 1;
      if (v80 <= &v75 && (char *)v80 + 24 * v81 > (char *)&v75)
      {
        v66 = (char *)&v75 - (_BYTE *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
        v26 = (char *)v80;
        v25 = (uint64_t *)((char *)v80 + v66);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
        v25 = &v75;
        v26 = (char *)v80;
      }
    }
    v27 = &v26[24 * v81];
    v28 = *(_OWORD *)v25;
    *((_QWORD *)v27 + 2) = v25[2];
    *(_OWORD *)v27 = v28;
    v29 = ++v81;
    if (v78[0])
    {
      LODWORD(v75) = 3;
      v76 = " case values";
      v77 = 12;
      v30 = &v75;
      v31 = (char *)v80;
      if (v29 >= v82)
      {
        v62 = v29 + 1;
        v63 = (char *)v80 + 24 * v29 > (char *)&v75;
        if (v80 <= &v75 && v63)
        {
          v68 = (char *)&v75 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
          v31 = (char *)v80;
          v30 = (uint64_t *)((char *)v80 + v68);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
          v30 = &v75;
          v31 = (char *)v80;
        }
      }
      v32 = &v31[24 * v81];
      v33 = *(_OWORD *)v30;
      *((_QWORD *)v32 + 2) = v30[2];
      *(_OWORD *)v32 = v33;
      ++v81;
    }
  }
  v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
  if (v78[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
  if (v88)
  {
    v35 = (_QWORD **)__p;
    if (__p)
    {
      v36 = v87;
      v37 = __p;
      if (v87 != __p)
      {
        do
          v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
        while (v36 != v35);
        v37 = __p;
      }
      v87 = v35;
      operator delete(v37);
    }
    v38 = v84;
    if (v84)
    {
      v39 = v85;
      v40 = v84;
      if (v85 != v84)
      {
        do
        {
          v42 = (void *)*--v39;
          v41 = v42;
          *v39 = 0;
          if (v42)
            operator delete[](v41);
        }
        while (v39 != v38);
        v40 = v84;
      }
      v85 = v38;
      operator delete(v40);
    }
    if (v80 != v83)
      free(v80);
  }
  return v34;
}

uint64_t mlir::scf::IndexSwitchOp::verify(void)::$_0::operator()(uint64_t **a1, uint64_t a2, const void ***a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  const void **v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void **v31;
  const void **v32;
  const char *v33;
  const void **v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  BOOL v38;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  const void ***v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  __int128 v76;
  _QWORD **v77;
  _QWORD **v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  const char *v86;
  uint64_t *v87;
  char *v88;
  char *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  __int128 v99;
  const char *v100;
  uint64_t *v101;
  char *v102;
  char *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  __int128 v111;
  _QWORD **v112;
  _QWORD **v113;
  void *v114;
  _QWORD *v115;
  void *v116;
  void *v117;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  BOOL v124;
  unint64_t v125;
  BOOL v126;
  unint64_t v127;
  BOOL v128;
  unint64_t v129;
  BOOL v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  BOOL v134;
  unint64_t v135;
  char *v136;
  int64_t v137;
  int64_t v138;
  int64_t v139;
  char *v140;
  char *v141;
  char *v142;
  int64_t v143;
  int64_t v144;
  int64_t v145;
  int64_t v146;
  uint64_t **v147;
  const void ***v148;
  uint64_t v149;
  const char *v150;
  const void **v151;
  uint64_t v152;
  const void **v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160[2];
  void *v161;
  unsigned int v162;
  unsigned int v163;
  _BYTE v164[96];
  void *v165;
  _QWORD *v166;
  void *__p;
  _QWORD **v168;
  char v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    v7 = v6 - 8;
  else
    v7 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v7 + 32));
  if (v8)
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id;
  else
    v9 = 0;
  if (!v9)
  {
    v151 = (const void **)"expected region to end with scf.yield, but got ";
    v155 = 259;
    mlir::OpState::emitOpError(a1, &v151, (uint64_t)&v159);
    v10 = *(_QWORD *)(a2 + 8);
    if (v10)
      v11 = v10 - 8;
    else
      v11 = 0;
    mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v11 + 32));
    if (v159)
      mlir::Diagnostic::operator<<((uint64_t)v160, *(_QWORD *)(v12 + 48));
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v159);
    if (v159)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v159);
    if (!v169)
      return v13;
    v14 = (_QWORD **)__p;
    if (__p)
    {
      v15 = v168;
      v16 = __p;
      if (v168 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v168 = v14;
      operator delete(v16);
    }
    v17 = v165;
    if (!v165)
      goto LABEL_108;
    v18 = v166;
    v19 = v165;
    if (v166 == v165)
      goto LABEL_107;
    do
    {
      v21 = (void *)*--v18;
      v20 = v21;
      *v18 = 0;
      if (v21)
        operator delete[](v20);
    }
    while (v18 != v17);
    goto LABEL_106;
  }
  v22 = v8;
  if ((*(_BYTE *)(v8 + 46) & 0x80) != 0)
  {
    v23 = *(_DWORD *)(v8 + 68);
    v24 = *a1;
    if (v23 == *((_DWORD *)*a1 + 9))
      goto LABEL_29;
  }
  else
  {
    v23 = 0;
    v24 = *a1;
    if (!*((_DWORD *)*a1 + 9))
    {
LABEL_29:
      v25 = (const void **)(v24 - 2);
      if (!v23)
        v25 = 0;
      v150 = (const char *)v23;
      v151 = v25;
      v152 = v23;
      mlir::OperandRange::getTypes((uint64_t *)&v151, &v159);
      if ((*(_BYTE *)(v22 + 46) & 0x80) != 0)
      {
        v26 = (const char *)*(unsigned int *)(v22 + 68);
        v156 = *(_QWORD *)(v22 + 72);
        v157 = v26;
        mlir::OperandRange::getTypes(&v156, (uint64_t *)&v151);
        if (v23)
          goto LABEL_33;
      }
      else
      {
        v156 = 0;
        v157 = 0;
        mlir::OperandRange::getTypes(&v156, (uint64_t *)&v151);
        if (v23)
        {
LABEL_33:
          v147 = a1;
          v148 = a3;
          v149 = v22;
          v27 = 0;
          v29 = v159;
          v28 = v160[0];
          v30 = v160[1];
          v31 = v151;
          v32 = v153;
          v33 = (const char *)(v154 - v152);
          v34 = &v151[4 * v152 + 3];
          v35 = v160[0] - (_QWORD)v161;
          do
          {
            v36 = v31 == v32 && v33 == v27;
            v37 = !v36;
            v38 = !&v27[v35] && v29 == v30;
            if (v38 || !v37)
              break;
            v40 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v29, (uint64_t)&v27[v28]) + 8) & 0xFFFFFFFFFFFFFFF8;
            if (v40 != (*((_QWORD *)*v34 + 1) & 0xFFFFFFFFFFFFFFF8))
            {
              v41 = *((_QWORD *)*v34 + 1) & 0xFFFFFFFFFFFFFFF8;
              v151 = (const void **)"expected result #";
              v155 = 259;
              mlir::OpState::emitOpError(v147, &v151, (uint64_t)&v159);
              v43 = v148;
              v42 = v149;
              if (v159)
              {
                LODWORD(v156) = 5;
                v157 = v27;
                v44 = &v156;
                v45 = (char *)v161;
                if (v162 >= v163)
                {
                  v132 = v162 + 1;
                  if (v161 <= &v156 && (char *)v161 + 24 * v162 > (char *)&v156)
                  {
                    v144 = (char *)&v156 - (_BYTE *)v161;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v132, 24);
                    v45 = (char *)v161;
                    v44 = (uint64_t *)((char *)v161 + v144);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v132, 24);
                    v44 = &v156;
                    v45 = (char *)v161;
                  }
                  v43 = v148;
                  v42 = v149;
                }
                v46 = &v45[24 * v162];
                v47 = *(_OWORD *)v44;
                *((_QWORD *)v46 + 2) = v44[2];
                *(_OWORD *)v46 = v47;
                v48 = ++v162;
                if (v159)
                {
                  LODWORD(v156) = 3;
                  v157 = " of each region to be ";
                  v158 = 22;
                  v49 = &v156;
                  v50 = (char *)v161;
                  if (v48 >= v163)
                  {
                    v133 = v48 + 1;
                    v134 = (char *)v161 + 24 * v48 > (char *)&v156;
                    if (v161 <= &v156 && v134)
                    {
                      v145 = (char *)&v156 - (_BYTE *)v161;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v133, 24);
                      v50 = (char *)v161;
                      v49 = (uint64_t *)((char *)v161 + v145);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v133, 24);
                      v49 = &v156;
                      v50 = (char *)v161;
                    }
                    v43 = v148;
                    v42 = v149;
                  }
                  v51 = &v50[24 * v162];
                  v52 = *(_OWORD *)v49;
                  *((_QWORD *)v51 + 2) = v49[2];
                  *(_OWORD *)v51 = v52;
                  ++v162;
                  if (v159)
                  {
                    v53 = &v156;
                    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v156, v40);
                    v54 = (char *)v161;
                    if (v162 >= v163)
                    {
                      v135 = v162 + 1;
                      if (v161 <= &v156 && (char *)v161 + 24 * v162 > (char *)&v156)
                      {
                        v146 = (char *)&v156 - (_BYTE *)v161;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v135, 24);
                        v54 = (char *)v161;
                        v53 = (uint64_t *)((char *)v161 + v146);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v135, 24);
                        v53 = &v156;
                        v54 = (char *)v161;
                      }
                      v43 = v148;
                      v42 = v149;
                    }
                    v55 = &v54[24 * v162];
                    v56 = *(_OWORD *)v53;
                    *((_QWORD *)v55 + 2) = v53[2];
                    *(_OWORD *)v55 = v56;
                    ++v162;
                  }
                }
              }
              v57 = mlir::Diagnostic::attachNote(v160, *(_QWORD *)(v42 + 24), 1);
              v58 = mlir::Diagnostic::operator<<(v57, v43);
              v59 = v58;
              v61 = v58 + 16;
              v60 = *(_QWORD *)(v58 + 16);
              LODWORD(v156) = 3;
              v157 = " returns ";
              v158 = 9;
              v62 = *(unsigned int *)(v58 + 24);
              v63 = &v156;
              if (v62 >= *(_DWORD *)(v58 + 28))
              {
                v125 = v62 + 1;
                v126 = v60 + 24 * v62 > (unint64_t)&v156;
                if (v60 <= (unint64_t)&v156 && v126)
                {
                  v140 = (char *)&v156 - v60;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v58 + 16, (void *)(v58 + 32), v125, 24);
                  v60 = *(_QWORD *)(v59 + 16);
                  v63 = (uint64_t *)&v140[v60];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v58 + 16, (void *)(v58 + 32), v125, 24);
                  v60 = *(_QWORD *)(v59 + 16);
                  v63 = &v156;
                }
              }
              v64 = v60 + 24 * *(unsigned int *)(v59 + 24);
              v65 = *(_OWORD *)v63;
              *(_QWORD *)(v64 + 16) = v63[2];
              *(_OWORD *)v64 = v65;
              ++*(_DWORD *)(v59 + 24);
              v66 = &v156;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v156, v41);
              v67 = *(unsigned int *)(v59 + 24);
              v68 = *(_QWORD *)(v59 + 16);
              if (v67 >= *(_DWORD *)(v59 + 28))
              {
                v127 = v67 + 1;
                v128 = v68 + 24 * v67 > (unint64_t)&v156;
                if (v68 <= (unint64_t)&v156 && v128)
                {
                  v141 = (char *)&v156 - v68;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v61, (void *)(v59 + 32), v127, 24);
                  v68 = *(_QWORD *)(v59 + 16);
                  v66 = (uint64_t *)&v141[v68];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v61, (void *)(v59 + 32), v127, 24);
                  v68 = *(_QWORD *)(v59 + 16);
                  v66 = &v156;
                }
              }
              v69 = v68 + 24 * *(unsigned int *)(v59 + 24);
              v70 = *(_OWORD *)v66;
              *(_QWORD *)(v69 + 16) = v66[2];
              *(_OWORD *)v69 = v70;
              v71 = *(_DWORD *)(v59 + 28);
              v72 = (*(_DWORD *)(v59 + 24) + 1);
              *(_DWORD *)(v59 + 24) = v72;
              LODWORD(v156) = 3;
              v157 = " here";
              v158 = 5;
              v73 = *(_QWORD *)(v59 + 16);
              v74 = &v156;
              if (v72 >= v71)
              {
                v129 = v72 + 1;
                v130 = v73 + 24 * v72 > (unint64_t)&v156;
                if (v73 <= (unint64_t)&v156 && v130)
                {
                  v142 = (char *)&v156 - v73;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v61, (void *)(v59 + 32), v129, 24);
                  v73 = *(_QWORD *)(v59 + 16);
                  v74 = (uint64_t *)&v142[v73];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v61, (void *)(v59 + 32), v129, 24);
                  v73 = *(_QWORD *)(v59 + 16);
                  v74 = &v156;
                }
              }
              v75 = v73 + 24 * *(unsigned int *)(v59 + 24);
              v76 = *(_OWORD *)v74;
              *(_QWORD *)(v75 + 16) = v74[2];
              *(_OWORD *)v75 = v76;
              ++*(_DWORD *)(v59 + 24);
              v13 = mlir::Diagnostic::operator mlir::LogicalResult();
              if (v159)
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v159);
              if (v169)
              {
                v77 = (_QWORD **)__p;
                if (__p)
                {
                  v78 = v168;
                  v79 = __p;
                  if (v168 != __p)
                  {
                    do
                      v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
                    while (v78 != v77);
                    v79 = __p;
                  }
                  v168 = v77;
                  operator delete(v79);
                }
                v80 = v165;
                if (v165)
                {
                  v81 = v166;
                  v82 = v165;
                  if (v166 != v165)
                  {
                    do
                    {
                      v84 = (void *)*--v81;
                      v83 = v84;
                      *v81 = 0;
                      if (v84)
                        operator delete[](v83);
                    }
                    while (v81 != v80);
                    v82 = v165;
                  }
                  v166 = v80;
                  operator delete(v82);
                }
                v85 = v161;
                if (v161 != v164)
                  goto LABEL_109;
              }
              return v13;
            }
            ++v27;
            v34 += 4;
          }
          while (v150 != v27);
        }
      }
      return 1;
    }
  }
  v151 = (const void **)"expected each region to return ";
  v155 = 259;
  mlir::OpState::emitOpError(a1, &v151, (uint64_t)&v159);
  if (v159)
  {
    v86 = (const char *)*((unsigned int *)*a1 + 9);
    LODWORD(v156) = 5;
    v157 = v86;
    v87 = &v156;
    v88 = (char *)v161;
    if (v162 >= v163)
    {
      v121 = v162 + 1;
      if (v161 <= &v156 && (char *)v161 + 24 * v162 > (char *)&v156)
      {
        v137 = (char *)&v156 - (_BYTE *)v161;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v121, 24);
        v88 = (char *)v161;
        v87 = (uint64_t *)((char *)v161 + v137);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v121, 24);
        v87 = &v156;
        v88 = (char *)v161;
      }
    }
    v89 = &v88[24 * v162];
    v90 = *(_OWORD *)v87;
    *((_QWORD *)v89 + 2) = v87[2];
    *(_OWORD *)v89 = v90;
    v91 = ++v162;
    if (v159)
    {
      LODWORD(v156) = 3;
      v157 = " values, but ";
      v158 = 13;
      v92 = &v156;
      v93 = (char *)v161;
      if (v91 >= v163)
      {
        v123 = v91 + 1;
        v124 = (char *)v161 + 24 * v91 > (char *)&v156;
        if (v161 <= &v156 && v124)
        {
          v139 = (char *)&v156 - (_BYTE *)v161;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v123, 24);
          v93 = (char *)v161;
          v92 = (uint64_t *)((char *)v161 + v139);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v123, 24);
          v92 = &v156;
          v93 = (char *)v161;
        }
      }
      v94 = &v93[24 * v162];
      v95 = *(_OWORD *)v92;
      *((_QWORD *)v94 + 2) = v92[2];
      *(_OWORD *)v94 = v95;
      ++v162;
      if (v159)
      {
        mlir::Diagnostic::operator<<((uint64_t)v160, a3);
        if (v159)
        {
          LODWORD(v156) = 3;
          v157 = " returns ";
          v158 = 9;
          v96 = &v156;
          v97 = (char *)v161;
          if (v162 >= v163)
          {
            v131 = v162 + 1;
            if (v161 <= &v156 && (char *)v161 + 24 * v162 > (char *)&v156)
            {
              v143 = (char *)&v156 - (_BYTE *)v161;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v131, 24);
              v97 = (char *)v161;
              v96 = (uint64_t *)((char *)v161 + v143);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v131, 24);
              v96 = &v156;
              v97 = (char *)v161;
            }
          }
          v98 = &v97[24 * v162];
          v99 = *(_OWORD *)v96;
          *((_QWORD *)v98 + 2) = v96[2];
          *(_OWORD *)v98 = v99;
          ++v162;
        }
      }
    }
  }
  if ((*(_BYTE *)(v22 + 46) & 0x80) != 0)
  {
    v100 = (const char *)*(unsigned int *)(v22 + 68);
    if (!v159)
      goto LABEL_91;
  }
  else
  {
    v100 = 0;
    if (!v159)
      goto LABEL_91;
  }
  LODWORD(v156) = 5;
  v157 = v100;
  v101 = &v156;
  v102 = (char *)v161;
  if (v162 >= v163)
  {
    v122 = v162 + 1;
    if (v161 <= &v156 && (char *)v161 + 24 * v162 > (char *)&v156)
    {
      v138 = (char *)&v156 - (_BYTE *)v161;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v122, 24);
      v102 = (char *)v161;
      v101 = (uint64_t *)((char *)v161 + v138);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v122, 24);
      v101 = &v156;
      v102 = (char *)v161;
    }
  }
  v103 = &v102[24 * v162];
  v104 = *(_OWORD *)v101;
  *((_QWORD *)v103 + 2) = v101[2];
  *(_OWORD *)v103 = v104;
  ++v162;
LABEL_91:
  v105 = mlir::Diagnostic::attachNote(v160, *(_QWORD *)(v22 + 24), 1);
  v106 = v105 + 16;
  v107 = *(_QWORD *)(v105 + 16);
  LODWORD(v156) = 3;
  v157 = "see yield operation here";
  v158 = 24;
  v108 = *(unsigned int *)(v105 + 24);
  v109 = &v156;
  if (v108 >= *(_DWORD *)(v105 + 28))
  {
    v119 = v108 + 1;
    v120 = v107 + 24 * v108 > (unint64_t)&v156;
    if (v107 <= (unint64_t)&v156 && v120)
    {
      v136 = (char *)&v156 - v107;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v106, (void *)(v105 + 32), v119, 24);
      v107 = *(_QWORD *)(v105 + 16);
      v109 = (uint64_t *)&v136[v107];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v106, (void *)(v105 + 32), v119, 24);
      v107 = *(_QWORD *)(v105 + 16);
      v109 = &v156;
    }
  }
  v110 = v107 + 24 * *(unsigned int *)(v105 + 24);
  v111 = *(_OWORD *)v109;
  *(_QWORD *)(v110 + 16) = v109[2];
  *(_OWORD *)v110 = v111;
  ++*(_DWORD *)(v105 + 24);
  v13 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v159)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v159);
  if (!v169)
    return v13;
  v112 = (_QWORD **)__p;
  if (__p)
  {
    v113 = v168;
    v114 = __p;
    if (v168 != __p)
    {
      do
        v113 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v113 - 1);
      while (v113 != v112);
      v114 = __p;
    }
    v168 = v112;
    operator delete(v114);
  }
  v17 = v165;
  if (v165)
  {
    v115 = v166;
    v19 = v165;
    if (v166 == v165)
      goto LABEL_107;
    do
    {
      v117 = (void *)*--v115;
      v116 = v117;
      *v115 = 0;
      if (v117)
        operator delete[](v116);
    }
    while (v115 != v17);
LABEL_106:
    v19 = v165;
LABEL_107:
    v166 = v17;
    operator delete(v19);
  }
LABEL_108:
  v85 = v161;
  if (v161 != v164)
LABEL_109:
    free(v85);
  return v13;
}

double mlir::scf::IndexSwitchOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  uint64_t v20;
  unint64_t v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = *(unsigned int *)(*(_QWORD *)a1 + 36);
    if ((_DWORD)v4)
      v5 = *(_QWORD *)a1 - 16;
    else
      v5 = 0;
    v6 = *(_DWORD *)(a3 + 8);
    if (v6 >= *(_DWORD *)(a3 + 12))
    {
      v20 = 0;
      v12 = &v20;
      mlir::ValueRange::ValueRange(v21, v5, v4);
      v13 = *(unsigned int *)(a3 + 8);
      v14 = *(_QWORD *)a3;
      if (v13 >= *(_DWORD *)(a3 + 12))
      {
        v16 = v13 + 1;
        v17 = v14 + 24 * v13 > (unint64_t)&v20;
        if (v14 <= (unint64_t)&v20 && v17)
        {
          v18 = (char *)&v21[-1] - v14;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
          v14 = *(_QWORD *)a3;
          v12 = (uint64_t *)&v18[*(_QWORD *)a3];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
          v14 = *(_QWORD *)a3;
          v12 = &v20;
        }
      }
      v15 = v14 + 24 * *(unsigned int *)(a3 + 8);
      v8 = *(_OWORD *)v12;
      *(_QWORD *)(v15 + 16) = v12[2];
      *(_OWORD *)v15 = v8;
    }
    else
    {
      v7 = (_QWORD *)(*(_QWORD *)a3 + 24 * v6);
      *v7 = 0;
      mlir::ValueRange::ValueRange(v7 + 1, v5, v4);
    }
    ++*(_DWORD *)(a3 + 8);
  }
  else
  {
    v9 = *(unsigned int *)(*(_QWORD *)a1 + 44);
    v10 = v9 & 0x7FFFFF;
    if ((v9 & 0x7FFFFF) != 0)
    {
      v11 = ((*(_QWORD *)a1 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(*(_QWORD *)a1 + 40);
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    mlir::ValueRange::ValueRange((unint64_t *)&v20, v11, v10);
    *(double *)&v8 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,std::back_insert_iterator<llvm::SmallVectorImpl<mlir::RegionSuccessor>>>(v20, 0, v20, v21[0], a3, (uint64_t)&v20);
  }
  return *(double *)&v8;
}

void mlir::scf::IndexSwitchOp::getEntrySuccessorRegions(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Context;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t *v33;
  unsigned int v34;
  unint64_t *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  BOOL v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[8];
  char v47;
  uint64_t v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*a1 + 56);
  v9 = *(unsigned int *)(*a1 + 44);
  v10 = (uint64_t *)(*a1 + 16 * ((v9 >> 23) & 1) + 64);
  v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(*a1 + 40);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v52, v12, v11);
  v45 = v8;
  v46[0] = 0;
  v47 = 0;
  v48 = *v10;
  v49 = v52;
  if (v8)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v45);
    if (v47)
      v47 = 0;
    mlir::OperationName::OperationName(v46, "scf.index_switch", 16, Context);
    v47 = 1;
  }
  v50 = a2;
  v51 = a3;
  v14 = *a2;
  if (*a2)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      v14 = 0;
    v44 = v14;
    if (v14)
    {
      *(_QWORD *)&v52 = *(_QWORD *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
      v16 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v52);
      v17 = *a1;
      v18 = *(unsigned int *)(*a1 + 44);
      v19 = v18 & 0x7FFFFF;
      if ((v18 & 0x7FFFFF) != 0)
      {
        v20 = ((v17 + 16 * ((v18 >> 23) & 1) + ((v18 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(v17 + 40);
        v21 = v19 - 1;
        if (!v15)
          goto LABEL_26;
      }
      else
      {
        v20 = 0;
        v21 = -1;
        if (!v15)
          goto LABEL_26;
      }
      if (v21)
      {
        v25 = v20 + 24;
        v26 = 24 * ((int)v21 + 1) - 48;
        v27 = 8 * v15 - 8;
        while (1)
        {
          v28 = *v16;
          if (v28 == mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v44))
            break;
          if (v27)
          {
            ++v16;
            v25 += 24;
            v29 = v26;
            v26 -= 24;
            v27 -= 8;
            if (v29)
              continue;
          }
          v17 = *a1;
          LODWORD(v18) = *(_DWORD *)(*a1 + 44);
          LODWORD(v19) = v18 & 0x7FFFFF;
          goto LABEL_26;
        }
        v34 = *(_DWORD *)(a4 + 8);
        if (v34 < *(_DWORD *)(a4 + 12))
        {
          v35 = (unint64_t *)(*(_QWORD *)a4 + 24 * v34);
          *v35 = v25;
          v33 = v35 + 1;
          goto LABEL_33;
        }
        *(_QWORD *)&v52 = v25;
        goto LABEL_36;
      }
LABEL_26:
      if ((_DWORD)v19)
      {
        v30 = ((v17 + 16 * ((v18 >> 23) & 1) + ((v18 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(v17 + 40);
        v31 = *(_DWORD *)(a4 + 8);
        if (v31 < *(_DWORD *)(a4 + 12))
        {
LABEL_28:
          v32 = (unint64_t *)(*(_QWORD *)a4 + 24 * v31);
          *v32 = v30;
          v33 = v32 + 1;
LABEL_33:
          mlir::ValueRange::ValueRange(v33, 0, 0);
LABEL_34:
          ++*(_DWORD *)(a4 + 8);
          return;
        }
      }
      else
      {
        v30 = 0;
        v31 = *(_DWORD *)(a4 + 8);
        if (v31 < *(_DWORD *)(a4 + 12))
          goto LABEL_28;
      }
      *(_QWORD *)&v52 = v30;
LABEL_36:
      v36 = (char *)&v52;
      mlir::ValueRange::ValueRange((unint64_t *)&v52 + 1, 0, 0);
      v37 = *(unsigned int *)(a4 + 8);
      v38 = *(_QWORD *)a4;
      if (v37 >= *(_DWORD *)(a4 + 12))
      {
        v41 = v37 + 1;
        v42 = v38 + 24 * v37 > (unint64_t)&v52;
        if (v38 <= (unint64_t)&v52 && v42)
        {
          v43 = (char *)&v52 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v41, 24);
          v38 = *(_QWORD *)a4;
          v36 = &v43[*(_QWORD *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v41, 24);
          v38 = *(_QWORD *)a4;
          v36 = (char *)&v52;
        }
      }
      v39 = v38 + 24 * *(unsigned int *)(a4 + 8);
      v40 = *(_OWORD *)v36;
      *(_QWORD *)(v39 + 16) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v39 = v40;
      goto LABEL_34;
    }
  }
  v22 = *(unsigned int *)(*a1 + 44);
  v23 = v22 & 0x7FFFFF;
  if ((v22 & 0x7FFFFF) != 0)
  {
    v24 = ((*a1 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(*a1 + 40);
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v52, v24, v23);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,std::back_insert_iterator<llvm::SmallVectorImpl<mlir::RegionSuccessor>>>(v52, 0, v52, *((uint64_t *)&v52 + 1), a4, (uint64_t)&v52);
}

void mlir::scf::IndexSwitchOp::getRegionInvocationBounds(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Int;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[12];

  v6 = *a2;
  if (!*a2)
    goto LABEL_13;
  if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v6 = 0;
  v26 = v6;
  if (!v6)
  {
LABEL_13:
    v18 = *(_DWORD *)(*(_QWORD *)a1 + 44) & 0x7FFFFF;
    v19 = *(unsigned int *)(a4 + 8);
    if (v19 + v18 > (unint64_t)*(unsigned int *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v19 + v18, 12);
      LODWORD(v19) = *(_DWORD *)(a4 + 8);
      if ((_DWORD)v18)
      {
LABEL_15:
        v20 = *(_QWORD *)a4 + 12 * v19;
        v21 = v18;
        do
        {
          *(_QWORD *)v20 = 0x100000000;
          *(_DWORD *)(v20 + 8) = 1;
          v20 += 12;
          --v21;
        }
        while (v21);
        LODWORD(v19) = *(_DWORD *)(a4 + 8);
      }
    }
    else if ((_DWORD)v18)
    {
      goto LABEL_15;
    }
    *(_DWORD *)(a4 + 8) = v19 + v18;
    return;
  }
  v7 = *(unsigned int *)(*(_QWORD *)a1 + 44);
  *(_QWORD *)v27 = *(_QWORD *)(*(_QWORD *)a1 + 16 * ((v7 >> 23) & 1) + 64);
  v8 = (_QWORD *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v27);
  v10 = v9;
  Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v26);
  if (v10)
  {
    v12 = 8 * v10;
    v13 = &v8[v10];
    while (*v8 != Int)
    {
      ++v8;
      v12 -= 8;
      if (!v12)
      {
        v8 = v13;
        break;
      }
    }
  }
  *(_QWORD *)v27 = *(_QWORD *)(*(_QWORD *)a1
                             + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1)
                             + 64);
  v14 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v27);
  if (v8 == (_QWORD *)(v14 + 8 * v15))
  {
    LODWORD(v16) = (v7 & 0x7FFFFF) - 1;
    v17 = *(_DWORD *)(*(_QWORD *)a1 + 44) & 0x7FFFFF;
    if (!v17)
      return;
  }
  else
  {
    *(_QWORD *)v27 = *(_QWORD *)(*(_QWORD *)a1
                               + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1)
                               + 64);
    v16 = ((unint64_t)v8
         - mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v27)) >> 3;
    v17 = *(_DWORD *)(*(_QWORD *)a1 + 44) & 0x7FFFFF;
    if (!v17)
      return;
  }
  v22 = *(_DWORD *)(a4 + 8);
  do
  {
    while (v22 < *(_DWORD *)(a4 + 12))
    {
      v23 = *(_QWORD *)a4 + 12 * v22;
      *(_DWORD *)v23 = 0;
      *(_QWORD *)(v23 + 4) = ((_DWORD)v16 == 0) | 0x100000000;
      v22 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v22;
      LODWORD(v16) = v16 - 1;
      if (!--v17)
        return;
    }
    *(_DWORD *)v27 = 0;
    *(_QWORD *)&v27[4] = ((_DWORD)v16 == 0) | 0x100000000;
    v24 = *(_QWORD *)v27;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v22 + 1, 12);
    v25 = *(_QWORD *)a4 + 12 * *(unsigned int *)(a4 + 8);
    *(_QWORD *)v25 = v24;
    *(_DWORD *)(v25 + 8) = 1;
    v22 = *(_DWORD *)(a4 + 8) + 1;
    *(_DWORD *)(a4 + 8) = v22;
    LODWORD(v16) = v16 - 1;
    --v17;
  }
  while (v17);
}

uint64_t mlir::scf::IndexSwitchOp::fold(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t ConstantIntValue;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *i;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  const double *v45;
  int8x16_t *v46;
  unint64_t v47;
  const double *v48;
  unsigned __int128 v49;
  unsigned __int128 v50;
  int8x16_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;

  ConstantIntValue = mlir::getConstantIntValue(*(_QWORD *)((*a1)[9] + 24) | 4);
  if (!v6)
    return 0;
  v7 = ConstantIntValue;
  v55 = (*a1)[2 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 8];
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v55);
  v8 = 0;
  v10 = v9;
  if (v9)
  {
    while (1)
    {
      v55 = (*a1)[2 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 8];
      if (v7 == *(_QWORD *)(mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v55)
                           + 8 * v8))
        break;
      if (v10 == ++v8)
      {
        v8 = v10;
        break;
      }
    }
  }
  v55 = (*a1)[2 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 8];
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v55);
  v11 = *a1;
  v12 = *((unsigned int *)*a1 + 11);
  if (v8 >= v13)
  {
    v15 = (((unint64_t)&v11[2 * ((v12 >> 23) & 1) + 8] + ((v12 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v11 + 10);
  }
  else
  {
    if ((v12 & 0x7FFFFF) != 0)
      v14 = (((unint64_t)&v11[2 * ((v12 >> 23) & 1) + 8] + ((v12 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v11 + 10);
    else
      v14 = 0;
    v15 = v14 + 24 * v8 + 24;
  }
  v16 = *(_QWORD *)(v15 + 8);
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)v17);
  if ((*(_BYTE *)(v18 + 46) & 0x80) != 0)
  {
    v19 = *(_QWORD *)(v18 + 72);
    mlir::Block::getTerminator((mlir::GenericProgramPoint **)v17);
    if ((*(_BYTE *)(v20 + 46) & 0x80) != 0)
      goto LABEL_17;
LABEL_30:
    v22 = 0;
    v24 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    v23 = (_DWORD *)(a3 + 8);
    v25 = v19 != 0;
    goto LABEL_21;
  }
  v19 = 0;
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)v17);
  if ((*(_BYTE *)(v20 + 46) & 0x80) == 0)
    goto LABEL_30;
LABEL_17:
  v21 = *(_QWORD *)(v20 + 72);
  v22 = *(unsigned int *)(v20 + 68);
  *(_DWORD *)(a3 + 8) = 0;
  v23 = (_DWORD *)(a3 + 8);
  if (v22 <= *(_DWORD *)(a3 + 12))
  {
    v24 = 0;
    v25 = v19 != v21;
    if (v22)
      goto LABEL_31;
    goto LABEL_21;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v22, 8);
  v24 = *(_DWORD *)(a3 + 8);
  v25 = v19 != v21;
  if (!v22)
  {
LABEL_21:
    if (v25)
      goto LABEL_31;
    *v23 = v24 + v22;
    v26 = *a1;
    v27 = (*a1)[2];
    if (v27)
      goto LABEL_23;
    return 0;
  }
LABEL_31:
  v36 = *(_QWORD *)a3;
  v37 = (uint64_t *)(*(_QWORD *)a3 + 8 * v24);
  if (v25)
  {
    for (i = (uint64_t *)(v19 + 24); ; i += 4)
    {
      v39 = *i;
      *v37++ = v39 | 4;
    }
  }
  if (v22 > 0xA
    && ((v40 = v24, v41 = v36 + 8 * (v22 + v24), (unint64_t)v37 < v19 + 32 * v22)
      ? (v42 = v19 + 24 >= v41)
      : (v42 = 1),
        v42))
  {
    v43 = v22 & 3;
    if ((v22 & 3) == 0)
      v43 = 4;
    v44 = v22 - v43;
    v37 += v44;
    v45 = (const double *)(v19 + 88);
    v46 = (int8x16_t *)(v36 + 8 * v40 + 16);
    v47 = v44;
    do
    {
      v48 = v45 - 8;
      v49 = (unsigned __int128)vld4q_f64(v48);
      v50 = (unsigned __int128)vld4q_f64(v45);
      v51 = (int8x16_t)vdupq_n_s64(4uLL);
      v46[-1] = vorrq_s8((int8x16_t)v49, v51);
      *v46 = vorrq_s8((int8x16_t)v50, v51);
      v45 += 16;
      v46 += 2;
      v47 -= 4;
    }
    while (v47);
  }
  else
  {
    v44 = 0;
  }
  v52 = v22 - v44;
  v53 = (uint64_t *)(v19 + 32 * v44 + 24);
  do
  {
    v54 = *v53;
    v53 += 4;
    *v37++ = v54 | 4;
    --v52;
  }
  while (v52);
  *v23 += v22;
  v26 = *a1;
  v27 = (*a1)[2];
  if (!v27)
    return 0;
LABEL_23:
  v29 = *(uint64_t **)(v17 + 32);
  v28 = *(uint64_t **)(v17 + 40);
  v30 = v17 + 32;
  if (v28 != v29 && v26 != v29)
  {
    llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v27 + 32, v30, (uint64_t)v28, (uint64_t)v29);
    v32 = *v29;
    v33 = *v28;
    *(_QWORD *)(v33 + 8) = v29;
    *v29 = v33;
    v34 = *v26;
    *(_QWORD *)(v32 + 8) = v26;
    *v28 = v34;
    *(_QWORD *)(v34 + 8) = v28;
    *v26 = v32;
  }
  return 1;
}

uint64_t mlir::scf::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "scf.condition", 13, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(mlir::scf::detail::ConditionOpGenericAdaptorBase *this, unsigned int a2, int a3)
{
  int v3;
  unsigned int v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  unsigned int v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    if (a2 >= 8)
    {
      v5 = (int32x4_t)xmmword_181235170;
      v4 = a2 & 0xFFFFFFF8;
      v6 = 0uLL;
      v7.i64[0] = 0x300000003;
      v7.i64[1] = 0x300000003;
      v8.i64[0] = 0x800000008;
      v8.i64[1] = 0x800000008;
      v9 = a2 & 0xFFFFFFF8;
      v10 = 0uLL;
      do
      {
        v6 = vsubq_s32(v6, vtstq_s32(v5, v5));
        v10 = vsubq_s32(v10, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v5, v7)));
        v5 = vaddq_s32(v5, v8);
        v9 -= 8;
      }
      while (v9);
      v3 = vaddvq_s32(vaddq_s32(v10, v6));
      if (v4 == a2)
        goto LABEL_11;
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
    do
    {
      if (v4)
        ++v3;
      ++v4;
    }
    while (a2 != v4);
  }
  else
  {
    v3 = 0;
  }
LABEL_11:
  LODWORD(v11) = a3 - 1;
  v12 = a2 + v3 * (a3 - 2);
  if (a2)
    v11 = v11;
  else
    v11 = 1;
  return v12 | (v11 << 32);
}

void mlir::scf::ConditionOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  mlir::OperationState::addOperands(a2, a6, a7);
  v12 = *(unsigned int *)(a2 + 72);
  if (a4 + v12 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v12, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a2 + 64) + 8 * v12;
    do
    {
      *(_QWORD *)(v14 + 8 * v13) = mlir::TypeRange::dereference_iterator(a3, v13);
      ++v13;
    }
    while (a4 != v13);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v12 + a4;
}

BOOL mlir::scf::ConditionOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::Builder *v5;
  uint64_t IntegerType;
  uint64_t v7;
  _BOOL8 v8;
  void *v10[2];
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[128];
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  memset(v15, 0, 24);
  v12 = v14;
  v13 = 0x400000000;
  v10[0] = &v11;
  v10[1] = (void *)0x100000000;
  v8 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v15, 1))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v12, 0, 1, 0xFFFFFFFFLL))&& (!(_DWORD)v13|| (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v10))&& (v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), IntegerType = mlir::Builder::getIntegerType(v5, 1u), v7 = a2 + 16, (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v15, IntegerType, v7))&& mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v12,
                          (uint64_t)v10,
                          v4,
                          v7) != 0;
  if (v10[0] != &v11)
    free(v10[0]);
  if (v12 != v14)
    free(v12);
  return v8;
}

void mlir::scf::ConditionOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  mlir::Operation *v8;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  mlir::Operation *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  mlir::Operation *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];
  const char *AttrDictionary;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  void *v36;
  uint64_t v37;
  _QWORD v38[5];

  v38[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "(", 1uLL);
  }
  else
  {
    *v5 = 40;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ")", 1uLL);
  }
  else
  {
    *v7 = 41;
    ++*((_QWORD *)v6 + 4);
  }
  v36 = v38;
  v37 = 0x200000000;
  v8 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v8);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v8 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v11, v36, v37);
  if ((*((_BYTE *)*this + 46) & 0x80) == 0 || *((_DWORD *)*this + 17) != 1)
  {
    v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 32;
    }
    v14 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v15 = *((unsigned int *)v14 + 17);
      v16 = *((_QWORD *)v14 + 9);
      v17 = v15 - 1;
    }
    else
    {
      v16 = 0;
      v17 = -1;
    }
    v18 = v16 + 32;
    v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    AttrDictionary = ", ";
    v32 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v18, 0, v18, v17, (uint64_t)a2, v19, (uint64_t)&AttrDictionary);
    v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v21 = (_BYTE *)*((_QWORD *)v20 + 4);
    if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
    {
      llvm::raw_ostream::write(v20, 32);
    }
    else
    {
      *((_QWORD *)v20 + 4) = v21 + 1;
      *v21 = 32;
    }
    v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v23 = (_BYTE *)*((_QWORD *)v22 + 4);
    if (*((_BYTE **)v22 + 3) == v23)
    {
      llvm::raw_ostream::write(v22, ":", 1uLL);
    }
    else
    {
      *v23 = 58;
      ++*((_QWORD *)v22 + 4);
    }
    v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v25 = (_BYTE *)*((_QWORD *)v24 + 4);
    if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
    {
      llvm::raw_ostream::write(v24, 32);
    }
    else
    {
      *((_QWORD *)v24 + 4) = v25 + 1;
      *v25 = 32;
    }
    v26 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v27 = *((unsigned int *)v26 + 17);
      v28 = *((_QWORD *)v26 + 9);
      v29 = v27 - 1;
    }
    else
    {
      v28 = 0;
      v29 = -1;
    }
    v30[0] = v28 + 32;
    v30[1] = v29;
    mlir::OperandRange::getTypes(v30, (uint64_t *)&AttrDictionary);
    v35[0] = ", ";
    v35[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)AttrDictionary, v32, v33, v34, (uint64_t)a2, (uint64_t)a2, (uint64_t)v35);
  }
  if (v36 != v38)
    free(v36);
}

uint64_t mlir::scf::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "scf.for", 7, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(mlir::scf::detail::ForOpGenericAdaptorBase *this, unsigned int a2, int a3)
{
  int v3;
  unsigned int v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  unsigned int v10;
  int32x4_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    if (a2 >= 8)
    {
      v5 = (int32x4_t)xmmword_181235170;
      v4 = a2 & 0xFFFFFFF8;
      v6 = 0uLL;
      v7.i64[0] = 0x300000003;
      v7.i64[1] = 0x300000003;
      v8.i64[0] = -1;
      v8.i64[1] = -1;
      v9.i64[0] = 0x800000008;
      v9.i64[1] = 0x800000008;
      v10 = a2 & 0xFFFFFFF8;
      v11 = 0uLL;
      do
      {
        v6 = vsubq_s32(v6, vceqq_s32(v5, v7));
        v11 = vsubq_s32(v11, vceqq_s32(v5, v8));
        v5 = vaddq_s32(v5, v9);
        v10 -= 8;
      }
      while (v10);
      v3 = vaddvq_s32(vaddq_s32(v11, v6));
      if (v4 == a2)
        goto LABEL_11;
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
    do
    {
      if (v4 == 3)
        ++v3;
      ++v4;
    }
    while (a2 != v4);
  }
  else
  {
    v3 = 0;
  }
LABEL_11:
  LODWORD(v12) = a3 - 3;
  v13 = a2 + v3 * (a3 - 4);
  if (a2 == 3)
    v12 = v12;
  else
    v12 = 1;
  return v13 | (v12 << 32);
}

BOOL mlir::scf::ForOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  const void **v18;
  __int16 v19;
  _QWORD v20[3];
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *__p;
  _QWORD **v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 2u))
  {
    return 0;
  }
  v2 = *this;
  v3 = *((unsigned int *)*this + 9);
  if (*((_DWORD *)*this + 9))
    v4 = (uint64_t)(*this - 2);
  else
    v4 = 0;
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    v2 = *this;
  }
  v6 = (_QWORD *)v2[9];
  v7 = *(_QWORD *)(v6[3] + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v7 == (*(_QWORD *)(v6[7] + 8) & 0xFFFFFFFFFFFFFFF8)
    && v7 == (*(_QWORD *)(v6[11] + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v2, (((unint64_t)&v2[2 * (((unint64_t)*((unsigned int *)v2 + 11) >> 23) & 1) + 8]+ ((*((_DWORD *)v2 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v2 + 10), (uint64_t)"region", 6, 0) != 0;
  }
  v18 = (const void **)"failed to verify that all of {lowerBound, upperBound, step} have same type";
  v19 = 259;
  mlir::OpState::emitOpError(this, &v18, (uint64_t)v20);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
  if (v20[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
  if (v27)
  {
    v9 = (_QWORD **)__p;
    if (__p)
    {
      v10 = v26;
      v11 = __p;
      if (v26 != __p)
      {
        do
          v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        v11 = __p;
      }
      v26 = v9;
      operator delete(v11);
    }
    v12 = v23;
    if (v23)
    {
      v13 = v24;
      v14 = v23;
      if (v24 != v23)
      {
        do
        {
          v16 = (void *)*--v13;
          v15 = v16;
          *v13 = 0;
          if (v16)
            operator delete[](v15);
        }
        while (v13 != v12);
        v14 = v23;
      }
      v24 = v12;
      operator delete(v14);
    }
    if (v21 != &v22)
      free(v21);
  }
  return v8;
}

uint64_t mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  const void **v47[4];
  __int16 v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  _QWORD v53[3];
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE v57[96];
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v49 = a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v49))
    return 1;
  v48 = 261;
  v47[0] = a3;
  v47[1] = a4;
  mlir::Operation::emitOpError(a1, v47, (uint64_t)v53);
  if (v53[0])
  {
    v50 = 3;
    v51 = " #";
    v52 = 2;
    v10 = &v50;
    v11 = (char *)v54;
    if (v55 >= v56)
    {
      v37 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        v43 = (char *)&v50 - (_BYTE *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        v11 = (char *)v54;
        v10 = (int *)((char *)v54 + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        v10 = &v50;
        v11 = (char *)v54;
      }
    }
    v12 = &v11[24 * v55];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    v14 = ++v55;
    if (v53[0])
    {
      v50 = 5;
      v51 = (const char *)a5;
      v15 = &v50;
      v16 = (char *)v54;
      if (v14 >= v56)
      {
        v38 = v14 + 1;
        v39 = (char *)v54 + 24 * v14 > (char *)&v50;
        if (v54 <= &v50 && v39)
        {
          v44 = (char *)&v50 - (_BYTE *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          v16 = (char *)v54;
          v15 = (int *)((char *)v54 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          v15 = &v50;
          v16 = (char *)v54;
        }
      }
      v17 = &v16[24 * v55];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v17 = v18;
      v19 = ++v55;
      if (v53[0])
      {
        v50 = 3;
        v51 = " must be signless integer or index, but got ";
        v52 = 44;
        v20 = &v50;
        v21 = (char *)v54;
        if (v19 >= v56)
        {
          v40 = v19 + 1;
          v41 = (char *)v54 + 24 * v19 > (char *)&v50;
          if (v54 <= &v50 && v41)
          {
            v45 = (char *)&v50 - (_BYTE *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            v21 = (char *)v54;
            v20 = (int *)((char *)v54 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            v20 = &v50;
            v21 = (char *)v54;
          }
        }
        v22 = &v21[24 * v55];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
        *(_OWORD *)v22 = v23;
        ++v55;
        if (v53[0])
        {
          v24 = &v50;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, v49);
          v25 = (char *)v54;
          if (v55 >= v56)
          {
            v42 = v55 + 1;
            if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
            {
              v46 = (char *)&v50 - (_BYTE *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
              v25 = (char *)v54;
              v24 = (int *)((char *)v54 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
              v24 = &v50;
              v25 = (char *)v54;
            }
          }
          v26 = &v25[24 * v55];
          v27 = *(_OWORD *)v24;
          *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
          *(_OWORD *)v26 = v27;
          ++v55;
        }
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  if (v62)
  {
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v61;
      v30 = __p;
      if (v61 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v61 = v28;
      operator delete(v30);
    }
    v31 = v58;
    if (v58)
    {
      v32 = v59;
      v33 = v58;
      if (v59 != v58)
      {
        do
        {
          v35 = (void *)*--v32;
          v34 = v35;
          *v32 = 0;
          if (v35)
            operator delete[](v34);
        }
        while (v32 != v31);
        v33 = v58;
      }
      v59 = v31;
      operator delete(v33);
    }
    if (v54 != v57)
      free(v54);
  }
  return v9;
}

uint64_t mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  _QWORD v31[4];
  __int16 v32;
  const void **v33[4];
  __int16 v34;
  const void **v35;
  __int16 v36;
  int v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  _BYTE v45[96];
  void *v46;
  _QWORD *v47;
  void *__p;
  _QWORD **v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 != a2 && *(_QWORD *)(v8 + 8) == a2)
    return 1;
  v35 = (const void **)"region #";
  v36 = 259;
  mlir::Operation::emitOpError(a1, &v35, (uint64_t)&v40);
  if (v40)
  {
    LODWORD(v33[0]) = 5;
    v33[1] = (const void **)a5;
    v9 = v33;
    v10 = (char *)v42;
    if (v43 >= v44)
    {
      v27 = v43 + 1;
      if (v42 <= v33 && (char *)v42 + 24 * v43 > (char *)v33)
      {
        v29 = (char *)v33 - (_BYTE *)v42;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v27, 24);
        v10 = (char *)v42;
        v9 = (const void ***)((char *)v42 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v27, 24);
        v9 = v33;
        v10 = (char *)v42;
      }
    }
    v11 = &v10[24 * v43];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v43;
  }
  if (a4)
  {
    v32 = 1283;
    v31[0] = " ('";
    v31[2] = a3;
    v31[3] = a4;
    v33[0] = (const void **)v31;
    v33[2] = (const void **)"') ";
    v34 = 770;
    if (!v40)
      goto LABEL_13;
LABEL_10:
    mlir::Diagnostic::operator<<((uint64_t)&v41, v33);
    if (v40)
    {
      v37 = 3;
      v38 = "failed to verify constraint: region with 1 blocks";
      v39 = 49;
      v13 = &v37;
      v14 = (char *)v42;
      if (v43 >= v44)
      {
        v28 = v43 + 1;
        if (v42 <= &v37 && (char *)v42 + 24 * v43 > (char *)&v37)
        {
          v30 = (char *)&v37 - (_BYTE *)v42;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v28, 24);
          v14 = (char *)v42;
          v13 = (int *)((char *)v42 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v28, 24);
          v13 = &v37;
          v14 = (char *)v42;
        }
      }
      v15 = &v14[24 * v43];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v15 = v16;
      ++v43;
    }
    goto LABEL_13;
  }
  v33[0] = (const void **)" ";
  v34 = 259;
  if (v40)
    goto LABEL_10;
LABEL_13:
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  if (v50)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v49;
      v20 = __p;
      if (v49 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v49 = v18;
      operator delete(v20);
    }
    v21 = v46;
    if (v46)
    {
      v22 = v47;
      v23 = v46;
      if (v47 != v46)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v46;
      }
      v47 = v21;
      operator delete(v23);
    }
    if (v42 != v45)
      free(v42);
  }
  return v17;
}

BOOL mlir::scf::ForallOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t *v44;
  char *v45;
  char *v46;
  __int128 v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  __int128 v61;
  _QWORD **v62;
  _QWORD **v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  __int128 v71;
  _QWORD **v72;
  _QWORD **v73;
  void *v74;
  _QWORD *v75;
  void *v76;
  void *v77;
  uint64_t *v78;
  char *v79;
  char *v80;
  __int128 v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  __int128 v85;
  _QWORD **v86;
  _QWORD **v87;
  void *v88;
  _QWORD *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  int64_t v107;
  int64_t v108;
  int64_t v109;
  int64_t v110;
  uint64_t v111;
  _QWORD *v112;
  const char *v113;
  uint64_t v114;
  _QWORD v115[3];
  void *v116;
  unsigned int v117;
  unsigned int v118;
  _BYTE v119[96];
  void *v120;
  _QWORD *v121;
  void *__p;
  _QWORD **v123;
  char v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v111 = v6;
  if (!v6)
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      v113 = "expected DictionaryAttr to set properties";
      v114 = 41;
      v26 = (uint64_t *)&v112;
      v27 = (char *)v116;
      if (v117 >= v118)
      {
        v93 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          v102 = (char *)&v112 - (_BYTE *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v93, 24);
          v27 = (char *)v116;
          v26 = (uint64_t *)((char *)v116 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v93, 24);
          v26 = (uint64_t *)&v112;
          v27 = (char *)v116;
        }
      }
      v28 = &v27[24 * v117];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = v26[2];
      *(_OWORD *)v28 = v29;
      ++v117;
      if (v115[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
    }
    if (!v124)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v123;
      v32 = __p;
      if (v123 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v123 = v30;
      operator delete(v32);
    }
    v21 = v120;
    if (!v120)
      goto LABEL_122;
    v33 = v121;
    v23 = v120;
    if (v121 == v120)
    {
LABEL_121:
      v121 = v21;
      operator delete(v23);
LABEL_122:
      if (v116 != v119)
        free(v116);
      return 0;
    }
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
LABEL_120:
    v23 = v120;
    goto LABEL_121;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v111, "mapping", 7uLL);
  if (v8)
  {
    v9 = v8;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      a3(v115, a4);
      if (v115[0])
      {
        LODWORD(v112) = 3;
        v114 = 52;
        v10 = (uint64_t *)&v112;
        v11 = (char *)v116;
        if (v117 >= v118)
        {
          v94 = v117 + 1;
          if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
          {
            v103 = (char *)&v112 - (_BYTE *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v94, 24);
            v11 = (char *)v116;
            v10 = (uint64_t *)((char *)v116 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v94, 24);
            v10 = (uint64_t *)&v112;
            v11 = (char *)v116;
          }
        }
        v12 = &v11[24 * v117];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = v10[2];
        *(_OWORD *)v12 = v13;
        ++v117;
        if (v115[0])
        {
          v14 = (uint64_t *)&v112;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v112, v9);
          v15 = (char *)v116;
          if (v117 >= v118)
          {
            v95 = v117 + 1;
            if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
            {
              v104 = (char *)&v112 - (_BYTE *)v116;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v95, 24);
              v15 = (char *)v116;
              v14 = (uint64_t *)((char *)v116 + v104);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v95, 24);
              v14 = (uint64_t *)&v112;
              v15 = (char *)v116;
            }
          }
          v16 = &v15[24 * v117];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = v14[2];
          *(_OWORD *)v16 = v17;
          ++v117;
          if (v115[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
        }
      }
      if (!v124)
        return 0;
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v123;
        v20 = __p;
        if (v123 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v123 = v18;
        operator delete(v20);
      }
      v21 = v120;
      if (!v120)
        goto LABEL_122;
      v22 = v121;
      v23 = v120;
      if (v121 == v120)
        goto LABEL_121;
      do
      {
        v25 = (void *)*--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v22 != v21);
      goto LABEL_120;
    }
    *a1 = v8;
  }
  v36 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v111, "staticLowerBound", 0x10uLL);
  if (!v36)
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      v113 = "expected key entry for staticLowerBound in DictionaryAttr to set Properties.";
      v114 = 76;
      v44 = (uint64_t *)&v112;
      v45 = (char *)v116;
      if (v117 >= v118)
      {
        v96 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          v105 = (char *)&v112 - (_BYTE *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v96, 24);
          v45 = (char *)v116;
          v44 = (uint64_t *)((char *)v116 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v96, 24);
          v44 = (uint64_t *)&v112;
          v45 = (char *)v116;
        }
      }
      v46 = &v45[24 * v117];
      v47 = *(_OWORD *)v44;
      *((_QWORD *)v46 + 2) = v44[2];
      *(_OWORD *)v46 = v47;
      ++v117;
      if (v115[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
    }
    if (!v124)
      return 0;
    v48 = (_QWORD **)__p;
    if (__p)
    {
      v49 = v123;
      v50 = __p;
      if (v123 != __p)
      {
        do
          v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
        while (v49 != v48);
        v50 = __p;
      }
      v123 = v48;
      operator delete(v50);
    }
    v21 = v120;
    if (!v120)
      goto LABEL_122;
    v51 = v121;
    v23 = v120;
    if (v121 == v120)
      goto LABEL_121;
    do
    {
      v53 = (void *)*--v51;
      v52 = v53;
      *v51 = 0;
      if (v53)
        operator delete[](v52);
    }
    while (v51 != v21);
    goto LABEL_120;
  }
  v37 = (uint64_t)v36;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v36))
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      v114 = 61;
      v54 = (uint64_t *)&v112;
      v55 = (char *)v116;
      if (v117 >= v118)
      {
        v97 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          v106 = (char *)&v112 - (_BYTE *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v97, 24);
          v55 = (char *)v116;
          v54 = (uint64_t *)((char *)v116 + v106);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v97, 24);
          v54 = (uint64_t *)&v112;
          v55 = (char *)v116;
        }
      }
      v56 = &v55[24 * v117];
      v57 = *(_OWORD *)v54;
      *((_QWORD *)v56 + 2) = v54[2];
      *(_OWORD *)v56 = v57;
      ++v117;
      if (v115[0])
      {
        v58 = (uint64_t *)&v112;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v112, v37);
        v59 = (char *)v116;
        if (v117 >= v118)
        {
          v98 = v117 + 1;
          if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
          {
            v107 = (char *)&v112 - (_BYTE *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v98, 24);
            v59 = (char *)v116;
            v58 = (uint64_t *)((char *)v116 + v107);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v98, 24);
            v58 = (uint64_t *)&v112;
            v59 = (char *)v116;
          }
        }
        v60 = &v59[24 * v117];
        v61 = *(_OWORD *)v58;
        *((_QWORD *)v60 + 2) = v58[2];
        *(_OWORD *)v60 = v61;
        ++v117;
        if (v115[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
      }
    }
    if (!v124)
      return 0;
    v62 = (_QWORD **)__p;
    if (__p)
    {
      v63 = v123;
      v64 = __p;
      if (v123 != __p)
      {
        do
          v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
        while (v63 != v62);
        v64 = __p;
      }
      v123 = v62;
      operator delete(v64);
    }
    v21 = v120;
    if (!v120)
      goto LABEL_122;
    v65 = v121;
    v23 = v120;
    if (v121 == v120)
      goto LABEL_121;
    do
    {
      v67 = (void *)*--v65;
      v66 = v67;
      *v65 = 0;
      if (v67)
        operator delete[](v66);
    }
    while (v65 != v21);
    goto LABEL_120;
  }
  a1[1] = v37;
  v38 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v111, "staticStep", 0xAuLL);
  if (!v38)
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      v113 = "expected key entry for staticStep in DictionaryAttr to set Properties.";
      v114 = 70;
      v68 = (uint64_t *)&v112;
      v69 = (char *)v116;
      if (v117 >= v118)
      {
        v99 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          v108 = (char *)&v112 - (_BYTE *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v99, 24);
          v69 = (char *)v116;
          v68 = (uint64_t *)((char *)v116 + v108);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v99, 24);
          v68 = (uint64_t *)&v112;
          v69 = (char *)v116;
        }
      }
      v70 = &v69[24 * v117];
      v71 = *(_OWORD *)v68;
      *((_QWORD *)v70 + 2) = v68[2];
      *(_OWORD *)v70 = v71;
      ++v117;
      if (v115[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
    }
    if (!v124)
      return 0;
    v72 = (_QWORD **)__p;
    if (__p)
    {
      v73 = v123;
      v74 = __p;
      if (v123 != __p)
      {
        do
          v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
        while (v73 != v72);
        v74 = __p;
      }
      v123 = v72;
      operator delete(v74);
    }
    v21 = v120;
    if (!v120)
      goto LABEL_122;
    v75 = v121;
    v23 = v120;
    if (v121 == v120)
      goto LABEL_121;
    do
    {
      v77 = (void *)*--v75;
      v76 = v77;
      *v75 = 0;
      if (v77)
        operator delete[](v76);
    }
    while (v75 != v21);
    goto LABEL_120;
  }
  v39 = (uint64_t)v38;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v38))
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      v114 = 55;
      v78 = (uint64_t *)&v112;
      v79 = (char *)v116;
      if (v117 >= v118)
      {
        v100 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          v109 = (char *)&v112 - (_BYTE *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v100, 24);
          v79 = (char *)v116;
          v78 = (uint64_t *)((char *)v116 + v109);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v100, 24);
          v78 = (uint64_t *)&v112;
          v79 = (char *)v116;
        }
      }
      v80 = &v79[24 * v117];
      v81 = *(_OWORD *)v78;
      *((_QWORD *)v80 + 2) = v78[2];
      *(_OWORD *)v80 = v81;
      ++v117;
      if (v115[0])
      {
        v82 = (uint64_t *)&v112;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v112, v39);
        v83 = (char *)v116;
        if (v117 >= v118)
        {
          v101 = v117 + 1;
          if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
          {
            v110 = (char *)&v112 - (_BYTE *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v101, 24);
            v83 = (char *)v116;
            v82 = (uint64_t *)((char *)v116 + v110);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v101, 24);
            v82 = (uint64_t *)&v112;
            v83 = (char *)v116;
          }
        }
        v84 = &v83[24 * v117];
        v85 = *(_OWORD *)v82;
        *((_QWORD *)v84 + 2) = v82[2];
        *(_OWORD *)v84 = v85;
        ++v117;
        if (v115[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
      }
    }
    if (!v124)
      return 0;
    v86 = (_QWORD **)__p;
    if (__p)
    {
      v87 = v123;
      v88 = __p;
      if (v123 != __p)
      {
        do
          v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
        while (v87 != v86);
        v88 = __p;
      }
      v123 = v86;
      operator delete(v88);
    }
    v21 = v120;
    if (!v120)
      goto LABEL_122;
    v89 = v121;
    v23 = v120;
    if (v121 == v120)
      goto LABEL_121;
    do
    {
      v91 = (void *)*--v89;
      v90 = v91;
      *v89 = 0;
      if (v91)
        operator delete[](v90);
    }
    while (v89 != v21);
    goto LABEL_120;
  }
  a1[2] = v39;
  v40 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v111, "staticUpperBound", 0x10uLL);
  v112 = v40;
  if (!v40)
  {
    a3(v115, a4);
    mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v115, "expected key entry for staticUpperBound in DictionaryAttr to set Properties.");
LABEL_128:
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v115);
    return 0;
  }
  v41 = v40;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v40))
  {
    a3(v115, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v92, (uint64_t *)&v112);
    goto LABEL_128;
  }
  a1[3] = (uint64_t)v41;
  v42 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v111, "operandSegmentSizes", 0x13uLL);
  if (!v42)
  {
    v42 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v111, "operand_segment_sizes", 0x15uLL);
    if (!v42)
    {
      a3(v115, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v115, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_128;
    }
  }
  return mlir::convertFromAttribute(a1 + 4, (const char *)4, v42, a3, a4) != 0;
}

uint64_t mlir::scf::ForallOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t DictionaryAttr;
  void *v36;
  mlir::DictionaryAttr *v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[7];

  v41[6] = *MEMORY[0x1E0C80C00];
  v38 = a1;
  v39 = v41;
  v40 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v38, (uint64_t)"mapping", 7, *a2);
    v6 = v5;
    v7 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      v7 = v40;
    }
    v8 = (uint64_t *)((char *)v39 + 16 * v7);
    *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v40) = v40 + 1;
  }
  v9 = a2[1];
  if (v9)
  {
    v10 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"staticLowerBound", 16, v9);
    v12 = v11;
    v13 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      v13 = v40;
    }
    v14 = (uint64_t *)((char *)v39 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    LODWORD(v40) = v40 + 1;
  }
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"staticStep", 10, v15);
    v18 = v17;
    v19 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      v19 = v40;
    }
    v20 = (uint64_t *)((char *)v39 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    LODWORD(v40) = v40 + 1;
  }
  v21 = a2[3];
  if (v21)
  {
    v22 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"staticUpperBound", 16, v21);
    v24 = v23;
    v25 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      v25 = v40;
    }
    v26 = (uint64_t *)((char *)v39 + 16 * v25);
    *v26 = v22;
    v26[1] = v24;
    LODWORD(v40) = v40 + 1;
  }
  v27 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
  v28 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"operandSegmentSizes", 19, v27);
  v30 = v29;
  v31 = v40;
  if (v40 >= HIDWORD(v40))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
    v31 = v40;
  }
  v32 = (uint64_t *)((char *)v39 + 16 * v31);
  *v32 = v28;
  v32[1] = v30;
  v33 = __CFADD__((_DWORD)v40, 1);
  v34 = (v40 + 1);
  LODWORD(v40) = v40 + 1;
  if (v33)
  {
    DictionaryAttr = 0;
    v36 = v39;
    if (v39 == v41)
      return DictionaryAttr;
    goto LABEL_24;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v38, (mlir::MLIRContext *)v39, v34);
  v36 = v39;
  if (v39 != v41)
LABEL_24:
    free(v36);
  return DictionaryAttr;
}

unint64_t mlir::scf::ForallOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v1 = *a1;
  v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v2 & 1) == 0)
  {
    v34 = *a1;
    v38 = a1;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v20 = v19;
    v1 = v34;
    a1 = v38;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      v1 = v34;
      a1 = v38;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v4 = HIDWORD(v1);
  v5 = 0x9DDFEA08EB382D69 * ((v3[19] + 8 * v1) ^ HIDWORD(v1));
  v47 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v6 = a1[1];
  if ((v4 & 1) == 0)
  {
    v35 = a1[1];
    v39 = a1;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v23 = v22;
    v6 = v35;
    a1 = v39;
    if (v23)
    {
      v24 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v24 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v24;
      v6 = v35;
      a1 = v39;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v7 = HIDWORD(v6);
  v8 = 0x9DDFEA08EB382D69 * ((v3[19] + 8 * v6) ^ HIDWORD(v6));
  v46 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v9 = a1[2];
  if ((v7 & 1) == 0)
  {
    v36 = a1[2];
    v40 = a1;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v26 = v25;
    v9 = v36;
    a1 = v40;
    if (v26)
    {
      v27 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v27 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v27;
      v9 = v36;
      a1 = v40;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v10 = HIDWORD(v9);
  v11 = 0x9DDFEA08EB382D69 * ((v3[19] + 8 * v9) ^ HIDWORD(v9));
  v45 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
  v12 = a1[3];
  if ((v10 & 1) == 0)
  {
    v37 = a1[3];
    v41 = a1;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v29 = v28;
    v12 = v37;
    a1 = v41;
    if (v29)
    {
      v30 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v30 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v30;
      v12 = v37;
      a1 = v41;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v13 = HIDWORD(v12);
  v14 = 0x9DDFEA08EB382D69 * ((v3[19] + 8 * v12) ^ HIDWORD(v12));
  v44 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) ^ ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) >> 47));
  if ((v13 & 1) == 0)
  {
    v42 = a1;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v32 = v31;
    a1 = v42;
    if (v32)
    {
      v33 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v33 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v33;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v42;
    }
  }
  v15 = a1[5];
  v16 = __ROR8__(v15 + 16, 16);
  v17 = 0x9DDFEA08EB382D69 * (a1[4] ^ v3[19] ^ v16);
  v43 = (0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v16 ^ (v17 >> 47) ^ v17)) ^ ((0x9DDFEA08EB382D69 * (v16 ^ (v17 >> 47) ^ v17)) >> 47))) ^ v15;
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43);
}

uint64_t mlir::scf::ForallOp::getInherentAttr(mlir::MLIRContext *a1, _QWORD *a2, _DWORD *__s1, size_t __n)
{
  uint64_t result;

  result = 0;
  switch(__n)
  {
    case 7uLL:
      if (*__s1 != 1886413165 || *(_DWORD *)((char *)__s1 + 3) != 1735289200)
        goto LABEL_14;
      return *a2;
    case 8uLL:
    case 9uLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_14;
    case 0xAuLL:
      if (memcmp(__s1, "staticStep", __n))
        goto LABEL_14;
      return a2[2];
    case 0x10uLL:
      if (!memcmp(__s1, "staticLowerBound", __n))
      {
        result = a2[1];
      }
      else if (!memcmp(__s1, "staticUpperBound", __n))
      {
        result = a2[3];
      }
      else
      {
LABEL_14:
        result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n))
        goto LABEL_14;
      goto LABEL_16;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n))
        goto LABEL_14;
LABEL_16:
      result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::scf::ForallOp::setInherentAttr(uint64_t result, _DWORD *__s1, size_t __n, _QWORD *a4)
{
  _QWORD *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v7 = (_QWORD *)result;
  switch(__n)
  {
    case 7uLL:
      if (*__s1 == 1886413165 && *(_DWORD *)((char *)__s1 + 3) == 1735289200)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
            v13 = a4;
          else
            v13 = 0;
          *(_QWORD *)result = v13;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      break;
    case 0xAuLL:
      result = memcmp(__s1, "staticStep", __n);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v9 = a4;
          else
            v9 = 0;
          v7[2] = v9;
        }
        else
        {
          v7[2] = 0;
        }
      }
      break;
    case 0x10uLL:
      result = memcmp(__s1, "staticLowerBound", __n);
      if ((_DWORD)result)
      {
        result = memcmp(__s1, "staticUpperBound", __n);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
            if ((_DWORD)result)
              v10 = a4;
            else
              v10 = 0;
            v7[3] = v10;
          }
          else
          {
            v7[3] = 0;
          }
        }
      }
      else if (a4)
      {
        result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
        if ((_DWORD)result)
          v14 = a4;
        else
          v14 = 0;
        v7[1] = v14;
      }
      else
      {
        v7[1] = 0;
      }
      break;
    case 0x13uLL:
      result = memcmp(__s1, "operandSegmentSizes", __n);
      if (!(_DWORD)result)
        goto LABEL_23;
      break;
    case 0x15uLL:
      result = memcmp(__s1, "operand_segment_sizes", __n);
      if (!(_DWORD)result)
      {
LABEL_23:
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          v11 = (_DWORD)result ? a4 : 0;
          v15 = v11;
          if ((_DWORD)result)
          {
            result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v15);
            if (result == 4)
            {
              result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v15);
              if (v12)
                result = (uint64_t)memmove(v7 + 4, (const void *)result, 4 * v12);
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::scf::ForallOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"mapping", 7, *a2);
  v6 = a2[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"staticLowerBound", 16, v6);
  v7 = a2[2];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"staticStep", 10, v7);
  v8 = a2[3];
  if (v8)
    mlir::NamedAttrList::append(a3, (uint64_t)"staticUpperBound", 16, v8);
  v9 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v9);
}

BOOL mlir::scf::ForallOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL8 result;

  v8 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(v8, (const void **)"mapping", (const char *)7, a3, a4))
  {
    v9 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v9, (const void **)"staticLowerBound", (const char *)0x10, a3, a4))
    {
      v10 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v10, (const void **)"staticStep", (const char *)0xA, a3, a4))
      {
        v11 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24));
        if (!v11
          || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v11, (const void **)"staticUpperBound", (const char *)0x10, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD *Value;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  const void **v35;
  const char *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    v39 = a1;
    Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    v29 = (_QWORD *)(v27 + 8 * v28);
    if (v29 != Value)
    {
      while (*Value && mlir::detail::InterfaceMap::lookup<mlir::DeviceMappingAttrInterface>(*(_QWORD *)*Value + 8))
      {
        if (++Value == v29)
          return 1;
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    v36 = "attribute '";
    v37 = 11;
    v9 = &v35;
    v10 = (char *)v41;
    if (v42 >= v43)
    {
      v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        v33 = (char *)&v35 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v10 = (char *)v41;
        v9 = (const void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v9 = &v35;
        v10 = (char *)v41;
      }
    }
    v11 = &v10[24 * v42];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v42;
    if (v39)
    {
      v38 = 261;
      v35 = a2;
      v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        v36 = "' failed to satisfy constraint: Device Mapping array attribute";
        v37 = 62;
        v13 = &v35;
        v14 = (char *)v41;
        if (v42 >= v43)
        {
          v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            v34 = (char *)&v35 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            v14 = (char *)v41;
            v13 = (const void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            v13 = &v35;
            v14 = (char *)v41;
          }
        }
        v15 = &v14[24 * v42];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        ++v42;
      }
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  if (v49)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v17;
}

BOOL mlir::scf::ForallOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3))
    return 0;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 4, v12, 4 * v13);
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 3)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 8, (const char *)4));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  __guard *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x30uLL);
    *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v5 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::scf::detail::ForallOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v4[475];
    return a1[32];
  }
  return result;
}

uint64_t mlir::scf::ForallOp::writeProperties(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  mlir::MLIRContext *Context;
  uint64_t v6;
  uint64_t result;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v4 = *(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64;
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)v4);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
    v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 32, 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 16));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 24));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (result >= 6)
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 32), 4);
  return result;
}

BOOL mlir::scf::ForallOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ODSOperands;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD **v39;
  _QWORD **v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  _QWORD **v45;
  _QWORD **v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  const void **v52[4];
  __int16 v53;
  _QWORD v54[3];
  void *v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  void *__p;
  _QWORD **v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = (_QWORD *)v3[1];
  if (!v4)
  {
    v52[0] = (const void **)"requires attribute 'staticLowerBound'";
    v53 = 259;
    mlir::OpState::emitOpError(this, v52, (uint64_t)v54);
    v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
    if (v54[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    if (!v61)
      return v30;
    v31 = (_QWORD **)__p;
    if (__p)
    {
      v32 = v60;
      v33 = __p;
      if (v60 != __p)
      {
        do
          v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        v33 = __p;
      }
      v60 = v31;
      operator delete(v33);
    }
    v34 = v57;
    if (v57)
    {
      v35 = v58;
      v36 = v57;
      if (v58 == v57)
        goto LABEL_82;
      do
      {
        v38 = (void *)*--v35;
        v37 = v38;
        *v35 = 0;
        if (v38)
          operator delete[](v37);
      }
      while (v35 != v34);
LABEL_81:
      v36 = v57;
LABEL_82:
      v58 = v34;
      operator delete(v36);
    }
LABEL_83:
    if (v55 != &v56)
      free(v55);
    return v30;
  }
  v5 = (_QWORD *)v3[2];
  if (!v5)
  {
    v52[0] = (const void **)"requires attribute 'staticStep'";
    v53 = 259;
    mlir::OpState::emitOpError(this, v52, (uint64_t)v54);
    v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
    if (v54[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    if (!v61)
      return v30;
    v39 = (_QWORD **)__p;
    if (__p)
    {
      v40 = v60;
      v41 = __p;
      if (v60 != __p)
      {
        do
          v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
        while (v40 != v39);
        v41 = __p;
      }
      v60 = v39;
      operator delete(v41);
    }
    v34 = v57;
    if (v57)
    {
      v42 = v58;
      v36 = v57;
      if (v58 == v57)
        goto LABEL_82;
      do
      {
        v44 = (void *)*--v42;
        v43 = v44;
        *v42 = 0;
        if (v44)
          operator delete[](v43);
      }
      while (v42 != v34);
      goto LABEL_81;
    }
    goto LABEL_83;
  }
  v6 = (_QWORD *)v3[3];
  if (!v6)
  {
    v52[0] = (const void **)"requires attribute 'staticUpperBound'";
    v53 = 259;
    mlir::OpState::emitOpError(this, v52, (uint64_t)v54);
    v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
    if (v54[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    if (!v61)
      return v30;
    v45 = (_QWORD **)__p;
    if (__p)
    {
      v46 = v60;
      v47 = __p;
      if (v60 != __p)
      {
        do
          v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
        while (v46 != v45);
        v47 = __p;
      }
      v60 = v45;
      operator delete(v47);
    }
    v34 = v57;
    if (v57)
    {
      v48 = v58;
      v36 = v57;
      if (v58 == v57)
        goto LABEL_82;
      do
      {
        v50 = (void *)*--v48;
        v49 = v50;
        *v48 = 0;
        if (v50)
          operator delete[](v49);
      }
      while (v48 != v34);
      goto LABEL_81;
    }
    goto LABEL_83;
  }
  v7 = *v3;
  v54[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"staticLowerBound", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0;
  v54[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (const void **)"staticUpperBound", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0;
  v54[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (const void **)"staticStep", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0;
  v54[0] = *this;
  if (!mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(v7, (const void **)"mapping", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0;
  v8 = *((unsigned int *)*this + 11);
  v9 = (uint64_t)&(*this)[2 * ((v8 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v9 = 0;
  v10 = *(unsigned int *)(v9 + 32);
  if ((v8 & 0x800000) != 0)
  {
    v11 = (*this)[9];
    if ((_DWORD)v10)
      goto LABEL_15;
  }
  else
  {
    v11 = 0;
    if ((_DWORD)v10)
    {
LABEL_15:
      v12 = 0;
      v13 = v11 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v12))
      {
        ++v12;
        v13 += 32;
        if (v10 == v12)
          goto LABEL_18;
      }
      return 0;
    }
  }
LABEL_18:
  ODSOperands = mlir::pdl_interp::RecordMatchOp::getODSOperands((mlir::pdl_interp::RecordMatchOp *)this, 1u);
  if (v15)
  {
    v16 = v15;
    v17 = ODSOperands + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v10))
    {
      LODWORD(v10) = v10 + 1;
      v17 += 32;
      if (!--v16)
        goto LABEL_22;
    }
    return 0;
  }
LABEL_22:
  v18 = mlir::pdl_interp::RecordMatchOp::getODSOperands((mlir::pdl_interp::RecordMatchOp *)this, 2u);
  if (v19)
  {
    v20 = v19;
    v21 = v18 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v10))
    {
      LODWORD(v10) = v10 + 1;
      v21 += 32;
      if (!--v20)
        goto LABEL_26;
    }
    return 0;
  }
LABEL_26:
  v22 = mlir::pdl_interp::RecordMatchOp::getODSOperands((mlir::pdl_interp::RecordMatchOp *)this, 3u);
  if (v23)
  {
    v24 = v23;
    v25 = v22 + 24;
    while (mlir::scf::__mlir_ods_local_type_constraint_SCFOps4(*this, *(_QWORD *)(*(_QWORD *)v25 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v10))
    {
      LODWORD(v10) = v10 + 1;
      v25 += 32;
      if (!--v24)
        goto LABEL_30;
    }
    return 0;
  }
LABEL_30:
  v26 = *this;
  v27 = *((unsigned int *)*this + 9);
  if (*((_DWORD *)*this + 9))
    v28 = (uint64_t)(*this - 2);
  else
    v28 = 0;
  if ((_DWORD)v27)
  {
    for (i = 0; i != v27; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v28, i);
    v26 = *this;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v26, (((unint64_t)&v26[2 * (((unint64_t)*((unsigned int *)v26 + 11) >> 23) & 1) + 8]+ (((unint64_t)*((unsigned int *)v26 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v26 + 10), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::scf::__mlir_ods_local_type_constraint_SCFOps4(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v6;
  int *v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  const void **v46[4];
  __int16 v47;
  int v48;
  const char *v49;
  uint64_t v50;
  _QWORD v51[3];
  void *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[96];
  void *v56;
  _QWORD *v57;
  void *__p;
  _QWORD **v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v51[0] = a2;
    v51[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v6 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v51);
    return 1;
  }
  else
  {
    v47 = 261;
    v46[0] = a3;
    v46[1] = a4;
    mlir::Operation::emitOpError(a1, v46, (uint64_t)v51);
    if (v51[0])
    {
      v48 = 3;
      v49 = " #";
      v50 = 2;
      v8 = &v48;
      v9 = (char *)v52;
      if (v53 >= v54)
      {
        v36 = v53 + 1;
        if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
        {
          v42 = (char *)&v48 - (_BYTE *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          v9 = (char *)v52;
          v8 = (int *)((char *)v52 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          v8 = &v48;
          v9 = (char *)v52;
        }
      }
      v10 = &v9[24 * v53];
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v10 + 2) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v10 = v11;
      v12 = ++v53;
      if (v51[0])
      {
        v48 = 5;
        v49 = (const char *)a5;
        v13 = &v48;
        v14 = (char *)v52;
        if (v12 >= v54)
        {
          v37 = v12 + 1;
          v38 = (char *)v52 + 24 * v12 > (char *)&v48;
          if (v52 <= &v48 && v38)
          {
            v43 = (char *)&v48 - (_BYTE *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
            v14 = (char *)v52;
            v13 = (int *)((char *)v52 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
            v13 = &v48;
            v14 = (char *)v52;
          }
        }
        v15 = &v14[24 * v53];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v15 = v16;
        v17 = ++v53;
        if (v51[0])
        {
          v48 = 3;
          v49 = " must be variadic of ranked tensor of any type values, but got ";
          v50 = 63;
          v18 = &v48;
          v19 = (char *)v52;
          if (v17 >= v54)
          {
            v39 = v17 + 1;
            v40 = (char *)v52 + 24 * v17 > (char *)&v48;
            if (v52 <= &v48 && v40)
            {
              v44 = (char *)&v48 - (_BYTE *)v52;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
              v19 = (char *)v52;
              v18 = (int *)((char *)v52 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
              v18 = &v48;
              v19 = (char *)v52;
            }
          }
          v20 = &v19[24 * v53];
          v21 = *(_OWORD *)v18;
          *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
          *(_OWORD *)v20 = v21;
          ++v53;
          if (v51[0])
          {
            v22 = &v48;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v48, a2);
            v23 = (char *)v52;
            if (v53 >= v54)
            {
              v41 = v53 + 1;
              if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
              {
                v45 = (char *)&v48 - (_BYTE *)v52;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
                v23 = (char *)v52;
                v22 = (int *)((char *)v52 + v45);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
                v22 = &v48;
                v23 = (char *)v52;
              }
            }
            v24 = &v23[24 * v53];
            v25 = *(_OWORD *)v22;
            *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
            *(_OWORD *)v24 = v25;
            ++v53;
          }
        }
      }
    }
    v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (v60)
    {
      v27 = (_QWORD **)__p;
      if (__p)
      {
        v28 = v59;
        v29 = __p;
        if (v59 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v59 = v27;
        operator delete(v29);
      }
      v30 = v56;
      if (v56)
      {
        v31 = v57;
        v32 = v56;
        if (v57 != v56)
        {
          do
          {
            v34 = (void *)*--v31;
            v33 = v34;
            *v31 = 0;
            if (v34)
              operator delete[](v33);
          }
          while (v31 != v30);
          v32 = v56;
        }
        v57 = v30;
        operator delete(v32);
      }
      if (v52 != v55)
        free(v52);
    }
  }
  return v26;
}

uint64_t mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "scf.if", 6, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(mlir::scf::detail::IfOpGenericAdaptorBase *this, unsigned int a2)
{
  return a2 | 0x100000000;
}

BOOL mlir::scf::IfOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  BOOL v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  _QWORD v33[4];
  __int16 v34;
  const void **v35[4];
  __int16 v36;
  const void **v37;
  __int16 v38;
  int v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48;
  _QWORD *v49;
  void *__p;
  _QWORD **v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  v2 = *this;
  v3 = *((unsigned int *)*this + 9);
  if (*((_DWORD *)*this + 9))
    v4 = (uint64_t)(*this - 2);
  else
    v4 = 0;
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    v2 = *this;
  }
  if (!mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v2, (((unint64_t)&v2[2 * (((unint64_t)*((unsigned int *)v2 + 11) >> 23) & 1) + 8]+ (((unint64_t)*((unsigned int *)v2 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v2 + 10), (uint64_t)"thenRegion", 10, 0))return 0;
  v6 = *this;
  v7 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
       + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *((unsigned int *)*this + 10);
  v8 = v7 + 24;
  v9 = *(_QWORD *)(v7 + 32);
  if (v9 == v8 || *(_QWORD *)(v9 + 8) == v8)
    return 1;
  v37 = (const void **)"region #";
  v38 = 259;
  mlir::Operation::emitOpError(v6, &v37, (uint64_t)&v42);
  if (v42)
  {
    LODWORD(v35[0]) = 5;
    v35[1] = (const void **)1;
    v10 = v35;
    v11 = (char *)v44;
    if (v45 >= v46)
    {
      v29 = v45 + 1;
      if (v44 <= v35 && (char *)v44 + 24 * v45 > (char *)v35)
      {
        v31 = (char *)v35 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v29, 24);
        v11 = (char *)v44;
        v10 = (const void ***)((char *)v44 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v29, 24);
        v10 = v35;
        v11 = (char *)v44;
      }
    }
    v12 = &v11[24 * v45];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = v10[2];
    *(_OWORD *)v12 = v13;
    ++v45;
    v14 = v42 == 0;
  }
  else
  {
    v14 = 1;
  }
  v34 = 1283;
  v33[0] = " ('";
  v33[2] = "elseRegion";
  v33[3] = 10;
  v35[0] = (const void **)v33;
  v35[2] = (const void **)"') ";
  v36 = 770;
  if (!v14)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v43, v35);
    if (v42)
    {
      v39 = 3;
      v40 = "failed to verify constraint: region with at most 1 blocks";
      v41 = 57;
      v15 = &v39;
      v16 = (char *)v44;
      if (v45 >= v46)
      {
        v30 = v45 + 1;
        if (v44 <= &v39 && (char *)v44 + 24 * v45 > (char *)&v39)
        {
          v32 = (char *)&v39 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
          v16 = (char *)v44;
          v15 = (int *)((char *)v44 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
          v15 = &v39;
          v16 = (char *)v44;
        }
      }
      v17 = &v16[24 * v45];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v17 = v18;
      ++v45;
    }
  }
  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v42);
  if (v42)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  if (v52)
  {
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v51;
      v22 = __p;
      if (v51 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v51 = v20;
      operator delete(v22);
    }
    v23 = v48;
    if (v48)
    {
      v24 = v49;
      v25 = v48;
      if (v49 != v48)
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          *v24 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v24 != v23);
        v25 = v48;
      }
      v49 = v23;
      operator delete(v25);
    }
    if (v44 != v47)
      free(v44);
  }
  return v19 != 0;
}

uint64_t mlir::scf::IndexSwitchOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  int *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD **v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v11 = &v56;
      v12 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v12 = (char *)v60;
          v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v11 = &v56;
          v12 = (char *)v60;
        }
      }
      v13 = &v12[24 * v61];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v13 = v14;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v15 = (_QWORD **)__p;
    if (__p)
    {
      v16 = v67;
      v17 = __p;
      if (v67 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v67 = v15;
      operator delete(v17);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v19 = v65;
    v20 = v64;
    if (v65 == v64)
      goto LABEL_59;
    do
    {
      v22 = (void *)*--v19;
      v21 = v22;
      *v19 = 0;
      if (v22)
        operator delete[](v21);
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v55, "cases", 5uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for cases in DictionaryAttr to set Properties.";
      v58 = 65;
      v23 = &v56;
      v24 = (char *)v60;
      if (v61 >= v62)
      {
        v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v52 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          v24 = (char *)v60;
          v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          v23 = &v56;
          v24 = (char *)v60;
        }
      }
      v25 = &v24[24 * v61];
      v26 = *(_OWORD *)v23;
      *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v25 = v26;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v27 = (_QWORD **)__p;
    if (__p)
    {
      v28 = v67;
      v29 = __p;
      if (v67 != __p)
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = __p;
      }
      v67 = v27;
      operator delete(v29);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v30 = v65;
    v20 = v64;
    if (v65 == v64)
      goto LABEL_59;
    do
    {
      v32 = (void *)*--v30;
      v31 = v32;
      *v30 = 0;
      if (v32)
        operator delete[](v31);
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  v9 = (uint64_t)v8;
  if (mlir::detail::DenseArrayAttrImpl<long long>::classof(v8))
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 50;
    v33 = &v56;
    v34 = (char *)v60;
    if (v61 >= v62)
    {
      v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v53 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        v34 = (char *)v60;
        v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        v33 = &v56;
        v34 = (char *)v60;
      }
    }
    v35 = &v34[24 * v61];
    v36 = *(_OWORD *)v33;
    *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
    *(_OWORD *)v35 = v36;
    ++v61;
    if (v59[0])
    {
      v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v38 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v38 = (char *)v60;
          v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v37 = &v56;
          v38 = (char *)v60;
        }
      }
      v39 = &v38[24 * v61];
      v40 = *(_OWORD *)v37;
      *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
      *(_OWORD *)v39 = v40;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v41 = (_QWORD **)__p;
    if (__p)
    {
      v42 = v67;
      v43 = __p;
      if (v67 != __p)
      {
        do
          v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        v43 = __p;
      }
      v67 = v41;
      operator delete(v43);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v44 = v65;
    v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v46 = (void *)*--v44;
      v45 = v46;
      *v44 = 0;
      if (v46)
        operator delete[](v45);
    }
    while (v44 != v18);
LABEL_58:
    v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::scf::IndexSwitchOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"cases", 5, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties]";
        v15 = 112;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[477];
    return a1[32];
  }
  return result;
}

uint64_t mlir::scf::IndexSwitchOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int j;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  const void **v63[4];
  __int16 v64;
  int v65;
  const char *v66;
  uint64_t v67;
  _QWORD v68[3];
  void *v69;
  unsigned int v70;
  unsigned int v71;
  _BYTE v72[96];
  void *v73;
  _QWORD *v74;
  void *__p;
  _QWORD **v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (_QWORD *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v68[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v3, (const void **)"cases", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v68))return 0;
    v4 = *this;
    v5 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    {
      v64 = 261;
      v63[0] = (const void **)"operand";
      v63[1] = (const void **)7;
      mlir::Operation::emitOpError(v4, v63, (uint64_t)v68);
      if (v68[0])
      {
        v65 = 3;
        v66 = " #";
        v67 = 2;
        v6 = &v65;
        v7 = (char *)v69;
        if (v70 >= v71)
        {
          v53 = v70 + 1;
          if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
          {
            v59 = (char *)&v65 - (_BYTE *)v69;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v53, 24);
            v7 = (char *)v69;
            v6 = (int *)((char *)v69 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v53, 24);
            v6 = &v65;
            v7 = (char *)v69;
          }
        }
        v8 = &v7[24 * v70];
        v9 = *(_OWORD *)v6;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v8 = v9;
        v10 = ++v70;
        if (v68[0])
        {
          v65 = 5;
          v66 = 0;
          v11 = &v65;
          v12 = (char *)v69;
          if (v10 >= v71)
          {
            v54 = v10 + 1;
            v55 = (char *)v69 + 24 * v10 > (char *)&v65;
            if (v69 <= &v65 && v55)
            {
              v60 = (char *)&v65 - (_BYTE *)v69;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v54, 24);
              v12 = (char *)v69;
              v11 = (int *)((char *)v69 + v60);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v54, 24);
              v11 = &v65;
              v12 = (char *)v69;
            }
          }
          v13 = &v12[24 * v70];
          v14 = *(_OWORD *)v11;
          *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
          *(_OWORD *)v13 = v14;
          v15 = ++v70;
          if (v68[0])
          {
            v65 = 3;
            v66 = " must be index, but got ";
            v67 = 24;
            v16 = &v65;
            v17 = (char *)v69;
            if (v15 >= v71)
            {
              v56 = v15 + 1;
              v57 = (char *)v69 + 24 * v15 > (char *)&v65;
              if (v69 <= &v65 && v57)
              {
                v61 = (char *)&v65 - (_BYTE *)v69;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v56, 24);
                v17 = (char *)v69;
                v16 = (int *)((char *)v69 + v61);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v56, 24);
                v16 = &v65;
                v17 = (char *)v69;
              }
            }
            v18 = &v17[24 * v70];
            v19 = *(_OWORD *)v16;
            *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
            *(_OWORD *)v18 = v19;
            ++v70;
            if (v68[0])
            {
              v20 = &v65;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v5);
              v21 = (char *)v69;
              if (v70 >= v71)
              {
                v58 = v70 + 1;
                if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
                {
                  v62 = (char *)&v65 - (_BYTE *)v69;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v58, 24);
                  v21 = (char *)v69;
                  v20 = (int *)((char *)v69 + v62);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v58, 24);
                  v20 = &v65;
                  v21 = (char *)v69;
                }
              }
              v22 = &v21[24 * v70];
              v23 = *(_OWORD *)v20;
              *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
              *(_OWORD *)v22 = v23;
              ++v70;
            }
          }
        }
      }
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
      if (v68[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
      if (v77)
      {
        v25 = (_QWORD **)__p;
        if (__p)
        {
          v26 = v76;
          v27 = __p;
          if (v76 != __p)
          {
            do
              v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            v27 = __p;
          }
          v76 = v25;
          operator delete(v27);
        }
        v28 = v73;
        if (v73)
        {
          v29 = v74;
          v30 = v73;
          if (v74 != v73)
          {
            do
            {
              v32 = (void *)*--v29;
              v31 = v32;
              *v29 = 0;
              if (v32)
                operator delete[](v31);
            }
            while (v29 != v28);
            v30 = v73;
          }
          v74 = v28;
          operator delete(v30);
        }
        if (v69 != v72)
          free(v69);
      }
      if (!v24)
        return 0;
    }
    v42 = *this;
    v43 = *((unsigned int *)*this + 9);
    v44 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
    if ((_DWORD)v43)
    {
      for (i = 0; i != v43; ++i)
        mlir::detail::OpResultImpl::getNextResultAtOffset(v44, i);
      v42 = *this;
    }
    if (!mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v42, (((unint64_t)&v42[2 * (((unint64_t)*((unsigned int *)v42 + 11) >> 23) & 1)+ 8]+ (((unint64_t)*((unsigned int *)v42 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v42 + 10), (uint64_t)"defaultRegion", 13, 0))return 0;
    v46 = *((unsigned int *)*this + 11);
    v47 = v46 & 0x7FFFFF;
    if ((v46 & 0x7FFFFF) == 0)
    {
      v49 = 0;
      v48 = 0;
LABEL_62:
      v50 = v48 + 24;
      for (j = 1;
            mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(*this, v50, (uint64_t)"caseRegions", 11, j);
            ++j)
      {
        v50 += 24;
        if (v50 == v49)
          return 1;
      }
      return 0;
    }
    if (v47 != 1)
    {
      v48 = (((unint64_t)&(*this)[2 * ((v46 >> 23) & 1) + 8] + ((v46 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)*this + 10);
      v49 = v48 + 24 * v47;
      goto LABEL_62;
    }
    return 1;
  }
  else
  {
    v63[0] = (const void **)"requires attribute 'cases'";
    v64 = 259;
    mlir::OpState::emitOpError(this, v63, (uint64_t)v68);
    v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
    if (v68[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
    if (v77)
    {
      v34 = (_QWORD **)__p;
      if (__p)
      {
        v35 = v76;
        v36 = __p;
        if (v76 != __p)
        {
          do
            v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
          while (v35 != v34);
          v36 = __p;
        }
        v76 = v34;
        operator delete(v36);
      }
      v37 = v73;
      if (v73)
      {
        v38 = v74;
        v39 = v73;
        if (v74 != v73)
        {
          do
          {
            v41 = (void *)*--v38;
            v40 = v41;
            *v38 = 0;
            if (v41)
              operator delete[](v40);
          }
          while (v38 != v37);
          v39 = v73;
        }
        v74 = v37;
        operator delete(v39);
      }
      if (v69 != v72)
        free(v69);
    }
  }
  return v33;
}

BOOL mlir::scf::IndexSwitchOp::parse(void *a1, uint64_t *a2)
{
  mlir::Region *v4;
  uint64_t v5;
  _QWORD *v6;
  mlir::Region *v7;
  int v8;
  mlir::Region *v9;
  mlir::Region *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext **v14;
  uint64_t DenseI64ArrayAttr;
  char v16;
  void *v17;
  _QWORD *v18;
  mlir::IndexType **v19;
  mlir::MLIRContext *v20;
  uint64_t IndexType;
  _BOOL8 v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  mlir::Region *v27;
  void *v28;
  mlir::Region *v30;
  mlir::Region *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[16];
  void *__src;
  uint64_t v37;
  uint64_t v38;
  void *v39[4];
  void *v40;
  uint64_t v41;
  _QWORD v42[2];
  __int16 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  memset(v39, 0, 24);
  __src = &v38;
  v37 = 0x100000000;
  v33 = v35;
  v34 = 0x200000000;
  v4 = (mlir::Region *)operator new(0x18uLL);
  *(_QWORD *)v4 = v4;
  *((_QWORD *)v4 + 1) = v4;
  *((_QWORD *)v4 + 2) = 0;
  v30 = v4;
  (*(void (**)(void *))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(void *, void **, uint64_t))(*(_QWORD *)a1 + 672))(a1, v39, 1)
    || (v32 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(void *, uint64_t *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    || (v5 = a2[1],
        v40 = a1,
        v41 = (uint64_t)&v32,
        v42[0] = a2,
        (v6 = (_QWORD *)mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v5 + 96))) != 0)
    && !mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (const void **)"cases", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::IndexSwitchOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v40)|| (*(unsigned __int8 (**)(void *))(*(_QWORD *)a1 + 64))(a1)&& !mlir::AsmParser::parseTypeList((uint64_t)a1, (uint64_t)&__src))
  {
LABEL_26:
    v22 = 0;
    v30 = 0;
    goto LABEL_27;
  }
  v40 = v42;
  v41 = 0x600000000;
  if (!(*(unsigned __int8 (**)(void *, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "case", 4))
  {
LABEL_19:
    v14 = (mlir::MLIRContext **)(*(uint64_t (**)(void *))(*(_QWORD *)a1 + 32))(a1);
    DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(v14, (uint64_t)v40, v41);
    v16 = 0;
    v17 = v40;
    if (v40 != v42)
      goto LABEL_20;
    goto LABEL_21;
  }
  while (1)
  {
    v32 = 0;
    v7 = (mlir::Region *)operator new(0x18uLL);
    *(_QWORD *)v7 = v7;
    *((_QWORD *)v7 + 1) = v7;
    *((_QWORD *)v7 + 2) = 0;
    v31 = v7;
    v8 = v34;
    if (v34 >= HIDWORD(v34))
    {
      v9 = *(mlir::Region **)llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<std::unique_ptr<mlir::Region>>((uint64_t)&v33, (uint64_t *)&v31);
      v10 = v31;
      v31 = 0;
      if (!v10)
        goto LABEL_11;
LABEL_10:
      mlir::Region::~Region(v10);
      operator delete(v11);
      goto LABEL_11;
    }
    v9 = v7;
    v31 = 0;
    *((_QWORD *)v33 + v34) = v7;
    LODWORD(v34) = v8 + 1;
    v10 = v31;
    v31 = 0;
    if (v10)
      goto LABEL_10;
LABEL_11:
    if (!mlir::AsmParser::parseInteger<long long>((uint64_t)a1, &v32)
      || !(*(unsigned __int8 (**)(void *, mlir::Region *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v9, 0, 0, 0))
    {
      break;
    }
    v12 = v32;
    v13 = v41;
    if (v41 >= (unint64_t)HIDWORD(v41))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v42, v41 + 1, 8);
      v13 = v41;
    }
    *((_QWORD *)v40 + v13) = v12;
    LODWORD(v41) = v41 + 1;
    if (!(*(unsigned __int8 (**)(void *, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "case", 4))
      goto LABEL_19;
  }
  DenseI64ArrayAttr = 0;
  v16 = 1;
  v17 = v40;
  if (v40 == v42)
    goto LABEL_21;
LABEL_20:
  free(v17);
LABEL_21:
  if ((v16 & 1) != 0)
    goto LABEL_26;
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(a2) = DenseI64ArrayAttr;
  v43 = 257;
  if (!(*(unsigned __int8 (**)(void *, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "default", 7, &v40)|| !(*(unsigned __int8 (**)(void *, mlir::Region *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    goto LABEL_26;
  }
  v18 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)a1 + 32))(a1);
  mlir::impl::ensureRegionTerminator(v4, v18, *a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IndexSwitchOp>::buildTerminator);
  mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v30);
  mlir::OperationState::addRegions((char *)a2, (unint64_t)v33, v34);
  v19 = (mlir::IndexType **)(*(uint64_t (**)(void *))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v19, v20);
  mlir::OperationState::addTypes((uint64_t)a2, __src, v37);
  v22 = (*(unsigned __int8 (**)(void *, void **, uint64_t, uint64_t *))(*(_QWORD *)a1 + 696))(a1, v39, IndexType, a2 + 2) != 0;
  v4 = v30;
  v30 = 0;
  if (v4)
  {
LABEL_27:
    mlir::Region::~Region(v4);
    operator delete(v23);
  }
  v24 = v33;
  if ((_DWORD)v34)
  {
    v25 = 8 * v34;
    v26 = (char *)v33 - 8;
    do
    {
      v27 = *(mlir::Region **)&v26[v25];
      *(_QWORD *)&v26[v25] = 0;
      if (v27)
      {
        mlir::Region::~Region(v27);
        operator delete(v28);
      }
      v25 -= 8;
    }
    while (v25);
    v24 = v33;
  }
  if (v24 != v35)
    free(v24);
  if (__src != &v38)
    free(__src);
  return v22;
}

void mlir::scf::IndexSwitchOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _WORD *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  mlir::Operation *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v37;
  llvm::raw_ostream *v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  llvm::raw_ostream *v43;
  _DWORD *v44;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  _QWORD *v47;
  uint64_t v48;
  mlir::GenericProgramPoint **v49;
  mlir::Operation *v50;
  mlir::Operation *v51;
  _BOOL8 v52;
  mlir::scf::IndexSwitchOp *v53;
  uint64_t v54[2];
  _QWORD v55[2];
  unint64_t v56[2];
  unint64_t AttrDictionary;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[6];

  v63[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v61 = v63;
  v63[0] = "cases";
  v63[1] = 5;
  v62 = 0x200000001;
  v6 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v9, v61, v62);
  if (*((_DWORD *)*this + 9))
  {
    v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 32;
    }
    v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v13 = (_WORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
    {
      *v13 = 15917;
      *((_QWORD *)v12 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v12, "->", 2uLL);
    }
    v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
    {
      llvm::raw_ostream::write(v14, 32);
    }
    else
    {
      *((_QWORD *)v14 + 4) = v15 + 1;
      *v15 = 32;
    }
    v16 = *((unsigned int *)*this + 9);
    v17 = (uint64_t)*this - 16;
    if (!(_DWORD)v16)
      v17 = 0;
    v54[0] = v17;
    v54[1] = v16;
    mlir::OperandRange::getTypes(v54, (uint64_t *)&AttrDictionary);
    v55[0] = ", ";
    v55[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(AttrDictionary, v58, v59, v60, (uint64_t)a2, (uint64_t)a2, (uint64_t)v55);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  v53 = (mlir::scf::IndexSwitchOp *)this;
  v20 = *this;
  v21 = *((unsigned int *)*this + 11);
  v22 = (uint64_t)*this + 16 * ((v21 >> 23) & 1);
  v25 = *(_QWORD *)(v22 + 64);
  v23 = v22 + 64;
  v24 = v25;
  if ((v21 & 0x7FFFFF) != 0)
  {
    v26 = ((v23 + ((v21 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *((unsigned int *)v20 + 10);
    v27 = (v21 & 0x7FFFFF) - 1;
  }
  else
  {
    v26 = 0;
    v27 = -1;
  }
  mlir::ValueRange::ValueRange(v56, v26 + 24, v27);
  v28 = v56[0];
  v29 = v56[1];
  v55[0] = v24;
  v30 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v55);
  AttrDictionary = v30;
  v58 = v28;
  v59 = 0;
  if (v31)
  {
    v32 = (unint64_t *)v30;
    v33 = v31;
    v34 = 0;
    v35 = (unint64_t *)(v30 + 8 * v33);
    do
    {
      if (v58 == v28 && v34 == v29)
        break;
      v37 = mlir::RegionRange::dereference_iterator(&v58, v34);
      (*(void (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 128))(a2);
      v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v39 = *((_QWORD *)v38 + 4);
      if ((unint64_t)(*((_QWORD *)v38 + 3) - v39) > 4)
      {
        *(_BYTE *)(v39 + 4) = 32;
        *(_DWORD *)v39 = 1702060387;
        *((_QWORD *)v38 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v38, "case ", 5uLL);
      }
      v40 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      llvm::raw_ostream::operator<<(v40, *v32);
      v41 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v42 = (_BYTE *)*((_QWORD *)v41 + 4);
      if ((unint64_t)v42 < *((_QWORD *)v41 + 3))
      {
        *((_QWORD *)v41 + 4) = v42 + 1;
        *v42 = 32;
      }
      else
      {
        llvm::raw_ostream::write(v41, 32);
      }
      (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, v37, 0, 1, 0);
      v32 = (unint64_t *)(AttrDictionary + 8);
      v34 = v59 + 1;
      AttrDictionary = (unint64_t)v32;
      ++v59;
    }
    while (v32 != v35);
  }
  (*(void (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 128))(a2);
  v43 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v44 = (_DWORD *)*((_QWORD *)v43 + 4);
  if (*((_QWORD *)v43 + 3) - (_QWORD)v44 > 6uLL)
  {
    *(_DWORD *)((char *)v44 + 3) = 1953264993;
    *v44 = 1634100580;
    *((_QWORD *)v43 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v43, "default", 7uLL);
  }
  v45 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v46 = (_BYTE *)*((_QWORD *)v45 + 4);
  if ((unint64_t)v46 >= *((_QWORD *)v45 + 3))
  {
    llvm::raw_ostream::write(v45, 32);
  }
  else
  {
    *((_QWORD *)v45 + 4) = v46 + 1;
    *v46 = 32;
  }
  v47 = (_QWORD *)(((*(_QWORD *)v53
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)v53 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)v53 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)v53 + 40));
  v52 = (_QWORD *)*v47 == v47
     || ((v48 = v47[1]) != 0 ? (v49 = (mlir::GenericProgramPoint **)(v48 - 8)) : (v49 = 0),
         (mlir::Block::getTerminator(v49), !v50)
      || (v51 = v50,
          AttrDictionary = mlir::Operation::getAttrDictionary(v50),
          mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&AttrDictionary))
      || (*((_BYTE *)v51 + 46) & 0x80) != 0 && *((_DWORD *)v51 + 17))
     || *((_DWORD *)v51 + 9) != 0;
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, _BOOL8, _QWORD))(*(_QWORD *)a2 + 224))(a2, ((*(_QWORD *)v53+ 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)v53 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(*(_QWORD *)v53 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(*(_QWORD *)v53 + 40), 1, v52, 0);
  if (v61 != v63)
    free(v61);
}

BOOL mlir::scf::ParallelOp::setPropertiesFromAttr(void *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  int v37;
  const char *v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v36 = v6;
  if (!v6)
  {
    a3(v40, a4);
    if (v40[0])
    {
      v37 = 3;
      v38 = "expected DictionaryAttr to set properties";
      v39 = 41;
      v10 = &v37;
      v11 = (char *)v41;
      if (v42 >= v43)
      {
        v32 = v42 + 1;
        if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          v11 = (char *)v41;
          v10 = (int *)((char *)v41 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          v10 = &v37;
          v11 = (char *)v41;
        }
      }
      v12 = &v11[24 * v42];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v42;
      if (v40[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
    }
    if (!v49)
      return 0;
    v14 = (_QWORD **)__p;
    if (__p)
    {
      v15 = v48;
      v16 = __p;
      if (v48 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v48 = v14;
      operator delete(v16);
    }
    v17 = v45;
    if (!v45)
      goto LABEL_43;
    v18 = v46;
    v19 = v45;
    if (v46 == v45)
    {
LABEL_42:
      v46 = v17;
      operator delete(v19);
LABEL_43:
      if (v41 != v44)
        free(v41);
      return 0;
    }
    do
    {
      v21 = (void *)*--v18;
      v20 = v21;
      *v18 = 0;
      if (v21)
        operator delete[](v20);
    }
    while (v18 != v17);
LABEL_41:
    v19 = v45;
    goto LABEL_42;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v36, "operandSegmentSizes", 0x13uLL);
  if (!v8)
  {
    v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v36, "operand_segment_sizes", 0x15uLL);
    if (!v8)
    {
      a3(v40, a4);
      if (v40[0])
      {
        v37 = 3;
        v38 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        v39 = 79;
        v22 = &v37;
        v23 = (char *)v41;
        if (v42 >= v43)
        {
          v33 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            v35 = (char *)&v37 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v33, 24);
            v23 = (char *)v41;
            v22 = (int *)((char *)v41 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v33, 24);
            v22 = &v37;
            v23 = (char *)v41;
          }
        }
        v24 = &v23[24 * v42];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v24 = v25;
        ++v42;
        if (v40[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
      }
      if (!v49)
        return 0;
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v48;
        v28 = __p;
        if (v48 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v48 = v26;
        operator delete(v28);
      }
      v17 = v45;
      if (!v45)
        goto LABEL_43;
      v29 = v46;
      v19 = v45;
      if (v46 == v45)
        goto LABEL_42;
      do
      {
        v31 = (void *)*--v29;
        v30 = v31;
        *v29 = 0;
        if (v31)
          operator delete[](v30);
      }
      while (v29 != v17);
      goto LABEL_41;
    }
  }
  return mlir::convertFromAttribute(a1, (const char *)4, v8, a3, a4) != 0;
}

uint64_t mlir::scf::ParallelOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  void *v11;
  mlir::DictionaryAttr *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[7];

  v16[6] = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v14 = v16;
  v15 = 0x300000000;
  v2 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, a2, 4);
  NamedAttr = mlir::Builder::getNamedAttr(&v13, (uint64_t)"operandSegmentSizes", 19, v2);
  v5 = v4;
  v6 = v15;
  if (v15 >= HIDWORD(v15))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v15 + 1, 16);
    v6 = v15;
  }
  v7 = (uint64_t *)((char *)v14 + 16 * v6);
  *v7 = NamedAttr;
  v7[1] = v5;
  v8 = __CFADD__((_DWORD)v15, 1);
  v9 = (v15 + 1);
  LODWORD(v15) = v15 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    v11 = v14;
    if (v14 == v16)
      return DictionaryAttr;
    goto LABEL_8;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v13, (mlir::MLIRContext *)v14, v9);
  v11 = v14;
  if (v14 != v16)
LABEL_8:
    free(v11);
  return DictionaryAttr;
}

unint64_t mlir::scf::ParallelOp::computePropertiesHash(_QWORD *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v19 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v19;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v19;
    }
  }
  v3 = v2[19];
  v5 = *a1;
  v4 = a1[1];
  if ((v6 & 1) == 0)
  {
    v17 = a1[1];
    v20 = v2[19];
    v18 = *a1;
    v4 = v17;
    v5 = v18;
    v3 = v20;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      v4 = v17;
      v5 = v18;
      v3 = v20;
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v7 = __ROR8__(v4 + 16, 16);
  v8 = (0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v7 ^ ((0x9DDFEA08EB382D69 * (v5 ^ v3 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v5 ^ v3 ^ v7)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v5 ^ v3 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v5 ^ v3 ^ v7)))) >> 47))) ^ v4;
  v9 = 8 * v8 + 8;
  v10 = v2[19] ^ HIDWORD(v8);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v9)))) ^ ((0x9DDFEA08EB382D69 * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v9)))) >> 47));
}

uint64_t mlir::scf::ParallelOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, _QWORD *a4)
{
  void *v5;
  BOOL v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v5 = (void *)result;
  if (a3 == 19)
  {
    result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    if (a3 != 21)
      return result;
    v6 = *(_QWORD *)__s1 == 0x5F646E617265706FLL && *((_QWORD *)__s1 + 1) == 0x5F746E656D676573;
    if (!v6 || *(_QWORD *)(__s1 + 13) != 0x73657A69735F746ELL)
      return result;
  }
  if (a4)
  {
    result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
    if ((_DWORD)result)
      v8 = a4;
    else
      v8 = 0;
    v10 = v8;
    if ((_DWORD)result)
    {
      result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v10);
      if (result == 4)
      {
        result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v10);
        if (v9)
          return (uint64_t)memmove(v5, (const void *)result, 4 * v9);
      }
    }
  }
  return result;
}

BOOL mlir::scf::ParallelOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _DWORD *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3, v12, 4 * v13);
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, v3, (const char *)4);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x10uLL);
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties]";
        v15 = 109;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[479];
    return a1[32];
  }
  return result;
}

BOOL mlir::scf::ParallelOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;

  v2 = *this;
  v3 = *((unsigned int *)v2 + 11);
  v4 = (v3 >> 23) & 1;
  v5 = LODWORD(v2[2 * v4 + 8]);
  if ((v3 & 0x800000) != 0)
  {
    v6 = v2[9];
    if ((_DWORD)v5)
      goto LABEL_3;
  }
  else
  {
    v6 = 0;
    if ((_DWORD)v5)
    {
LABEL_3:
      v7 = 0;
      v8 = v6 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v7))
      {
        ++v7;
        v8 += 32;
        if (v5 == v7)
        {
          v2 = *this;
          v3 = *((unsigned int *)*this + 11);
          v4 = (v3 >> 23) & 1;
          v9 = v3 & 0x800000;
          goto LABEL_9;
        }
      }
      return 0;
    }
  }
  v9 = v3 & 0x800000;
LABEL_9:
  if (BYTE3(v3))
    v10 = &v2[2 * v4 + 8];
  else
    v10 = 0;
  v11 = *((_DWORD *)v10 + 1);
  if (v9)
  {
    v12 = v2[9];
    if (v11)
      goto LABEL_14;
  }
  else
  {
    v12 = 0;
    if (v11)
    {
LABEL_14:
      v13 = *(unsigned int *)v10;
      v14 = v11 + v13 - v13;
      v15 = v12 + 32 * v13 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v5))
      {
        LODWORD(v5) = v5 + 1;
        v15 += 32;
        if (!--v14)
        {
          v2 = *this;
          v3 = *((unsigned int *)*this + 11);
          v4 = (v3 >> 23) & 1;
          v9 = v3 & 0x800000;
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
LABEL_18:
  v16 = (uint64_t)&v2[2 * v4 + 8];
  if (BYTE3(v3))
    v17 = (_DWORD *)v16;
  else
    v17 = 0;
  v18 = v17[2];
  if (v9)
  {
    v19 = v2[9];
    if (v18)
      goto LABEL_23;
  }
  else
  {
    v19 = 0;
    if (v18)
    {
LABEL_23:
      v20 = (v17[1] + *v17);
      v21 = (v18 + v20) - v20;
      v22 = v19 + 32 * v20 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v5))
      {
        LODWORD(v5) = v5 + 1;
        v22 += 32;
        if (!--v21)
        {
          v2 = *this;
          goto LABEL_27;
        }
      }
      return 0;
    }
  }
LABEL_27:
  v23 = *((unsigned int *)v2 + 9);
  if (*((_DWORD *)v2 + 9))
    v24 = (uint64_t)(v2 - 2);
  else
    v24 = 0;
  if ((_DWORD)v23)
  {
    for (i = 0; i != v23; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v24, i);
    v2 = *this;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v2, (((unint64_t)&v2[2 * (((unint64_t)*((unsigned int *)v2 + 11) >> 23) & 1) + 8]+ (((unint64_t)*((unsigned int *)v2 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v2 + 10), (uint64_t)"region", 6, 0) != 0;
}

BOOL mlir::scf::ReduceReturnOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  v9 = v6;
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::scf::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "scf.while", 9, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::scf::WhileOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  mlir::OperationState::addOperands(a2, a5, a6);
  *(_QWORD *)(a2 + 192) = 0;
  v13 = *(unsigned int *)(a2 + 120);
  if (a8 + v13 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a8 + v13, 16);
    LODWORD(v13) = *(_DWORD *)(a2 + 120);
  }
  if (a8)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v13), a7, 16 * a8);
    LODWORD(v13) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v13 + a8;
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v14 = *(unsigned int *)(a2 + 72);
  if (a4 + v14 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v14, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a2 + 64) + 8 * v14;
    do
    {
      *(_QWORD *)(v16 + 8 * v15) = mlir::TypeRange::dereference_iterator(a3, v15);
      ++v15;
    }
    while (a4 != v15);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + a4;
}

BOOL mlir::scf::WhileOp::verifyInvariantsImpl(mlir::scf::WhileOp *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD *)this;
  v3 = *(unsigned int *)(v2 + 36);
  if (*(_DWORD *)(v2 + 36))
    v4 = v2 - 16;
  else
    v4 = 0;
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    v2 = *(_QWORD *)this;
  }
  if (!mlir::scf::__mlir_ods_local_region_constraint_SCFOps1((uint64_t *)v2, ((v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v2 + 40), (uint64_t)"before", 6, 0))return 0;
  v6 = *(_QWORD *)this;
  v7 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v7 & 0x7FFFFF) != 0)
    v8 = ((v6 + 16 * ((v7 >> 23) & 1) + ((v7 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(v6 + 40);
  else
    v8 = 0;
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1((uint64_t *)v6, v8 + 24, (uint64_t)"after", 5, 1u) != 0;
}

uint64_t mlir::scf::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "scf.yield", 9, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

unint64_t mlir::scf::detail::YieldOpGenericAdaptorBase::getODSOperandIndexAndLength(mlir::scf::detail::YieldOpGenericAdaptorBase *this, int a2, uint64_t a3)
{
  return (a3 * a2) | (unint64_t)(a3 << 32);
}

BOOL mlir::scf::YieldOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  void *v8[2];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)
    || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| (_DWORD)v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    v5 = 0;
    v6 = v8[0];
    if (v8[0] == &v9)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  v6 = v8[0];
  if (v8[0] != &v9)
LABEL_9:
    free(v6);
LABEL_10:
  if (v10 != v12)
    free(v10);
  return v5;
}

uint64_t mlir::OpInterface<mlir::LoopLikeOpInterface,mlir::detail::LoopLikeOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
          v31 = 75;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::LoopLikeOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
          v31 = 75;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::LoopLikeOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      v23 = 75;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[148];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<std::unique_ptr<mlir::Region>>(uint64_t a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  mlir::Region *v24;
  void *v25;
  int v26;
  unsigned int v27;
  unint64_t v29;

  v29 = 0;
  v4 = (char *)(a1 + 16);
  v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v29);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = 8 * v6;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)&v5[8 * v6] = v8;
  v9 = *(char **)a1;
  v10 = *(char **)a1;
  if (!(_DWORD)v6)
    goto LABEL_19;
  v11 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v11 < 0xB)
  {
    v12 = v5;
LABEL_12:
    v21 = &v9[v7];
    do
    {
      v22 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      v10 += 8;
      *(_QWORD *)v12 = v22;
      v12 += 8;
    }
    while (v10 != v21);
    goto LABEL_14;
  }
  v13 = v9 >= &v5[v7] || v5 >= &v9[v7];
  v12 = v5;
  if (!v13)
    goto LABEL_12;
  v14 = v11 + 1;
  v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
  v12 = &v5[v15];
  v10 = &v9[v15];
  v16 = (__int128 *)(v9 + 16);
  v17 = v5 + 16;
  v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v19 = *(v16 - 1);
    v20 = *v16;
    *(v16 - 1) = 0uLL;
    *v16 = 0uLL;
    *(v17 - 1) = v19;
    *v17 = v20;
    v16 += 2;
    v17 += 2;
    v18 -= 4;
  }
  while (v18);
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_12;
LABEL_14:
  v23 = *(_QWORD *)a1 - 8;
  do
  {
    v24 = *(mlir::Region **)(v23 + v7);
    *(_QWORD *)(v23 + v7) = 0;
    if (v24)
    {
      mlir::Region::~Region(v24);
      operator delete(v25);
    }
    v7 -= 8;
  }
  while (v7);
  v10 = *(char **)a1;
LABEL_19:
  v26 = v29;
  if (v10 != v4)
    free(v10);
  *(_QWORD *)a1 = v5;
  v27 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 12) = v26;
  return (uint64_t)&v5[8 * v27 - 8];
}

uint64_t mlir::RegisteredOperationName::insert<mlir::scf::ExecuteRegionOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"scf.execute_region", 18, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ExecuteRegionOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E3A418;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::scf::IfOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"scf.if", 6, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E3A4E0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::scf::IndexSwitchOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"scf.index_switch", 16, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::IndexSwitchOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E3A288;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::scf::IndexSwitchOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::scf::ReduceOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"scf.reduce", 10, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ReduceOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E3A8C8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::scf::ReduceReturnOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ReduceReturnOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ReduceReturnOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"scf.reduce.return", 17, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ReduceReturnOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E3A350;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::scf::WhileOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"scf.while", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E3A670;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ConditionOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.condition", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E3A0F8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::ConditionOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>::getSuccessorRegions;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      v15 = 89;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[173], v2);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>::getMutableSuccessorOperands@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  if ((*(_BYTE *)(a1 + 46) & 0x80) != 0)
    v2 = *(_DWORD *)(a1 + 68) - 1;
  else
    v2 = -1;
  return mlir::MutableOperandRange::MutableOperandRange(a2, a1, 1, v2, 0, 0);
}

void mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>::getSuccessorRegions(uint64_t a1, mlir::Operation *a2, _QWORD **a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;

  v5 = a2;
  mlir::scf::ConditionOp::getSuccessorRegions(&v5, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ConditionOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ConditionOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ConditionOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  __guard *v20;
  __guard v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  __guard v149;
  __guard v150;
  __guard v151;
  __guard v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __guard v158;
  __guard v159;
  __guard v160;
  __guard v161;
  __guard v162;
  __guard v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v210 = 83;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v210 = 97;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[197];
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<Empty>]";
      v210 = 107;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[437];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      v210 = 103;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[459];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = p_vtable[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[158];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v210 = 84;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v32[190] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::scf::ConditionOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::scf::ConditionOp>,mlir::OpTrait::ZeroResults<mlir::scf::ConditionOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::ConditionOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::scf::ConditionOp>,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<mlir::scf::ConditionOp>,mlir::OpTrait::OpInvariants<mlir::scf::ConditionOp>,mlir::RegionBranchTerminatorOpInterface::Trait<mlir::scf::ConditionOp>,mlir::ConditionallySpeculatable::Trait<mlir::scf::ConditionOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::scf::ConditionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::scf::ConditionOp>,mlir::OpTrait::IsTerminator<mlir::scf::ConditionOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::scf::ConditionOp>,mlir::OpTrait::ZeroResults<mlir::scf::ConditionOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::ConditionOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::scf::ConditionOp>,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<mlir::scf::ConditionOp>,mlir::OpTrait::OpInvariants<mlir::scf::ConditionOp>,mlir::RegionBranchTerminatorOpInterface::Trait<mlir::scf::ConditionOp>,mlir::ConditionallySpeculatable::Trait<mlir::scf::ConditionOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::scf::ConditionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::scf::ConditionOp>,mlir::OpTrait::IsTerminator<mlir::scf::ConditionOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
      && mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<mlir::scf::ConditionOp>::verifyTrait((uint64_t *)a1)
      && mlir::complex::__mlir_ods_local_type_constraint_ComplexOps3((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<mlir::scf::ConditionOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  char *v30;
  const char *v31;
  const void **v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id)
        return 1;
    }
  }
  v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    v35 = "expects parent op ";
    v36 = 18;
    v4 = &v34;
    v5 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        v29 = (char *)&v34 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v5 = (char *)v39;
        v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = &v34;
        v5 = (char *)v39;
      }
    }
    v6 = &v5[24 * v40];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v40;
  }
  v31 = "'";
  v8 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  v9 = (uint64_t)v8;
  v37[0] = "scf.while";
  v37[1] = 9;
  if (*v8)
  {
    v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(_QWORD *)v9)
    {
      v10 = v9 + 24;
      v11 = *(_QWORD *)(v9 + 24);
      LODWORD(v34) = 3;
      v35 = "'";
      v36 = 1;
      v12 = *(unsigned int *)(v9 + 32);
      v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        v27 = v12 + 1;
        v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = &v34;
        }
      }
      v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

uint64_t mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a3;
  mlir::RewritePatternSet::addImpl<SingleBlockExecuteInliner,mlir::MLIRContext *&>(a2, 0, 0, &v4);
  mlir::RewritePatternSet::addImpl<MultiBlockExecuteInliner,mlir::MLIRContext *&>(a2, 0, 0, &v4);
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::scf::ExecuteRegionOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  mlir::Operation *v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::areTypesCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[160], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  else
    return 0;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  uint64_t v6;

  v6 = a2;
  *(_QWORD *)&result = mlir::memref::AllocaScopeOp::getSuccessorRegions((uint64_t)&v6, 0, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v5;

  v5 = a2;
  *(_QWORD *)&result = mlir::memref::AllocaScopeOp::getSuccessorRegions((uint64_t)&v5, a3, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a5 + 12 * v7;
  v9 = v6;
  do
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __guard v84;
  __guard v85;
  __guard v86;
  __guard v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  unint64_t v100;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v93 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v25 = v24;
    a1 = v93;
    if (v25)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v100 = 81;
      v26 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v26)
        v27 = v26;
      else
        v27 = v100;
      v28 = &v99[v27];
      v29 = v100 - v27;
      if (v100 - v27 >= 0x12)
        v30 = 18;
      else
        v30 = v100 - v27;
      v31 = v29 - v30;
      if (v31 >= v31 - 1)
        v32 = v31 - 1;
      else
        v32 = v31;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v93;
    }
  }
  v3 = v2[210];
  if ((v4 & 1) == 0)
  {
    v88 = v3;
    v94 = a1;
    v34 = v33;
    v3 = v88;
    a1 = v94;
    if (v34)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v100 = 87;
      v35 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v35)
        v36 = v35;
      else
        v36 = v100;
      v37 = &v99[v36];
      v38 = v100 - v36;
      if (v100 - v36 >= 0x12)
        v39 = 18;
      else
        v39 = v100 - v36;
      v40 = v38 - v39;
      if (v40 >= v40 - 1)
        v41 = v40 - 1;
      else
        v41 = v40;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      v3 = v88;
      a1 = v94;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v89 = v3;
    v95 = a1;
    v84 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v84;
    v3 = v89;
    v43 = v42;
    a1 = v95;
    if (v43)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v100 = 86;
      v44 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v44)
        v45 = v44;
      else
        v45 = v100;
      v46 = &v99[v45];
      v47 = v100 - v45;
      if (v100 - v45 >= 0x12)
        v48 = 18;
      else
        v48 = v100 - v45;
      v49 = v47 - v48;
      if (v49 >= v49 - 1)
        v50 = v49 - 1;
      else
        v50 = v49;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v84;
      v3 = v89;
      a1 = v95;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v90 = v3;
    v96 = a1;
    v81 = v9;
    v85 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v81;
    v6 = v85;
    v52 = v51;
    v3 = v90;
    a1 = v96;
    if (v52)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v100 = 84;
      v53 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v53)
        v54 = v53;
      else
        v54 = v100;
      v55 = &v99[v54];
      v56 = v100 - v54;
      if (v100 - v54 >= 0x12)
        v57 = 18;
      else
        v57 = v100 - v54;
      v58 = v56 - v57;
      if (v58 >= v58 - 1)
        v59 = v58 - 1;
      else
        v59 = v58;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v81;
      v6 = v85;
      v3 = v90;
      a1 = v96;
    }
  }
  v12 = v11[193];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v91 = v3;
    v97 = a1;
    v82 = v9;
    v86 = v6;
    v79 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v79;
    v9 = v82;
    v6 = v86;
    v3 = v91;
    v61 = v60;
    a1 = v97;
    if (v61)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v100 = 84;
      v62 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v62)
        v63 = v62;
      else
        v63 = v100;
      v64 = &v99[v63];
      v65 = v100 - v63;
      if (v100 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v100 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v79;
      v9 = v82;
      v6 = v86;
      v3 = v91;
      a1 = v97;
    }
  }
  v15 = v14[192];
  if ((v16 & 1) == 0)
  {
    v92 = v3;
    v98 = a1;
    v83 = v9;
    v87 = v6;
    v78 = v15;
    v80 = v12;
    v15 = v78;
    v12 = v80;
    v9 = v83;
    v6 = v87;
    v70 = v69;
    v3 = v92;
    a1 = v98;
    if (v70)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v100 = 93;
      v71 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v71)
        v72 = v71;
      else
        v72 = v100;
      v73 = &v99[v72];
      v74 = v100 - v72;
      if (v100 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v100 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v15 = v78;
      v12 = v80;
      v9 = v83;
      v6 = v87;
      v3 = v92;
      a1 = v98;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v17[23] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::scf::ExecuteRegionOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(unsigned int *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unsigned int *v9;

  if (!mlir::OpTrait::impl::verifyOneRegion((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroOperands((mlir::OpTrait::impl *)a1, v4))
  {
    return 0;
  }
  v5 = a1[9];
  if (a1[9])
    v6 = (uint64_t)(a1 - 4);
  else
    v6 = 0;
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v6, i);
  }
  v9 = a1;
  return mlir::scf::ExecuteRegionOp::verify((uint64_t **)&v9) != 0;
}

BOOL mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyTypesAlongControlFlowEdges(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.for", 7, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E3A5A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::scf::ForOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::ForOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x68uLL);
  *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::replaceWithAdditionalYields;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[148], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  Operation *v4;
  uint64_t v6;

  v6 = a3;
  v4 = (Operation *)*((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2)
    return 0;
  else
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  double result;

  v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  else
    v3 = 0;
  a2[2] = v3;
  *a2 = a2 + 2;
  *(_QWORD *)&result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::promoteIfSingleIteration(int a1, uint64_t a2, mlir::RewriterBase *a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::scf::ForOp::promoteIfSingleIteration((mlir::scf::ForOp *)&v4, a3);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleInductionVar(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  return **(_QWORD **)(v3 + 48);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleLowerBound(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) | 4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleStep(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 88) | 4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleUpperBound(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) | 4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getInitsMutable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v5[4];
  void *v6;
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    v2 = *(_DWORD *)(a2 + 68) - 3;
  else
    v2 = -3;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v5, a2, 3, v2, 0, 0);
  v3 = mlir::MutableOperandRange::operator mlir::OperandRange(v5);
  if (v6 != v7)
    free(v6);
  return v3;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getRegionIterArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  return *(_QWORD *)(v3 + 48) + 8;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getYieldedValuesMutable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::GenericProgramPoint **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v8[4];
  void *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = (mlir::GenericProgramPoint **)(v2 - 8);
  else
    v3 = 0;
  mlir::Block::getTerminator(v3);
  if ((*(_BYTE *)(v4 + 46) & 0x80) != 0)
    v5 = *(_DWORD *)(v4 + 68);
  else
    v5 = 0;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v8, v4, 0, v5, 0, 0);
  v6 = mlir::MutableOperandRange::operator mlir::OperandRange(v8);
  if (v9 != v10)
    free(v9);
  return v6;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getLoopResults(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(a1 + 36);
  v3 = a1 - 16;
  if (!(_DWORD)v2)
    v3 = 0;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 1;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::replaceWithAdditionalYields(mlir::GenericProgramPoint *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, unint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  mlir::GenericProgramPoint *v7;

  v7 = a1;
  mlir::scf::ForOp::replaceWithAdditionalYields(&v7, a2, a3, a4, a5, a6, a7);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ForOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ForOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  void *__p;
  unsigned int v7;
  char v8;

  v5 = a2;
  mlir::scf::ForOp::getConstantStep((mlir::scf::ForOp *)&v5, (uint64_t)&__p);
  if (!v8)
    return 0;
  v2 = v7;
  if (v7 < 0x41)
  {
    if (__p != (void *)1)
      goto LABEL_9;
LABEL_7:
    v3 = 0;
    if (v2 < 0x41)
      goto LABEL_12;
    goto LABEL_10;
  }
  if (v2 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40 && *(_QWORD *)__p == 1)
    goto LABEL_7;
LABEL_9:
  v3 = 1;
  if (v2 < 0x41)
    goto LABEL_12;
LABEL_10:
  if (__p)
    operator delete[](__p);
LABEL_12:
  if (v3)
    return 0;
  return 2;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::areTypesCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[160], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 96;
  else
    return 96;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  uint64_t v6;

  v6 = a2;
  *(_QWORD *)&result = mlir::scf::ForOp::getSuccessorRegions(&v6, a2, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v5;

  v5 = a2;
  *(_QWORD *)&result = mlir::scf::ForOp::getSuccessorRegions(&v5, a2, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a5 + 12 * v7;
  v9 = v6;
  do
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  __guard *v11;
  __guard v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  __guard *v26;
  __guard v27;
  unsigned __int8 v28;
  void **p_vtable;
  void *v30;
  unsigned __int8 v31;
  __guard *v32;
  __guard v33;
  unsigned __int8 v34;
  void **v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  __guard v156;
  void *v157;
  void *v158;
  __guard v159;
  __guard v160;
  __guard v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __guard v171;
  __guard v172;
  __guard v173;
  __guard v174;
  __guard v175;
  __guard v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __guard v184;
  __guard v185;
  __guard v186;
  __guard v187;
  __guard v188;
  __guard v189;
  __guard v190;
  __guard v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __guard v201;
  __guard v202;
  __guard v203;
  __guard v204;
  __guard v205;
  __guard v206;
  __guard v207;
  __guard v208;
  __guard v209;
  __guard v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v235 = 81;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[210];
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v235 = 87;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[196];
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<3>::Impl<Empty>]";
      v235 = 97;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<3u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<3u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[307];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v235 = 83;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[184];
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::Yi"
             "eldOp>::Impl<Empty>]";
      v235 = 127;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[439];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[192];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      v235 = 96;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[203];
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      v235 = 89;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[441];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = p_vtable[486];
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v235 = 93;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[23];
  v35 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v235 = 97;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v30 == a1
      || v33 == (_QWORD)a1
      || v35[502] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::scf::ForOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)3))
    return 0;
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
    return 0;
  v5 = a1;
  if (!mlir::scf::ForOp::verifyInvariantsImpl((uint64_t **)&v5))
    return 0;
  v5 = a1;
  return mlir::scf::ForOp::verify((uint64_t **)&v5) != 0;
}

BOOL mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;
  mlir::Operation *v3;
  mlir::detail *v5;

  if (!mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::verifyRegionTrait((uint64_t)a1)
    || !mlir::detail::verifyLoopLikeOpInterface(a1, v2)
    || !mlir::detail::verifyTypesAlongControlFlowEdges(a1, v3))
  {
    return 0;
  }
  v5 = a1;
  return mlir::scf::ForOp::verifyRegions((uint64_t **)&v5) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::verifyRegionTrait(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AttrData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void ***v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  BOOL v33;
  char *v34;
  const void **v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  _QWORD v41[4];
  __int16 v42;
  _QWORD v43[4];
  __int16 v44;
  const void **v45[4];
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (!(_DWORD)v1)
    return 1;
  v3 = 0;
  v4 = a1 + 64;
  v5 = 24 * v1;
  while (1)
  {
    v6 = *(unsigned int *)(a1 + 44);
    if ((v6 & 0x7FFFFF) == 0)
      break;
    v7 = (_QWORD *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                  + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
    if (v7 != (_QWORD *)*v7)
      goto LABEL_8;
LABEL_3:
    v3 += 3;
    if ((_QWORD *)v5 == v3)
      return 1;
  }
  v7 = v3;
  if (v3 == (_QWORD *)*v3)
    goto LABEL_3;
LABEL_8:
  v8 = v7[1];
  if (v8)
    v9 = v8 - 8;
  else
    v9 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v9 + 32));
  v11 = *(_QWORD *)(v10 + 48);
  if (*(_UNKNOWN **)(v11 + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
    goto LABEL_3;
  v40 = 1283;
  v39[0] = "expects regions to end with '";
  v39[2] = "scf.yield";
  v39[3] = 9;
  v41[0] = v39;
  v41[2] = "', found '";
  v42 = 770;
  v47 = *(_QWORD *)(v11 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v47);
  v43[0] = v41;
  v43[2] = AttrData;
  v43[3] = v13;
  v44 = 1282;
  v45[0] = (const void **)v43;
  v45[2] = (const void **)"'";
  v46 = 770;
  mlir::Operation::emitOpError((uint64_t *)a1, v45, (uint64_t)&v47);
  v14 = mlir::Diagnostic::attachNote(&v48, 0, 0);
  v15 = v14 + 16;
  v16 = *(_QWORD *)(v14 + 16);
  LODWORD(v35) = 3;
  v36 = (uint64_t)"in custom textual format, the absence of terminator implies '";
  v37 = 61;
  v17 = *(unsigned int *)(v14 + 24);
  v18 = &v35;
  if (v17 >= *(_DWORD *)(v14 + 28))
  {
    v32 = v17 + 1;
    v33 = v16 + 24 * v17 > (unint64_t)&v35;
    if (v16 <= (unint64_t)&v35 && v33)
    {
      v34 = (char *)&v35 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = (const void ***)&v34[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = &v35;
    }
  }
  v19 = v16 + 24 * *(unsigned int *)(v14 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = v18[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(v14 + 24);
  v38 = 262;
  v35 = (const void **)"scf.yield";
  v36 = 9;
  v21 = mlir::Diagnostic::operator<<(v14, &v35);
  mlir::Diagnostic::operator<<(v21, 39);
  v22 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v47)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  if (v55)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v54;
      v25 = __p;
      if (v54 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v54 = v23;
      operator delete(v25);
    }
    v26 = v51;
    if (v51)
    {
      v27 = v52;
      v28 = v51;
      if (v52 != v51)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v51;
      }
      v52 = v26;
      operator delete(v28);
    }
    if (v49 != &v50)
      free(v49);
  }
  return v22;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.forall", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E3A800;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::scf::ForallOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t (*)()))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::ForallOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  _QWORD *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::scf::ForallOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _DWORD *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::scf::ForallOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::scf::ForallOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::scf::ForallOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::getOpPropertyByteSize()
{
  return 48;
}

double mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::initProperties(uint64_t a1, uint64_t a2, _OWORD *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[2];
    a3[1] = a4[1];
    a3[2] = v5;
    *a3 = v4;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::scf::ForallOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::scf::ForallOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] != a2[2])
    return 0;
  if (a3[3] != a2[3])
    return 0;
  return a3[4] == a2[4] && a3[5] == a2[5];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::scf::ForallOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::scf::ForallOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x68uLL);
  *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::replaceWithAdditionalYields;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[148], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  Operation *v4;
  uint64_t v6;

  v6 = a3;
  v4 = (Operation *)*((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2)
    return 0;
  else
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  double result;

  v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  else
    v3 = 0;
  a2[2] = v3;
  *a2 = a2 + 2;
  *(_QWORD *)&result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::promoteIfSingleIteration(int a1, uint64_t a2, mlir::RewriterBase *a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::scf::ForallOp::promoteIfSingleIteration((mlir::scf::ForallOp *)&v4, a3);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleInductionVar(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::scf::ForallOp::getSingleInductionVar((mlir::scf::ForallOp *)&v3);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleLowerBound(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8[2];
  _QWORD v9[7];

  v9[6] = *MEMORY[0x1E0C80C00];
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v2 = 0;
  v3 = *(void **)(v2 + 8);
  v7 = a2;
  v8[0] = v3;
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v8);
  v4 = 0;
  if (v5 == 1)
  {
    mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v7, (uint64_t)v8);
    v4 = *(_QWORD *)v8[0];
    if (v8[0] != v9)
      free(v8[0]);
  }
  return v4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleStep(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8[2];
  _QWORD v9[7];

  v9[6] = *MEMORY[0x1E0C80C00];
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v2 = 0;
  v3 = *(void **)(v2 + 8);
  v7 = a2;
  v8[0] = v3;
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v8);
  v4 = 0;
  if (v5 == 1)
  {
    mlir::scf::ForallOp::getMixedStep((mlir::scf::ForallOp *)&v7, (uint64_t)v8);
    v4 = *(_QWORD *)v8[0];
    if (v8[0] != v9)
      free(v8[0]);
  }
  return v4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleUpperBound(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8[2];
  _QWORD v9[7];

  v9[6] = *MEMORY[0x1E0C80C00];
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v2 = 0;
  v3 = *(void **)(v2 + 8);
  v7 = a2;
  v8[0] = v3;
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v8);
  v4 = 0;
  if (v5 == 1)
  {
    mlir::scf::ForallOp::getMixedUpperBound((mlir::scf::ForallOp *)&v7, (uint64_t)v8);
    v4 = *(_QWORD *)v8[0];
    if (v8[0] != v9)
      free(v8[0]);
  }
  return v4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getInitsMutable()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getRegionIterArgs()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getYieldedValuesMutable()
{
  return 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getLoopResults(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::replaceWithAdditionalYields(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::areTypesCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[160], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  else
    return 0;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  uint64_t v6;

  v6 = a2;
  *(_QWORD *)&result = mlir::scf::ForallOp::getSuccessorRegions((uint64_t)&v6, a2, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v5;

  v5 = a2;
  *(_QWORD *)&result = mlir::scf::ForallOp::getSuccessorRegions((uint64_t)&v5, a2, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a5 + 12 * v7;
  v9 = v6;
  do
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getDpsInitsMutable;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
      v15 = 83;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[488], v2);
}

uint64_t mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getDpsInitsMutable@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  mlir::MLIRContext *Context;
  unint64_t v10;
  uint64_t v11;
  __int128 v13;
  int v14;
  __int128 v15;

  v4 = a1 + 64;
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v5 = (_DWORD *)(a1 + 64 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1));
  else
    v5 = 0;
  v6 = v5[11];
  v7 = v5[9] + v5[8] + v5[10];
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 96) + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 48) + 104) - 8);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v10 = v4 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1);
  else
    v10 = 0;
  v11 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v10 + 32, 4);
  mlir::NamedAttribute::NamedAttribute(&v13, v8, v11);
  v14 = 3;
  v15 = v13;
  return mlir::MutableOperandRange::MutableOperandRange(a2, a1, v7, v6, &v14, 1);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  __guard *v20;
  __guard v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **p_vtable;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  __guard *v32;
  __guard v33;
  unsigned __int8 v34;
  void **v35;
  void *v36;
  unsigned __int8 v37;
  __guard *v38;
  __guard v39;
  unsigned __int8 v40;
  __guard *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  __guard v182;
  void *v183;
  void *v184;
  __guard v185;
  __guard v186;
  __guard v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __guard v203;
  __guard v204;
  __guard v205;
  __guard v206;
  __guard v207;
  __guard v208;
  __guard v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __guard v218;
  __guard v219;
  __guard v220;
  __guard v221;
  __guard v222;
  __guard v223;
  __guard v224;
  __guard v225;
  __guard v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __guard v248;
  __guard v249;
  __guard v250;
  __guard v251;
  __guard v252;
  __guard v253;
  __guard v254;
  __guard v255;
  __guard v256;
  __guard v257;
  __guard v258;
  __guard v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  const char *v287;
  unint64_t v288;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v288 = 81;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v273;
    }
  }
  v3 = v2[210];
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v288 = 87;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v288 = 88;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[198];
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v288 = 96;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[423];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v288 = 83;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[184];
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::In"
             "ParallelOp>::Impl<Empty>]";
      v288 = 132;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[443];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = v23[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v288 = 89;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = p_vtable[481];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      v288 = 96;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = v29[203];
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      v288 = 89;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[441];
  v35 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v288 = 97;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[502];
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v288 = 93;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[23];
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface::Trait<Empty>]";
      v288 = 97;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestinationStyleOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || v36 == a1
      || v39 == (_QWORD)a1
      || v41[445] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::scf::ForallOp::print((mlir::scf::ForallOp *)&v8, a3);
}

BOOL mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
    return 0;
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
    return 0;
  v5 = a1;
  if (!mlir::scf::ForallOp::verifyInvariantsImpl((uint64_t **)&v5))
    return 0;
  v5 = a1;
  return mlir::scf::ForallOp::verify((uint64_t **)&v5);
}

BOOL mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;
  mlir::Operation *v3;
  mlir::Operation *v4;

  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::scf::ForallOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyLoopLikeOpInterface(a1, v2)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v3)
      && mlir::detail::verifyDestinationStyleOpInterface(a1, v4) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::scf::ForallOp>::verifyRegionTrait(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AttrData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void ***v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  BOOL v33;
  char *v34;
  const void **v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  _QWORD v41[4];
  __int16 v42;
  _QWORD v43[4];
  __int16 v44;
  const void **v45[4];
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (!(_DWORD)v1)
    return 1;
  v3 = 0;
  v4 = a1 + 64;
  v5 = 24 * v1;
  while (1)
  {
    v6 = *(unsigned int *)(a1 + 44);
    if ((v6 & 0x7FFFFF) == 0)
      break;
    v7 = (_QWORD *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                  + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
    if (v7 != (_QWORD *)*v7)
      goto LABEL_8;
LABEL_3:
    v3 += 3;
    if ((_QWORD *)v5 == v3)
      return 1;
  }
  v7 = v3;
  if (v3 == (_QWORD *)*v3)
    goto LABEL_3;
LABEL_8:
  v8 = v7[1];
  if (v8)
    v9 = v8 - 8;
  else
    v9 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v9 + 32));
  v11 = *(_QWORD *)(v10 + 48);
  if (*(_UNKNOWN **)(v11 + 16) == &mlir::detail::TypeIDResolver<mlir::scf::InParallelOp,void>::id)
    goto LABEL_3;
  v40 = 1283;
  v39[0] = "expects regions to end with '";
  v39[2] = "scf.forall.in_parallel";
  v39[3] = 22;
  v41[0] = v39;
  v41[2] = "', found '";
  v42 = 770;
  v47 = *(_QWORD *)(v11 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v47);
  v43[0] = v41;
  v43[2] = AttrData;
  v43[3] = v13;
  v44 = 1282;
  v45[0] = (const void **)v43;
  v45[2] = (const void **)"'";
  v46 = 770;
  mlir::Operation::emitOpError((uint64_t *)a1, v45, (uint64_t)&v47);
  v14 = mlir::Diagnostic::attachNote(&v48, 0, 0);
  v15 = v14 + 16;
  v16 = *(_QWORD *)(v14 + 16);
  LODWORD(v35) = 3;
  v36 = (uint64_t)"in custom textual format, the absence of terminator implies '";
  v37 = 61;
  v17 = *(unsigned int *)(v14 + 24);
  v18 = &v35;
  if (v17 >= *(_DWORD *)(v14 + 28))
  {
    v32 = v17 + 1;
    v33 = v16 + 24 * v17 > (unint64_t)&v35;
    if (v16 <= (unint64_t)&v35 && v33)
    {
      v34 = (char *)&v35 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = (const void ***)&v34[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = &v35;
    }
  }
  v19 = v16 + 24 * *(unsigned int *)(v14 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = v18[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(v14 + 24);
  v38 = 262;
  v35 = (const void **)"scf.forall.in_parallel";
  v36 = 22;
  v21 = mlir::Diagnostic::operator<<(v14, &v35);
  mlir::Diagnostic::operator<<(v21, 39);
  v22 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v47)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  if (v55)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v54;
      v25 = __p;
      if (v54 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v54 = v23;
      operator delete(v25);
    }
    v26 = v51;
    if (v51)
    {
      v27 = v52;
      v28 = v51;
      if (v52 != v51)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v51;
      }
      v52 = v26;
      operator delete(v28);
    }
    if (v49 != &v50)
      free(v49);
  }
  return v22;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::scf::IfOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::scf::IfOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::printAssembly(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  mlir::Operation *v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::areTypesCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[160], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  else
    return 0;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getEntrySuccessorRegions(uint64_t a1, unsigned int *a2, _QWORD **a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;

  v5 = a2;
  mlir::scf::IfOp::getEntrySuccessorRegions(&v5, a3, a4, a5);
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v5;

  v5 = a2;
  *(_QWORD *)&result = mlir::scf::IfOp::getSuccessorRegions((uint64_t)&v5, a3, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4, uint64_t a5)
{
  mlir::scf::IfOp::getRegionInvocationBounds(a1, a3, a4, a5);
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  _OWORD v15[3];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v17 = a6;
  BYTE8(v17) = 0;
  LOBYTE(v18) = 0;
  *((_QWORD *)&v18 + 1) = a9;
  *(_QWORD *)&v19 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v17);
    if ((_BYTE)v18)
      LOBYTE(v18) = 0;
    a1 = mlir::OperationName::OperationName((char *)&v17 + 8, "scf.if", 6, Context);
    LOBYTE(v18) = 1;
  }
  *((_QWORD *)&v19 + 1) = a4;
  v20 = a5;
  v15[0] = v17;
  v15[1] = v18;
  v16 = a5;
  v15[2] = v19;
  return mlir::scf::IfOp::inferReturnTypes(a1, a2, a3, (uint64_t)v15, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::scf::IfOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::scf::IfOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v13;
  uint64_t Context;
  uint64_t v16;
  void *v17;
  unint64_t v19[2];
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  _OWORD v25[3];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v13 = a3;
  v31 = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x400000000;
  *(_QWORD *)&v27 = a6;
  BYTE8(v27) = 0;
  LOBYTE(v28) = 0;
  *((_QWORD *)&v28 + 1) = a9;
  *(_QWORD *)&v29 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v27);
    if ((_BYTE)v28)
      LOBYTE(v28) = 0;
    a1 = mlir::OperationName::OperationName((char *)&v27 + 8, "scf.if", 6, Context);
    LOBYTE(v28) = 1;
  }
  *((_QWORD *)&v29 + 1) = a4;
  v30 = a5;
  v25[0] = v27;
  v25[1] = v28;
  v26 = a5;
  v25[2] = v29;
  if (!mlir::scf::IfOp::inferReturnTypes(a1, a2, a3, (uint64_t)v25, (uint64_t)&v22))
  {
    v16 = 0;
    v17 = v22;
    if (v22 == v24)
      return v16;
    goto LABEL_11;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v20, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v21 == v19[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v20, 0, v20, v21, v19[0], 0, v19[0], v21))
  {
    v16 = 1;
    v17 = v22;
    if (v22 == v24)
      return v16;
    goto LABEL_11;
  }
  *(_QWORD *)&v27 = "scf.if";
  *((_QWORD *)&v27 + 1) = 6;
  v16 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v13, "'", (uint64_t)&v27, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v17 = v22;
  if (v22 != v24)
LABEL_11:
    free(v17);
  return v16;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::scf::IfOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>(void *a1)
{
  unsigned __int8 v1;
  __guard *v2;
  __guard v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  __guard *v26;
  __guard v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  __guard *v32;
  __guard v33;
  unsigned __int8 v34;
  void **p_vtable;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  __guard v156;
  uint64_t v157;
  uint64_t v158;
  __guard v159;
  __guard v160;
  __guard v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __guard v171;
  __guard v172;
  __guard v173;
  __guard v174;
  __guard v175;
  __guard v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __guard v201;
  __guard v202;
  __guard v203;
  __guard v204;
  __guard v205;
  __guard v206;
  __guard v207;
  __guard v208;
  __guard v209;
  __guard v210;
  __guard v211;
  __guard v212;
  __guard v213;
  __guard v214;
  __guard v215;
  __guard v216;
  __guard v217;
  __guard v218;
  __guard v219;
  __guard v220;
  __guard v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NRegions<2>::Impl<Empty>]";
      v235 = 89;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NRegions<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NRegions<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      a1 = v222;
    }
  }
  v3 = v2[309];
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v235 = 87;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v235 = 82;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[181];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v235 = 83;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[184];
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::Yi"
             "eldOp>::Impl<Empty>]";
      v235 = 127;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[439];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      v235 = 89;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[199];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[192];
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v235 = 93;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[23];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v235 = 90;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[152];
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::InferTypeOpAdaptor<Empty>]";
      v235 = 90;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::OpTrait::InferTypeOpAdaptor<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::InferTypeOpAdaptor>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[37];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v235 = 97;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || p_vtable[502] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::scf::IfOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants(mlir::OpTrait::impl *a1)
{
  mlir::OpTrait::impl *v3;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::NRegions<2u>::Impl<mlir::scf::IfOp>,mlir::OpTrait::VariadicResults<mlir::scf::IfOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::IfOp>,mlir::OpTrait::OneOperand<mlir::scf::IfOp>,mlir::OpTrait::SingleBlock<mlir::scf::IfOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>,mlir::OpTrait::NoRegionArguments<mlir::scf::IfOp>,mlir::OpTrait::OpInvariants<mlir::scf::IfOp>,mlir::RegionBranchOpInterface::Trait<mlir::scf::IfOp>,mlir::InferTypeOpInterface::Trait<mlir::scf::IfOp>,mlir::OpTrait::InferTypeOpAdaptor<mlir::scf::IfOp>,mlir::OpTrait::HasRecursiveMemoryEffects<mlir::scf::IfOp>>(a1))
    return 0;
  v3 = a1;
  return mlir::scf::IfOp::verify((uint64_t **)&v3) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::NRegions<2u>::Impl<mlir::scf::IfOp>,mlir::OpTrait::VariadicResults<mlir::scf::IfOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::IfOp>,mlir::OpTrait::OneOperand<mlir::scf::IfOp>,mlir::OpTrait::SingleBlock<mlir::scf::IfOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>,mlir::OpTrait::NoRegionArguments<mlir::scf::IfOp>,mlir::OpTrait::OpInvariants<mlir::scf::IfOp>,mlir::RegionBranchOpInterface::Trait<mlir::scf::IfOp>,mlir::InferTypeOpInterface::Trait<mlir::scf::IfOp>,mlir::OpTrait::InferTypeOpAdaptor<mlir::scf::IfOp>,mlir::OpTrait::HasRecursiveMemoryEffects<mlir::scf::IfOp>>(mlir::OpTrait::impl *a1)
{
  mlir::Operation *v2;
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyNRegions(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v2)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v3)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)
    || !mlir::OpTrait::impl::verifyNoRegionArguments(a1, v4))
  {
    return 0;
  }
  v6 = a1;
  return mlir::scf::IfOp::verifyInvariantsImpl((uint64_t **)&v6);
}

BOOL mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;
  mlir::Operation *v3;

  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v2)
      && mlir::detail::verifyInferredResultTypes(a1, v3) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::InParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.forall.in_parallel", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::InParallelOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E3A1C0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::InParallelOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

